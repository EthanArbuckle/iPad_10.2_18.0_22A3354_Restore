void sub_18343BD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

void __nw_connection_group_extract_connection_for_message_block_invoke(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  int v7;
  _BOOL4 v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  NSObject *v35;
  int v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  char *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  os_log_type_t v44;
  NSObject *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  os_log_type_t v50;
  char v51;
  os_log_type_t type;
  _BYTE buf[32];
  id v54;
  _BYTE *v55;
  _BYTE v56[24];
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v3 = *(id *)(a1 + 32);
  v4 = v2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v56 = 136446210;
    *(_QWORD *)&v56[4] = "nw_connection_group_has_connection_locked";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v18, &type, &v51))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)v56 = 136446210;
        *(_QWORD *)&v56[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null group", v56, 0xCu);
      }
    }
    else if (v51)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)v56 = 136446466;
          *(_QWORD *)&v56[4] = "nw_connection_group_has_connection_locked";
          *(_WORD *)&v56[12] = 2082;
          *(_QWORD *)&v56[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null group, dumping backtrace:%{public}s", v56, 0x16u);
        }

        free(backtrace_string);
LABEL_78:
        if (!v18)
        {
LABEL_80:

          goto LABEL_81;
        }
LABEL_79:
        free(v18);
        goto LABEL_80;
      }
      if (v31)
      {
        *(_DWORD *)v56 = 136446210;
        *(_QWORD *)&v56[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null group, no backtrace", v56, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)v56 = 136446210;
        *(_QWORD *)&v56[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v43, "%{public}s called with null group, backtrace limit exceeded", v56, 0xCu);
      }
    }
LABEL_77:

    goto LABEL_78;
  }
  if (!v4)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v56 = 136446210;
    *(_QWORD *)&v56[4] = "nw_connection_group_has_connection_locked";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v18, &type, &v51))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)v56 = 136446210;
        *(_QWORD *)&v56[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null connection", v56, 0xCu);
      }
    }
    else if (v51)
    {
      v32 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      v34 = os_log_type_enabled(v19, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)v56 = 136446466;
          *(_QWORD *)&v56[4] = "nw_connection_group_has_connection_locked";
          *(_WORD *)&v56[12] = 2082;
          *(_QWORD *)&v56[14] = v32;
          _os_log_impl(&dword_182FBE000, v19, v33, "%{public}s called with null connection, dumping backtrace:%{public}s", v56, 0x16u);
        }

        free(v32);
        if (!v18)
          goto LABEL_80;
        goto LABEL_79;
      }
      if (v34)
      {
        *(_DWORD *)v56 = 136446210;
        *(_QWORD *)&v56[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v33, "%{public}s called with null connection, no backtrace", v56, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)v56 = 136446210;
        *(_QWORD *)&v56[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v44, "%{public}s called with null connection, backtrace limit exceeded", v56, 0xCu);
      }
    }
    goto LABEL_77;
  }
  *(_QWORD *)v56 = 0;
  *(_QWORD *)&v56[8] = v56;
  *(_QWORD *)&v56[16] = 0x2020000000;
  v57 = 0;
  v6 = (unsigned __int8 *)v3[13];
  if (v6)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL41nw_connection_group_has_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E14AB5F0;
    v54 = v4;
    v55 = v56;
    nw_array_apply(v6, (uint64_t)buf);

    v7 = *(unsigned __int8 *)(*(_QWORD *)&v56[8] + 24);
  }
  else
  {
    v7 = 0;
  }
  v8 = v7 == 0;
  _Block_object_dispose(v56, 8);

  if (!v8)
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v9 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v10 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v10;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v11;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] has connection %p, removing from group and returning", buf, 0x1Cu);
      }

    }
    v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v13 = *(id *)(a1 + 32);
    v14 = v12;
    v15 = v14;
    if (v13)
    {
      if (v14)
      {
        v16 = v13[13];
        if (v16)
        {
          nw_array_remove_object(v16, (uint64_t)v15);
          if (!nw_parameters_get_logging_disabled(v13[7]))
          {
            if (gLogDatapath)
            {
              if (__nwlog_connection_group_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
              v35 = (id)gconnection_groupLogObj;
              if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
              {
                v36 = *((_DWORD *)v13 + 42);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_connection_group_remove_connection_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v36;
                *(_WORD *)&buf[18] = 2112;
                *(_QWORD *)&buf[20] = v15;
                _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] removed connection %@", buf, 0x1Cu);
              }

            }
          }
        }
        goto LABEL_18;
      }
      __nwlog_obj();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_remove_connection_locked";
      v24 = (char *)_os_log_send_and_compose_impl();

      v56[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v24, v56, &type))
      {
        if (v56[0] == 17)
        {
          __nwlog_obj();
          v25 = objc_claimAutoreleasedReturnValue();
          v28 = v56[0];
          if (os_log_type_enabled(v25, (os_log_type_t)v56[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_remove_connection_locked";
            _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null connection", buf, 0xCu);
          }
        }
        else if (type)
        {
          v40 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v25 = objc_claimAutoreleasedReturnValue();
          v41 = v56[0];
          v42 = os_log_type_enabled(v25, (os_log_type_t)v56[0]);
          if (v40)
          {
            if (v42)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_connection_group_remove_connection_locked";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v40;
              _os_log_impl(&dword_182FBE000, v25, v41, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v40);
            if (!v24)
              goto LABEL_18;
            goto LABEL_102;
          }
          if (v42)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_remove_connection_locked";
            _os_log_impl(&dword_182FBE000, v25, v41, "%{public}s called with null connection, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v25 = objc_claimAutoreleasedReturnValue();
          v50 = v56[0];
          if (os_log_type_enabled(v25, (os_log_type_t)v56[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_remove_connection_locked";
            _os_log_impl(&dword_182FBE000, v25, v50, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_100;
      }
LABEL_101:
      if (!v24)
      {
LABEL_18:

        goto LABEL_88;
      }
LABEL_102:
      free(v24);
      goto LABEL_18;
    }
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_remove_connection_locked";
    v24 = (char *)_os_log_send_and_compose_impl();

    v56[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v24, v56, &type))
      goto LABEL_101;
    if (v56[0] == 17)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = v56[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v56[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (type)
    {
      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v38 = v56[0];
      v39 = os_log_type_enabled(v25, (os_log_type_t)v56[0]);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_remove_connection_locked";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v37;
          _os_log_impl(&dword_182FBE000, v25, v38, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v37);
        goto LABEL_101;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_182FBE000, v25, v38, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v49 = v56[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v56[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_182FBE000, v25, v49, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_100:

    goto LABEL_101;
  }
LABEL_81:
  if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v45 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
    {
      v46 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v46;
      *(_WORD *)&buf[18] = 2112;
      *(_QWORD *)&buf[20] = v47;
      _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] did not find connection %@, returning error", buf, 0x1Cu);
    }

  }
  v48 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v13 = *(_QWORD **)(v48 + 40);
  *(_QWORD *)(v48 + 40) = 0;
LABEL_88:

}

BOOL nw_connection_group_reinsert_extracted_connection(nw_connection_group_t group, nw_connection_t connection)
{
  nw_connection_group_t v3;
  NSObject *v4;
  NSObject *v5;
  void (**v6)(_QWORD);
  BOOL v7;
  NSObject *v8;
  int v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  int isa;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  _QWORD aBlock[4];
  NSObject *v26;
  NSObject *v27;
  _BYTE *v28;
  char v29;
  os_log_type_t type;
  _BYTE buf[24];
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = group;
  v4 = connection;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_reinsert_extracted_connection";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v12, &type, &v29))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_52;
    }
    if (!v29)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
      goto LABEL_52;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_reinsert_extracted_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_40;
  }
  if (!v4)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_reinsert_extracted_connection";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v12, &type, &v29))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null connection", buf, 0xCu);
      }
LABEL_52:

LABEL_53:
      if (v12)
        free(v12);
      goto LABEL_13;
    }
    if (!v29)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_52;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_reinsert_extracted_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_40:

    free(backtrace_string);
    goto LABEL_53;
  }
  if (SBYTE6(v3[23].isa) < 0 || SLODWORD(v3[5].isa) >= 3)
  {
    if (nw_parameters_get_logging_disabled((uint64_t)v3[7].isa))
      goto LABEL_13;
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v8 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      isa = (int)v3[21].isa;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_reinsert_extracted_connection";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = isa;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot reinsert a connection into a failed or cancelled group", buf, 0x12u);
    }
    goto LABEL_12;
  }
  if (!v3[17].isa)
  {
    if (nw_parameters_get_logging_disabled((uint64_t)v3[7].isa))
    {
LABEL_13:
      v7 = 0;
      goto LABEL_14;
    }
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v8 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v9 = (int)v3[21].isa;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_reinsert_extracted_connection";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] connection group does not have a receive handler, rejecting reinsertion", buf, 0x12u);
    }
LABEL_12:

    goto LABEL_13;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v32 = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __nw_connection_group_reinsert_extracted_connection_block_invoke;
  aBlock[3] = &unk_1E14A2D98;
  v26 = v4;
  v27 = v3;
  v28 = buf;
  v6 = (void (**)(_QWORD))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
  v6[2](v6);
  os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

  v7 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
  _Block_object_dispose(buf, 8);
LABEL_14:

  return v7;
}

void sub_18343D00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_reinsert_extracted_connection_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  void **v6;
  void **v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v19 = 0;
  nw_connection_get_group_uuid(*(void **)(a1 + 32), (unsigned __int8 *)&v18);
  v2 = *(uint64_t **)(a1 + 40);
  if (v2[15] != v18 || v2[16] != v19)
    goto LABEL_12;
  v3 = v2[13];
  v4 = *(void **)(a1 + 32);
  if (!v3 || v4 == 0)
    goto LABEL_20;
  v7 = *(void ***)(v3 + 16);
  v6 = *(void ***)(v3 + 24);
  if (v7 != v6)
  {
    while (*v7 != v4)
    {
      if (++v7 == v6)
      {
        v7 = v6;
        break;
      }
    }
  }
  if (v7 == v6)
  {
LABEL_20:
    nw_connection_reset_client(v4);
    nw_connection_group_add_connection_locked(*(NWConcrete_nw_connection_group **)(a1 + 40), *(NWConcrete_nw_connection **)(a1 + 32));
    nw_connection_start(*(nw_connection_t *)(a1 + 32));
    v11 = 1;
  }
  else
  {
LABEL_12:
    if (!nw_parameters_get_logging_disabled(v2[7]))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v8 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = *(_QWORD *)(a1 + 32);
        v10 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 168);
        v12 = 136446722;
        v13 = "nw_connection_group_reinsert_extracted_connection_block_invoke";
        v14 = 1024;
        v15 = v10;
        v16 = 2112;
        v17 = v9;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, "%{public}s [G%u] connection %@ was not extracted from this group or was already reinserted, reinsertion failed", (uint8_t *)&v12, 0x1Cu);
      }

    }
    v11 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v11;
}

BOOL nw_connection_group_add_member(void *a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  id *v8;
  id v9;
  NSObject *v10;
  int v11;
  _BOOL8 v12;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  os_log_type_t v27;
  _QWORD v28[4];
  id v29;
  NSObject *v30;
  id v31;
  _BYTE *v32;
  char v33;
  os_log_type_t v34;
  _BYTE buf[24];
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_add_member";
    v15 = (char *)_os_log_send_and_compose_impl();

    v34 = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v15, &v34, &v33))
      goto LABEL_50;
    if (v34 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = v34;
      if (os_log_type_enabled(v16, v34))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v21 = v34;
      v22 = os_log_type_enabled(v16, v34);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_add_member";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_50:
        if (!v15)
        {
LABEL_13:
          v12 = 0;
          goto LABEL_16;
        }
LABEL_51:
        free(v15);
        goto LABEL_13;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v26 = v34;
      if (os_log_type_enabled(v16, v34))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_182FBE000, v16, v26, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_49:

    goto LABEL_50;
  }
  if (!v4)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_add_member";
    v15 = (char *)_os_log_send_and_compose_impl();

    v34 = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v15, &v34, &v33))
      goto LABEL_50;
    if (v34 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v19 = v34;
      if (os_log_type_enabled(v16, v34))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v33)
    {
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v24 = v34;
      v25 = os_log_type_enabled(v16, v34);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_add_member";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v23;
          _os_log_impl(&dword_182FBE000, v16, v24, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
        if (!v15)
          goto LABEL_13;
        goto LABEL_51;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_182FBE000, v16, v24, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v27 = v34;
      if (os_log_type_enabled(v16, v34))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_182FBE000, v16, v27, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_49;
  }
  if (!nw_group_descriptor_add_endpoint(*((nw_group_descriptor_t *)v3 + 8), v4))
  {
    if (!nw_parameters_get_logging_disabled(*((_QWORD *)v3 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v10 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = *((_DWORD *)v3 + 42);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_member";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Could not add endpoint to group", buf, 0x12u);
      }

    }
    goto LABEL_13;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v36 = 1;
  v6 = (os_unfair_lock_s *)*((_QWORD *)v3 + 9);
  if (v6)
  {
    v7 = v6 + 24;
    v8 = v6;
    os_unfair_lock_lock(v7);
    v9 = v8[6];
    os_unfair_lock_unlock(v7);

    if (v9)
    {
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 3221225472;
      v28[2] = __nw_connection_group_add_member_block_invoke;
      v28[3] = &unk_1E149B5E0;
      v29 = v3;
      v30 = v5;
      v32 = buf;
      v9 = v9;
      v31 = v9;
      nw_path_enumerate_group_options(v9, v28);

    }
  }
  else
  {
    v9 = 0;
  }
  v12 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;

  _Block_object_dispose(buf, 8);
LABEL_16:

  return v12;
}

void sub_18343D83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose((const void *)(v23 - 96), 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_add_member_block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const unsigned __int8 *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v4 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      v8 = 136447234;
      v9 = "nw_connection_group_add_member_block_invoke";
      v10 = 1024;
      v11 = v6;
      v12 = 2112;
      v13 = v5;
      v14 = 1042;
      v15 = 16;
      v16 = 2098;
      v17 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s [G%u] Adding member '%@' to Group Agent UUID=(%{public,uuid_t}.16P)", (uint8_t *)&v8, 0x2Cu);
    }

  }
  v7 = nw_array_create();
  nw_array_append(v7, *(void **)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = nw_path_group_member_action(*(void **)(a1 + 48), a2, 133, (void *)v7);

}

void sub_18343D9E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_group_remove_member(void *a1, void *a2)
{
  void **v3;
  id v4;
  void *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  id *v8;
  id v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[4];
  void **v25;
  id v26;
  id v27;
  char v28;
  os_log_type_t v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_connection_group_remove_member";
    v11 = (char *)_os_log_send_and_compose_impl();

    v29 = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v11, &v29, &v28))
      goto LABEL_42;
    if (v29 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = v29;
      if (os_log_type_enabled(v12, v29))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_connection_group_remove_member";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = v29;
      v18 = os_log_type_enabled(v12, v29);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_connection_group_remove_member";
          v32 = 2082;
          v33 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_connection_group_remove_member";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = v29;
      if (os_log_type_enabled(v12, v29))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_connection_group_remove_member";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (v4)
  {
    nw_group_descriptor_remove_endpoint(v3[8], v4);
    v6 = (os_unfair_lock_s *)v3[9];
    if (v6)
    {
      v7 = v6 + 24;
      v8 = v6;
      os_unfair_lock_lock(v7);
      v9 = v8[6];
      os_unfair_lock_unlock(v7);

      if (v9)
      {
        v24[0] = MEMORY[0x1E0C809B0];
        v24[1] = 3221225472;
        v24[2] = __nw_connection_group_remove_member_block_invoke;
        v24[3] = &unk_1E149FA70;
        v25 = v3;
        v26 = v5;
        v9 = v9;
        v27 = v9;
        nw_path_enumerate_group_options(v9, v24);

      }
    }
    else
    {
      v9 = 0;
    }

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v31 = "nw_connection_group_remove_member";
  v11 = (char *)_os_log_send_and_compose_impl();

  v29 = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (!__nwlog_fault(v11, &v29, &v28))
    goto LABEL_42;
  if (v29 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = v29;
    if (os_log_type_enabled(v12, v29))
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_connection_group_remove_member";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null endpoint", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v28)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = v29;
    if (os_log_type_enabled(v12, v29))
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_connection_group_remove_member";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = v29;
  v21 = os_log_type_enabled(v12, v29);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_connection_group_remove_member";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v31 = "nw_connection_group_remove_member";
    v32 = 2082;
    v33 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

void sub_18343DF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void __nw_connection_group_remove_member_block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const unsigned __int8 *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v4 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      v8 = 136447234;
      v9 = "nw_connection_group_remove_member_block_invoke";
      v10 = 1024;
      v11 = v6;
      v12 = 2112;
      v13 = v5;
      v14 = 1042;
      v15 = 16;
      v16 = 2098;
      v17 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s [G%u] Removing member '%@' from Group Agent UUID=(%{public,uuid_t}.16P)", (uint8_t *)&v8, 0x2Cu);
    }

  }
  v7 = nw_array_create();
  nw_array_append(v7, *(void **)(a1 + 40));
  nw_path_group_member_action(*(void **)(a1 + 48), a2, 134, (void *)v7);

}

void sub_18343E0F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_group_start(nw_connection_group_t group)
{
  NSObject *v1;
  os_unfair_lock_s *v2;
  void (**v3)(_QWORD);
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD aBlock[4];
  NSObject *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = group;
  v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_start_block_invoke;
    aBlock[3] = &unk_1E14ACFD0;
    v13 = v1;
    v3 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 43);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 43);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_connection_group_start";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_connection_group_start";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_connection_group_start";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_connection_group_start";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_connection_group_start";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_18343E3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void __nw_connection_group_start_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int port;
  uint64_t v13;
  uint64_t v14;
  const char *id_string;
  int v16;
  int v17;
  _QWORD *v18;
  NSObject *v19;
  NWConcrete_nw_path_evaluator *evaluator_for_group;
  void *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  os_unfair_lock_s *v25;
  os_unfair_lock_s *v26;
  id *v27;
  id v28;
  _QWORD *v29;
  void *v30;
  _DWORD *v31;
  int v32;
  void *v33;
  _DWORD *v34;
  int v35;
  nw_listener_t *v36;
  nw_listener_t *v37;
  NSObject *v38;
  id *v39;
  id v40;
  void *v41;
  _QWORD *v42;
  id v43;
  _BOOL8 v44;
  id v45;
  NSObject *v46;
  id *v47;
  id v48;
  _DWORD *v49;
  int v50;
  nw_listener_t v51;
  nw_listener_t *v52;
  NSObject *v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  _BOOL8 v58;
  id v59;
  NSObject *v60;
  uint64_t v61;
  nw_listener_t *v62;
  NSObject *v63;
  int v64;
  id v65;
  id v66;
  NSObject *v67;
  void *v68;
  unsigned int v69;
  const char *v70;
  id v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  char *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  os_log_type_t v78;
  os_log_type_t v79;
  unsigned int v80;
  const char *v81;
  char *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  unsigned int v85;
  const char *v86;
  os_log_type_t v87;
  unsigned int v88;
  const char *v89;
  unsigned int v90;
  const char *v91;
  void *v92;
  char *v93;
  NSObject *v94;
  os_log_type_t v95;
  NSObject *v96;
  int v97;
  char *backtrace_string;
  os_log_type_t v99;
  _BOOL4 v100;
  void *v101;
  char *v102;
  NSObject *v103;
  os_log_type_t v104;
  void *v105;
  os_log_type_t v106;
  void *v107;
  char *v108;
  NSObject *v109;
  os_log_type_t v110;
  void *v111;
  char *v112;
  NSObject *v113;
  os_log_type_t v114;
  void *v115;
  os_log_type_t v116;
  char *v117;
  os_log_type_t v118;
  _BOOL4 v119;
  char *v120;
  os_log_type_t v121;
  _BOOL4 v122;
  char *v123;
  os_log_type_t v124;
  _BOOL4 v125;
  char *v126;
  _BOOL4 v127;
  char *v128;
  _BOOL4 v129;
  os_log_type_t v130;
  void *v131;
  char *v132;
  NSObject *v133;
  os_log_type_t v134;
  void *v135;
  NSObject *v136;
  os_log_type_t v137;
  void *v138;
  os_log_type_t v139;
  os_log_type_t v140;
  os_log_type_t v141;
  os_log_type_t v142;
  os_log_type_t v143;
  os_log_type_t v144;
  char *v145;
  _BOOL4 v146;
  char *v147;
  _BOOL4 v148;
  char *v149;
  NSObject *v150;
  _BOOL4 v151;
  os_log_type_t v152;
  os_log_type_t v153;
  os_log_type_t v154;
  os_log_type_t v155;
  os_log_type_t v156;
  os_log_type_t v157;
  os_log_type_t type;
  os_log_type_t typea;
  char *typeb;
  nw_listener_t *v161;
  _QWORD v162[4];
  id v163;
  id v164;
  _BYTE *v165;
  _QWORD v166[4];
  _QWORD *v167;
  _BYTE *v168;
  os_log_type_t v169[8];
  uint64_t v170;
  void (*v171)(uint64_t, int, void *);
  void *v172;
  nw_listener_t *v173;
  char v174;
  _BYTE buf[24];
  _BYTE v176[20];
  _BYTE handler[24];
  void *v178;
  nw_listener_t *v179;
  _BYTE v180[24];
  char *v181;
  nw_listener_t *v182;
  uint64_t v183;

  v183 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) = qos_class_self();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 40);
  if (!v3)
  {
    if (!*(_QWORD *)(v2 + 8))
    {
      if (!nw_parameters_get_logging_disabled(*(_QWORD *)(v2 + 56)))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v4 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          v17 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_start_block_invoke";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v17;
          _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [G%u] The group's client_queue is not set. You must set this group's client_queue using group() prior to calling start.", buf, 0x12u);
        }
        goto LABEL_77;
      }
      return;
    }
    if (!*(_QWORD *)(v2 + 136) && !*(_QWORD *)(v2 + 144))
    {
      if (!nw_parameters_get_logging_disabled(*(_QWORD *)(v2 + 56)))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v4 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          v64 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_start_block_invoke";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v64;
          _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [G%u] The group does not have a receive handler or new connection handler set, You must set this group's receive handler or new connection handler prior to calling start.", buf, 0x12u);
        }
        goto LABEL_77;
      }
      return;
    }
    if (!*(_QWORD *)(v2 + 32) && !nw_parameters_get_logging_disabled(*(_QWORD *)(v2 + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v6 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_start_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s [G%u] The group does not have a state changed handler set, no state updates will be delivered.", buf, 0x12u);
      }

    }
    v8 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v8 + 88))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_QWORD *)(a1 + 32);
        v11 = *(_DWORD *)(v10 + 168);
        port = nw_listener_get_port(*(nw_listener_t *)(v10 + 88));
        v13 = *(_QWORD *)(a1 + 32);
        v14 = *(_QWORD *)(v13 + 56);
        id_string = nw_listener_get_id_string(*(void **)(v13 + 88));
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_connection_group_start_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = port;
        *(_WORD *)v176 = 2112;
        *(_QWORD *)&v176[2] = v14;
        *(_WORD *)&v176[10] = 2080;
        *(_QWORD *)&v176[12] = id_string;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u port: %u, parameters: %@, listener: [%s]] start", buf, 0x2Cu);
      }

      v8 = *(_QWORD *)(a1 + 32);
      if (*(_DWORD *)(v8 + 184))
      {
        nw_listener_set_new_connection_limit(*(nw_listener_t *)(v8 + 88), *(_DWORD *)(v8 + 184));
        v8 = *(_QWORD *)(a1 + 32);
      }
    }
    objc_storeStrong((id *)(v8 + 24), (id)v8);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 190) |= 1u;
    v18 = *(_QWORD **)(a1 + 32);
    if (!v18[10])
    {
      v29 = v18;
LABEL_45:
      if (v29[13])
      {
        if (!nw_parameters_get_logging_disabled(v29[7]) && gLogDatapath)
        {
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v96 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
          {
            v97 = *((_DWORD *)v29 + 42);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_group_start_existing_connections_locked";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v97;
            _os_log_impl(&dword_182FBE000, v96, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] starting existing connections", buf, 0x12u);
          }

        }
        nw_array_apply((unsigned __int8 *)v29[13], (uint64_t)&__block_literal_global_160);
      }
      goto LABEL_49;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_start_block_invoke";
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s Calling nw_path_create_evaluator_for_group", buf, 0xCu);
    }

    evaluator_for_group = nw_path_create_evaluator_for_group(*(void **)(*(_QWORD *)(a1 + 32) + 64), *(void **)(*(_QWORD *)(a1 + 32) + 56));
    v21 = *(void **)(*(_QWORD *)(a1 + 32) + 72);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) = evaluator_for_group;

    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v176[0] = 0;
    v22 = *(_QWORD **)(a1 + 32);
    v23 = (void *)v22[9];
    v24 = (void *)v22[1];
    v166[0] = MEMORY[0x1E0C809B0];
    v166[1] = 3221225472;
    v166[2] = __nw_connection_group_start_block_invoke_26;
    v166[3] = &unk_1E149B630;
    v168 = buf;
    v167 = v22;
    nw_path_evaluator_set_update_handler(v23, v24, v166);
    v25 = *(os_unfair_lock_s **)(*(_QWORD *)(a1 + 32) + 72);
    if (v25)
    {
      v26 = v25 + 24;
      v27 = v25;
      os_unfair_lock_lock(v26);
      v28 = v27[6];
      os_unfair_lock_unlock(v26);

      if (v28)
      {
        v162[0] = MEMORY[0x1E0C809B0];
        v162[1] = 3221225472;
        v162[2] = __nw_connection_group_start_block_invoke_29;
        v162[3] = &unk_1E149B608;
        v163 = *(id *)(a1 + 32);
        v28 = v28;
        v164 = v28;
        v165 = buf;
        nw_path_enumerate_group_options(v28, v162);

      }
    }
    else
    {
      v28 = 0;
    }

    _Block_object_dispose(buf, 8);
    v29 = *(id *)(a1 + 32);
    if (v29)
      goto LABEL_45;
    __nwlog_obj();
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_start_existing_connections_locked";
    v93 = (char *)_os_log_send_and_compose_impl();

    v180[0] = 16;
    handler[0] = 0;
    if (__nwlog_fault(v93, v180, handler))
    {
      if (v180[0] == 17)
      {
        __nwlog_obj();
        v94 = objc_claimAutoreleasedReturnValue();
        v95 = v180[0];
        if (os_log_type_enabled(v94, (os_log_type_t)v180[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_start_existing_connections_locked";
          _os_log_impl(&dword_182FBE000, v94, v95, "%{public}s called with null group", buf, 0xCu);
        }
      }
      else if (handler[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v94 = objc_claimAutoreleasedReturnValue();
        v99 = v180[0];
        v100 = os_log_type_enabled(v94, (os_log_type_t)v180[0]);
        if (backtrace_string)
        {
          if (v100)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_group_start_existing_connections_locked";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v94, v99, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_210;
        }
        if (v100)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_start_existing_connections_locked";
          _os_log_impl(&dword_182FBE000, v94, v99, "%{public}s called with null group, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v94 = objc_claimAutoreleasedReturnValue();
        v130 = v180[0];
        if (os_log_type_enabled(v94, (os_log_type_t)v180[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_start_existing_connections_locked";
          _os_log_impl(&dword_182FBE000, v94, v130, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_210:
    if (v93)
      free(v93);
    v29 = 0;
LABEL_49:

    v30 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
    if (!v30)
      return;
    v31 = v30;
    v32 = v31[2];

    if (v32 != 1)
    {
      v33 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
      if (!v33)
        return;
      v34 = v33;
      v35 = v34[2];

      if (v35 != 4)
        return;
    }
    v36 = (nw_listener_t *)*(id *)(a1 + 32);
    v37 = v36;
    if (v36)
    {
      v38 = v36[11];
      if (v38)
      {
        v39 = v36;
        v40 = v39[7];
        v41 = v40;
        if (v40)
        {
          v42 = v40;
          v43 = *(id *)(v42[13] + 136);

          if (!v43)
          {
            __nwlog_obj();
            v111 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
            v112 = (char *)_os_log_send_and_compose_impl();

            v180[0] = 16;
            handler[0] = 0;
            if (!__nwlog_fault(v112, v180, handler))
              goto LABEL_263;
            if (v180[0] == 17)
            {
              __nwlog_obj();
              v113 = objc_claimAutoreleasedReturnValue();
              v114 = v180[0];
              if (os_log_type_enabled(v113, (os_log_type_t)v180[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v113, v114, "%{public}s called with null context", buf, 0xCu);
              }
            }
            else if (handler[0])
            {
              v126 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v113 = objc_claimAutoreleasedReturnValue();
              type = v180[0];
              v127 = os_log_type_enabled(v113, (os_log_type_t)v180[0]);
              if (v126)
              {
                if (v127)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v126;
                  _os_log_impl(&dword_182FBE000, v113, type, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v126);
                if (!v112)
                  goto LABEL_265;
                goto LABEL_264;
              }
              if (v127)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v113, type, "%{public}s called with null context, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v113 = objc_claimAutoreleasedReturnValue();
              v143 = v180[0];
              if (os_log_type_enabled(v113, (os_log_type_t)v180[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v113, v143, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
              }
            }
            goto LABEL_262;
          }
          v44 = nw_context_copy_workloop(v43);
          if (v44)
            goto LABEL_61;
          if (nw_context_copy_implicit_context::onceToken[0] != -1)
            dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
          v45 = (id)nw_context_copy_implicit_context::implicit_context;
          v44 = nw_context_copy_workloop(v45);

          if (v44)
            goto LABEL_61;
          __nwlog_obj();
          v115 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
          v112 = (char *)_os_log_send_and_compose_impl();

          v180[0] = 16;
          handler[0] = 0;
          if (__nwlog_fault(v112, v180, handler))
          {
            if (v180[0] == 17)
            {
              __nwlog_obj();
              v113 = objc_claimAutoreleasedReturnValue();
              v116 = v180[0];
              if (os_log_type_enabled(v113, (os_log_type_t)v180[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v113, v116, "%{public}s called with null workloop", buf, 0xCu);
              }
LABEL_262:

              goto LABEL_263;
            }
            if (!handler[0])
            {
              __nwlog_obj();
              v113 = objc_claimAutoreleasedReturnValue();
              v144 = v180[0];
              if (os_log_type_enabled(v113, (os_log_type_t)v180[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v113, v144, "%{public}s called with null workloop, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_262;
            }
            v128 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v113 = objc_claimAutoreleasedReturnValue();
            typea = v180[0];
            v129 = os_log_type_enabled(v113, (os_log_type_t)v180[0]);
            if (!v128)
            {
              if (v129)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v113, typea, "%{public}s called with null workloop, no backtrace", buf, 0xCu);
              }
              goto LABEL_262;
            }
            if (v129)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v128;
              _os_log_impl(&dword_182FBE000, v113, typea, "%{public}s called with null workloop, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v128);
          }
LABEL_263:
          if (!v112)
          {
LABEL_265:
            v44 = 0;
LABEL_61:

            goto LABEL_62;
          }
LABEL_264:
          free(v112);
          goto LABEL_265;
        }
        __nwlog_obj();
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
        v108 = (char *)_os_log_send_and_compose_impl();

        v180[0] = 16;
        handler[0] = 0;
        if (__nwlog_fault(v108, v180, handler))
        {
          if (v180[0] == 17)
          {
            __nwlog_obj();
            v109 = objc_claimAutoreleasedReturnValue();
            v110 = v180[0];
            if (os_log_type_enabled(v109, (os_log_type_t)v180[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_182FBE000, v109, v110, "%{public}s called with null parameters", buf, 0xCu);
            }
          }
          else if (handler[0])
          {
            v123 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v109 = objc_claimAutoreleasedReturnValue();
            v124 = v180[0];
            v125 = os_log_type_enabled(v109, (os_log_type_t)v180[0]);
            if (v123)
            {
              if (v125)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v123;
                _os_log_impl(&dword_182FBE000, v109, v124, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v123);
              goto LABEL_254;
            }
            if (v125)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_182FBE000, v109, v124, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v109 = objc_claimAutoreleasedReturnValue();
            v142 = v180[0];
            if (os_log_type_enabled(v109, (os_log_type_t)v180[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_182FBE000, v109, v142, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_254:
        if (v108)
          free(v108);
        v44 = 0;
LABEL_62:

        nw_listener_set_queue(v38, (dispatch_queue_t)v44);
        v46 = v37[11];
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke;
        *(_QWORD *)v176 = &unk_1E14ACF48;
        v47 = v39;
        *(_QWORD *)&v176[8] = v47;
        nw_listener_set_state_changed_handler(v46, buf);
        v48 = v47[8];
        if (!v48)
          goto LABEL_86;
        v49 = v48;
        v50 = v49[2];

        if (v50 == 1)
        {
          v51 = v37[11];
          *(_QWORD *)v180 = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v180[8] = 3221225472;
          *(_QWORD *)&v180[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2;
          v181 = (char *)&unk_1E149B788;
          v52 = v47;
          v182 = v52;
          nw_listener_set_new_packet_handler(v51, v180);
          v53 = v52[12];
          if (!v53)
          {
LABEL_71:

LABEL_105:
            *((_BYTE *)v47 + 190) |= 8u;
            nw_listener_start(v37[11]);

LABEL_106:
            return;
          }
          v161 = v52;
          v54 = v39[7];
          v55 = v54;
          if (v54)
          {
            v56 = nw_parameters_copy_context(v54);
            v57 = v56;
            if (v56)
            {
              v58 = nw_context_copy_workloop(v56);
              if (v58
                || (v59 = nw_context_copy_implicit_context(), v58 = nw_context_copy_workloop(v59),
                                                              v59,
                                                              v58))
              {
LABEL_69:

LABEL_70:
                nw_listener_set_queue(v53, (dispatch_queue_t)v58);

                v60 = v52[12];
                v61 = MEMORY[0x1E0C809B0];
                *(_QWORD *)handler = MEMORY[0x1E0C809B0];
                *(_QWORD *)&handler[8] = 3221225472;
                *(_QWORD *)&handler[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_3;
                v178 = &unk_1E149B7B0;
                v62 = v161;
                v179 = v62;
                nw_listener_set_new_connection_handler(v60, handler);
                v63 = v52[12];
                *(_QWORD *)v169 = v61;
                v170 = 3221225472;
                v171 = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_4;
                v172 = &unk_1E14ACF48;
                v173 = v62;
                nw_listener_set_state_changed_handler(v63, v169);
                nw_listener_start(v52[12]);

                goto LABEL_71;
              }
              __nwlog_obj();
              v138 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)handler = 136446210;
              *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
              typeb = (char *)_os_log_send_and_compose_impl();

              v169[0] = OS_LOG_TYPE_ERROR;
              v174 = 0;
              if (__nwlog_fault(typeb, v169, &v174))
              {
                if (v169[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v136 = objc_claimAutoreleasedReturnValue();
                  v139 = v169[0];
                  if (os_log_type_enabled(v136, v169[0]))
                  {
                    *(_DWORD *)handler = 136446210;
                    *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_182FBE000, v136, v139, "%{public}s called with null workloop", handler, 0xCu);
                  }
                }
                else
                {
                  if (v174)
                  {
                    v149 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v150 = objc_claimAutoreleasedReturnValue();
                    v156 = v169[0];
                    v151 = os_log_type_enabled(v150, v169[0]);
                    if (v149)
                    {
                      if (v151)
                      {
                        *(_DWORD *)handler = 136446466;
                        *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                        *(_WORD *)&handler[12] = 2082;
                        *(_QWORD *)&handler[14] = v149;
                        _os_log_impl(&dword_182FBE000, v150, v156, "%{public}s called with null workloop, dumping backtrace:%{public}s", handler, 0x16u);
                      }

                      free(v149);
                    }
                    else
                    {
                      if (v151)
                      {
                        *(_DWORD *)handler = 136446210;
                        *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                        _os_log_impl(&dword_182FBE000, v150, v156, "%{public}s called with null workloop, no backtrace", handler, 0xCu);
                      }

                    }
                    goto LABEL_302;
                  }
                  __nwlog_obj();
                  v136 = objc_claimAutoreleasedReturnValue();
                  v154 = v169[0];
                  if (os_log_type_enabled(v136, v169[0]))
                  {
                    *(_DWORD *)handler = 136446210;
                    *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_182FBE000, v136, v154, "%{public}s called with null workloop, backtrace limit exceeded", handler, 0xCu);
                  }
                }
                goto LABEL_298;
              }
            }
            else
            {
              __nwlog_obj();
              v135 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)handler = 136446210;
              *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
              typeb = (char *)_os_log_send_and_compose_impl();

              v169[0] = OS_LOG_TYPE_ERROR;
              v174 = 0;
              if (__nwlog_fault(typeb, v169, &v174))
              {
                if (v169[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v136 = objc_claimAutoreleasedReturnValue();
                  v137 = v169[0];
                  if (os_log_type_enabled(v136, v169[0]))
                  {
                    *(_DWORD *)handler = 136446210;
                    *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_182FBE000, v136, v137, "%{public}s called with null context", handler, 0xCu);
                  }
                }
                else if (v174)
                {
                  v147 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v136 = objc_claimAutoreleasedReturnValue();
                  v155 = v169[0];
                  v148 = os_log_type_enabled(v136, v169[0]);
                  if (v147)
                  {
                    if (v148)
                    {
                      *(_DWORD *)handler = 136446466;
                      *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                      *(_WORD *)&handler[12] = 2082;
                      *(_QWORD *)&handler[14] = v147;
                      _os_log_impl(&dword_182FBE000, v136, v155, "%{public}s called with null context, dumping backtrace:%{public}s", handler, 0x16u);
                    }

                    free(v147);
                    goto LABEL_302;
                  }
                  if (v148)
                  {
                    *(_DWORD *)handler = 136446210;
                    *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_182FBE000, v136, v155, "%{public}s called with null context, no backtrace", handler, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v136 = objc_claimAutoreleasedReturnValue();
                  v153 = v169[0];
                  if (os_log_type_enabled(v136, v169[0]))
                  {
                    *(_DWORD *)handler = 136446210;
                    *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_182FBE000, v136, v153, "%{public}s called with null context, backtrace limit exceeded", handler, 0xCu);
                  }
                }
LABEL_298:

              }
            }
LABEL_302:
            if (typeb)
              free(typeb);
            v58 = 0;
            goto LABEL_69;
          }
          __nwlog_obj();
          v131 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)handler = 136446210;
          *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
          v132 = (char *)_os_log_send_and_compose_impl();

          v169[0] = OS_LOG_TYPE_ERROR;
          v174 = 0;
          if (__nwlog_fault(v132, v169, &v174))
          {
            if (v169[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v133 = objc_claimAutoreleasedReturnValue();
              v134 = v169[0];
              if (os_log_type_enabled(v133, v169[0]))
              {
                *(_DWORD *)handler = 136446210;
                *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v133, v134, "%{public}s called with null parameters", handler, 0xCu);
              }
            }
            else if (v174)
            {
              v145 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v133 = objc_claimAutoreleasedReturnValue();
              v157 = v169[0];
              v146 = os_log_type_enabled(v133, v169[0]);
              if (v145)
              {
                if (v146)
                {
                  *(_DWORD *)handler = 136446466;
                  *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                  *(_WORD *)&handler[12] = 2082;
                  *(_QWORD *)&handler[14] = v145;
                  _os_log_impl(&dword_182FBE000, v133, v157, "%{public}s called with null parameters, dumping backtrace:%{public}s", handler, 0x16u);
                }

                free(v145);
                goto LABEL_293;
              }
              if (v146)
              {
                *(_DWORD *)handler = 136446210;
                *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v133, v157, "%{public}s called with null parameters, no backtrace", handler, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v133 = objc_claimAutoreleasedReturnValue();
              v152 = v169[0];
              if (os_log_type_enabled(v133, v169[0]))
              {
                *(_DWORD *)handler = 136446210;
                *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v133, v152, "%{public}s called with null parameters, backtrace limit exceeded", handler, 0xCu);
              }
            }

          }
LABEL_293:
          if (v132)
            free(v132);
          v58 = 0;
          goto LABEL_70;
        }
        v65 = v47[8];
        if (!v65)
          goto LABEL_86;
        if (nw_group_descriptor_get_type(v65) == 2)
        {
LABEL_82:
          v67 = v37[11];
          *(_QWORD *)v180 = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v180[8] = 3221225472;
          *(_QWORD *)&v180[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2_168;
          v181 = (char *)&unk_1E149B7B0;
          v182 = v47;
          nw_listener_set_new_connection_handler(v67, v180);

          goto LABEL_105;
        }
        v66 = v47[8];
        if (!v66)
          goto LABEL_86;
        if (nw_group_descriptor_get_type(v66) == 4)
          goto LABEL_82;
        if (!v47[8])
        {
LABEL_86:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v71 = (id)gLogObj;
          *(_DWORD *)v180 = 136446210;
          *(_QWORD *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
          v72 = (char *)_os_log_send_and_compose_impl();

          handler[0] = 16;
          v169[0] = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v72, handler, v169))
            goto LABEL_103;
          if (handler[0] == 17)
          {
            __nwlog_obj();
            v73 = objc_claimAutoreleasedReturnValue();
            v74 = handler[0];
            if (os_log_type_enabled(v73, (os_log_type_t)handler[0]))
            {
              *(_DWORD *)v180 = 136446210;
              *(_QWORD *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
              _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s Group descriptor is not set", v180, 0xCu);
            }
          }
          else if (v169[0])
          {
            v75 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v73 = objc_claimAutoreleasedReturnValue();
            v76 = handler[0];
            v77 = os_log_type_enabled(v73, (os_log_type_t)handler[0]);
            if (v75)
            {
              if (v77)
              {
                *(_DWORD *)v180 = 136446466;
                *(_QWORD *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
                *(_WORD *)&v180[12] = 2082;
                *(_QWORD *)&v180[14] = v75;
                _os_log_impl(&dword_182FBE000, v73, v76, "%{public}s Group descriptor is not set, dumping backtrace:%{public}s", v180, 0x16u);
              }

              free(v75);
              if (!v72)
                goto LABEL_105;
              goto LABEL_104;
            }
            if (v77)
            {
              *(_DWORD *)v180 = 136446210;
              *(_QWORD *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
              _os_log_impl(&dword_182FBE000, v73, v76, "%{public}s Group descriptor is not set, no backtrace", v180, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v73 = objc_claimAutoreleasedReturnValue();
            v78 = handler[0];
            if (os_log_type_enabled(v73, (os_log_type_t)handler[0]))
            {
              *(_DWORD *)v180 = 136446210;
              *(_QWORD *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
              _os_log_impl(&dword_182FBE000, v73, v78, "%{public}s Group descriptor is not set, backtrace limit exceeded", v180, 0xCu);
            }
          }
          goto LABEL_102;
        }
        __nwlog_obj();
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        v69 = nw_group_descriptor_get_type(v47[8]);
        if (v69 > 4)
          v70 = "unknown";
        else
          v70 = off_1E149B878[v69];
        *(_DWORD *)v180 = 136446466;
        *(_QWORD *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
        *(_WORD *)&v180[12] = 2080;
        *(_QWORD *)&v180[14] = v70;
        v72 = (char *)_os_log_send_and_compose_impl();

        handler[0] = 16;
        v169[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v72, handler, v169))
        {
          if (handler[0] == 17)
          {
            __nwlog_obj();
            v73 = objc_claimAutoreleasedReturnValue();
            v79 = handler[0];
            if (os_log_type_enabled(v73, (os_log_type_t)handler[0]))
            {
              v80 = nw_group_descriptor_get_type(v47[8]);
              if (v80 > 4)
                v81 = "unknown";
              else
                v81 = off_1E149B878[v80];
              *(_DWORD *)v180 = 136446466;
              *(_QWORD *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&v180[12] = 2080;
              *(_QWORD *)&v180[14] = v81;
              _os_log_impl(&dword_182FBE000, v73, v79, "%{public}s Unsupported group descriptor type: %s", v180, 0x16u);
            }
LABEL_102:

            goto LABEL_103;
          }
          if (v169[0] == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            v73 = objc_claimAutoreleasedReturnValue();
            v87 = handler[0];
            if (os_log_type_enabled(v73, (os_log_type_t)handler[0]))
            {
              v88 = nw_group_descriptor_get_type(v47[8]);
              if (v88 > 4)
                v89 = "unknown";
              else
                v89 = off_1E149B878[v88];
              *(_DWORD *)v180 = 136446466;
              *(_QWORD *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&v180[12] = 2080;
              *(_QWORD *)&v180[14] = v89;
              _os_log_impl(&dword_182FBE000, v73, v87, "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded", v180, 0x16u);
            }
            goto LABEL_102;
          }
          v82 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v73 = objc_claimAutoreleasedReturnValue();
          v83 = handler[0];
          v84 = os_log_type_enabled(v73, (os_log_type_t)handler[0]);
          if (!v82)
          {
            if (v84)
            {
              v90 = nw_group_descriptor_get_type(v47[8]);
              if (v90 > 4)
                v91 = "unknown";
              else
                v91 = off_1E149B878[v90];
              *(_DWORD *)v180 = 136446466;
              *(_QWORD *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&v180[12] = 2080;
              *(_QWORD *)&v180[14] = v91;
              _os_log_impl(&dword_182FBE000, v73, v83, "%{public}s Unsupported group descriptor type: %s, no backtrace", v180, 0x16u);
            }
            goto LABEL_102;
          }
          if (v84)
          {
            v85 = nw_group_descriptor_get_type(v47[8]);
            if (v85 > 4)
              v86 = "unknown";
            else
              v86 = off_1E149B878[v85];
            *(_DWORD *)v180 = 136446722;
            *(_QWORD *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
            *(_WORD *)&v180[12] = 2080;
            *(_QWORD *)&v180[14] = v86;
            *(_WORD *)&v180[22] = 2082;
            v181 = v82;
            _os_log_impl(&dword_182FBE000, v73, v83, "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s", v180, 0x20u);
          }

          free(v82);
        }
LABEL_103:
        if (!v72)
          goto LABEL_105;
LABEL_104:
        free(v72);
        goto LABEL_105;
      }
      __nwlog_obj();
      v105 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
      v102 = (char *)_os_log_send_and_compose_impl();

      v180[0] = 16;
      handler[0] = 0;
      if (!__nwlog_fault(v102, v180, handler))
        goto LABEL_249;
      if (v180[0] == 17)
      {
        __nwlog_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v106 = v180[0];
        if (os_log_type_enabled(v103, (os_log_type_t)v180[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
          _os_log_impl(&dword_182FBE000, v103, v106, "%{public}s called with null group->listener", buf, 0xCu);
        }
      }
      else if (handler[0])
      {
        v120 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v121 = v180[0];
        v122 = os_log_type_enabled(v103, (os_log_type_t)v180[0]);
        if (v120)
        {
          if (v122)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v120;
            _os_log_impl(&dword_182FBE000, v103, v121, "%{public}s called with null group->listener, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v120);
          if (!v102)
            goto LABEL_106;
          goto LABEL_250;
        }
        if (v122)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
          _os_log_impl(&dword_182FBE000, v103, v121, "%{public}s called with null group->listener, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v141 = v180[0];
        if (os_log_type_enabled(v103, (os_log_type_t)v180[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
          _os_log_impl(&dword_182FBE000, v103, v141, "%{public}s called with null group->listener, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
      v102 = (char *)_os_log_send_and_compose_impl();

      v180[0] = 16;
      handler[0] = 0;
      if (!__nwlog_fault(v102, v180, handler))
        goto LABEL_249;
      if (v180[0] == 17)
      {
        __nwlog_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v104 = v180[0];
        if (os_log_type_enabled(v103, (os_log_type_t)v180[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
          _os_log_impl(&dword_182FBE000, v103, v104, "%{public}s called with null group", buf, 0xCu);
        }
      }
      else if (handler[0])
      {
        v117 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v118 = v180[0];
        v119 = os_log_type_enabled(v103, (os_log_type_t)v180[0]);
        if (v117)
        {
          if (v119)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v117;
            _os_log_impl(&dword_182FBE000, v103, v118, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v117);
LABEL_249:
          if (!v102)
            goto LABEL_106;
LABEL_250:
          free(v102);
          goto LABEL_106;
        }
        if (v119)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
          _os_log_impl(&dword_182FBE000, v103, v118, "%{public}s called with null group, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v140 = v180[0];
        if (os_log_type_enabled(v103, (os_log_type_t)v180[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
          _os_log_impl(&dword_182FBE000, v103, v140, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_249;
  }
  if (v3 == 4)
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(v2 + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v4 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_start_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [G%u] The group has already been cancelled and cannot be started again. You must create a new group object and start it.", buf, 0x12u);
      }
LABEL_77:

    }
  }
  else if (!nw_parameters_get_logging_disabled(*(_QWORD *)(v2 + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v4 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_start_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v16;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [G%u] The group has already been started, ignoring nw_connection_group_start().", buf, 0x12u);
    }
    goto LABEL_77;
  }
}

void sub_183440804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;

  _Unwind_Resume(a1);
}

void __nw_connection_group_start_block_invoke_26(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  int v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  id v11;
  void (**v12)(_QWORD);
  void **v13;
  id v14;
  uint64_t v15;
  id v16;
  _BOOL8 v17;
  void *v18;
  _DWORD *v19;
  int v20;
  void **v21;
  _QWORD aBlock[4];
  os_unfair_lock_s *v23;
  id v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  _QWORD v31[4];
  void **v32;
  _BYTE buf[24];
  void *v34;
  void **v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_connection_group_start_block_invoke";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v5;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s Path evaluator update handler called, initial_set_members_complete=%{BOOL}d", buf, 0x12u);
  }

  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v30 = 0;
  v6 = *(os_unfair_lock_s **)(a1 + 32);
  v7 = MEMORY[0x1E0C809B0];
  v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __nw_connection_group_start_block_invoke_27;
  aBlock[3] = &unk_1E149CBF0;
  v25 = &v27;
  v9 = v6;
  v10 = *(_QWORD *)(a1 + 40);
  v23 = v9;
  v26 = v10;
  v11 = v3;
  v24 = v11;
  v12 = (void (**)(_QWORD))_Block_copy(aBlock);
  v6 += 43;
  os_unfair_lock_lock(v6);
  v12[2](v12);
  os_unfair_lock_unlock(v6);

  if (v8 && !*((_BYTE *)v28 + 24))
  {
    v13 = (void **)*(id *)(a1 + 32);
    v14 = v11;
    v15 = (uint64_t)nw_group_descriptor_copy_members(v13[8]);
    v16 = nw_path_copy_group_members(v14);
    v17 = (_BOOL8)v16;
    if (v15)
    {
      if (v16)
        goto LABEL_7;
    }
    else
    {
      v15 = nw_array_create();
      if (v17)
        goto LABEL_7;
    }
    v17 = nw_array_create();
LABEL_7:
    nw_group_descriptor_set_members(v13[8], (void *)v17);
    v18 = v13[8];
    if (v18)
    {
      v19 = v18;
      v20 = v19[2];

      if (v20 == 3 && *((int *)v13 + 10) <= 2)
      {
        *(_QWORD *)buf = v7;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZL37nw_connection_group_reconcile_membersP30NWConcrete_nw_connection_groupPU21objcproto10OS_nw_path8NSObject_block_invoke;
        v34 = &unk_1E14AC200;
        v35 = v13;
        nw_array_apply((unsigned __int8 *)v17, (uint64_t)buf);

      }
    }
    v31[0] = v7;
    v31[1] = 3221225472;
    v31[2] = ___ZL37nw_connection_group_reconcile_membersP30NWConcrete_nw_connection_groupPU21objcproto10OS_nw_path8NSObject_block_invoke_2;
    v31[3] = &unk_1E149B740;
    v21 = v13;
    v32 = v21;
    nw_array_review_change(v15, v17, (uint64_t)&__block_literal_global_158, (uint64_t)v31);

  }
  _Block_object_dispose(&v27, 8);

}

void sub_183440C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_start_block_invoke_29(uint64_t a1, const unsigned __int8 *a2)
{
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const unsigned __int8 *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v6 = 136446722;
    v7 = "nw_connection_group_start_block_invoke";
    v8 = 1042;
    v9 = 16;
    v10 = 2098;
    v11 = a2;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s Group Agent UUID=(%{public,uuid_t}.16P)", (uint8_t *)&v6, 0x1Cu);
  }

  v5 = nw_group_descriptor_copy_members(*(void **)(*(_QWORD *)(a1 + 32) + 64));
  nw_path_group_member_action(*(void **)(a1 + 40), a2, 133, v5);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  nw_connection_group_set_state_locked(*(void **)(a1 + 32), 2, 0);

}

void sub_183440D84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL53nw_connection_group_start_existing_connections_lockedP30NWConcrete_nw_connection_group_block_invoke(int a1, int a2, nw_connection_t connection)
{
  nw_connection_start(connection);
  return 1;
}

void __nw_connection_group_start_block_invoke_27(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  id v7;
  uint64_t v8;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 190) >> 7;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24)
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __nw_connection_group_start_block_invoke_2;
    v5[3] = &unk_1E149B608;
    v2 = *(void **)(a1 + 40);
    v6 = *(id *)(a1 + 32);
    v3 = *(id *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 56);
    v7 = v3;
    v8 = v4;
    nw_path_enumerate_group_options(v2, v5);

  }
}

void sub_183440E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_connection_group_reconcile_membersP30NWConcrete_nw_connection_groupPU21objcproto10OS_nw_path8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  _BOOL8 v6;
  os_unfair_lock_s *v7;
  id v8;
  id v9;
  void *v10;
  os_unfair_lock_s *v11;
  void (**v12)(_QWORD);
  id v13;
  void *v14;
  _DWORD *v15;
  int v16;
  void *v17;
  id v18;
  _BOOL8 v19;
  os_unfair_lock_s *v20;
  void *v21;
  void *v22;
  _DWORD *v23;
  int v24;
  nw_connection_t v25;
  void *v26;
  void (**v27)(_QWORD);
  NSObject *v28;
  uint32_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  os_unfair_lock_s *v33;
  void (**v34)(_QWORD);
  NSObject *v35;
  uint32_t v36;
  uint64_t v37;
  NSObject *v38;
  int v39;
  void *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  void *v45;
  os_log_type_t v46;
  void *v47;
  os_log_type_t v48;
  char *backtrace_string;
  os_log_type_t v50;
  _BOOL4 v51;
  os_log_type_t v52;
  _BOOL4 v53;
  char *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  NSObject *v57;
  uint32_t os_unfair_lock_opaque;
  NSObject *v59;
  uint32_t v60;
  os_log_type_t v61;
  os_log_type_t v62;
  os_log_type_t v63;
  id v64;
  id v65;
  os_unfair_lock_s *v66;
  NSObject *endpoint;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t);
  void (*v79)(uint64_t);
  id v80;
  uint8_t v81[4];
  const char *v82;
  __int16 v83;
  uint32_t v84;
  __int16 v85;
  uint64_t v86;
  _BYTE aBlock[40];
  id v88;
  id v89;
  uint64_t *v90;
  uint64_t *v91;
  _BYTE buf[40];
  _BYTE *v93;
  _BYTE v94[40];
  _BYTE *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v70 = a3;
  v4 = nw_endpoint_copy(v70);
  v5 = *(id *)(*(_QWORD *)(a1 + 32) + 56);
  v6 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v5, 0, 0);

  v7 = (os_unfair_lock_s *)*(id *)(a1 + 32);
  v8 = v4;
  v9 = (id)v6;
  v10 = v9;
  if (!v7)
  {
    __nwlog_obj();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)aBlock = 136446210;
    *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
    v42 = (char *)_os_log_send_and_compose_impl();

    v94[0] = 16;
    buf[0] = 0;
    if (!__nwlog_fault(v42, v94, buf))
      goto LABEL_103;
    if (v94[0] == 17)
    {
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v44 = v94[0];
      if (os_log_type_enabled(v43, (os_log_type_t)v94[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s called with null group", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    if (!buf[0])
    {
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v61 = v94[0];
      if (os_log_type_enabled(v43, (os_log_type_t)v94[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v43, v61, "%{public}s called with null group, backtrace limit exceeded", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v43 = objc_claimAutoreleasedReturnValue();
    v50 = v94[0];
    v51 = os_log_type_enabled(v43, (os_log_type_t)v94[0]);
    if (!backtrace_string)
    {
      if (v51)
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v43, v50, "%{public}s called with null group, no backtrace", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    if (v51)
    {
      *(_DWORD *)aBlock = 136446466;
      *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
      *(_WORD *)&aBlock[12] = 2082;
      *(_QWORD *)&aBlock[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v43, v50, "%{public}s called with null group, dumping backtrace:%{public}s", aBlock, 0x16u);
    }
    goto LABEL_68;
  }
  if (!v8)
  {
    __nwlog_obj();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)aBlock = 136446210;
    *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
    v42 = (char *)_os_log_send_and_compose_impl();

    v94[0] = 16;
    buf[0] = 0;
    if (!__nwlog_fault(v42, v94, buf))
      goto LABEL_103;
    if (v94[0] == 17)
    {
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v46 = v94[0];
      if (os_log_type_enabled(v43, (os_log_type_t)v94[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s called with null remote_endpoint", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    if (!buf[0])
    {
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v62 = v94[0];
      if (os_log_type_enabled(v43, (os_log_type_t)v94[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v43, v62, "%{public}s called with null remote_endpoint, backtrace limit exceeded", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v43 = objc_claimAutoreleasedReturnValue();
    v52 = v94[0];
    v53 = os_log_type_enabled(v43, (os_log_type_t)v94[0]);
    if (!backtrace_string)
    {
      if (v53)
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v43, v52, "%{public}s called with null remote_endpoint, no backtrace", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    if (v53)
    {
      *(_DWORD *)aBlock = 136446466;
      *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
      *(_WORD *)&aBlock[12] = 2082;
      *(_QWORD *)&aBlock[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v43, v52, "%{public}s called with null remote_endpoint, dumping backtrace:%{public}s", aBlock, 0x16u);
    }
LABEL_68:

    free(backtrace_string);
    if (!v42)
      goto LABEL_105;
    goto LABEL_104;
  }
  if (v9)
  {
    v75 = 0;
    v76 = &v75;
    v77 = 0x3032000000;
    v78 = __Block_byref_object_copy__8574;
    v79 = __Block_byref_object_dispose__8575;
    v80 = 0;
    v71 = 0;
    v72 = &v71;
    v73 = 0x2020000000;
    v74 = 0;
    *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock[8] = 3221225472;
    *(_QWORD *)&aBlock[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke;
    *(_QWORD *)&aBlock[24] = &unk_1E149B6D0;
    v11 = v7;
    *(_QWORD *)&aBlock[32] = v11;
    v90 = &v71;
    v69 = v10;
    v88 = v69;
    v68 = v8;
    v89 = v68;
    v91 = &v75;
    v12 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v7 + 43);
    v12[2](v12);
    os_unfair_lock_unlock(v7 + 43);

    if (*((_BYTE *)v72 + 24))
    {
      v13 = 0;
LABEL_36:

      _Block_object_dispose(&v71, 8);
      _Block_object_dispose(&v75, 8);

      goto LABEL_37;
    }
    if (v76[5])
    {
      v14 = *(void **)&v11[16]._os_unfair_lock_opaque;
      if (!v14 || (v15 = v14, v16 = v15[2], v15, v16 != 2))
      {
LABEL_35:
        v13 = (id)v76[5];
        goto LABEL_36;
      }
    }
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)&v11[14]._os_unfair_lock_opaque) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v57 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        os_unfair_lock_opaque = v11[42]._os_unfair_lock_opaque;
        *(_DWORD *)v94 = 136446978;
        *(_QWORD *)&v94[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = os_unfair_lock_opaque;
        *(_WORD *)&v94[18] = 2112;
        *(_QWORD *)&v94[20] = v68;
        *(_WORD *)&v94[28] = 2112;
        *(_QWORD *)&v94[30] = v69;
        _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Did not find connection for (remote: %@, parameters: %@), creating new connection", v94, 0x26u);
      }

    }
    v17 = (void *)v76[5];
    v66 = v11;
    v65 = v17;
    endpoint = v68;
    v18 = v69;
    *(_QWORD *)v94 = 0;
    *(_QWORD *)&v94[8] = v94;
    *(_QWORD *)&v94[16] = 0x3032000000;
    *(_QWORD *)&v94[24] = __Block_byref_object_copy__8574;
    *(_QWORD *)&v94[32] = __Block_byref_object_dispose__8575;
    v95 = 0;
    v64 = v18;
    v19 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v64, 0, 0);

    v21 = v65;
    v20 = v66;
    nw_parameters_set_reuse_local_address((nw_parameters_t)v19, 1);
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)&v11[14]._os_unfair_lock_opaque) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v59 = (id)gconnection_groupLogObj;
      v20 = v66;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        v60 = v66[42]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v60;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = endpoint;
        *(_WORD *)&buf[28] = 2112;
        *(_QWORD *)&buf[30] = v19;
        _os_log_impl(&dword_182FBE000, v59, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Creating connection for endpoint (%@) and parameters (%@)", buf, 0x26u);
      }

      v21 = v65;
    }
    v22 = *(void **)&v20[16]._os_unfair_lock_opaque;
    if (v22 && (v23 = v22, v24 = v23[2], v23, v24 == 2))
      v25 = (nw_connection_t)nw_connection_create_with_connection(v21, (void *)v19);
    else
      v25 = nw_connection_create(endpoint, (nw_parameters_t)v19);
    v26 = *(void **)(*(_QWORD *)&v94[8] + 40);
    *(_QWORD *)(*(_QWORD *)&v94[8] + 40) = v25;

    if (*(_QWORD *)(*(_QWORD *)&v94[8] + 40))
    {
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZL65nw_connection_group_create_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS3_PU33objcproto22OS_nw_protocol_optionsS3_b_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E14ACE40;
      *(_QWORD *)&buf[32] = v20;
      v93 = v94;
      v27 = (void (**)(_QWORD))_Block_copy(buf);
      os_unfair_lock_lock(v7 + 43);
      v27[2](v27);
      os_unfair_lock_unlock(v7 + 43);

      v28 = *(NSObject **)&buf[32];
    }
    else
    {
      if (nw_parameters_get_logging_disabled(*(_QWORD *)&v11[14]._os_unfair_lock_opaque))
        goto LABEL_25;
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v28 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v29 = v20[42]._os_unfair_lock_opaque;
        v30 = *(_QWORD *)&v11[14]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v29;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v30;
        _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to create connection with parameters %@", buf, 0x1Cu);
      }
    }

LABEL_25:
    v31 = *(id *)(*(_QWORD *)&v94[8] + 40);

    _Block_object_dispose(v94, 8);
    v32 = (void *)v76[5];
    v76[5] = (uint64_t)v31;

    if (v76[5])
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      buf[24] = 0;
      *(_QWORD *)v94 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v94[8] = 3221225472;
      *(_QWORD *)&v94[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke_154;
      *(_QWORD *)&v94[24] = &unk_1E14ACE40;
      v95 = buf;
      v33 = v20;
      *(_QWORD *)&v94[32] = v33;
      v34 = (void (**)(_QWORD))_Block_copy(v94);
      os_unfair_lock_lock(v7 + 43);
      v34[2](v34);
      os_unfair_lock_unlock(v7 + 43);

      if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
      {
        nw_connection_start((nw_connection_t)v76[5]);
      }
      else if (!nw_parameters_get_logging_disabled(*(_QWORD *)&v11[14]._os_unfair_lock_opaque))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v35 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          v36 = v33[42]._os_unfair_lock_opaque;
          v37 = v76[5];
          *(_DWORD *)v81 = 136446722;
          v82 = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          v83 = 1024;
          v84 = v36;
          v85 = 2112;
          v86 = v37;
          _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Deferring start of connection %@ until group start", v81, 0x1Cu);
        }

      }
      _Block_object_dispose(buf, 8);
    }
    goto LABEL_35;
  }
  __nwlog_obj();
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)aBlock = 136446210;
  *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
  v42 = (char *)_os_log_send_and_compose_impl();

  v94[0] = 16;
  buf[0] = 0;
  if (__nwlog_fault(v42, v94, buf))
  {
    if (v94[0] == 17)
    {
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v48 = v94[0];
      if (os_log_type_enabled(v43, (os_log_type_t)v94[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v43, v48, "%{public}s called with null parameters", aBlock, 0xCu);
      }
LABEL_102:

      goto LABEL_103;
    }
    if (!buf[0])
    {
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v63 = v94[0];
      if (os_log_type_enabled(v43, (os_log_type_t)v94[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v43, v63, "%{public}s called with null parameters, backtrace limit exceeded", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    v54 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v43 = objc_claimAutoreleasedReturnValue();
    v55 = v94[0];
    v56 = os_log_type_enabled(v43, (os_log_type_t)v94[0]);
    if (!v54)
    {
      if (v56)
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v43, v55, "%{public}s called with null parameters, no backtrace", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    if (v56)
    {
      *(_DWORD *)aBlock = 136446466;
      *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
      *(_WORD *)&aBlock[12] = 2082;
      *(_QWORD *)&aBlock[14] = v54;
      _os_log_impl(&dword_182FBE000, v43, v55, "%{public}s called with null parameters, dumping backtrace:%{public}s", aBlock, 0x16u);
    }

    free(v54);
  }
LABEL_103:
  if (v42)
LABEL_104:
    free(v42);
LABEL_105:
  v13 = 0;
LABEL_37:

  if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v38 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      v39 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      *(_DWORD *)aBlock = 136446978;
      *(_QWORD *)&aBlock[4] = "nw_connection_group_reconcile_members_block_invoke";
      *(_WORD *)&aBlock[12] = 1024;
      *(_DWORD *)&aBlock[14] = v39;
      *(_WORD *)&aBlock[18] = 2112;
      *(_QWORD *)&aBlock[20] = v13;
      *(_WORD *)&aBlock[28] = 2112;
      *(_QWORD *)&aBlock[30] = v8;
      _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_INFO, "%{public}s [G%u] created connection %@ to endpoint %@", aBlock, 0x26u);
    }

  }
  return 1;
}

void sub_183441D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39,id a40,id a41)
{
  void *v41;
  uint64_t v42;

  _Block_object_dispose((const void *)(v42 - 240), 8);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_connection_group_reconcile_membersP30NWConcrete_nw_connection_groupPU21objcproto10OS_nw_path8NSObject_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16))();
}

uint64_t ___ZL37nw_connection_group_reconcile_membersP30NWConcrete_nw_connection_groupPU21objcproto10OS_nw_path8NSObject_block_invoke_156(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isEqual:");
}

void __nw_connection_group_start_block_invoke_2(uint64_t a1, const unsigned __int8 *a2)
{
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const unsigned __int8 *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v6 = 136446722;
    v7 = "nw_connection_group_start_block_invoke_2";
    v8 = 1042;
    v9 = 16;
    v10 = 2098;
    v11 = a2;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s Group Agent UUID=(%{public,uuid_t}.16P)", (uint8_t *)&v6, 0x1Cu);
  }

  v5 = nw_group_descriptor_copy_members(*(void **)(*(_QWORD *)(a1 + 32) + 64));
  nw_path_group_member_action(*(void **)(a1 + 40), a2, 133, v5);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  nw_connection_group_set_state_locked(*(void **)(a1 + 32), 2, 0);

}

void sub_183441F84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_group_cancel(nw_connection_group_t group)
{
  NSObject *v1;
  os_unfair_lock_s *v2;
  void (**v3)(_QWORD);
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD aBlock[4];
  NSObject *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = group;
  v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_cancel_block_invoke;
    aBlock[3] = &unk_1E14ACFD0;
    v13 = v1;
    v3 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 43);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 43);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_connection_group_cancel";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_connection_group_cancel";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_connection_group_cancel";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_connection_group_cancel";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_connection_group_cancel";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183442290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void __nw_connection_group_cancel_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  BOOL logging_disabled;
  NSObject *v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(char *)(v2 + 190);
  logging_disabled = nw_parameters_get_logging_disabled(*(_QWORD *)(v2 + 56));
  if (v3 < 0)
  {
    if (logging_disabled)
      return;
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v16 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      v18 = 136446466;
      v19 = "nw_connection_group_cancel_block_invoke";
      v20 = 1024;
      v21 = v17;
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s [G%u] The group has already been cancelled, ignoring nw_connection_group_cancel().", (uint8_t *)&v18, 0x12u);
    }
    goto LABEL_33;
  }
  if (!logging_disabled)
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v5 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      v18 = 136446466;
      v19 = "nw_connection_group_cancel_block_invoke";
      v20 = 1024;
      v21 = v6;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] cancel", (uint8_t *)&v18, 0x12u);
    }

  }
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 72);
  if (v8)
  {
    nw_path_evaluator_cancel(v8);
    v7 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v7 + 190) |= 0x80u;
  v9 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v9 + 190) & 8) != 0 && *(_QWORD *)(v9 + 88))
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(v9 + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v10 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        v18 = 136446466;
        v19 = "nw_connection_group_cancel_block_invoke";
        v20 = 1024;
        v21 = v11;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s [G%u] cancelling group listener", (uint8_t *)&v18, 0x12u);
      }

    }
    nw_listener_cancel(*(nw_listener_t *)(*(_QWORD *)(a1 + 32) + 88));
  }
  else
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(v9 + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v12 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v13 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        v18 = 136446466;
        v19 = "nw_connection_group_cancel_block_invoke";
        v20 = 1024;
        v21 = v13;
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, "%{public}s [G%u] cancelling group connections", (uint8_t *)&v18, 0x12u);
      }

    }
    nw_connection_group_cancel_connections_locked(*(NWConcrete_nw_connection_group **)(a1 + 32));
  }
  v14 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 96);
  if (v14)
  {
    nw_listener_cancel(v14);
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(NSObject **)(v15 + 96);
    *(_QWORD *)(v15 + 96) = 0;
LABEL_33:

  }
}

nw_group_descriptor_t nw_connection_group_copy_descriptor(nw_connection_group_t group)
{
  nw_connection_group_t v1;
  nw_connection_group_t v2;
  NSObject *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = group;
  v2 = v1;
  if (v1)
  {
    v3 = v1[8].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_connection_group_copy_descriptor";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_group_copy_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_connection_group_copy_descriptor";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_group_copy_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_group_copy_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

nw_parameters_t nw_connection_group_copy_parameters(nw_connection_group_t group)
{
  nw_connection_group_t v1;
  nw_connection_group_t v2;
  NSObject *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = group;
  v2 = v1;
  if (v1)
  {
    v3 = v1[7].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_connection_group_copy_parameters";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_group_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_connection_group_copy_parameters";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_group_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_group_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_connection_group_get_id(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[42];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_connection_group_get_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_group_get_id";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_connection_group_get_id";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_group_get_id";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_group_get_id";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

nw_protocol_metadata_t nw_connection_group_copy_protocol_metadata_for_message(nw_connection_group_t group, nw_content_context_t context, nw_protocol_definition_t definition)
{
  nw_connection_group_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  Class isa;
  objc_class *v10;
  int v11;
  Class v12;
  objc_class *v13;
  int v14;
  Class v15;
  objc_class *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  nw_protocol_metadata_t v20;
  void *v21;
  unsigned int v22;
  const char *v23;
  id v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  os_log_type_t v33;
  unsigned int v34;
  const char *v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  unsigned int v39;
  const char *v40;
  os_log_type_t v41;
  unsigned int v42;
  const char *v43;
  unsigned int v44;
  const char *v45;
  void *v46;
  os_log_type_t v47;
  void *v48;
  os_log_type_t v49;
  void *v50;
  os_log_type_t v51;
  os_log_type_t v52;
  _BOOL4 v53;
  os_log_type_t v54;
  _BOOL4 v55;
  os_log_type_t v56;
  _BOOL4 v57;
  os_log_type_t v58;
  os_log_type_t v59;
  os_log_type_t v60;
  char v61;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  void *v66;
  __int16 v67;
  char *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v5 = group;
  v6 = context;
  v7 = definition;
  v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_connection_group_copy_protocol_metadata_for_message";
    v25 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (!__nwlog_fault(v25, &type, &v61))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_182FBE000, v26, v47, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (!v61)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v58 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_182FBE000, v26, v58, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    v52 = type;
    v53 = os_log_type_enabled(v26, type);
    if (!backtrace_string)
    {
      if (v53)
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_182FBE000, v26, v52, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (v53)
    {
      *(_DWORD *)buf = 136446466;
      v64 = "nw_connection_group_copy_protocol_metadata_for_message";
      v65 = 2082;
      v66 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v26, v52, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!v6)
  {
    __nwlog_obj();
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_connection_group_copy_protocol_metadata_for_message";
    v25 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (!__nwlog_fault(v25, &type, &v61))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v49 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_182FBE000, v26, v49, "%{public}s called with null context", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (!v61)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v59 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_182FBE000, v26, v59, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    v54 = type;
    v55 = os_log_type_enabled(v26, type);
    if (!backtrace_string)
    {
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_182FBE000, v26, v54, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (v55)
    {
      *(_DWORD *)buf = 136446466;
      v64 = "nw_connection_group_copy_protocol_metadata_for_message";
      v65 = 2082;
      v66 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v26, v54, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!v7)
  {
    __nwlog_obj();
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_connection_group_copy_protocol_metadata_for_message";
    v25 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (!__nwlog_fault(v25, &type, &v61))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v51 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_182FBE000, v26, v51, "%{public}s called with null definition", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (!v61)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v60 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_182FBE000, v26, v60, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    v56 = type;
    v57 = os_log_type_enabled(v26, type);
    if (!backtrace_string)
    {
      if (v57)
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_182FBE000, v26, v56, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (v57)
    {
      *(_DWORD *)buf = 136446466;
      v64 = "nw_connection_group_copy_protocol_metadata_for_message";
      v65 = 2082;
      v66 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v26, v56, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    if (!v25)
      goto LABEL_35;
    goto LABEL_34;
  }
  isa = v5[8].isa;
  if (!isa)
    goto LABEL_16;
  v10 = isa;
  v11 = *((_DWORD *)v10 + 2);

  if (v11 == 1)
    goto LABEL_35;
  v12 = v5[8].isa;
  if (!v12)
    goto LABEL_16;
  v13 = v12;
  v14 = *((_DWORD *)v13 + 2);

  if (v14 == 2)
    goto LABEL_10;
  v15 = v5[8].isa;
  if (!v15)
  {
LABEL_16:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v24 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v64 = "nw_connection_group_copy_protocol_metadata_for_message";
    v25 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (!__nwlog_fault(v25, &type, &v61))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = (id)gLogObj;
      v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s Group descriptor is not set", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (!v61)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = (id)gLogObj;
      v31 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_182FBE000, v26, v31, "%{public}s Group descriptor is not set, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = (id)gLogObj;
    v29 = type;
    v30 = os_log_type_enabled(v26, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_182FBE000, v26, v29, "%{public}s Group descriptor is not set, no backtrace", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v64 = "nw_connection_group_copy_protocol_metadata_for_message";
      v65 = 2082;
      v66 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v26, v29, "%{public}s Group descriptor is not set, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  v16 = v15;
  v17 = *((_DWORD *)v16 + 2);

  if (v17 != 4)
  {
    if (v5[8].isa)
    {
      __nwlog_obj();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = nw_group_descriptor_get_type(v5[8].isa);
      if (v22 > 4)
        v23 = "unknown";
      else
        v23 = off_1E149B878[v22];
      *(_DWORD *)buf = 136446466;
      v64 = "nw_connection_group_copy_protocol_metadata_for_message";
      v65 = 2080;
      v66 = (void *)v23;
      v25 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v61 = 0;
      if (__nwlog_fault(v25, &type, &v61))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v26 = objc_claimAutoreleasedReturnValue();
          v33 = type;
          if (os_log_type_enabled(v26, type))
          {
            v34 = nw_group_descriptor_get_type(v5[8].isa);
            if (v34 > 4)
              v35 = "unknown";
            else
              v35 = off_1E149B878[v34];
            *(_DWORD *)buf = 136446466;
            v64 = "nw_connection_group_copy_protocol_metadata_for_message";
            v65 = 2080;
            v66 = (void *)v35;
            _os_log_impl(&dword_182FBE000, v26, v33, "%{public}s Unsupported group descriptor type: %s", buf, 0x16u);
          }
LABEL_32:

          goto LABEL_33;
        }
        if (!v61)
        {
          __nwlog_obj();
          v26 = objc_claimAutoreleasedReturnValue();
          v41 = type;
          if (os_log_type_enabled(v26, type))
          {
            v42 = nw_group_descriptor_get_type(v5[8].isa);
            if (v42 > 4)
              v43 = "unknown";
            else
              v43 = off_1E149B878[v42];
            *(_DWORD *)buf = 136446466;
            v64 = "nw_connection_group_copy_protocol_metadata_for_message";
            v65 = 2080;
            v66 = (void *)v43;
            _os_log_impl(&dword_182FBE000, v26, v41, "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_32;
        }
        v36 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        v38 = os_log_type_enabled(v26, type);
        if (!v36)
        {
          if (v38)
          {
            v44 = nw_group_descriptor_get_type(v5[8].isa);
            if (v44 > 4)
              v45 = "unknown";
            else
              v45 = off_1E149B878[v44];
            *(_DWORD *)buf = 136446466;
            v64 = "nw_connection_group_copy_protocol_metadata_for_message";
            v65 = 2080;
            v66 = (void *)v45;
            _os_log_impl(&dword_182FBE000, v26, v37, "%{public}s Unsupported group descriptor type: %s, no backtrace", buf, 0x16u);
          }
          goto LABEL_32;
        }
        if (v38)
        {
          v39 = nw_group_descriptor_get_type(v5[8].isa);
          if (v39 > 4)
            v40 = "unknown";
          else
            v40 = off_1E149B878[v39];
          *(_DWORD *)buf = 136446722;
          v64 = "nw_connection_group_copy_protocol_metadata_for_message";
          v65 = 2080;
          v66 = (void *)v40;
          v67 = 2082;
          v68 = v36;
          _os_log_impl(&dword_182FBE000, v26, v37, "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v36);
      }
LABEL_33:
      if (v25)
LABEL_34:
        free(v25);
LABEL_35:
      v20 = 0;
      goto LABEL_36;
    }
    goto LABEL_16;
  }
LABEL_10:
  v18 = nw_connection_group_copy_connection_for_message(v5, v6);
  v19 = v18;
  if (v18)
  {
    v20 = nw_connection_copy_protocol_metadata(v18, v8);

  }
  else
  {
    v20 = 0;

  }
LABEL_36:

  return v20;
}

void sub_183443A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

nw_endpoint_t nw_connection_group_copy_local_endpoint_for_message(nw_connection_group_t group, nw_content_context_t context)
{
  nw_connection_group_t v3;
  NSObject *v4;
  NSObject *v5;
  Class isa;
  objc_class *v7;
  int v8;
  NSObject *v9;
  id v10;
  void *v11;
  Class v12;
  objc_class *v13;
  int v14;
  Class v15;
  objc_class *v16;
  int v17;
  void *v18;
  unsigned int v19;
  const char *v20;
  id v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v30;
  unsigned int v31;
  const char *v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  unsigned int v36;
  const char *v37;
  os_log_type_t v38;
  unsigned int v39;
  const char *v40;
  unsigned int v41;
  const char *v42;
  void *v43;
  os_log_type_t v44;
  void *v45;
  os_log_type_t v46;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  _BOOL4 v50;
  os_log_type_t v51;
  os_log_type_t v52;
  char v53;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  char *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v3 = group;
  v4 = context;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_connection_group_copy_local_endpoint_for_message";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v44, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_34;
    }
    if (!v53)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v51 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v51, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v47 = type;
    v48 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v47, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
      goto LABEL_34;
    }
    if (v48)
    {
      *(_DWORD *)buf = 136446466;
      v56 = "nw_connection_group_copy_local_endpoint_for_message";
      v57 = 2082;
      v58 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v47, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_27;
  }
  if (!v4)
  {
    __nwlog_obj();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_connection_group_copy_local_endpoint_for_message";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v46, "%{public}s called with null context", buf, 0xCu);
      }
      goto LABEL_34;
    }
    if (!v53)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v52 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v52, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v49 = type;
    v50 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v49, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
      goto LABEL_34;
    }
    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      v56 = "nw_connection_group_copy_local_endpoint_for_message";
      v57 = 2082;
      v58 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v49, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_27:

    free(backtrace_string);
    if (!v22)
      goto LABEL_37;
    goto LABEL_36;
  }
  isa = v3[8].isa;
  if (!isa)
  {
LABEL_18:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v56 = "nw_connection_group_copy_local_endpoint_for_message";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s Group descriptor is not set", buf, 0xCu);
      }
      goto LABEL_34;
    }
    if (!v53)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v28 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s Group descriptor is not set, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = (id)gLogObj;
    v26 = type;
    v27 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s Group descriptor is not set, no backtrace", buf, 0xCu);
      }
      goto LABEL_34;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v56 = "nw_connection_group_copy_local_endpoint_for_message";
      v57 = 2082;
      v58 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s Group descriptor is not set, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_27;
  }
  v7 = isa;
  v8 = *((_DWORD *)v7 + 2);

  if (v8 != 1)
  {
    v12 = v3[8].isa;
    if (v12)
    {
      v13 = v12;
      v14 = *((_DWORD *)v13 + 2);

      if (v14 == 2)
        goto LABEL_12;
      v15 = v3[8].isa;
      if (v15)
      {
        v16 = v15;
        v17 = *((_DWORD *)v16 + 2);

        if (v17 == 4)
        {
LABEL_12:
          v10 = nw_connection_group_copy_connection_for_message(v3, v5);
          v11 = v10;
          if (v10)
          {
LABEL_13:
            v9 = nw_connection_copy_connected_local_endpoint(v10);

            goto LABEL_38;
          }
LABEL_14:
          v9 = 0;

          goto LABEL_38;
        }
        if (v3[8].isa)
        {
          __nwlog_obj();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = nw_group_descriptor_get_type(v3[8].isa);
          if (v19 > 4)
            v20 = "unknown";
          else
            v20 = off_1E149B878[v19];
          *(_DWORD *)buf = 136446466;
          v56 = "nw_connection_group_copy_local_endpoint_for_message";
          v57 = 2080;
          v58 = (void *)v20;
          v22 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v53 = 0;
          if (__nwlog_fault(v22, &type, &v53))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v23 = objc_claimAutoreleasedReturnValue();
              v30 = type;
              if (os_log_type_enabled(v23, type))
              {
                v31 = nw_group_descriptor_get_type(v3[8].isa);
                if (v31 > 4)
                  v32 = "unknown";
                else
                  v32 = off_1E149B878[v31];
                *(_DWORD *)buf = 136446466;
                v56 = "nw_connection_group_copy_local_endpoint_for_message";
                v57 = 2080;
                v58 = (void *)v32;
                _os_log_impl(&dword_182FBE000, v23, v30, "%{public}s Unsupported group descriptor type: %s", buf, 0x16u);
              }
LABEL_34:

              goto LABEL_35;
            }
            if (!v53)
            {
              __nwlog_obj();
              v23 = objc_claimAutoreleasedReturnValue();
              v38 = type;
              if (os_log_type_enabled(v23, type))
              {
                v39 = nw_group_descriptor_get_type(v3[8].isa);
                if (v39 > 4)
                  v40 = "unknown";
                else
                  v40 = off_1E149B878[v39];
                *(_DWORD *)buf = 136446466;
                v56 = "nw_connection_group_copy_local_endpoint_for_message";
                v57 = 2080;
                v58 = (void *)v40;
                _os_log_impl(&dword_182FBE000, v23, v38, "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded", buf, 0x16u);
              }
              goto LABEL_34;
            }
            v33 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v23 = objc_claimAutoreleasedReturnValue();
            v34 = type;
            v35 = os_log_type_enabled(v23, type);
            if (!v33)
            {
              if (v35)
              {
                v41 = nw_group_descriptor_get_type(v3[8].isa);
                if (v41 > 4)
                  v42 = "unknown";
                else
                  v42 = off_1E149B878[v41];
                *(_DWORD *)buf = 136446466;
                v56 = "nw_connection_group_copy_local_endpoint_for_message";
                v57 = 2080;
                v58 = (void *)v42;
                _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s Unsupported group descriptor type: %s, no backtrace", buf, 0x16u);
              }
              goto LABEL_34;
            }
            if (v35)
            {
              v36 = nw_group_descriptor_get_type(v3[8].isa);
              if (v36 > 4)
                v37 = "unknown";
              else
                v37 = off_1E149B878[v36];
              *(_DWORD *)buf = 136446722;
              v56 = "nw_connection_group_copy_local_endpoint_for_message";
              v57 = 2080;
              v58 = (void *)v37;
              v59 = 2082;
              v60 = v33;
              _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(v33);
          }
LABEL_35:
          if (!v22)
          {
LABEL_37:
            v9 = 0;
            goto LABEL_38;
          }
LABEL_36:
          free(v22);
          goto LABEL_37;
        }
      }
    }
    goto LABEL_18;
  }
  v9 = nw_content_context_copy_local_endpoint(v5);
  if (!v9)
  {
    v10 = nw_connection_group_copy_connection_for_message(v3, v5);
    v11 = v10;
    if (v10)
      goto LABEL_13;
    goto LABEL_14;
  }
LABEL_38:

  return v9;
}

void sub_18344451C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

nw_path_t nw_connection_group_copy_path_for_message(nw_connection_group_t group, nw_content_context_t context)
{
  nw_connection_group_t v3;
  NSObject *v4;
  NSObject *v5;
  Class isa;
  objc_class *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  Class v12;
  objc_class *v13;
  int v14;
  Class v15;
  objc_class *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  void (**v20)(_QWORD);
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  NWConcrete_nw_path_evaluator *evaluator_for_endpoint;
  os_unfair_lock_s *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  unsigned int v32;
  const char *v33;
  id v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  char *backtrace_string;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  os_log_type_t v43;
  unsigned int v44;
  const char *v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  unsigned int v49;
  const char *v50;
  os_log_type_t v51;
  unsigned int v52;
  const char *v53;
  unsigned int v54;
  const char *v55;
  void *v56;
  os_log_type_t v57;
  void *v58;
  os_log_type_t v59;
  os_log_type_t v60;
  _BOOL4 v61;
  os_log_type_t v62;
  _BOOL4 v63;
  os_log_type_t v64;
  os_log_type_t v65;
  _QWORD aBlock[4];
  NSObject *v67;
  os_log_type_t *v68;
  os_log_type_t type[8];
  os_log_type_t *v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t);
  void (*v73)(uint64_t);
  id v74;
  char v75;
  uint8_t buf[4];
  const char *v77;
  __int16 v78;
  void *v79;
  __int16 v80;
  char *v81;
  __int16 v82;
  void *v83;
  __int16 v84;
  void *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v3 = group;
  v4 = context;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v77 = "nw_connection_group_copy_path_for_message";
    v35 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v75 = 0;
    if (!__nwlog_fault(v35, type, &v75))
      goto LABEL_42;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v57 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_182FBE000, v36, v57, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (!v75)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v64 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_182FBE000, v36, v64, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v36 = objc_claimAutoreleasedReturnValue();
    v60 = type[0];
    v61 = os_log_type_enabled(v36, type[0]);
    if (!backtrace_string)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_182FBE000, v36, v60, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      v77 = "nw_connection_group_copy_path_for_message";
      v78 = 2082;
      v79 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v36, v60, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_34;
  }
  if (!v4)
  {
    __nwlog_obj();
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v77 = "nw_connection_group_copy_path_for_message";
    v35 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v75 = 0;
    if (!__nwlog_fault(v35, type, &v75))
      goto LABEL_42;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v59 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_182FBE000, v36, v59, "%{public}s called with null context", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (!v75)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v65 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_182FBE000, v36, v65, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v36 = objc_claimAutoreleasedReturnValue();
    v62 = type[0];
    v63 = os_log_type_enabled(v36, type[0]);
    if (!backtrace_string)
    {
      if (v63)
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_182FBE000, v36, v62, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v63)
    {
      *(_DWORD *)buf = 136446466;
      v77 = "nw_connection_group_copy_path_for_message";
      v78 = 2082;
      v79 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v36, v62, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_34:

    free(backtrace_string);
    if (!v35)
      goto LABEL_44;
    goto LABEL_43;
  }
  isa = v3[8].isa;
  if (!isa)
    goto LABEL_25;
  v7 = isa;
  v8 = *((_DWORD *)v7 + 2);

  if (v8 == 1)
  {
    v9 = nw_connection_group_copy_connection_for_message(v3, v5);
    v10 = v9;
    if (v9)
    {
      v11 = nw_connection_copy_current_path(v9);
LABEL_48:

      goto LABEL_49;
    }
    *(_QWORD *)type = 0;
    v70 = type;
    v71 = 0x3032000000;
    v72 = __Block_byref_object_copy__8574;
    v73 = __Block_byref_object_dispose__8575;
    v74 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_copy_path_for_message_block_invoke;
    aBlock[3] = &unk_1E14ACE40;
    v68 = type;
    v67 = v3;
    v20 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
    v20[2](v20);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

    v21 = (void *)nw_content_context_copy_local_endpoint(v5);
    v22 = (void *)nw_content_context_copy_remote_endpoint(v5);
    v23 = nw_content_context_copy_interface(v5);
    v24 = (void *)v23;
    v25 = *((_QWORD *)v70 + 5);
    if (v25 && v21 && v22 && v23)
    {
      v26 = nw_content_context_copy_interface(v5);
      nw_parameters_require_interface(v25, v26);

      evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(v22, *((void **)v70 + 5));
      if (evaluator_for_endpoint)
      {
        v28 = (os_unfair_lock_s *)((char *)evaluator_for_endpoint + 96);
        v29 = evaluator_for_endpoint;
        os_unfair_lock_lock(v28);
        v11 = v29[6].isa;
        os_unfair_lock_unlock(v28);

LABEL_47:
        _Block_object_dispose(type, 8);

        goto LABEL_48;
      }
      v29 = 0;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v29 = (id)gLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v30 = (void *)*((_QWORD *)v70 + 5);
        *(_DWORD *)buf = 136447234;
        v77 = "nw_connection_group_copy_path_for_message";
        v78 = 2112;
        v79 = v30;
        v80 = 2112;
        v81 = (char *)v21;
        v82 = 2112;
        v83 = v22;
        v84 = 2112;
        v85 = v24;
        _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_ERROR, "%{public}s Failed to set up parameters %@ for local %@, remote %@, interface %@", buf, 0x34u);
      }
    }
    v11 = 0;
    goto LABEL_47;
  }
  v12 = v3[8].isa;
  if (!v12)
    goto LABEL_25;
  v13 = v12;
  v14 = *((_DWORD *)v13 + 2);

  if (v14 == 2)
    goto LABEL_11;
  v15 = v3[8].isa;
  if (!v15)
  {
LABEL_25:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v34 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v77 = "nw_connection_group_copy_path_for_message";
    v35 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v75 = 0;
    if (!__nwlog_fault(v35, type, &v75))
      goto LABEL_42;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = (id)gLogObj;
      v37 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s Group descriptor is not set", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (!v75)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = (id)gLogObj;
      v41 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_182FBE000, v36, v41, "%{public}s Group descriptor is not set, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v36 = (id)gLogObj;
    v39 = type[0];
    v40 = os_log_type_enabled(v36, type[0]);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_182FBE000, v36, v39, "%{public}s Group descriptor is not set, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      v77 = "nw_connection_group_copy_path_for_message";
      v78 = 2082;
      v79 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v36, v39, "%{public}s Group descriptor is not set, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_34;
  }
  v16 = v15;
  v17 = *((_DWORD *)v16 + 2);

  if (v17 != 4)
  {
    if (v3[8].isa)
    {
      __nwlog_obj();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = nw_group_descriptor_get_type(v3[8].isa);
      if (v32 > 4)
        v33 = "unknown";
      else
        v33 = off_1E149B878[v32];
      *(_DWORD *)buf = 136446466;
      v77 = "nw_connection_group_copy_path_for_message";
      v78 = 2080;
      v79 = (void *)v33;
      v35 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v75 = 0;
      if (__nwlog_fault(v35, type, &v75))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v43 = type[0];
          if (os_log_type_enabled(v36, type[0]))
          {
            v44 = nw_group_descriptor_get_type(v3[8].isa);
            if (v44 > 4)
              v45 = "unknown";
            else
              v45 = off_1E149B878[v44];
            *(_DWORD *)buf = 136446466;
            v77 = "nw_connection_group_copy_path_for_message";
            v78 = 2080;
            v79 = (void *)v45;
            _os_log_impl(&dword_182FBE000, v36, v43, "%{public}s Unsupported group descriptor type: %s", buf, 0x16u);
          }
LABEL_41:

          goto LABEL_42;
        }
        if (!v75)
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v51 = type[0];
          if (os_log_type_enabled(v36, type[0]))
          {
            v52 = nw_group_descriptor_get_type(v3[8].isa);
            if (v52 > 4)
              v53 = "unknown";
            else
              v53 = off_1E149B878[v52];
            *(_DWORD *)buf = 136446466;
            v77 = "nw_connection_group_copy_path_for_message";
            v78 = 2080;
            v79 = (void *)v53;
            _os_log_impl(&dword_182FBE000, v36, v51, "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_41;
        }
        v46 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v47 = type[0];
        v48 = os_log_type_enabled(v36, type[0]);
        if (!v46)
        {
          if (v48)
          {
            v54 = nw_group_descriptor_get_type(v3[8].isa);
            if (v54 > 4)
              v55 = "unknown";
            else
              v55 = off_1E149B878[v54];
            *(_DWORD *)buf = 136446466;
            v77 = "nw_connection_group_copy_path_for_message";
            v78 = 2080;
            v79 = (void *)v55;
            _os_log_impl(&dword_182FBE000, v36, v47, "%{public}s Unsupported group descriptor type: %s, no backtrace", buf, 0x16u);
          }
          goto LABEL_41;
        }
        if (v48)
        {
          v49 = nw_group_descriptor_get_type(v3[8].isa);
          if (v49 > 4)
            v50 = "unknown";
          else
            v50 = off_1E149B878[v49];
          *(_DWORD *)buf = 136446722;
          v77 = "nw_connection_group_copy_path_for_message";
          v78 = 2080;
          v79 = (void *)v50;
          v80 = 2082;
          v81 = v46;
          _os_log_impl(&dword_182FBE000, v36, v47, "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v46);
      }
LABEL_42:
      if (!v35)
      {
LABEL_44:
        v11 = 0;
        goto LABEL_49;
      }
LABEL_43:
      free(v35);
      goto LABEL_44;
    }
    goto LABEL_25;
  }
LABEL_11:
  v18 = nw_connection_group_copy_connection_for_message(v3, v5);
  v19 = v18;
  if (v18)
  {
    v11 = nw_connection_copy_current_path(v18);

  }
  else
  {
    v11 = 0;

  }
LABEL_49:

  return v11;
}

void sub_1834451F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Block_object_dispose(&a20, 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_copy_path_for_message_block_invoke(uint64_t a1)
{
  id v2;
  _BOOL8 v3;
  uint64_t v4;
  void *v5;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 56);
  v3 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v2, 0, 0);

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1834452D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_get_next_instance_id()
{
  unsigned int v0;
  uint64_t result;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  do
    v0 = __ldaxr(nw_protocol_get_next_instance_id::s_last_instance_id);
  while (__stlxr(v0 + 1, nw_protocol_get_next_instance_id::s_last_instance_id));
  result = v0 + 1;
  if (v0 == -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v3 = 136446466;
      v4 = "nw_protocol_get_next_instance_id";
      v5 = 1024;
      v6 = 0;
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_ERROR, "%{public}s reached %u instance ids, wrapping", (uint8_t *)&v3, 0x12u);
    }
    return nw_protocol_get_next_instance_id();
  }
  return result;
}

uint64_t nw_protocol_add_input_handler(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t, uint64_t);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(_QWORD);
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(_QWORD);
  const void *v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *backtrace_string;
  _BOOL4 v35;
  const char *v36;
  char *v37;
  _BOOL4 v38;
  char *v39;
  _BOOL4 v40;
  const char *v41;
  const char *v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *(void **)(a1 + 40);
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      v5 = *(_QWORD *)(a1 + 88);
      if (v5)
        *(_QWORD *)(a1 + 88) = v5 + 1;
    }
    if (a2)
    {
      v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        v7 = *(_QWORD *)(a2 + 88);
        if (v7)
          *(_QWORD *)(a2 + 88) = v7 + 1;
      }
      v8 = *(uint64_t (***)(uint64_t, uint64_t))(a1 + 24);
      if (v8)
      {
        v9 = *v8;
        if (v9)
        {
          v10 = v9(a1, a2);
          if (v6 != &nw_protocol_ref_counted_handle)
          {
LABEL_13:
            if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v12 = *(_QWORD *)(a1 + 88);
              if (v12)
              {
                v13 = v12 - 1;
                *(_QWORD *)(a1 + 88) = v13;
                if (!v13)
                {
                  v14 = *(void (***)(_QWORD))(a1 + 64);
                  if (v14)
                  {
                    *(_QWORD *)(a1 + 64) = 0;
                    v14[2](v14);
                    _Block_release(v14);
                  }
                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    v15 = *(const void **)(a1 + 64);
                    if (v15)
                      _Block_release(v15);
                  }
                  free((void *)a1);
                }
              }
            }
            return v10;
          }
LABEL_12:
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v16 = *(_QWORD *)(a2 + 88);
            if (v16)
            {
              v17 = v16 - 1;
              *(_QWORD *)(a2 + 88) = v17;
              if (!v17)
              {
                v18 = *(void (***)(_QWORD))(a2 + 64);
                if (v18)
                {
                  *(_QWORD *)(a2 + 64) = 0;
                  v18[2](v18);
                  _Block_release(v18);
                }
                if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                {
                  v19 = *(const void **)(a2 + 64);
                  if (v19)
                    _Block_release(v19);
                }
                free((void *)a2);
              }
            }
          }
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      v20 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      v46 = "__nw_protocol_add_input_handler";
      if (!v20)
        v20 = "invalid";
      v47 = 2082;
      v48 = (void *)v20;
      v49 = 2048;
      v50 = a1;
      v21 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v22 = __nwlog_obj();
          v23 = type;
          if (!os_log_type_enabled(v22, type))
            goto LABEL_74;
          v24 = *(const char **)(a1 + 16);
          if (!v24)
            v24 = "invalid";
          *(_DWORD *)buf = 136446722;
          v46 = "__nw_protocol_add_input_handler";
          v47 = 2082;
          v48 = (void *)v24;
          v49 = 2048;
          v50 = a1;
          v25 = "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback";
LABEL_73:
          _os_log_impl(&dword_182FBE000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }
        if (!v43)
        {
          v22 = __nwlog_obj();
          v23 = type;
          if (!os_log_type_enabled(v22, type))
            goto LABEL_74;
          v41 = *(const char **)(a1 + 16);
          if (!v41)
            v41 = "invalid";
          *(_DWORD *)buf = 136446722;
          v46 = "__nw_protocol_add_input_handler";
          v47 = 2082;
          v48 = (void *)v41;
          v49 = 2048;
          v50 = a1;
          v25 = "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, backtrace limit exceeded";
          goto LABEL_73;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v22 = __nwlog_obj();
        v23 = type;
        v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35)
            goto LABEL_74;
          v42 = *(const char **)(a1 + 16);
          if (!v42)
            v42 = "invalid";
          *(_DWORD *)buf = 136446722;
          v46 = "__nw_protocol_add_input_handler";
          v47 = 2082;
          v48 = (void *)v42;
          v49 = 2048;
          v50 = a1;
          v25 = "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, no backtrace";
          goto LABEL_73;
        }
        if (v35)
        {
          v36 = *(const char **)(a1 + 16);
          if (!v36)
            v36 = "invalid";
          *(_DWORD *)buf = 136446978;
          v46 = "__nw_protocol_add_input_handler";
          v47 = 2082;
          v48 = (void *)v36;
          v49 = 2048;
          v50 = a1;
          v51 = 2082;
          v52 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_74:
      if (v21)
        free(v21);
      v10 = 0;
      if (v6 != &nw_protocol_ref_counted_handle)
        goto LABEL_13;
      goto LABEL_12;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "__nw_protocol_add_input_handler";
    v30 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "__nw_protocol_add_input_handler";
          v33 = "%{public}s called with null input_protocol";
LABEL_90:
          _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0xCu);
        }
      }
      else if (v43)
      {
        v39 = (char *)__nw_create_backtrace_string();
        v31 = __nwlog_obj();
        v32 = type;
        v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446466;
            v46 = "__nw_protocol_add_input_handler";
            v47 = 2082;
            v48 = v39;
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v39);
          goto LABEL_91;
        }
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "__nw_protocol_add_input_handler";
          v33 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_90;
        }
      }
      else
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "__nw_protocol_add_input_handler";
          v33 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }
LABEL_91:
    if (v30)
      free(v30);
    v10 = 0;
    goto LABEL_13;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v46 = "__nw_protocol_add_input_handler";
  v26 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "__nw_protocol_add_input_handler";
        v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
      }
    }
    else if (v43)
    {
      v37 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          v46 = "__nw_protocol_add_input_handler";
          v47 = 2082;
          v48 = v37;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v37);
        goto LABEL_85;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "__nw_protocol_add_input_handler";
        v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }
    else
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "__nw_protocol_add_input_handler";
        v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }
LABEL_85:
  if (v26)
    free(v26);
  return 0;
}

uint64_t nw_protocol_add_input_handler_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(_QWORD);
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  const void *v18;

  if (!a1)
    return 0;
  v3 = *(uint64_t (***)(uint64_t, uint64_t))(a1 + 24);
  if (!v3)
    return 0;
  v5 = 0;
  if (a2)
  {
    v6 = *v3;
    if (v6)
    {
      v7 = *(void **)(a1 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a1 + 88);
        if (v8)
          *(_QWORD *)(a1 + 88) = v8 + 1;
      }
      if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v9 = *(_QWORD *)(a2 + 88);
        if (v9)
          *(_QWORD *)(a2 + 88) = v9 + 1;
        v5 = v6(a1, a2);
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          v11 = *(_QWORD *)(a2 + 88);
          if (v11)
          {
            v12 = v11 - 1;
            *(_QWORD *)(a2 + 88) = v12;
            if (!v12)
            {
              v13 = *(void (***)(_QWORD))(a2 + 64);
              if (v13)
              {
                *(_QWORD *)(a2 + 64) = 0;
                v13[2](v13);
                _Block_release(v13);
              }
              if ((*(_BYTE *)(a2 + 72) & 1) != 0)
              {
                v14 = *(const void **)(a2 + 64);
                if (v14)
                  _Block_release(v14);
              }
              free((void *)a2);
            }
          }
        }
      }
      else
      {
        v5 = v6(a1, a2);
      }
      if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        v15 = *(_QWORD *)(a1 + 88);
        if (v15)
        {
          v16 = v15 - 1;
          *(_QWORD *)(a1 + 88) = v16;
          if (!v16)
          {
            v17 = *(void (***)(_QWORD))(a1 + 64);
            if (v17)
            {
              *(_QWORD *)(a1 + 64) = 0;
              v17[2](v17);
              _Block_release(v17);
            }
            if ((*(_BYTE *)(a1 + 72) & 1) != 0)
            {
              v18 = *(const void **)(a1 + 64);
              if (v18)
                _Block_release(v18);
            }
            free((void *)a1);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t nw_protocol_add_input_handler_is_valid(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  if (a1)
  {
    v2 = *(_QWORD **)(a1 + 24);
    if (v2)
      LODWORD(v2) = *v2 != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

uint64_t nw_protocol_replace_input_handler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(_QWORD);
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(_QWORD);
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  void (**v26)(_QWORD);
  const void *v27;
  const char *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  const char *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  const char *v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  const char *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  const char *v45;
  char *backtrace_string;
  NSObject *v47;
  _BOOL4 v48;
  const char *v49;
  char *v50;
  _BOOL4 v51;
  char *v52;
  _BOOL4 v53;
  char *v54;
  _BOOL4 v55;
  const char *v56;
  NSObject *v57;
  const char *v58;
  NSObject *log;
  char v60;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v63;
  __int16 v64;
  void *v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  char *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = *(void **)(a1 + 40);
    if (v6 == &nw_protocol_ref_counted_handle)
    {
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
        *(_QWORD *)(a1 + 88) = v7 + 1;
    }
    if (a2)
    {
      v8 = *(void **)(a2 + 40);
      if (v8 == &nw_protocol_ref_counted_handle)
      {
        v9 = *(_QWORD *)(a2 + 88);
        if (v9)
          *(_QWORD *)(a2 + 88) = v9 + 1;
      }
      if (a3)
      {
        v10 = *(void **)(a3 + 40);
        if (v10 == &nw_protocol_ref_counted_handle)
        {
          v11 = *(_QWORD *)(a3 + 88);
          if (v11)
            *(_QWORD *)(a3 + 88) = v11 + 1;
        }
        v12 = *(_QWORD *)(a1 + 24);
        if (v12)
        {
          v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
          if (v13)
          {
            v14 = v13(a1, a2, a3);
            if (v10 != &nw_protocol_ref_counted_handle)
            {
LABEL_17:
              if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                v20 = *(_QWORD *)(a2 + 88);
                if (v20)
                {
                  v21 = v20 - 1;
                  *(_QWORD *)(a2 + 88) = v21;
                  if (!v21)
                  {
                    v22 = *(void (***)(_QWORD))(a2 + 64);
                    if (v22)
                    {
                      *(_QWORD *)(a2 + 64) = 0;
                      v22[2](v22);
                      _Block_release(v22);
                    }
                    if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                    {
                      v23 = *(const void **)(a2 + 64);
                      if (v23)
                        _Block_release(v23);
                    }
                    free((void *)a2);
                  }
                }
              }
LABEL_19:
              if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
              {
                v16 = *(_QWORD *)(a1 + 88);
                if (v16)
                {
                  v17 = v16 - 1;
                  *(_QWORD *)(a1 + 88) = v17;
                  if (!v17)
                  {
                    v18 = *(void (***)(_QWORD))(a1 + 64);
                    if (v18)
                    {
                      *(_QWORD *)(a1 + 64) = 0;
                      v18[2](v18);
                      _Block_release(v18);
                    }
                    if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                    {
                      v19 = *(const void **)(a1 + 64);
                      if (v19)
                        _Block_release(v19);
                    }
                    free((void *)a1);
                  }
                }
              }
              return v14;
            }
LABEL_16:
            if (*(_UNKNOWN **)(a3 + 40) == &nw_protocol_ref_counted_handle)
            {
              v24 = *(_QWORD *)(a3 + 88);
              if (v24)
              {
                v25 = v24 - 1;
                *(_QWORD *)(a3 + 88) = v25;
                if (!v25)
                {
                  v26 = *(void (***)(_QWORD))(a3 + 64);
                  if (v26)
                  {
                    *(_QWORD *)(a3 + 64) = 0;
                    v26[2](v26);
                    _Block_release(v26);
                  }
                  if ((*(_BYTE *)(a3 + 72) & 1) != 0)
                  {
                    v27 = *(const void **)(a3 + 64);
                    if (v27)
                      _Block_release(v27);
                  }
                  free((void *)a3);
                }
              }
            }
            goto LABEL_17;
          }
        }
        __nwlog_obj();
        v28 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        v63 = "__nw_protocol_replace_input_handler";
        if (!v28)
          v28 = "invalid";
        v64 = 2082;
        v65 = (void *)v28;
        v66 = 2048;
        v67 = a1;
        v29 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v60 = 0;
        if (__nwlog_fault(v29, &type, &v60))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v30 = __nwlog_obj();
            v31 = type;
            if (!os_log_type_enabled(v30, type))
              goto LABEL_94;
            v32 = *(const char **)(a1 + 16);
            if (!v32)
              v32 = "invalid";
            *(_DWORD *)buf = 136446722;
            v63 = "__nw_protocol_replace_input_handler";
            v64 = 2082;
            v65 = (void *)v32;
            v66 = 2048;
            v67 = a1;
            v33 = "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback";
LABEL_92:
            v57 = v30;
LABEL_93:
            _os_log_impl(&dword_182FBE000, v57, v31, v33, buf, 0x20u);
            goto LABEL_94;
          }
          if (!v60)
          {
            v30 = __nwlog_obj();
            v31 = type;
            if (!os_log_type_enabled(v30, type))
              goto LABEL_94;
            v56 = *(const char **)(a1 + 16);
            if (!v56)
              v56 = "invalid";
            *(_DWORD *)buf = 136446722;
            v63 = "__nw_protocol_replace_input_handler";
            v64 = 2082;
            v65 = (void *)v56;
            v66 = 2048;
            v67 = a1;
            v33 = "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, backtrace limit exceeded";
            goto LABEL_92;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v47 = __nwlog_obj();
          v31 = type;
          log = v47;
          v48 = os_log_type_enabled(v47, type);
          if (backtrace_string)
          {
            if (v48)
            {
              v49 = *(const char **)(a1 + 16);
              if (!v49)
                v49 = "invalid";
              *(_DWORD *)buf = 136446978;
              v63 = "__nw_protocol_replace_input_handler";
              v64 = 2082;
              v65 = (void *)v49;
              v66 = 2048;
              v67 = a1;
              v68 = 2082;
              v69 = backtrace_string;
              _os_log_impl(&dword_182FBE000, log, v31, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }
            free(backtrace_string);
          }
          else if (v48)
          {
            v58 = *(const char **)(a1 + 16);
            if (!v58)
              v58 = "invalid";
            *(_DWORD *)buf = 136446722;
            v63 = "__nw_protocol_replace_input_handler";
            v64 = 2082;
            v65 = (void *)v58;
            v66 = 2048;
            v67 = a1;
            v33 = "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, no backtrace";
            v57 = log;
            goto LABEL_93;
          }
        }
LABEL_94:
        if (v29)
          free(v29);
        v14 = 0;
        if (v10 != &nw_protocol_ref_counted_handle)
          goto LABEL_17;
        goto LABEL_16;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v63 = "__nw_protocol_replace_input_handler";
      v42 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v60 = 0;
      if (__nwlog_fault(v42, &type, &v60))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v43 = __nwlog_obj();
          v44 = type;
          if (os_log_type_enabled(v43, type))
          {
            *(_DWORD *)buf = 136446210;
            v63 = "__nw_protocol_replace_input_handler";
            v45 = "%{public}s called with null new_input_protocol";
LABEL_122:
            _os_log_impl(&dword_182FBE000, v43, v44, v45, buf, 0xCu);
          }
        }
        else if (v60)
        {
          v54 = (char *)__nw_create_backtrace_string();
          v43 = __nwlog_obj();
          v44 = type;
          v55 = os_log_type_enabled(v43, type);
          if (v54)
          {
            if (v55)
            {
              *(_DWORD *)buf = 136446466;
              v63 = "__nw_protocol_replace_input_handler";
              v64 = 2082;
              v65 = v54;
              _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v54);
            goto LABEL_123;
          }
          if (v55)
          {
            *(_DWORD *)buf = 136446210;
            v63 = "__nw_protocol_replace_input_handler";
            v45 = "%{public}s called with null new_input_protocol, no backtrace";
            goto LABEL_122;
          }
        }
        else
        {
          v43 = __nwlog_obj();
          v44 = type;
          if (os_log_type_enabled(v43, type))
          {
            *(_DWORD *)buf = 136446210;
            v63 = "__nw_protocol_replace_input_handler";
            v45 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
            goto LABEL_122;
          }
        }
      }
LABEL_123:
      if (v42)
        free(v42);
      v14 = 0;
      goto LABEL_17;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v63 = "__nw_protocol_replace_input_handler";
    v38 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (__nwlog_fault(v38, &type, &v60))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v39 = __nwlog_obj();
        v40 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          v63 = "__nw_protocol_replace_input_handler";
          v41 = "%{public}s called with null old_input_protocol";
LABEL_116:
          _os_log_impl(&dword_182FBE000, v39, v40, v41, buf, 0xCu);
        }
      }
      else if (v60)
      {
        v52 = (char *)__nw_create_backtrace_string();
        v39 = __nwlog_obj();
        v40 = type;
        v53 = os_log_type_enabled(v39, type);
        if (v52)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            v63 = "__nw_protocol_replace_input_handler";
            v64 = 2082;
            v65 = v52;
            _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v52);
          goto LABEL_117;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          v63 = "__nw_protocol_replace_input_handler";
          v41 = "%{public}s called with null old_input_protocol, no backtrace";
          goto LABEL_116;
        }
      }
      else
      {
        v39 = __nwlog_obj();
        v40 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          v63 = "__nw_protocol_replace_input_handler";
          v41 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
          goto LABEL_116;
        }
      }
    }
LABEL_117:
    if (v38)
      free(v38);
    v14 = 0;
    goto LABEL_19;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v63 = "__nw_protocol_replace_input_handler";
  v34 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v60 = 0;
  if (__nwlog_fault(v34, &type, &v60))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v35 = __nwlog_obj();
      v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "__nw_protocol_replace_input_handler";
        v37 = "%{public}s called with null protocol";
LABEL_110:
        _os_log_impl(&dword_182FBE000, v35, v36, v37, buf, 0xCu);
      }
    }
    else if (v60)
    {
      v50 = (char *)__nw_create_backtrace_string();
      v35 = __nwlog_obj();
      v36 = type;
      v51 = os_log_type_enabled(v35, type);
      if (v50)
      {
        if (v51)
        {
          *(_DWORD *)buf = 136446466;
          v63 = "__nw_protocol_replace_input_handler";
          v64 = 2082;
          v65 = v50;
          _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v50);
        goto LABEL_111;
      }
      if (v51)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "__nw_protocol_replace_input_handler";
        v37 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_110;
      }
    }
    else
    {
      v35 = __nwlog_obj();
      v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "__nw_protocol_replace_input_handler";
        v37 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_110;
      }
    }
  }
LABEL_111:
  if (v34)
    free(v34);
  return 0;
}

uint64_t nw_protocol_replace_input_handler_quiet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(_QWORD);
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  void (**v25)(_QWORD);
  const void *v26;

  if (!a1)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    return 0;
  v6 = 0;
  if (a3)
  {
    if (a2)
    {
      v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      if (v8)
      {
        v9 = *(void **)(a1 + 40);
        if (v9 == &nw_protocol_ref_counted_handle)
        {
          v10 = *(_QWORD *)(a1 + 88);
          if (v10)
            *(_QWORD *)(a1 + 88) = v10 + 1;
        }
        v11 = *(void **)(a2 + 40);
        if (v11 == &nw_protocol_ref_counted_handle)
        {
          v12 = *(_QWORD *)(a2 + 88);
          if (v12)
            *(_QWORD *)(a2 + 88) = v12 + 1;
        }
        if (*(_UNKNOWN **)(a3 + 40) == &nw_protocol_ref_counted_handle)
        {
          v13 = *(_QWORD *)(a3 + 88);
          if (v13)
            *(_QWORD *)(a3 + 88) = v13 + 1;
          v6 = v8(a1, a2, a3);
          if (*(_UNKNOWN **)(a3 + 40) == &nw_protocol_ref_counted_handle)
          {
            v15 = *(_QWORD *)(a3 + 88);
            if (v15)
            {
              v16 = v15 - 1;
              *(_QWORD *)(a3 + 88) = v16;
              if (!v16)
              {
                v17 = *(void (***)(_QWORD))(a3 + 64);
                if (v17)
                {
                  *(_QWORD *)(a3 + 64) = 0;
                  v17[2](v17);
                  _Block_release(v17);
                }
                if ((*(_BYTE *)(a3 + 72) & 1) != 0)
                {
                  v18 = *(const void **)(a3 + 64);
                  if (v18)
                    _Block_release(v18);
                }
                free((void *)a3);
              }
            }
          }
        }
        else
        {
          v6 = v8(a1, a2, a3);
        }
        if (v11 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          v19 = *(_QWORD *)(a2 + 88);
          if (v19)
          {
            v20 = v19 - 1;
            *(_QWORD *)(a2 + 88) = v20;
            if (!v20)
            {
              v21 = *(void (***)(_QWORD))(a2 + 64);
              if (v21)
              {
                *(_QWORD *)(a2 + 64) = 0;
                v21[2](v21);
                _Block_release(v21);
              }
              if ((*(_BYTE *)(a2 + 72) & 1) != 0)
              {
                v22 = *(const void **)(a2 + 64);
                if (v22)
                  _Block_release(v22);
              }
              free((void *)a2);
            }
          }
        }
        if (v9 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          v23 = *(_QWORD *)(a1 + 88);
          if (v23)
          {
            v24 = v23 - 1;
            *(_QWORD *)(a1 + 88) = v24;
            if (!v24)
            {
              v25 = *(void (***)(_QWORD))(a1 + 64);
              if (v25)
              {
                *(_QWORD *)(a1 + 64) = 0;
                v25[2](v25);
                _Block_release(v25);
              }
              if ((*(_BYTE *)(a1 + 72) & 1) != 0)
              {
                v26 = *(const void **)(a1 + 64);
                if (v26)
                  _Block_release(v26);
              }
              free((void *)a1);
            }
          }
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_replace_input_handler_is_valid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
      LODWORD(v3) = *(_QWORD *)(v3 + 16) != 0;
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (!a2)
    LODWORD(v3) = 0;
  if (a3)
    return v3;
  else
    return 0;
}

uint64_t nw_protocol_remove_input_handler_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(_QWORD);
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  const void *v18;

  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v5 = 0;
  if (a2)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    if (v6)
    {
      v7 = *(void **)(a1 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a1 + 88);
        if (v8)
          *(_QWORD *)(a1 + 88) = v8 + 1;
      }
      if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v9 = *(_QWORD *)(a2 + 88);
        if (v9)
          *(_QWORD *)(a2 + 88) = v9 + 1;
        v5 = v6(a1, a2);
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          v11 = *(_QWORD *)(a2 + 88);
          if (v11)
          {
            v12 = v11 - 1;
            *(_QWORD *)(a2 + 88) = v12;
            if (!v12)
            {
              v13 = *(void (***)(_QWORD))(a2 + 64);
              if (v13)
              {
                *(_QWORD *)(a2 + 64) = 0;
                v13[2](v13);
                _Block_release(v13);
              }
              if ((*(_BYTE *)(a2 + 72) & 1) != 0)
              {
                v14 = *(const void **)(a2 + 64);
                if (v14)
                  _Block_release(v14);
              }
              free((void *)a2);
            }
          }
        }
      }
      else
      {
        v5 = v6(a1, a2);
      }
      if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        v15 = *(_QWORD *)(a1 + 88);
        if (v15)
        {
          v16 = v15 - 1;
          *(_QWORD *)(a1 + 88) = v16;
          if (!v16)
          {
            v17 = *(void (***)(_QWORD))(a1 + 64);
            if (v17)
            {
              *(_QWORD *)(a1 + 64) = 0;
              v17[2](v17);
              _Block_release(v17);
            }
            if ((*(_BYTE *)(a1 + 72) & 1) != 0)
            {
              v18 = *(const void **)(a1 + 64);
              if (v18)
                _Block_release(v18);
            }
            free((void *)a1);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t nw_protocol_remove_input_handler_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 8) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

uint64_t nw_protocol_add_listen_handler(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  NSObject *v23;
  os_log_type_t v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  char *v28;
  _BOOL4 v29;
  char *v30;
  _BOOL4 v31;
  const char *v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint32_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(void **)(a1 + 40);
    if (v3 == &nw_protocol_ref_counted_handle)
    {
      v4 = *(_QWORD *)(a1 + 88);
      if (v4)
        *(_QWORD *)(a1 + 88) = v4 + 1;
    }
    if (a2)
    {
      v5 = *(_QWORD *)(a1 + 24);
      if (v5)
      {
        v6 = *(uint64_t (**)(uint64_t))(v5 + 232);
        if (v6)
        {
          v7 = v6(a1);
          if (v3 != &nw_protocol_ref_counted_handle)
            return v7;
          goto LABEL_9;
        }
      }
      __nwlog_obj();
      v13 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      v40 = "__nw_protocol_add_listen_handler";
      if (!v13)
        v13 = "invalid";
      v41 = 2082;
      v42 = (void *)v13;
      v43 = 2048;
      v44 = a1;
      v14 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (__nwlog_fault(v14, &type, &v37))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v15 = __nwlog_obj();
          v16 = type;
          if (!os_log_type_enabled(v15, type))
            goto LABEL_76;
          v17 = *(const char **)(a1 + 16);
          if (!v17)
            v17 = "invalid";
          *(_DWORD *)buf = 136446722;
          v40 = "__nw_protocol_add_listen_handler";
          v41 = 2082;
          v42 = (void *)v17;
          v43 = 2048;
          v44 = a1;
          v18 = "%{public}s protocol %{public}s (%p) has invalid add_listen_handler callback";
LABEL_61:
          v34 = v15;
          v35 = v16;
          v36 = 32;
LABEL_75:
          _os_log_impl(&dword_182FBE000, v34, v35, v18, buf, v36);
          goto LABEL_76;
        }
        if (!v37)
        {
          v15 = __nwlog_obj();
          v16 = type;
          if (!os_log_type_enabled(v15, type))
            goto LABEL_76;
          v32 = *(const char **)(a1 + 16);
          if (!v32)
            v32 = "invalid";
          *(_DWORD *)buf = 136446722;
          v40 = "__nw_protocol_add_listen_handler";
          v41 = 2082;
          v42 = (void *)v32;
          v43 = 2048;
          v44 = a1;
          v18 = "%{public}s protocol %{public}s (%p) has invalid add_listen_handler callback, backtrace limit exceeded";
          goto LABEL_61;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v15 = __nwlog_obj();
        v16 = type;
        v26 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (!v26)
            goto LABEL_76;
          v33 = *(const char **)(a1 + 16);
          if (!v33)
            v33 = "invalid";
          *(_DWORD *)buf = 136446722;
          v40 = "__nw_protocol_add_listen_handler";
          v41 = 2082;
          v42 = (void *)v33;
          v43 = 2048;
          v44 = a1;
          v18 = "%{public}s protocol %{public}s (%p) has invalid add_listen_handler callback, no backtrace";
          goto LABEL_61;
        }
        if (v26)
        {
          v27 = *(const char **)(a1 + 16);
          if (!v27)
            v27 = "invalid";
          *(_DWORD *)buf = 136446978;
          v40 = "__nw_protocol_add_listen_handler";
          v41 = 2082;
          v42 = (void *)v27;
          v43 = 2048;
          v44 = a1;
          v45 = 2082;
          v46 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s protocol %{public}s (%p) has invalid add_listen_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_76:
      if (!v14)
        goto LABEL_78;
      goto LABEL_77;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "__nw_protocol_add_listen_handler";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v14, &type, &v37))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (!os_log_type_enabled(v23, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_add_listen_handler";
      v18 = "%{public}s called with null listen_protocol";
    }
    else if (v37)
    {
      v30 = (char *)__nw_create_backtrace_string();
      v23 = __nwlog_obj();
      v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "__nw_protocol_add_listen_handler";
          v41 = 2082;
          v42 = v30;
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null listen_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v30);
        if (!v14)
        {
LABEL_78:
          v7 = 0;
          if (v3 != &nw_protocol_ref_counted_handle)
            return v7;
LABEL_9:
          if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v9 = *(_QWORD *)(a1 + 88);
            if (v9)
            {
              v10 = v9 - 1;
              *(_QWORD *)(a1 + 88) = v10;
              if (!v10)
              {
                v11 = *(void (***)(_QWORD))(a1 + 64);
                if (v11)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v11[2](v11);
                  _Block_release(v11);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v12 = *(const void **)(a1 + 64);
                  if (v12)
                    _Block_release(v12);
                }
                free((void *)a1);
              }
            }
          }
          return v7;
        }
LABEL_77:
        free(v14);
        goto LABEL_78;
      }
      if (!v31)
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_add_listen_handler";
      v18 = "%{public}s called with null listen_protocol, no backtrace";
    }
    else
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (!os_log_type_enabled(v23, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_add_listen_handler";
      v18 = "%{public}s called with null listen_protocol, backtrace limit exceeded";
    }
    v34 = v23;
    v35 = v24;
    v36 = 12;
    goto LABEL_75;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v40 = "__nw_protocol_add_listen_handler";
  v19 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v19, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "__nw_protocol_add_listen_handler";
        v22 = "%{public}s called with null protocol";
LABEL_68:
        _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
      }
    }
    else if (v37)
    {
      v28 = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v29 = os_log_type_enabled(v20, type);
      if (v28)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "__nw_protocol_add_listen_handler";
          v41 = 2082;
          v42 = v28;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v28);
        goto LABEL_69;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "__nw_protocol_add_listen_handler";
        v22 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_68;
      }
    }
    else
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "__nw_protocol_add_listen_handler";
        v22 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_68;
      }
    }
  }
LABEL_69:
  if (v19)
    free(v19);
  return 0;
}

uint64_t nw_protocol_add_listen_handler_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  const void *v11;

  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v4 = 0;
  if (a2)
  {
    v5 = *(uint64_t (**)(uint64_t))(v3 + 232);
    if (v5)
    {
      if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
        return v5(a1);
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
        *(_QWORD *)(a1 + 88) = v7 + 1;
      v4 = v5(a1);
      if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a1 + 88);
        if (v8)
        {
          v9 = v8 - 1;
          *(_QWORD *)(a1 + 88) = v9;
          if (!v9)
          {
            v10 = *(void (***)(_QWORD))(a1 + 64);
            if (v10)
            {
              *(_QWORD *)(a1 + 64) = 0;
              v10[2](v10);
              _Block_release(v10);
            }
            if ((*(_BYTE *)(a1 + 72) & 1) != 0)
            {
              v11 = *(const void **)(a1 + 64);
              if (v11)
                _Block_release(v11);
            }
            free((void *)a1);
          }
        }
      }
    }
  }
  return v4;
}

uint64_t nw_protocol_add_listen_handler_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 232) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

uint64_t nw_protocol_remove_listen_handler(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  NSObject *v23;
  os_log_type_t v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  char *v28;
  _BOOL4 v29;
  char *v30;
  _BOOL4 v31;
  const char *v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint32_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(void **)(a1 + 40);
    if (v3 == &nw_protocol_ref_counted_handle)
    {
      v4 = *(_QWORD *)(a1 + 88);
      if (v4)
        *(_QWORD *)(a1 + 88) = v4 + 1;
    }
    if (a2)
    {
      v5 = *(_QWORD *)(a1 + 24);
      if (v5)
      {
        v6 = *(uint64_t (**)(uint64_t))(v5 + 240);
        if (v6)
        {
          v7 = v6(a1);
          if (v3 != &nw_protocol_ref_counted_handle)
            return v7;
          goto LABEL_9;
        }
      }
      __nwlog_obj();
      v13 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      v40 = "__nw_protocol_remove_listen_handler";
      if (!v13)
        v13 = "invalid";
      v41 = 2082;
      v42 = (void *)v13;
      v43 = 2048;
      v44 = a1;
      v14 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (__nwlog_fault(v14, &type, &v37))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v15 = __nwlog_obj();
          v16 = type;
          if (!os_log_type_enabled(v15, type))
            goto LABEL_76;
          v17 = *(const char **)(a1 + 16);
          if (!v17)
            v17 = "invalid";
          *(_DWORD *)buf = 136446722;
          v40 = "__nw_protocol_remove_listen_handler";
          v41 = 2082;
          v42 = (void *)v17;
          v43 = 2048;
          v44 = a1;
          v18 = "%{public}s protocol %{public}s (%p) has invalid remove_listen_handler callback";
LABEL_61:
          v34 = v15;
          v35 = v16;
          v36 = 32;
LABEL_75:
          _os_log_impl(&dword_182FBE000, v34, v35, v18, buf, v36);
          goto LABEL_76;
        }
        if (!v37)
        {
          v15 = __nwlog_obj();
          v16 = type;
          if (!os_log_type_enabled(v15, type))
            goto LABEL_76;
          v32 = *(const char **)(a1 + 16);
          if (!v32)
            v32 = "invalid";
          *(_DWORD *)buf = 136446722;
          v40 = "__nw_protocol_remove_listen_handler";
          v41 = 2082;
          v42 = (void *)v32;
          v43 = 2048;
          v44 = a1;
          v18 = "%{public}s protocol %{public}s (%p) has invalid remove_listen_handler callback, backtrace limit exceeded";
          goto LABEL_61;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v15 = __nwlog_obj();
        v16 = type;
        v26 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (!v26)
            goto LABEL_76;
          v33 = *(const char **)(a1 + 16);
          if (!v33)
            v33 = "invalid";
          *(_DWORD *)buf = 136446722;
          v40 = "__nw_protocol_remove_listen_handler";
          v41 = 2082;
          v42 = (void *)v33;
          v43 = 2048;
          v44 = a1;
          v18 = "%{public}s protocol %{public}s (%p) has invalid remove_listen_handler callback, no backtrace";
          goto LABEL_61;
        }
        if (v26)
        {
          v27 = *(const char **)(a1 + 16);
          if (!v27)
            v27 = "invalid";
          *(_DWORD *)buf = 136446978;
          v40 = "__nw_protocol_remove_listen_handler";
          v41 = 2082;
          v42 = (void *)v27;
          v43 = 2048;
          v44 = a1;
          v45 = 2082;
          v46 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s protocol %{public}s (%p) has invalid remove_listen_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_76:
      if (!v14)
        goto LABEL_78;
      goto LABEL_77;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "__nw_protocol_remove_listen_handler";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v14, &type, &v37))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (!os_log_type_enabled(v23, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_remove_listen_handler";
      v18 = "%{public}s called with null listen_protocol";
    }
    else if (v37)
    {
      v30 = (char *)__nw_create_backtrace_string();
      v23 = __nwlog_obj();
      v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "__nw_protocol_remove_listen_handler";
          v41 = 2082;
          v42 = v30;
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null listen_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v30);
        if (!v14)
        {
LABEL_78:
          v7 = 0;
          if (v3 != &nw_protocol_ref_counted_handle)
            return v7;
LABEL_9:
          if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v9 = *(_QWORD *)(a1 + 88);
            if (v9)
            {
              v10 = v9 - 1;
              *(_QWORD *)(a1 + 88) = v10;
              if (!v10)
              {
                v11 = *(void (***)(_QWORD))(a1 + 64);
                if (v11)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v11[2](v11);
                  _Block_release(v11);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v12 = *(const void **)(a1 + 64);
                  if (v12)
                    _Block_release(v12);
                }
                free((void *)a1);
              }
            }
          }
          return v7;
        }
LABEL_77:
        free(v14);
        goto LABEL_78;
      }
      if (!v31)
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_remove_listen_handler";
      v18 = "%{public}s called with null listen_protocol, no backtrace";
    }
    else
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (!os_log_type_enabled(v23, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_remove_listen_handler";
      v18 = "%{public}s called with null listen_protocol, backtrace limit exceeded";
    }
    v34 = v23;
    v35 = v24;
    v36 = 12;
    goto LABEL_75;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v40 = "__nw_protocol_remove_listen_handler";
  v19 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v19, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "__nw_protocol_remove_listen_handler";
        v22 = "%{public}s called with null protocol";
LABEL_68:
        _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
      }
    }
    else if (v37)
    {
      v28 = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v29 = os_log_type_enabled(v20, type);
      if (v28)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "__nw_protocol_remove_listen_handler";
          v41 = 2082;
          v42 = v28;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v28);
        goto LABEL_69;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "__nw_protocol_remove_listen_handler";
        v22 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_68;
      }
    }
    else
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "__nw_protocol_remove_listen_handler";
        v22 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_68;
      }
    }
  }
LABEL_69:
  if (v19)
    free(v19);
  return 0;
}

uint64_t nw_protocol_remove_listen_handler_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  const void *v11;

  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v4 = 0;
  if (a2)
  {
    v5 = *(uint64_t (**)(uint64_t))(v3 + 240);
    if (v5)
    {
      if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
        return v5(a1);
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
        *(_QWORD *)(a1 + 88) = v7 + 1;
      v4 = v5(a1);
      if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a1 + 88);
        if (v8)
        {
          v9 = v8 - 1;
          *(_QWORD *)(a1 + 88) = v9;
          if (!v9)
          {
            v10 = *(void (***)(_QWORD))(a1 + 64);
            if (v10)
            {
              *(_QWORD *)(a1 + 64) = 0;
              v10[2](v10);
              _Block_release(v10);
            }
            if ((*(_BYTE *)(a1 + 72) & 1) != 0)
            {
              v11 = *(const void **)(a1 + 64);
              if (v11)
                _Block_release(v11);
            }
            free((void *)a1);
          }
        }
      }
    }
  }
  return v4;
}

uint64_t nw_protocol_remove_listen_handler_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 240) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

uint64_t nw_protocol_get_input_frames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(_QWORD);
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(_QWORD);
  const void *v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  const char *v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  const char *v37;
  NSObject *v38;
  os_log_type_t v39;
  char *backtrace_string;
  _BOOL4 v41;
  const char *v42;
  char *v43;
  _BOOL4 v44;
  char *v45;
  _BOOL4 v46;
  char *v47;
  _BOOL4 v48;
  const char *v49;
  const char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint32_t v53;
  char v54;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  char *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v8 = *(void **)(a1 + 40);
    if (v8 == &nw_protocol_ref_counted_handle)
    {
      v9 = *(_QWORD *)(a1 + 88);
      if (v9)
        *(_QWORD *)(a1 + 88) = v9 + 1;
    }
    if (a2)
    {
      v10 = *(void **)(a2 + 40);
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        v11 = *(_QWORD *)(a2 + 88);
        if (v11)
          *(_QWORD *)(a2 + 88) = v11 + 1;
      }
      if (a6)
      {
        v12 = *(_QWORD *)(a1 + 24);
        if (v12)
        {
          v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 80);
          if (v13)
          {
            v14 = v13(a1, a2);
            if (v10 == &nw_protocol_ref_counted_handle)
            {
LABEL_13:
              if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                v20 = *(_QWORD *)(a2 + 88);
                if (v20)
                {
                  v21 = v20 - 1;
                  *(_QWORD *)(a2 + 88) = v21;
                  if (!v21)
                  {
                    v22 = *(void (***)(_QWORD))(a2 + 64);
                    if (v22)
                    {
                      *(_QWORD *)(a2 + 64) = 0;
                      v22[2](v22);
                      _Block_release(v22);
                    }
                    if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                    {
                      v23 = *(const void **)(a2 + 64);
                      if (v23)
                        _Block_release(v23);
                    }
                    free((void *)a2);
                  }
                }
              }
            }
LABEL_14:
            if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v16 = *(_QWORD *)(a1 + 88);
              if (v16)
              {
                v17 = v16 - 1;
                *(_QWORD *)(a1 + 88) = v17;
                if (!v17)
                {
                  v18 = *(void (***)(_QWORD))(a1 + 64);
                  if (v18)
                  {
                    *(_QWORD *)(a1 + 64) = 0;
                    v18[2](v18);
                    _Block_release(v18);
                  }
                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    v19 = *(const void **)(a1 + 64);
                    if (v19)
                      _Block_release(v19);
                  }
                  free((void *)a1);
                }
              }
            }
            return v14;
          }
        }
        __nwlog_obj();
        v24 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        v57 = "__nw_protocol_get_input_frames";
        if (!v24)
          v24 = "invalid";
        v58 = 2082;
        v59 = (void *)v24;
        v60 = 2048;
        v61 = a1;
        v25 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v54 = 0;
        if (__nwlog_fault(v25, &type, &v54))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v26 = __nwlog_obj();
            v27 = type;
            if (!os_log_type_enabled(v26, type))
              goto LABEL_107;
            v28 = *(const char **)(a1 + 16);
            if (!v28)
              v28 = "invalid";
            *(_DWORD *)buf = 136446722;
            v57 = "__nw_protocol_get_input_frames";
            v58 = 2082;
            v59 = (void *)v28;
            v60 = 2048;
            v61 = a1;
            v29 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback";
LABEL_84:
            v51 = v26;
            v52 = v27;
            v53 = 32;
LABEL_106:
            _os_log_impl(&dword_182FBE000, v51, v52, v29, buf, v53);
            goto LABEL_107;
          }
          if (!v54)
          {
            v26 = __nwlog_obj();
            v27 = type;
            if (!os_log_type_enabled(v26, type))
              goto LABEL_107;
            v49 = *(const char **)(a1 + 16);
            if (!v49)
              v49 = "invalid";
            *(_DWORD *)buf = 136446722;
            v57 = "__nw_protocol_get_input_frames";
            v58 = 2082;
            v59 = (void *)v49;
            v60 = 2048;
            v61 = a1;
            v29 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, backtrace limit exceeded";
            goto LABEL_84;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v26 = __nwlog_obj();
          v27 = type;
          v41 = os_log_type_enabled(v26, type);
          if (!backtrace_string)
          {
            if (!v41)
              goto LABEL_107;
            v50 = *(const char **)(a1 + 16);
            if (!v50)
              v50 = "invalid";
            *(_DWORD *)buf = 136446722;
            v57 = "__nw_protocol_get_input_frames";
            v58 = 2082;
            v59 = (void *)v50;
            v60 = 2048;
            v61 = a1;
            v29 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, no backtrace";
            goto LABEL_84;
          }
          if (v41)
          {
            v42 = *(const char **)(a1 + 16);
            if (!v42)
              v42 = "invalid";
            *(_DWORD *)buf = 136446978;
            v57 = "__nw_protocol_get_input_frames";
            v58 = 2082;
            v59 = (void *)v42;
            v60 = 2048;
            v61 = a1;
            v62 = 2082;
            v63 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
        }
LABEL_107:
        if (!v25)
          goto LABEL_109;
        goto LABEL_108;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v57 = "__nw_protocol_get_input_frames";
      v25 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v54 = 0;
      if (!__nwlog_fault(v25, &type, &v54))
        goto LABEL_107;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (!os_log_type_enabled(v38, type))
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v57 = "__nw_protocol_get_input_frames";
        v29 = "%{public}s called with null return_array";
      }
      else if (v54)
      {
        v47 = (char *)__nw_create_backtrace_string();
        v38 = __nwlog_obj();
        v39 = type;
        v48 = os_log_type_enabled(v38, type);
        if (v47)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            v57 = "__nw_protocol_get_input_frames";
            v58 = 2082;
            v59 = v47;
            _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s called with null return_array, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v47);
          if (!v25)
          {
LABEL_109:
            v14 = 0;
            if (v10 == &nw_protocol_ref_counted_handle)
              goto LABEL_13;
            goto LABEL_14;
          }
LABEL_108:
          free(v25);
          goto LABEL_109;
        }
        if (!v48)
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v57 = "__nw_protocol_get_input_frames";
        v29 = "%{public}s called with null return_array, no backtrace";
      }
      else
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (!os_log_type_enabled(v38, type))
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v57 = "__nw_protocol_get_input_frames";
        v29 = "%{public}s called with null return_array, backtrace limit exceeded";
      }
      v51 = v38;
      v52 = v39;
      v53 = 12;
      goto LABEL_106;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v57 = "__nw_protocol_get_input_frames";
    v34 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (__nwlog_fault(v34, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v35 = __nwlog_obj();
        v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "__nw_protocol_get_input_frames";
          v37 = "%{public}s called with null input_protocol";
LABEL_99:
          _os_log_impl(&dword_182FBE000, v35, v36, v37, buf, 0xCu);
        }
      }
      else if (v54)
      {
        v45 = (char *)__nw_create_backtrace_string();
        v35 = __nwlog_obj();
        v36 = type;
        v46 = os_log_type_enabled(v35, type);
        if (v45)
        {
          if (v46)
          {
            *(_DWORD *)buf = 136446466;
            v57 = "__nw_protocol_get_input_frames";
            v58 = 2082;
            v59 = v45;
            _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v45);
          goto LABEL_100;
        }
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          v57 = "__nw_protocol_get_input_frames";
          v37 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_99;
        }
      }
      else
      {
        v35 = __nwlog_obj();
        v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "__nw_protocol_get_input_frames";
          v37 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_99;
        }
      }
    }
LABEL_100:
    if (v34)
      free(v34);
    v14 = 0;
    goto LABEL_14;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v57 = "__nw_protocol_get_input_frames";
  v30 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v54 = 0;
  if (__nwlog_fault(v30, &type, &v54))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v31 = __nwlog_obj();
      v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "__nw_protocol_get_input_frames";
        v33 = "%{public}s called with null protocol";
LABEL_93:
        _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0xCu);
      }
    }
    else if (v54)
    {
      v43 = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      v32 = type;
      v44 = os_log_type_enabled(v31, type);
      if (v43)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          v57 = "__nw_protocol_get_input_frames";
          v58 = 2082;
          v59 = v43;
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v43);
        goto LABEL_94;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        v57 = "__nw_protocol_get_input_frames";
        v33 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }
    }
    else
    {
      v31 = __nwlog_obj();
      v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "__nw_protocol_get_input_frames";
        v33 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }
    }
  }
LABEL_94:
  if (v30)
    free(v30);
  return 0;
}

uint64_t nw_protocol_get_input_frames_quiet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(_QWORD);
  const void *v22;

  if (!a1)
    return 0;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    return 0;
  v8 = 0;
  if (a6)
  {
    if (a2)
    {
      v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 80);
      if (v10)
      {
        v11 = *(void **)(a1 + 40);
        if (v11 == &nw_protocol_ref_counted_handle)
        {
          v12 = *(_QWORD *)(a1 + 88);
          if (v12)
            *(_QWORD *)(a1 + 88) = v12 + 1;
        }
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          v13 = *(_QWORD *)(a2 + 88);
          if (v13)
            *(_QWORD *)(a2 + 88) = v13 + 1;
          v8 = v10(a1, a2);
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v15 = *(_QWORD *)(a2 + 88);
            if (v15)
            {
              v16 = v15 - 1;
              *(_QWORD *)(a2 + 88) = v16;
              if (!v16)
              {
                v17 = *(void (***)(_QWORD))(a2 + 64);
                if (v17)
                {
                  *(_QWORD *)(a2 + 64) = 0;
                  v17[2](v17);
                  _Block_release(v17);
                }
                if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                {
                  v18 = *(const void **)(a2 + 64);
                  if (v18)
                    _Block_release(v18);
                }
                free((void *)a2);
              }
            }
          }
        }
        else
        {
          v8 = v10(a1, a2);
        }
        if (v11 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          v19 = *(_QWORD *)(a1 + 88);
          if (v19)
          {
            v20 = v19 - 1;
            *(_QWORD *)(a1 + 88) = v20;
            if (!v20)
            {
              v21 = *(void (***)(_QWORD))(a1 + 64);
              if (v21)
              {
                *(_QWORD *)(a1 + 64) = 0;
                v21[2](v21);
                _Block_release(v21);
              }
              if ((*(_BYTE *)(a1 + 72) & 1) != 0)
              {
                v22 = *(const void **)(a1 + 64);
                if (v22)
                  _Block_release(v22);
              }
              free((void *)a1);
            }
          }
        }
      }
    }
  }
  return v8;
}

uint64_t nw_protocol_get_input_frames_is_valid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
      LODWORD(v3) = *(_QWORD *)(v3 + 80) != 0;
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (!a2)
    LODWORD(v3) = 0;
  if (a3)
    return v3;
  else
    return 0;
}

uint64_t nw_protocol_get_output_frames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(_QWORD);
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(_QWORD);
  const void *v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  const char *v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  const char *v37;
  NSObject *v38;
  os_log_type_t v39;
  char *backtrace_string;
  _BOOL4 v41;
  const char *v42;
  char *v43;
  _BOOL4 v44;
  char *v45;
  _BOOL4 v46;
  char *v47;
  _BOOL4 v48;
  const char *v49;
  const char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint32_t v53;
  char v54;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  char *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v8 = *(void **)(a1 + 40);
    if (v8 == &nw_protocol_ref_counted_handle)
    {
      v9 = *(_QWORD *)(a1 + 88);
      if (v9)
        *(_QWORD *)(a1 + 88) = v9 + 1;
    }
    if (a2)
    {
      v10 = *(void **)(a2 + 40);
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        v11 = *(_QWORD *)(a2 + 88);
        if (v11)
          *(_QWORD *)(a2 + 88) = v11 + 1;
      }
      if (a6)
      {
        v12 = *(_QWORD *)(a1 + 24);
        if (v12)
        {
          v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 88);
          if (v13)
          {
            v14 = v13(a1, a2);
            if (v10 == &nw_protocol_ref_counted_handle)
            {
LABEL_13:
              if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                v20 = *(_QWORD *)(a2 + 88);
                if (v20)
                {
                  v21 = v20 - 1;
                  *(_QWORD *)(a2 + 88) = v21;
                  if (!v21)
                  {
                    v22 = *(void (***)(_QWORD))(a2 + 64);
                    if (v22)
                    {
                      *(_QWORD *)(a2 + 64) = 0;
                      v22[2](v22);
                      _Block_release(v22);
                    }
                    if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                    {
                      v23 = *(const void **)(a2 + 64);
                      if (v23)
                        _Block_release(v23);
                    }
                    free((void *)a2);
                  }
                }
              }
            }
LABEL_14:
            if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v16 = *(_QWORD *)(a1 + 88);
              if (v16)
              {
                v17 = v16 - 1;
                *(_QWORD *)(a1 + 88) = v17;
                if (!v17)
                {
                  v18 = *(void (***)(_QWORD))(a1 + 64);
                  if (v18)
                  {
                    *(_QWORD *)(a1 + 64) = 0;
                    v18[2](v18);
                    _Block_release(v18);
                  }
                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    v19 = *(const void **)(a1 + 64);
                    if (v19)
                      _Block_release(v19);
                  }
                  free((void *)a1);
                }
              }
            }
            return v14;
          }
        }
        __nwlog_obj();
        v24 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        v57 = "__nw_protocol_get_output_frames";
        if (!v24)
          v24 = "invalid";
        v58 = 2082;
        v59 = (void *)v24;
        v60 = 2048;
        v61 = a1;
        v25 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v54 = 0;
        if (__nwlog_fault(v25, &type, &v54))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v26 = __nwlog_obj();
            v27 = type;
            if (!os_log_type_enabled(v26, type))
              goto LABEL_107;
            v28 = *(const char **)(a1 + 16);
            if (!v28)
              v28 = "invalid";
            *(_DWORD *)buf = 136446722;
            v57 = "__nw_protocol_get_output_frames";
            v58 = 2082;
            v59 = (void *)v28;
            v60 = 2048;
            v61 = a1;
            v29 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_84:
            v51 = v26;
            v52 = v27;
            v53 = 32;
LABEL_106:
            _os_log_impl(&dword_182FBE000, v51, v52, v29, buf, v53);
            goto LABEL_107;
          }
          if (!v54)
          {
            v26 = __nwlog_obj();
            v27 = type;
            if (!os_log_type_enabled(v26, type))
              goto LABEL_107;
            v49 = *(const char **)(a1 + 16);
            if (!v49)
              v49 = "invalid";
            *(_DWORD *)buf = 136446722;
            v57 = "__nw_protocol_get_output_frames";
            v58 = 2082;
            v59 = (void *)v49;
            v60 = 2048;
            v61 = a1;
            v29 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
            goto LABEL_84;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v26 = __nwlog_obj();
          v27 = type;
          v41 = os_log_type_enabled(v26, type);
          if (!backtrace_string)
          {
            if (!v41)
              goto LABEL_107;
            v50 = *(const char **)(a1 + 16);
            if (!v50)
              v50 = "invalid";
            *(_DWORD *)buf = 136446722;
            v57 = "__nw_protocol_get_output_frames";
            v58 = 2082;
            v59 = (void *)v50;
            v60 = 2048;
            v61 = a1;
            v29 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
            goto LABEL_84;
          }
          if (v41)
          {
            v42 = *(const char **)(a1 + 16);
            if (!v42)
              v42 = "invalid";
            *(_DWORD *)buf = 136446978;
            v57 = "__nw_protocol_get_output_frames";
            v58 = 2082;
            v59 = (void *)v42;
            v60 = 2048;
            v61 = a1;
            v62 = 2082;
            v63 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
        }
LABEL_107:
        if (!v25)
          goto LABEL_109;
        goto LABEL_108;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v57 = "__nw_protocol_get_output_frames";
      v25 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v54 = 0;
      if (!__nwlog_fault(v25, &type, &v54))
        goto LABEL_107;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (!os_log_type_enabled(v38, type))
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v57 = "__nw_protocol_get_output_frames";
        v29 = "%{public}s called with null return_array";
      }
      else if (v54)
      {
        v47 = (char *)__nw_create_backtrace_string();
        v38 = __nwlog_obj();
        v39 = type;
        v48 = os_log_type_enabled(v38, type);
        if (v47)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            v57 = "__nw_protocol_get_output_frames";
            v58 = 2082;
            v59 = v47;
            _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s called with null return_array, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v47);
          if (!v25)
          {
LABEL_109:
            v14 = 0;
            if (v10 == &nw_protocol_ref_counted_handle)
              goto LABEL_13;
            goto LABEL_14;
          }
LABEL_108:
          free(v25);
          goto LABEL_109;
        }
        if (!v48)
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v57 = "__nw_protocol_get_output_frames";
        v29 = "%{public}s called with null return_array, no backtrace";
      }
      else
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (!os_log_type_enabled(v38, type))
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v57 = "__nw_protocol_get_output_frames";
        v29 = "%{public}s called with null return_array, backtrace limit exceeded";
      }
      v51 = v38;
      v52 = v39;
      v53 = 12;
      goto LABEL_106;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v57 = "__nw_protocol_get_output_frames";
    v34 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (__nwlog_fault(v34, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v35 = __nwlog_obj();
        v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "__nw_protocol_get_output_frames";
          v37 = "%{public}s called with null input_protocol";
LABEL_99:
          _os_log_impl(&dword_182FBE000, v35, v36, v37, buf, 0xCu);
        }
      }
      else if (v54)
      {
        v45 = (char *)__nw_create_backtrace_string();
        v35 = __nwlog_obj();
        v36 = type;
        v46 = os_log_type_enabled(v35, type);
        if (v45)
        {
          if (v46)
          {
            *(_DWORD *)buf = 136446466;
            v57 = "__nw_protocol_get_output_frames";
            v58 = 2082;
            v59 = v45;
            _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v45);
          goto LABEL_100;
        }
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          v57 = "__nw_protocol_get_output_frames";
          v37 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_99;
        }
      }
      else
      {
        v35 = __nwlog_obj();
        v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "__nw_protocol_get_output_frames";
          v37 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_99;
        }
      }
    }
LABEL_100:
    if (v34)
      free(v34);
    v14 = 0;
    goto LABEL_14;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v57 = "__nw_protocol_get_output_frames";
  v30 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v54 = 0;
  if (__nwlog_fault(v30, &type, &v54))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v31 = __nwlog_obj();
      v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "__nw_protocol_get_output_frames";
        v33 = "%{public}s called with null protocol";
LABEL_93:
        _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0xCu);
      }
    }
    else if (v54)
    {
      v43 = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      v32 = type;
      v44 = os_log_type_enabled(v31, type);
      if (v43)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          v57 = "__nw_protocol_get_output_frames";
          v58 = 2082;
          v59 = v43;
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v43);
        goto LABEL_94;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        v57 = "__nw_protocol_get_output_frames";
        v33 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }
    }
    else
    {
      v31 = __nwlog_obj();
      v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "__nw_protocol_get_output_frames";
        v33 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }
    }
  }
LABEL_94:
  if (v30)
    free(v30);
  return 0;
}

uint64_t nw_protocol_get_output_frames_quiet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(_QWORD);
  const void *v22;

  if (!a1)
    return 0;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    return 0;
  v8 = 0;
  if (a6)
  {
    if (a2)
    {
      v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 88);
      if (v10)
      {
        v11 = *(void **)(a1 + 40);
        if (v11 == &nw_protocol_ref_counted_handle)
        {
          v12 = *(_QWORD *)(a1 + 88);
          if (v12)
            *(_QWORD *)(a1 + 88) = v12 + 1;
        }
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          v13 = *(_QWORD *)(a2 + 88);
          if (v13)
            *(_QWORD *)(a2 + 88) = v13 + 1;
          v8 = v10(a1, a2);
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v15 = *(_QWORD *)(a2 + 88);
            if (v15)
            {
              v16 = v15 - 1;
              *(_QWORD *)(a2 + 88) = v16;
              if (!v16)
              {
                v17 = *(void (***)(_QWORD))(a2 + 64);
                if (v17)
                {
                  *(_QWORD *)(a2 + 64) = 0;
                  v17[2](v17);
                  _Block_release(v17);
                }
                if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                {
                  v18 = *(const void **)(a2 + 64);
                  if (v18)
                    _Block_release(v18);
                }
                free((void *)a2);
              }
            }
          }
        }
        else
        {
          v8 = v10(a1, a2);
        }
        if (v11 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          v19 = *(_QWORD *)(a1 + 88);
          if (v19)
          {
            v20 = v19 - 1;
            *(_QWORD *)(a1 + 88) = v20;
            if (!v20)
            {
              v21 = *(void (***)(_QWORD))(a1 + 64);
              if (v21)
              {
                *(_QWORD *)(a1 + 64) = 0;
                v21[2](v21);
                _Block_release(v21);
              }
              if ((*(_BYTE *)(a1 + 72) & 1) != 0)
              {
                v22 = *(const void **)(a1 + 64);
                if (v22)
                  _Block_release(v22);
              }
              free((void *)a1);
            }
          }
        }
      }
    }
  }
  return v8;
}

uint64_t nw_protocol_get_output_frames_is_valid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
      LODWORD(v3) = *(_QWORD *)(v3 + 88) != 0;
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (!a2)
    LODWORD(v3) = 0;
  if (a3)
    return v3;
  else
    return 0;
}

uint64_t nw_protocol_finalize_output_frames(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  NSObject *v23;
  os_log_type_t v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  char *v28;
  _BOOL4 v29;
  char *v30;
  _BOOL4 v31;
  const char *v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint32_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(void **)(a1 + 40);
    if (v3 == &nw_protocol_ref_counted_handle)
    {
      v4 = *(_QWORD *)(a1 + 88);
      if (v4)
        *(_QWORD *)(a1 + 88) = v4 + 1;
    }
    if (a2)
    {
      v5 = *(_QWORD *)(a1 + 24);
      if (v5)
      {
        v6 = *(uint64_t (**)(uint64_t))(v5 + 96);
        if (v6)
        {
          v7 = v6(a1);
          if (v3 != &nw_protocol_ref_counted_handle)
            return v7;
          goto LABEL_9;
        }
      }
      __nwlog_obj();
      v13 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      v40 = "__nw_protocol_finalize_output_frames";
      if (!v13)
        v13 = "invalid";
      v41 = 2082;
      v42 = (void *)v13;
      v43 = 2048;
      v44 = a1;
      v14 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (__nwlog_fault(v14, &type, &v37))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v15 = __nwlog_obj();
          v16 = type;
          if (!os_log_type_enabled(v15, type))
            goto LABEL_76;
          v17 = *(const char **)(a1 + 16);
          if (!v17)
            v17 = "invalid";
          *(_DWORD *)buf = 136446722;
          v40 = "__nw_protocol_finalize_output_frames";
          v41 = 2082;
          v42 = (void *)v17;
          v43 = 2048;
          v44 = a1;
          v18 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback";
LABEL_61:
          v34 = v15;
          v35 = v16;
          v36 = 32;
LABEL_75:
          _os_log_impl(&dword_182FBE000, v34, v35, v18, buf, v36);
          goto LABEL_76;
        }
        if (!v37)
        {
          v15 = __nwlog_obj();
          v16 = type;
          if (!os_log_type_enabled(v15, type))
            goto LABEL_76;
          v32 = *(const char **)(a1 + 16);
          if (!v32)
            v32 = "invalid";
          *(_DWORD *)buf = 136446722;
          v40 = "__nw_protocol_finalize_output_frames";
          v41 = 2082;
          v42 = (void *)v32;
          v43 = 2048;
          v44 = a1;
          v18 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded";
          goto LABEL_61;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v15 = __nwlog_obj();
        v16 = type;
        v26 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (!v26)
            goto LABEL_76;
          v33 = *(const char **)(a1 + 16);
          if (!v33)
            v33 = "invalid";
          *(_DWORD *)buf = 136446722;
          v40 = "__nw_protocol_finalize_output_frames";
          v41 = 2082;
          v42 = (void *)v33;
          v43 = 2048;
          v44 = a1;
          v18 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace";
          goto LABEL_61;
        }
        if (v26)
        {
          v27 = *(const char **)(a1 + 16);
          if (!v27)
            v27 = "invalid";
          *(_DWORD *)buf = 136446978;
          v40 = "__nw_protocol_finalize_output_frames";
          v41 = 2082;
          v42 = (void *)v27;
          v43 = 2048;
          v44 = a1;
          v45 = 2082;
          v46 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_76:
      if (!v14)
        goto LABEL_78;
      goto LABEL_77;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "__nw_protocol_finalize_output_frames";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v14, &type, &v37))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (!os_log_type_enabled(v23, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_finalize_output_frames";
      v18 = "%{public}s called with null frames";
    }
    else if (v37)
    {
      v30 = (char *)__nw_create_backtrace_string();
      v23 = __nwlog_obj();
      v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "__nw_protocol_finalize_output_frames";
          v41 = 2082;
          v42 = v30;
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null frames, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v30);
        if (!v14)
        {
LABEL_78:
          v7 = 0;
          if (v3 != &nw_protocol_ref_counted_handle)
            return v7;
LABEL_9:
          if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v9 = *(_QWORD *)(a1 + 88);
            if (v9)
            {
              v10 = v9 - 1;
              *(_QWORD *)(a1 + 88) = v10;
              if (!v10)
              {
                v11 = *(void (***)(_QWORD))(a1 + 64);
                if (v11)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v11[2](v11);
                  _Block_release(v11);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v12 = *(const void **)(a1 + 64);
                  if (v12)
                    _Block_release(v12);
                }
                free((void *)a1);
              }
            }
          }
          return v7;
        }
LABEL_77:
        free(v14);
        goto LABEL_78;
      }
      if (!v31)
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_finalize_output_frames";
      v18 = "%{public}s called with null frames, no backtrace";
    }
    else
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (!os_log_type_enabled(v23, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_finalize_output_frames";
      v18 = "%{public}s called with null frames, backtrace limit exceeded";
    }
    v34 = v23;
    v35 = v24;
    v36 = 12;
    goto LABEL_75;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v40 = "__nw_protocol_finalize_output_frames";
  v19 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v19, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "__nw_protocol_finalize_output_frames";
        v22 = "%{public}s called with null protocol";
LABEL_68:
        _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
      }
    }
    else if (v37)
    {
      v28 = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v29 = os_log_type_enabled(v20, type);
      if (v28)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "__nw_protocol_finalize_output_frames";
          v41 = 2082;
          v42 = v28;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v28);
        goto LABEL_69;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "__nw_protocol_finalize_output_frames";
        v22 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_68;
      }
    }
    else
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "__nw_protocol_finalize_output_frames";
        v22 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_68;
      }
    }
  }
LABEL_69:
  if (v19)
    free(v19);
  return 0;
}

uint64_t nw_protocol_finalize_output_frames_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  const void *v11;

  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v4 = 0;
  if (a2)
  {
    v5 = *(uint64_t (**)(uint64_t))(v3 + 96);
    if (v5)
    {
      if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
        return v5(a1);
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
        *(_QWORD *)(a1 + 88) = v7 + 1;
      v4 = v5(a1);
      if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a1 + 88);
        if (v8)
        {
          v9 = v8 - 1;
          *(_QWORD *)(a1 + 88) = v9;
          if (!v9)
          {
            v10 = *(void (***)(_QWORD))(a1 + 64);
            if (v10)
            {
              *(_QWORD *)(a1 + 64) = 0;
              v10[2](v10);
              _Block_release(v10);
            }
            if ((*(_BYTE *)(a1 + 72) & 1) != 0)
            {
              v11 = *(const void **)(a1 + 64);
              if (v11)
                _Block_release(v11);
            }
            free((void *)a1);
          }
        }
      }
    }
  }
  return v4;
}

uint64_t nw_protocol_finalize_output_frames_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 96) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

uint64_t nw_protocol_get_parameters_quiet(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (**v9)(_QWORD);
  const void *v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    return 0;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 112);
  if (!v3)
    return 0;
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
    return v3(a1);
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
    *(_QWORD *)(a1 + 88) = v5 + 1;
  v6 = v3(a1);
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    v7 = *(_QWORD *)(a1 + 88);
    if (v7)
    {
      v8 = v7 - 1;
      *(_QWORD *)(a1 + 88) = v8;
      if (!v8)
      {
        v9 = *(void (***)(_QWORD))(a1 + 64);
        if (v9)
        {
          *(_QWORD *)(a1 + 64) = 0;
          v9[2](v9);
          _Block_release(v9);
        }
        if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        {
          v10 = *(const void **)(a1 + 64);
          if (v10)
            _Block_release(v10);
        }
        free((void *)a1);
      }
    }
  }
  return v6;
}

BOOL nw_protocol_get_parameters_is_valid(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    return v1 && *(_QWORD *)(v1 + 112) != 0;
  }
  return result;
}

uint64_t nw_protocol_get_path(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  const void *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *v22;
  _BOOL4 v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  const char *v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "__nw_protocol_get_path";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_path";
          v21 = "%{public}s called with null protocol";
LABEL_59:
          _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v19 = __nwlog_obj();
        v20 = type;
        v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            v32 = "__nw_protocol_get_path";
            v33 = 2082;
            v34 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_60;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_path";
          v21 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_59;
        }
      }
      else
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_path";
          v21 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_59;
        }
      }
    }
LABEL_60:
    if (v18)
      free(v18);
    return 0;
  }
  v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
      *(_QWORD *)(a1 + 88) = v3 + 1;
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = *(uint64_t (**)(uint64_t))(v4 + 120);
    if (v5)
    {
      v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle)
        return v6;
      goto LABEL_8;
    }
  }
  __nwlog_obj();
  v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  v32 = "__nw_protocol_get_path";
  if (!v12)
    v12 = "invalid";
  v33 = 2082;
  v34 = (void *)v12;
  v35 = 2048;
  v36 = a1;
  v13 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (!__nwlog_fault(v13, &type, &v29))
    goto LABEL_51;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_51;
    v16 = *(const char **)(a1 + 16);
    if (!v16)
      v16 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_path";
    v33 = 2082;
    v34 = (void *)v16;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_path callback";
LABEL_50:
    _os_log_impl(&dword_182FBE000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }
  if (!v29)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_51;
    v27 = *(const char **)(a1 + 16);
    if (!v27)
      v27 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_path";
    v33 = 2082;
    v34 = (void *)v27;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, backtrace limit exceeded";
    goto LABEL_50;
  }
  v22 = (char *)__nw_create_backtrace_string();
  v14 = __nwlog_obj();
  v15 = type;
  v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23)
      goto LABEL_51;
    v28 = *(const char **)(a1 + 16);
    if (!v28)
      v28 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_path";
    v33 = 2082;
    v34 = (void *)v28;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, no backtrace";
    goto LABEL_50;
  }
  if (v23)
  {
    v24 = *(const char **)(a1 + 16);
    if (!v24)
      v24 = "invalid";
    *(_DWORD *)buf = 136446978;
    v32 = "__nw_protocol_get_path";
    v33 = 2082;
    v34 = (void *)v24;
    v35 = 2048;
    v36 = a1;
    v37 = 2082;
    v38 = v22;
    _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s protocol %{public}s (%p) has invalid get_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v22);
LABEL_51:
  if (v13)
    free(v13);
  v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      v8 = *(_QWORD *)(a1 + 88);
      if (v8)
      {
        v9 = v8 - 1;
        *(_QWORD *)(a1 + 88) = v9;
        if (!v9)
        {
          v10 = *(void (***)(_QWORD))(a1 + 64);
          if (v10)
          {
            *(_QWORD *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            v11 = *(const void **)(a1 + 64);
            if (v11)
              _Block_release(v11);
          }
          free((void *)a1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_get_path_quiet(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (**v9)(_QWORD);
  const void *v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    return 0;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 120);
  if (!v3)
    return 0;
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
    return v3(a1);
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
    *(_QWORD *)(a1 + 88) = v5 + 1;
  v6 = v3(a1);
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    v7 = *(_QWORD *)(a1 + 88);
    if (v7)
    {
      v8 = v7 - 1;
      *(_QWORD *)(a1 + 88) = v8;
      if (!v8)
      {
        v9 = *(void (***)(_QWORD))(a1 + 64);
        if (v9)
        {
          *(_QWORD *)(a1 + 64) = 0;
          v9[2](v9);
          _Block_release(v9);
        }
        if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        {
          v10 = *(const void **)(a1 + 64);
          if (v10)
            _Block_release(v10);
        }
        free((void *)a1);
      }
    }
  }
  return v6;
}

BOOL nw_protocol_get_path_is_valid(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    return v1 && *(_QWORD *)(v1 + 120) != 0;
  }
  return result;
}

uint64_t nw_protocol_get_remote_endpoint_quiet(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (**v9)(_QWORD);
  const void *v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    return 0;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 136);
  if (!v3)
    return 0;
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
    return v3(a1);
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
    *(_QWORD *)(a1 + 88) = v5 + 1;
  v6 = v3(a1);
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    v7 = *(_QWORD *)(a1 + 88);
    if (v7)
    {
      v8 = v7 - 1;
      *(_QWORD *)(a1 + 88) = v8;
      if (!v8)
      {
        v9 = *(void (***)(_QWORD))(a1 + 64);
        if (v9)
        {
          *(_QWORD *)(a1 + 64) = 0;
          v9[2](v9);
          _Block_release(v9);
        }
        if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        {
          v10 = *(const void **)(a1 + 64);
          if (v10)
            _Block_release(v10);
        }
        free((void *)a1);
      }
    }
  }
  return v6;
}

BOOL nw_protocol_get_remote_endpoint_is_valid(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    return v1 && *(_QWORD *)(v1 + 136) != 0;
  }
  return result;
}

uint64_t nw_protocol_get_local_endpoint(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  const void *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *v22;
  _BOOL4 v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  const char *v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "__nw_protocol_get_local_endpoint";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_local_endpoint";
          v21 = "%{public}s called with null protocol";
LABEL_59:
          _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v19 = __nwlog_obj();
        v20 = type;
        v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            v32 = "__nw_protocol_get_local_endpoint";
            v33 = 2082;
            v34 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_60;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_local_endpoint";
          v21 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_59;
        }
      }
      else
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_local_endpoint";
          v21 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_59;
        }
      }
    }
LABEL_60:
    if (v18)
      free(v18);
    return 0;
  }
  v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
      *(_QWORD *)(a1 + 88) = v3 + 1;
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = *(uint64_t (**)(uint64_t))(v4 + 128);
    if (v5)
    {
      v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle)
        return v6;
      goto LABEL_8;
    }
  }
  __nwlog_obj();
  v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  v32 = "__nw_protocol_get_local_endpoint";
  if (!v12)
    v12 = "invalid";
  v33 = 2082;
  v34 = (void *)v12;
  v35 = 2048;
  v36 = a1;
  v13 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (!__nwlog_fault(v13, &type, &v29))
    goto LABEL_51;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_51;
    v16 = *(const char **)(a1 + 16);
    if (!v16)
      v16 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_local_endpoint";
    v33 = 2082;
    v34 = (void *)v16;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback";
LABEL_50:
    _os_log_impl(&dword_182FBE000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }
  if (!v29)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_51;
    v27 = *(const char **)(a1 + 16);
    if (!v27)
      v27 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_local_endpoint";
    v33 = 2082;
    v34 = (void *)v27;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, backtrace limit exceeded";
    goto LABEL_50;
  }
  v22 = (char *)__nw_create_backtrace_string();
  v14 = __nwlog_obj();
  v15 = type;
  v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23)
      goto LABEL_51;
    v28 = *(const char **)(a1 + 16);
    if (!v28)
      v28 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_local_endpoint";
    v33 = 2082;
    v34 = (void *)v28;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, no backtrace";
    goto LABEL_50;
  }
  if (v23)
  {
    v24 = *(const char **)(a1 + 16);
    if (!v24)
      v24 = "invalid";
    *(_DWORD *)buf = 136446978;
    v32 = "__nw_protocol_get_local_endpoint";
    v33 = 2082;
    v34 = (void *)v24;
    v35 = 2048;
    v36 = a1;
    v37 = 2082;
    v38 = v22;
    _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v22);
LABEL_51:
  if (v13)
    free(v13);
  v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      v8 = *(_QWORD *)(a1 + 88);
      if (v8)
      {
        v9 = v8 - 1;
        *(_QWORD *)(a1 + 88) = v9;
        if (!v9)
        {
          v10 = *(void (***)(_QWORD))(a1 + 64);
          if (v10)
          {
            *(_QWORD *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            v11 = *(const void **)(a1 + 64);
            if (v11)
              _Block_release(v11);
          }
          free((void *)a1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_get_local_endpoint_quiet(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (**v9)(_QWORD);
  const void *v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    return 0;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 128);
  if (!v3)
    return 0;
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
    return v3(a1);
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
    *(_QWORD *)(a1 + 88) = v5 + 1;
  v6 = v3(a1);
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    v7 = *(_QWORD *)(a1 + 88);
    if (v7)
    {
      v8 = v7 - 1;
      *(_QWORD *)(a1 + 88) = v8;
      if (!v8)
      {
        v9 = *(void (***)(_QWORD))(a1 + 64);
        if (v9)
        {
          *(_QWORD *)(a1 + 64) = 0;
          v9[2](v9);
          _Block_release(v9);
        }
        if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        {
          v10 = *(const void **)(a1 + 64);
          if (v10)
            _Block_release(v10);
        }
        free((void *)a1);
      }
    }
  }
  return v6;
}

BOOL nw_protocol_get_local_endpoint_is_valid(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    return v1 && *(_QWORD *)(v1 + 128) != 0;
  }
  return result;
}

uint64_t nw_protocol_get_output_local_endpoint(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  const void *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *v22;
  _BOOL4 v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  const char *v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "__nw_protocol_get_output_local_endpoint";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_output_local_endpoint";
          v21 = "%{public}s called with null protocol";
LABEL_59:
          _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v19 = __nwlog_obj();
        v20 = type;
        v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            v32 = "__nw_protocol_get_output_local_endpoint";
            v33 = 2082;
            v34 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_60;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_output_local_endpoint";
          v21 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_59;
        }
      }
      else
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_output_local_endpoint";
          v21 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_59;
        }
      }
    }
LABEL_60:
    if (v18)
      free(v18);
    return 0;
  }
  v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
      *(_QWORD *)(a1 + 88) = v3 + 1;
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = *(uint64_t (**)(uint64_t))(v4 + 200);
    if (v5)
    {
      v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle)
        return v6;
      goto LABEL_8;
    }
  }
  __nwlog_obj();
  v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  v32 = "__nw_protocol_get_output_local_endpoint";
  if (!v12)
    v12 = "invalid";
  v33 = 2082;
  v34 = (void *)v12;
  v35 = 2048;
  v36 = a1;
  v13 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (!__nwlog_fault(v13, &type, &v29))
    goto LABEL_51;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_51;
    v16 = *(const char **)(a1 + 16);
    if (!v16)
      v16 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_output_local_endpoint";
    v33 = 2082;
    v34 = (void *)v16;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback";
LABEL_50:
    _os_log_impl(&dword_182FBE000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }
  if (!v29)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_51;
    v27 = *(const char **)(a1 + 16);
    if (!v27)
      v27 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_output_local_endpoint";
    v33 = 2082;
    v34 = (void *)v27;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, backtrace limit exceeded";
    goto LABEL_50;
  }
  v22 = (char *)__nw_create_backtrace_string();
  v14 = __nwlog_obj();
  v15 = type;
  v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23)
      goto LABEL_51;
    v28 = *(const char **)(a1 + 16);
    if (!v28)
      v28 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_output_local_endpoint";
    v33 = 2082;
    v34 = (void *)v28;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, no backtrace";
    goto LABEL_50;
  }
  if (v23)
  {
    v24 = *(const char **)(a1 + 16);
    if (!v24)
      v24 = "invalid";
    *(_DWORD *)buf = 136446978;
    v32 = "__nw_protocol_get_output_local_endpoint";
    v33 = 2082;
    v34 = (void *)v24;
    v35 = 2048;
    v36 = a1;
    v37 = 2082;
    v38 = v22;
    _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v22);
LABEL_51:
  if (v13)
    free(v13);
  v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      v8 = *(_QWORD *)(a1 + 88);
      if (v8)
      {
        v9 = v8 - 1;
        *(_QWORD *)(a1 + 88) = v9;
        if (!v9)
        {
          v10 = *(void (***)(_QWORD))(a1 + 64);
          if (v10)
          {
            *(_QWORD *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            v11 = *(const void **)(a1 + 64);
            if (v11)
              _Block_release(v11);
          }
          free((void *)a1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_get_output_local_endpoint_quiet(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (**v9)(_QWORD);
  const void *v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    return 0;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 200);
  if (!v3)
    return 0;
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
    return v3(a1);
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
    *(_QWORD *)(a1 + 88) = v5 + 1;
  v6 = v3(a1);
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    v7 = *(_QWORD *)(a1 + 88);
    if (v7)
    {
      v8 = v7 - 1;
      *(_QWORD *)(a1 + 88) = v8;
      if (!v8)
      {
        v9 = *(void (***)(_QWORD))(a1 + 64);
        if (v9)
        {
          *(_QWORD *)(a1 + 64) = 0;
          v9[2](v9);
          _Block_release(v9);
        }
        if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        {
          v10 = *(const void **)(a1 + 64);
          if (v10)
            _Block_release(v10);
        }
        free((void *)a1);
      }
    }
  }
  return v6;
}

BOOL nw_protocol_get_output_local_endpoint_is_valid(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    return v1 && *(_QWORD *)(v1 + 200) != 0;
  }
  return result;
}

uint64_t nw_protocol_get_output_interface(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  const void *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *v22;
  _BOOL4 v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  const char *v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "__nw_protocol_get_output_interface";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_output_interface";
          v21 = "%{public}s called with null protocol";
LABEL_59:
          _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v19 = __nwlog_obj();
        v20 = type;
        v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            v32 = "__nw_protocol_get_output_interface";
            v33 = 2082;
            v34 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_60;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_output_interface";
          v21 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_59;
        }
      }
      else
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_output_interface";
          v21 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_59;
        }
      }
    }
LABEL_60:
    if (v18)
      free(v18);
    return 0;
  }
  v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
      *(_QWORD *)(a1 + 88) = v3 + 1;
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = *(uint64_t (**)(uint64_t))(v4 + 208);
    if (v5)
    {
      v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle)
        return v6;
      goto LABEL_8;
    }
  }
  __nwlog_obj();
  v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  v32 = "__nw_protocol_get_output_interface";
  if (!v12)
    v12 = "invalid";
  v33 = 2082;
  v34 = (void *)v12;
  v35 = 2048;
  v36 = a1;
  v13 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (!__nwlog_fault(v13, &type, &v29))
    goto LABEL_51;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_51;
    v16 = *(const char **)(a1 + 16);
    if (!v16)
      v16 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_output_interface";
    v33 = 2082;
    v34 = (void *)v16;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback";
LABEL_50:
    _os_log_impl(&dword_182FBE000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }
  if (!v29)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_51;
    v27 = *(const char **)(a1 + 16);
    if (!v27)
      v27 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_output_interface";
    v33 = 2082;
    v34 = (void *)v27;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback, backtrace limit exceeded";
    goto LABEL_50;
  }
  v22 = (char *)__nw_create_backtrace_string();
  v14 = __nwlog_obj();
  v15 = type;
  v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23)
      goto LABEL_51;
    v28 = *(const char **)(a1 + 16);
    if (!v28)
      v28 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_output_interface";
    v33 = 2082;
    v34 = (void *)v28;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback, no backtrace";
    goto LABEL_50;
  }
  if (v23)
  {
    v24 = *(const char **)(a1 + 16);
    if (!v24)
      v24 = "invalid";
    *(_DWORD *)buf = 136446978;
    v32 = "__nw_protocol_get_output_interface";
    v33 = 2082;
    v34 = (void *)v24;
    v35 = 2048;
    v36 = a1;
    v37 = 2082;
    v38 = v22;
    _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v22);
LABEL_51:
  if (v13)
    free(v13);
  v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      v8 = *(_QWORD *)(a1 + 88);
      if (v8)
      {
        v9 = v8 - 1;
        *(_QWORD *)(a1 + 88) = v9;
        if (!v9)
        {
          v10 = *(void (***)(_QWORD))(a1 + 64);
          if (v10)
          {
            *(_QWORD *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            v11 = *(const void **)(a1 + 64);
            if (v11)
              _Block_release(v11);
          }
          free((void *)a1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_get_output_interface_quiet(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (**v9)(_QWORD);
  const void *v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    return 0;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 208);
  if (!v3)
    return 0;
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
    return v3(a1);
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
    *(_QWORD *)(a1 + 88) = v5 + 1;
  v6 = v3(a1);
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    v7 = *(_QWORD *)(a1 + 88);
    if (v7)
    {
      v8 = v7 - 1;
      *(_QWORD *)(a1 + 88) = v8;
      if (!v8)
      {
        v9 = *(void (***)(_QWORD))(a1 + 64);
        if (v9)
        {
          *(_QWORD *)(a1 + 64) = 0;
          v9[2](v9);
          _Block_release(v9);
        }
        if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        {
          v10 = *(const void **)(a1 + 64);
          if (v10)
            _Block_release(v10);
        }
        free((void *)a1);
      }
    }
  }
  return v6;
}

BOOL nw_protocol_get_output_interface_is_valid(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    return v1 && *(_QWORD *)(v1 + 208) != 0;
  }
  return result;
}

uint64_t nw_protocol_connect(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(_QWORD);
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(_QWORD);
  const void *v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *backtrace_string;
  _BOOL4 v35;
  const char *v36;
  char *v37;
  _BOOL4 v38;
  char *v39;
  _BOOL4 v40;
  const char *v41;
  const char *v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *(void **)(a1 + 40);
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      v5 = *(_QWORD *)(a1 + 88);
      if (v5)
        *(_QWORD *)(a1 + 88) = v5 + 1;
    }
    if (a2)
    {
      v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        v7 = *(_QWORD *)(a2 + 88);
        if (v7)
          *(_QWORD *)(a2 + 88) = v7 + 1;
      }
      v8 = *(_QWORD *)(a1 + 24);
      if (v8)
      {
        v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 24);
        if (v9)
        {
          v10 = v9(a1, a2);
          if (v6 != &nw_protocol_ref_counted_handle)
          {
LABEL_13:
            if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v12 = *(_QWORD *)(a1 + 88);
              if (v12)
              {
                v13 = v12 - 1;
                *(_QWORD *)(a1 + 88) = v13;
                if (!v13)
                {
                  v14 = *(void (***)(_QWORD))(a1 + 64);
                  if (v14)
                  {
                    *(_QWORD *)(a1 + 64) = 0;
                    v14[2](v14);
                    _Block_release(v14);
                  }
                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    v15 = *(const void **)(a1 + 64);
                    if (v15)
                      _Block_release(v15);
                  }
                  free((void *)a1);
                }
              }
            }
            return v10;
          }
LABEL_12:
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v16 = *(_QWORD *)(a2 + 88);
            if (v16)
            {
              v17 = v16 - 1;
              *(_QWORD *)(a2 + 88) = v17;
              if (!v17)
              {
                v18 = *(void (***)(_QWORD))(a2 + 64);
                if (v18)
                {
                  *(_QWORD *)(a2 + 64) = 0;
                  v18[2](v18);
                  _Block_release(v18);
                }
                if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                {
                  v19 = *(const void **)(a2 + 64);
                  if (v19)
                    _Block_release(v19);
                }
                free((void *)a2);
              }
            }
          }
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      v20 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      v46 = "__nw_protocol_connect";
      if (!v20)
        v20 = "invalid";
      v47 = 2082;
      v48 = (void *)v20;
      v49 = 2048;
      v50 = a1;
      v21 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v22 = __nwlog_obj();
          v23 = type;
          if (!os_log_type_enabled(v22, type))
            goto LABEL_74;
          v24 = *(const char **)(a1 + 16);
          if (!v24)
            v24 = "invalid";
          *(_DWORD *)buf = 136446722;
          v46 = "__nw_protocol_connect";
          v47 = 2082;
          v48 = (void *)v24;
          v49 = 2048;
          v50 = a1;
          v25 = "%{public}s protocol %{public}s (%p) has invalid connect callback";
LABEL_73:
          _os_log_impl(&dword_182FBE000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }
        if (!v43)
        {
          v22 = __nwlog_obj();
          v23 = type;
          if (!os_log_type_enabled(v22, type))
            goto LABEL_74;
          v41 = *(const char **)(a1 + 16);
          if (!v41)
            v41 = "invalid";
          *(_DWORD *)buf = 136446722;
          v46 = "__nw_protocol_connect";
          v47 = 2082;
          v48 = (void *)v41;
          v49 = 2048;
          v50 = a1;
          v25 = "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded";
          goto LABEL_73;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v22 = __nwlog_obj();
        v23 = type;
        v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35)
            goto LABEL_74;
          v42 = *(const char **)(a1 + 16);
          if (!v42)
            v42 = "invalid";
          *(_DWORD *)buf = 136446722;
          v46 = "__nw_protocol_connect";
          v47 = 2082;
          v48 = (void *)v42;
          v49 = 2048;
          v50 = a1;
          v25 = "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace";
          goto LABEL_73;
        }
        if (v35)
        {
          v36 = *(const char **)(a1 + 16);
          if (!v36)
            v36 = "invalid";
          *(_DWORD *)buf = 136446978;
          v46 = "__nw_protocol_connect";
          v47 = 2082;
          v48 = (void *)v36;
          v49 = 2048;
          v50 = a1;
          v51 = 2082;
          v52 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_74:
      if (v21)
        free(v21);
      v10 = 0;
      if (v6 != &nw_protocol_ref_counted_handle)
        goto LABEL_13;
      goto LABEL_12;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "__nw_protocol_connect";
    v30 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "__nw_protocol_connect";
          v33 = "%{public}s called with null other_protocol";
LABEL_90:
          _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0xCu);
        }
      }
      else if (v43)
      {
        v39 = (char *)__nw_create_backtrace_string();
        v31 = __nwlog_obj();
        v32 = type;
        v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446466;
            v46 = "__nw_protocol_connect";
            v47 = 2082;
            v48 = v39;
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v39);
          goto LABEL_91;
        }
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "__nw_protocol_connect";
          v33 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_90;
        }
      }
      else
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "__nw_protocol_connect";
          v33 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }
LABEL_91:
    if (v30)
      free(v30);
    v10 = 0;
    goto LABEL_13;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v46 = "__nw_protocol_connect";
  v26 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "__nw_protocol_connect";
        v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
      }
    }
    else if (v43)
    {
      v37 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          v46 = "__nw_protocol_connect";
          v47 = 2082;
          v48 = v37;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v37);
        goto LABEL_85;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "__nw_protocol_connect";
        v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }
    else
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "__nw_protocol_connect";
        v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }
LABEL_85:
  if (v26)
    free(v26);
  return 0;
}

uint64_t nw_protocol_connect_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(_QWORD);
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  const void *v18;

  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v5 = 0;
  if (a2)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 24);
    if (v6)
    {
      v7 = *(void **)(a1 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a1 + 88);
        if (v8)
          *(_QWORD *)(a1 + 88) = v8 + 1;
      }
      if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v9 = *(_QWORD *)(a2 + 88);
        if (v9)
          *(_QWORD *)(a2 + 88) = v9 + 1;
        v5 = v6(a1, a2);
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          v11 = *(_QWORD *)(a2 + 88);
          if (v11)
          {
            v12 = v11 - 1;
            *(_QWORD *)(a2 + 88) = v12;
            if (!v12)
            {
              v13 = *(void (***)(_QWORD))(a2 + 64);
              if (v13)
              {
                *(_QWORD *)(a2 + 64) = 0;
                v13[2](v13);
                _Block_release(v13);
              }
              if ((*(_BYTE *)(a2 + 72) & 1) != 0)
              {
                v14 = *(const void **)(a2 + 64);
                if (v14)
                  _Block_release(v14);
              }
              free((void *)a2);
            }
          }
        }
      }
      else
      {
        v5 = v6(a1, a2);
      }
      if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        v15 = *(_QWORD *)(a1 + 88);
        if (v15)
        {
          v16 = v15 - 1;
          *(_QWORD *)(a1 + 88) = v16;
          if (!v16)
          {
            v17 = *(void (***)(_QWORD))(a1 + 64);
            if (v17)
            {
              *(_QWORD *)(a1 + 64) = 0;
              v17[2](v17);
              _Block_release(v17);
            }
            if ((*(_BYTE *)(a1 + 72) & 1) != 0)
            {
              v18 = *(const void **)(a1 + 64);
              if (v18)
                _Block_release(v18);
            }
            free((void *)a1);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t nw_protocol_connect_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 24) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

void nw_protocol_connected_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        v5 = *(void (**)(uint64_t, uint64_t))(v3 + 40);
        if (v5)
        {
          v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            v7 = *(_QWORD *)(a1 + 88);
            if (v7)
              *(_QWORD *)(a1 + 88) = v7 + 1;
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v8 = *(_QWORD *)(a2 + 88);
            if (v8)
              *(_QWORD *)(a2 + 88) = v8 + 1;
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              v9 = *(_QWORD *)(a2 + 88);
              if (v9)
              {
                v10 = v9 - 1;
                *(_QWORD *)(a2 + 88) = v10;
                if (!v10)
                {
                  v11 = *(void (***)(_QWORD))(a2 + 64);
                  if (v11)
                  {
                    *(_QWORD *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                  {
                    v12 = *(const void **)(a2 + 64);
                    if (v12)
                      _Block_release(v12);
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v13 = *(_QWORD *)(a1 + 88);
            if (v13)
            {
              v14 = v13 - 1;
              *(_QWORD *)(a1 + 88) = v14;
              if (!v14)
              {
                v15 = *(void (***)(_QWORD))(a1 + 64);
                if (v15)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v16 = *(const void **)(a1 + 64);
                  if (v16)
                    _Block_release(v16);
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_connected_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 40) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

void nw_protocol_disconnect(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (**v12)(_QWORD);
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(_QWORD);
  const void *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  char *v33;
  _BOOL4 v34;
  char *v35;
  _BOOL4 v36;
  const char *v37;
  const char *v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a2;
    v3 = (uint64_t)a1;
    v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      v5 = a1[11];
      if (v5)
        a1[11] = v5 + 1;
    }
    if (a2)
    {
      v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        v7 = *(_QWORD *)(a2 + 88);
        if (v7)
          *(_QWORD *)(a2 + 88) = v7 + 1;
      }
      v8 = a1[3];
      if (v8)
      {
        v9 = *(void (**)(_QWORD *, uint64_t))(v8 + 32);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      v42 = "__nw_protocol_disconnect";
      if (!v18)
        v18 = "invalid";
      v43 = 2082;
      v44 = (void *)v18;
      v45 = 2048;
      v46 = v3;
      v19 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v22 = *(const char **)(v3 + 16);
          if (!v22)
            v22 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_disconnect";
          v43 = 2082;
          v44 = (void *)v22;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v37 = *(const char **)(v3 + 16);
          if (!v37)
            v37 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_disconnect";
          v43 = 2082;
          v44 = (void *)v37;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v20 = __nwlog_obj();
        v21 = type;
        v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            v32 = *(const char **)(v3 + 16);
            if (!v32)
              v32 = "invalid";
            *(_DWORD *)buf = 136446978;
            v42 = "__nw_protocol_disconnect";
            v43 = 2082;
            v44 = (void *)v32;
            v45 = 2048;
            v46 = v3;
            v47 = 2082;
            v48 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid disconnect callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          v38 = *(const char **)(v3 + 16);
          if (!v38)
            v38 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_disconnect";
          v43 = 2082;
          v44 = (void *)v38;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_182FBE000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19)
        free(v19);
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v14 = *(_QWORD *)(v2 + 88);
        if (v14)
        {
          v15 = v14 - 1;
          *(_QWORD *)(v2 + 88) = v15;
          if (!v15)
          {
            v16 = *(void (***)(_QWORD))(v2 + 64);
            if (v16)
            {
              *(_QWORD *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if ((*(_BYTE *)(v2 + 72) & 1) != 0)
            {
              v17 = *(const void **)(v2 + 64);
              if (v17)
                _Block_release(v17);
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(_QWORD *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(_QWORD *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(_QWORD))(v3 + 64);
            if (v12)
            {
              *(_QWORD *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13)
                _Block_release(v13);
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_disconnect";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_disconnect";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_disconnect";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      v35 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_disconnect";
          v43 = 2082;
          v44 = v35;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2)
          goto LABEL_32;
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_disconnect";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2)
      goto LABEL_14;
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v42 = "__nw_protocol_disconnect";
  v3 = _os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_disconnect";
      v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      v33 = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_disconnect";
          v43 = 2082;
          v44 = v33;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3)
          goto LABEL_24;
        return;
      }
      if (!v34)
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_disconnect";
      v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_disconnect";
      v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3)
LABEL_24:
    free((void *)v3);
}

void nw_protocol_disconnect_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        v5 = *(void (**)(uint64_t, uint64_t))(v3 + 32);
        if (v5)
        {
          v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            v7 = *(_QWORD *)(a1 + 88);
            if (v7)
              *(_QWORD *)(a1 + 88) = v7 + 1;
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v8 = *(_QWORD *)(a2 + 88);
            if (v8)
              *(_QWORD *)(a2 + 88) = v8 + 1;
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              v9 = *(_QWORD *)(a2 + 88);
              if (v9)
              {
                v10 = v9 - 1;
                *(_QWORD *)(a2 + 88) = v10;
                if (!v10)
                {
                  v11 = *(void (***)(_QWORD))(a2 + 64);
                  if (v11)
                  {
                    *(_QWORD *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                  {
                    v12 = *(const void **)(a2 + 64);
                    if (v12)
                      _Block_release(v12);
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v13 = *(_QWORD *)(a1 + 88);
            if (v13)
            {
              v14 = v13 - 1;
              *(_QWORD *)(a1 + 88) = v14;
              if (!v14)
              {
                v15 = *(void (***)(_QWORD))(a1 + 64);
                if (v15)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v16 = *(const void **)(a1 + 64);
                  if (v16)
                    _Block_release(v16);
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_disconnect_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 32) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

void nw_protocol_disconnected(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (**v12)(_QWORD);
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(_QWORD);
  const void *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  char *v33;
  _BOOL4 v34;
  char *v35;
  _BOOL4 v36;
  const char *v37;
  const char *v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a2;
    v3 = (uint64_t)a1;
    v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      v5 = a1[11];
      if (v5)
        a1[11] = v5 + 1;
    }
    if (a2)
    {
      v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        v7 = *(_QWORD *)(a2 + 88);
        if (v7)
          *(_QWORD *)(a2 + 88) = v7 + 1;
      }
      v8 = a1[3];
      if (v8)
      {
        v9 = *(void (**)(_QWORD *, uint64_t))(v8 + 48);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      v42 = "__nw_protocol_disconnected";
      if (!v18)
        v18 = "invalid";
      v43 = 2082;
      v44 = (void *)v18;
      v45 = 2048;
      v46 = v3;
      v19 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v22 = *(const char **)(v3 + 16);
          if (!v22)
            v22 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_disconnected";
          v43 = 2082;
          v44 = (void *)v22;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v37 = *(const char **)(v3 + 16);
          if (!v37)
            v37 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_disconnected";
          v43 = 2082;
          v44 = (void *)v37;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v20 = __nwlog_obj();
        v21 = type;
        v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            v32 = *(const char **)(v3 + 16);
            if (!v32)
              v32 = "invalid";
            *(_DWORD *)buf = 136446978;
            v42 = "__nw_protocol_disconnected";
            v43 = 2082;
            v44 = (void *)v32;
            v45 = 2048;
            v46 = v3;
            v47 = 2082;
            v48 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          v38 = *(const char **)(v3 + 16);
          if (!v38)
            v38 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_disconnected";
          v43 = 2082;
          v44 = (void *)v38;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_182FBE000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19)
        free(v19);
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v14 = *(_QWORD *)(v2 + 88);
        if (v14)
        {
          v15 = v14 - 1;
          *(_QWORD *)(v2 + 88) = v15;
          if (!v15)
          {
            v16 = *(void (***)(_QWORD))(v2 + 64);
            if (v16)
            {
              *(_QWORD *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if ((*(_BYTE *)(v2 + 72) & 1) != 0)
            {
              v17 = *(const void **)(v2 + 64);
              if (v17)
                _Block_release(v17);
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(_QWORD *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(_QWORD *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(_QWORD))(v3 + 64);
            if (v12)
            {
              *(_QWORD *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13)
                _Block_release(v13);
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_disconnected";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_disconnected";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_disconnected";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      v35 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_disconnected";
          v43 = 2082;
          v44 = v35;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2)
          goto LABEL_32;
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_disconnected";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2)
      goto LABEL_14;
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v42 = "__nw_protocol_disconnected";
  v3 = _os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_disconnected";
      v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      v33 = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_disconnected";
          v43 = 2082;
          v44 = v33;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3)
          goto LABEL_24;
        return;
      }
      if (!v34)
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_disconnected";
      v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_disconnected";
      v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3)
LABEL_24:
    free((void *)v3);
}

void nw_protocol_disconnected_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        v5 = *(void (**)(uint64_t, uint64_t))(v3 + 48);
        if (v5)
        {
          v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            v7 = *(_QWORD *)(a1 + 88);
            if (v7)
              *(_QWORD *)(a1 + 88) = v7 + 1;
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v8 = *(_QWORD *)(a2 + 88);
            if (v8)
              *(_QWORD *)(a2 + 88) = v8 + 1;
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              v9 = *(_QWORD *)(a2 + 88);
              if (v9)
              {
                v10 = v9 - 1;
                *(_QWORD *)(a2 + 88) = v10;
                if (!v10)
                {
                  v11 = *(void (***)(_QWORD))(a2 + 64);
                  if (v11)
                  {
                    *(_QWORD *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                  {
                    v12 = *(const void **)(a2 + 64);
                    if (v12)
                      _Block_release(v12);
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v13 = *(_QWORD *)(a1 + 88);
            if (v13)
            {
              v14 = v13 - 1;
              *(_QWORD *)(a1 + 88) = v14;
              if (!v14)
              {
                v15 = *(void (***)(_QWORD))(a1 + 64);
                if (v15)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v16 = *(const void **)(a1 + 64);
                  if (v16)
                    _Block_release(v16);
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_disconnected_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 48) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

void nw_protocol_input_available(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (**v12)(_QWORD);
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(_QWORD);
  const void *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  char *v33;
  _BOOL4 v34;
  char *v35;
  _BOOL4 v36;
  const char *v37;
  const char *v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a2;
    v3 = (uint64_t)a1;
    v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      v5 = a1[11];
      if (v5)
        a1[11] = v5 + 1;
    }
    if (a2)
    {
      v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        v7 = *(_QWORD *)(a2 + 88);
        if (v7)
          *(_QWORD *)(a2 + 88) = v7 + 1;
      }
      v8 = a1[3];
      if (v8)
      {
        v9 = *(void (**)(_QWORD *, uint64_t))(v8 + 64);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      v42 = "__nw_protocol_input_available";
      if (!v18)
        v18 = "invalid";
      v43 = 2082;
      v44 = (void *)v18;
      v45 = 2048;
      v46 = v3;
      v19 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v22 = *(const char **)(v3 + 16);
          if (!v22)
            v22 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_input_available";
          v43 = 2082;
          v44 = (void *)v22;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid input_available callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v37 = *(const char **)(v3 + 16);
          if (!v37)
            v37 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_input_available";
          v43 = 2082;
          v44 = (void *)v37;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid input_available callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v20 = __nwlog_obj();
        v21 = type;
        v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            v32 = *(const char **)(v3 + 16);
            if (!v32)
              v32 = "invalid";
            *(_DWORD *)buf = 136446978;
            v42 = "__nw_protocol_input_available";
            v43 = 2082;
            v44 = (void *)v32;
            v45 = 2048;
            v46 = v3;
            v47 = 2082;
            v48 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          v38 = *(const char **)(v3 + 16);
          if (!v38)
            v38 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_input_available";
          v43 = 2082;
          v44 = (void *)v38;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid input_available callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_182FBE000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19)
        free(v19);
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v14 = *(_QWORD *)(v2 + 88);
        if (v14)
        {
          v15 = v14 - 1;
          *(_QWORD *)(v2 + 88) = v15;
          if (!v15)
          {
            v16 = *(void (***)(_QWORD))(v2 + 64);
            if (v16)
            {
              *(_QWORD *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if ((*(_BYTE *)(v2 + 72) & 1) != 0)
            {
              v17 = *(const void **)(v2 + 64);
              if (v17)
                _Block_release(v17);
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(_QWORD *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(_QWORD *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(_QWORD))(v3 + 64);
            if (v12)
            {
              *(_QWORD *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13)
                _Block_release(v13);
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_input_available";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_available";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_available";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      v35 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_input_available";
          v43 = 2082;
          v44 = v35;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2)
          goto LABEL_32;
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_available";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2)
      goto LABEL_14;
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v42 = "__nw_protocol_input_available";
  v3 = _os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_input_available";
      v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      v33 = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_input_available";
          v43 = 2082;
          v44 = v33;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3)
          goto LABEL_24;
        return;
      }
      if (!v34)
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_input_available";
      v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_input_available";
      v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3)
LABEL_24:
    free((void *)v3);
}

void nw_protocol_input_available_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        v5 = *(void (**)(uint64_t, uint64_t))(v3 + 64);
        if (v5)
        {
          v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            v7 = *(_QWORD *)(a1 + 88);
            if (v7)
              *(_QWORD *)(a1 + 88) = v7 + 1;
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v8 = *(_QWORD *)(a2 + 88);
            if (v8)
              *(_QWORD *)(a2 + 88) = v8 + 1;
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              v9 = *(_QWORD *)(a2 + 88);
              if (v9)
              {
                v10 = v9 - 1;
                *(_QWORD *)(a2 + 88) = v10;
                if (!v10)
                {
                  v11 = *(void (***)(_QWORD))(a2 + 64);
                  if (v11)
                  {
                    *(_QWORD *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                  {
                    v12 = *(const void **)(a2 + 64);
                    if (v12)
                      _Block_release(v12);
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v13 = *(_QWORD *)(a1 + 88);
            if (v13)
            {
              v14 = v13 - 1;
              *(_QWORD *)(a1 + 88) = v14;
              if (!v14)
              {
                v15 = *(void (***)(_QWORD))(a1 + 64);
                if (v15)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v16 = *(const void **)(a1 + 64);
                  if (v16)
                    _Block_release(v16);
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_input_available_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 64) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

void nw_protocol_output_available(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (**v12)(_QWORD);
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(_QWORD);
  const void *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  char *v33;
  _BOOL4 v34;
  char *v35;
  _BOOL4 v36;
  const char *v37;
  const char *v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a2;
    v3 = (uint64_t)a1;
    v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      v5 = a1[11];
      if (v5)
        a1[11] = v5 + 1;
    }
    if (a2)
    {
      v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        v7 = *(_QWORD *)(a2 + 88);
        if (v7)
          *(_QWORD *)(a2 + 88) = v7 + 1;
      }
      v8 = a1[3];
      if (v8)
      {
        v9 = *(void (**)(_QWORD *, uint64_t))(v8 + 72);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      v42 = "__nw_protocol_output_available";
      if (!v18)
        v18 = "invalid";
      v43 = 2082;
      v44 = (void *)v18;
      v45 = 2048;
      v46 = v3;
      v19 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v22 = *(const char **)(v3 + 16);
          if (!v22)
            v22 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_output_available";
          v43 = 2082;
          v44 = (void *)v22;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid output_available callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v37 = *(const char **)(v3 + 16);
          if (!v37)
            v37 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_output_available";
          v43 = 2082;
          v44 = (void *)v37;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v20 = __nwlog_obj();
        v21 = type;
        v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            v32 = *(const char **)(v3 + 16);
            if (!v32)
              v32 = "invalid";
            *(_DWORD *)buf = 136446978;
            v42 = "__nw_protocol_output_available";
            v43 = 2082;
            v44 = (void *)v32;
            v45 = 2048;
            v46 = v3;
            v47 = 2082;
            v48 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          v38 = *(const char **)(v3 + 16);
          if (!v38)
            v38 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_output_available";
          v43 = 2082;
          v44 = (void *)v38;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_182FBE000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19)
        free(v19);
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v14 = *(_QWORD *)(v2 + 88);
        if (v14)
        {
          v15 = v14 - 1;
          *(_QWORD *)(v2 + 88) = v15;
          if (!v15)
          {
            v16 = *(void (***)(_QWORD))(v2 + 64);
            if (v16)
            {
              *(_QWORD *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if ((*(_BYTE *)(v2 + 72) & 1) != 0)
            {
              v17 = *(const void **)(v2 + 64);
              if (v17)
                _Block_release(v17);
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(_QWORD *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(_QWORD *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(_QWORD))(v3 + 64);
            if (v12)
            {
              *(_QWORD *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13)
                _Block_release(v13);
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_output_available";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_output_available";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_output_available";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      v35 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_output_available";
          v43 = 2082;
          v44 = v35;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2)
          goto LABEL_32;
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_output_available";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2)
      goto LABEL_14;
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v42 = "__nw_protocol_output_available";
  v3 = _os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_output_available";
      v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      v33 = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_output_available";
          v43 = 2082;
          v44 = v33;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3)
          goto LABEL_24;
        return;
      }
      if (!v34)
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_output_available";
      v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_output_available";
      v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3)
LABEL_24:
    free((void *)v3);
}

void nw_protocol_output_available_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        v5 = *(void (**)(uint64_t, uint64_t))(v3 + 72);
        if (v5)
        {
          v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            v7 = *(_QWORD *)(a1 + 88);
            if (v7)
              *(_QWORD *)(a1 + 88) = v7 + 1;
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v8 = *(_QWORD *)(a2 + 88);
            if (v8)
              *(_QWORD *)(a2 + 88) = v8 + 1;
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              v9 = *(_QWORD *)(a2 + 88);
              if (v9)
              {
                v10 = v9 - 1;
                *(_QWORD *)(a2 + 88) = v10;
                if (!v10)
                {
                  v11 = *(void (***)(_QWORD))(a2 + 64);
                  if (v11)
                  {
                    *(_QWORD *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                  {
                    v12 = *(const void **)(a2 + 64);
                    if (v12)
                      _Block_release(v12);
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v13 = *(_QWORD *)(a1 + 88);
            if (v13)
            {
              v14 = v13 - 1;
              *(_QWORD *)(a1 + 88) = v14;
              if (!v14)
              {
                v15 = *(void (***)(_QWORD))(a1 + 64);
                if (v15)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v16 = *(const void **)(a1 + 64);
                  if (v16)
                    _Block_release(v16);
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_output_available_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 72) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

void nw_protocol_input_finished(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (**v12)(_QWORD);
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(_QWORD);
  const void *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  char *v33;
  _BOOL4 v34;
  char *v35;
  _BOOL4 v36;
  const char *v37;
  const char *v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a2;
    v3 = (uint64_t)a1;
    v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      v5 = a1[11];
      if (v5)
        a1[11] = v5 + 1;
    }
    if (a2)
    {
      v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        v7 = *(_QWORD *)(a2 + 88);
        if (v7)
          *(_QWORD *)(a2 + 88) = v7 + 1;
      }
      v8 = a1[3];
      if (v8)
      {
        v9 = *(void (**)(_QWORD *, uint64_t))(v8 + 184);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      v42 = "__nw_protocol_input_finished";
      if (!v18)
        v18 = "invalid";
      v43 = 2082;
      v44 = (void *)v18;
      v45 = 2048;
      v46 = v3;
      v19 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v22 = *(const char **)(v3 + 16);
          if (!v22)
            v22 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_input_finished";
          v43 = 2082;
          v44 = (void *)v22;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid input_finished callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v37 = *(const char **)(v3 + 16);
          if (!v37)
            v37 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_input_finished";
          v43 = 2082;
          v44 = (void *)v37;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid input_finished callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v20 = __nwlog_obj();
        v21 = type;
        v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            v32 = *(const char **)(v3 + 16);
            if (!v32)
              v32 = "invalid";
            *(_DWORD *)buf = 136446978;
            v42 = "__nw_protocol_input_finished";
            v43 = 2082;
            v44 = (void *)v32;
            v45 = 2048;
            v46 = v3;
            v47 = 2082;
            v48 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          v38 = *(const char **)(v3 + 16);
          if (!v38)
            v38 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_input_finished";
          v43 = 2082;
          v44 = (void *)v38;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid input_finished callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_182FBE000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19)
        free(v19);
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v14 = *(_QWORD *)(v2 + 88);
        if (v14)
        {
          v15 = v14 - 1;
          *(_QWORD *)(v2 + 88) = v15;
          if (!v15)
          {
            v16 = *(void (***)(_QWORD))(v2 + 64);
            if (v16)
            {
              *(_QWORD *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if ((*(_BYTE *)(v2 + 72) & 1) != 0)
            {
              v17 = *(const void **)(v2 + 64);
              if (v17)
                _Block_release(v17);
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(_QWORD *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(_QWORD *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(_QWORD))(v3 + 64);
            if (v12)
            {
              *(_QWORD *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13)
                _Block_release(v13);
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_input_finished";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_finished";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_finished";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      v35 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_input_finished";
          v43 = 2082;
          v44 = v35;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2)
          goto LABEL_32;
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_finished";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2)
      goto LABEL_14;
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v42 = "__nw_protocol_input_finished";
  v3 = _os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_input_finished";
      v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      v33 = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_input_finished";
          v43 = 2082;
          v44 = v33;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3)
          goto LABEL_24;
        return;
      }
      if (!v34)
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_input_finished";
      v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_input_finished";
      v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3)
LABEL_24:
    free((void *)v3);
}

void nw_protocol_input_finished_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        v5 = *(void (**)(uint64_t, uint64_t))(v3 + 184);
        if (v5)
        {
          v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            v7 = *(_QWORD *)(a1 + 88);
            if (v7)
              *(_QWORD *)(a1 + 88) = v7 + 1;
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v8 = *(_QWORD *)(a2 + 88);
            if (v8)
              *(_QWORD *)(a2 + 88) = v8 + 1;
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              v9 = *(_QWORD *)(a2 + 88);
              if (v9)
              {
                v10 = v9 - 1;
                *(_QWORD *)(a2 + 88) = v10;
                if (!v10)
                {
                  v11 = *(void (***)(_QWORD))(a2 + 64);
                  if (v11)
                  {
                    *(_QWORD *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                  {
                    v12 = *(const void **)(a2 + 64);
                    if (v12)
                      _Block_release(v12);
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v13 = *(_QWORD *)(a1 + 88);
            if (v13)
            {
              v14 = v13 - 1;
              *(_QWORD *)(a1 + 88) = v14;
              if (!v14)
              {
                v15 = *(void (***)(_QWORD))(a1 + 64);
                if (v15)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v16 = *(const void **)(a1 + 64);
                  if (v16)
                    _Block_release(v16);
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_input_finished_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 184) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

void nw_protocol_output_finished(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (**v12)(_QWORD);
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(_QWORD);
  const void *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  char *v33;
  _BOOL4 v34;
  char *v35;
  _BOOL4 v36;
  const char *v37;
  const char *v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a2;
    v3 = (uint64_t)a1;
    v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      v5 = a1[11];
      if (v5)
        a1[11] = v5 + 1;
    }
    if (a2)
    {
      v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        v7 = *(_QWORD *)(a2 + 88);
        if (v7)
          *(_QWORD *)(a2 + 88) = v7 + 1;
      }
      v8 = a1[3];
      if (v8)
      {
        v9 = *(void (**)(_QWORD *, uint64_t))(v8 + 192);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      v42 = "__nw_protocol_output_finished";
      if (!v18)
        v18 = "invalid";
      v43 = 2082;
      v44 = (void *)v18;
      v45 = 2048;
      v46 = v3;
      v19 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v22 = *(const char **)(v3 + 16);
          if (!v22)
            v22 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_output_finished";
          v43 = 2082;
          v44 = (void *)v22;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid output_finished callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v37 = *(const char **)(v3 + 16);
          if (!v37)
            v37 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_output_finished";
          v43 = 2082;
          v44 = (void *)v37;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid output_finished callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v20 = __nwlog_obj();
        v21 = type;
        v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            v32 = *(const char **)(v3 + 16);
            if (!v32)
              v32 = "invalid";
            *(_DWORD *)buf = 136446978;
            v42 = "__nw_protocol_output_finished";
            v43 = 2082;
            v44 = (void *)v32;
            v45 = 2048;
            v46 = v3;
            v47 = 2082;
            v48 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid output_finished callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          v38 = *(const char **)(v3 + 16);
          if (!v38)
            v38 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_output_finished";
          v43 = 2082;
          v44 = (void *)v38;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid output_finished callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_182FBE000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19)
        free(v19);
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v14 = *(_QWORD *)(v2 + 88);
        if (v14)
        {
          v15 = v14 - 1;
          *(_QWORD *)(v2 + 88) = v15;
          if (!v15)
          {
            v16 = *(void (***)(_QWORD))(v2 + 64);
            if (v16)
            {
              *(_QWORD *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if ((*(_BYTE *)(v2 + 72) & 1) != 0)
            {
              v17 = *(const void **)(v2 + 64);
              if (v17)
                _Block_release(v17);
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(_QWORD *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(_QWORD *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(_QWORD))(v3 + 64);
            if (v12)
            {
              *(_QWORD *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13)
                _Block_release(v13);
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_output_finished";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_output_finished";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_output_finished";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      v35 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_output_finished";
          v43 = 2082;
          v44 = v35;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2)
          goto LABEL_32;
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_output_finished";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2)
      goto LABEL_14;
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v42 = "__nw_protocol_output_finished";
  v3 = _os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_output_finished";
      v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      v33 = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_output_finished";
          v43 = 2082;
          v44 = v33;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3)
          goto LABEL_24;
        return;
      }
      if (!v34)
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_output_finished";
      v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_output_finished";
      v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3)
LABEL_24:
    free((void *)v3);
}

void nw_protocol_output_finished_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        v5 = *(void (**)(uint64_t, uint64_t))(v3 + 192);
        if (v5)
        {
          v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            v7 = *(_QWORD *)(a1 + 88);
            if (v7)
              *(_QWORD *)(a1 + 88) = v7 + 1;
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v8 = *(_QWORD *)(a2 + 88);
            if (v8)
              *(_QWORD *)(a2 + 88) = v8 + 1;
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              v9 = *(_QWORD *)(a2 + 88);
              if (v9)
              {
                v10 = v9 - 1;
                *(_QWORD *)(a2 + 88) = v10;
                if (!v10)
                {
                  v11 = *(void (***)(_QWORD))(a2 + 64);
                  if (v11)
                  {
                    *(_QWORD *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                  {
                    v12 = *(const void **)(a2 + 64);
                    if (v12)
                      _Block_release(v12);
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v13 = *(_QWORD *)(a1 + 88);
            if (v13)
            {
              v14 = v13 - 1;
              *(_QWORD *)(a1 + 88) = v14;
              if (!v14)
              {
                v15 = *(void (***)(_QWORD))(a1 + 64);
                if (v15)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v16 = *(const void **)(a1 + 64);
                  if (v16)
                    _Block_release(v16);
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_output_finished_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 192) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

void nw_protocol_input_flush(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (**v12)(_QWORD);
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(_QWORD);
  const void *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  char *v33;
  _BOOL4 v34;
  char *v35;
  _BOOL4 v36;
  const char *v37;
  const char *v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a2;
    v3 = (uint64_t)a1;
    v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      v5 = a1[11];
      if (v5)
        a1[11] = v5 + 1;
    }
    if (a2)
    {
      v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        v7 = *(_QWORD *)(a2 + 88);
        if (v7)
          *(_QWORD *)(a2 + 88) = v7 + 1;
      }
      v8 = a1[3];
      if (v8)
      {
        v9 = *(void (**)(_QWORD *, uint64_t))(v8 + 264);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      v42 = "__nw_protocol_input_flush";
      if (!v18)
        v18 = "invalid";
      v43 = 2082;
      v44 = (void *)v18;
      v45 = 2048;
      v46 = v3;
      v19 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v22 = *(const char **)(v3 + 16);
          if (!v22)
            v22 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_input_flush";
          v43 = 2082;
          v44 = (void *)v22;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid input_flush callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v37 = *(const char **)(v3 + 16);
          if (!v37)
            v37 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_input_flush";
          v43 = 2082;
          v44 = (void *)v37;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid input_flush callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v20 = __nwlog_obj();
        v21 = type;
        v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            v32 = *(const char **)(v3 + 16);
            if (!v32)
              v32 = "invalid";
            *(_DWORD *)buf = 136446978;
            v42 = "__nw_protocol_input_flush";
            v43 = 2082;
            v44 = (void *)v32;
            v45 = 2048;
            v46 = v3;
            v47 = 2082;
            v48 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid input_flush callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          v38 = *(const char **)(v3 + 16);
          if (!v38)
            v38 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_input_flush";
          v43 = 2082;
          v44 = (void *)v38;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid input_flush callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_182FBE000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19)
        free(v19);
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v14 = *(_QWORD *)(v2 + 88);
        if (v14)
        {
          v15 = v14 - 1;
          *(_QWORD *)(v2 + 88) = v15;
          if (!v15)
          {
            v16 = *(void (***)(_QWORD))(v2 + 64);
            if (v16)
            {
              *(_QWORD *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if ((*(_BYTE *)(v2 + 72) & 1) != 0)
            {
              v17 = *(const void **)(v2 + 64);
              if (v17)
                _Block_release(v17);
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(_QWORD *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(_QWORD *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(_QWORD))(v3 + 64);
            if (v12)
            {
              *(_QWORD *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13)
                _Block_release(v13);
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_input_flush";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_flush";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_flush";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      v35 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_input_flush";
          v43 = 2082;
          v44 = v35;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2)
          goto LABEL_32;
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_flush";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2)
      goto LABEL_14;
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v42 = "__nw_protocol_input_flush";
  v3 = _os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_input_flush";
      v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      v33 = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_input_flush";
          v43 = 2082;
          v44 = v33;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3)
          goto LABEL_24;
        return;
      }
      if (!v34)
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_input_flush";
      v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_input_flush";
      v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3)
LABEL_24:
    free((void *)v3);
}

void nw_protocol_input_flush_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        v5 = *(void (**)(uint64_t, uint64_t))(v3 + 264);
        if (v5)
        {
          v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            v7 = *(_QWORD *)(a1 + 88);
            if (v7)
              *(_QWORD *)(a1 + 88) = v7 + 1;
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v8 = *(_QWORD *)(a2 + 88);
            if (v8)
              *(_QWORD *)(a2 + 88) = v8 + 1;
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              v9 = *(_QWORD *)(a2 + 88);
              if (v9)
              {
                v10 = v9 - 1;
                *(_QWORD *)(a2 + 88) = v10;
                if (!v10)
                {
                  v11 = *(void (***)(_QWORD))(a2 + 64);
                  if (v11)
                  {
                    *(_QWORD *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                  {
                    v12 = *(const void **)(a2 + 64);
                    if (v12)
                      _Block_release(v12);
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v13 = *(_QWORD *)(a1 + 88);
            if (v13)
            {
              v14 = v13 - 1;
              *(_QWORD *)(a1 + 88) = v14;
              if (!v14)
              {
                v15 = *(void (***)(_QWORD))(a1 + 64);
                if (v15)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v16 = *(const void **)(a1 + 64);
                  if (v16)
                    _Block_release(v16);
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_input_flush_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 264) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

void nw_protocol_error(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (**v12)(_QWORD);
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(_QWORD);
  const void *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  char *v33;
  _BOOL4 v34;
  char *v35;
  _BOOL4 v36;
  const char *v37;
  const char *v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a2;
    v3 = (uint64_t)a1;
    v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      v5 = a1[11];
      if (v5)
        a1[11] = v5 + 1;
    }
    if (a2)
    {
      v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        v7 = *(_QWORD *)(a2 + 88);
        if (v7)
          *(_QWORD *)(a2 + 88) = v7 + 1;
      }
      v8 = a1[3];
      if (v8)
      {
        v9 = *(void (**)(_QWORD *, uint64_t))(v8 + 56);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      v42 = "__nw_protocol_error";
      if (!v18)
        v18 = "invalid";
      v43 = 2082;
      v44 = (void *)v18;
      v45 = 2048;
      v46 = v3;
      v19 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v22 = *(const char **)(v3 + 16);
          if (!v22)
            v22 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_error";
          v43 = 2082;
          v44 = (void *)v22;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid error callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          v20 = __nwlog_obj();
          v21 = type;
          if (!os_log_type_enabled(v20, type))
            goto LABEL_77;
          v37 = *(const char **)(v3 + 16);
          if (!v37)
            v37 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_error";
          v43 = 2082;
          v44 = (void *)v37;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v20 = __nwlog_obj();
        v21 = type;
        v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            v32 = *(const char **)(v3 + 16);
            if (!v32)
              v32 = "invalid";
            *(_DWORD *)buf = 136446978;
            v42 = "__nw_protocol_error";
            v43 = 2082;
            v44 = (void *)v32;
            v45 = 2048;
            v46 = v3;
            v47 = 2082;
            v48 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          v38 = *(const char **)(v3 + 16);
          if (!v38)
            v38 = "invalid";
          *(_DWORD *)buf = 136446722;
          v42 = "__nw_protocol_error";
          v43 = 2082;
          v44 = (void *)v38;
          v45 = 2048;
          v46 = v3;
          v23 = "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_182FBE000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19)
        free(v19);
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v14 = *(_QWORD *)(v2 + 88);
        if (v14)
        {
          v15 = v14 - 1;
          *(_QWORD *)(v2 + 88) = v15;
          if (!v15)
          {
            v16 = *(void (***)(_QWORD))(v2 + 64);
            if (v16)
            {
              *(_QWORD *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if ((*(_BYTE *)(v2 + 72) & 1) != 0)
            {
              v17 = *(const void **)(v2 + 64);
              if (v17)
                _Block_release(v17);
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(_QWORD *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(_QWORD *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(_QWORD))(v3 + 64);
            if (v12)
            {
              *(_QWORD *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13)
                _Block_release(v13);
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_error";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_error";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_error";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      v35 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_error";
          v43 = 2082;
          v44 = v35;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2)
          goto LABEL_32;
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_error";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2)
      goto LABEL_14;
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v42 = "__nw_protocol_error";
  v3 = _os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_error";
      v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      v33 = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_error";
          v43 = 2082;
          v44 = v33;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3)
          goto LABEL_24;
        return;
      }
      if (!v34)
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_error";
      v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v42 = "__nw_protocol_error";
      v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3)
LABEL_24:
    free((void *)v3);
}

void nw_protocol_error_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        v5 = *(void (**)(uint64_t, uint64_t))(v3 + 56);
        if (v5)
        {
          v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            v7 = *(_QWORD *)(a1 + 88);
            if (v7)
              *(_QWORD *)(a1 + 88) = v7 + 1;
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v8 = *(_QWORD *)(a2 + 88);
            if (v8)
              *(_QWORD *)(a2 + 88) = v8 + 1;
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              v9 = *(_QWORD *)(a2 + 88);
              if (v9)
              {
                v10 = v9 - 1;
                *(_QWORD *)(a2 + 88) = v10;
                if (!v10)
                {
                  v11 = *(void (***)(_QWORD))(a2 + 64);
                  if (v11)
                  {
                    *(_QWORD *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                  {
                    v12 = *(const void **)(a2 + 64);
                    if (v12)
                      _Block_release(v12);
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v13 = *(_QWORD *)(a1 + 88);
            if (v13)
            {
              v14 = v13 - 1;
              *(_QWORD *)(a1 + 88) = v14;
              if (!v14)
              {
                v15 = *(void (***)(_QWORD))(a1 + 64);
                if (v15)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v16 = *(const void **)(a1 + 64);
                  if (v16)
                    _Block_release(v16);
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_error_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 56) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

uint64_t nw_protocol_reset(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(_QWORD);
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(_QWORD);
  const void *v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *backtrace_string;
  _BOOL4 v35;
  const char *v36;
  char *v37;
  _BOOL4 v38;
  char *v39;
  _BOOL4 v40;
  const char *v41;
  const char *v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *(void **)(a1 + 40);
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      v5 = *(_QWORD *)(a1 + 88);
      if (v5)
        *(_QWORD *)(a1 + 88) = v5 + 1;
    }
    if (a2)
    {
      v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        v7 = *(_QWORD *)(a2 + 88);
        if (v7)
          *(_QWORD *)(a2 + 88) = v7 + 1;
      }
      v8 = *(_QWORD *)(a1 + 24);
      if (v8)
      {
        v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 256);
        if (v9)
        {
          v10 = v9(a1, a2);
          if (v6 != &nw_protocol_ref_counted_handle)
          {
LABEL_13:
            if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v12 = *(_QWORD *)(a1 + 88);
              if (v12)
              {
                v13 = v12 - 1;
                *(_QWORD *)(a1 + 88) = v13;
                if (!v13)
                {
                  v14 = *(void (***)(_QWORD))(a1 + 64);
                  if (v14)
                  {
                    *(_QWORD *)(a1 + 64) = 0;
                    v14[2](v14);
                    _Block_release(v14);
                  }
                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    v15 = *(const void **)(a1 + 64);
                    if (v15)
                      _Block_release(v15);
                  }
                  free((void *)a1);
                }
              }
            }
            return v10;
          }
LABEL_12:
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v16 = *(_QWORD *)(a2 + 88);
            if (v16)
            {
              v17 = v16 - 1;
              *(_QWORD *)(a2 + 88) = v17;
              if (!v17)
              {
                v18 = *(void (***)(_QWORD))(a2 + 64);
                if (v18)
                {
                  *(_QWORD *)(a2 + 64) = 0;
                  v18[2](v18);
                  _Block_release(v18);
                }
                if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                {
                  v19 = *(const void **)(a2 + 64);
                  if (v19)
                    _Block_release(v19);
                }
                free((void *)a2);
              }
            }
          }
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      v20 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      v46 = "__nw_protocol_reset";
      if (!v20)
        v20 = "invalid";
      v47 = 2082;
      v48 = (void *)v20;
      v49 = 2048;
      v50 = a1;
      v21 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v22 = __nwlog_obj();
          v23 = type;
          if (!os_log_type_enabled(v22, type))
            goto LABEL_74;
          v24 = *(const char **)(a1 + 16);
          if (!v24)
            v24 = "invalid";
          *(_DWORD *)buf = 136446722;
          v46 = "__nw_protocol_reset";
          v47 = 2082;
          v48 = (void *)v24;
          v49 = 2048;
          v50 = a1;
          v25 = "%{public}s protocol %{public}s (%p) has invalid reset callback";
LABEL_73:
          _os_log_impl(&dword_182FBE000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }
        if (!v43)
        {
          v22 = __nwlog_obj();
          v23 = type;
          if (!os_log_type_enabled(v22, type))
            goto LABEL_74;
          v41 = *(const char **)(a1 + 16);
          if (!v41)
            v41 = "invalid";
          *(_DWORD *)buf = 136446722;
          v46 = "__nw_protocol_reset";
          v47 = 2082;
          v48 = (void *)v41;
          v49 = 2048;
          v50 = a1;
          v25 = "%{public}s protocol %{public}s (%p) has invalid reset callback, backtrace limit exceeded";
          goto LABEL_73;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v22 = __nwlog_obj();
        v23 = type;
        v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35)
            goto LABEL_74;
          v42 = *(const char **)(a1 + 16);
          if (!v42)
            v42 = "invalid";
          *(_DWORD *)buf = 136446722;
          v46 = "__nw_protocol_reset";
          v47 = 2082;
          v48 = (void *)v42;
          v49 = 2048;
          v50 = a1;
          v25 = "%{public}s protocol %{public}s (%p) has invalid reset callback, no backtrace";
          goto LABEL_73;
        }
        if (v35)
        {
          v36 = *(const char **)(a1 + 16);
          if (!v36)
            v36 = "invalid";
          *(_DWORD *)buf = 136446978;
          v46 = "__nw_protocol_reset";
          v47 = 2082;
          v48 = (void *)v36;
          v49 = 2048;
          v50 = a1;
          v51 = 2082;
          v52 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s protocol %{public}s (%p) has invalid reset callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_74:
      if (v21)
        free(v21);
      v10 = 0;
      if (v6 != &nw_protocol_ref_counted_handle)
        goto LABEL_13;
      goto LABEL_12;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "__nw_protocol_reset";
    v30 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "__nw_protocol_reset";
          v33 = "%{public}s called with null other_protocol";
LABEL_90:
          _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0xCu);
        }
      }
      else if (v43)
      {
        v39 = (char *)__nw_create_backtrace_string();
        v31 = __nwlog_obj();
        v32 = type;
        v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446466;
            v46 = "__nw_protocol_reset";
            v47 = 2082;
            v48 = v39;
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v39);
          goto LABEL_91;
        }
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "__nw_protocol_reset";
          v33 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_90;
        }
      }
      else
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "__nw_protocol_reset";
          v33 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }
LABEL_91:
    if (v30)
      free(v30);
    v10 = 0;
    goto LABEL_13;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v46 = "__nw_protocol_reset";
  v26 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "__nw_protocol_reset";
        v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
      }
    }
    else if (v43)
    {
      v37 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          v46 = "__nw_protocol_reset";
          v47 = 2082;
          v48 = v37;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v37);
        goto LABEL_85;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "__nw_protocol_reset";
        v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }
    else
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "__nw_protocol_reset";
        v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }
LABEL_85:
  if (v26)
    free(v26);
  return 0;
}

uint64_t nw_protocol_reset_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(_QWORD);
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  const void *v18;

  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v5 = 0;
  if (a2)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 256);
    if (v6)
    {
      v7 = *(void **)(a1 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a1 + 88);
        if (v8)
          *(_QWORD *)(a1 + 88) = v8 + 1;
      }
      if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v9 = *(_QWORD *)(a2 + 88);
        if (v9)
          *(_QWORD *)(a2 + 88) = v9 + 1;
        v5 = v6(a1, a2);
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          v11 = *(_QWORD *)(a2 + 88);
          if (v11)
          {
            v12 = v11 - 1;
            *(_QWORD *)(a2 + 88) = v12;
            if (!v12)
            {
              v13 = *(void (***)(_QWORD))(a2 + 64);
              if (v13)
              {
                *(_QWORD *)(a2 + 64) = 0;
                v13[2](v13);
                _Block_release(v13);
              }
              if ((*(_BYTE *)(a2 + 72) & 1) != 0)
              {
                v14 = *(const void **)(a2 + 64);
                if (v14)
                  _Block_release(v14);
              }
              free((void *)a2);
            }
          }
        }
      }
      else
      {
        v5 = v6(a1, a2);
      }
      if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        v15 = *(_QWORD *)(a1 + 88);
        if (v15)
        {
          v16 = v15 - 1;
          *(_QWORD *)(a1 + 88) = v16;
          if (!v16)
          {
            v17 = *(void (***)(_QWORD))(a1 + 64);
            if (v17)
            {
              *(_QWORD *)(a1 + 64) = 0;
              v17[2](v17);
              _Block_release(v17);
            }
            if ((*(_BYTE *)(a1 + 72) & 1) != 0)
            {
              v18 = *(const void **)(a1 + 64);
              if (v18)
                _Block_release(v18);
            }
            free((void *)a1);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t nw_protocol_reset_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 256) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

void nw_protocol_get_message_properties(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (**v13)(_QWORD);
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  const void *v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  const char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *backtrace_string;
  _BOOL4 v34;
  const char *v35;
  char *v36;
  _BOOL4 v37;
  char *v38;
  _BOOL4 v39;
  char *v40;
  _BOOL4 v41;
  const char *v42;
  const char *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint32_t v46;
  char v47;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  void *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  char *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = a2;
    v4 = (uint64_t)a1;
    v5 = (void *)a1[5];
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      v6 = a1[11];
      if (v6)
        a1[11] = v6 + 1;
    }
    if (a2)
    {
      v7 = *(void **)(a2 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a2 + 88);
        if (v8)
          *(_QWORD *)(a2 + 88) = v8 + 1;
      }
      if (a3)
      {
        v9 = a1[3];
        if (v9)
        {
          v10 = *(void (**)(_QWORD *, uint64_t))(v9 + 248);
          if (v10)
          {
            v10(a1, a2);
            goto LABEL_13;
          }
        }
        __nwlog_obj();
        v19 = *(const char **)(v4 + 16);
        *(_DWORD *)buf = 136446722;
        v50 = "__nw_protocol_get_message_properties";
        if (!v19)
          v19 = "invalid";
        v51 = 2082;
        v52 = (void *)v19;
        v53 = 2048;
        v54 = v4;
        v20 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v47 = 0;
        if (!__nwlog_fault(v20, &type, &v47))
          goto LABEL_108;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v21 = __nwlog_obj();
          v22 = type;
          if (!os_log_type_enabled(v21, type))
            goto LABEL_108;
          v23 = *(const char **)(v4 + 16);
          if (!v23)
            v23 = "invalid";
          *(_DWORD *)buf = 136446722;
          v50 = "__nw_protocol_get_message_properties";
          v51 = 2082;
          v52 = (void *)v23;
          v53 = 2048;
          v54 = v4;
          v24 = "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback";
LABEL_87:
          v44 = v21;
          v45 = v22;
          v46 = 32;
LABEL_107:
          _os_log_impl(&dword_182FBE000, v44, v45, v24, buf, v46);
          goto LABEL_108;
        }
        if (!v47)
        {
          v21 = __nwlog_obj();
          v22 = type;
          if (!os_log_type_enabled(v21, type))
            goto LABEL_108;
          v42 = *(const char **)(v4 + 16);
          if (!v42)
            v42 = "invalid";
          *(_DWORD *)buf = 136446722;
          v50 = "__nw_protocol_get_message_properties";
          v51 = 2082;
          v52 = (void *)v42;
          v53 = 2048;
          v54 = v4;
          v24 = "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, backtrace limit exceeded";
          goto LABEL_87;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v21 = __nwlog_obj();
        v22 = type;
        v34 = os_log_type_enabled(v21, type);
        if (!backtrace_string)
        {
          if (!v34)
            goto LABEL_108;
          v43 = *(const char **)(v4 + 16);
          if (!v43)
            v43 = "invalid";
          *(_DWORD *)buf = 136446722;
          v50 = "__nw_protocol_get_message_properties";
          v51 = 2082;
          v52 = (void *)v43;
          v53 = 2048;
          v54 = v4;
          v24 = "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, no backtrace";
          goto LABEL_87;
        }
        if (v34)
        {
          v35 = *(const char **)(v4 + 16);
          if (!v35)
            v35 = "invalid";
          *(_DWORD *)buf = 136446978;
          v50 = "__nw_protocol_get_message_properties";
          v51 = 2082;
          v52 = (void *)v35;
          v53 = 2048;
          v54 = v4;
          v55 = 2082;
          v56 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
LABEL_108:
        if (!v20)
          goto LABEL_13;
        goto LABEL_109;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_get_message_properties";
      v20 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v47 = 0;
      if (!__nwlog_fault(v20, &type, &v47))
        goto LABEL_108;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (!os_log_type_enabled(v31, type))
          goto LABEL_108;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_get_message_properties";
        v24 = "%{public}s called with null message_properties";
      }
      else if (v47)
      {
        v40 = (char *)__nw_create_backtrace_string();
        v31 = __nwlog_obj();
        v32 = type;
        v41 = os_log_type_enabled(v31, type);
        if (v40)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            v50 = "__nw_protocol_get_message_properties";
            v51 = 2082;
            v52 = v40;
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null message_properties, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v40);
          if (!v20)
          {
LABEL_13:
            if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
            {
              v15 = *(_QWORD *)(v3 + 88);
              if (v15)
              {
                v16 = v15 - 1;
                *(_QWORD *)(v3 + 88) = v16;
                if (!v16)
                {
                  v17 = *(void (***)(_QWORD))(v3 + 64);
                  if (v17)
                  {
                    *(_QWORD *)(v3 + 64) = 0;
                    v17[2](v17);
                    _Block_release(v17);
                  }
                  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
                  {
                    v18 = *(const void **)(v3 + 64);
                    if (v18)
                      _Block_release(v18);
                  }
LABEL_33:
                  free((void *)v3);
                }
              }
            }
LABEL_15:
            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
            {
              v11 = *(_QWORD *)(v4 + 88);
              if (v11)
              {
                v12 = v11 - 1;
                *(_QWORD *)(v4 + 88) = v12;
                if (!v12)
                {
                  v13 = *(void (***)(_QWORD))(v4 + 64);
                  if (v13)
                  {
                    *(_QWORD *)(v4 + 64) = 0;
                    v13[2](v13);
                    _Block_release(v13);
                  }
                  if ((*(_BYTE *)(v4 + 72) & 1) != 0)
                  {
                    v14 = *(const void **)(v4 + 64);
                    if (v14)
                      _Block_release(v14);
                  }
                  goto LABEL_25;
                }
              }
            }
            return;
          }
LABEL_109:
          free(v20);
          goto LABEL_13;
        }
        if (!v41)
          goto LABEL_108;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_get_message_properties";
        v24 = "%{public}s called with null message_properties, no backtrace";
      }
      else
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (!os_log_type_enabled(v31, type))
          goto LABEL_108;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_get_message_properties";
        v24 = "%{public}s called with null message_properties, backtrace limit exceeded";
      }
      v44 = v31;
      v45 = v32;
      v46 = 12;
      goto LABEL_107;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v50 = "__nw_protocol_get_message_properties";
    v3 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (__nwlog_fault((const char *)v3, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (!os_log_type_enabled(v28, type))
          goto LABEL_102;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_get_message_properties";
        v30 = "%{public}s called with null other_protocol";
        goto LABEL_101;
      }
      if (!v47)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (!os_log_type_enabled(v28, type))
          goto LABEL_102;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_get_message_properties";
        v30 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_101;
      }
      v38 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type;
      v39 = os_log_type_enabled(v28, type);
      if (v38)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "__nw_protocol_get_message_properties";
          v51 = 2082;
          v52 = v38;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v38);
        if (v3)
          goto LABEL_33;
        goto LABEL_15;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_get_message_properties";
        v30 = "%{public}s called with null other_protocol, no backtrace";
LABEL_101:
        _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
      }
    }
LABEL_102:
    if (!v3)
      goto LABEL_15;
    goto LABEL_33;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v50 = "__nw_protocol_get_message_properties";
  v4 = _os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v47 = 0;
  if (__nwlog_fault((const char *)v4, &type, &v47))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (!os_log_type_enabled(v25, type))
        goto LABEL_97;
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_get_message_properties";
      v27 = "%{public}s called with null protocol";
    }
    else if (v47)
    {
      v36 = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v37 = os_log_type_enabled(v25, type);
      if (v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "__nw_protocol_get_message_properties";
          v51 = 2082;
          v52 = v36;
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v36);
        if (v4)
          goto LABEL_25;
        return;
      }
      if (!v37)
        goto LABEL_97;
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_get_message_properties";
      v27 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (!os_log_type_enabled(v25, type))
        goto LABEL_97;
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_get_message_properties";
      v27 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v25, v26, v27, buf, 0xCu);
  }
LABEL_97:
  if (v4)
LABEL_25:
    free((void *)v4);
}

void nw_protocol_get_message_properties_quiet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(_QWORD);
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(_QWORD);
  const void *v17;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
    {
      if (a3)
      {
        if (a2)
        {
          v6 = *(void (**)(uint64_t, uint64_t))(v4 + 248);
          if (v6)
          {
            v7 = *(void **)(a1 + 40);
            if (v7 == &nw_protocol_ref_counted_handle)
            {
              v8 = *(_QWORD *)(a1 + 88);
              if (v8)
                *(_QWORD *)(a1 + 88) = v8 + 1;
            }
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              v9 = *(_QWORD *)(a2 + 88);
              if (v9)
                *(_QWORD *)(a2 + 88) = v9 + 1;
              v6(a1, a2);
              if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                v10 = *(_QWORD *)(a2 + 88);
                if (v10)
                {
                  v11 = v10 - 1;
                  *(_QWORD *)(a2 + 88) = v11;
                  if (!v11)
                  {
                    v12 = *(void (***)(_QWORD))(a2 + 64);
                    if (v12)
                    {
                      *(_QWORD *)(a2 + 64) = 0;
                      v12[2](v12);
                      _Block_release(v12);
                    }
                    if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                    {
                      v13 = *(const void **)(a2 + 64);
                      if (v13)
                        _Block_release(v13);
                    }
                    free((void *)a2);
                  }
                }
              }
            }
            else
            {
              v6(a1, a2);
            }
            if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v14 = *(_QWORD *)(a1 + 88);
              if (v14)
              {
                v15 = v14 - 1;
                *(_QWORD *)(a1 + 88) = v15;
                if (!v15)
                {
                  v16 = *(void (***)(_QWORD))(a1 + 64);
                  if (v16)
                  {
                    *(_QWORD *)(a1 + 64) = 0;
                    v16[2](v16);
                    _Block_release(v16);
                  }
                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    v17 = *(const void **)(a1 + 64);
                    if (v17)
                      _Block_release(v17);
                  }
                  free((void *)a1);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_get_message_properties_is_valid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
      LODWORD(v3) = *(_QWORD *)(v3 + 248) != 0;
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (!a2)
    LODWORD(v3) = 0;
  if (a3)
    return v3;
  else
    return 0;
}

uint64_t nw_protocol_copy_info(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  NSObject *v23;
  os_log_type_t v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  char *v28;
  _BOOL4 v29;
  char *v30;
  _BOOL4 v31;
  const char *v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint32_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(void **)(a1 + 40);
    if (v3 == &nw_protocol_ref_counted_handle)
    {
      v4 = *(_QWORD *)(a1 + 88);
      if (v4)
        *(_QWORD *)(a1 + 88) = v4 + 1;
    }
    if (a2)
    {
      v5 = *(_QWORD *)(a1 + 24);
      if (v5)
      {
        v6 = *(uint64_t (**)(uint64_t))(v5 + 224);
        if (v6)
        {
          v7 = v6(a1);
          if (v3 != &nw_protocol_ref_counted_handle)
            return v7;
          goto LABEL_9;
        }
      }
      __nwlog_obj();
      v13 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      v40 = "__nw_protocol_copy_info";
      if (!v13)
        v13 = "invalid";
      v41 = 2082;
      v42 = (void *)v13;
      v43 = 2048;
      v44 = a1;
      v14 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (__nwlog_fault(v14, &type, &v37))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v15 = __nwlog_obj();
          v16 = type;
          if (!os_log_type_enabled(v15, type))
            goto LABEL_76;
          v17 = *(const char **)(a1 + 16);
          if (!v17)
            v17 = "invalid";
          *(_DWORD *)buf = 136446722;
          v40 = "__nw_protocol_copy_info";
          v41 = 2082;
          v42 = (void *)v17;
          v43 = 2048;
          v44 = a1;
          v18 = "%{public}s protocol %{public}s (%p) has invalid copy_info callback";
LABEL_61:
          v34 = v15;
          v35 = v16;
          v36 = 32;
LABEL_75:
          _os_log_impl(&dword_182FBE000, v34, v35, v18, buf, v36);
          goto LABEL_76;
        }
        if (!v37)
        {
          v15 = __nwlog_obj();
          v16 = type;
          if (!os_log_type_enabled(v15, type))
            goto LABEL_76;
          v32 = *(const char **)(a1 + 16);
          if (!v32)
            v32 = "invalid";
          *(_DWORD *)buf = 136446722;
          v40 = "__nw_protocol_copy_info";
          v41 = 2082;
          v42 = (void *)v32;
          v43 = 2048;
          v44 = a1;
          v18 = "%{public}s protocol %{public}s (%p) has invalid copy_info callback, backtrace limit exceeded";
          goto LABEL_61;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v15 = __nwlog_obj();
        v16 = type;
        v26 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (!v26)
            goto LABEL_76;
          v33 = *(const char **)(a1 + 16);
          if (!v33)
            v33 = "invalid";
          *(_DWORD *)buf = 136446722;
          v40 = "__nw_protocol_copy_info";
          v41 = 2082;
          v42 = (void *)v33;
          v43 = 2048;
          v44 = a1;
          v18 = "%{public}s protocol %{public}s (%p) has invalid copy_info callback, no backtrace";
          goto LABEL_61;
        }
        if (v26)
        {
          v27 = *(const char **)(a1 + 16);
          if (!v27)
            v27 = "invalid";
          *(_DWORD *)buf = 136446978;
          v40 = "__nw_protocol_copy_info";
          v41 = 2082;
          v42 = (void *)v27;
          v43 = 2048;
          v44 = a1;
          v45 = 2082;
          v46 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s protocol %{public}s (%p) has invalid copy_info callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_76:
      if (!v14)
        goto LABEL_78;
      goto LABEL_77;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "__nw_protocol_copy_info";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v14, &type, &v37))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (!os_log_type_enabled(v23, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_copy_info";
      v18 = "%{public}s called with null type";
    }
    else if (v37)
    {
      v30 = (char *)__nw_create_backtrace_string();
      v23 = __nwlog_obj();
      v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "__nw_protocol_copy_info";
          v41 = 2082;
          v42 = v30;
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v30);
        if (!v14)
        {
LABEL_78:
          v7 = 0;
          if (v3 != &nw_protocol_ref_counted_handle)
            return v7;
LABEL_9:
          if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v9 = *(_QWORD *)(a1 + 88);
            if (v9)
            {
              v10 = v9 - 1;
              *(_QWORD *)(a1 + 88) = v10;
              if (!v10)
              {
                v11 = *(void (***)(_QWORD))(a1 + 64);
                if (v11)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v11[2](v11);
                  _Block_release(v11);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v12 = *(const void **)(a1 + 64);
                  if (v12)
                    _Block_release(v12);
                }
                free((void *)a1);
              }
            }
          }
          return v7;
        }
LABEL_77:
        free(v14);
        goto LABEL_78;
      }
      if (!v31)
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_copy_info";
      v18 = "%{public}s called with null type, no backtrace";
    }
    else
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (!os_log_type_enabled(v23, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_copy_info";
      v18 = "%{public}s called with null type, backtrace limit exceeded";
    }
    v34 = v23;
    v35 = v24;
    v36 = 12;
    goto LABEL_75;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v40 = "__nw_protocol_copy_info";
  v19 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v19, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "__nw_protocol_copy_info";
        v22 = "%{public}s called with null protocol";
LABEL_68:
        _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
      }
    }
    else if (v37)
    {
      v28 = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v29 = os_log_type_enabled(v20, type);
      if (v28)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "__nw_protocol_copy_info";
          v41 = 2082;
          v42 = v28;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v28);
        goto LABEL_69;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "__nw_protocol_copy_info";
        v22 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_68;
      }
    }
    else
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "__nw_protocol_copy_info";
        v22 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_68;
      }
    }
  }
LABEL_69:
  if (v19)
    free(v19);
  return 0;
}

uint64_t nw_protocol_copy_info_quiet(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  const void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *backtrace_string;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v4 = *(uint64_t (**)(uint64_t))(v3 + 224);
  if (!v4)
    return 0;
  v5 = *(void **)(a1 + 40);
  if (v5 == &nw_protocol_ref_counted_handle)
  {
    v6 = *(_QWORD *)(a1 + 88);
    if (v6)
      *(_QWORD *)(a1 + 88) = v6 + 1;
  }
  if (a2)
  {
    v7 = v4(a1);
    if (v5 != &nw_protocol_ref_counted_handle)
      return v7;
    goto LABEL_9;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v22 = "__nw_protocol_copy_info";
  v13 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v13, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v22 = "__nw_protocol_copy_info";
      v16 = "%{public}s called with null type";
LABEL_33:
      _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
      goto LABEL_34;
    }
    if (!v19)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v22 = "__nw_protocol_copy_info";
      v16 = "%{public}s called with null type, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v18 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v18)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v22 = "__nw_protocol_copy_info";
      v16 = "%{public}s called with null type, no backtrace";
      goto LABEL_33;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v22 = "__nw_protocol_copy_info";
      v23 = 2082;
      v24 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
  }
LABEL_34:
  if (v13)
    free(v13);
  v7 = 0;
  if (v5 == &nw_protocol_ref_counted_handle)
  {
LABEL_9:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      v9 = *(_QWORD *)(a1 + 88);
      if (v9)
      {
        v10 = v9 - 1;
        *(_QWORD *)(a1 + 88) = v10;
        if (!v10)
        {
          v11 = *(void (***)(_QWORD))(a1 + 64);
          if (v11)
          {
            *(_QWORD *)(a1 + 64) = 0;
            v11[2](v11);
            _Block_release(v11);
          }
          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            v12 = *(const void **)(a1 + 64);
            if (v12)
              _Block_release(v12);
          }
          free((void *)a1);
        }
      }
    }
  }
  return v7;
}

BOOL nw_protocol_copy_info_is_valid(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    return v1 && *(_QWORD *)(v1 + 224) != 0;
  }
  return result;
}

uint64_t nw_protocol_supports_external_data(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  const void *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *v22;
  _BOOL4 v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  const char *v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "__nw_protocol_supports_external_data";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_supports_external_data";
          v21 = "%{public}s called with null protocol";
LABEL_59:
          _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v19 = __nwlog_obj();
        v20 = type;
        v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            v32 = "__nw_protocol_supports_external_data";
            v33 = 2082;
            v34 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_60;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_supports_external_data";
          v21 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_59;
        }
      }
      else
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_supports_external_data";
          v21 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_59;
        }
      }
    }
LABEL_60:
    if (v18)
      free(v18);
    return 0;
  }
  v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
      *(_QWORD *)(a1 + 88) = v3 + 1;
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = *(uint64_t (**)(uint64_t))(v4 + 176);
    if (v5)
    {
      v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle)
        return v6;
      goto LABEL_8;
    }
  }
  __nwlog_obj();
  v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  v32 = "__nw_protocol_supports_external_data";
  if (!v12)
    v12 = "invalid";
  v33 = 2082;
  v34 = (void *)v12;
  v35 = 2048;
  v36 = a1;
  v13 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (!__nwlog_fault(v13, &type, &v29))
    goto LABEL_51;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_51;
    v16 = *(const char **)(a1 + 16);
    if (!v16)
      v16 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_supports_external_data";
    v33 = 2082;
    v34 = (void *)v16;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid supports_external_data callback";
LABEL_50:
    _os_log_impl(&dword_182FBE000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }
  if (!v29)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_51;
    v27 = *(const char **)(a1 + 16);
    if (!v27)
      v27 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_supports_external_data";
    v33 = 2082;
    v34 = (void *)v27;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid supports_external_data callback, backtrace limit exceeded";
    goto LABEL_50;
  }
  v22 = (char *)__nw_create_backtrace_string();
  v14 = __nwlog_obj();
  v15 = type;
  v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23)
      goto LABEL_51;
    v28 = *(const char **)(a1 + 16);
    if (!v28)
      v28 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_supports_external_data";
    v33 = 2082;
    v34 = (void *)v28;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid supports_external_data callback, no backtrace";
    goto LABEL_50;
  }
  if (v23)
  {
    v24 = *(const char **)(a1 + 16);
    if (!v24)
      v24 = "invalid";
    *(_DWORD *)buf = 136446978;
    v32 = "__nw_protocol_supports_external_data";
    v33 = 2082;
    v34 = (void *)v24;
    v35 = 2048;
    v36 = a1;
    v37 = 2082;
    v38 = v22;
    _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s protocol %{public}s (%p) has invalid supports_external_data callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v22);
LABEL_51:
  if (v13)
    free(v13);
  v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      v8 = *(_QWORD *)(a1 + 88);
      if (v8)
      {
        v9 = v8 - 1;
        *(_QWORD *)(a1 + 88) = v9;
        if (!v9)
        {
          v10 = *(void (***)(_QWORD))(a1 + 64);
          if (v10)
          {
            *(_QWORD *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            v11 = *(const void **)(a1 + 64);
            if (v11)
              _Block_release(v11);
          }
          free((void *)a1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_supports_external_data_quiet(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (**v9)(_QWORD);
  const void *v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    return 0;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 176);
  if (!v3)
    return 0;
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
    return v3(a1);
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
    *(_QWORD *)(a1 + 88) = v5 + 1;
  v6 = v3(a1);
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    v7 = *(_QWORD *)(a1 + 88);
    if (v7)
    {
      v8 = v7 - 1;
      *(_QWORD *)(a1 + 88) = v8;
      if (!v8)
      {
        v9 = *(void (***)(_QWORD))(a1 + 64);
        if (v9)
        {
          *(_QWORD *)(a1 + 64) = 0;
          v9[2](v9);
          _Block_release(v9);
        }
        if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        {
          v10 = *(const void **)(a1 + 64);
          if (v10)
            _Block_release(v10);
        }
        free((void *)a1);
      }
    }
  }
  return v6;
}

BOOL nw_protocol_supports_external_data_is_valid(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    return v1 && *(_QWORD *)(v1 + 176) != 0;
  }
  return result;
}

uint64_t nw_protocol_waiting_for_output(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(_QWORD);
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(_QWORD);
  const void *v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *backtrace_string;
  _BOOL4 v35;
  const char *v36;
  char *v37;
  _BOOL4 v38;
  char *v39;
  _BOOL4 v40;
  const char *v41;
  const char *v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *(void **)(a1 + 40);
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      v5 = *(_QWORD *)(a1 + 88);
      if (v5)
        *(_QWORD *)(a1 + 88) = v5 + 1;
    }
    if (a2)
    {
      v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        v7 = *(_QWORD *)(a2 + 88);
        if (v7)
          *(_QWORD *)(a2 + 88) = v7 + 1;
      }
      v8 = *(_QWORD *)(a1 + 24);
      if (v8)
      {
        v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 216);
        if (v9)
        {
          v10 = v9(a1, a2);
          if (v6 != &nw_protocol_ref_counted_handle)
          {
LABEL_13:
            if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v12 = *(_QWORD *)(a1 + 88);
              if (v12)
              {
                v13 = v12 - 1;
                *(_QWORD *)(a1 + 88) = v13;
                if (!v13)
                {
                  v14 = *(void (***)(_QWORD))(a1 + 64);
                  if (v14)
                  {
                    *(_QWORD *)(a1 + 64) = 0;
                    v14[2](v14);
                    _Block_release(v14);
                  }
                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    v15 = *(const void **)(a1 + 64);
                    if (v15)
                      _Block_release(v15);
                  }
                  free((void *)a1);
                }
              }
            }
            return v10;
          }
LABEL_12:
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v16 = *(_QWORD *)(a2 + 88);
            if (v16)
            {
              v17 = v16 - 1;
              *(_QWORD *)(a2 + 88) = v17;
              if (!v17)
              {
                v18 = *(void (***)(_QWORD))(a2 + 64);
                if (v18)
                {
                  *(_QWORD *)(a2 + 64) = 0;
                  v18[2](v18);
                  _Block_release(v18);
                }
                if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                {
                  v19 = *(const void **)(a2 + 64);
                  if (v19)
                    _Block_release(v19);
                }
                free((void *)a2);
              }
            }
          }
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      v20 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      v46 = "__nw_protocol_waiting_for_output";
      if (!v20)
        v20 = "invalid";
      v47 = 2082;
      v48 = (void *)v20;
      v49 = 2048;
      v50 = a1;
      v21 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v22 = __nwlog_obj();
          v23 = type;
          if (!os_log_type_enabled(v22, type))
            goto LABEL_74;
          v24 = *(const char **)(a1 + 16);
          if (!v24)
            v24 = "invalid";
          *(_DWORD *)buf = 136446722;
          v46 = "__nw_protocol_waiting_for_output";
          v47 = 2082;
          v48 = (void *)v24;
          v49 = 2048;
          v50 = a1;
          v25 = "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback";
LABEL_73:
          _os_log_impl(&dword_182FBE000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }
        if (!v43)
        {
          v22 = __nwlog_obj();
          v23 = type;
          if (!os_log_type_enabled(v22, type))
            goto LABEL_74;
          v41 = *(const char **)(a1 + 16);
          if (!v41)
            v41 = "invalid";
          *(_DWORD *)buf = 136446722;
          v46 = "__nw_protocol_waiting_for_output";
          v47 = 2082;
          v48 = (void *)v41;
          v49 = 2048;
          v50 = a1;
          v25 = "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback, backtrace limit exceeded";
          goto LABEL_73;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v22 = __nwlog_obj();
        v23 = type;
        v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35)
            goto LABEL_74;
          v42 = *(const char **)(a1 + 16);
          if (!v42)
            v42 = "invalid";
          *(_DWORD *)buf = 136446722;
          v46 = "__nw_protocol_waiting_for_output";
          v47 = 2082;
          v48 = (void *)v42;
          v49 = 2048;
          v50 = a1;
          v25 = "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback, no backtrace";
          goto LABEL_73;
        }
        if (v35)
        {
          v36 = *(const char **)(a1 + 16);
          if (!v36)
            v36 = "invalid";
          *(_DWORD *)buf = 136446978;
          v46 = "__nw_protocol_waiting_for_output";
          v47 = 2082;
          v48 = (void *)v36;
          v49 = 2048;
          v50 = a1;
          v51 = 2082;
          v52 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_74:
      if (v21)
        free(v21);
      v10 = 0;
      if (v6 != &nw_protocol_ref_counted_handle)
        goto LABEL_13;
      goto LABEL_12;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "__nw_protocol_waiting_for_output";
    v30 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "__nw_protocol_waiting_for_output";
          v33 = "%{public}s called with null other_protocol";
LABEL_90:
          _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0xCu);
        }
      }
      else if (v43)
      {
        v39 = (char *)__nw_create_backtrace_string();
        v31 = __nwlog_obj();
        v32 = type;
        v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446466;
            v46 = "__nw_protocol_waiting_for_output";
            v47 = 2082;
            v48 = v39;
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v39);
          goto LABEL_91;
        }
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "__nw_protocol_waiting_for_output";
          v33 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_90;
        }
      }
      else
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "__nw_protocol_waiting_for_output";
          v33 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }
LABEL_91:
    if (v30)
      free(v30);
    v10 = 0;
    goto LABEL_13;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v46 = "__nw_protocol_waiting_for_output";
  v26 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "__nw_protocol_waiting_for_output";
        v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
      }
    }
    else if (v43)
    {
      v37 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          v46 = "__nw_protocol_waiting_for_output";
          v47 = 2082;
          v48 = v37;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v37);
        goto LABEL_85;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "__nw_protocol_waiting_for_output";
        v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }
    else
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "__nw_protocol_waiting_for_output";
        v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }
LABEL_85:
  if (v26)
    free(v26);
  return 0;
}

uint64_t nw_protocol_waiting_for_output_quiet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(_QWORD);
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  const void *v18;

  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v5 = 0;
  if (a2)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 216);
    if (v6)
    {
      v7 = *(void **)(a1 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a1 + 88);
        if (v8)
          *(_QWORD *)(a1 + 88) = v8 + 1;
      }
      if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v9 = *(_QWORD *)(a2 + 88);
        if (v9)
          *(_QWORD *)(a2 + 88) = v9 + 1;
        v5 = v6(a1, a2);
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          v11 = *(_QWORD *)(a2 + 88);
          if (v11)
          {
            v12 = v11 - 1;
            *(_QWORD *)(a2 + 88) = v12;
            if (!v12)
            {
              v13 = *(void (***)(_QWORD))(a2 + 64);
              if (v13)
              {
                *(_QWORD *)(a2 + 64) = 0;
                v13[2](v13);
                _Block_release(v13);
              }
              if ((*(_BYTE *)(a2 + 72) & 1) != 0)
              {
                v14 = *(const void **)(a2 + 64);
                if (v14)
                  _Block_release(v14);
              }
              free((void *)a2);
            }
          }
        }
      }
      else
      {
        v5 = v6(a1, a2);
      }
      if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        v15 = *(_QWORD *)(a1 + 88);
        if (v15)
        {
          v16 = v15 - 1;
          *(_QWORD *)(a1 + 88) = v16;
          if (!v16)
          {
            v17 = *(void (***)(_QWORD))(a1 + 64);
            if (v17)
            {
              *(_QWORD *)(a1 + 64) = 0;
              v17[2](v17);
              _Block_release(v17);
            }
            if ((*(_BYTE *)(a1 + 72) & 1) != 0)
            {
              v18 = *(const void **)(a1 + 64);
              if (v18)
                _Block_release(v18);
            }
            free((void *)a1);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t nw_protocol_waiting_for_output_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 216) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

uint64_t nw_protocol_register_notification(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void (**v19)(_QWORD);
  const void *v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  NSObject *v35;
  os_log_type_t v36;
  char *backtrace_string;
  _BOOL4 v38;
  const char *v39;
  char *v40;
  _BOOL4 v41;
  char *v42;
  _BOOL4 v43;
  char *v44;
  _BOOL4 v45;
  const char *v46;
  const char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint32_t v50;
  char v51;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  char *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = *(void **)(a1 + 40);
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      v6 = *(_QWORD *)(a1 + 88);
      if (v6)
        *(_QWORD *)(a1 + 88) = v6 + 1;
    }
    if (a2)
    {
      v7 = *(void **)(a2 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a2 + 88);
        if (v8)
          *(_QWORD *)(a2 + 88) = v8 + 1;
      }
      if (a3)
      {
        v9 = *(_QWORD *)(a1 + 24);
        if (v9)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 144);
          if (v10)
          {
            v11 = v10(a1, a2);
            if (v7 == &nw_protocol_ref_counted_handle)
            {
LABEL_13:
              if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                v17 = *(_QWORD *)(a2 + 88);
                if (v17)
                {
                  v18 = v17 - 1;
                  *(_QWORD *)(a2 + 88) = v18;
                  if (!v18)
                  {
                    v19 = *(void (***)(_QWORD))(a2 + 64);
                    if (v19)
                    {
                      *(_QWORD *)(a2 + 64) = 0;
                      v19[2](v19);
                      _Block_release(v19);
                    }
                    if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                    {
                      v20 = *(const void **)(a2 + 64);
                      if (v20)
                        _Block_release(v20);
                    }
                    free((void *)a2);
                  }
                }
              }
            }
LABEL_14:
            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v13 = *(_QWORD *)(a1 + 88);
              if (v13)
              {
                v14 = v13 - 1;
                *(_QWORD *)(a1 + 88) = v14;
                if (!v14)
                {
                  v15 = *(void (***)(_QWORD))(a1 + 64);
                  if (v15)
                  {
                    *(_QWORD *)(a1 + 64) = 0;
                    v15[2](v15);
                    _Block_release(v15);
                  }
                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    v16 = *(const void **)(a1 + 64);
                    if (v16)
                      _Block_release(v16);
                  }
                  free((void *)a1);
                }
              }
            }
            return v11;
          }
        }
        __nwlog_obj();
        v21 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        v54 = "__nw_protocol_register_notification";
        if (!v21)
          v21 = "invalid";
        v55 = 2082;
        v56 = (void *)v21;
        v57 = 2048;
        v58 = a1;
        v22 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (__nwlog_fault(v22, &type, &v51))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v23 = __nwlog_obj();
            v24 = type;
            if (!os_log_type_enabled(v23, type))
              goto LABEL_107;
            v25 = *(const char **)(a1 + 16);
            if (!v25)
              v25 = "invalid";
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_register_notification";
            v55 = 2082;
            v56 = (void *)v25;
            v57 = 2048;
            v58 = a1;
            v26 = "%{public}s protocol %{public}s (%p) has invalid register_notification callback";
LABEL_84:
            v48 = v23;
            v49 = v24;
            v50 = 32;
LABEL_106:
            _os_log_impl(&dword_182FBE000, v48, v49, v26, buf, v50);
            goto LABEL_107;
          }
          if (!v51)
          {
            v23 = __nwlog_obj();
            v24 = type;
            if (!os_log_type_enabled(v23, type))
              goto LABEL_107;
            v46 = *(const char **)(a1 + 16);
            if (!v46)
              v46 = "invalid";
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_register_notification";
            v55 = 2082;
            v56 = (void *)v46;
            v57 = 2048;
            v58 = a1;
            v26 = "%{public}s protocol %{public}s (%p) has invalid register_notification callback, backtrace limit exceeded";
            goto LABEL_84;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v23 = __nwlog_obj();
          v24 = type;
          v38 = os_log_type_enabled(v23, type);
          if (!backtrace_string)
          {
            if (!v38)
              goto LABEL_107;
            v47 = *(const char **)(a1 + 16);
            if (!v47)
              v47 = "invalid";
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_register_notification";
            v55 = 2082;
            v56 = (void *)v47;
            v57 = 2048;
            v58 = a1;
            v26 = "%{public}s protocol %{public}s (%p) has invalid register_notification callback, no backtrace";
            goto LABEL_84;
          }
          if (v38)
          {
            v39 = *(const char **)(a1 + 16);
            if (!v39)
              v39 = "invalid";
            *(_DWORD *)buf = 136446978;
            v54 = "__nw_protocol_register_notification";
            v55 = 2082;
            v56 = (void *)v39;
            v57 = 2048;
            v58 = a1;
            v59 = 2082;
            v60 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s protocol %{public}s (%p) has invalid register_notification callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
        }
LABEL_107:
        if (!v22)
          goto LABEL_109;
        goto LABEL_108;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v54 = "__nw_protocol_register_notification";
      v22 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v51 = 0;
      if (!__nwlog_fault(v22, &type, &v51))
        goto LABEL_107;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v35 = __nwlog_obj();
        v36 = type;
        if (!os_log_type_enabled(v35, type))
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_register_notification";
        v26 = "%{public}s called with null type";
      }
      else if (v51)
      {
        v44 = (char *)__nw_create_backtrace_string();
        v35 = __nwlog_obj();
        v36 = type;
        v45 = os_log_type_enabled(v35, type);
        if (v44)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            v54 = "__nw_protocol_register_notification";
            v55 = 2082;
            v56 = v44;
            _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v44);
          if (!v22)
          {
LABEL_109:
            v11 = 0;
            if (v7 == &nw_protocol_ref_counted_handle)
              goto LABEL_13;
            goto LABEL_14;
          }
LABEL_108:
          free(v22);
          goto LABEL_109;
        }
        if (!v45)
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_register_notification";
        v26 = "%{public}s called with null type, no backtrace";
      }
      else
      {
        v35 = __nwlog_obj();
        v36 = type;
        if (!os_log_type_enabled(v35, type))
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_register_notification";
        v26 = "%{public}s called with null type, backtrace limit exceeded";
      }
      v48 = v35;
      v49 = v36;
      v50 = 12;
      goto LABEL_106;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v54 = "__nw_protocol_register_notification";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (__nwlog_fault(v31, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v32 = __nwlog_obj();
        v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "__nw_protocol_register_notification";
          v34 = "%{public}s called with null other_protocol";
LABEL_99:
          _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
        }
      }
      else if (v51)
      {
        v42 = (char *)__nw_create_backtrace_string();
        v32 = __nwlog_obj();
        v33 = type;
        v43 = os_log_type_enabled(v32, type);
        if (v42)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136446466;
            v54 = "__nw_protocol_register_notification";
            v55 = 2082;
            v56 = v42;
            _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v42);
          goto LABEL_100;
        }
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v54 = "__nw_protocol_register_notification";
          v34 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_99;
        }
      }
      else
      {
        v32 = __nwlog_obj();
        v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "__nw_protocol_register_notification";
          v34 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_99;
        }
      }
    }
LABEL_100:
    if (v31)
      free(v31);
    v11 = 0;
    goto LABEL_14;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v54 = "__nw_protocol_register_notification";
  v27 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v51 = 0;
  if (__nwlog_fault(v27, &type, &v51))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_register_notification";
        v30 = "%{public}s called with null protocol";
LABEL_93:
        _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
      }
    }
    else if (v51)
    {
      v40 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type;
      v41 = os_log_type_enabled(v28, type);
      if (v40)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          v54 = "__nw_protocol_register_notification";
          v55 = 2082;
          v56 = v40;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v40);
        goto LABEL_94;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_register_notification";
        v30 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }
    }
    else
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_register_notification";
        v30 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }
    }
  }
LABEL_94:
  if (v27)
    free(v27);
  return 0;
}

uint64_t nw_protocol_unregister_notification(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void (**v19)(_QWORD);
  const void *v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  NSObject *v35;
  os_log_type_t v36;
  char *backtrace_string;
  _BOOL4 v38;
  const char *v39;
  char *v40;
  _BOOL4 v41;
  char *v42;
  _BOOL4 v43;
  char *v44;
  _BOOL4 v45;
  const char *v46;
  const char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint32_t v50;
  char v51;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  char *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = *(void **)(a1 + 40);
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      v6 = *(_QWORD *)(a1 + 88);
      if (v6)
        *(_QWORD *)(a1 + 88) = v6 + 1;
    }
    if (a2)
    {
      v7 = *(void **)(a2 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a2 + 88);
        if (v8)
          *(_QWORD *)(a2 + 88) = v8 + 1;
      }
      if (a3)
      {
        v9 = *(_QWORD *)(a1 + 24);
        if (v9)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 152);
          if (v10)
          {
            v11 = v10(a1, a2);
            if (v7 == &nw_protocol_ref_counted_handle)
            {
LABEL_13:
              if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                v17 = *(_QWORD *)(a2 + 88);
                if (v17)
                {
                  v18 = v17 - 1;
                  *(_QWORD *)(a2 + 88) = v18;
                  if (!v18)
                  {
                    v19 = *(void (***)(_QWORD))(a2 + 64);
                    if (v19)
                    {
                      *(_QWORD *)(a2 + 64) = 0;
                      v19[2](v19);
                      _Block_release(v19);
                    }
                    if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                    {
                      v20 = *(const void **)(a2 + 64);
                      if (v20)
                        _Block_release(v20);
                    }
                    free((void *)a2);
                  }
                }
              }
            }
LABEL_14:
            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v13 = *(_QWORD *)(a1 + 88);
              if (v13)
              {
                v14 = v13 - 1;
                *(_QWORD *)(a1 + 88) = v14;
                if (!v14)
                {
                  v15 = *(void (***)(_QWORD))(a1 + 64);
                  if (v15)
                  {
                    *(_QWORD *)(a1 + 64) = 0;
                    v15[2](v15);
                    _Block_release(v15);
                  }
                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    v16 = *(const void **)(a1 + 64);
                    if (v16)
                      _Block_release(v16);
                  }
                  free((void *)a1);
                }
              }
            }
            return v11;
          }
        }
        __nwlog_obj();
        v21 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        v54 = "__nw_protocol_unregister_notification";
        if (!v21)
          v21 = "invalid";
        v55 = 2082;
        v56 = (void *)v21;
        v57 = 2048;
        v58 = a1;
        v22 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (__nwlog_fault(v22, &type, &v51))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v23 = __nwlog_obj();
            v24 = type;
            if (!os_log_type_enabled(v23, type))
              goto LABEL_107;
            v25 = *(const char **)(a1 + 16);
            if (!v25)
              v25 = "invalid";
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_unregister_notification";
            v55 = 2082;
            v56 = (void *)v25;
            v57 = 2048;
            v58 = a1;
            v26 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback";
LABEL_84:
            v48 = v23;
            v49 = v24;
            v50 = 32;
LABEL_106:
            _os_log_impl(&dword_182FBE000, v48, v49, v26, buf, v50);
            goto LABEL_107;
          }
          if (!v51)
          {
            v23 = __nwlog_obj();
            v24 = type;
            if (!os_log_type_enabled(v23, type))
              goto LABEL_107;
            v46 = *(const char **)(a1 + 16);
            if (!v46)
              v46 = "invalid";
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_unregister_notification";
            v55 = 2082;
            v56 = (void *)v46;
            v57 = 2048;
            v58 = a1;
            v26 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, backtrace limit exceeded";
            goto LABEL_84;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v23 = __nwlog_obj();
          v24 = type;
          v38 = os_log_type_enabled(v23, type);
          if (!backtrace_string)
          {
            if (!v38)
              goto LABEL_107;
            v47 = *(const char **)(a1 + 16);
            if (!v47)
              v47 = "invalid";
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_unregister_notification";
            v55 = 2082;
            v56 = (void *)v47;
            v57 = 2048;
            v58 = a1;
            v26 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, no backtrace";
            goto LABEL_84;
          }
          if (v38)
          {
            v39 = *(const char **)(a1 + 16);
            if (!v39)
              v39 = "invalid";
            *(_DWORD *)buf = 136446978;
            v54 = "__nw_protocol_unregister_notification";
            v55 = 2082;
            v56 = (void *)v39;
            v57 = 2048;
            v58 = a1;
            v59 = 2082;
            v60 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
        }
LABEL_107:
        if (!v22)
          goto LABEL_109;
        goto LABEL_108;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v54 = "__nw_protocol_unregister_notification";
      v22 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v51 = 0;
      if (!__nwlog_fault(v22, &type, &v51))
        goto LABEL_107;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v35 = __nwlog_obj();
        v36 = type;
        if (!os_log_type_enabled(v35, type))
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_unregister_notification";
        v26 = "%{public}s called with null type";
      }
      else if (v51)
      {
        v44 = (char *)__nw_create_backtrace_string();
        v35 = __nwlog_obj();
        v36 = type;
        v45 = os_log_type_enabled(v35, type);
        if (v44)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            v54 = "__nw_protocol_unregister_notification";
            v55 = 2082;
            v56 = v44;
            _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v44);
          if (!v22)
          {
LABEL_109:
            v11 = 0;
            if (v7 == &nw_protocol_ref_counted_handle)
              goto LABEL_13;
            goto LABEL_14;
          }
LABEL_108:
          free(v22);
          goto LABEL_109;
        }
        if (!v45)
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_unregister_notification";
        v26 = "%{public}s called with null type, no backtrace";
      }
      else
      {
        v35 = __nwlog_obj();
        v36 = type;
        if (!os_log_type_enabled(v35, type))
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_unregister_notification";
        v26 = "%{public}s called with null type, backtrace limit exceeded";
      }
      v48 = v35;
      v49 = v36;
      v50 = 12;
      goto LABEL_106;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v54 = "__nw_protocol_unregister_notification";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (__nwlog_fault(v31, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v32 = __nwlog_obj();
        v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "__nw_protocol_unregister_notification";
          v34 = "%{public}s called with null other_protocol";
LABEL_99:
          _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
        }
      }
      else if (v51)
      {
        v42 = (char *)__nw_create_backtrace_string();
        v32 = __nwlog_obj();
        v33 = type;
        v43 = os_log_type_enabled(v32, type);
        if (v42)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136446466;
            v54 = "__nw_protocol_unregister_notification";
            v55 = 2082;
            v56 = v42;
            _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v42);
          goto LABEL_100;
        }
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v54 = "__nw_protocol_unregister_notification";
          v34 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_99;
        }
      }
      else
      {
        v32 = __nwlog_obj();
        v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "__nw_protocol_unregister_notification";
          v34 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_99;
        }
      }
    }
LABEL_100:
    if (v31)
      free(v31);
    v11 = 0;
    goto LABEL_14;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v54 = "__nw_protocol_unregister_notification";
  v27 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v51 = 0;
  if (__nwlog_fault(v27, &type, &v51))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_unregister_notification";
        v30 = "%{public}s called with null protocol";
LABEL_93:
        _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
      }
    }
    else if (v51)
    {
      v40 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type;
      v41 = os_log_type_enabled(v28, type);
      if (v40)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          v54 = "__nw_protocol_unregister_notification";
          v55 = 2082;
          v56 = v40;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v40);
        goto LABEL_94;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_unregister_notification";
        v30 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }
    }
    else
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_unregister_notification";
        v30 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }
    }
  }
LABEL_94:
  if (v27)
    free(v27);
  return 0;
}

uint64_t nw_protocol_register_notification_quiet(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void (**v19)(_QWORD);
  const void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    return 0;
  v6 = 0;
  if (a2)
  {
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 144);
    if (v7)
    {
      v8 = *(void **)(a1 + 40);
      if (v8 == &nw_protocol_ref_counted_handle)
      {
        v9 = *(_QWORD *)(a1 + 88);
        if (v9)
          *(_QWORD *)(a1 + 88) = v9 + 1;
      }
      v10 = *(void **)(a2 + 40);
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        v11 = *(_QWORD *)(a2 + 88);
        if (v11)
          *(_QWORD *)(a2 + 88) = v11 + 1;
      }
      if (a3)
      {
        v6 = v7(a1, a2);
        if (v10 != &nw_protocol_ref_counted_handle)
        {
LABEL_14:
          if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v17 = *(_QWORD *)(a1 + 88);
            if (v17)
            {
              v18 = v17 - 1;
              *(_QWORD *)(a1 + 88) = v18;
              if (!v18)
              {
                v19 = *(void (***)(_QWORD))(a1 + 64);
                if (v19)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v19[2](v19);
                  _Block_release(v19);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v20 = *(const void **)(a1 + 64);
                  if (v20)
                    _Block_release(v20);
                }
                free((void *)a1);
              }
            }
          }
          return v6;
        }
LABEL_13:
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          v13 = *(_QWORD *)(a2 + 88);
          if (v13)
          {
            v14 = v13 - 1;
            *(_QWORD *)(a2 + 88) = v14;
            if (!v14)
            {
              v15 = *(void (***)(_QWORD))(a2 + 64);
              if (v15)
              {
                *(_QWORD *)(a2 + 64) = 0;
                v15[2](v15);
                _Block_release(v15);
              }
              if ((*(_BYTE *)(a2 + 72) & 1) != 0)
              {
                v16 = *(const void **)(a2 + 64);
                if (v16)
                  _Block_release(v16);
              }
              free((void *)a2);
            }
          }
        }
        goto LABEL_14;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v30 = "__nw_protocol_register_notification";
      v21 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v27 = 0;
      if (__nwlog_fault(v21, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v22 = __nwlog_obj();
          v23 = type;
          if (!os_log_type_enabled(v22, type))
            goto LABEL_48;
          *(_DWORD *)buf = 136446210;
          v30 = "__nw_protocol_register_notification";
          v24 = "%{public}s called with null type";
LABEL_47:
          _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
          goto LABEL_48;
        }
        if (!v27)
        {
          v22 = __nwlog_obj();
          v23 = type;
          if (!os_log_type_enabled(v22, type))
            goto LABEL_48;
          *(_DWORD *)buf = 136446210;
          v30 = "__nw_protocol_register_notification";
          v24 = "%{public}s called with null type, backtrace limit exceeded";
          goto LABEL_47;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v22 = __nwlog_obj();
        v23 = type;
        v26 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v26)
            goto LABEL_48;
          *(_DWORD *)buf = 136446210;
          v30 = "__nw_protocol_register_notification";
          v24 = "%{public}s called with null type, no backtrace";
          goto LABEL_47;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "__nw_protocol_register_notification";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
      }
LABEL_48:
      if (v21)
        free(v21);
      v6 = 0;
      if (v10 != &nw_protocol_ref_counted_handle)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  return v6;
}

uint64_t nw_protocol_register_notification_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 144) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

uint64_t nw_protocol_unregister_notification_quiet(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void (**v19)(_QWORD);
  const void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    return 0;
  v6 = 0;
  if (a2)
  {
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 152);
    if (v7)
    {
      v8 = *(void **)(a1 + 40);
      if (v8 == &nw_protocol_ref_counted_handle)
      {
        v9 = *(_QWORD *)(a1 + 88);
        if (v9)
          *(_QWORD *)(a1 + 88) = v9 + 1;
      }
      v10 = *(void **)(a2 + 40);
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        v11 = *(_QWORD *)(a2 + 88);
        if (v11)
          *(_QWORD *)(a2 + 88) = v11 + 1;
      }
      if (a3)
      {
        v6 = v7(a1, a2);
        if (v10 != &nw_protocol_ref_counted_handle)
        {
LABEL_14:
          if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            v17 = *(_QWORD *)(a1 + 88);
            if (v17)
            {
              v18 = v17 - 1;
              *(_QWORD *)(a1 + 88) = v18;
              if (!v18)
              {
                v19 = *(void (***)(_QWORD))(a1 + 64);
                if (v19)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  v19[2](v19);
                  _Block_release(v19);
                }
                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  v20 = *(const void **)(a1 + 64);
                  if (v20)
                    _Block_release(v20);
                }
                free((void *)a1);
              }
            }
          }
          return v6;
        }
LABEL_13:
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          v13 = *(_QWORD *)(a2 + 88);
          if (v13)
          {
            v14 = v13 - 1;
            *(_QWORD *)(a2 + 88) = v14;
            if (!v14)
            {
              v15 = *(void (***)(_QWORD))(a2 + 64);
              if (v15)
              {
                *(_QWORD *)(a2 + 64) = 0;
                v15[2](v15);
                _Block_release(v15);
              }
              if ((*(_BYTE *)(a2 + 72) & 1) != 0)
              {
                v16 = *(const void **)(a2 + 64);
                if (v16)
                  _Block_release(v16);
              }
              free((void *)a2);
            }
          }
        }
        goto LABEL_14;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v30 = "__nw_protocol_unregister_notification";
      v21 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v27 = 0;
      if (__nwlog_fault(v21, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v22 = __nwlog_obj();
          v23 = type;
          if (!os_log_type_enabled(v22, type))
            goto LABEL_48;
          *(_DWORD *)buf = 136446210;
          v30 = "__nw_protocol_unregister_notification";
          v24 = "%{public}s called with null type";
LABEL_47:
          _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
          goto LABEL_48;
        }
        if (!v27)
        {
          v22 = __nwlog_obj();
          v23 = type;
          if (!os_log_type_enabled(v22, type))
            goto LABEL_48;
          *(_DWORD *)buf = 136446210;
          v30 = "__nw_protocol_unregister_notification";
          v24 = "%{public}s called with null type, backtrace limit exceeded";
          goto LABEL_47;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v22 = __nwlog_obj();
        v23 = type;
        v26 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v26)
            goto LABEL_48;
          *(_DWORD *)buf = 136446210;
          v30 = "__nw_protocol_unregister_notification";
          v24 = "%{public}s called with null type, no backtrace";
          goto LABEL_47;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "__nw_protocol_unregister_notification";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
      }
LABEL_48:
      if (v21)
        free(v21);
      v6 = 0;
      if (v10 != &nw_protocol_ref_counted_handle)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  return v6;
}

uint64_t nw_protocol_unregister_notification_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 152) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

void nw_protocol_notify(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (**v13)(_QWORD);
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  const void *v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  const char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *backtrace_string;
  _BOOL4 v34;
  const char *v35;
  char *v36;
  _BOOL4 v37;
  char *v38;
  _BOOL4 v39;
  char *v40;
  _BOOL4 v41;
  const char *v42;
  const char *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint32_t v46;
  char v47;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  void *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  char *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = a2;
    v4 = (uint64_t)a1;
    v5 = (void *)a1[5];
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      v6 = a1[11];
      if (v6)
        a1[11] = v6 + 1;
    }
    if (a2)
    {
      v7 = *(void **)(a2 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a2 + 88);
        if (v8)
          *(_QWORD *)(a2 + 88) = v8 + 1;
      }
      if (a3)
      {
        v9 = a1[3];
        if (v9)
        {
          v10 = *(void (**)(_QWORD *, uint64_t))(v9 + 160);
          if (v10)
          {
            v10(a1, a2);
            goto LABEL_13;
          }
        }
        __nwlog_obj();
        v19 = *(const char **)(v4 + 16);
        *(_DWORD *)buf = 136446722;
        v50 = "__nw_protocol_notify";
        if (!v19)
          v19 = "invalid";
        v51 = 2082;
        v52 = (void *)v19;
        v53 = 2048;
        v54 = v4;
        v20 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v47 = 0;
        if (!__nwlog_fault(v20, &type, &v47))
          goto LABEL_108;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v21 = __nwlog_obj();
          v22 = type;
          if (!os_log_type_enabled(v21, type))
            goto LABEL_108;
          v23 = *(const char **)(v4 + 16);
          if (!v23)
            v23 = "invalid";
          *(_DWORD *)buf = 136446722;
          v50 = "__nw_protocol_notify";
          v51 = 2082;
          v52 = (void *)v23;
          v53 = 2048;
          v54 = v4;
          v24 = "%{public}s protocol %{public}s (%p) has invalid notify callback";
LABEL_87:
          v44 = v21;
          v45 = v22;
          v46 = 32;
LABEL_107:
          _os_log_impl(&dword_182FBE000, v44, v45, v24, buf, v46);
          goto LABEL_108;
        }
        if (!v47)
        {
          v21 = __nwlog_obj();
          v22 = type;
          if (!os_log_type_enabled(v21, type))
            goto LABEL_108;
          v42 = *(const char **)(v4 + 16);
          if (!v42)
            v42 = "invalid";
          *(_DWORD *)buf = 136446722;
          v50 = "__nw_protocol_notify";
          v51 = 2082;
          v52 = (void *)v42;
          v53 = 2048;
          v54 = v4;
          v24 = "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded";
          goto LABEL_87;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v21 = __nwlog_obj();
        v22 = type;
        v34 = os_log_type_enabled(v21, type);
        if (!backtrace_string)
        {
          if (!v34)
            goto LABEL_108;
          v43 = *(const char **)(v4 + 16);
          if (!v43)
            v43 = "invalid";
          *(_DWORD *)buf = 136446722;
          v50 = "__nw_protocol_notify";
          v51 = 2082;
          v52 = (void *)v43;
          v53 = 2048;
          v54 = v4;
          v24 = "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace";
          goto LABEL_87;
        }
        if (v34)
        {
          v35 = *(const char **)(v4 + 16);
          if (!v35)
            v35 = "invalid";
          *(_DWORD *)buf = 136446978;
          v50 = "__nw_protocol_notify";
          v51 = 2082;
          v52 = (void *)v35;
          v53 = 2048;
          v54 = v4;
          v55 = 2082;
          v56 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
LABEL_108:
        if (!v20)
          goto LABEL_13;
        goto LABEL_109;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_notify";
      v20 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v47 = 0;
      if (!__nwlog_fault(v20, &type, &v47))
        goto LABEL_108;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (!os_log_type_enabled(v31, type))
          goto LABEL_108;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_notify";
        v24 = "%{public}s called with null type";
      }
      else if (v47)
      {
        v40 = (char *)__nw_create_backtrace_string();
        v31 = __nwlog_obj();
        v32 = type;
        v41 = os_log_type_enabled(v31, type);
        if (v40)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            v50 = "__nw_protocol_notify";
            v51 = 2082;
            v52 = v40;
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v40);
          if (!v20)
          {
LABEL_13:
            if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
            {
              v15 = *(_QWORD *)(v3 + 88);
              if (v15)
              {
                v16 = v15 - 1;
                *(_QWORD *)(v3 + 88) = v16;
                if (!v16)
                {
                  v17 = *(void (***)(_QWORD))(v3 + 64);
                  if (v17)
                  {
                    *(_QWORD *)(v3 + 64) = 0;
                    v17[2](v17);
                    _Block_release(v17);
                  }
                  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
                  {
                    v18 = *(const void **)(v3 + 64);
                    if (v18)
                      _Block_release(v18);
                  }
LABEL_33:
                  free((void *)v3);
                }
              }
            }
LABEL_15:
            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
            {
              v11 = *(_QWORD *)(v4 + 88);
              if (v11)
              {
                v12 = v11 - 1;
                *(_QWORD *)(v4 + 88) = v12;
                if (!v12)
                {
                  v13 = *(void (***)(_QWORD))(v4 + 64);
                  if (v13)
                  {
                    *(_QWORD *)(v4 + 64) = 0;
                    v13[2](v13);
                    _Block_release(v13);
                  }
                  if ((*(_BYTE *)(v4 + 72) & 1) != 0)
                  {
                    v14 = *(const void **)(v4 + 64);
                    if (v14)
                      _Block_release(v14);
                  }
                  goto LABEL_25;
                }
              }
            }
            return;
          }
LABEL_109:
          free(v20);
          goto LABEL_13;
        }
        if (!v41)
          goto LABEL_108;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_notify";
        v24 = "%{public}s called with null type, no backtrace";
      }
      else
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (!os_log_type_enabled(v31, type))
          goto LABEL_108;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_notify";
        v24 = "%{public}s called with null type, backtrace limit exceeded";
      }
      v44 = v31;
      v45 = v32;
      v46 = 12;
      goto LABEL_107;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v50 = "__nw_protocol_notify";
    v3 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (__nwlog_fault((const char *)v3, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (!os_log_type_enabled(v28, type))
          goto LABEL_102;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_notify";
        v30 = "%{public}s called with null other_protocol";
        goto LABEL_101;
      }
      if (!v47)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (!os_log_type_enabled(v28, type))
          goto LABEL_102;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_notify";
        v30 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_101;
      }
      v38 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type;
      v39 = os_log_type_enabled(v28, type);
      if (v38)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "__nw_protocol_notify";
          v51 = 2082;
          v52 = v38;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v38);
        if (v3)
          goto LABEL_33;
        goto LABEL_15;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_notify";
        v30 = "%{public}s called with null other_protocol, no backtrace";
LABEL_101:
        _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
      }
    }
LABEL_102:
    if (!v3)
      goto LABEL_15;
    goto LABEL_33;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v50 = "__nw_protocol_notify";
  v4 = _os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v47 = 0;
  if (__nwlog_fault((const char *)v4, &type, &v47))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (!os_log_type_enabled(v25, type))
        goto LABEL_97;
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_notify";
      v27 = "%{public}s called with null protocol";
    }
    else if (v47)
    {
      v36 = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v37 = os_log_type_enabled(v25, type);
      if (v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "__nw_protocol_notify";
          v51 = 2082;
          v52 = v36;
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v36);
        if (v4)
          goto LABEL_25;
        return;
      }
      if (!v37)
        goto LABEL_97;
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_notify";
      v27 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (!os_log_type_enabled(v25, type))
        goto LABEL_97;
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_notify";
      v27 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v25, v26, v27, buf, 0xCu);
  }
LABEL_97:
  if (v4)
LABEL_25:
    free((void *)v4);
}

void nw_protocol_notify_quiet(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(_QWORD);
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  const void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  char *backtrace_string;
  _BOOL4 v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    return;
  if (!a2)
    return;
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 160);
  if (!v6)
    return;
  v7 = *(void **)(a1 + 40);
  if (v7 == &nw_protocol_ref_counted_handle)
  {
    v8 = *(_QWORD *)(a1 + 88);
    if (v8)
      *(_QWORD *)(a1 + 88) = v8 + 1;
  }
  v9 = *(void **)(a2 + 40);
  if (v9 == &nw_protocol_ref_counted_handle)
  {
    v10 = *(_QWORD *)(a2 + 88);
    if (v10)
      *(_QWORD *)(a2 + 88) = v10 + 1;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "__nw_protocol_notify";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v19, &type, &v25))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v28 = "__nw_protocol_notify";
      v22 = "%{public}s called with null type";
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v24 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "__nw_protocol_notify";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_48;
      }
      if (!v24)
      {
LABEL_48:
        if (v19)
          free(v19);
        goto LABEL_13;
      }
      *(_DWORD *)buf = 136446210;
      v28 = "__nw_protocol_notify";
      v22 = "%{public}s called with null type, no backtrace";
    }
    else
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v28 = "__nw_protocol_notify";
      v22 = "%{public}s called with null type, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
    goto LABEL_48;
  }
  v6(a1, a2);
LABEL_13:
  if (v9 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
  {
    v11 = *(_QWORD *)(a2 + 88);
    if (v11)
    {
      v12 = v11 - 1;
      *(_QWORD *)(a2 + 88) = v12;
      if (!v12)
      {
        v13 = *(void (***)(_QWORD))(a2 + 64);
        if (v13)
        {
          *(_QWORD *)(a2 + 64) = 0;
          v13[2](v13);
          _Block_release(v13);
        }
        if ((*(_BYTE *)(a2 + 72) & 1) != 0)
        {
          v14 = *(const void **)(a2 + 64);
          if (v14)
            _Block_release(v14);
        }
        free((void *)a2);
      }
    }
  }
  if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    v15 = *(_QWORD *)(a1 + 88);
    if (v15)
    {
      v16 = v15 - 1;
      *(_QWORD *)(a1 + 88) = v16;
      if (!v16)
      {
        v17 = *(void (***)(_QWORD))(a1 + 64);
        if (v17)
        {
          *(_QWORD *)(a1 + 64) = 0;
          v17[2](v17);
          _Block_release(v17);
        }
        if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        {
          v18 = *(const void **)(a1 + 64);
          if (v18)
            _Block_release(v18);
        }
        free((void *)a1);
      }
    }
  }
}

uint64_t nw_protocol_notify_is_valid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      LODWORD(v2) = *(_QWORD *)(v2 + 160) != 0;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2)
    return v2;
  else
    return 0;
}

uint64_t nw_protocol_updated_path(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void (**v19)(_QWORD);
  const void *v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  NSObject *v35;
  os_log_type_t v36;
  char *backtrace_string;
  _BOOL4 v38;
  const char *v39;
  char *v40;
  _BOOL4 v41;
  char *v42;
  _BOOL4 v43;
  char *v44;
  _BOOL4 v45;
  const char *v46;
  const char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint32_t v50;
  char v51;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  char *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = *(void **)(a1 + 40);
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      v6 = *(_QWORD *)(a1 + 88);
      if (v6)
        *(_QWORD *)(a1 + 88) = v6 + 1;
    }
    if (a2)
    {
      v7 = *(void **)(a2 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a2 + 88);
        if (v8)
          *(_QWORD *)(a2 + 88) = v8 + 1;
      }
      if (a3)
      {
        v9 = *(_QWORD *)(a1 + 24);
        if (v9)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 168);
          if (v10)
          {
            v11 = v10(a1, a2);
            if (v7 == &nw_protocol_ref_counted_handle)
            {
LABEL_13:
              if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                v17 = *(_QWORD *)(a2 + 88);
                if (v17)
                {
                  v18 = v17 - 1;
                  *(_QWORD *)(a2 + 88) = v18;
                  if (!v18)
                  {
                    v19 = *(void (***)(_QWORD))(a2 + 64);
                    if (v19)
                    {
                      *(_QWORD *)(a2 + 64) = 0;
                      v19[2](v19);
                      _Block_release(v19);
                    }
                    if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                    {
                      v20 = *(const void **)(a2 + 64);
                      if (v20)
                        _Block_release(v20);
                    }
                    free((void *)a2);
                  }
                }
              }
            }
LABEL_14:
            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v13 = *(_QWORD *)(a1 + 88);
              if (v13)
              {
                v14 = v13 - 1;
                *(_QWORD *)(a1 + 88) = v14;
                if (!v14)
                {
                  v15 = *(void (***)(_QWORD))(a1 + 64);
                  if (v15)
                  {
                    *(_QWORD *)(a1 + 64) = 0;
                    v15[2](v15);
                    _Block_release(v15);
                  }
                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    v16 = *(const void **)(a1 + 64);
                    if (v16)
                      _Block_release(v16);
                  }
                  free((void *)a1);
                }
              }
            }
            return v11;
          }
        }
        __nwlog_obj();
        v21 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        v54 = "__nw_protocol_updated_path";
        if (!v21)
          v21 = "invalid";
        v55 = 2082;
        v56 = (void *)v21;
        v57 = 2048;
        v58 = a1;
        v22 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (__nwlog_fault(v22, &type, &v51))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v23 = __nwlog_obj();
            v24 = type;
            if (!os_log_type_enabled(v23, type))
              goto LABEL_107;
            v25 = *(const char **)(a1 + 16);
            if (!v25)
              v25 = "invalid";
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_updated_path";
            v55 = 2082;
            v56 = (void *)v25;
            v57 = 2048;
            v58 = a1;
            v26 = "%{public}s protocol %{public}s (%p) has invalid updated_path callback";
LABEL_84:
            v48 = v23;
            v49 = v24;
            v50 = 32;
LABEL_106:
            _os_log_impl(&dword_182FBE000, v48, v49, v26, buf, v50);
            goto LABEL_107;
          }
          if (!v51)
          {
            v23 = __nwlog_obj();
            v24 = type;
            if (!os_log_type_enabled(v23, type))
              goto LABEL_107;
            v46 = *(const char **)(a1 + 16);
            if (!v46)
              v46 = "invalid";
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_updated_path";
            v55 = 2082;
            v56 = (void *)v46;
            v57 = 2048;
            v58 = a1;
            v26 = "%{public}s protocol %{public}s (%p) has invalid updated_path callback, backtrace limit exceeded";
            goto LABEL_84;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v23 = __nwlog_obj();
          v24 = type;
          v38 = os_log_type_enabled(v23, type);
          if (!backtrace_string)
          {
            if (!v38)
              goto LABEL_107;
            v47 = *(const char **)(a1 + 16);
            if (!v47)
              v47 = "invalid";
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_updated_path";
            v55 = 2082;
            v56 = (void *)v47;
            v57 = 2048;
            v58 = a1;
            v26 = "%{public}s protocol %{public}s (%p) has invalid updated_path callback, no backtrace";
            goto LABEL_84;
          }
          if (v38)
          {
            v39 = *(const char **)(a1 + 16);
            if (!v39)
              v39 = "invalid";
            *(_DWORD *)buf = 136446978;
            v54 = "__nw_protocol_updated_path";
            v55 = 2082;
            v56 = (void *)v39;
            v57 = 2048;
            v58 = a1;
            v59 = 2082;
            v60 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
        }
LABEL_107:
        if (!v22)
          goto LABEL_109;
        goto LABEL_108;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v54 = "__nw_protocol_updated_path";
      v22 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v51 = 0;
      if (!__nwlog_fault(v22, &type, &v51))
        goto LABEL_107;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v35 = __nwlog_obj();
        v36 = type;
        if (!os_log_type_enabled(v35, type))
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_updated_path";
        v26 = "%{public}s called with null path";
      }
      else if (v51)
      {
        v44 = (char *)__nw_create_backtrace_string();
        v35 = __nwlog_obj();
        v36 = type;
        v45 = os_log_type_enabled(v35, type);
        if (v44)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            v54 = "__nw_protocol_updated_path";
            v55 = 2082;
            v56 = v44;
            _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v44);
          if (!v22)
          {
LABEL_109:
            v11 = 0;
            if (v7 == &nw_protocol_ref_counted_handle)
              goto LABEL_13;
            goto LABEL_14;
          }
LABEL_108:
          free(v22);
          goto LABEL_109;
        }
        if (!v45)
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_updated_path";
        v26 = "%{public}s called with null path, no backtrace";
      }
      else
      {
        v35 = __nwlog_obj();
        v36 = type;
        if (!os_log_type_enabled(v35, type))
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_updated_path";
        v26 = "%{public}s called with null path, backtrace limit exceeded";
      }
      v48 = v35;
      v49 = v36;
      v50 = 12;
      goto LABEL_106;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v54 = "__nw_protocol_updated_path";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (__nwlog_fault(v31, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v32 = __nwlog_obj();
        v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "__nw_protocol_updated_path";
          v34 = "%{public}s called with null other_protocol";
LABEL_99:
          _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
        }
      }
      else if (v51)
      {
        v42 = (char *)__nw_create_backtrace_string();
        v32 = __nwlog_obj();
        v33 = type;
        v43 = os_log_type_enabled(v32, type);
        if (v42)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136446466;
            v54 = "__nw_protocol_updated_path";
            v55 = 2082;
            v56 = v42;
            _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v42);
          goto LABEL_100;
        }
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v54 = "__nw_protocol_updated_path";
          v34 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_99;
        }
      }
      else
      {
        v32 = __nwlog_obj();
        v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "__nw_protocol_updated_path";
          v34 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_99;
        }
      }
    }
LABEL_100:
    if (v31)
      free(v31);
    v11 = 0;
    goto LABEL_14;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v54 = "__nw_protocol_updated_path";
  v27 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v51 = 0;
  if (__nwlog_fault(v27, &type, &v51))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_updated_path";
        v30 = "%{public}s called with null protocol";
LABEL_93:
        _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
      }
    }
    else if (v51)
    {
      v40 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type;
      v41 = os_log_type_enabled(v28, type);
      if (v40)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          v54 = "__nw_protocol_updated_path";
          v55 = 2082;
          v56 = v40;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v40);
        goto LABEL_94;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_updated_path";
        v30 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }
    }
    else
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "__nw_protocol_updated_path";
        v30 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }
    }
  }
LABEL_94:
  if (v27)
    free(v27);
  return 0;
}

uint64_t nw_protocol_updated_path_quiet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, uint64_t);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(_QWORD);
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(_QWORD);
  const void *v19;

  if (!a1)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    return 0;
  v5 = 0;
  if (a3)
  {
    if (a2)
    {
      v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 168);
      if (v7)
      {
        v8 = *(void **)(a1 + 40);
        if (v8 == &nw_protocol_ref_counted_handle)
        {
          v9 = *(_QWORD *)(a1 + 88);
          if (v9)
            *(_QWORD *)(a1 + 88) = v9 + 1;
        }
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          v10 = *(_QWORD *)(a2 + 88);
          if (v10)
            *(_QWORD *)(a2 + 88) = v10 + 1;
          v5 = v7(a1, a2);
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            v12 = *(_QWORD *)(a2 + 88);
            if (v12)
            {
              v13 = v12 - 1;
              *(_QWORD *)(a2 + 88) = v13;
              if (!v13)
              {
                v14 = *(void (***)(_QWORD))(a2 + 64);
                if (v14)
                {
                  *(_QWORD *)(a2 + 64) = 0;
                  v14[2](v14);
                  _Block_release(v14);
                }
                if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                {
                  v15 = *(const void **)(a2 + 64);
                  if (v15)
                    _Block_release(v15);
                }
                free((void *)a2);
              }
            }
          }
        }
        else
        {
          v5 = v7(a1, a2);
        }
        if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          v16 = *(_QWORD *)(a1 + 88);
          if (v16)
          {
            v17 = v16 - 1;
            *(_QWORD *)(a1 + 88) = v17;
            if (!v17)
            {
              v18 = *(void (***)(_QWORD))(a1 + 64);
              if (v18)
              {
                *(_QWORD *)(a1 + 64) = 0;
                v18[2](v18);
                _Block_release(v18);
              }
              if ((*(_BYTE *)(a1 + 72) & 1) != 0)
              {
                v19 = *(const void **)(a1 + 64);
                if (v19)
                  _Block_release(v19);
              }
              free((void *)a1);
            }
          }
        }
      }
    }
  }
  return v5;
}

uint64_t nw_protocol_updated_path_is_valid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
      LODWORD(v3) = *(_QWORD *)(v3 + 168) != 0;
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (!a2)
    LODWORD(v3) = 0;
  if (a3)
    return v3;
  else
    return 0;
}

void nw_protocol_link_state(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (**v13)(_QWORD);
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  const void *v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  const char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *backtrace_string;
  _BOOL4 v34;
  const char *v35;
  char *v36;
  _BOOL4 v37;
  char *v38;
  _BOOL4 v39;
  char *v40;
  _BOOL4 v41;
  const char *v42;
  const char *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint32_t v46;
  char v47;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  void *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  char *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = a2;
    v4 = (uint64_t)a1;
    v5 = (void *)a1[5];
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      v6 = a1[11];
      if (v6)
        a1[11] = v6 + 1;
    }
    if (a2)
    {
      v7 = *(void **)(a2 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        v8 = *(_QWORD *)(a2 + 88);
        if (v8)
          *(_QWORD *)(a2 + 88) = v8 + 1;
      }
      if (a3)
      {
        v9 = a1[3];
        if (v9)
        {
          v10 = *(void (**)(_QWORD *, uint64_t))(v9 + 104);
          if (v10)
          {
            v10(a1, a2);
            goto LABEL_13;
          }
        }
        __nwlog_obj();
        v19 = *(const char **)(v4 + 16);
        *(_DWORD *)buf = 136446722;
        v50 = "__nw_protocol_link_state";
        if (!v19)
          v19 = "invalid";
        v51 = 2082;
        v52 = (void *)v19;
        v53 = 2048;
        v54 = v4;
        v20 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v47 = 0;
        if (!__nwlog_fault(v20, &type, &v47))
          goto LABEL_108;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v21 = __nwlog_obj();
          v22 = type;
          if (!os_log_type_enabled(v21, type))
            goto LABEL_108;
          v23 = *(const char **)(v4 + 16);
          if (!v23)
            v23 = "invalid";
          *(_DWORD *)buf = 136446722;
          v50 = "__nw_protocol_link_state";
          v51 = 2082;
          v52 = (void *)v23;
          v53 = 2048;
          v54 = v4;
          v24 = "%{public}s protocol %{public}s (%p) has invalid link_state callback";
LABEL_87:
          v44 = v21;
          v45 = v22;
          v46 = 32;
LABEL_107:
          _os_log_impl(&dword_182FBE000, v44, v45, v24, buf, v46);
          goto LABEL_108;
        }
        if (!v47)
        {
          v21 = __nwlog_obj();
          v22 = type;
          if (!os_log_type_enabled(v21, type))
            goto LABEL_108;
          v42 = *(const char **)(v4 + 16);
          if (!v42)
            v42 = "invalid";
          *(_DWORD *)buf = 136446722;
          v50 = "__nw_protocol_link_state";
          v51 = 2082;
          v52 = (void *)v42;
          v53 = 2048;
          v54 = v4;
          v24 = "%{public}s protocol %{public}s (%p) has invalid link_state callback, backtrace limit exceeded";
          goto LABEL_87;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v21 = __nwlog_obj();
        v22 = type;
        v34 = os_log_type_enabled(v21, type);
        if (!backtrace_string)
        {
          if (!v34)
            goto LABEL_108;
          v43 = *(const char **)(v4 + 16);
          if (!v43)
            v43 = "invalid";
          *(_DWORD *)buf = 136446722;
          v50 = "__nw_protocol_link_state";
          v51 = 2082;
          v52 = (void *)v43;
          v53 = 2048;
          v54 = v4;
          v24 = "%{public}s protocol %{public}s (%p) has invalid link_state callback, no backtrace";
          goto LABEL_87;
        }
        if (v34)
        {
          v35 = *(const char **)(v4 + 16);
          if (!v35)
            v35 = "invalid";
          *(_DWORD *)buf = 136446978;
          v50 = "__nw_protocol_link_state";
          v51 = 2082;
          v52 = (void *)v35;
          v53 = 2048;
          v54 = v4;
          v55 = 2082;
          v56 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s protocol %{public}s (%p) has invalid link_state callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
LABEL_108:
        if (!v20)
          goto LABEL_13;
        goto LABEL_109;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_link_state";
      v20 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v47 = 0;
      if (!__nwlog_fault(v20, &type, &v47))
        goto LABEL_108;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (!os_log_type_enabled(v31, type))
          goto LABEL_108;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_link_state";
        v24 = "%{public}s called with null link_info";
      }
      else if (v47)
      {
        v40 = (char *)__nw_create_backtrace_string();
        v31 = __nwlog_obj();
        v32 = type;
        v41 = os_log_type_enabled(v31, type);
        if (v40)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            v50 = "__nw_protocol_link_state";
            v51 = 2082;
            v52 = v40;
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null link_info, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v40);
          if (!v20)
          {
LABEL_13:
            if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
            {
              v15 = *(_QWORD *)(v3 + 88);
              if (v15)
              {
                v16 = v15 - 1;
                *(_QWORD *)(v3 + 88) = v16;
                if (!v16)
                {
                  v17 = *(void (***)(_QWORD))(v3 + 64);
                  if (v17)
                  {
                    *(_QWORD *)(v3 + 64) = 0;
                    v17[2](v17);
                    _Block_release(v17);
                  }
                  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
                  {
                    v18 = *(const void **)(v3 + 64);
                    if (v18)
                      _Block_release(v18);
                  }
LABEL_33:
                  free((void *)v3);
                }
              }
            }
LABEL_15:
            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
            {
              v11 = *(_QWORD *)(v4 + 88);
              if (v11)
              {
                v12 = v11 - 1;
                *(_QWORD *)(v4 + 88) = v12;
                if (!v12)
                {
                  v13 = *(void (***)(_QWORD))(v4 + 64);
                  if (v13)
                  {
                    *(_QWORD *)(v4 + 64) = 0;
                    v13[2](v13);
                    _Block_release(v13);
                  }
                  if ((*(_BYTE *)(v4 + 72) & 1) != 0)
                  {
                    v14 = *(const void **)(v4 + 64);
                    if (v14)
                      _Block_release(v14);
                  }
                  goto LABEL_25;
                }
              }
            }
            return;
          }
LABEL_109:
          free(v20);
          goto LABEL_13;
        }
        if (!v41)
          goto LABEL_108;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_link_state";
        v24 = "%{public}s called with null link_info, no backtrace";
      }
      else
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (!os_log_type_enabled(v31, type))
          goto LABEL_108;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_link_state";
        v24 = "%{public}s called with null link_info, backtrace limit exceeded";
      }
      v44 = v31;
      v45 = v32;
      v46 = 12;
      goto LABEL_107;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v50 = "__nw_protocol_link_state";
    v3 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (__nwlog_fault((const char *)v3, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (!os_log_type_enabled(v28, type))
          goto LABEL_102;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_link_state";
        v30 = "%{public}s called with null other_protocol";
        goto LABEL_101;
      }
      if (!v47)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (!os_log_type_enabled(v28, type))
          goto LABEL_102;
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_link_state";
        v30 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_101;
      }
      v38 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type;
      v39 = os_log_type_enabled(v28, type);
      if (v38)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "__nw_protocol_link_state";
          v51 = 2082;
          v52 = v38;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v38);
        if (v3)
          goto LABEL_33;
        goto LABEL_15;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "__nw_protocol_link_state";
        v30 = "%{public}s called with null other_protocol, no backtrace";
LABEL_101:
        _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
      }
    }
LABEL_102:
    if (!v3)
      goto LABEL_15;
    goto LABEL_33;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v50 = "__nw_protocol_link_state";
  v4 = _os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v47 = 0;
  if (__nwlog_fault((const char *)v4, &type, &v47))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (!os_log_type_enabled(v25, type))
        goto LABEL_97;
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_link_state";
      v27 = "%{public}s called with null protocol";
    }
    else if (v47)
    {
      v36 = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v37 = os_log_type_enabled(v25, type);
      if (v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "__nw_protocol_link_state";
          v51 = 2082;
          v52 = v36;
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v36);
        if (v4)
          goto LABEL_25;
        return;
      }
      if (!v37)
        goto LABEL_97;
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_link_state";
      v27 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (!os_log_type_enabled(v25, type))
        goto LABEL_97;
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_link_state";
      v27 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v25, v26, v27, buf, 0xCu);
  }
LABEL_97:
  if (v4)
LABEL_25:
    free((void *)v4);
}

void nw_protocol_link_state_quiet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(_QWORD);
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(_QWORD);
  const void *v17;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
    {
      if (a3)
      {
        if (a2)
        {
          v6 = *(void (**)(uint64_t, uint64_t))(v4 + 104);
          if (v6)
          {
            v7 = *(void **)(a1 + 40);
            if (v7 == &nw_protocol_ref_counted_handle)
            {
              v8 = *(_QWORD *)(a1 + 88);
              if (v8)
                *(_QWORD *)(a1 + 88) = v8 + 1;
            }
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              v9 = *(_QWORD *)(a2 + 88);
              if (v9)
                *(_QWORD *)(a2 + 88) = v9 + 1;
              v6(a1, a2);
              if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                v10 = *(_QWORD *)(a2 + 88);
                if (v10)
                {
                  v11 = v10 - 1;
                  *(_QWORD *)(a2 + 88) = v11;
                  if (!v11)
                  {
                    v12 = *(void (***)(_QWORD))(a2 + 64);
                    if (v12)
                    {
                      *(_QWORD *)(a2 + 64) = 0;
                      v12[2](v12);
                      _Block_release(v12);
                    }
                    if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                    {
                      v13 = *(const void **)(a2 + 64);
                      if (v13)
                        _Block_release(v13);
                    }
                    free((void *)a2);
                  }
                }
              }
            }
            else
            {
              v6(a1, a2);
            }
            if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v14 = *(_QWORD *)(a1 + 88);
              if (v14)
              {
                v15 = v14 - 1;
                *(_QWORD *)(a1 + 88) = v15;
                if (!v15)
                {
                  v16 = *(void (***)(_QWORD))(a1 + 64);
                  if (v16)
                  {
                    *(_QWORD *)(a1 + 64) = 0;
                    v16[2](v16);
                    _Block_release(v16);
                  }
                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    v17 = *(const void **)(a1 + 64);
                    if (v17)
                      _Block_release(v17);
                  }
                  free((void *)a1);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_link_state_is_valid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
      LODWORD(v3) = *(_QWORD *)(v3 + 104) != 0;
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (!a2)
    LODWORD(v3) = 0;
  if (a3)
    return v3;
  else
    return 0;
}

BOOL nw_protocol_one_to_one_callbacks_new()
{
  _QWORD *v0;
  _QWORD *v1;
  _BOOL8 result;
  NSObject *v3;
  void *v4;

  v0 = malloc_type_calloc(1uLL, 0x110uLL, 0xEAFB8F1AuLL);
  v1 = v0;
  if (v0)
  {
    *v0 = nw_protocol_default_add_input_handler;
    v0[1] = nw_protocol_default_remove_input_handler;
    v0[8] = nw_protocol_default_input_available;
    v0[9] = nw_protocol_default_output_available;
    v0[10] = nw_protocol_default_get_input_frames;
    v0[11] = nw_protocol_default_get_output_frames;
    v0[12] = nw_protocol_default_finalize_output_frames;
    v0[13] = nw_protocol_default_link_state;
    v0[16] = nw_protocol_default_get_local;
    v0[17] = nw_protocol_default_get_remote;
    v0[14] = nw_protocol_default_get_parameters;
    v0[15] = nw_protocol_default_get_path;
    v0[24] = nw_protocol_default_output_finished;
    v0[25] = nw_protocol_default_get_output_local;
    v0[2] = nw_protocol_default_replace_input_handler;
    v0[3] = nw_protocol_default_connect;
    v0[4] = nw_protocol_default_disconnect;
    v0[5] = nw_protocol_default_connected;
    v0[6] = nw_protocol_default_disconnected;
    v0[7] = nw_protocol_default_error;
    v0[32] = nw_protocol_default_reset;
    v0[33] = nw_protocol_default_input_flush;
    v0[22] = nw_protocol_default_supports_external_data;
    v0[23] = nw_protocol_default_input_finished;
    v0[26] = nw_protocol_default_get_output_interface;
    v0[27] = nw_protocol_default_waiting_for_output;
    v0[18] = nw_protocol_default_register_notification;
    v0[19] = nw_protocol_default_unregister_notification;
    v0[20] = nw_protocol_default_notify;
    v0[21] = nw_protocol_default_updated_path;
    v0[28] = nw_protocol_default_copy_info;
    v0[29] = nw_protocol_default_add_listen_handler;
    v0[30] = nw_protocol_default_remove_listen_handler;
    v0[31] = nw_protocol_default_get_message_properties;
    return (BOOL)v1;
  }
  v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  v4 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    MEMORY[0x100] = 0u;
    MEMORY[0xF0] = 0u;
    MEMORY[0xE0] = 0u;
    MEMORY[0xD0] = 0u;
    MEMORY[0xC0] = 0u;
    MEMORY[0xB0] = 0u;
    MEMORY[0xA0] = 0u;
    MEMORY[0x90] = 0u;
    MEMORY[0x80] = 0u;
    MEMORY[0x70] = 0u;
    MEMORY[0x60] = 0u;
    MEMORY[0x50] = 0u;
    MEMORY[0x40] = 0u;
    MEMORY[0x30] = 0u;
    MEMORY[0x20] = 0u;
    MEMORY[0x10] = 0u;
    MEMORY[0] = 0u;
    nw_protocol_set_default_one_to_one_callbacks(0);
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

void nw_protocol_callbacks_set_add_input_handler(_QWORD *a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *a1 = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_add_input_handler";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_add_input_handler";
        v5 = "%{public}s called with null add_input_handler";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_add_input_handler";
        v5 = "%{public}s called with null add_input_handler, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_add_input_handler";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null add_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_add_input_handler";
        v5 = "%{public}s called with null add_input_handler, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_add_input_handler";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_add_input_handler";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_add_input_handler";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_add_input_handler";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_add_input_handler";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_replace_input_handler(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 16) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_replace_input_handler";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_replace_input_handler";
        v5 = "%{public}s called with null replace_input_handler";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_replace_input_handler";
        v5 = "%{public}s called with null replace_input_handler, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_replace_input_handler";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null replace_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_replace_input_handler";
        v5 = "%{public}s called with null replace_input_handler, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_replace_input_handler";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_replace_input_handler";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_replace_input_handler";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_replace_input_handler";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_replace_input_handler";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_remove_input_handler(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 8) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_remove_input_handler";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_remove_input_handler";
        v5 = "%{public}s called with null remove_input_handler";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_remove_input_handler";
        v5 = "%{public}s called with null remove_input_handler, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_remove_input_handler";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null remove_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_remove_input_handler";
        v5 = "%{public}s called with null remove_input_handler, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_remove_input_handler";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_remove_input_handler";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_remove_input_handler";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_remove_input_handler";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_remove_input_handler";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_add_listen_handler(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 232) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_add_listen_handler";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_add_listen_handler";
        v5 = "%{public}s called with null add_listen_handler";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_add_listen_handler";
        v5 = "%{public}s called with null add_listen_handler, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_add_listen_handler";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null add_listen_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_add_listen_handler";
        v5 = "%{public}s called with null add_listen_handler, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_add_listen_handler";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_add_listen_handler";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_add_listen_handler";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_add_listen_handler";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_add_listen_handler";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_remove_listen_handler(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 240) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_remove_listen_handler";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_remove_listen_handler";
        v5 = "%{public}s called with null remove_listen_handler";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_remove_listen_handler";
        v5 = "%{public}s called with null remove_listen_handler, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_remove_listen_handler";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null remove_listen_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_remove_listen_handler";
        v5 = "%{public}s called with null remove_listen_handler, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_remove_listen_handler";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_remove_listen_handler";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_remove_listen_handler";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_remove_listen_handler";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_remove_listen_handler";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_get_input_frames(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 80) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_input_frames";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_input_frames";
        v5 = "%{public}s called with null get_input_frames";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_input_frames";
        v5 = "%{public}s called with null get_input_frames, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_get_input_frames";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null get_input_frames, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_input_frames";
        v5 = "%{public}s called with null get_input_frames, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_input_frames";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_input_frames";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_input_frames";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_input_frames";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_get_input_frames";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_get_output_frames(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 88) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_output_frames";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_output_frames";
        v5 = "%{public}s called with null get_output_frames";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_output_frames";
        v5 = "%{public}s called with null get_output_frames, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_get_output_frames";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null get_output_frames, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_output_frames";
        v5 = "%{public}s called with null get_output_frames, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_output_frames";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_output_frames";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_output_frames";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_output_frames";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_get_output_frames";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_finalize_output_frames(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 96) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_finalize_output_frames";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_finalize_output_frames";
        v5 = "%{public}s called with null finalize_output_frames";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_finalize_output_frames";
        v5 = "%{public}s called with null finalize_output_frames, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_finalize_output_frames";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null finalize_output_frames, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_finalize_output_frames";
        v5 = "%{public}s called with null finalize_output_frames, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_finalize_output_frames";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_finalize_output_frames";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_finalize_output_frames";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_finalize_output_frames";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_finalize_output_frames";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_get_parameters(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 112) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_parameters";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_parameters";
        v5 = "%{public}s called with null get_parameters";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_parameters";
        v5 = "%{public}s called with null get_parameters, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_get_parameters";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null get_parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_parameters";
        v5 = "%{public}s called with null get_parameters, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_parameters";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_parameters";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_parameters";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_parameters";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_get_parameters";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_get_path(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 120) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_path";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_path";
        v5 = "%{public}s called with null get_path";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_path";
        v5 = "%{public}s called with null get_path, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_get_path";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null get_path, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_path";
        v5 = "%{public}s called with null get_path, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_path";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_path";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_path";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_path";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_get_path";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_get_remote_endpoint(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 136) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
        v5 = "%{public}s called with null get_remote_endpoint";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
        v5 = "%{public}s called with null get_remote_endpoint, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null get_remote_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
        v5 = "%{public}s called with null get_remote_endpoint, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_get_local_endpoint(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 128) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_local_endpoint";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_local_endpoint";
        v5 = "%{public}s called with null get_local_endpoint";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_local_endpoint";
        v5 = "%{public}s called with null get_local_endpoint, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_get_local_endpoint";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null get_local_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_local_endpoint";
        v5 = "%{public}s called with null get_local_endpoint, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_local_endpoint";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_local_endpoint";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_local_endpoint";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_local_endpoint";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_get_local_endpoint";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_get_output_local_endpoint(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 200) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
        v5 = "%{public}s called with null get_output_local_endpoint";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
        v5 = "%{public}s called with null get_output_local_endpoint, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null get_output_local_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
        v5 = "%{public}s called with null get_output_local_endpoint, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_get_output_interface(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 208) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_output_interface";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_output_interface";
        v5 = "%{public}s called with null get_output_interface";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_output_interface";
        v5 = "%{public}s called with null get_output_interface, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_get_output_interface";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null get_output_interface, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_output_interface";
        v5 = "%{public}s called with null get_output_interface, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_output_interface";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_output_interface";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_output_interface";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_output_interface";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_get_output_interface";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_connect(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 24) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_connect";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_connect";
        v5 = "%{public}s called with null connect";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_connect";
        v5 = "%{public}s called with null connect, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_connect";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null connect, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_connect";
        v5 = "%{public}s called with null connect, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_connect";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_connect";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_connect";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_connect";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_connect";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_connected(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 40) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_connected";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_connected";
        v5 = "%{public}s called with null connected";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_connected";
        v5 = "%{public}s called with null connected, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_connected";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null connected, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_connected";
        v5 = "%{public}s called with null connected, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_connected";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_connected";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_connected";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_connected";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_connected";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_disconnect(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 32) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_disconnect";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_disconnect";
        v5 = "%{public}s called with null disconnect";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_disconnect";
        v5 = "%{public}s called with null disconnect, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_disconnect";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null disconnect, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_disconnect";
        v5 = "%{public}s called with null disconnect, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_disconnect";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_disconnect";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_disconnect";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_disconnect";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_disconnect";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_disconnected(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 48) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_disconnected";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_disconnected";
        v5 = "%{public}s called with null disconnected";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_disconnected";
        v5 = "%{public}s called with null disconnected, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_disconnected";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null disconnected, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_disconnected";
        v5 = "%{public}s called with null disconnected, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_disconnected";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_disconnected";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_disconnected";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_disconnected";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_disconnected";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_input_available(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 64) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_input_available";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_input_available";
        v5 = "%{public}s called with null input_available";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_input_available";
        v5 = "%{public}s called with null input_available, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_input_available";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null input_available, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_input_available";
        v5 = "%{public}s called with null input_available, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_input_available";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_input_available";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_input_available";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_input_available";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_input_available";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_output_available(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 72) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_output_available";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_output_available";
        v5 = "%{public}s called with null output_available";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_output_available";
        v5 = "%{public}s called with null output_available, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_output_available";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null output_available, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_output_available";
        v5 = "%{public}s called with null output_available, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_output_available";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_output_available";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_output_available";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_output_available";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_output_available";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_input_finished(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 184) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_input_finished";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_input_finished";
        v5 = "%{public}s called with null input_finished";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_input_finished";
        v5 = "%{public}s called with null input_finished, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_input_finished";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null input_finished, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_input_finished";
        v5 = "%{public}s called with null input_finished, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_input_finished";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_input_finished";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_input_finished";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_input_finished";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_input_finished";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_output_finished(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 192) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_output_finished";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_output_finished";
        v5 = "%{public}s called with null output_finished";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_output_finished";
        v5 = "%{public}s called with null output_finished, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_output_finished";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null output_finished, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_output_finished";
        v5 = "%{public}s called with null output_finished, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_output_finished";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_output_finished";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_output_finished";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_output_finished";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_output_finished";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_input_flush(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 264) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_input_flush";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_input_flush";
        v5 = "%{public}s called with null input_flush";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_input_flush";
        v5 = "%{public}s called with null input_flush, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_input_flush";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null input_flush, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_input_flush";
        v5 = "%{public}s called with null input_flush, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_input_flush";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_input_flush";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_input_flush";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_input_flush";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_input_flush";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_error(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 56) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_error";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_error";
        v5 = "%{public}s called with null error";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_error";
        v5 = "%{public}s called with null error, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_error";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null error, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_error";
        v5 = "%{public}s called with null error, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_error";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_error";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_error";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_error";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_error";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_reset(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 256) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_reset";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_reset";
        v5 = "%{public}s called with null reset";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_reset";
        v5 = "%{public}s called with null reset, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_reset";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null reset, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_reset";
        v5 = "%{public}s called with null reset, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_reset";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_reset";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_reset";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_reset";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_reset";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_get_message_properties(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 248) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_message_properties";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_message_properties";
        v5 = "%{public}s called with null get_message_properties";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_message_properties";
        v5 = "%{public}s called with null get_message_properties, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_get_message_properties";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null get_message_properties, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_get_message_properties";
        v5 = "%{public}s called with null get_message_properties, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_get_message_properties";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_message_properties";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_message_properties";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_get_message_properties";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_get_message_properties";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_copy_info(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 224) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_copy_info";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_copy_info";
        v5 = "%{public}s called with null copy_info";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_copy_info";
        v5 = "%{public}s called with null copy_info, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_copy_info";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null copy_info, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_copy_info";
        v5 = "%{public}s called with null copy_info, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_copy_info";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_copy_info";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_copy_info";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_copy_info";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_copy_info";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_supports_external_data(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 176) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_supports_external_data";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_supports_external_data";
        v5 = "%{public}s called with null supports_external_data";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_supports_external_data";
        v5 = "%{public}s called with null supports_external_data, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_supports_external_data";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null supports_external_data, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_supports_external_data";
        v5 = "%{public}s called with null supports_external_data, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_supports_external_data";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_supports_external_data";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_supports_external_data";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_supports_external_data";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_supports_external_data";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_waiting_for_output(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 216) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_waiting_for_output";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_waiting_for_output";
        v5 = "%{public}s called with null waiting_for_output";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_waiting_for_output";
        v5 = "%{public}s called with null waiting_for_output, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_waiting_for_output";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null waiting_for_output, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_waiting_for_output";
        v5 = "%{public}s called with null waiting_for_output, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_waiting_for_output";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_waiting_for_output";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_waiting_for_output";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_waiting_for_output";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_waiting_for_output";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_register_notification(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 144) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_register_notification";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_register_notification";
        v5 = "%{public}s called with null register_notification";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_register_notification";
        v5 = "%{public}s called with null register_notification, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_register_notification";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null register_notification, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_register_notification";
        v5 = "%{public}s called with null register_notification, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_register_notification";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_register_notification";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_register_notification";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_register_notification";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_register_notification";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_unregister_notification(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 152) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_unregister_notification";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_unregister_notification";
        v5 = "%{public}s called with null unregister_notification";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_unregister_notification";
        v5 = "%{public}s called with null unregister_notification, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_unregister_notification";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null unregister_notification, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_unregister_notification";
        v5 = "%{public}s called with null unregister_notification, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_unregister_notification";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_unregister_notification";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_unregister_notification";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_unregister_notification";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_unregister_notification";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_notify(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 160) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_notify";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_notify";
        v5 = "%{public}s called with null notify";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_notify";
        v5 = "%{public}s called with null notify, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_notify";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null notify, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_notify";
        v5 = "%{public}s called with null notify, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_notify";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_notify";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_notify";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_notify";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_notify";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_updated_path(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 168) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_updated_path";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_updated_path";
        v5 = "%{public}s called with null updated_path";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_updated_path";
        v5 = "%{public}s called with null updated_path, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_updated_path";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null updated_path, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_updated_path";
        v5 = "%{public}s called with null updated_path, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_updated_path";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_updated_path";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_updated_path";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_updated_path";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_updated_path";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_callbacks_set_link_state(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 104) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_link_state";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_link_state";
        v5 = "%{public}s called with null link_state";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_link_state";
        v5 = "%{public}s called with null link_state, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_callbacks_set_link_state";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null link_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_callbacks_set_link_state";
        v5 = "%{public}s called with null link_state, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_callbacks_set_link_state";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_link_state";
      v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_link_state";
      v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_callbacks_set_link_state";
      v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_callbacks_set_link_state";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

uint64_t nw_protocol_new(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v6;
  _OWORD *v7;
  char *v8;
  uint64_t result;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  char *backtrace_string;
  _BOOL4 v19;
  const char *v20;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  size_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_new";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v10, &type, &v22))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_new";
        v13 = "%{public}s called with null instance_size";
LABEL_38:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
      }
LABEL_39:
      if (v10)
        free(v10);
      return 0;
    }
    if (!v22)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_new";
        v13 = "%{public}s called with null instance_size, backtrace limit exceeded";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_new";
        v13 = "%{public}s called with null instance_size, no backtrace";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_new";
      v26 = 2082;
      v27 = (uint64_t)backtrace_string;
      v20 = "%{public}s called with null instance_size, dumping backtrace:%{public}s";
LABEL_28:
      _os_log_impl(&dword_182FBE000, v11, v12, v20, buf, 0x16u);
    }
LABEL_29:
    free(backtrace_string);
    goto LABEL_39;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_new";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v10, &type, &v22))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_new";
        v13 = "%{public}s called with null parameters";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (!v22)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_new";
        v13 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v21 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_new";
        v13 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_new";
      v26 = 2082;
      v27 = (uint64_t)backtrace_string;
      v20 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  v6 = a1 + 96;
  if (a1 == -96)
  {
    v14 = __nwlog_obj();
    os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v25 = "strict_calloc";
    v15 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v15);
    if ((_DWORD)result)
      goto LABEL_42;
    free(v15);
  }
  v7 = malloc_type_calloc(1uLL, v6, 0xEAFB8F1AuLL);
  if (v7)
  {
    v7[3] = 0u;
    v7[4] = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    *v7 = 0u;
    *((_QWORD *)v7 + 10) = 0;
    *((_QWORD *)v7 + 11) = 1;
    *((_QWORD *)v7 + 2) = a3;
    *((_QWORD *)v7 + 3) = a4;
    v8 = (char *)(v7 + 6);
    *((_QWORD *)v7 + 5) = &nw_protocol_ref_counted_handle;
    return (uint64_t)v8;
  }
  v16 = __nwlog_obj();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v25 = "strict_calloc";
  v26 = 2048;
  v27 = 1;
  v28 = 2048;
  v29 = v6;
  v17 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v17);
  if (!(_DWORD)result)
  {
    free(v17);
    v8 = 0;
    MEMORY[0x50] = 0;
    MEMORY[0x40] = 0u;
    MEMORY[0x30] = 0u;
    MEMORY[0x20] = 0u;
    MEMORY[0x10] = 0u;
    MEMORY[0] = 0u;
    MEMORY[0x58] = 1;
    nw_protocol_set_identifier(0, a3);
    nw_protocol_set_callbacks(0, a4);
    nw_protocol_set_handle(0, (uint64_t)&nw_protocol_ref_counted_handle);
    if ((_UNKNOWN *)MEMORY[0x28] == &nw_protocol_ref_counted_handle)
      return 96;
    return (uint64_t)v8;
  }
LABEL_42:
  __break(1u);
  return result;
}

void nw_protocol_set_identifier(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)(a1 + 16) = a2;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "__nw_protocol_set_identifier";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_protocol_set_identifier";
      v5 = "%{public}s called with null protocol";
      goto LABEL_17;
    }
    if (!v8)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_protocol_set_identifier";
      v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        v11 = "__nw_protocol_set_identifier";
        v12 = 2082;
        v13 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_protocol_set_identifier";
      v5 = "%{public}s called with null protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2)
    free(v2);
}

void nw_protocol_set_callbacks(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)(a1 + 24) = a2;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "__nw_protocol_set_callbacks";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_protocol_set_callbacks";
      v5 = "%{public}s called with null protocol";
      goto LABEL_17;
    }
    if (!v8)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_protocol_set_callbacks";
      v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        v11 = "__nw_protocol_set_callbacks";
        v12 = 2082;
        v13 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_protocol_set_callbacks";
      v5 = "%{public}s called with null protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2)
    free(v2);
}

void nw_protocol_set_handle(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)(a1 + 40) = a2;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "__nw_protocol_set_handle";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_protocol_set_handle";
      v5 = "%{public}s called with null protocol";
      goto LABEL_17;
    }
    if (!v8)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_protocol_set_handle";
      v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        v11 = "__nw_protocol_set_handle";
        v12 = 2082;
        v13 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_protocol_set_handle";
      v5 = "%{public}s called with null protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2)
    free(v2);
}

uint64_t nw_protocol_downcast(uint64_t result)
{
  if (result)
  {
    if (*(_UNKNOWN **)(result + 40) == &nw_protocol_ref_counted_handle)
      result += 96;
    else
      return 0;
  }
  return result;
}

void nw_protocol_destroy(uint64_t a1, void *aBlock)
{
  unint64_t v4;
  char v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  char *v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char v17;
  os_log_type_t type[8];
  _BYTE buf[12];
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = atomic_load(nw_protocol_get_zombie_callbacks(void)::once_flag);
    if (v4 != -1)
    {
      *(_QWORD *)buf = &v17;
      *(_QWORD *)type = buf;
      std::__call_once(nw_protocol_get_zombie_callbacks(void)::once_flag, type, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<nw_protocol_get_zombie_callbacks(void)::$_0 &&>>);
    }
    *(_QWORD *)(a1 - 72) = &nw_protocol_get_zombie_callbacks(void)::callbacks;
    if (aBlock)
      aBlock = _Block_copy(aBlock);
    v5 = *(_BYTE *)(a1 - 24);
    if ((v5 & 1) != 0)
    {
      v6 = *(const void **)(a1 - 32);
      if (v6)
      {
        _Block_release(v6);
        v5 = *(_BYTE *)(a1 - 24);
      }
    }
    *(_QWORD *)(a1 - 32) = aBlock;
    *(_BYTE *)(a1 - 24) = v5 | 1;
    if (*(_UNKNOWN **)(a1 - 56) == &nw_protocol_ref_counted_handle)
    {
      v7 = *(_QWORD *)(a1 - 8);
      if (v7)
      {
        v8 = v7 - 1;
        *(_QWORD *)(a1 - 8) = v8;
        if (!v8)
        {
          if (aBlock)
          {
            *(_QWORD *)(a1 - 32) = 0;
            (*((void (**)(void *))aBlock + 2))(aBlock);
            _Block_release(aBlock);
            if ((*(_BYTE *)(a1 - 24) & 1) != 0)
            {
              v9 = *(const void **)(a1 - 32);
              if (v9)
                _Block_release(v9);
            }
          }
          *(_QWORD *)(a1 - 32) = 0;
          v10 = (char *)(a1 - 96);
          goto LABEL_18;
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_destroy";
  v11 = (const char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v11, type, &v17))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type[0];
      if (!os_log_type_enabled(v12, type[0]))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_destroy";
      v14 = "%{public}s called with null instance";
LABEL_32:
      _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
      goto LABEL_33;
    }
    if (!v17)
    {
      v12 = __nwlog_obj();
      v13 = type[0];
      if (!os_log_type_enabled(v12, type[0]))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_destroy";
      v14 = "%{public}s called with null instance, backtrace limit exceeded";
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type[0];
    v16 = os_log_type_enabled(v12, type[0]);
    if (!backtrace_string)
    {
      if (!v16)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_destroy";
      v14 = "%{public}s called with null instance, no backtrace";
      goto LABEL_32;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_destroy";
      v20 = 2082;
      v21 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
  }
LABEL_33:
  if (v11)
  {
    v10 = (char *)v11;
LABEL_18:
    free(v10);
  }
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<nw_protocol_get_zombie_callbacks(void)::$_0 &&>>()
{
  nw_protocol_get_zombie_callbacks(void)::callbacks = (uint64_t)nw_protocol_zombie_add_input_handler;
  unk_1ECD84590 = nw_protocol_zombie_remove_input_handler;
  qword_1ECD845C8 = (uint64_t)nw_protocol_zombie_input_available;
  unk_1ECD845D0 = nw_protocol_zombie_output_available;
  qword_1ECD845D8 = (uint64_t)nw_protocol_zombie_get_input_frames;
  unk_1ECD845E0 = nw_protocol_zombie_get_output_frames;
  qword_1ECD845E8 = (uint64_t)nw_protocol_zombie_finalize_output_frames;
  unk_1ECD845F0 = nw_protocol_zombie_link_state;
  qword_1ECD84608 = (uint64_t)nw_protocol_zombie_get_local_endpoint;
  unk_1ECD84610 = nw_protocol_zombie_get_remote_endpoint;
  qword_1ECD845F8 = (uint64_t)nw_protocol_zombie_get_parameters;
  unk_1ECD84600 = nw_protocol_zombie_get_path;
  qword_1ECD84648 = (uint64_t)nw_protocol_zombie_output_finished;
  unk_1ECD84650 = nw_protocol_zombie_get_output_local_endpoint;
  qword_1ECD84598 = (uint64_t)nw_protocol_zombie_replace_input_handler;
  unk_1ECD845A0 = nw_protocol_zombie_connect;
  qword_1ECD845A8 = (uint64_t)nw_protocol_zombie_disconnect;
  unk_1ECD845B0 = nw_protocol_zombie_connected;
  qword_1ECD845B8 = (uint64_t)nw_protocol_zombie_disconnected;
  unk_1ECD845C0 = nw_protocol_zombie_error;
  qword_1ECD84688 = (uint64_t)nw_protocol_zombie_reset;
  unk_1ECD84690 = nw_protocol_zombie_input_flush;
  qword_1ECD84638 = (uint64_t)nw_protocol_zombie_supports_external_data;
  unk_1ECD84640 = nw_protocol_zombie_input_finished;
  qword_1ECD84658 = (uint64_t)nw_protocol_zombie_get_output_interface;
  unk_1ECD84660 = nw_protocol_zombie_waiting_for_output;
  qword_1ECD84618 = (uint64_t)nw_protocol_zombie_register_notification;
  unk_1ECD84620 = nw_protocol_zombie_unregister_notification;
  qword_1ECD84628 = (uint64_t)nw_protocol_zombie_notify;
  unk_1ECD84630 = nw_protocol_zombie_updated_path;
  qword_1ECD84668 = (uint64_t)nw_protocol_zombie_copy_info;
  unk_1ECD84670 = nw_protocol_zombie_add_listen_handler;
  qword_1ECD84678 = (uint64_t)nw_protocol_zombie_remove_listen_handler;
  unk_1ECD84680 = nw_protocol_zombie_get_message_properties;
}

uint64_t nw_protocol_zombie_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  nw_protocol_identifier *v9;
  nw_protocol_identifier *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  nw_protocol_identifier *v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  nw_protocol_identifier *v26;
  __int16 v27;
  nw_protocol *v28;
  __int16 v29;
  nw_protocol_identifier *v30;
  __int16 v31;
  nw_protocol *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v5 = a2->identifier;
  *(_DWORD *)buf = 136447234;
  v24 = "nw_protocol_zombie_add_input_handler";
  v25 = 2080;
  v26 = identifier;
  v27 = 2048;
  v28 = a1;
  v29 = 2080;
  v30 = v5;
  v31 = 2048;
  v32 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v6, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v9 = a1->identifier;
      v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v10 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v24 = "nw_protocol_zombie_add_input_handler";
      v25 = 2080;
      v26 = v9;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v10;
      v31 = 2048;
      v32 = a2;
      v11 = "%{public}s protocol %s:%p, input_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v21)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v24 = "nw_protocol_zombie_add_input_handler";
      v25 = 2080;
      v26 = v16;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v17;
      v31 = 2048;
      v32 = a2;
      v11 = "%{public}s protocol %s:%p, input_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v24 = "nw_protocol_zombie_add_input_handler";
      v25 = 2080;
      v26 = v18;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v19;
      v31 = 2048;
      v32 = a2;
      v11 = "%{public}s protocol %s:%p, input_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v14 = a1->identifier;
      v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v15 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v24 = "nw_protocol_zombie_add_input_handler";
      v25 = 2080;
      v26 = v14;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v15;
      v31 = 2048;
      v32 = a2;
      v33 = 2082;
      v34 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, input_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
  return 0;
}

uint64_t nw_protocol_zombie_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v7;
  nw_protocol_identifier *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  nw_protocol_identifier *v12;
  nw_protocol_identifier *v13;
  nw_protocol_identifier *v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  nw_protocol_identifier *v20;
  nw_protocol_identifier *v21;
  nw_protocol_identifier *v22;
  nw_protocol_identifier *v23;
  nw_protocol_identifier *v24;
  nw_protocol_identifier *v25;
  nw_protocol_identifier *v26;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  nw_protocol_identifier *v33;
  __int16 v34;
  nw_protocol *v35;
  __int16 v36;
  nw_protocol_identifier *v37;
  __int16 v38;
  nw_protocol *v39;
  __int16 v40;
  nw_protocol_identifier *v41;
  __int16 v42;
  nw_protocol *v43;
  __int16 v44;
  char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v7 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v7 = a2->identifier;
  v8 = (nw_protocol_identifier *)"invalid";
  if (a3 && a3->identifier)
    v8 = a3->identifier;
  *(_DWORD *)buf = 136447746;
  v31 = "nw_protocol_zombie_replace_input_handler";
  v32 = 2080;
  v33 = identifier;
  v34 = 2048;
  v35 = a1;
  v36 = 2080;
  v37 = v7;
  v38 = 2048;
  v39 = a2;
  v40 = 2080;
  v41 = v8;
  v42 = 2048;
  v43 = a3;
  v9 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (__nwlog_fault(v9, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_60;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v12 = a1->identifier;
      v13 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v13 = a2->identifier;
      v14 = (nw_protocol_identifier *)"invalid";
      if (a3 && a3->identifier)
        v14 = a3->identifier;
      *(_DWORD *)buf = 136447746;
      v31 = "nw_protocol_zombie_replace_input_handler";
      v32 = 2080;
      v33 = v12;
      v34 = 2048;
      v35 = a1;
      v36 = 2080;
      v37 = v13;
      v38 = 2048;
      v39 = a2;
      v40 = 2080;
      v41 = v14;
      v42 = 2048;
      v43 = a3;
      v15 = "%{public}s protocol %s:%p, old_input_handler %s:%p, new_input_handler %s:%p";
LABEL_59:
      _os_log_impl(&dword_182FBE000, v10, v11, v15, buf, 0x48u);
      goto LABEL_60;
    }
    if (!v28)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_60;
      v21 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v21 = a1->identifier;
      v22 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v22 = a2->identifier;
      v23 = (nw_protocol_identifier *)"invalid";
      if (a3 && a3->identifier)
        v23 = a3->identifier;
      *(_DWORD *)buf = 136447746;
      v31 = "nw_protocol_zombie_replace_input_handler";
      v32 = 2080;
      v33 = v21;
      v34 = 2048;
      v35 = a1;
      v36 = 2080;
      v37 = v22;
      v38 = 2048;
      v39 = a2;
      v40 = 2080;
      v41 = v23;
      v42 = 2048;
      v43 = a3;
      v15 = "%{public}s protocol %s:%p, old_input_handler %s:%p, new_input_handler %s:%p, backtrace limit exceeded";
      goto LABEL_59;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = gLogObj;
    v11 = type;
    v17 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v17)
        goto LABEL_60;
      v24 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v24 = a1->identifier;
      v25 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v25 = a2->identifier;
      v26 = (nw_protocol_identifier *)"invalid";
      if (a3 && a3->identifier)
        v26 = a3->identifier;
      *(_DWORD *)buf = 136447746;
      v31 = "nw_protocol_zombie_replace_input_handler";
      v32 = 2080;
      v33 = v24;
      v34 = 2048;
      v35 = a1;
      v36 = 2080;
      v37 = v25;
      v38 = 2048;
      v39 = a2;
      v40 = 2080;
      v41 = v26;
      v42 = 2048;
      v43 = a3;
      v15 = "%{public}s protocol %s:%p, old_input_handler %s:%p, new_input_handler %s:%p, no backtrace";
      goto LABEL_59;
    }
    if (v17)
    {
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      v20 = (nw_protocol_identifier *)"invalid";
      if (a3 && a3->identifier)
        v20 = a3->identifier;
      *(_DWORD *)buf = 136448002;
      v31 = "nw_protocol_zombie_replace_input_handler";
      v32 = 2080;
      v33 = v18;
      v34 = 2048;
      v35 = a1;
      v36 = 2080;
      v37 = v19;
      v38 = 2048;
      v39 = a2;
      v40 = 2080;
      v41 = v20;
      v42 = 2048;
      v43 = a3;
      v44 = 2082;
      v45 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s protocol %s:%p, old_input_handler %s:%p, new_input_handler %s:%p, dumping backtrace:%{public}s", buf, 0x52u);
    }
    free(backtrace_string);
  }
LABEL_60:
  if (v9)
    free(v9);
  return 0;
}

uint64_t nw_protocol_zombie_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  nw_protocol_identifier *v20;
  nw_protocol_identifier *v21;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  nw_protocol_identifier *v28;
  __int16 v29;
  nw_protocol *v30;
  __int16 v31;
  nw_protocol_identifier *v32;
  __int16 v33;
  nw_protocol *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v7 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v7 = a2->identifier;
  *(_DWORD *)buf = 136447490;
  v26 = "nw_protocol_zombie_remove_input_handler";
  v27 = 2080;
  v28 = identifier;
  v29 = 2048;
  v30 = a1;
  v31 = 2080;
  v32 = v7;
  v33 = 2048;
  v34 = a2;
  v35 = 1024;
  v36 = a3;
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v11 = a1->identifier;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v12 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v26 = "nw_protocol_zombie_remove_input_handler";
      v27 = 2080;
      v28 = v11;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v12;
      v33 = 2048;
      v34 = a2;
      v35 = 1024;
      v36 = a3;
      v13 = "%{public}s protocol %s:%p, input_protocol %s:%p, destroy %{BOOL}d";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v9, v10, v13, buf, 0x3Au);
      goto LABEL_45;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v26 = "nw_protocol_zombie_remove_input_handler";
      v27 = 2080;
      v28 = v18;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v19;
      v33 = 2048;
      v34 = a2;
      v35 = 1024;
      v36 = a3;
      v13 = "%{public}s protocol %s:%p, input_protocol %s:%p, destroy %{BOOL}d, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v15)
        goto LABEL_45;
      v20 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v20 = a1->identifier;
      v21 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v21 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v26 = "nw_protocol_zombie_remove_input_handler";
      v27 = 2080;
      v28 = v20;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v21;
      v33 = 2048;
      v34 = a2;
      v35 = 1024;
      v36 = a3;
      v13 = "%{public}s protocol %s:%p, input_protocol %s:%p, destroy %{BOOL}d, no backtrace";
      goto LABEL_44;
    }
    if (v15)
    {
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447746;
      v26 = "nw_protocol_zombie_remove_input_handler";
      v27 = 2080;
      v28 = v16;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v17;
      v33 = 2048;
      v34 = a2;
      v35 = 1024;
      v36 = a3;
      v37 = 2082;
      v38 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s protocol %s:%p, input_protocol %s:%p, destroy %{BOOL}d, dumping backtrace:%{public}s", buf, 0x44u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v8)
    free(v8);
  return 0;
}

void nw_protocol_zombie_input_available(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  nw_protocol_identifier *v9;
  nw_protocol_identifier *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  nw_protocol_identifier *v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  nw_protocol_identifier *v25;
  __int16 v26;
  nw_protocol *v27;
  __int16 v28;
  nw_protocol_identifier *v29;
  __int16 v30;
  nw_protocol *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v5 = a2->identifier;
  *(_DWORD *)buf = 136447234;
  v23 = "nw_protocol_zombie_input_available";
  v24 = 2080;
  v25 = identifier;
  v26 = 2048;
  v27 = a1;
  v28 = 2080;
  v29 = v5;
  v30 = 2048;
  v31 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v9 = a1->identifier;
      v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v10 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_input_available";
      v24 = 2080;
      v25 = v9;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v10;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_input_available";
      v24 = 2080;
      v25 = v16;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v17;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_input_available";
      v24 = 2080;
      v25 = v18;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v19;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v14 = a1->identifier;
      v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v15 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v23 = "nw_protocol_zombie_input_available";
      v24 = 2080;
      v25 = v14;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v15;
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, output_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
}

void nw_protocol_zombie_output_available(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  nw_protocol_identifier *v9;
  nw_protocol_identifier *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  nw_protocol_identifier *v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  nw_protocol_identifier *v25;
  __int16 v26;
  nw_protocol *v27;
  __int16 v28;
  nw_protocol_identifier *v29;
  __int16 v30;
  nw_protocol *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v5 = a2->identifier;
  *(_DWORD *)buf = 136447234;
  v23 = "nw_protocol_zombie_output_available";
  v24 = 2080;
  v25 = identifier;
  v26 = 2048;
  v27 = a1;
  v28 = 2080;
  v29 = v5;
  v30 = 2048;
  v31 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v9 = a1->identifier;
      v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v10 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_output_available";
      v24 = 2080;
      v25 = v9;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v10;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_output_available";
      v24 = 2080;
      v25 = v16;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v17;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_output_available";
      v24 = 2080;
      v25 = v18;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v19;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v14 = a1->identifier;
      v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v15 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v23 = "nw_protocol_zombie_output_available";
      v24 = 2080;
      v25 = v14;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v15;
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, output_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
}

void nw_protocol_zombie_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  nw_protocol_identifier *v9;
  nw_protocol_identifier *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  nw_protocol_identifier *v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  nw_protocol_identifier *v25;
  __int16 v26;
  nw_protocol *v27;
  __int16 v28;
  nw_protocol_identifier *v29;
  __int16 v30;
  nw_protocol *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v5 = a2->identifier;
  *(_DWORD *)buf = 136447234;
  v23 = "nw_protocol_zombie_input_finished";
  v24 = 2080;
  v25 = identifier;
  v26 = 2048;
  v27 = a1;
  v28 = 2080;
  v29 = v5;
  v30 = 2048;
  v31 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v9 = a1->identifier;
      v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v10 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_input_finished";
      v24 = 2080;
      v25 = v9;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v10;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_input_finished";
      v24 = 2080;
      v25 = v16;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v17;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_input_finished";
      v24 = 2080;
      v25 = v18;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v19;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v14 = a1->identifier;
      v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v15 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v23 = "nw_protocol_zombie_input_finished";
      v24 = 2080;
      v25 = v14;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v15;
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, output_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
}

void nw_protocol_zombie_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  nw_protocol_identifier *v9;
  nw_protocol_identifier *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  nw_protocol_identifier *v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  nw_protocol_identifier *v25;
  __int16 v26;
  nw_protocol *v27;
  __int16 v28;
  nw_protocol_identifier *v29;
  __int16 v30;
  nw_protocol *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v5 = a2->identifier;
  *(_DWORD *)buf = 136447234;
  v23 = "nw_protocol_zombie_output_finished";
  v24 = 2080;
  v25 = identifier;
  v26 = 2048;
  v27 = a1;
  v28 = 2080;
  v29 = v5;
  v30 = 2048;
  v31 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v9 = a1->identifier;
      v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v10 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_output_finished";
      v24 = 2080;
      v25 = v9;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v10;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_output_finished";
      v24 = 2080;
      v25 = v16;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v17;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_output_finished";
      v24 = 2080;
      v25 = v18;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v19;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v14 = a1->identifier;
      v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v15 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v23 = "nw_protocol_zombie_output_finished";
      v24 = 2080;
      v25 = v14;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v15;
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, output_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
}

void nw_protocol_zombie_input_flush(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  nw_protocol_identifier *v9;
  nw_protocol_identifier *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  nw_protocol_identifier *v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  nw_protocol_identifier *v25;
  __int16 v26;
  nw_protocol *v27;
  __int16 v28;
  nw_protocol_identifier *v29;
  __int16 v30;
  nw_protocol *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v5 = a2->identifier;
  *(_DWORD *)buf = 136447234;
  v23 = "nw_protocol_zombie_input_flush";
  v24 = 2080;
  v25 = identifier;
  v26 = 2048;
  v27 = a1;
  v28 = 2080;
  v29 = v5;
  v30 = 2048;
  v31 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v9 = a1->identifier;
      v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v10 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_input_flush";
      v24 = 2080;
      v25 = v9;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v10;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_input_flush";
      v24 = 2080;
      v25 = v16;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v17;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_input_flush";
      v24 = 2080;
      v25 = v18;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v19;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v14 = a1->identifier;
      v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v15 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v23 = "nw_protocol_zombie_input_flush";
      v24 = 2080;
      v25 = v14;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v15;
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, output_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
}

uint64_t nw_protocol_zombie_get_input_frames(nw_protocol *a1, nw_protocol *a2, int a3, int a4, int a5, nw_frame_array_s *a6)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  const char *v18;
  char *backtrace_string;
  _BOOL4 v20;
  nw_protocol_identifier *v21;
  nw_protocol_identifier *v22;
  nw_protocol_identifier *v23;
  nw_protocol_identifier *v24;
  nw_protocol_identifier *v25;
  nw_protocol_identifier *v26;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  nw_protocol_identifier *v33;
  __int16 v34;
  nw_protocol *v35;
  __int16 v36;
  nw_protocol_identifier *v37;
  __int16 v38;
  nw_protocol *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v12 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v12 = a2->identifier;
  *(_DWORD *)buf = 136448002;
  v31 = "nw_protocol_zombie_get_input_frames";
  v32 = 2080;
  v33 = identifier;
  v34 = 2048;
  v35 = a1;
  v36 = 2080;
  v37 = v12;
  v38 = 2048;
  v39 = a2;
  v40 = 1024;
  v41 = a3;
  v42 = 1024;
  v43 = a4;
  v44 = 1024;
  v45 = a5;
  v13 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (__nwlog_fault(v13, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = gLogObj;
      v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136448002;
      v31 = "nw_protocol_zombie_get_input_frames";
      v32 = 2080;
      v33 = v16;
      v34 = 2048;
      v35 = a1;
      v36 = 2080;
      v37 = v17;
      v38 = 2048;
      v39 = a2;
      v40 = 1024;
      v41 = a3;
      v42 = 1024;
      v43 = a4;
      v44 = 1024;
      v45 = a5;
      v18 = "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v14, v15, v18, buf, 0x46u);
      goto LABEL_45;
    }
    if (!v28)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = gLogObj;
      v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v23 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v23 = a1->identifier;
      v24 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v24 = a2->identifier;
      *(_DWORD *)buf = 136448002;
      v31 = "nw_protocol_zombie_get_input_frames";
      v32 = 2080;
      v33 = v23;
      v34 = 2048;
      v35 = a1;
      v36 = 2080;
      v37 = v24;
      v38 = 2048;
      v39 = a2;
      v40 = 1024;
      v41 = a3;
      v42 = 1024;
      v43 = a4;
      v44 = 1024;
      v45 = a5;
      v18 = "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u,"
            " backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = gLogObj;
    v15 = type;
    v20 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v20)
        goto LABEL_45;
      v25 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v25 = a1->identifier;
      v26 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v26 = a2->identifier;
      *(_DWORD *)buf = 136448002;
      v31 = "nw_protocol_zombie_get_input_frames";
      v32 = 2080;
      v33 = v25;
      v34 = 2048;
      v35 = a1;
      v36 = 2080;
      v37 = v26;
      v38 = 2048;
      v39 = a2;
      v40 = 1024;
      v41 = a3;
      v42 = 1024;
      v43 = a4;
      v44 = 1024;
      v45 = a5;
      v18 = "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u, no backtrace";
      goto LABEL_44;
    }
    if (v20)
    {
      v21 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v21 = a1->identifier;
      v22 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v22 = a2->identifier;
      *(_DWORD *)buf = 136448258;
      v31 = "nw_protocol_zombie_get_input_frames";
      v32 = 2080;
      v33 = v21;
      v34 = 2048;
      v35 = a1;
      v36 = 2080;
      v37 = v22;
      v38 = 2048;
      v39 = a2;
      v40 = 1024;
      v41 = a3;
      v42 = 1024;
      v43 = a4;
      v44 = 1024;
      v45 = a5;
      v46 = 2082;
      v47 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u, dumping backtrace:%{public}s", buf, 0x50u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v13)
    free(v13);
  return 0;
}

uint64_t nw_protocol_zombie_get_output_frames(nw_protocol *a1, nw_protocol *a2, int a3, int a4, int a5, nw_frame_array_s *a6)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  const char *v18;
  char *backtrace_string;
  _BOOL4 v20;
  nw_protocol_identifier *v21;
  nw_protocol_identifier *v22;
  nw_protocol_identifier *v23;
  nw_protocol_identifier *v24;
  nw_protocol_identifier *v25;
  nw_protocol_identifier *v26;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  nw_protocol_identifier *v33;
  __int16 v34;
  nw_protocol *v35;
  __int16 v36;
  nw_protocol_identifier *v37;
  __int16 v38;
  nw_protocol *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v12 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v12 = a2->identifier;
  *(_DWORD *)buf = 136448002;
  v31 = "nw_protocol_zombie_get_output_frames";
  v32 = 2080;
  v33 = identifier;
  v34 = 2048;
  v35 = a1;
  v36 = 2080;
  v37 = v12;
  v38 = 2048;
  v39 = a2;
  v40 = 1024;
  v41 = a3;
  v42 = 1024;
  v43 = a4;
  v44 = 1024;
  v45 = a5;
  v13 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (__nwlog_fault(v13, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = gLogObj;
      v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136448002;
      v31 = "nw_protocol_zombie_get_output_frames";
      v32 = 2080;
      v33 = v16;
      v34 = 2048;
      v35 = a1;
      v36 = 2080;
      v37 = v17;
      v38 = 2048;
      v39 = a2;
      v40 = 1024;
      v41 = a3;
      v42 = 1024;
      v43 = a4;
      v44 = 1024;
      v45 = a5;
      v18 = "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v14, v15, v18, buf, 0x46u);
      goto LABEL_45;
    }
    if (!v28)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = gLogObj;
      v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v23 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v23 = a1->identifier;
      v24 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v24 = a2->identifier;
      *(_DWORD *)buf = 136448002;
      v31 = "nw_protocol_zombie_get_output_frames";
      v32 = 2080;
      v33 = v23;
      v34 = 2048;
      v35 = a1;
      v36 = 2080;
      v37 = v24;
      v38 = 2048;
      v39 = a2;
      v40 = 1024;
      v41 = a3;
      v42 = 1024;
      v43 = a4;
      v44 = 1024;
      v45 = a5;
      v18 = "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u,"
            " backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = gLogObj;
    v15 = type;
    v20 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v20)
        goto LABEL_45;
      v25 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v25 = a1->identifier;
      v26 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v26 = a2->identifier;
      *(_DWORD *)buf = 136448002;
      v31 = "nw_protocol_zombie_get_output_frames";
      v32 = 2080;
      v33 = v25;
      v34 = 2048;
      v35 = a1;
      v36 = 2080;
      v37 = v26;
      v38 = 2048;
      v39 = a2;
      v40 = 1024;
      v41 = a3;
      v42 = 1024;
      v43 = a4;
      v44 = 1024;
      v45 = a5;
      v18 = "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u, no backtrace";
      goto LABEL_44;
    }
    if (v20)
    {
      v21 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v21 = a1->identifier;
      v22 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v22 = a2->identifier;
      *(_DWORD *)buf = 136448258;
      v31 = "nw_protocol_zombie_get_output_frames";
      v32 = 2080;
      v33 = v21;
      v34 = 2048;
      v35 = a1;
      v36 = 2080;
      v37 = v22;
      v38 = 2048;
      v39 = a2;
      v40 = 1024;
      v41 = a3;
      v42 = 1024;
      v43 = a4;
      v44 = 1024;
      v45 = a5;
      v46 = 2082;
      v47 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u, dumping backtrace:%{public}s", buf, 0x50u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v13)
    free(v13);
  return 0;
}

uint64_t nw_protocol_zombie_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  nw_protocol_identifier *identifier;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  nw_protocol_identifier *v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  nw_protocol_identifier *v13;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  nw_protocol_identifier *v20;
  __int16 v21;
  nw_protocol *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  *(_DWORD *)buf = 136446722;
  v18 = "nw_protocol_zombie_finalize_output_frames";
  v19 = 2080;
  v20 = identifier;
  v21 = 2048;
  v22 = a1;
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v4, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v7 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v7 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v18 = "nw_protocol_zombie_finalize_output_frames";
      v19 = 2080;
      v20 = v7;
      v21 = 2048;
      v22 = a1;
      v8 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_182FBE000, v5, v6, v8, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v15)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v12 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v18 = "nw_protocol_zombie_finalize_output_frames";
      v19 = 2080;
      v20 = v12;
      v21 = 2048;
      v22 = a1;
      v8 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    v6 = type;
    v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v10)
        goto LABEL_30;
      v13 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v13 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v18 = "nw_protocol_zombie_finalize_output_frames";
      v19 = 2080;
      v20 = v13;
      v21 = 2048;
      v22 = a1;
      v8 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v10)
    {
      v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v11 = a1->identifier;
      *(_DWORD *)buf = 136446978;
      v18 = "nw_protocol_zombie_finalize_output_frames";
      v19 = 2080;
      v20 = v11;
      v21 = 2048;
      v22 = a1;
      v23 = 2082;
      v24 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v4)
    free(v4);
  return 0;
}

void nw_protocol_zombie_get_message_properties(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = "invalid";
  if (a1 && *(_QWORD *)(a1 + 16))
    v4 = *(const char **)(a1 + 16);
  v5 = "invalid";
  if (a2 && *(_QWORD *)(a2 + 16))
    v5 = *(const char **)(a2 + 16);
  *(_DWORD *)buf = 136447234;
  v23 = "nw_protocol_zombie_get_message_properties";
  v24 = 2080;
  v25 = v4;
  v26 = 2048;
  v27 = a1;
  v28 = 2080;
  v29 = v5;
  v30 = 2048;
  v31 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v9 = *(const char **)(a1 + 16);
      v10 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v10 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_get_message_properties";
      v24 = 2080;
      v25 = v9;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v10;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, input_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v16 = *(const char **)(a1 + 16);
      v17 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v17 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_get_message_properties";
      v24 = 2080;
      v25 = v16;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v17;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, input_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v18 = *(const char **)(a1 + 16);
      v19 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v19 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_get_message_properties";
      v24 = 2080;
      v25 = v18;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v19;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, input_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v14 = *(const char **)(a1 + 16);
      v15 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v15 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447490;
      v23 = "nw_protocol_zombie_get_message_properties";
      v24 = 2080;
      v25 = v14;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v15;
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, input_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
}

void nw_protocol_zombie_link_state(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = "invalid";
  if (a1 && *(_QWORD *)(a1 + 16))
    v4 = *(const char **)(a1 + 16);
  v5 = "invalid";
  if (a2 && *(_QWORD *)(a2 + 16))
    v5 = *(const char **)(a2 + 16);
  *(_DWORD *)buf = 136447234;
  v23 = "nw_protocol_zombie_link_state";
  v24 = 2080;
  v25 = v4;
  v26 = 2048;
  v27 = a1;
  v28 = 2080;
  v29 = v5;
  v30 = 2048;
  v31 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v9 = *(const char **)(a1 + 16);
      v10 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v10 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_link_state";
      v24 = 2080;
      v25 = v9;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v10;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v16 = *(const char **)(a1 + 16);
      v17 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v17 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_link_state";
      v24 = 2080;
      v25 = v16;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v17;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v18 = *(const char **)(a1 + 16);
      v19 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v19 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_link_state";
      v24 = 2080;
      v25 = v18;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v19;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v14 = *(const char **)(a1 + 16);
      v15 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v15 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447490;
      v23 = "nw_protocol_zombie_link_state";
      v24 = 2080;
      v25 = v14;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v15;
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, other_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
}

uint64_t nw_protocol_zombie_get_parameters(nw_protocol *a1)
{
  nw_protocol_identifier *identifier;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  nw_protocol_identifier *v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  nw_protocol_identifier *v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  nw_protocol_identifier *v19;
  __int16 v20;
  nw_protocol *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  *(_DWORD *)buf = 136446722;
  v17 = "nw_protocol_zombie_get_parameters";
  v18 = 2080;
  v19 = identifier;
  v20 = 2048;
  v21 = a1;
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v6 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_parameters";
      v18 = 2080;
      v19 = v6;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_182FBE000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v11 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_parameters";
      v18 = 2080;
      v19 = v11;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    v5 = type;
    v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9)
        goto LABEL_30;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v12 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_parameters";
      v18 = 2080;
      v19 = v12;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v10 = a1->identifier;
      *(_DWORD *)buf = 136446978;
      v17 = "nw_protocol_zombie_get_parameters";
      v18 = 2080;
      v19 = v10;
      v20 = 2048;
      v21 = a1;
      v22 = 2082;
      v23 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_zombie_get_local_endpoint(nw_protocol *a1)
{
  nw_protocol_identifier *identifier;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  nw_protocol_identifier *v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  nw_protocol_identifier *v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  nw_protocol_identifier *v19;
  __int16 v20;
  nw_protocol *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  *(_DWORD *)buf = 136446722;
  v17 = "nw_protocol_zombie_get_local_endpoint";
  v18 = 2080;
  v19 = identifier;
  v20 = 2048;
  v21 = a1;
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v6 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_local_endpoint";
      v18 = 2080;
      v19 = v6;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_182FBE000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v11 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_local_endpoint";
      v18 = 2080;
      v19 = v11;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    v5 = type;
    v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9)
        goto LABEL_30;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v12 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_local_endpoint";
      v18 = 2080;
      v19 = v12;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v10 = a1->identifier;
      *(_DWORD *)buf = 136446978;
      v17 = "nw_protocol_zombie_get_local_endpoint";
      v18 = 2080;
      v19 = v10;
      v20 = 2048;
      v21 = a1;
      v22 = 2082;
      v23 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_zombie_get_remote_endpoint(nw_protocol *a1)
{
  nw_protocol_identifier *identifier;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  nw_protocol_identifier *v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  nw_protocol_identifier *v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  nw_protocol_identifier *v19;
  __int16 v20;
  nw_protocol *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  *(_DWORD *)buf = 136446722;
  v17 = "nw_protocol_zombie_get_remote_endpoint";
  v18 = 2080;
  v19 = identifier;
  v20 = 2048;
  v21 = a1;
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v6 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_remote_endpoint";
      v18 = 2080;
      v19 = v6;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_182FBE000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v11 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_remote_endpoint";
      v18 = 2080;
      v19 = v11;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    v5 = type;
    v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9)
        goto LABEL_30;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v12 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_remote_endpoint";
      v18 = 2080;
      v19 = v12;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v10 = a1->identifier;
      *(_DWORD *)buf = 136446978;
      v17 = "nw_protocol_zombie_get_remote_endpoint";
      v18 = 2080;
      v19 = v10;
      v20 = 2048;
      v21 = a1;
      v22 = 2082;
      v23 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_zombie_get_path(nw_protocol *a1)
{
  nw_protocol_identifier *identifier;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  nw_protocol_identifier *v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  nw_protocol_identifier *v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  nw_protocol_identifier *v19;
  __int16 v20;
  nw_protocol *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  *(_DWORD *)buf = 136446722;
  v17 = "nw_protocol_zombie_get_path";
  v18 = 2080;
  v19 = identifier;
  v20 = 2048;
  v21 = a1;
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v6 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_path";
      v18 = 2080;
      v19 = v6;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_182FBE000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v11 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_path";
      v18 = 2080;
      v19 = v11;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    v5 = type;
    v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9)
        goto LABEL_30;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v12 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_path";
      v18 = 2080;
      v19 = v12;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v10 = a1->identifier;
      *(_DWORD *)buf = 136446978;
      v17 = "nw_protocol_zombie_get_path";
      v18 = 2080;
      v19 = v10;
      v20 = 2048;
      v21 = a1;
      v22 = 2082;
      v23 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_zombie_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  nw_protocol_identifier *v20;
  nw_protocol_identifier *v21;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  nw_protocol_identifier *v28;
  __int16 v29;
  nw_protocol *v30;
  __int16 v31;
  nw_protocol_identifier *v32;
  __int16 v33;
  nw_protocol *v34;
  __int16 v35;
  nw_path *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v7 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v7 = a2->identifier;
  *(_DWORD *)buf = 136447490;
  v26 = "nw_protocol_zombie_updated_path";
  v27 = 2080;
  v28 = identifier;
  v29 = 2048;
  v30 = a1;
  v31 = 2080;
  v32 = v7;
  v33 = 2048;
  v34 = a2;
  v35 = 2112;
  v36 = a3;
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v11 = a1->identifier;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v12 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v26 = "nw_protocol_zombie_updated_path";
      v27 = 2080;
      v28 = v11;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v12;
      v33 = 2048;
      v34 = a2;
      v35 = 2112;
      v36 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, path %@";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v9, v10, v13, buf, 0x3Eu);
      goto LABEL_45;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v26 = "nw_protocol_zombie_updated_path";
      v27 = 2080;
      v28 = v18;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v19;
      v33 = 2048;
      v34 = a2;
      v35 = 2112;
      v36 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, path %@, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v15)
        goto LABEL_45;
      v20 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v20 = a1->identifier;
      v21 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v21 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v26 = "nw_protocol_zombie_updated_path";
      v27 = 2080;
      v28 = v20;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v21;
      v33 = 2048;
      v34 = a2;
      v35 = 2112;
      v36 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, path %@, no backtrace";
      goto LABEL_44;
    }
    if (v15)
    {
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447746;
      v26 = "nw_protocol_zombie_updated_path";
      v27 = 2080;
      v28 = v16;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v17;
      v33 = 2048;
      v34 = a2;
      v35 = 2112;
      v36 = a3;
      v37 = 2082;
      v38 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s protocol %s:%p, other_protocol %s:%p, path %@, dumping backtrace:%{public}s", buf, 0x48u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v8)
    free(v8);
  return 0;
}

uint64_t nw_protocol_zombie_get_output_local_endpoint(nw_protocol *a1)
{
  nw_protocol_identifier *identifier;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  nw_protocol_identifier *v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  nw_protocol_identifier *v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  nw_protocol_identifier *v19;
  __int16 v20;
  nw_protocol *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  *(_DWORD *)buf = 136446722;
  v17 = "nw_protocol_zombie_get_output_local_endpoint";
  v18 = 2080;
  v19 = identifier;
  v20 = 2048;
  v21 = a1;
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v6 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_output_local_endpoint";
      v18 = 2080;
      v19 = v6;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_182FBE000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v11 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_output_local_endpoint";
      v18 = 2080;
      v19 = v11;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    v5 = type;
    v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9)
        goto LABEL_30;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v12 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_output_local_endpoint";
      v18 = 2080;
      v19 = v12;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v10 = a1->identifier;
      *(_DWORD *)buf = 136446978;
      v17 = "nw_protocol_zombie_get_output_local_endpoint";
      v18 = 2080;
      v19 = v10;
      v20 = 2048;
      v21 = a1;
      v22 = 2082;
      v23 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_zombie_get_output_interface(nw_protocol *a1)
{
  nw_protocol_identifier *identifier;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  nw_protocol_identifier *v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  nw_protocol_identifier *v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  nw_protocol_identifier *v19;
  __int16 v20;
  nw_protocol *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  *(_DWORD *)buf = 136446722;
  v17 = "nw_protocol_zombie_get_output_interface";
  v18 = 2080;
  v19 = identifier;
  v20 = 2048;
  v21 = a1;
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v6 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_output_interface";
      v18 = 2080;
      v19 = v6;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_182FBE000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v11 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_output_interface";
      v18 = 2080;
      v19 = v11;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    v5 = type;
    v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9)
        goto LABEL_30;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v12 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_get_output_interface";
      v18 = 2080;
      v19 = v12;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v10 = a1->identifier;
      *(_DWORD *)buf = 136446978;
      v17 = "nw_protocol_zombie_get_output_interface";
      v18 = 2080;
      v19 = v10;
      v20 = 2048;
      v21 = a1;
      v22 = 2082;
      v23 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_zombie_connect(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  nw_protocol_identifier *v9;
  nw_protocol_identifier *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  nw_protocol_identifier *v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  nw_protocol_identifier *v26;
  __int16 v27;
  nw_protocol *v28;
  __int16 v29;
  nw_protocol_identifier *v30;
  __int16 v31;
  nw_protocol *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v5 = a2->identifier;
  *(_DWORD *)buf = 136447234;
  v24 = "nw_protocol_zombie_connect";
  v25 = 2080;
  v26 = identifier;
  v27 = 2048;
  v28 = a1;
  v29 = 2080;
  v30 = v5;
  v31 = 2048;
  v32 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v6, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v9 = a1->identifier;
      v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v10 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v24 = "nw_protocol_zombie_connect";
      v25 = 2080;
      v26 = v9;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v10;
      v31 = 2048;
      v32 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v21)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v24 = "nw_protocol_zombie_connect";
      v25 = 2080;
      v26 = v16;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v17;
      v31 = 2048;
      v32 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v24 = "nw_protocol_zombie_connect";
      v25 = 2080;
      v26 = v18;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v19;
      v31 = 2048;
      v32 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v14 = a1->identifier;
      v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v15 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v24 = "nw_protocol_zombie_connect";
      v25 = 2080;
      v26 = v14;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v15;
      v31 = 2048;
      v32 = a2;
      v33 = 2082;
      v34 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, other_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
  return 0;
}

void nw_protocol_zombie_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  nw_protocol_identifier *v9;
  nw_protocol_identifier *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  nw_protocol_identifier *v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  nw_protocol_identifier *v25;
  __int16 v26;
  nw_protocol *v27;
  __int16 v28;
  nw_protocol_identifier *v29;
  __int16 v30;
  nw_protocol *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v5 = a2->identifier;
  *(_DWORD *)buf = 136447234;
  v23 = "nw_protocol_zombie_disconnect";
  v24 = 2080;
  v25 = identifier;
  v26 = 2048;
  v27 = a1;
  v28 = 2080;
  v29 = v5;
  v30 = 2048;
  v31 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v9 = a1->identifier;
      v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v10 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_disconnect";
      v24 = 2080;
      v25 = v9;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v10;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_disconnect";
      v24 = 2080;
      v25 = v16;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v17;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_disconnect";
      v24 = 2080;
      v25 = v18;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v19;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v14 = a1->identifier;
      v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v15 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v23 = "nw_protocol_zombie_disconnect";
      v24 = 2080;
      v25 = v14;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v15;
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, other_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
}

void nw_protocol_zombie_connected(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  nw_protocol_identifier *v9;
  nw_protocol_identifier *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  nw_protocol_identifier *v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  nw_protocol_identifier *v25;
  __int16 v26;
  nw_protocol *v27;
  __int16 v28;
  nw_protocol_identifier *v29;
  __int16 v30;
  nw_protocol *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v5 = a2->identifier;
  *(_DWORD *)buf = 136447234;
  v23 = "nw_protocol_zombie_connected";
  v24 = 2080;
  v25 = identifier;
  v26 = 2048;
  v27 = a1;
  v28 = 2080;
  v29 = v5;
  v30 = 2048;
  v31 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v9 = a1->identifier;
      v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v10 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_connected";
      v24 = 2080;
      v25 = v9;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v10;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_connected";
      v24 = 2080;
      v25 = v16;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v17;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_connected";
      v24 = 2080;
      v25 = v18;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v19;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v14 = a1->identifier;
      v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v15 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v23 = "nw_protocol_zombie_connected";
      v24 = 2080;
      v25 = v14;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v15;
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, other_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
}

void nw_protocol_zombie_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  nw_protocol_identifier *v9;
  nw_protocol_identifier *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  nw_protocol_identifier *v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  nw_protocol_identifier *v25;
  __int16 v26;
  nw_protocol *v27;
  __int16 v28;
  nw_protocol_identifier *v29;
  __int16 v30;
  nw_protocol *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v5 = a2->identifier;
  *(_DWORD *)buf = 136447234;
  v23 = "nw_protocol_zombie_disconnected";
  v24 = 2080;
  v25 = identifier;
  v26 = 2048;
  v27 = a1;
  v28 = 2080;
  v29 = v5;
  v30 = 2048;
  v31 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v9 = a1->identifier;
      v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v10 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_disconnected";
      v24 = 2080;
      v25 = v9;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v10;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_disconnected";
      v24 = 2080;
      v25 = v16;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v17;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v23 = "nw_protocol_zombie_disconnected";
      v24 = 2080;
      v25 = v18;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v19;
      v30 = 2048;
      v31 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v14 = a1->identifier;
      v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v15 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v23 = "nw_protocol_zombie_disconnected";
      v24 = 2080;
      v25 = v14;
      v26 = 2048;
      v27 = a1;
      v28 = 2080;
      v29 = v15;
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, other_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
}

void nw_protocol_zombie_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  nw_protocol_identifier *v20;
  nw_protocol_identifier *v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  nw_protocol_identifier *v27;
  __int16 v28;
  nw_protocol *v29;
  __int16 v30;
  nw_protocol_identifier *v31;
  __int16 v32;
  nw_protocol *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v7 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v7 = a2->identifier;
  *(_DWORD *)buf = 136447490;
  v25 = "nw_protocol_zombie_error";
  v26 = 2080;
  v27 = identifier;
  v28 = 2048;
  v29 = a1;
  v30 = 2080;
  v31 = v7;
  v32 = 2048;
  v33 = a2;
  v34 = 1024;
  v35 = a3;
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (__nwlog_fault(v8, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v11 = a1->identifier;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v12 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v25 = "nw_protocol_zombie_error";
      v26 = 2080;
      v27 = v11;
      v28 = 2048;
      v29 = a1;
      v30 = 2080;
      v31 = v12;
      v32 = 2048;
      v33 = a2;
      v34 = 1024;
      v35 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, error %{errno}d";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v9, v10, v13, buf, 0x3Au);
      goto LABEL_45;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v25 = "nw_protocol_zombie_error";
      v26 = 2080;
      v27 = v18;
      v28 = 2048;
      v29 = a1;
      v30 = 2080;
      v31 = v19;
      v32 = 2048;
      v33 = a2;
      v34 = 1024;
      v35 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, error %{errno}d, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v15)
        goto LABEL_45;
      v20 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v20 = a1->identifier;
      v21 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v21 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v25 = "nw_protocol_zombie_error";
      v26 = 2080;
      v27 = v20;
      v28 = 2048;
      v29 = a1;
      v30 = 2080;
      v31 = v21;
      v32 = 2048;
      v33 = a2;
      v34 = 1024;
      v35 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, error %{errno}d, no backtrace";
      goto LABEL_44;
    }
    if (v15)
    {
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447746;
      v25 = "nw_protocol_zombie_error";
      v26 = 2080;
      v27 = v16;
      v28 = 2048;
      v29 = a1;
      v30 = 2080;
      v31 = v17;
      v32 = 2048;
      v33 = a2;
      v34 = 1024;
      v35 = a3;
      v36 = 2082;
      v37 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s protocol %s:%p, other_protocol %s:%p, error %{errno}d, dumping backtrace:%{public}s", buf, 0x44u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v8)
    free(v8);
}

uint64_t nw_protocol_zombie_reset(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  nw_protocol_identifier *v9;
  nw_protocol_identifier *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  nw_protocol_identifier *v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  nw_protocol_identifier *v26;
  __int16 v27;
  nw_protocol *v28;
  __int16 v29;
  nw_protocol_identifier *v30;
  __int16 v31;
  nw_protocol *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v5 = a2->identifier;
  *(_DWORD *)buf = 136447234;
  v24 = "nw_protocol_zombie_reset";
  v25 = 2080;
  v26 = identifier;
  v27 = 2048;
  v28 = a1;
  v29 = 2080;
  v30 = v5;
  v31 = 2048;
  v32 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v6, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v9 = a1->identifier;
      v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v10 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v24 = "nw_protocol_zombie_reset";
      v25 = 2080;
      v26 = v9;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v10;
      v31 = 2048;
      v32 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v21)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v24 = "nw_protocol_zombie_reset";
      v25 = 2080;
      v26 = v16;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v17;
      v31 = 2048;
      v32 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v24 = "nw_protocol_zombie_reset";
      v25 = 2080;
      v26 = v18;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v19;
      v31 = 2048;
      v32 = a2;
      v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v14 = a1->identifier;
      v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v15 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v24 = "nw_protocol_zombie_reset";
      v25 = 2080;
      v26 = v14;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v15;
      v31 = 2048;
      v32 = a2;
      v33 = 2082;
      v34 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, other_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
  return 0;
}

uint64_t nw_protocol_zombie_supports_external_data(nw_protocol *a1)
{
  nw_protocol_identifier *identifier;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  nw_protocol_identifier *v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  nw_protocol_identifier *v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  nw_protocol_identifier *v19;
  __int16 v20;
  nw_protocol *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  *(_DWORD *)buf = 136446722;
  v17 = "nw_protocol_zombie_supports_external_data";
  v18 = 2080;
  v19 = identifier;
  v20 = 2048;
  v21 = a1;
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v6 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_supports_external_data";
      v18 = 2080;
      v19 = v6;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_182FBE000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v11 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_supports_external_data";
      v18 = 2080;
      v19 = v11;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    v5 = type;
    v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9)
        goto LABEL_30;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v12 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v17 = "nw_protocol_zombie_supports_external_data";
      v18 = 2080;
      v19 = v12;
      v20 = 2048;
      v21 = a1;
      v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v10 = a1->identifier;
      *(_DWORD *)buf = 136446978;
      v17 = "nw_protocol_zombie_supports_external_data";
      v18 = 2080;
      v19 = v10;
      v20 = 2048;
      v21 = a1;
      v22 = 2082;
      v23 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_zombie_waiting_for_output(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  nw_protocol_identifier *v9;
  nw_protocol_identifier *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  nw_protocol_identifier *v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  nw_protocol_identifier *v18;
  nw_protocol_identifier *v19;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  nw_protocol_identifier *v26;
  __int16 v27;
  nw_protocol *v28;
  __int16 v29;
  nw_protocol_identifier *v30;
  __int16 v31;
  nw_protocol *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier)
    v5 = a2->identifier;
  *(_DWORD *)buf = 136447234;
  v24 = "nw_protocol_zombie_waiting_for_output";
  v25 = 2080;
  v26 = identifier;
  v27 = 2048;
  v28 = a1;
  v29 = 2080;
  v30 = v5;
  v31 = 2048;
  v32 = a2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v6, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v9 = a1->identifier;
      v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v10 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v24 = "nw_protocol_zombie_waiting_for_output";
      v25 = 2080;
      v26 = v9;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v10;
      v31 = 2048;
      v32 = a2;
      v11 = "%{public}s protocol %s:%p, input_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v21)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v16 = a1->identifier;
      v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v17 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v24 = "nw_protocol_zombie_waiting_for_output";
      v25 = 2080;
      v26 = v16;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v17;
      v31 = 2048;
      v32 = a2;
      v11 = "%{public}s protocol %s:%p, input_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_45;
      v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v18 = a1->identifier;
      v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v19 = a2->identifier;
      *(_DWORD *)buf = 136447234;
      v24 = "nw_protocol_zombie_waiting_for_output";
      v25 = 2080;
      v26 = v18;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v19;
      v31 = 2048;
      v32 = a2;
      v11 = "%{public}s protocol %s:%p, input_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v14 = a1->identifier;
      v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier)
        v15 = a2->identifier;
      *(_DWORD *)buf = 136447490;
      v24 = "nw_protocol_zombie_waiting_for_output";
      v25 = 2080;
      v26 = v14;
      v27 = 2048;
      v28 = a1;
      v29 = 2080;
      v30 = v15;
      v31 = 2048;
      v32 = a2;
      v33 = 2082;
      v34 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %s:%p, input_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6)
    free(v6);
  return 0;
}

uint64_t nw_protocol_zombie_copy_info(uint64_t a1, int a2)
{
  const char *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  const char *v12;
  const char *v13;
  const char *v14;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = "invalid";
  if (a1 && *(_QWORD *)(a1 + 16))
    v4 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446978;
  v19 = "nw_protocol_zombie_copy_info";
  v20 = 2080;
  v21 = v4;
  v22 = 2048;
  v23 = a1;
  v24 = 1024;
  v25 = a2;
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v5, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = gLogObj;
      v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v8 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v8 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446978;
      v19 = "nw_protocol_zombie_copy_info";
      v20 = 2080;
      v21 = v8;
      v22 = 2048;
      v23 = a1;
      v24 = 1024;
      v25 = a2;
      v9 = "%{public}s protocol %s:%p, type %d";
LABEL_29:
      _os_log_impl(&dword_182FBE000, v6, v7, v9, buf, 0x26u);
      goto LABEL_30;
    }
    if (!v16)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = gLogObj;
      v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v13 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v13 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446978;
      v19 = "nw_protocol_zombie_copy_info";
      v20 = 2080;
      v21 = v13;
      v22 = 2048;
      v23 = a1;
      v24 = 1024;
      v25 = a2;
      v9 = "%{public}s protocol %s:%p, type %d, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = gLogObj;
    v7 = type;
    v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v11)
        goto LABEL_30;
      v14 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v14 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446978;
      v19 = "nw_protocol_zombie_copy_info";
      v20 = 2080;
      v21 = v14;
      v22 = 2048;
      v23 = a1;
      v24 = 1024;
      v25 = a2;
      v9 = "%{public}s protocol %s:%p, type %d, no backtrace";
      goto LABEL_29;
    }
    if (v11)
    {
      v12 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v12 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136447234;
      v19 = "nw_protocol_zombie_copy_info";
      v20 = 2080;
      v21 = v12;
      v22 = 2048;
      v23 = a1;
      v24 = 1024;
      v25 = a2;
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s protocol %s:%p, type %d, dumping backtrace:%{public}s", buf, 0x30u);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v5)
    free(v5);
  return 0;
}

uint64_t nw_protocol_zombie_register_notification(uint64_t a1, uint64_t a2, int a3)
{
  const char *v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  const char *v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = "invalid";
  if (a1 && *(_QWORD *)(a1 + 16))
    v6 = *(const char **)(a1 + 16);
  v7 = "invalid";
  if (a2 && *(_QWORD *)(a2 + 16))
    v7 = *(const char **)(a2 + 16);
  *(_DWORD *)buf = 136447490;
  v26 = "nw_protocol_zombie_register_notification";
  v27 = 2080;
  v28 = v6;
  v29 = 2048;
  v30 = a1;
  v31 = 2080;
  v32 = v7;
  v33 = 2048;
  v34 = a2;
  v35 = 1024;
  v36 = a3;
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v11 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v11 = *(const char **)(a1 + 16);
      v12 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v12 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447490;
      v26 = "nw_protocol_zombie_register_notification";
      v27 = 2080;
      v28 = v11;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v12;
      v33 = 2048;
      v34 = a2;
      v35 = 1024;
      v36 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v9, v10, v13, buf, 0x3Au);
      goto LABEL_45;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v18 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v18 = *(const char **)(a1 + 16);
      v19 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v19 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447490;
      v26 = "nw_protocol_zombie_register_notification";
      v27 = 2080;
      v28 = v18;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v19;
      v33 = 2048;
      v34 = a2;
      v35 = 1024;
      v36 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v15)
        goto LABEL_45;
      v20 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v20 = *(const char **)(a1 + 16);
      v21 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v21 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447490;
      v26 = "nw_protocol_zombie_register_notification";
      v27 = 2080;
      v28 = v20;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v21;
      v33 = 2048;
      v34 = a2;
      v35 = 1024;
      v36 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, no backtrace";
      goto LABEL_44;
    }
    if (v15)
    {
      v16 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v16 = *(const char **)(a1 + 16);
      v17 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v17 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447746;
      v26 = "nw_protocol_zombie_register_notification";
      v27 = 2080;
      v28 = v16;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v17;
      v33 = 2048;
      v34 = a2;
      v35 = 1024;
      v36 = a3;
      v37 = 2082;
      v38 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, dumping backtrace:%{public}s", buf, 0x44u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v8)
    free(v8);
  return 0;
}

uint64_t nw_protocol_zombie_unregister_notification(uint64_t a1, uint64_t a2, int a3)
{
  const char *v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  const char *v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = "invalid";
  if (a1 && *(_QWORD *)(a1 + 16))
    v6 = *(const char **)(a1 + 16);
  v7 = "invalid";
  if (a2 && *(_QWORD *)(a2 + 16))
    v7 = *(const char **)(a2 + 16);
  *(_DWORD *)buf = 136447490;
  v26 = "nw_protocol_zombie_unregister_notification";
  v27 = 2080;
  v28 = v6;
  v29 = 2048;
  v30 = a1;
  v31 = 2080;
  v32 = v7;
  v33 = 2048;
  v34 = a2;
  v35 = 1024;
  v36 = a3;
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v11 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v11 = *(const char **)(a1 + 16);
      v12 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v12 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447490;
      v26 = "nw_protocol_zombie_unregister_notification";
      v27 = 2080;
      v28 = v11;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v12;
      v33 = 2048;
      v34 = a2;
      v35 = 1024;
      v36 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v9, v10, v13, buf, 0x3Au);
      goto LABEL_45;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v18 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v18 = *(const char **)(a1 + 16);
      v19 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v19 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447490;
      v26 = "nw_protocol_zombie_unregister_notification";
      v27 = 2080;
      v28 = v18;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v19;
      v33 = 2048;
      v34 = a2;
      v35 = 1024;
      v36 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v15)
        goto LABEL_45;
      v20 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v20 = *(const char **)(a1 + 16);
      v21 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v21 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447490;
      v26 = "nw_protocol_zombie_unregister_notification";
      v27 = 2080;
      v28 = v20;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v21;
      v33 = 2048;
      v34 = a2;
      v35 = 1024;
      v36 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, no backtrace";
      goto LABEL_44;
    }
    if (v15)
    {
      v16 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v16 = *(const char **)(a1 + 16);
      v17 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v17 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447746;
      v26 = "nw_protocol_zombie_unregister_notification";
      v27 = 2080;
      v28 = v16;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v17;
      v33 = 2048;
      v34 = a2;
      v35 = 1024;
      v36 = a3;
      v37 = 2082;
      v38 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, dumping backtrace:%{public}s", buf, 0x44u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v8)
    free(v8);
  return 0;
}

void nw_protocol_zombie_notify(uint64_t a1, uint64_t a2, int a3)
{
  const char *v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  const char *v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = "invalid";
  if (a1 && *(_QWORD *)(a1 + 16))
    v6 = *(const char **)(a1 + 16);
  v7 = "invalid";
  if (a2 && *(_QWORD *)(a2 + 16))
    v7 = *(const char **)(a2 + 16);
  *(_DWORD *)buf = 136447490;
  v25 = "nw_protocol_zombie_notify";
  v26 = 2080;
  v27 = v6;
  v28 = 2048;
  v29 = a1;
  v30 = 2080;
  v31 = v7;
  v32 = 2048;
  v33 = a2;
  v34 = 1024;
  v35 = a3;
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (__nwlog_fault(v8, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v11 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v11 = *(const char **)(a1 + 16);
      v12 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v12 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447490;
      v25 = "nw_protocol_zombie_notify";
      v26 = 2080;
      v27 = v11;
      v28 = 2048;
      v29 = a1;
      v30 = 2080;
      v31 = v12;
      v32 = 2048;
      v33 = a2;
      v34 = 1024;
      v35 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v9, v10, v13, buf, 0x3Au);
      goto LABEL_45;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      v18 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v18 = *(const char **)(a1 + 16);
      v19 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v19 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447490;
      v25 = "nw_protocol_zombie_notify";
      v26 = 2080;
      v27 = v18;
      v28 = 2048;
      v29 = a1;
      v30 = 2080;
      v31 = v19;
      v32 = 2048;
      v33 = a2;
      v34 = 1024;
      v35 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v15)
        goto LABEL_45;
      v20 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v20 = *(const char **)(a1 + 16);
      v21 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v21 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447490;
      v25 = "nw_protocol_zombie_notify";
      v26 = 2080;
      v27 = v20;
      v28 = 2048;
      v29 = a1;
      v30 = 2080;
      v31 = v21;
      v32 = 2048;
      v33 = a2;
      v34 = 1024;
      v35 = a3;
      v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, no backtrace";
      goto LABEL_44;
    }
    if (v15)
    {
      v16 = "invalid";
      if (a1 && *(_QWORD *)(a1 + 16))
        v16 = *(const char **)(a1 + 16);
      v17 = "invalid";
      if (a2 && *(_QWORD *)(a2 + 16))
        v17 = *(const char **)(a2 + 16);
      *(_DWORD *)buf = 136447746;
      v25 = "nw_protocol_zombie_notify";
      v26 = 2080;
      v27 = v16;
      v28 = 2048;
      v29 = a1;
      v30 = 2080;
      v31 = v17;
      v32 = 2048;
      v33 = a2;
      v34 = 1024;
      v35 = a3;
      v36 = 2082;
      v37 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, dumping backtrace:%{public}s", buf, 0x44u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v8)
    free(v8);
}

uint64_t nw_protocol_zombie_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  nw_protocol_identifier *identifier;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  nw_protocol_identifier *v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  nw_protocol_identifier *v13;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  nw_protocol_identifier *v20;
  __int16 v21;
  nw_protocol *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  *(_DWORD *)buf = 136446722;
  v18 = "nw_protocol_zombie_add_listen_handler";
  v19 = 2080;
  v20 = identifier;
  v21 = 2048;
  v22 = a1;
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v4, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v7 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v7 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v18 = "nw_protocol_zombie_add_listen_handler";
      v19 = 2080;
      v20 = v7;
      v21 = 2048;
      v22 = a1;
      v8 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_182FBE000, v5, v6, v8, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v15)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v12 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v18 = "nw_protocol_zombie_add_listen_handler";
      v19 = 2080;
      v20 = v12;
      v21 = 2048;
      v22 = a1;
      v8 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    v6 = type;
    v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v10)
        goto LABEL_30;
      v13 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v13 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v18 = "nw_protocol_zombie_add_listen_handler";
      v19 = 2080;
      v20 = v13;
      v21 = 2048;
      v22 = a1;
      v8 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v10)
    {
      v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v11 = a1->identifier;
      *(_DWORD *)buf = 136446978;
      v18 = "nw_protocol_zombie_add_listen_handler";
      v19 = 2080;
      v20 = v11;
      v21 = 2048;
      v22 = a1;
      v23 = 2082;
      v24 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v4)
    free(v4);
  return 0;
}

uint64_t nw_protocol_zombie_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  nw_protocol_identifier *identifier;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  nw_protocol_identifier *v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  nw_protocol_identifier *v13;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  nw_protocol_identifier *v20;
  __int16 v21;
  nw_protocol *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier)
    identifier = a1->identifier;
  *(_DWORD *)buf = 136446722;
  v18 = "nw_protocol_zombie_remove_listen_handler";
  v19 = 2080;
  v20 = identifier;
  v21 = 2048;
  v22 = a1;
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v4, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v7 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v7 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v18 = "nw_protocol_zombie_remove_listen_handler";
      v19 = 2080;
      v20 = v7;
      v21 = 2048;
      v22 = a1;
      v8 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_182FBE000, v5, v6, v8, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v15)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_30;
      v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v12 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v18 = "nw_protocol_zombie_remove_listen_handler";
      v19 = 2080;
      v20 = v12;
      v21 = 2048;
      v22 = a1;
      v8 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    v6 = type;
    v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v10)
        goto LABEL_30;
      v13 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v13 = a1->identifier;
      *(_DWORD *)buf = 136446722;
      v18 = "nw_protocol_zombie_remove_listen_handler";
      v19 = 2080;
      v20 = v13;
      v21 = 2048;
      v22 = a1;
      v8 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v10)
    {
      v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier)
        v11 = a1->identifier;
      *(_DWORD *)buf = 136446978;
      v18 = "nw_protocol_zombie_remove_listen_handler";
      v19 = 2080;
      v20 = v11;
      v21 = 2048;
      v22 = a1;
      v23 = 2082;
      v24 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v4)
    free(v4);
  return 0;
}

uint64_t nw_protocol_upcast(uint64_t a1)
{
  if (a1)
    return a1 - 96;
  else
    return 0;
}

void *nw_protocol_new_objc(Class cls, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8;
  size_t InstanceSize;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;
  const char *v16;
  objc_class *Class;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *backtrace_string;
  _BOOL4 v28;
  char *v29;
  _BOOL4 v30;
  const char *v31;
  _BOOL4 v32;
  char *v33;
  _BOOL4 v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (!cls)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_new_objc";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v19, &type, &v35))
      goto LABEL_67;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_new_objc";
      v22 = "%{public}s called with null cls";
    }
    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v28 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_protocol_new_objc";
          v39 = 2082;
          v40 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null cls, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_67:
        if (v19)
          goto LABEL_68;
        return 0;
      }
      if (!v28)
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_new_objc";
      v22 = "%{public}s called with null cls, no backtrace";
    }
    else
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_new_objc";
      v22 = "%{public}s called with null cls, backtrace limit exceeded";
    }
    goto LABEL_66;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_new_objc";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v19, &type, &v35))
      goto LABEL_67;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v35)
      {
        v20 = __nwlog_obj();
        v21 = type;
        if (!os_log_type_enabled(v20, type))
          goto LABEL_67;
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_new_objc";
        v22 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_66;
      }
      v29 = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v30 = os_log_type_enabled(v20, type);
      if (!v29)
      {
        if (!v30)
          goto LABEL_67;
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_new_objc";
        v22 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_66;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        v38 = "nw_protocol_new_objc";
        v39 = 2082;
        v40 = v29;
        v31 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
LABEL_44:
        _os_log_impl(&dword_182FBE000, v20, v21, v31, buf, 0x16u);
      }
LABEL_45:
      free(v29);
      if (v19)
      {
LABEL_68:
        free(v19);
        return 0;
      }
      return 0;
    }
    v20 = __nwlog_obj();
    v21 = type;
    if (!os_log_type_enabled(v20, type))
      goto LABEL_67;
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_new_objc";
    v22 = "%{public}s called with null parameters";
LABEL_66:
    _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
    goto LABEL_67;
  }
  {
    nw_protocol_new_objc::_objc_initiateDealloc = (uint64_t)sel_registerName("_objc_initiateDealloc");
  }
  if (!class_getInstanceMethod(cls, (SEL)nw_protocol_new_objc::_objc_initiateDealloc))
  {
    _class_setCustomDeallocInitiation();
    class_addMethod(cls, (SEL)nw_protocol_new_objc::_objc_initiateDealloc, (IMP)nw_protocol_new_objc::$_0::__invoke, 0);
  }
  InstanceSize = class_getInstanceSize(cls);
  v10 = (void *)nw_protocol_new(InstanceSize, a2, a3, a4);
  if (!v10)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_new_objc";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v19, &type, &v35))
      goto LABEL_67;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_new_objc";
      v22 = "%{public}s called with null space";
      goto LABEL_66;
    }
    if (!v35)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_new_objc";
      v22 = "%{public}s called with null space, backtrace limit exceeded";
      goto LABEL_66;
    }
    v29 = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = type;
    v32 = os_log_type_enabled(v20, type);
    if (!v29)
    {
      if (!v32)
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_new_objc";
      v22 = "%{public}s called with null space, no backtrace";
      goto LABEL_66;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v38 = "nw_protocol_new_objc";
      v39 = 2082;
      v40 = v29;
      v31 = "%{public}s called with null space, dumping backtrace:%{public}s";
      goto LABEL_44;
    }
    goto LABEL_45;
  }
  v11 = (uint64_t)v10;
  v12 = objc_constructInstance(cls, v10);
  if (!v12)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_new_objc";
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v23, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_new_objc";
          v26 = "%{public}s called with null obj";
LABEL_71:
          _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
        }
      }
      else if (v35)
      {
        v33 = (char *)__nw_create_backtrace_string();
        v24 = __nwlog_obj();
        v25 = type;
        v34 = os_log_type_enabled(v24, type);
        if (v33)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_protocol_new_objc";
            v39 = 2082;
            v40 = v33;
            _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null obj, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v33);
          goto LABEL_72;
        }
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_new_objc";
          v26 = "%{public}s called with null obj, no backtrace";
          goto LABEL_71;
        }
      }
      else
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_new_objc";
          v26 = "%{public}s called with null obj, backtrace limit exceeded";
          goto LABEL_71;
        }
      }
    }
LABEL_72:
    if (v23)
      free(v23);
    nw_protocol_destroy(v11, 0);
    return 0;
  }
  v13 = v12;
  if (*(_UNKNOWN **)(v11 - 56) == &nw_protocol_ref_counted_handle)
  {
    v14 = *(_QWORD *)(v11 - 8);
    if (v14)
      *(_QWORD *)(v11 - 8) = v14 + 1;
  }
  {
    nw_protocol_new_objc::init = (uint64_t)sel_registerName("init");
  }
  v16 = (const char *)nw_protocol_new_objc::init;
  Class = object_getClass(v13);
  if (class_getInstanceMethod(Class, v16))
    objc_msgSend(v13, v16);
  return v13;
}

void nw_protocol_new_objc::$_0::__invoke(char *this, objc_object *a2, objc_selector *a3)
{
  unsigned __int8 v4;
  const char *v5;
  objc_class *Class;
  uint64_t v7;
  uint64_t v8;
  void (**v9)(_QWORD);
  const void *v10;

  if ((v4 & 1) == 0
  {
    nw_protocol_new_objc::$_0::operator() const(objc_object *,objc_selector *)::destroy = (uint64_t)sel_registerName("destroy");
  }
  v5 = (const char *)nw_protocol_new_objc::$_0::operator() const(objc_object *,objc_selector *)::destroy;
  Class = object_getClass(this);
  if (class_getInstanceMethod(Class, v5))
    objc_msgSend(this, v5);
  objc_destructInstance(this);
  if (this)
  {
    if (*((_UNKNOWN **)this - 7) == &nw_protocol_ref_counted_handle)
    {
      v7 = *((_QWORD *)this - 1);
      if (v7)
      {
        v8 = v7 - 1;
        *((_QWORD *)this - 1) = v8;
        if (!v8)
        {
          v9 = (void (**)(_QWORD))*((_QWORD *)this - 4);
          if (v9)
          {
            *((_QWORD *)this - 4) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if ((*(this - 24) & 1) != 0)
          {
            v10 = (const void *)*((_QWORD *)this - 4);
            if (v10)
              _Block_release(v10);
          }
          *((_QWORD *)this - 4) = 0;
          free(this - 96);
        }
      }
    }
  }
}

uint64_t nw_protocol_get_identifier(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 16);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "__nw_protocol_get_identifier";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_identifier";
        v5 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "__nw_protocol_get_identifier";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_identifier";
        v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_identifier";
        v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2)
    free(v2);
  return 0;
}

uint64_t nw_protocol_get_callbacks(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 24);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "__nw_protocol_get_callbacks";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_callbacks";
        v5 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "__nw_protocol_get_callbacks";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_callbacks";
        v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_callbacks";
        v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2)
    free(v2);
  return 0;
}

uint64_t nw_protocol_get_handle(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 40);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "__nw_protocol_get_handle";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_handle";
        v5 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "__nw_protocol_get_handle";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_handle";
        v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_handle";
        v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2)
    free(v2);
  return 0;
}

void nw_protocol_set_flow_id(_OWORD *a1, _OWORD *a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *a1 = *a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_set_flow_id";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_set_flow_id";
        v5 = "%{public}s called with null flow_id";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_set_flow_id";
        v5 = "%{public}s called with null flow_id, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_set_flow_id";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null flow_id, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_set_flow_id";
        v5 = "%{public}s called with null flow_id, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_set_flow_id";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_set_flow_id";
      v5 = "%{public}s called with null protocol";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_set_flow_id";
      v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_set_flow_id";
      v5 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_set_flow_id";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_set_flow_id_from_protocol(_OWORD *a1, _OWORD *a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *a1 = *a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_set_flow_id_from_protocol";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_set_flow_id_from_protocol";
        v5 = "%{public}s called with null from_protocol";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_set_flow_id_from_protocol";
        v5 = "%{public}s called with null from_protocol, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_set_flow_id_from_protocol";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null from_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_set_flow_id_from_protocol";
        v5 = "%{public}s called with null from_protocol, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_set_flow_id_from_protocol";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_set_flow_id_from_protocol";
      v5 = "%{public}s called with null protocol";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_set_flow_id_from_protocol";
      v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_set_flow_id_from_protocol";
      v5 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_set_flow_id_from_protocol";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_get_flow_id(_OWORD *a1, _OWORD *a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *a2 = *a1;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_get_flow_id";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_get_flow_id";
        v5 = "%{public}s called with null destination";
        goto LABEL_32;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_get_flow_id";
        v5 = "%{public}s called with null destination, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_get_flow_id";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null destination, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_get_flow_id";
        v5 = "%{public}s called with null destination, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_get_flow_id";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_get_flow_id";
      v5 = "%{public}s called with null protocol";
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_get_flow_id";
      v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_get_flow_id";
      v5 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_get_flow_id";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

void nw_protocol_set_input_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(_QWORD);
  const void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 != a2)
    {
      if (v4)
      {
        if (*(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
        {
          v6 = *(_QWORD *)(v4 + 88);
          if (v6)
          {
            v7 = v6 - 1;
            *(_QWORD *)(v4 + 88) = v7;
            if (!v7)
            {
              v8 = *(void (***)(_QWORD))(v4 + 64);
              if (v8)
              {
                *(_QWORD *)(v4 + 64) = 0;
                v8[2](v8);
                _Block_release(v8);
              }
              if ((*(_BYTE *)(v4 + 72) & 1) != 0)
              {
                v9 = *(const void **)(v4 + 64);
                if (v9)
                  _Block_release(v9);
              }
              free((void *)v4);
            }
          }
        }
      }
      *(_QWORD *)(a1 + 48) = a2;
      if (a2 && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v5 = *(_QWORD *)(a2 + 88);
        if (v5)
          *(_QWORD *)(a2 + 88) = v5 + 1;
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "__nw_protocol_set_input_handler";
  v10 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v19 = "__nw_protocol_set_input_handler";
      v13 = "%{public}s called with null protocol";
      goto LABEL_31;
    }
    if (!v16)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v19 = "__nw_protocol_set_input_handler";
      v13 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v15 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "__nw_protocol_set_input_handler";
        v20 = 2082;
        v21 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_32;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v19 = "__nw_protocol_set_input_handler";
      v13 = "%{public}s called with null protocol, no backtrace";
LABEL_31:
      _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    }
  }
LABEL_32:
  if (v10)
    free(v10);
}

uint64_t nw_protocol_get_input_handler(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 48);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "__nw_protocol_get_input_handler";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_input_handler";
        v5 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "__nw_protocol_get_input_handler";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_input_handler";
        v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_input_handler";
        v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2)
    free(v2);
  return 0;
}

void nw_protocol_set_output_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(_QWORD);
  const void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 != a2)
    {
      if (v4)
      {
        if (*(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
        {
          v6 = *(_QWORD *)(v4 + 88);
          if (v6)
          {
            v7 = v6 - 1;
            *(_QWORD *)(v4 + 88) = v7;
            if (!v7)
            {
              v8 = *(void (***)(_QWORD))(v4 + 64);
              if (v8)
              {
                *(_QWORD *)(v4 + 64) = 0;
                v8[2](v8);
                _Block_release(v8);
              }
              if ((*(_BYTE *)(v4 + 72) & 1) != 0)
              {
                v9 = *(const void **)(v4 + 64);
                if (v9)
                  _Block_release(v9);
              }
              free((void *)v4);
            }
          }
        }
      }
      *(_QWORD *)(a1 + 32) = a2;
      if (a2 && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        v5 = *(_QWORD *)(a2 + 88);
        if (v5)
          *(_QWORD *)(a2 + 88) = v5 + 1;
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "__nw_protocol_set_output_handler";
  v10 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v19 = "__nw_protocol_set_output_handler";
      v13 = "%{public}s called with null protocol";
      goto LABEL_31;
    }
    if (!v16)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v19 = "__nw_protocol_set_output_handler";
      v13 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v15 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "__nw_protocol_set_output_handler";
        v20 = 2082;
        v21 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_32;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v19 = "__nw_protocol_set_output_handler";
      v13 = "%{public}s called with null protocol, no backtrace";
LABEL_31:
      _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    }
  }
LABEL_32:
  if (v10)
    free(v10);
}

uint64_t nw_protocol_get_output_handler(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 32);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "__nw_protocol_get_output_handler";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_output_handler";
        v5 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "__nw_protocol_get_output_handler";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_output_handler";
        v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_output_handler";
        v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2)
    free(v2);
  return 0;
}

void nw_protocol_set_output_handler_context(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)(a1 + 56) = a2;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "__nw_protocol_set_output_handler_context";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_protocol_set_output_handler_context";
      v5 = "%{public}s called with null protocol";
      goto LABEL_17;
    }
    if (!v8)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_protocol_set_output_handler_context";
      v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        v11 = "__nw_protocol_set_output_handler_context";
        v12 = 2082;
        v13 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_protocol_set_output_handler_context";
      v5 = "%{public}s called with null protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2)
    free(v2);
}

uint64_t nw_protocol_get_output_handler_context(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 56);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "__nw_protocol_get_output_handler_context";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_output_handler_context";
        v5 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "__nw_protocol_get_output_handler_context";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_output_handler_context";
        v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_protocol_get_output_handler_context";
        v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2)
    free(v2);
  return 0;
}

uint64_t nw_protocol_retain(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    if (*(_UNKNOWN **)(result + 40) == &nw_protocol_ref_counted_handle)
    {
      v1 = *(_QWORD *)(result + 88);
      if (v1)
        *(_QWORD *)(result + 88) = v1 + 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void nw_protocol_release(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void (**v4)(_QWORD);
  const void *v5;

  if (a1)
  {
    if ((_UNKNOWN *)a1[5] == &nw_protocol_ref_counted_handle)
    {
      v2 = a1[11];
      if (v2)
      {
        v3 = v2 - 1;
        a1[11] = v3;
        if (!v3)
        {
          v4 = (void (**)(_QWORD))a1[8];
          if (v4)
          {
            a1[8] = 0;
            v4[2](v4);
            _Block_release(v4);
          }
          if ((a1[9] & 1) != 0)
          {
            v5 = (const void *)a1[8];
            if (v5)
              _Block_release(v5);
          }
          free(a1);
        }
      }
    }
  }
}

BOOL nw_quic_info_allocate()
{
  _QWORD *v0;
  _BOOL8 result;
  NSObject *v2;
  void *v3;

  v0 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v0)
    goto LABEL_2;
  v2 = __nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  v3 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
LABEL_2:
    *v0 = nw_array_create();
    return (BOOL)v0;
  }
  __break(1u);
  return result;
}

void nw_quic_info_destroy(uint64_t *a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    nw_array_remove_all_objects(*a1);
    if (*a1)
      os_release((void *)*a1);
    free(a1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "nw_quic_info_destroy";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v11 = "nw_quic_info_destroy";
      v5 = "%{public}s called with null quic_info";
      goto LABEL_18;
    }
    if (!v8)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v11 = "nw_quic_info_destroy";
      v5 = "%{public}s called with null quic_info, backtrace limit exceeded";
      goto LABEL_18;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        v11 = "nw_quic_info_destroy";
        v12 = 2082;
        v13 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null quic_info, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_19;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      v11 = "nw_quic_info_destroy";
      v5 = "%{public}s called with null quic_info, no backtrace";
LABEL_18:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_19:
  if (v2)
    free(v2);
}

void sub_18346C43C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18346C4D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL __currentProcessHasSSIDEntitlement_block_invoke()
{
  _BOOL8 result;

  result = NWUtilsCurrentProcessHasEntitlement(CFSTR("com.apple.wlan.authentication"))
        || NWUtilsCurrentProcessHasEntitlement(CFSTR("com.apple.private.corewifi"));
  currentProcessHasSSIDEntitlement_hasSSIDEntitlement = result;
  return result;
}

id NWMonitorStatusToString(unint64_t a1)
{
  if (a1 < 3)
    return *((id *)&off_1E149B860 + a1);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown[%ld]"), a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

nw_ws_response_t nw_ws_response_create(nw_ws_response_status_t status, const char *selected_subprotocol)
{
  NWConcrete_nw_ws_response *v4;
  NSObject *v5;
  NSObject *v6;
  char *v7;
  objc_class *v8;
  Class isa;
  objc_class *v10;
  Class v11;
  nw_ws_response_t result;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t receiver;
  void *v17;
  NSObject *v18;
  os_log_type_t v19;
  NSObject *v20;
  void *v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  objc_super v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (status == nw_ws_response_status_invalid)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_ws_response_create";
    v14 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v31.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v14, &v31, &type))
      goto LABEL_44;
    if (LOBYTE(v31.receiver) == 17)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v31.receiver;
      if (os_log_type_enabled(v15, (os_log_type_t)v31.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_response_create";
        _os_log_impl(&dword_182FBE000, v15, receiver, "%{public}s called with null status", buf, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v23 = (os_log_type_t)v31.receiver;
      v24 = os_log_type_enabled(v15, (os_log_type_t)v31.receiver);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_ws_response_create";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s called with null status, dumping backtrace:%{public}s", buf, 0x16u);
        }

        goto LABEL_31;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_response_create";
        _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s called with null status, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v27 = (os_log_type_t)v31.receiver;
      if (os_log_type_enabled(v15, (os_log_type_t)v31.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_response_create";
        _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s called with null status, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_44;
  }
  v4 = [NWConcrete_nw_ws_response alloc];
  if (!v4)
    return 0;
  v31.receiver = v4;
  v31.super_class = (Class)NWConcrete_nw_ws_response;
  v5 = objc_msgSendSuper2(&v31, sel_init);
  if (!v5)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "-[NWConcrete_nw_ws_response initWithStatus:selectedProtocol:]";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if ((__nwlog_fault(v14, &type, &v29) & 1) == 0)
      goto LABEL_44;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "-[NWConcrete_nw_ws_response initWithStatus:selectedProtocol:]";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s [super init] failed", buf, 0xCu);
      }
LABEL_43:

LABEL_44:
      if (v14)
        free(v14);
      return 0;
    }
    if (!v29)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "-[NWConcrete_nw_ws_response initWithStatus:selectedProtocol:]";
        _os_log_impl(&dword_182FBE000, v18, v28, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "-[NWConcrete_nw_ws_response initWithStatus:selectedProtocol:]";
        _os_log_impl(&dword_182FBE000, v18, v25, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_43;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "-[NWConcrete_nw_ws_response initWithStatus:selectedProtocol:]";
      v34 = 2082;
      v35 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v18, v25, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
    }

LABEL_31:
    free(backtrace_string);
    goto LABEL_44;
  }
  v6 = v5;
  LODWORD(v5[1].isa) = status;
  if (!selected_subprotocol)
  {
LABEL_7:
    v8 = (objc_class *)xpc_array_create(0, 0);
    isa = v6[3].isa;
    v6[3].isa = v8;

    v10 = (objc_class *)xpc_array_create(0, 0);
    v11 = v6[4].isa;
    v6[4].isa = v10;

    return v6;
  }
  v7 = strdup(selected_subprotocol);
  if (v7)
  {
LABEL_6:
    v6[2].isa = (Class)v7;
    goto LABEL_7;
  }
  __nwlog_obj();
  v20 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v33 = "strict_strdup";
  v21 = (void *)_os_log_send_and_compose_impl();

  result = (nw_ws_response_t)__nwlog_abort((uint64_t)v21);
  if (!(_DWORD)result)
  {
    free(v21);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void sub_18346F868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_ws_response_status_t nw_ws_response_get_status(nw_ws_response_t response)
{
  if (response)
    LODWORD(response) = response[1].isa;
  return response;
}

const char *__cdecl nw_ws_response_get_selected_subprotocol(nw_ws_response_t response)
{
  nw_ws_response_t v1;
  nw_ws_response_t v2;
  const char *isa;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = response;
  v2 = v1;
  if (v1)
  {
    isa = (const char *)v1[2].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_ws_response_get_selected_subprotocol";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ws_response_get_selected_subprotocol";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null response", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_ws_response_get_selected_subprotocol";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null response, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ws_response_get_selected_subprotocol";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null response, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ws_response_get_selected_subprotocol";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null response, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  isa = 0;
LABEL_3:

  return isa;
}

void nw_ws_response_add_additional_header(nw_ws_response_t response, const char *name, const char *value)
{
  nw_ws_response_t v5;
  Class isa;
  xpc_object_t v7;
  Class v8;
  xpc_object_t v9;
  NSObject *v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  os_log_type_t v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = response;
  if (!v5)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_ws_response_add_additional_header";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v12, &type, &v30))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null response", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_ws_response_add_additional_header";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null response, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_62:
        if (!v12)
          goto LABEL_12;
LABEL_63:
        free(v12);
        goto LABEL_12;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null response, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_182FBE000, v13, v27, "%{public}s called with null response, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  if (!name)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_ws_response_add_additional_header";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v12, &type, &v30))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null name", buf, 0xCu);
      }
      goto LABEL_61;
    }
    if (!v30)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_182FBE000, v13, v28, "%{public}s called with null name, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_61;
    }
    v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null name, no backtrace", buf, 0xCu);
      }
      goto LABEL_61;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_ws_response_add_additional_header";
      v34 = 2082;
      v35 = v22;
      _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null name, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_42;
  }
  if (!value)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_ws_response_add_additional_header";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v12, &type, &v30))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null value", buf, 0xCu);
      }
      goto LABEL_61;
    }
    if (!v30)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_182FBE000, v13, v29, "%{public}s called with null value, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_61;
    }
    v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_182FBE000, v13, v25, "%{public}s called with null value, no backtrace", buf, 0xCu);
      }
      goto LABEL_61;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_ws_response_add_additional_header";
      v34 = 2082;
      v35 = v22;
      _os_log_impl(&dword_182FBE000, v13, v25, "%{public}s called with null value, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_42:

    free(v22);
    if (!v12)
      goto LABEL_12;
    goto LABEL_63;
  }
  if (!strcasecmp(name, "Sec-WebSocket-Accept")
    || !strcasecmp(name, "Sec-WebSocket-Protocol")
    || !strcasecmp(name, "Upgrade")
    || !strcasecmp(name, "Connection"))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v33 = "nw_ws_response_add_additional_header";
      v34 = 2080;
      v35 = name;
      v36 = 2080;
      v37 = value;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s Cannot override (%s, %s) header in the server's response", buf, 0x20u);
    }

  }
  else
  {
    isa = v5[3].isa;
    v7 = xpc_string_create(name);
    xpc_array_append_value(isa, v7);

    v8 = v5[4].isa;
    v9 = xpc_string_create(value);
    xpc_array_append_value(v8, v9);

  }
LABEL_12:

}

void sub_1834702E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_ws_response_enumerate_additional_headers(nw_ws_response_t response, nw_ws_additional_header_enumerator_t enumerator)
{
  nw_ws_response_t v3;
  nw_ws_additional_header_enumerator_t v4;
  uint64_t (**v5)(_QWORD, _QWORD, _QWORD);
  size_t v6;
  size_t count;
  BOOL v8;
  const char *string;
  const char *v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = response;
  v4 = enumerator;
  v5 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))v4;
  if (!v3)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_ws_response_enumerate_additional_headers";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null response", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_ws_response_enumerate_additional_headers";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null response, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v13)
        {
LABEL_6:
          v8 = 0;
          goto LABEL_7;
        }
LABEL_42:
        free(v13);
        goto LABEL_6;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null response, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null response, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  if (!v4)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_ws_response_enumerate_additional_headers";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null enumerator", buf, 0xCu);
      }
    }
    else if (v26)
    {
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_ws_response_enumerate_additional_headers";
          v30 = 2082;
          v31 = v21;
          _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        if (!v13)
          goto LABEL_6;
        goto LABEL_42;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_40;
  }
  v6 = 0;
  while (1)
  {
    count = xpc_array_get_count(v3[3].isa);
    v8 = v6 >= count;
    if (v6 >= count)
      break;
    string = xpc_array_get_string(v3[3].isa, v6);
    v10 = xpc_array_get_string(v3[4].isa, v6++);
    if ((((uint64_t (**)(_QWORD, const char *, const char *))v5)[2](v5, string, v10) & 1) == 0)
      goto LABEL_6;
  }
LABEL_7:

  return v8;
}

void sub_18347080C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *nw_group_type_to_string(unsigned int a1)
{
  if (a1 > 4)
    return "unknown";
  else
    return off_1E149B878[a1];
}

void sub_183470F2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_group_descriptor_allows_endpoint(void *a1, void *a2)
{
  _DWORD *v3;
  id v4;
  void *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  NSObject *v10;
  int v11;
  const sockaddr *address;
  int sa_family;
  NSObject *v14;
  id v15;
  int v16;
  _BOOL8 v17;
  NSObject *v18;
  id v19;
  int v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  void *v26;
  os_log_type_t v27;
  void *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  os_log_type_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  id v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_group_descriptor_allows_endpoint";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v7, &type, &v37))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl(&dword_182FBE000, v8, v27, "%{public}s called with null descriptor", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (!v37)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl(&dword_182FBE000, v8, v35, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v31 = type;
    v32 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl(&dword_182FBE000, v8, v31, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_group_descriptor_allows_endpoint";
      v41 = 2082;
      v42 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v31, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_65;
  }
  if (!v4)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_group_descriptor_allows_endpoint";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v7, &type, &v37))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl(&dword_182FBE000, v8, v29, "%{public}s called with null endpoint", buf, 0xCu);
      }
LABEL_41:

LABEL_42:
      if (v7)
LABEL_43:
        free(v7);
LABEL_44:
      v17 = 0;
      goto LABEL_45;
    }
    if (!v37)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl(&dword_182FBE000, v8, v36, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v33 = type;
    v34 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl(&dword_182FBE000, v8, v33, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_group_descriptor_allows_endpoint";
      v41 = 2082;
      v42 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v33, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_65:

    free(backtrace_string);
    goto LABEL_42;
  }
  switch(v3[2])
  {
    case 0:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_group_descriptor_allows_endpoint";
      v7 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (!__nwlog_fault(v7, &type, &v37))
        goto LABEL_42;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_group_descriptor_allows_endpoint";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Invalid group descriptor type", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v37)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v24 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_group_descriptor_allows_endpoint";
          _os_log_impl(&dword_182FBE000, v8, v24, "%{public}s Invalid group descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      v21 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v22 = type;
      v23 = os_log_type_enabled(v8, type);
      if (!v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_group_descriptor_allows_endpoint";
          _os_log_impl(&dword_182FBE000, v8, v22, "%{public}s Invalid group descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        v40 = "nw_group_descriptor_allows_endpoint";
        v41 = 2082;
        v42 = v21;
        _os_log_impl(&dword_182FBE000, v8, v22, "%{public}s Invalid group descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v21);
      if (v7)
        goto LABEL_43;
      goto LABEL_44;
    case 1:
      v10 = v4;
      v11 = -[NSObject type](v10, "type");

      if (v11 != 1)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_group_descriptor_allows_endpoint";
          v41 = 2112;
          v42 = v10;
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s Endpoint %@ is not of type address", buf, 0x16u);
        }
        goto LABEL_15;
      }
      address = nw_endpoint_get_address(v10);
      sa_family = address->sa_family;
      if (sa_family == 2)
      {
        if ((*(_DWORD *)&address->sa_data[2] & 0xF0) != 0xE0)
          goto LABEL_13;
      }
      else if (sa_family != 30 || address->sa_data[6] != 255)
      {
LABEL_13:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_group_descriptor_allows_endpoint";
          v41 = 2112;
          v42 = v10;
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s Endpoint %@ is not a multicast address", buf, 0x16u);
        }
LABEL_15:

        goto LABEL_44;
      }
      v17 = 1;
      break;
    case 2:
      v15 = v4;
      v16 = objc_msgSend(v15, "type");

      v17 = v16 != 3 && v16 != 0;
      if (v16 == 3 || !v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_group_descriptor_allows_endpoint";
          v41 = 2112;
          v42 = v15;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s Endpoint %@ is of invalid type for multiplex group", buf, 0x16u);
        }

      }
      break;
    case 3:
      v19 = v4;
      v20 = objc_msgSend(v19, "type");

      v17 = v20 == 6;
      break;
    default:
      goto LABEL_44;
  }
LABEL_45:

  return v17;
}

void sub_18347188C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

nw_group_descriptor_t nw_group_descriptor_create_multicast(nw_endpoint_t multicast_group)
{
  NSObject *v1;
  uint64_t *v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = multicast_group;
  if (v1)
  {
    v2 = -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)[NWConcrete_nw_group_descriptor alloc], 1, v1, 0);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_group_descriptor_create_multicast";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_group_descriptor_create_multicast";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null multicast_group", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_group_descriptor_create_multicast";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null multicast_group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_group_descriptor_create_multicast";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null multicast_group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_group_descriptor_create_multicast";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null multicast_group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return (nw_group_descriptor_t)v2;
}

void sub_183471B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_group_descriptor_t nw_group_descriptor_create_multiplex(nw_endpoint_t remote_endpoint)
{
  NSObject *v1;
  uint64_t *v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = remote_endpoint;
  if (v1)
  {
    v2 = -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)[NWConcrete_nw_group_descriptor alloc], 2, v1, 0);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_group_descriptor_create_multiplex";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_group_descriptor_create_multiplex";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null remote_endpoint", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_group_descriptor_create_multiplex";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null remote_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_group_descriptor_create_multiplex";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null remote_endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_group_descriptor_create_multiplex";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null remote_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return (nw_group_descriptor_t)v2;
}

void sub_183471E30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *nw_group_descriptor_create_apple_id(void *a1, _OWORD *a2)
{
  id v3;
  uint64_t *v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (v3)
  {
    v4 = -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)[NWConcrete_nw_group_descriptor alloc], 3, v3, a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_group_descriptor_create_apple_id";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_group_descriptor_create_apple_id";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null apple_id", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_group_descriptor_create_apple_id";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null apple_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_group_descriptor_create_apple_id";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null apple_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_group_descriptor_create_apple_id";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null apple_id, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_1834720F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *nw_group_descriptor_create_application_service(void *a1, _OWORD *a2)
{
  id v3;
  uint64_t *v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (v3)
  {
    v4 = -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)[NWConcrete_nw_group_descriptor alloc], 3, v3, a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_group_descriptor_create_application_service";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_group_descriptor_create_application_service";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_group_descriptor_create_application_service";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_group_descriptor_create_application_service";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_group_descriptor_create_application_service";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_1834723B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *nw_group_descriptor_create_with_type(int a1, _OWORD *a2)
{
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
    return -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)[NWConcrete_nw_group_descriptor alloc], a1, 0, a2);
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_group_descriptor_create_with_type";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_group_descriptor_create_with_type";
        v7 = "%{public}s called with null (type != nw_group_type_invalid)";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v6 = type;
        v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            v13 = "nw_group_descriptor_create_with_type";
            v14 = 2082;
            v15 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null (type != nw_group_type_invalid), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v9)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_group_descriptor_create_with_type";
        v7 = "%{public}s called with null (type != nw_group_type_invalid), no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_group_descriptor_create_with_type";
        v7 = "%{public}s called with null (type != nw_group_type_invalid), backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v4)
    free(v4);
  return 0;
}

uint64_t *nw_group_descriptor_copy(void *a1)
{
  int *v1;
  int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_group_descriptor_copy";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v10, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_group_descriptor_copy";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null descriptor", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_group_descriptor_copy";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_group_descriptor_copy";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_group_descriptor_copy";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_26:
    if (v10)
      free(v10);
    goto LABEL_28;
  }
  if (!*((_QWORD *)v1 + 4) && v1[2] != 4)
  {
LABEL_28:
    v3 = 0;
    goto LABEL_9;
  }
  v3 = -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)[NWConcrete_nw_group_descriptor alloc], v1[2], 0, (_OWORD *)v1 + 1);
  v4 = *((_QWORD *)v2 + 4);
  if (v4)
  {
    v5 = nw_array_create();
    if (v5 != v4)
    {
      v6 = v5;
      std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v5 + 16, *(void ***)(v4 + 16), *(void ***)(v4 + 24), (uint64_t)(*(_QWORD *)(v4 + 24) - *(_QWORD *)(v4 + 16)) >> 3);
      v4 = v6;
    }
    v7 = (void *)v3[4];
    v3[4] = v4;

  }
  objc_storeStrong((id *)v3 + 5, *((id *)v2 + 5));
  *((_BYTE *)v3 + 48) = v3[6] & 0xFE | v2[12] & 1;
LABEL_9:

  return v3;
}

void sub_18347296C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_group_descriptor_get_type(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[2];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_group_descriptor_get_type";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_group_descriptor_get_type";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_group_descriptor_get_type";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_group_descriptor_get_type";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_group_descriptor_get_type";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_group_descriptor_get_id(void *a1, _OWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *a2 = *((_OWORD *)v3 + 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_group_descriptor_get_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_group_descriptor_get_id";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_group_descriptor_get_id";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_group_descriptor_get_id";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_group_descriptor_get_id";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

uint64_t nw_group_descriptor_supports_known_membership(void *a1)
{
  id v1;
  void *v2;
  int v3;
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  char *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_group_descriptor_supports_known_membership";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v5, &type, &v20))
      goto LABEL_22;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_group_descriptor_supports_known_membership";
        _os_log_impl(&dword_182FBE000, v6, v15, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_group_descriptor_supports_known_membership";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v17, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_group_descriptor_supports_known_membership";
        _os_log_impl(&dword_182FBE000, v6, v17, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_group_descriptor_supports_known_membership";
        _os_log_impl(&dword_182FBE000, v6, v19, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v3 = *((_DWORD *)v1 + 2);
  if (v3 != 3)
  {
    if (v3)
      goto LABEL_24;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_group_descriptor_supports_known_membership";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v5, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_group_descriptor_supports_known_membership";
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s Invalid group descriptor type", buf, 0xCu);
        }
      }
      else if (v20)
      {
        v9 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v10 = type;
        v11 = os_log_type_enabled(v6, type);
        if (v9)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v23 = "nw_group_descriptor_supports_known_membership";
            v24 = 2082;
            v25 = v9;
            _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s Invalid group descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v9);
          if (!v5)
            goto LABEL_24;
          goto LABEL_23;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_group_descriptor_supports_known_membership";
          _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s Invalid group descriptor type, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_group_descriptor_supports_known_membership";
          _os_log_impl(&dword_182FBE000, v6, v12, "%{public}s Invalid group descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_21;
    }
LABEL_22:
    if (v5)
LABEL_23:
      free(v5);
LABEL_24:
    v8 = 0;
    goto LABEL_25;
  }
  v8 = 1;
LABEL_25:

  return v8;
}

BOOL nw_group_descriptor_add_endpoint(nw_group_descriptor_t descriptor, nw_endpoint_t endpoint)
{
  nw_group_descriptor_t v3;
  NSObject *v4;
  NSObject *v5;
  BOOL v6;
  NSObject *v7;
  uint64_t isa_low;
  const char *v9;
  uint64_t v10;
  const char *v11;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = descriptor;
  v4 = endpoint;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_group_descriptor_add_endpoint";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v14, &type, &v26))
      goto LABEL_52;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_group_descriptor_add_endpoint";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null descriptor", buf, 0xCu);
      }
      goto LABEL_51;
    }
    if (!v26)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_group_descriptor_add_endpoint";
        _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_group_descriptor_add_endpoint";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
      goto LABEL_51;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_group_descriptor_add_endpoint";
      v30 = 2082;
      v31 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_39;
  }
  if (!v4)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_group_descriptor_add_endpoint";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v14, &type, &v26))
      goto LABEL_52;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_group_descriptor_add_endpoint";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null endpoint", buf, 0xCu);
      }
LABEL_51:

LABEL_52:
      if (v14)
        free(v14);
      goto LABEL_18;
    }
    if (!v26)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_group_descriptor_add_endpoint";
        _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_group_descriptor_add_endpoint";
        _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_51;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_group_descriptor_add_endpoint";
      v30 = 2082;
      v31 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_39:

    free(backtrace_string);
    goto LABEL_52;
  }
  if (!nw_group_descriptor_allows_endpoint(v3, v4))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      isa_low = LODWORD(v3[1].isa);
      if (isa_low > 4)
        v9 = "unknown";
      else
        v9 = off_1E149B878[isa_low];
      *(_DWORD *)buf = 136446466;
      v29 = "nw_group_descriptor_add_endpoint";
      v30 = 2080;
      v31 = (void *)v9;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s Invalid endpoint type %s for group descriptor", buf, 0x16u);
    }
    goto LABEL_17;
  }
  if ((nw_group_descriptor_supports_multiple_members((NWConcrete_nw_group_descriptor *)v3) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = LODWORD(v3[1].isa);
      if (v10 > 4)
        v11 = "unknown";
      else
        v11 = off_1E149B878[v10];
      *(_DWORD *)buf = 136446466;
      v29 = "nw_group_descriptor_add_endpoint";
      v30 = 2080;
      v31 = (void *)v11;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s Group descriptor of type %s does not support multiple members", buf, 0x16u);
    }
LABEL_17:

LABEL_18:
    v6 = 0;
    goto LABEL_19;
  }
  nw_array_append((uint64_t)v3[4].isa, v5);
  v6 = 1;
LABEL_19:

  return v6;
}

void sub_1834739C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_group_descriptor_supports_multiple_members(NWConcrete_nw_group_descriptor *a1)
{
  NWConcrete_nw_group_descriptor *v1;
  int v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1->type;
  if (v2 == 4 || v2 == 2)
    goto LABEL_11;
  if (v2)
  {
    v7 = 1;
    goto LABEL_13;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v16 = "nw_group_descriptor_supports_multiple_members";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v4, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_group_descriptor_supports_multiple_members";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s Invalid group descriptor type", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v10 = type;
      v11 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_group_descriptor_supports_multiple_members";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s Invalid group descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v4)
          goto LABEL_11;
        goto LABEL_10;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_group_descriptor_supports_multiple_members";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s Invalid group descriptor type, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v12 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_group_descriptor_supports_multiple_members";
        _os_log_impl(&dword_182FBE000, v5, v12, "%{public}s Invalid group descriptor type, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
  if (v4)
LABEL_10:
    free(v4);
LABEL_11:
  v7 = 0;
LABEL_13:

  return v7;
}

void nw_group_descriptor_remove_endpoint(void *a1, void *a2)
{
  uint64_t *v3;
  id v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_group_descriptor_remove_endpoint";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_group_descriptor_remove_endpoint";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_group_descriptor_remove_endpoint";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7)
          goto LABEL_4;
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_group_descriptor_remove_endpoint";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_group_descriptor_remove_endpoint";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    nw_array_remove_object(v3[4], (uint64_t)v4);
    goto LABEL_4;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_group_descriptor_remove_endpoint";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_group_descriptor_remove_endpoint";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null endpoint", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_group_descriptor_remove_endpoint";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_group_descriptor_remove_endpoint";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_group_descriptor_remove_endpoint";
    v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_39;
LABEL_4:

}

uint64_t nw_group_descriptor_set_members(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  NWConcrete_nw_group_descriptor *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  _QWORD v26[4];
  NWConcrete_nw_group_descriptor *v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = (unsigned __int8 *)v3[4];
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = __nw_group_descriptor_set_members_block_invoke;
      v26[3] = &unk_1E14AC200;
      v7 = v3;
      v27 = v7;
      if (nw_array_apply(v6, (uint64_t)v26))
      {
        if ((nw_group_descriptor_supports_multiple_members(v7) & 1) != 0)
        {
          objc_storeStrong(v3 + 4, a2);
          v8 = 1;
LABEL_15:

          goto LABEL_16;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          v10 = v7->type;
          if (v10 > 4)
            v11 = "unknown";
          else
            v11 = off_1E149B878[v10];
          *(_DWORD *)buf = 136446466;
          v31 = "nw_group_descriptor_set_members";
          v32 = 2080;
          v33 = (void *)v11;
          _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s Group descriptor of type %s does not support multiple members", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_group_descriptor_set_members";
          _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s Invalid endpoint type for group descriptor", buf, 0xCu);
        }
      }

      v8 = 0;
      goto LABEL_15;
    }
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_group_descriptor_set_members";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v14, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_group_descriptor_set_members";
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null endpoints", buf, 0xCu);
        }
LABEL_48:

        goto LABEL_49;
      }
      if (!v28)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_group_descriptor_set_members";
          _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s called with null endpoints, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_48;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_group_descriptor_set_members";
          _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null endpoints, no backtrace", buf, 0xCu);
        }
        goto LABEL_48;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        v31 = "nw_group_descriptor_set_members";
        v32 = 2082;
        v33 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null endpoints, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_36;
    }
  }
  else
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_group_descriptor_set_members";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v14, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_group_descriptor_set_members";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null descriptor", buf, 0xCu);
        }
        goto LABEL_48;
      }
      if (!v28)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_group_descriptor_set_members";
          _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_48;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_group_descriptor_set_members";
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_48;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v31 = "nw_group_descriptor_set_members";
        v32 = 2082;
        v33 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_36:

      free(backtrace_string);
    }
  }
LABEL_49:
  if (v14)
    free(v14);
  v8 = 0;
LABEL_16:

  return v8;
}

BOOL __nw_group_descriptor_set_members_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return nw_group_descriptor_allows_endpoint(*(void **)(a1 + 32), a3);
}

void nw_group_descriptor_enumerate_endpoints(nw_group_descriptor_t descriptor, nw_group_descriptor_enumerate_endpoints_block_t enumerate_block)
{
  nw_group_descriptor_t v3;
  nw_group_descriptor_enumerate_endpoints_block_t v4;
  void *v5;
  unsigned __int8 *isa;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = descriptor;
  v4 = enumerate_block;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_group_descriptor_enumerate_endpoints";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_group_descriptor_enumerate_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_group_descriptor_enumerate_endpoints";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          goto LABEL_4;
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_group_descriptor_enumerate_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_group_descriptor_enumerate_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    isa = (unsigned __int8 *)v3[4].isa;
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __nw_group_descriptor_enumerate_endpoints_block_invoke;
    v21[3] = &unk_1E14AC278;
    v22 = v4;
    nw_array_apply(isa, (uint64_t)v21);

    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_group_descriptor_enumerate_endpoints";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_group_descriptor_enumerate_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_group_descriptor_enumerate_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_group_descriptor_enumerate_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_group_descriptor_enumerate_endpoints";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_39;
LABEL_4:

}

uint64_t __nw_group_descriptor_enumerate_endpoints_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t nw_group_descriptor_copy_member(void *a1)
{
  NWConcrete_nw_group_descriptor *v1;
  NWConcrete_nw_group_descriptor *v2;
  uint64_t members;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_group_descriptor_copy_member";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v10, &type, &v22))
      goto LABEL_46;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_group_descriptor_copy_member";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null descriptor", buf, 0xCu);
      }
      goto LABEL_45;
    }
    if (!v22)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_group_descriptor_copy_member";
        _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_group_descriptor_copy_member";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
      goto LABEL_45;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_group_descriptor_copy_member";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_33;
  }
  if (nw_group_descriptor_supports_multiple_members(v1))
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_group_descriptor_copy_member";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v10, &type, &v22))
      goto LABEL_46;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_group_descriptor_copy_member";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called on group descriptor that supports multiple endpoints", buf, 0xCu);
      }
LABEL_45:

LABEL_46:
      if (v10)
        free(v10);
      goto LABEL_12;
    }
    if (!v22)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_group_descriptor_copy_member";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called on group descriptor that supports multiple endpoints, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_group_descriptor_copy_member";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called on group descriptor that supports multiple endpoints, no backtrace", buf, 0xCu);
      }
      goto LABEL_45;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_group_descriptor_copy_member";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called on group descriptor that supports multiple endpoints, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_33:

    free(backtrace_string);
    goto LABEL_46;
  }
  members = (uint64_t)v2->members;
  if (!members || *(_QWORD *)(members + 24) - *(_QWORD *)(members + 16) != 8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = v2->type;
      if (v6 > 4)
        v7 = "unknown";
      else
        v7 = off_1E149B878[v6];
      *(_DWORD *)buf = 136446466;
      v25 = "nw_group_descriptor_copy_member";
      v26 = 2080;
      v27 = (void *)v7;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s Group descriptor of type %s does not have exactly one member", buf, 0x16u);
    }

LABEL_12:
    v4 = 0;
    goto LABEL_13;
  }
  nw_array_get_object_at_index(members, 0);
  v4 = objc_claimAutoreleasedReturnValue();
LABEL_13:

  return v4;
}

id nw_group_descriptor_copy_members(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[4];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_group_descriptor_copy_members";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_group_descriptor_copy_members";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_group_descriptor_copy_members";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_group_descriptor_copy_members";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_group_descriptor_copy_members";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_multicast_group_descriptor_set_specific_source(nw_group_descriptor_t multicast_descriptor, nw_endpoint_t source)
{
  nw_group_descriptor_t v3;
  NSObject *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = multicast_descriptor;
  v4 = source;
  if (v3)
  {
    objc_storeStrong((id *)&v3[5].isa, source);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_multicast_group_descriptor_set_specific_source";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_multicast_group_descriptor_set_specific_source";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null multicast_descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_multicast_group_descriptor_set_specific_source";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null multicast_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_multicast_group_descriptor_set_specific_source";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null multicast_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_multicast_group_descriptor_set_specific_source";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null multicast_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

id nw_multicast_group_descriptor_get_specific_source(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[5];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_multicast_group_descriptor_get_specific_source";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_multicast_group_descriptor_get_specific_source";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null multicast_descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_multicast_group_descriptor_get_specific_source";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null multicast_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_multicast_group_descriptor_get_specific_source";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null multicast_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_multicast_group_descriptor_get_specific_source";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null multicast_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_multicast_group_descriptor_set_disable_unicast_traffic(nw_group_descriptor_t multicast_descriptor, BOOL disable_unicast_traffic)
{
  nw_group_descriptor_t v3;
  nw_group_descriptor_t v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = multicast_descriptor;
  v4 = v3;
  if (v3)
  {
    LOBYTE(v3[6].isa) = (uint64_t)v3[6].isa & 0xFE | disable_unicast_traffic;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_multicast_group_descriptor_set_disable_unicast_traffic";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_multicast_group_descriptor_set_disable_unicast_traffic";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null multicast_descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_multicast_group_descriptor_set_disable_unicast_traffic";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null multicast_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_multicast_group_descriptor_set_disable_unicast_traffic";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null multicast_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_multicast_group_descriptor_set_disable_unicast_traffic";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null multicast_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

BOOL nw_multicast_group_descriptor_get_disable_unicast_traffic(nw_group_descriptor_t multicast_descriptor)
{
  nw_group_descriptor_t v1;
  nw_group_descriptor_t v2;
  BOOL v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = multicast_descriptor;
  v2 = v1;
  if (v1)
  {
    v3 = (uint64_t)v1[6].isa & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_multicast_group_descriptor_get_disable_unicast_traffic";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_multicast_group_descriptor_get_disable_unicast_traffic";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null multicast_descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_multicast_group_descriptor_get_disable_unicast_traffic";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null multicast_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_multicast_group_descriptor_get_disable_unicast_traffic";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null multicast_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_multicast_group_descriptor_get_disable_unicast_traffic";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null multicast_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

nw_privacy_context_t nw_privacy_context_create(const char *description)
{
  NSObject *v1;

  v1 = -[NWConcrete_nw_context initWithIdentifier:]([NWConcrete_nw_context alloc], description);
  nw_context_set_isolate_protocol_cache(v1, 1);
  nw_context_activate(v1);
  return v1;
}

void sub_183476250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_privacy_context_flush_cache(nw_privacy_context_t privacy_context)
{
  NSObject *v1;
  _BOOL8 v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  NSObject *v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = privacy_context;
  if (v1)
  {
    if (v1 == &__block_literal_global_11079)
    {
      if (nw_context_copy_implicit_context::onceToken[0] != -1)
        dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      v1 = (id)nw_context_copy_implicit_context::implicit_context;
    }
    v11 = v1;
    v2 = nw_context_copy_cache_context(v1);
    nw_context_purge_all_endpoints((void *)v2);

    return;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_privacy_context_flush_cache";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v4, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_privacy_context_flush_cache";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null privacy_context", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_privacy_context_flush_cache";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null privacy_context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_privacy_context_flush_cache";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null privacy_context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_privacy_context_flush_cache";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null privacy_context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v4)
    free(v4);
}

void sub_18347655C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void nw_privacy_context_disable_logging(nw_privacy_context_t privacy_context)
{
  NSObject *v1;
  NSObject *v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = privacy_context;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_privacy_context_disable_logging";
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v4, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_privacy_context_disable_logging";
          _os_log_impl(&dword_182FBE000, v5, v12, "%{public}s called with null privacy_context", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (!v17)
      {
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_privacy_context_disable_logging";
          _os_log_impl(&dword_182FBE000, v5, v16, "%{public}s called with null privacy_context, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_privacy_context_disable_logging";
          _os_log_impl(&dword_182FBE000, v5, v14, "%{public}s called with null privacy_context, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v20 = "nw_privacy_context_disable_logging";
        v21 = 2082;
        v22 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v14, "%{public}s called with null privacy_context, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v4)
      goto LABEL_23;
LABEL_22:
    free(v4);
    goto LABEL_23;
  }
  if (v1 != &__block_literal_global_11079)
  {
    nw_context_set_privacy_level_internal(v1, 4, 0);
    goto LABEL_23;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v20 = "nw_privacy_context_disable_logging";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (!__nwlog_fault(v4, &type, &v17))
    goto LABEL_21;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      v20 = "nw_privacy_context_disable_logging";
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s Logging cannot be disabled for the default privacy context", buf, 0xCu);
    }
LABEL_20:

    goto LABEL_21;
  }
  if (!v17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v10 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      v20 = "nw_privacy_context_disable_logging";
      _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s Logging cannot be disabled for the default privacy context, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_20;
  }
  v7 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  v8 = type;
  v9 = os_log_type_enabled(v5, type);
  if (!v7)
  {
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      v20 = "nw_privacy_context_disable_logging";
      _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s Logging cannot be disabled for the default privacy context, no backtrace", buf, 0xCu);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    *(_DWORD *)buf = 136446466;
    v20 = "nw_privacy_context_disable_logging";
    v21 = 2082;
    v22 = v7;
    _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s Logging cannot be disabled for the default privacy context, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v7);
  if (v4)
    goto LABEL_22;
LABEL_23:

}

void sub_183476A74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_privacy_context_require_encrypted_name_resolution(nw_privacy_context_t privacy_context, BOOL require_encrypted_name_resolution, nw_resolver_config_t fallback_resolver_config)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v4 = require_encrypted_name_resolution;
  v21 = *MEMORY[0x1E0C80C00];
  v5 = privacy_context;
  v6 = fallback_resolver_config;
  if (v5)
  {
    if (v5 == &__block_literal_global_11079)
    {
      if (nw_context_copy_implicit_context::onceToken[0] != -1)
        dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      v5 = (id)nw_context_copy_implicit_context::implicit_context;
    }
    nw_context_require_encrypted_name_resolution(v5, v4, v6);
    goto LABEL_7;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_privacy_context_require_encrypted_name_resolution";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_privacy_context_require_encrypted_name_resolution";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null privacy_context", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_privacy_context_require_encrypted_name_resolution";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null privacy_context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_privacy_context_require_encrypted_name_resolution";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null privacy_context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_privacy_context_require_encrypted_name_resolution";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null privacy_context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_7:

}

void sub_183476D7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_privacy_context_add_proxy(nw_privacy_context_t privacy_context, nw_proxy_config_t proxy_config)
{
  NSObject *v3;
  NSObject *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = privacy_context;
  v4 = proxy_config;
  if (v3)
  {
    if (v3 == &__block_literal_global_11079)
    {
      if (nw_context_copy_implicit_context::onceToken[0] != -1)
        dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      v3 = (id)nw_context_copy_implicit_context::implicit_context;
    }
    nw_context_add_proxy(v3, v4);
    goto LABEL_7;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_privacy_context_add_proxy";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_privacy_context_add_proxy";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null privacy_context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_privacy_context_add_proxy";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null privacy_context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_privacy_context_add_proxy";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null privacy_context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_privacy_context_add_proxy";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null privacy_context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_7:

}

void sub_183477080(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_privacy_context_clear_proxies(nw_privacy_context_t privacy_context)
{
  NSObject *v1;
  NSObject *v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = privacy_context;
  if (v1)
  {
    v2 = v1;
    if (v1 == &__block_literal_global_11079)
    {
      if (nw_context_copy_implicit_context::onceToken[0] != -1)
        dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      v2 = (id)nw_context_copy_implicit_context::implicit_context;
    }
    nw_context_clear_proxies(v2);
    goto LABEL_7;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_privacy_context_clear_proxies";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_privacy_context_clear_proxies";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null privacy_context", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_privacy_context_clear_proxies";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null privacy_context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_privacy_context_clear_proxies";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null privacy_context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_privacy_context_clear_proxies";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null privacy_context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v4)
    free(v4);
  v2 = 0;
LABEL_7:

}

void sub_183477368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw::release_if_needed<nw_protocol *>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void (**v10)(_QWORD);

  v1 = *a1;
  if (*a1)
  {
    if (*(_UNKNOWN **)(v1 + 40) == &nw_protocol_ref_counted_handle)
    {
      v3 = *(_QWORD *)(v1 + 88);
      if (v3)
      {
        v4 = v3 - 1;
        *(_QWORD *)(v1 + 88) = v4;
        if (!v4)
        {
          v5 = *(const void **)(v1 + 64);
          if (v5)
          {
            v6 = _Block_copy(v5);
            v7 = *(void **)(v1 + 64);
            *(_QWORD *)(v1 + 64) = 0;

            v8 = _Block_copy(v6);
            v10 = (void (**)(_QWORD))_Block_copy(v8);

            v10[2](v10);
            v9 = *(void **)(v1 + 64);
            if ((*(_BYTE *)(v1 + 72) & 1) != 0)
            {
              if (v9)
              {
                *(_QWORD *)(v1 + 64) = 0;

                v9 = *(void **)(v1 + 64);
              }
            }
          }
          else
          {
            v9 = 0;
          }
          *(_QWORD *)(v1 + 64) = 0;

          free((void *)v1);
        }
      }
    }
    *a1 = 0;
  }
}

void sub_183478970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr(uint64_t a1)
{
  id v2;

  v2 = *(id *)a1;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0 && v2)
  {
    *(_QWORD *)a1 = 0;

    v2 = *(id *)a1;
  }
  *(_QWORD *)a1 = 0;

  return a1;
}

void nw_protocol_path_state_dispose(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_path_state_dispose";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_path_state_dispose";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_protocol_path_state_dispose";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v11)
          goto LABEL_6;
LABEL_41:
        free(v11);
        goto LABEL_6;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_path_state_dispose";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_path_state_dispose";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (a2)
  {
    nw_protocol_instance_tear_down_path_inner(v3, a2);
    v5 = *(void **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;

    v6 = *(void **)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;

    v7 = *(void **)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;

    v8 = *(void **)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;

    v9 = *(void **)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;

    *(_DWORD *)(a2 + 132) = -1;
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
      nw::release_if_needed<nw_protocol *>((uint64_t *)(a2 + 32));
    *(_QWORD *)(a2 + 32) = 0;

    goto LABEL_6;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_protocol_path_state_dispose";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v11, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_path_state_dispose";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null path_state", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_path_state_dispose";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s called with null path_state, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_path_state_dispose";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null path_state, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_protocol_path_state_dispose";
    v28 = 2082;
    v29 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null path_state, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_41;
LABEL_6:

}

void sub_183478F1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_instance_tear_down_path_inner(void *a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  const char *v7;
  void *v8;
  char v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(const char *, char *, uint64_t);
  char v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  NSObject *v23;
  void *v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  _BOOL4 v37;
  const char *v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  const char *v42;
  const char *v43;
  id v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  char *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  os_log_type_t v51;
  char v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  os_log_type_t v58;
  char v59;
  os_log_type_t v60;
  char *v61;
  char v62;
  os_log_type_t type[8];
  char v64;
  _BYTE buf[24];
  const char *v66;
  _BYTE v67[10];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
    v18 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v61) = 0;
    if (!__nwlog_fault(v18, type, &v61))
      goto LABEL_82;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)v61)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v31 = type[0];
      v32 = os_log_type_enabled(v19, type[0]);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_82:
        if (!v18)
          goto LABEL_120;
LABEL_83:
        free(v18);
        goto LABEL_120;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
        _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v39 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
        _os_log_impl(&dword_182FBE000, v19, v39, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_81:

    goto LABEL_82;
  }
  if (a2)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }

    }
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_11351;
    v66 = (const char *)&__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
    *(_QWORD *)v67 = a2 + 104;
    v67[8] = 0;
    v4 = *(_QWORD *)(a2 + 104);
    do
    {
      if (!v4)
        break;
      v5 = *(_QWORD *)(v4 + 32);
      v6 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v4 = v5;
    }
    while ((v6 & 1) != 0);
    v7 = *(const char **)(a2 + 32);
    if (!v7)
      goto LABEL_117;
    if (v7 == *((const char **)v3 - 8))
      goto LABEL_114;
    v8 = (void *)*((_QWORD *)v7 + 5);
    if (v8 == &nw_protocol_ref_counted_handle)
    {
      v10 = *((_QWORD *)v7 + 11);
      if (v10)
        *((_QWORD *)v7 + 11) = v10 + 1;
      v9 = -1;
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)type = v7;
    v64 = v9;
    v11 = (void *)*((_QWORD *)v3 - 7);
    if (v11 == &nw_protocol_ref_counted_handle)
    {
      v13 = *((_QWORD *)v3 - 1);
      if (v13)
        *((_QWORD *)v3 - 1) = v13 + 1;
      v12 = -1;
    }
    else
    {
      v12 = 0;
    }
    v61 = v3 - 96;
    v62 = v12;
    v14 = *((_QWORD *)v7 + 3);
    if (v14)
    {
      v15 = *(uint64_t (**)(const char *, char *, uint64_t))(v14 + 8);
      if (v15)
      {
        v16 = v15(v7, v3 - 96, 1);
        if (v11 != &nw_protocol_ref_counted_handle)
          goto LABEL_22;
        goto LABEL_92;
      }
    }
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = (const char *)*((_QWORD *)v7 + 2);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
    if (!v25)
      v25 = "invalid";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v25;
    *(_WORD *)&buf[22] = 2048;
    v66 = v7;
    v26 = (char *)_os_log_send_and_compose_impl();

    v60 = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (__nwlog_fault(v26, &v60, &v59))
    {
      if (v60 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = v60;
        if (os_log_type_enabled(v27, v60))
        {
          v29 = (const char *)*((_QWORD *)v7 + 2);
          if (!v29)
            v29 = "invalid";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v29;
          *(_WORD *)&buf[22] = 2048;
          v66 = v7;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback", buf, 0x20u);
        }
LABEL_88:

        goto LABEL_89;
      }
      if (!v59)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v41 = v60;
        if (os_log_type_enabled(v27, v60))
        {
          v42 = (const char *)*((_QWORD *)v7 + 2);
          if (!v42)
            v42 = "invalid";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v42;
          *(_WORD *)&buf[22] = 2048;
          v66 = v7;
          _os_log_impl(&dword_182FBE000, v27, v41, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded", buf, 0x20u);
        }
        goto LABEL_88;
      }
      v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v58 = v60;
      v37 = os_log_type_enabled(v27, v60);
      if (!v36)
      {
        if (v37)
        {
          v43 = (const char *)*((_QWORD *)v7 + 2);
          if (!v43)
            v43 = "invalid";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v43;
          *(_WORD *)&buf[22] = 2048;
          v66 = v7;
          _os_log_impl(&dword_182FBE000, v27, v58, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace", buf, 0x20u);
        }
        goto LABEL_88;
      }
      if (v37)
      {
        v38 = (const char *)*((_QWORD *)v7 + 2);
        if (!v38)
          v38 = "invalid";
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v38;
        *(_WORD *)&buf[22] = 2048;
        v66 = v7;
        *(_WORD *)v67 = 2082;
        *(_QWORD *)&v67[2] = v36;
        _os_log_impl(&dword_182FBE000, v27, v58, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(v36);
    }
LABEL_89:
    if (v26)
      free(v26);
    v16 = 0;
    if (v11 != &nw_protocol_ref_counted_handle)
    {
LABEL_22:
      if (v8 != &nw_protocol_ref_counted_handle)
        goto LABEL_23;
      goto LABEL_93;
    }
LABEL_92:
    nw::release_if_needed<nw_protocol *>((uint64_t *)&v61);
    if (v8 != &nw_protocol_ref_counted_handle)
    {
LABEL_23:
      if ((v16 & 1) != 0)
        goto LABEL_114;
LABEL_94:
      if ((v3[405] & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v44 = (id)gLogObj;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v3 + 407;
        *(_WORD *)&buf[22] = 2080;
        v66 = " ";
        v45 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v61) = 0;
        if (__nwlog_fault(v45, type, &v61))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v46 = (id)gLogObj;
            v47 = type[0];
            if (os_log_type_enabled(v46, type[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v3 + 407;
              *(_WORD *)&buf[22] = 2080;
              v66 = " ";
              _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s %{public}s%sUnable to remove output handler", buf, 0x20u);
            }
          }
          else if ((_BYTE)v61)
          {
            v48 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v46 = (id)gLogObj;
            v49 = type[0];
            v50 = os_log_type_enabled(v46, type[0]);
            if (v48)
            {
              if (v50)
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v3 + 407;
                *(_WORD *)&buf[22] = 2080;
                v66 = " ";
                *(_WORD *)v67 = 2082;
                *(_QWORD *)&v67[2] = v48;
                _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s %{public}s%sUnable to remove output handler, dumping backtrace:%{public}s", buf, 0x2Au);
              }

              free(v48);
              if (!v45)
                goto LABEL_114;
              goto LABEL_113;
            }
            if (v50)
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v3 + 407;
              *(_WORD *)&buf[22] = 2080;
              v66 = " ";
              _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s %{public}s%sUnable to remove output handler, no backtrace", buf, 0x20u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v46 = (id)gLogObj;
            v51 = type[0];
            if (os_log_type_enabled(v46, type[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v3 + 407;
              *(_WORD *)&buf[22] = 2080;
              v66 = " ";
              _os_log_impl(&dword_182FBE000, v46, v51, "%{public}s %{public}s%sUnable to remove output handler, backtrace limit exceeded", buf, 0x20u);
            }
          }

        }
        if (v45)
LABEL_113:
          free(v45);
      }
LABEL_114:
      v52 = *(_BYTE *)(a2 + 40);
      if ((v52 & 1) != 0)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)(a2 + 32));
        v52 = *(_BYTE *)(a2 + 40);
      }
      *(_QWORD *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 40) = v52 | 1;
LABEL_117:
      v53 = *(void **)(a2 + 24);
      if (v53)
      {
        nw_path_flow_registration_close(v53);
        v54 = *(void **)(a2 + 24);
        *(_QWORD *)(a2 + 24) = 0;

      }
      v55 = *(void **)(a2 + 48);
      *(_QWORD *)(a2 + 48) = 0;

      *(_QWORD *)(a2 + 56) = 0;
      v56 = *(void **)(a2 + 120);
      *(_QWORD *)(a2 + 120) = 0;

      v57 = *(void **)(a2 + 88);
      *(_QWORD *)(a2 + 88) = 0;

      goto LABEL_120;
    }
LABEL_93:
    nw::release_if_needed<nw_protocol *>((uint64_t *)type);
    if ((v16 & 1) != 0)
      goto LABEL_114;
    goto LABEL_94;
  }
  __nwlog_obj();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
  v18 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v61) = 0;
  if (!__nwlog_fault(v18, type, &v61))
    goto LABEL_82;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v22 = type[0];
    if (os_log_type_enabled(v19, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
      _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null path_state", buf, 0xCu);
    }
    goto LABEL_81;
  }
  if (!(_BYTE)v61)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v40 = type[0];
    if (os_log_type_enabled(v19, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
      _os_log_impl(&dword_182FBE000, v19, v40, "%{public}s called with null path_state, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_81;
  }
  v33 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v19 = objc_claimAutoreleasedReturnValue();
  v34 = type[0];
  v35 = os_log_type_enabled(v19, type[0]);
  if (!v33)
  {
    if (v35)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
      _os_log_impl(&dword_182FBE000, v19, v34, "%{public}s called with null path_state, no backtrace", buf, 0xCu);
    }
    goto LABEL_81;
  }
  if (v35)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_instance_tear_down_path_inner";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v33;
    _os_log_impl(&dword_182FBE000, v19, v34, "%{public}s called with null path_state, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v33);
  if (v18)
    goto LABEL_83;
LABEL_120:

}

void sub_183479BAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_11351(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = a2;
  v4 = v3;
  v5 = *((_QWORD *)v3 + 4);
  v6 = (_QWORD *)*((_QWORD *)v3 + 5);
  if (v5)
  {
    *(_QWORD *)(v5 + 40) = v6;
    v6 = (_QWORD *)*((_QWORD *)v3 + 5);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v6;
  }
  *v6 = v5;
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 5) = 0;
  nw_frame_finalize((uint64_t)v3);

  return 1;
}

uint64_t nw_protocol_instance_stub_get_handle(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_instance_stub_get_handle";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_stub_get_handle";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null stub", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_instance_stub_get_handle";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null stub, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_stub_get_handle";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null stub, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_stub_get_handle";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null stub, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_instance_flush_batched_input(void *a1)
{
  NWConcrete_nw_protocol_instance *v1;
  NWConcrete_nw_protocol_instance *v2;
  void (*var10)(NWConcrete_nw_protocol_instance *);
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((v1->flow_in_connected & 0x10000000) != 0)
    {
      nw_protocol_instance_flush_batched_input_internal(v1);
      BYTE3(v2->flow_in_connected) |= 0x10u;
      var10 = (void (*)(NWConcrete_nw_protocol_instance *))v2->parent_definition->extended_state->var10;
      if (var10)
        var10(v2);
    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_instance_flush_batched_input";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_instance_flush_batched_input";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_protocol_instance_flush_batched_input";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_instance_flush_batched_input";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_instance_flush_batched_input";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v5)
    free(v5);
LABEL_5:

}

void sub_18347A554(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_instance_flush_batched_input_internal(NWConcrete_nw_protocol_instance *a1)
{
  NWConcrete_nw_protocol_instance *v1;
  NWConcrete_nw_protocol_instance *v2;
  NWConcrete_nw_protocol_definition *parent_definition;
  void (*var11)(NWConcrete_nw_protocol_instance *);
  char v5;
  char *tqh_last;
  _QWORD *v7;
  void *v8;
  char v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *, unsigned __int16 *);
  _QWORD *v16;
  void *v17;
  char v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, unsigned __int16 *);
  void *v25;
  const char *v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  const char *v31;
  void *v32;
  const char *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  const char *v37;
  void *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  char *backtrace_string;
  os_log_type_t v43;
  _BOOL4 v44;
  const char *v45;
  void *v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  char *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  const char *v53;
  char *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  char *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  os_log_type_t v60;
  const char *v61;
  os_log_type_t v62;
  const char *v63;
  const char *v64;
  os_log_type_t v65;
  const char *v66;
  os_log_type_t v67;
  _QWORD v68[4];
  NWConcrete_nw_protocol_instance *v69;
  char v70;
  os_log_type_t type;
  unsigned __int16 *p_paths_log_id_num;
  char v73;
  os_log_type_t v74[8];
  char v75;
  uint8_t buf[4];
  const char *v77;
  __int16 v78;
  void *v79;
  __int16 v80;
  _QWORD *v81;
  __int16 v82;
  char *v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  parent_definition = v1->parent_definition;
  var11 = (void (*)(NWConcrete_nw_protocol_instance *))parent_definition->extended_state->var11;
  if (var11)
  {
    var11(v1);
    parent_definition = v2->parent_definition;
  }
  v5 = BYTE3(v2->flow_in_connected) & 0xEF;
  BYTE3(v2->flow_in_connected) = v5;
  if (parent_definition->variant == 3)
  {
    tqh_last = (char *)v2->pending_outbound_frames.tqh_last;
    v68[0] = MEMORY[0x1E0C809B0];
    v68[1] = 3221225472;
    v68[2] = ___ZL49nw_protocol_instance_flush_batched_input_internalP31NWConcrete_nw_protocol_instance_block_invoke;
    v68[3] = &unk_1E14AC340;
    v69 = v2;
    nw_hash_table_apply(tqh_last, (uint64_t)v68);

    goto LABEL_45;
  }
  if ((v2->flow_in_connected & 0x80000) == 0)
    goto LABEL_45;
  if (v2->empty_frame_pool.tqh_first)
  {
    v7 = *(_QWORD **)&v2[-1].log_str[41];
    if (v7)
    {
      v8 = (void *)v7[5];
      if (v8 == &nw_protocol_ref_counted_handle)
      {
        v10 = v7[11];
        if (v10)
          v7[11] = v10 + 1;
        v9 = -1;
      }
      else
      {
        v9 = 0;
      }
      *(_QWORD *)v74 = v7;
      v75 = v9;
      v11 = *(void **)&v2[-1].log_str[33];
      if (v11 == &nw_protocol_ref_counted_handle)
      {
        v13 = *(_QWORD *)&v2[-1].log_str[81];
        if (v13)
          *(_QWORD *)&v2[-1].log_str[81] = v13 + 1;
        v12 = -1;
      }
      else
      {
        v12 = 0;
      }
      p_paths_log_id_num = &v2[-1].paths_log_id_num;
      v73 = v12;
      v14 = v7[3];
      if (v14)
      {
        v15 = *(void (**)(_QWORD *, unsigned __int16 *))(v14 + 64);
        if (v15)
        {
          v15(v7, &v2[-1].paths_log_id_num);
LABEL_21:
          if (v11 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)&p_paths_log_id_num);
          if (v8 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)v74);
LABEL_25:
          v5 = BYTE3(v2->flow_in_connected);
          goto LABEL_26;
        }
      }
      __nwlog_obj();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = (const char *)v7[2];
      v27 = "invalid";
      *(_DWORD *)buf = 136446722;
      v77 = "__nw_protocol_input_available";
      if (v26)
        v27 = v26;
      v78 = 2082;
      v79 = (void *)v27;
      v80 = 2048;
      v81 = v7;
      v28 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v70 = 0;
      if (__nwlog_fault(v28, &type, &v70))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v30 = type;
          if (os_log_type_enabled(v29, type))
          {
            v31 = (const char *)v7[2];
            if (!v31)
              v31 = "invalid";
            *(_DWORD *)buf = 136446722;
            v77 = "__nw_protocol_input_available";
            v78 = 2082;
            v79 = (void *)v31;
            v80 = 2048;
            v81 = v7;
            _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s protocol %{public}s (%p) has invalid input_available callback", buf, 0x20u);
          }
        }
        else if (v70)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v43 = type;
          v44 = os_log_type_enabled(v29, type);
          if (backtrace_string)
          {
            if (v44)
            {
              v45 = (const char *)v7[2];
              if (!v45)
                v45 = "invalid";
              *(_DWORD *)buf = 136446978;
              v77 = "__nw_protocol_input_available";
              v78 = 2082;
              v79 = (void *)v45;
              v80 = 2048;
              v81 = v7;
              v82 = 2082;
              v83 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v29, v43, "%{public}s protocol %{public}s (%p) has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
            goto LABEL_113;
          }
          if (v44)
          {
            v64 = (const char *)v7[2];
            if (!v64)
              v64 = "invalid";
            *(_DWORD *)buf = 136446722;
            v77 = "__nw_protocol_input_available";
            v78 = 2082;
            v79 = (void *)v64;
            v80 = 2048;
            v81 = v7;
            _os_log_impl(&dword_182FBE000, v29, v43, "%{public}s protocol %{public}s (%p) has invalid input_available callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v60 = type;
          if (os_log_type_enabled(v29, type))
          {
            v61 = (const char *)v7[2];
            if (!v61)
              v61 = "invalid";
            *(_DWORD *)buf = 136446722;
            v77 = "__nw_protocol_input_available";
            v78 = 2082;
            v79 = (void *)v61;
            v80 = 2048;
            v81 = v7;
            _os_log_impl(&dword_182FBE000, v29, v60, "%{public}s protocol %{public}s (%p) has invalid input_available callback, backtrace limit exceeded", buf, 0x20u);
          }
        }

      }
LABEL_113:
      if (v28)
        free(v28);
      goto LABEL_21;
    }
    __nwlog_obj();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v77 = "__nw_protocol_input_available";
    v39 = (char *)_os_log_send_and_compose_impl();

    v74[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(p_paths_log_id_num) = 0;
    if (__nwlog_fault(v39, v74, &p_paths_log_id_num))
    {
      if (v74[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v41 = v74[0];
        if (os_log_type_enabled(v40, v74[0]))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "__nw_protocol_input_available";
          _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if ((_BYTE)p_paths_log_id_num)
      {
        v54 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v55 = v74[0];
        v56 = os_log_type_enabled(v40, v74[0]);
        if (v54)
        {
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            v77 = "__nw_protocol_input_available";
            v78 = 2082;
            v79 = v54;
            _os_log_impl(&dword_182FBE000, v40, v55, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v54);
          goto LABEL_131;
        }
        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          v77 = "__nw_protocol_input_available";
          _os_log_impl(&dword_182FBE000, v40, v55, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v65 = v74[0];
        if (os_log_type_enabled(v40, v74[0]))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "__nw_protocol_input_available";
          _os_log_impl(&dword_182FBE000, v40, v65, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_131:
    if (v39)
      free(v39);
    goto LABEL_25;
  }
LABEL_26:
  if ((v5 & 0x40) == 0)
    goto LABEL_45;
  BYTE3(v2->flow_in_connected) = v5 & 0xBF;
  v16 = *(_QWORD **)&v2[-1].log_str[41];
  if (v16)
  {
    v17 = (void *)v16[5];
    if (v17 == &nw_protocol_ref_counted_handle)
    {
      v19 = v16[11];
      if (v19)
        v16[11] = v19 + 1;
      v18 = -1;
    }
    else
    {
      v18 = 0;
    }
    *(_QWORD *)v74 = v16;
    v75 = v18;
    v20 = *(void **)&v2[-1].log_str[33];
    if (v20 == &nw_protocol_ref_counted_handle)
    {
      v22 = *(_QWORD *)&v2[-1].log_str[81];
      if (v22)
        *(_QWORD *)&v2[-1].log_str[81] = v22 + 1;
      v21 = -1;
    }
    else
    {
      v21 = 0;
    }
    p_paths_log_id_num = &v2[-1].paths_log_id_num;
    v73 = v21;
    v23 = v16[3];
    if (v23)
    {
      v24 = *(void (**)(_QWORD *, unsigned __int16 *))(v23 + 184);
      if (v24)
      {
        v24(v16, &v2[-1].paths_log_id_num);
LABEL_41:
        if (v20 == &nw_protocol_ref_counted_handle)
          nw::release_if_needed<nw_protocol *>((uint64_t *)&p_paths_log_id_num);
        if (v17 == &nw_protocol_ref_counted_handle)
          nw::release_if_needed<nw_protocol *>((uint64_t *)v74);
        goto LABEL_45;
      }
    }
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = (const char *)v16[2];
    *(_DWORD *)buf = 136446722;
    v77 = "__nw_protocol_input_finished";
    if (!v33)
      v33 = "invalid";
    v78 = 2082;
    v79 = (void *)v33;
    v80 = 2048;
    v81 = v16;
    v34 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v70 = 0;
    if (__nwlog_fault(v34, &type, &v70))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          v37 = (const char *)v16[2];
          if (!v37)
            v37 = "invalid";
          *(_DWORD *)buf = 136446722;
          v77 = "__nw_protocol_input_finished";
          v78 = 2082;
          v79 = (void *)v37;
          v80 = 2048;
          v81 = v16;
          _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s protocol %{public}s (%p) has invalid input_finished callback", buf, 0x20u);
        }
      }
      else if (v70)
      {
        v50 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v51 = type;
        v52 = os_log_type_enabled(v35, type);
        if (v50)
        {
          if (v52)
          {
            v53 = (const char *)v16[2];
            if (!v53)
              v53 = "invalid";
            *(_DWORD *)buf = 136446978;
            v77 = "__nw_protocol_input_finished";
            v78 = 2082;
            v79 = (void *)v53;
            v80 = 2048;
            v81 = v16;
            v82 = 2082;
            v83 = v50;
            _os_log_impl(&dword_182FBE000, v35, v51, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v50);
          goto LABEL_123;
        }
        if (v52)
        {
          v66 = (const char *)v16[2];
          if (!v66)
            v66 = "invalid";
          *(_DWORD *)buf = 136446722;
          v77 = "__nw_protocol_input_finished";
          v78 = 2082;
          v79 = (void *)v66;
          v80 = 2048;
          v81 = v16;
          _os_log_impl(&dword_182FBE000, v35, v51, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v62 = type;
        if (os_log_type_enabled(v35, type))
        {
          v63 = (const char *)v16[2];
          if (!v63)
            v63 = "invalid";
          *(_DWORD *)buf = 136446722;
          v77 = "__nw_protocol_input_finished";
          v78 = 2082;
          v79 = (void *)v63;
          v80 = 2048;
          v81 = v16;
          _os_log_impl(&dword_182FBE000, v35, v62, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
LABEL_123:
    if (v34)
      free(v34);
    goto LABEL_41;
  }
  __nwlog_obj();
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v77 = "__nw_protocol_input_finished";
  v47 = (char *)_os_log_send_and_compose_impl();

  v74[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(p_paths_log_id_num) = 0;
  if (__nwlog_fault(v47, v74, &p_paths_log_id_num))
  {
    if (v74[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v48 = objc_claimAutoreleasedReturnValue();
      v49 = v74[0];
      if (os_log_type_enabled(v48, v74[0]))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "__nw_protocol_input_finished";
        _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)p_paths_log_id_num)
    {
      v57 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v48 = objc_claimAutoreleasedReturnValue();
      v58 = v74[0];
      v59 = os_log_type_enabled(v48, v74[0]);
      if (v57)
      {
        if (v59)
        {
          *(_DWORD *)buf = 136446466;
          v77 = "__nw_protocol_input_finished";
          v78 = 2082;
          v79 = v57;
          _os_log_impl(&dword_182FBE000, v48, v58, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v57);
        goto LABEL_136;
      }
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        v77 = "__nw_protocol_input_finished";
        _os_log_impl(&dword_182FBE000, v48, v58, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v48 = objc_claimAutoreleasedReturnValue();
      v67 = v74[0];
      if (os_log_type_enabled(v48, v74[0]))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "__nw_protocol_input_finished";
        _os_log_impl(&dword_182FBE000, v48, v67, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_136:
  if (v47)
    free(v47);
LABEL_45:

}

void sub_18347B1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  if (v14 == v12)
    nw::release_if_needed<nw_protocol *>((uint64_t *)va);
  if (v13 == v12)
    nw::release_if_needed<nw_protocol *>((uint64_t *)va1);

  _Unwind_Resume(a1);
}

uint64_t ___ZL49nw_protocol_instance_flush_batched_input_internalP31NWConcrete_nw_protocol_instance_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra;
  _QWORD *object;
  __int16 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *);
  void *v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  void *v35;
  const char *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  const char *v40;
  void *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  void *v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  char *backtrace_string;
  os_log_type_t v50;
  _BOOL4 v51;
  const char *v52;
  void *v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  void *v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  char *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  const char *v64;
  char *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  char *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  char *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  char *v74;
  os_log_type_t v75;
  _BOOL4 v76;
  os_log_type_t v77;
  const char *v78;
  os_log_type_t v79;
  const char *v80;
  const char *v81;
  os_log_type_t v82;
  os_log_type_t v83;
  const char *v84;
  os_log_type_t v85;
  os_log_type_t v86;
  char v87;
  os_log_type_t v88[8];
  char v89;
  os_log_type_t type;
  os_log_type_t v91[8];
  char v92;
  uint8_t buf[4];
  const char *v94;
  __int16 v95;
  void *v96;
  __int16 v97;
  _QWORD *v98;
  __int16 v99;
  char *v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  extra = nw_hash_node_get_extra(a2);
  object = (_QWORD *)nw_hash_node_get_object(a2);
  v6 = *(_WORD *)(extra + 52);
  if ((v6 & 0x10) == 0)
    return 1;
  v7 = object;
  if (*(_QWORD *)(extra + 16))
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      v9 = v8 - 96;
    else
      v9 = 0;
    if (object)
    {
      v10 = (void *)object[5];
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        v12 = object[11];
        if (v12)
          object[11] = v12 + 1;
        v11 = -1;
      }
      else
      {
        v11 = 0;
      }
      *(_QWORD *)v91 = object;
      v92 = v11;
      if (v8)
      {
        v13 = *(void **)(v9 + 40);
        if (v13 == &nw_protocol_ref_counted_handle)
        {
          v15 = *(_QWORD *)(v9 + 88);
          if (v15)
            *(_QWORD *)(v9 + 88) = v15 + 1;
          v14 = -1;
        }
        else
        {
          v14 = 0;
        }
        *(_QWORD *)v88 = v9;
        v89 = v14;
        v16 = object[3];
        if (v16)
        {
          v17 = *(void (**)(_QWORD *))(v16 + 64);
          if (v17)
          {
            v17(object);
LABEL_21:
            if (v13 == &nw_protocol_ref_counted_handle)
              nw::release_if_needed<nw_protocol *>((uint64_t *)v88);
LABEL_23:
            if (v10 == &nw_protocol_ref_counted_handle)
              nw::release_if_needed<nw_protocol *>((uint64_t *)v91);
LABEL_25:
            v6 = *(_WORD *)(extra + 52);
            goto LABEL_26;
          }
        }
        __nwlog_obj();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = (const char *)v7[2];
        *(_DWORD *)buf = 136446722;
        v94 = "__nw_protocol_input_available";
        if (!v30)
          v30 = "invalid";
        v95 = 2082;
        v96 = (void *)v30;
        v97 = 2048;
        v98 = v7;
        v31 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v87 = 0;
        if (__nwlog_fault(v31, &type, &v87))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v32 = objc_claimAutoreleasedReturnValue();
            v33 = type;
            if (os_log_type_enabled(v32, type))
            {
              v34 = (const char *)v7[2];
              if (!v34)
                v34 = "invalid";
              *(_DWORD *)buf = 136446722;
              v94 = "__nw_protocol_input_available";
              v95 = 2082;
              v96 = (void *)v34;
              v97 = 2048;
              v98 = v7;
              _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s protocol %{public}s (%p) has invalid input_available callback", buf, 0x20u);
            }
          }
          else if (v87)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v32 = objc_claimAutoreleasedReturnValue();
            v50 = type;
            v51 = os_log_type_enabled(v32, type);
            if (backtrace_string)
            {
              if (v51)
              {
                v52 = (const char *)v7[2];
                if (!v52)
                  v52 = "invalid";
                *(_DWORD *)buf = 136446978;
                v94 = "__nw_protocol_input_available";
                v95 = 2082;
                v96 = (void *)v52;
                v97 = 2048;
                v98 = v7;
                v99 = 2082;
                v100 = backtrace_string;
                _os_log_impl(&dword_182FBE000, v32, v50, "%{public}s protocol %{public}s (%p) has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
              }

              free(backtrace_string);
              goto LABEL_137;
            }
            if (v51)
            {
              v81 = (const char *)v7[2];
              if (!v81)
                v81 = "invalid";
              *(_DWORD *)buf = 136446722;
              v94 = "__nw_protocol_input_available";
              v95 = 2082;
              v96 = (void *)v81;
              v97 = 2048;
              v98 = v7;
              _os_log_impl(&dword_182FBE000, v32, v50, "%{public}s protocol %{public}s (%p) has invalid input_available callback, no backtrace", buf, 0x20u);
            }
          }
          else
          {
            __nwlog_obj();
            v32 = objc_claimAutoreleasedReturnValue();
            v77 = type;
            if (os_log_type_enabled(v32, type))
            {
              v78 = (const char *)v7[2];
              if (!v78)
                v78 = "invalid";
              *(_DWORD *)buf = 136446722;
              v94 = "__nw_protocol_input_available";
              v95 = 2082;
              v96 = (void *)v78;
              v97 = 2048;
              v98 = v7;
              _os_log_impl(&dword_182FBE000, v32, v77, "%{public}s protocol %{public}s (%p) has invalid input_available callback, backtrace limit exceeded", buf, 0x20u);
            }
          }

        }
LABEL_137:
        if (v31)
          free(v31);
        goto LABEL_21;
      }
      __nwlog_obj();
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v94 = "__nw_protocol_input_available";
      v46 = (char *)_os_log_send_and_compose_impl();

      v88[0] = OS_LOG_TYPE_ERROR;
      type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v46, v88, &type))
      {
        if (v88[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = v88[0];
          if (os_log_type_enabled(v47, v88[0]))
          {
            *(_DWORD *)buf = 136446210;
            v94 = "__nw_protocol_input_available";
            _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s called with null other_protocol", buf, 0xCu);
          }
        }
        else if (type)
        {
          v68 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v47 = objc_claimAutoreleasedReturnValue();
          v69 = v88[0];
          v70 = os_log_type_enabled(v47, v88[0]);
          if (v68)
          {
            if (v70)
            {
              *(_DWORD *)buf = 136446466;
              v94 = "__nw_protocol_input_available";
              v95 = 2082;
              v96 = v68;
              _os_log_impl(&dword_182FBE000, v47, v69, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v68);
            goto LABEL_166;
          }
          if (v70)
          {
            *(_DWORD *)buf = 136446210;
            v94 = "__nw_protocol_input_available";
            _os_log_impl(&dword_182FBE000, v47, v69, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v47 = objc_claimAutoreleasedReturnValue();
          v83 = v88[0];
          if (os_log_type_enabled(v47, v88[0]))
          {
            *(_DWORD *)buf = 136446210;
            v94 = "__nw_protocol_input_available";
            _os_log_impl(&dword_182FBE000, v47, v83, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_166:
      if (v46)
        free(v46);
      goto LABEL_23;
    }
    __nwlog_obj();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v94 = "__nw_protocol_input_available";
    v42 = (char *)_os_log_send_and_compose_impl();

    v91[0] = OS_LOG_TYPE_ERROR;
    v88[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v42, v91, v88))
    {
      if (v91[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v44 = v91[0];
        if (os_log_type_enabled(v43, v91[0]))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "__nw_protocol_input_available";
          _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if (v88[0])
      {
        v65 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v66 = v91[0];
        v67 = os_log_type_enabled(v43, v91[0]);
        if (v65)
        {
          if (v67)
          {
            *(_DWORD *)buf = 136446466;
            v94 = "__nw_protocol_input_available";
            v95 = 2082;
            v96 = v65;
            _os_log_impl(&dword_182FBE000, v43, v66, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v65);
          goto LABEL_161;
        }
        if (v67)
        {
          *(_DWORD *)buf = 136446210;
          v94 = "__nw_protocol_input_available";
          _os_log_impl(&dword_182FBE000, v43, v66, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v82 = v91[0];
        if (os_log_type_enabled(v43, v91[0]))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "__nw_protocol_input_available";
          _os_log_impl(&dword_182FBE000, v43, v82, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_161:
    if (v42)
      free(v42);
    goto LABEL_25;
  }
LABEL_26:
  if ((v6 & 0x40) == 0)
    return 1;
  *(_WORD *)(extra + 52) = v6 & 0xFFBF;
  v18 = *(_QWORD *)(a1 + 32);
  if (v18)
    v19 = v18 - 96;
  else
    v19 = 0;
  if (v7)
  {
    v20 = (void *)v7[5];
    if (v20 == &nw_protocol_ref_counted_handle)
    {
      v22 = v7[11];
      if (v22)
        v7[11] = v22 + 1;
      v21 = -1;
    }
    else
    {
      v21 = 0;
    }
    *(_QWORD *)v91 = v7;
    v92 = v21;
    if (v18)
    {
      v23 = *(void **)(v19 + 40);
      if (v23 == &nw_protocol_ref_counted_handle)
      {
        v25 = *(_QWORD *)(v19 + 88);
        if (v25)
          *(_QWORD *)(v19 + 88) = v25 + 1;
        v24 = -1;
      }
      else
      {
        v24 = 0;
      }
      *(_QWORD *)v88 = v19;
      v89 = v24;
      v26 = v7[3];
      if (v26)
      {
        v27 = *(void (**)(_QWORD *))(v26 + 184);
        if (v27)
        {
          v27(v7);
LABEL_45:
          if (v23 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)v88);
LABEL_47:
          if (v20 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)v91);
          return 1;
        }
      }
      __nwlog_obj();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = (const char *)v7[2];
      *(_DWORD *)buf = 136446722;
      v94 = "__nw_protocol_input_finished";
      if (!v36)
        v36 = "invalid";
      v95 = 2082;
      v96 = (void *)v36;
      v97 = 2048;
      v98 = v7;
      v37 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v87 = 0;
      if (__nwlog_fault(v37, &type, &v87))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = type;
          if (os_log_type_enabled(v38, type))
          {
            v40 = (const char *)v7[2];
            if (!v40)
              v40 = "invalid";
            *(_DWORD *)buf = 136446722;
            v94 = "__nw_protocol_input_finished";
            v95 = 2082;
            v96 = (void *)v40;
            v97 = 2048;
            v98 = v7;
            _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s protocol %{public}s (%p) has invalid input_finished callback", buf, 0x20u);
          }
        }
        else if (v87)
        {
          v61 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          v62 = type;
          v63 = os_log_type_enabled(v38, type);
          if (v61)
          {
            if (v63)
            {
              v64 = (const char *)v7[2];
              if (!v64)
                v64 = "invalid";
              *(_DWORD *)buf = 136446978;
              v94 = "__nw_protocol_input_finished";
              v95 = 2082;
              v96 = (void *)v64;
              v97 = 2048;
              v98 = v7;
              v99 = 2082;
              v100 = v61;
              _os_log_impl(&dword_182FBE000, v38, v62, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v61);
            goto LABEL_150;
          }
          if (v63)
          {
            v84 = (const char *)v7[2];
            if (!v84)
              v84 = "invalid";
            *(_DWORD *)buf = 136446722;
            v94 = "__nw_protocol_input_finished";
            v95 = 2082;
            v96 = (void *)v84;
            v97 = 2048;
            v98 = v7;
            _os_log_impl(&dword_182FBE000, v38, v62, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          v79 = type;
          if (os_log_type_enabled(v38, type))
          {
            v80 = (const char *)v7[2];
            if (!v80)
              v80 = "invalid";
            *(_DWORD *)buf = 136446722;
            v94 = "__nw_protocol_input_finished";
            v95 = 2082;
            v96 = (void *)v80;
            v97 = 2048;
            v98 = v7;
            _os_log_impl(&dword_182FBE000, v38, v79, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, backtrace limit exceeded", buf, 0x20u);
          }
        }

      }
LABEL_150:
      if (v37)
        free(v37);
      goto LABEL_45;
    }
    __nwlog_obj();
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v94 = "__nw_protocol_input_finished";
    v58 = (char *)_os_log_send_and_compose_impl();

    v88[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v58, v88, &type))
    {
      if (v88[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v59 = objc_claimAutoreleasedReturnValue();
        v60 = v88[0];
        if (os_log_type_enabled(v59, v88[0]))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "__nw_protocol_input_finished";
          _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s called with null other_protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        v74 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v59 = objc_claimAutoreleasedReturnValue();
        v75 = v88[0];
        v76 = os_log_type_enabled(v59, v88[0]);
        if (v74)
        {
          if (v76)
          {
            *(_DWORD *)buf = 136446466;
            v94 = "__nw_protocol_input_finished";
            v95 = 2082;
            v96 = v74;
            _os_log_impl(&dword_182FBE000, v59, v75, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v74);
          goto LABEL_176;
        }
        if (v76)
        {
          *(_DWORD *)buf = 136446210;
          v94 = "__nw_protocol_input_finished";
          _os_log_impl(&dword_182FBE000, v59, v75, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v59 = objc_claimAutoreleasedReturnValue();
        v86 = v88[0];
        if (os_log_type_enabled(v59, v88[0]))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "__nw_protocol_input_finished";
          _os_log_impl(&dword_182FBE000, v59, v86, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_176:
    if (v58)
      free(v58);
    goto LABEL_47;
  }
  __nwlog_obj();
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v94 = "__nw_protocol_input_finished";
  v54 = (char *)_os_log_send_and_compose_impl();

  v91[0] = OS_LOG_TYPE_ERROR;
  v88[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v54, v91, v88))
  {
    if (v91[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v55 = objc_claimAutoreleasedReturnValue();
      v56 = v91[0];
      if (os_log_type_enabled(v55, v91[0]))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "__nw_protocol_input_finished";
        _os_log_impl(&dword_182FBE000, v55, v56, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v88[0])
    {
      v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v55 = objc_claimAutoreleasedReturnValue();
      v72 = v91[0];
      v73 = os_log_type_enabled(v55, v91[0]);
      if (v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446466;
          v94 = "__nw_protocol_input_finished";
          v95 = 2082;
          v96 = v71;
          _os_log_impl(&dword_182FBE000, v55, v72, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v71);
        goto LABEL_171;
      }
      if (v73)
      {
        *(_DWORD *)buf = 136446210;
        v94 = "__nw_protocol_input_finished";
        _os_log_impl(&dword_182FBE000, v55, v72, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v55 = objc_claimAutoreleasedReturnValue();
      v85 = v91[0];
      if (os_log_type_enabled(v55, v91[0]))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "__nw_protocol_input_finished";
        _os_log_impl(&dword_182FBE000, v55, v85, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_171:
  if (v54)
    free(v54);
  return 1;
}

void sub_18347C20C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t __nw_protocol_implementation_finalize_pending_frames_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t extra;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(const char *, uint64_t);
  void *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  NSObject *v26;
  uint64_t v27;
  BOOL v28;
  const char *v29;
  const char *v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  const char *v34;
  char *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  const char *v39;
  const char *v40;
  os_log_type_t v41;
  char v42;
  os_log_type_t v43[8];
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  extra = nw_hash_node_get_extra(a2);
  v6 = extra + 104;
  if (!*(_QWORD *)(extra + 104))
    return 1;
  v7 = extra;
  v8 = *(_QWORD *)(a1 + 32);
  if ((!v8 || (*(char *)(v8 + 405) & 0x80000000) == 0) && gLogDatapath)
  {
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      v27 = *(_QWORD *)(a1 + 32);
      v28 = v27 == 0;
      if (v27)
        v29 = (const char *)(v27 + 407);
      else
        v29 = "";
      *(_DWORD *)buf = 136446978;
      v47 = "nw_protocol_implementation_finalize_pending_frames_block_invoke";
      v48 = 2082;
      v49 = (void *)v29;
      if (v28)
        v30 = "";
      else
        v30 = " ";
      v50 = 2080;
      v51 = v30;
      v52 = 2048;
      v53 = object;
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing outbound frames for %lx (batched)", buf, 0x2Au);
    }

  }
  v9 = *(const char **)(v7 + 32);
  if (v9)
  {
    v10 = (void *)*((_QWORD *)v9 + 5);
    if (v10 == &nw_protocol_ref_counted_handle)
    {
      v12 = *((_QWORD *)v9 + 11);
      if (v12)
        *((_QWORD *)v9 + 11) = v12 + 1;
      v11 = -1;
    }
    else
    {
      v11 = 0;
    }
    *(_QWORD *)v43 = v9;
    v44 = v11;
    v13 = *((_QWORD *)v9 + 3);
    if (v13)
    {
      v14 = *(void (**)(const char *, uint64_t))(v13 + 96);
      if (v14)
      {
        v14(v9, v6);
LABEL_14:
        if (v10 == &nw_protocol_ref_counted_handle)
          nw::release_if_needed<nw_protocol *>((uint64_t *)v43);
        return 1;
      }
    }
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (const char *)*((_QWORD *)v9 + 2);
    *(_DWORD *)buf = 136446722;
    v47 = "__nw_protocol_finalize_output_frames";
    if (!v17)
      v17 = "invalid";
    v48 = 2082;
    v49 = (void *)v17;
    v50 = 2048;
    v51 = v9;
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v18, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          v21 = (const char *)*((_QWORD *)v9 + 2);
          if (!v21)
            v21 = "invalid";
          *(_DWORD *)buf = 136446722;
          v47 = "__nw_protocol_finalize_output_frames";
          v48 = 2082;
          v49 = (void *)v21;
          v50 = 2048;
          v51 = v9;
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback", buf, 0x20u);
        }
      }
      else if (v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        v33 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v33)
          {
            if (*((_QWORD *)v9 + 2))
              v34 = (const char *)*((_QWORD *)v9 + 2);
            else
              v34 = "invalid";
            *(_DWORD *)buf = 136446978;
            v47 = "__nw_protocol_finalize_output_frames";
            v48 = 2082;
            v49 = (void *)v34;
            v50 = 2048;
            v51 = v9;
            v52 = 2082;
            v53 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v32, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_64;
        }
        if (v33)
        {
          if (*((_QWORD *)v9 + 2))
            v40 = (const char *)*((_QWORD *)v9 + 2);
          else
            v40 = "invalid";
          *(_DWORD *)buf = 136446722;
          v47 = "__nw_protocol_finalize_output_frames";
          v48 = 2082;
          v49 = (void *)v40;
          v50 = 2048;
          v51 = v9;
          _os_log_impl(&dword_182FBE000, v19, v32, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v19, type))
        {
          v39 = (const char *)*((_QWORD *)v9 + 2);
          if (!v39)
            v39 = "invalid";
          *(_DWORD *)buf = 136446722;
          v47 = "__nw_protocol_finalize_output_frames";
          v48 = 2082;
          v49 = (void *)v39;
          v50 = 2048;
          v51 = v9;
          _os_log_impl(&dword_182FBE000, v19, v38, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
LABEL_64:
    if (v18)
      free(v18);
    goto LABEL_14;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v47 = "__nw_protocol_finalize_output_frames";
  v23 = (char *)_os_log_send_and_compose_impl();

  v43[0] = OS_LOG_TYPE_ERROR;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v43, &type))
  {
    if (v43[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = v43[0];
      if (os_log_type_enabled(v24, v43[0]))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (type)
    {
      v35 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v36 = v43[0];
      v37 = os_log_type_enabled(v24, v43[0]);
      if (v35)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v47 = "__nw_protocol_finalize_output_frames";
          v48 = 2082;
          v49 = v35;
          _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v35);
        goto LABEL_72;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v41 = v43[0];
      if (os_log_type_enabled(v24, v43[0]))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v24, v41, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_72:
  if (v23)
    free(v23);
  return 1;
}

void sub_18347C900(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t nw_protocol_instance_wait_for_early_data(void *a1)
{
  id v1;
  _BYTE *v2;
  uint64_t v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_instance_wait_for_early_data";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_protocol_instance_wait_for_early_data";
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null instance", buf, 0xCu);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_protocol_instance_wait_for_early_data";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_protocol_instance_wait_for_early_data";
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_protocol_instance_wait_for_early_data";
          _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v5)
      free(v5);
    goto LABEL_22;
  }
  nw_context_assert_queue(*((void **)v1 + 15));
  if (!*((_QWORD *)v2 - 6))
  {
LABEL_22:
    v3 = 0;
    goto LABEL_23;
  }
  v2[405] |= 8u;
  v3 = 1;
LABEL_23:

  return v3;
}

void sub_18347CBD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_instance_reset_after_early_data(void *a1)
{
  char **v1;
  char **v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *((_BYTE *)v1 + 405) &= ~8u;
    if (*((_DWORD *)v1[1] + 16) == 3)
      nw_hash_table_apply(v1[29], (uint64_t)&__block_literal_global_58);
    goto LABEL_4;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_instance_reset_after_early_data";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_instance_reset_after_early_data";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_instance_reset_after_early_data";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_instance_reset_after_early_data";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_instance_reset_after_early_data";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v4)
    free(v4);
LABEL_4:

}

uint64_t __nw_protocol_instance_reset_after_early_data_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra;

  extra = nw_hash_node_get_extra(a2);
  *(_WORD *)(extra + 52) &= ~0x10u;
  return 1;
}

void nw_protocol_instance_assert_fallback_agent(void *a1)
{
  id v1;
  void *v2;
  void **v3;
  void **v4;
  char v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  const char *v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void **)v1;
    v4 = v3;
    if ((*((_BYTE *)v3[1] + 184) & 0x10) != 0
      && nw_parameters_get_multipath(v3[6])
      && *(_QWORD *)(*((_QWORD *)v4[1] + 10) + 208))
    {
      v5 = *((_BYTE *)v4 + 405);

      if ((v5 & 4) == 0)
      {
        v22 = 0uLL;
        if (nw_path_get_fallback_agent(v4[36], &v22))
        {
          if ((*((char *)v4 + 405) & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v6 = (id)gLogObj;
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446722;
              v17 = "nw_protocol_instance_assert_fallback_agent";
              v18 = 2082;
              v19 = (char *)v4 + 407;
              v20 = 2080;
              v21 = " ";
              _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sasserting fallback agent", buf, 0x20u);
            }

          }
          nw_path_agent_action((NWConcrete_nw_path *)v4[36], (const unsigned __int8 *)&v22, 131);
        }
      }
    }
    else
    {

    }
    goto LABEL_13;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_instance_assert_fallback_agent";
  v8 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v22) = 16;
  v15 = 0;
  if (__nwlog_fault(v8, &v22, &v15))
  {
    if (v22 == 17)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v22;
      if (os_log_type_enabled(v9, (os_log_type_t)v22))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_instance_assert_fallback_agent";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = v22;
      v13 = os_log_type_enabled(v9, (os_log_type_t)v22);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_protocol_instance_assert_fallback_agent";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_instance_assert_fallback_agent";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v22;
      if (os_log_type_enabled(v9, (os_log_type_t)v22))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_instance_assert_fallback_agent";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_30:
  if (v8)
    free(v8);
LABEL_13:

}

void sub_18347D250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_instance_unassert_fallback_agent(void *a1)
{
  id v1;
  void *v2;
  void **v3;
  void **v4;
  char v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  const char *v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void **)v1;
    v4 = v3;
    if ((*((_BYTE *)v3[1] + 184) & 0x10) != 0
      && nw_parameters_get_multipath(v3[6])
      && *(_QWORD *)(*((_QWORD *)v4[1] + 10) + 208))
    {
      v5 = *((_BYTE *)v4 + 405);

      if ((v5 & 4) == 0)
      {
        v22 = 0uLL;
        if (nw_path_get_fallback_agent(v4[36], &v22))
        {
          if ((*((char *)v4 + 405) & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v6 = (id)gLogObj;
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446722;
              v17 = "nw_protocol_instance_unassert_fallback_agent";
              v18 = 2082;
              v19 = (char *)v4 + 407;
              v20 = 2080;
              v21 = " ";
              _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sunasserting fallback agent", buf, 0x20u);
            }

          }
          nw_path_agent_action((NWConcrete_nw_path *)v4[36], (const unsigned __int8 *)&v22, 132);
        }
      }
    }
    else
    {

    }
    goto LABEL_13;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_instance_unassert_fallback_agent";
  v8 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v22) = 16;
  v15 = 0;
  if (__nwlog_fault(v8, &v22, &v15))
  {
    if (v22 == 17)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v22;
      if (os_log_type_enabled(v9, (os_log_type_t)v22))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_instance_unassert_fallback_agent";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = v22;
      v13 = os_log_type_enabled(v9, (os_log_type_t)v22);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_protocol_instance_unassert_fallback_agent";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_instance_unassert_fallback_agent";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v22;
      if (os_log_type_enabled(v9, (os_log_type_t)v22))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_instance_unassert_fallback_agent";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_30:
  if (v8)
    free(v8);
LABEL_13:

}

void sub_18347D5F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_protocol_instance_copy_interface_for_path(void *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t node;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_instance_copy_interface_for_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_copy_interface_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_instance_copy_interface_for_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v9)
        free(v9);
      goto LABEL_40;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_copy_interface_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  v5 = v3[37];
  if (!v5 || (node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_40:
    v7 = 0;
    goto LABEL_41;
  }
  v7 = *(id *)(node + 48);
LABEL_41:

  return v7;
}

id nw_protocol_instance_copy_override_endpoint_for_path(void *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t node;
  uint64_t v7;
  id v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_39;
    }
    if (!v23)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_39;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
      v27 = 2082;
      v28 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_27;
  }
  if (!a2)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_39:

LABEL_40:
      if (v10)
        free(v10);
      goto LABEL_42;
    }
    if (!v23)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_39;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
      v27 = 2082;
      v28 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_27:

    free(backtrace_string);
    goto LABEL_40;
  }
  v5 = v3[37];
  if (!v5 || (node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_42:
    v8 = 0;
    goto LABEL_43;
  }
  v7 = 152;
  if (!*(_QWORD *)(node + 152))
    v7 = 120;
  v8 = *(id *)(node + v7);
LABEL_43:

  return v8;
}

uint64_t nw_protocol_instance_get_priority_for_path(void *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t node;
  char v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_instance_get_priority_for_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_get_priority_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_instance_get_priority_for_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v9)
        free(v9);
      goto LABEL_40;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_get_priority_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  v5 = v3[37];
  if (!v5 || (node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_40:
    v7 = 0;
    goto LABEL_41;
  }
  v7 = *(_BYTE *)(node + 168);
LABEL_41:

  return v7;
}

id nw_protocol_instance_copy_local_cid_for_path(void *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t node;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_instance_copy_local_cid_for_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_copy_local_cid_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_instance_copy_local_cid_for_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v9)
        free(v9);
      goto LABEL_40;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_copy_local_cid_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  v5 = v3[37];
  if (!v5 || (node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_40:
    v7 = 0;
    goto LABEL_41;
  }
  v7 = *(id *)(node + 96);
LABEL_41:

  return v7;
}

id nw_protocol_instance_copy_remote_cid_for_path(void *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t node;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_instance_copy_remote_cid_for_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_copy_remote_cid_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_instance_copy_remote_cid_for_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v9)
        free(v9);
      goto LABEL_40;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_copy_remote_cid_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  v5 = v3[37];
  if (!v5 || (node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_40:
    v7 = 0;
    goto LABEL_41;
  }
  v7 = *(id *)(node + 104);
LABEL_41:

  return v7;
}

id nw_protocol_instance_copy_initial_data_for_path(void *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t node;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_instance_copy_initial_data_for_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_copy_initial_data_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_instance_copy_initial_data_for_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v9)
        free(v9);
      goto LABEL_40;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_copy_initial_data_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  v5 = v3[37];
  if (!v5 || (node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_40:
    v7 = 0;
    goto LABEL_41;
  }
  v7 = *(id *)(node + 112);
LABEL_41:

  return v7;
}

uint64_t nw_protocol_instance_get_sockfd_for_path(void *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t node;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_instance_get_sockfd_for_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_get_sockfd_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_instance_get_sockfd_for_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v9)
        free(v9);
      goto LABEL_40;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_get_sockfd_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  v5 = v3[37];
  if (!v5 || (node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_40:
    v7 = 0xFFFFFFFFLL;
    goto LABEL_41;
  }
  v7 = *(unsigned int *)(node + 164);
LABEL_41:

  return v7;
}

void nw_protocol_instance_set_current_path(void *a1, uint64_t a2)
{
  NWConcrete_nw_protocol_instance *v3;
  NWConcrete_nw_protocol_instance *v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  id *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  _DWORD *v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  _DWORD *wakeup;
  NSObject *v20;
  NSObject *v21;
  _DWORD *v22;
  id v23;
  os_unfair_lock_s *v24;
  __int16 v25;
  unsigned __int16 *v26;
  char *v27;
  char *v28;
  int v29;
  _DWORD *v30;
  NSObject *v31;
  char *tqh_last;
  const char *v33;
  void *v34;
  char v35;
  uint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(const char *, unsigned __int16 *, uint64_t, os_unfair_lock_s *, uint64_t);
  void *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  void *v46;
  const char *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  const char *v51;
  NSObject *v52;
  char *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  void *v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  char *backtrace_string;
  _BOOL4 v61;
  const char *v62;
  char *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  os_log_type_t v66;
  os_log_type_t v67;
  const char *v68;
  const char *v69;
  os_log_type_t v70;
  os_log_type_t v71;
  const char *v72;
  _QWORD v73[4];
  NWConcrete_nw_protocol_instance *v74;
  os_unfair_lock_s *v75;
  char v76;
  os_log_type_t v77;
  unsigned __int16 *p_paths_log_id_num;
  char v79;
  os_log_type_t type[8];
  char v81;
  uint8_t buf[4];
  const char *v83;
  __int16 v84;
  void *v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  _DWORD *p_os_unfair_lock_opaque;
  __int16 v90;
  os_unfair_lock_s *v91;
  __int16 v92;
  id v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
    {
      v5 = nw_protocol_implementation_lookup_path(v3, a2, 0);
      if (!v5)
      {
        if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0)
        {
          __nwlog_obj();
          v52 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            v83 = "nw_protocol_instance_set_current_path";
            v84 = 2082;
            v85 = (char *)&v4->flow_in_connected + 7;
            v86 = 2080;
            v87 = " ";
            v88 = 2048;
            p_os_unfair_lock_opaque = (_DWORD *)a2;
            _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot find current protocol_path %lx", buf, 0x2Au);
          }

        }
        v14 = 0;
        v8 = 0;
        v10 = 0;
        goto LABEL_62;
      }
      v6 = v5;
      v7 = (os_unfair_lock_s *)*(id *)(v5 + 96);
      v8 = v7;
      if (v7)
      {
        v9 = v7;
        os_unfair_lock_lock(v8 + 24);
        v10 = v9[6];
        os_unfair_lock_unlock(v8 + 24);

      }
      else
      {
        v10 = 0;
      }
      v15 = (os_unfair_lock_s *)*(id *)(v6 + 16);
      v16 = SBYTE5(v4->flow_in_connected);
      if (!v15)
      {
        if ((v16 & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v20 = (id)gLogObj;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            v83 = "nw_protocol_instance_set_current_path";
            v84 = 2082;
            v85 = (char *)&v4->flow_in_connected + 7;
            v86 = 2080;
            v87 = " ";
            v88 = 2048;
            p_os_unfair_lock_opaque = (_DWORD *)a2;
            _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot find interface for new current protocol_path %lx", buf, 0x2Au);
          }

        }
        v14 = 0;
        goto LABEL_62;
      }
      v14 = v15;
      if ((v16 & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136447490;
          v83 = "nw_protocol_instance_set_current_path";
          v84 = 2082;
          v85 = (char *)&v4->flow_in_connected + 7;
          v86 = 2080;
          v87 = " ";
          v88 = 2048;
          p_os_unfair_lock_opaque = (_DWORD *)a2;
          v90 = 2112;
          v91 = v14;
          v92 = 2112;
          v93 = v10;
          _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sNew current protocol_path %lx using interface %@, path %@", buf, 0x3Eu);
        }

        LOBYTE(v16) = BYTE5(v4->flow_in_connected);
      }
      if (v8)
      {
        if ((v16 & 0x80) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v18 = (id)gLogObj;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            wakeup = v4->wakeup;
            *(_DWORD *)buf = 136447234;
            v83 = "nw_protocol_instance_set_current_path";
            v84 = 2082;
            v85 = (char *)&v4->flow_in_connected + 7;
            v86 = 2080;
            v87 = " ";
            v88 = 2112;
            p_os_unfair_lock_opaque = wakeup;
            v90 = 2112;
            v91 = v8;
            _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sOverriding %@ with evaluator %@", buf, 0x34u);
          }

        }
        nw_path_flow_registration_override_evaluator(v4->wakeup, v8);
        nw_path_flow_registration_override_interface_types(v4->wakeup, 0, 0, 0, 0, 0);
        if (SBYTE5(v4->flow_in_connected) < 0)
          goto LABEL_41;
LABEL_38:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v31 = (id)gLogObj;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446978;
          v83 = "nw_protocol_instance_set_current_path";
          v84 = 2082;
          v85 = (char *)&v4->flow_in_connected + 7;
          v86 = 2080;
          v87 = " ";
          v88 = 2112;
          p_os_unfair_lock_opaque = &v14->_os_unfair_lock_opaque;
          _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sCalling notify nw_protocol_notification_type_migration %@", buf, 0x2Au);
        }

        goto LABEL_41;
      }
      if ((v16 & 0x80) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          v22 = v4->wakeup;
          *(_DWORD *)buf = 136447234;
          v83 = "nw_protocol_instance_set_current_path";
          v84 = 2082;
          v85 = (char *)&v4->flow_in_connected + 7;
          v86 = 2080;
          v87 = " ";
          v88 = 2112;
          p_os_unfair_lock_opaque = v22;
          v90 = 2112;
          v91 = v14;
          _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sOverriding %@ with properties from interface %@", buf, 0x34u);
        }

      }
      nw_path_flow_registration_override_evaluator(v4->wakeup, 0);
      v23 = v4->wakeup;
      v24 = v14;
      v26 = (unsigned __int16 *)((char *)&v24[21]._os_unfair_lock_opaque + 1);
      v25 = *(_WORD *)((char *)&v24[21]._os_unfair_lock_opaque + 1);

      v27 = v24;
      LODWORD(v26) = *v26;

      v28 = v27;
      v30 = v28 + 96;
      v29 = *((_DWORD *)v28 + 24);

      v14 = v28;
      LODWORD(v30) = *v30;

      nw_path_flow_registration_override_interface_types(v23, v25 & 1, (v26 >> 1) & 1, v29 == 1, (_DWORD)v30 == 2, 0);
      v8 = 0;
      if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0)
        goto LABEL_38;
    }
    else
    {
      if ((SBYTE5(v3->flow_in_connected) & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446722;
          v83 = "nw_protocol_instance_set_current_path";
          v84 = 2082;
          v85 = (char *)&v4->flow_in_connected + 7;
          v86 = 2080;
          v87 = " ";
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sLost all paths", buf, 0x20u);
        }

        if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = (id)gLogObj;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            v13 = v4->wakeup;
            *(_DWORD *)buf = 136446978;
            v83 = "nw_protocol_instance_set_current_path";
            v84 = 2082;
            v85 = (char *)&v4->flow_in_connected + 7;
            v86 = 2080;
            v87 = " ";
            v88 = 2112;
            p_os_unfair_lock_opaque = v13;
            _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sClearing overrides for %@", buf, 0x2Au);
          }

        }
      }
      nw_path_flow_registration_override_evaluator(v4->wakeup, 0);
      nw_path_flow_registration_override_interface_types(v4->wakeup, 0, 0, 0, 0, 0);
      v10 = 0;
      v8 = 0;
      v14 = 0;
      if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0)
        goto LABEL_38;
    }
LABEL_41:
    if (v4->parent_definition->variant == 3)
    {
      tqh_last = (char *)v4->pending_outbound_frames.tqh_last;
      v73[0] = MEMORY[0x1E0C809B0];
      v73[1] = 3221225472;
      v73[2] = __nw_protocol_instance_set_current_path_block_invoke;
      v73[3] = &unk_1E149B8F0;
      v74 = v4;
      v14 = v14;
      v75 = v14;
      nw_hash_table_apply(tqh_last, (uint64_t)v73);

LABEL_62:
      goto LABEL_63;
    }
    v33 = *(const char **)&v4[-1].log_str[41];
    if (v33)
    {
      v34 = (void *)*((_QWORD *)v33 + 5);
      if (v34 == &nw_protocol_ref_counted_handle)
      {
        v36 = *((_QWORD *)v33 + 11);
        if (v36)
          *((_QWORD *)v33 + 11) = v36 + 1;
        v35 = -1;
      }
      else
      {
        v35 = 0;
      }
      *(_QWORD *)type = v33;
      v81 = v35;
      v37 = *(void **)&v4[-1].log_str[33];
      if (v37 == &nw_protocol_ref_counted_handle)
      {
        v39 = *(_QWORD *)&v4[-1].log_str[81];
        if (v39)
          *(_QWORD *)&v4[-1].log_str[81] = v39 + 1;
        v38 = -1;
      }
      else
      {
        v38 = 0;
      }
      p_paths_log_id_num = &v4[-1].paths_log_id_num;
      v79 = v38;
      v40 = *((_QWORD *)v33 + 3);
      if (v40)
      {
        v41 = *(void (**)(const char *, unsigned __int16 *, uint64_t, os_unfair_lock_s *, uint64_t))(v40 + 160);
        if (v41)
        {
          v41(v33, &v4[-1].paths_log_id_num, 24, v14, 8);
          goto LABEL_57;
        }
      }
      __nwlog_obj();
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = (const char *)*((_QWORD *)v33 + 2);
      *(_DWORD *)buf = 136446722;
      v83 = "__nw_protocol_notify";
      if (!v47)
        v47 = "invalid";
      v84 = 2082;
      v85 = (void *)v47;
      v86 = 2048;
      v87 = v33;
      v72 = (const char *)_os_log_send_and_compose_impl();

      v77 = OS_LOG_TYPE_ERROR;
      v76 = 0;
      v48 = (char *)v72;
      if (!__nwlog_fault(v72, &v77, &v76))
      {
LABEL_124:
        if (v48)
          free(v48);
LABEL_57:
        if (v37 == &nw_protocol_ref_counted_handle)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)&p_paths_log_id_num);
          if (v34 != &nw_protocol_ref_counted_handle)
            goto LABEL_62;
        }
        else if (v34 != &nw_protocol_ref_counted_handle)
        {
          goto LABEL_62;
        }
        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
        goto LABEL_62;
      }
      if (v77 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v49 = objc_claimAutoreleasedReturnValue();
        v50 = v77;
        if (os_log_type_enabled(v49, v77))
        {
          v51 = (const char *)*((_QWORD *)v33 + 2);
          if (!v51)
            v51 = "invalid";
          *(_DWORD *)buf = 136446722;
          v83 = "__nw_protocol_notify";
          v84 = 2082;
          v85 = (void *)v51;
          v86 = 2048;
          v87 = v33;
          _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s protocol %{public}s (%p) has invalid notify callback", buf, 0x20u);
        }
      }
      else if (v76)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v49 = objc_claimAutoreleasedReturnValue();
        v71 = v77;
        v61 = os_log_type_enabled(v49, v77);
        if (backtrace_string)
        {
          if (v61)
          {
            v62 = (const char *)*((_QWORD *)v33 + 2);
            if (!v62)
              v62 = "invalid";
            *(_DWORD *)buf = 136446978;
            v83 = "__nw_protocol_notify";
            v84 = 2082;
            v85 = (void *)v62;
            v86 = 2048;
            v87 = v33;
            v88 = 2082;
            p_os_unfair_lock_opaque = backtrace_string;
            _os_log_impl(&dword_182FBE000, v49, v71, "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_123;
        }
        if (v61)
        {
          v69 = (const char *)*((_QWORD *)v33 + 2);
          if (!v69)
            v69 = "invalid";
          *(_DWORD *)buf = 136446722;
          v83 = "__nw_protocol_notify";
          v84 = 2082;
          v85 = (void *)v69;
          v86 = 2048;
          v87 = v33;
          _os_log_impl(&dword_182FBE000, v49, v71, "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        __nwlog_obj();
        v49 = objc_claimAutoreleasedReturnValue();
        v67 = v77;
        if (os_log_type_enabled(v49, v77))
        {
          v68 = (const char *)*((_QWORD *)v33 + 2);
          if (!v68)
            v68 = "invalid";
          *(_DWORD *)buf = 136446722;
          v83 = "__nw_protocol_notify";
          v84 = 2082;
          v85 = (void *)v68;
          v86 = 2048;
          v87 = v33;
          _os_log_impl(&dword_182FBE000, v49, v67, "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded", buf, 0x20u);
        }
      }

LABEL_123:
      v48 = (char *)v72;
      goto LABEL_124;
    }
    __nwlog_obj();
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v83 = "__nw_protocol_notify";
    v57 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(p_paths_log_id_num) = 0;
    if (__nwlog_fault(v57, type, &p_paths_log_id_num))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v58 = objc_claimAutoreleasedReturnValue();
        v59 = type[0];
        if (os_log_type_enabled(v58, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "__nw_protocol_notify";
          _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if ((_BYTE)p_paths_log_id_num)
      {
        v63 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v58 = objc_claimAutoreleasedReturnValue();
        v64 = type[0];
        v65 = os_log_type_enabled(v58, type[0]);
        if (v63)
        {
          if (v65)
          {
            *(_DWORD *)buf = 136446466;
            v83 = "__nw_protocol_notify";
            v84 = 2082;
            v85 = v63;
            _os_log_impl(&dword_182FBE000, v58, v64, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v63);
          goto LABEL_132;
        }
        if (v65)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "__nw_protocol_notify";
          _os_log_impl(&dword_182FBE000, v58, v64, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v58 = objc_claimAutoreleasedReturnValue();
        v70 = type[0];
        if (os_log_type_enabled(v58, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "__nw_protocol_notify";
          _os_log_impl(&dword_182FBE000, v58, v70, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_132:
    if (v57)
      free(v57);
    goto LABEL_62;
  }
  __nwlog_obj();
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v83 = "nw_protocol_instance_set_current_path";
  v43 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(p_paths_log_id_num) = 0;
  if (__nwlog_fault(v43, type, &p_paths_log_id_num))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      v45 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_protocol_instance_set_current_path";
        _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)p_paths_log_id_num)
    {
      v53 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      v54 = type[0];
      v55 = os_log_type_enabled(v44, type[0]);
      if (v53)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          v83 = "nw_protocol_instance_set_current_path";
          v84 = 2082;
          v85 = v53;
          _os_log_impl(&dword_182FBE000, v44, v54, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v53);
        goto LABEL_116;
      }
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_protocol_instance_set_current_path";
        _os_log_impl(&dword_182FBE000, v44, v54, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      v66 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_protocol_instance_set_current_path";
        _os_log_impl(&dword_182FBE000, v44, v66, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_116:
  if (v43)
    free(v43);
LABEL_63:

}

BOOL nw_protocol_implementation_lookup_path(NWConcrete_nw_protocol_instance *a1, uint64_t current_path, unint64_t *a3)
{
  NWConcrete_nw_protocol_instance *v5;
  char *v6;
  _BOOL8 node;
  _BOOL8 v8;
  NSObject *v9;
  int v11;
  const char *v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = (char *)v5;
  if (!current_path)
  {
    current_path = (uint64_t)v5->current_path;
    if (a3)
      *a3 = current_path;
  }
  node = nw_hash_table_get_node((uint64_t)v5->flow_registration, current_path, 8);
  if (node)
  {
    v8 = node + 32;
  }
  else
  {
    if ((v6[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v11 = 136446978;
        v12 = "nw_protocol_implementation_lookup_path";
        v13 = 2082;
        v14 = v6 + 407;
        v15 = 2080;
        v16 = " ";
        v17 = 2048;
        v18 = current_path;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo path found for %lx", (uint8_t *)&v11, 0x2Au);
      }

    }
    v8 = 0;
  }

  return v8;
}

uint64_t __nw_protocol_instance_set_current_path_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *object;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  char v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *);
  void *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  const char *v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  const char *v41;
  const char *v42;
  os_log_type_t v43;
  os_log_type_t v44;
  char v45;
  os_log_type_t v46[8];
  char v47;
  os_log_type_t type;
  os_log_type_t v49[8];
  char v50;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  _QWORD *v56;
  __int16 v57;
  char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  object = (_QWORD *)nw_hash_node_get_object(a2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    v5 = v4 - 96;
  else
    v5 = 0;
  if (object)
  {
    v6 = object;
    v7 = (void *)object[5];
    if (v7 == &nw_protocol_ref_counted_handle)
    {
      v9 = object[11];
      if (v9)
        object[11] = v9 + 1;
      v8 = -1;
    }
    else
    {
      v8 = 0;
    }
    *(_QWORD *)v49 = object;
    v50 = v8;
    if (v4)
    {
      v10 = *(void **)(v5 + 40);
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        v12 = *(_QWORD *)(v5 + 88);
        if (v12)
          *(_QWORD *)(v5 + 88) = v12 + 1;
        v11 = -1;
      }
      else
      {
        v11 = 0;
      }
      *(_QWORD *)v46 = v5;
      v47 = v11;
      v13 = object[3];
      if (v13)
      {
        v14 = *(void (**)(_QWORD *))(v13 + 160);
        if (v14)
        {
          v14(object);
LABEL_19:
          if (v10 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)v46);
LABEL_21:
          if (v7 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)v49);
          return 1;
        }
      }
      __nwlog_obj();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (const char *)v6[2];
      *(_DWORD *)buf = 136446722;
      v52 = "__nw_protocol_notify";
      if (!v17)
        v17 = "invalid";
      v53 = 2082;
      v54 = (void *)v17;
      v55 = 2048;
      v56 = v6;
      v18 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v45 = 0;
      if (__nwlog_fault(v18, &type, &v45))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            v21 = (const char *)v6[2];
            if (!v21)
              v21 = "invalid";
            *(_DWORD *)buf = 136446722;
            v52 = "__nw_protocol_notify";
            v53 = 2082;
            v54 = (void *)v21;
            v55 = 2048;
            v56 = v6;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s protocol %{public}s (%p) has invalid notify callback", buf, 0x20u);
          }
        }
        else if (v45)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v31 = type;
          v32 = os_log_type_enabled(v19, type);
          if (backtrace_string)
          {
            if (v32)
            {
              v33 = (const char *)v6[2];
              if (!v33)
                v33 = "invalid";
              *(_DWORD *)buf = 136446978;
              v52 = "__nw_protocol_notify";
              v53 = 2082;
              v54 = (void *)v33;
              v55 = 2048;
              v56 = v6;
              v57 = 2082;
              v58 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
            goto LABEL_70;
          }
          if (v32)
          {
            v42 = (const char *)v6[2];
            if (!v42)
              v42 = "invalid";
            *(_DWORD *)buf = 136446722;
            v52 = "__nw_protocol_notify";
            v53 = 2082;
            v54 = (void *)v42;
            v55 = 2048;
            v56 = v6;
            _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v40 = type;
          if (os_log_type_enabled(v19, type))
          {
            v41 = (const char *)v6[2];
            if (!v41)
              v41 = "invalid";
            *(_DWORD *)buf = 136446722;
            v52 = "__nw_protocol_notify";
            v53 = 2082;
            v54 = (void *)v41;
            v55 = 2048;
            v56 = v6;
            _os_log_impl(&dword_182FBE000, v19, v40, "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded", buf, 0x20u);
          }
        }

      }
LABEL_70:
      if (v18)
        free(v18);
      goto LABEL_19;
    }
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v52 = "__nw_protocol_notify";
    v27 = (char *)_os_log_send_and_compose_impl();

    v46[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v27, v46, &type))
    {
      if (v46[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = v46[0];
        if (os_log_type_enabled(v28, v46[0]))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_notify";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null other_protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        v37 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v38 = v46[0];
        v39 = os_log_type_enabled(v28, v46[0]);
        if (v37)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            v52 = "__nw_protocol_notify";
            v53 = 2082;
            v54 = v37;
            _os_log_impl(&dword_182FBE000, v28, v38, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v37);
          goto LABEL_86;
        }
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_notify";
          _os_log_impl(&dword_182FBE000, v28, v38, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v44 = v46[0];
        if (os_log_type_enabled(v28, v46[0]))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_notify";
          _os_log_impl(&dword_182FBE000, v28, v44, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_86:
    if (v27)
      free(v27);
    goto LABEL_21;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v52 = "__nw_protocol_notify";
  v23 = (char *)_os_log_send_and_compose_impl();

  v49[0] = OS_LOG_TYPE_ERROR;
  v46[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v49, v46))
  {
    if (v49[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_notify";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v46[0])
    {
      v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v35 = v49[0];
      v36 = os_log_type_enabled(v24, v49[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v52 = "__nw_protocol_notify";
          v53 = 2082;
          v54 = v34;
          _os_log_impl(&dword_182FBE000, v24, v35, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        goto LABEL_81;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_notify";
        _os_log_impl(&dword_182FBE000, v24, v35, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v43 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_notify";
        _os_log_impl(&dword_182FBE000, v24, v43, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_81:
  if (v23)
    free(v23);
  return 1;
}

void sub_1834810A0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t nw_protocol_instance_create_extra_path(void *a1, uint64_t a2, void *a3)
{
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t node;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  os_log_type_t v32;
  uint64_t __buf;
  char v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_protocol_instance_create_extra_path";
    v21 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__buf) = 16;
    v35 = 0;
    if (!__nwlog_fault(v21, &__buf, &v35))
      goto LABEL_55;
    if (__buf == 17)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = __buf;
      if (os_log_type_enabled(v22, (os_log_type_t)__buf))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_protocol_instance_create_extra_path";
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v35)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v31 = __buf;
      if (os_log_type_enabled(v22, (os_log_type_t)__buf))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_protocol_instance_create_extra_path";
        _os_log_impl(&dword_182FBE000, v22, v31, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v22 = objc_claimAutoreleasedReturnValue();
    v27 = __buf;
    v28 = os_log_type_enabled(v22, (os_log_type_t)__buf);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_protocol_instance_create_extra_path";
        _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v37 = "nw_protocol_instance_create_extra_path";
      v38 = 2082;
      v39 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_42;
  }
  if (!a2)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_protocol_instance_create_extra_path";
    v21 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__buf) = 16;
    v35 = 0;
    if (!__nwlog_fault(v21, &__buf, &v35))
      goto LABEL_55;
    if (__buf == 17)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v25 = __buf;
      if (os_log_type_enabled(v22, (os_log_type_t)__buf))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_protocol_instance_create_extra_path";
        _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null existing_path", buf, 0xCu);
      }
LABEL_54:

LABEL_55:
      if (v21)
        free(v21);
      goto LABEL_57;
    }
    if (!v35)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v32 = __buf;
      if (os_log_type_enabled(v22, (os_log_type_t)__buf))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_protocol_instance_create_extra_path";
        _os_log_impl(&dword_182FBE000, v22, v32, "%{public}s called with null existing_path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v22 = objc_claimAutoreleasedReturnValue();
    v29 = __buf;
    v30 = os_log_type_enabled(v22, (os_log_type_t)__buf);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_protocol_instance_create_extra_path";
        _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s called with null existing_path, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v37 = "nw_protocol_instance_create_extra_path";
      v38 = 2082;
      v39 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s called with null existing_path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_42:

    free(backtrace_string);
    goto LABEL_55;
  }
  __buf = 0;
  v7 = *((_QWORD *)v5 + 37);
  if (!v7 || (node = nw_hash_table_get_node(v7, a2, 8)) == 0)
  {
LABEL_57:
    v17 = 0;
    goto LABEL_58;
  }
  v9 = node;
  v10 = *(void **)(node + 48);
  v11 = v10;
  if (v11)
  {
    arc4random_buf(&__buf, 8uLL);
    v35 = 0;
    v12 = nw_hash_table_add_object(*((_QWORD *)v5 + 37), __buf, &v35);
    if (v35)
    {
      v13 = v12;
      if (v12)
      {
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)(v12 + 144) = 0u;
        *(_OWORD *)(v12 + 160) = 0u;
        *(_OWORD *)(v12 + 112) = 0u;
        *(_OWORD *)(v12 + 128) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_OWORD *)(v12 + 64) = 0u;
        objc_storeStrong((id *)(v12 + 48), v10);
        *(_OWORD *)(v13 + 32) = *(_OWORD *)(v9 + 32);
        *(_DWORD *)(v13 + 160) = 1;
        *(_BYTE *)(v13 + 169) &= ~8u;
        objc_storeStrong((id *)(v13 + 152), a3);
        *(_QWORD *)(v13 + 136) = 0;
        *(_QWORD *)(v13 + 144) = v13 + 136;
        (*(void (**)(char *))(*(_QWORD *)(*((_QWORD *)v5 + 1) + 80) + 208))(v5);
        if ((v5[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v14 = (id)gLogObj;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            v15 = *(_QWORD *)(v13 + 48);
            v16 = *(_QWORD *)(v13 + 152);
            *(_DWORD *)buf = 136447490;
            v37 = "nw_protocol_instance_create_extra_path";
            v38 = 2082;
            v39 = v5 + 407;
            v40 = 2080;
            v41 = " ";
            v42 = 2048;
            v43 = __buf;
            v44 = 2112;
            v45 = v15;
            v46 = 2112;
            v47 = v16;
            _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sPath %lx created over %@ (overriden endpoint %@)", buf, 0x3Eu);
          }

        }
        v17 = __buf;
        goto LABEL_22;
      }
    }
    if ((v5[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        v37 = "nw_protocol_instance_create_extra_path";
        v38 = 2082;
        v39 = v5 + 407;
        v40 = 2080;
        v41 = " ";
        v42 = 2048;
        v43 = __buf;
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to add additional path %lx to paths table", buf, 0x2Au);
      }

    }
  }
  else if ((v5[405] & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v37 = "nw_protocol_instance_create_extra_path";
      v38 = 2082;
      v39 = v5 + 407;
      v40 = 2080;
      v41 = " ";
      v42 = 2048;
      v43 = a2;
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot establish extra path on interface used by %lx: interface not found", buf, 0x2Au);
    }

  }
  v17 = 0;
LABEL_22:

LABEL_58:
  return v17;
}

void sub_1834818A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_instance_establish_path(void *a1, uint64_t a2)
{
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  uint64_t node;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int is_null;
  void *v12;
  id v13;
  NSObject *v14;
  NWConcrete_nw_path_evaluator *v15;
  os_unfair_lock_s *v16;
  id *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  const char *logging_description;
  NSObject *v22;
  const char *v23;
  void *v24;
  NSObject *v25;
  int v26;
  NSObject *v27;
  NSObject *v28;
  NWConcrete_nw_path_evaluator *evaluator_for_endpoint;
  os_unfair_lock_s *v30;
  id *v31;
  id v32;
  id v33;
  int is_eligible_for_CrazyIvan46;
  uint64_t v35;
  const sockaddr *address;
  int v37;
  uint64_t v38;
  uint64_t v39;
  nw_endpoint_t v40;
  void *v41;
  int v42;
  NSObject *v43;
  os_unfair_lock_s *v44;
  id *v45;
  id v46;
  NSObject *v47;
  _OWORD *v48;
  NWConcrete_nw_path_flow_registration *new_flow_from_evaluator;
  id v50;
  void *v51;
  void *v52;
  char *v53;
  void *v54;
  void *v55;
  id v56;
  _BOOL8 v57;
  void *v58;
  void *v59;
  uint64_t v60;
  char *v61;
  void *v62;
  char *v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  NSObject *v68;
  uint64_t v69;
  const char *v70;
  NSObject *v71;
  NSObject *v72;
  uint64_t v73;
  NWConcrete_nw_path *v74;
  NSObject *v75;
  uint64_t v76;
  void *v77;
  xpc_object_t v78;
  void *v79;
  id *v80;
  void *v81;
  void *v82;
  int v83;
  NSObject *v84;
  void *v85;
  NSObject *v86;
  NSObject *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t internal;
  const char *v93;
  NWConcrete_nw_protocol_definition *v94;
  NSObject *v95;
  uint64_t v96;
  char v97;
  NSObject *v98;
  const char *v99;
  NSObject *p_super;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t (**v105)(const char *);
  uint64_t (*v106)(const char *);
  char v107;
  uint64_t v108;
  char v109;
  int v110;
  NSObject *v111;
  uint64_t v112;
  const char *v113;
  void *v114;
  char v115;
  NSObject *v116;
  uint64_t v117;
  void *v118;
  void *v119;
  void *v120;
  uint64_t v121;
  void *v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(const char *, char *);
  void *v127;
  char *v128;
  NSObject *v129;
  os_log_type_t v130;
  void *v131;
  os_log_type_t v132;
  char *backtrace_string;
  os_log_type_t v134;
  _BOOL4 v135;
  char *v136;
  os_log_type_t v137;
  _BOOL4 v138;
  os_log_type_t v139;
  os_log_type_t v140;
  void *v141;
  const char *v142;
  NSObject *v143;
  os_log_type_t v144;
  const char *v145;
  void *v146;
  const char *v147;
  char *v148;
  NSObject *v149;
  os_log_type_t v150;
  const char *v151;
  char *v152;
  _BOOL4 v153;
  const char *v154;
  void *v155;
  char *v156;
  NSObject *v157;
  os_log_type_t v158;
  char *v159;
  os_log_type_t v160;
  _BOOL4 v161;
  const char *v162;
  char *v163;
  os_log_type_t v164;
  _BOOL4 v165;
  os_log_type_t v166;
  const char *v167;
  os_log_type_t v168;
  const char *v169;
  const char *v170;
  const char *v171;
  os_log_type_t v172;
  os_log_type_t v173;
  NSObject *log;
  char *v175;
  NWConcrete_nw_protocol_definition *v176;
  NSObject *v177;
  nw_protocol_options_t v178;
  nw_protocol_options_t v179;
  void *v180;
  int v181;
  void *v182;
  void **v183;
  uint64_t *v184;
  uint64_t v185;
  nw_endpoint_t v186;
  NSObject *endpoint;
  NSObject *endpointa;
  _QWORD v189[4];
  NSObject *v190;
  _QWORD v191[4];
  char *v192;
  _QWORD *v193;
  __int128 *p_dst;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD v198[4];
  id v199;
  __int128 *v200;
  _QWORD *v201;
  _QWORD v202[4];
  char v203;
  os_log_type_t type;
  char *v205;
  char v206;
  _BYTE buf[24];
  const char *v208;
  __int16 v209;
  uint64_t v210;
  __int16 v211;
  _BYTE v212[24];
  __int128 v213;
  _BYTE v214[12];
  __int16 v215;
  char *v216;
  __int16 v217;
  const char *v218;
  __int128 v219;
  uint64_t v220;
  char v221;
  __int128 __dst;
  uint64_t v223;
  char *v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;

  v227 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = (char *)v3;
  if (!v3)
  {
    __nwlog_obj();
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
    v128 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__dst) = 16;
    LOBYTE(v219) = 0;
    if (!__nwlog_fault(v128, &__dst, &v219))
      goto LABEL_247;
    if (__dst == 17)
    {
      __nwlog_obj();
      v129 = objc_claimAutoreleasedReturnValue();
      v130 = __dst;
      if (os_log_type_enabled(v129, (os_log_type_t)__dst))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
        _os_log_impl(&dword_182FBE000, v129, v130, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)v219)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v129 = objc_claimAutoreleasedReturnValue();
      v134 = __dst;
      v135 = os_log_type_enabled(v129, (os_log_type_t)__dst);
      if (backtrace_string)
      {
        if (v135)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v129, v134, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_247:
        if (!v128)
          goto LABEL_18;
LABEL_248:
        free(v128);
        goto LABEL_18;
      }
      if (v135)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
        _os_log_impl(&dword_182FBE000, v129, v134, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v129 = objc_claimAutoreleasedReturnValue();
      v139 = __dst;
      if (os_log_type_enabled(v129, (os_log_type_t)__dst))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
        _os_log_impl(&dword_182FBE000, v129, v139, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_246:

    goto LABEL_247;
  }
  if (!a2)
  {
    __nwlog_obj();
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
    v128 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__dst) = 16;
    LOBYTE(v219) = 0;
    if (!__nwlog_fault(v128, &__dst, &v219))
      goto LABEL_247;
    if (__dst == 17)
    {
      __nwlog_obj();
      v129 = objc_claimAutoreleasedReturnValue();
      v132 = __dst;
      if (os_log_type_enabled(v129, (os_log_type_t)__dst))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
        _os_log_impl(&dword_182FBE000, v129, v132, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if ((_BYTE)v219)
    {
      v136 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v129 = objc_claimAutoreleasedReturnValue();
      v137 = __dst;
      v138 = os_log_type_enabled(v129, (os_log_type_t)__dst);
      if (v136)
      {
        if (v138)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v136;
          _os_log_impl(&dword_182FBE000, v129, v137, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v136);
        if (!v128)
          goto LABEL_18;
        goto LABEL_248;
      }
      if (v138)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
        _os_log_impl(&dword_182FBE000, v129, v137, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v129 = objc_claimAutoreleasedReturnValue();
      v140 = __dst;
      if (os_log_type_enabled(v129, (os_log_type_t)__dst))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
        _os_log_impl(&dword_182FBE000, v129, v140, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_246;
  }
  v5 = v3[37];
  if (!v5)
  {
    if ((v4[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v4 + 407;
        *(_WORD *)&buf[22] = 2080;
        v208 = " ";
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo path table found", buf, 0x20u);
      }
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  node = nw_hash_table_get_node(v5, a2, 8);
  if (node)
  {
    v7 = node;
    if (*(_QWORD *)(node + 56))
    {
      if ((v4[405] & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v4 + 407;
          *(_WORD *)&buf[22] = 2080;
          v208 = " ";
          v209 = 2048;
          v210 = a2;
          _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sPath %lx already has registered flow", buf, 0x2Au);
        }
LABEL_17:

        goto LABEL_18;
      }
      goto LABEL_18;
    }
    v185 = node + 32;
    is_null = uuid_is_null((const unsigned __int8 *)(node + 32));
    v12 = *(void **)(v7 + 152);
    if (v12)
    {
      v13 = v12;
LABEL_43:
      v183 = (void **)(v4 + 40);
      goto LABEL_44;
    }
    if (!*((_QWORD *)v4 + 45) && !*((_QWORD *)v4 + 46))
    {
LABEL_49:
      v33 = *((id *)v4 + 44);
      v183 = (void **)(v4 + 40);
      if (!v33)
      {
        v25 = *((id *)v4 + 5);
        v186 = 0;
        v27 = 0;
        if (!v25)
          goto LABEL_65;
        goto LABEL_45;
      }
      v13 = v33;
LABEL_44:
      v25 = v13;
      v186 = v25;
LABEL_45:
      endpoint = v25;
      v26 = -[NSObject type](endpoint, "type");

      if (v26 == 1)
      {
        v27 = endpoint;
        if (nw_endpoint_get_address_family(endpoint) != 2)
          goto LABEL_65;
        v28 = nw_parameters_create();
        nw_parameters_require_interface(v28, *(nw_interface_t *)(v7 + 48));
        evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(0, v28);
        v30 = (os_unfair_lock_s *)evaluator_for_endpoint;
        if (evaluator_for_endpoint)
        {
          v31 = evaluator_for_endpoint;
          os_unfair_lock_lock(v30 + 24);
          v32 = v31[6];
          os_unfair_lock_unlock(v30 + 24);

        }
        else
        {
          v32 = 0;
        }
        is_eligible_for_CrazyIvan46 = nw_path_is_eligible_for_CrazyIvan46(v32);

        if (is_eligible_for_CrazyIvan46)
        {
          v35 = *(_QWORD *)(v7 + 48);
          if (v35)
            LODWORD(v35) = *(_DWORD *)(v35 + 8);
          LODWORD(v202[0]) = v35;
          address = nw_endpoint_get_address(endpoint);
          *(_QWORD *)&v219 = 0;
          v37 = nw_nat64_copy_prefixes((unsigned int *)v202, &v219);
          if (v37 >= 1)
          {
            v181 = is_null;
            v38 = 0;
            v39 = 16 * v37;
            while (1)
            {
              __dst = 0uLL;
              if (nw_nat64_synthesize_v6((_QWORD *)(v219 + v38), (__int16 *)&address->sa_data[2], (char *)&__dst))break;
              v38 += 16;
              if (v39 == v38)
              {
                is_null = v181;
                goto LABEL_61;
              }
            }
            LODWORD(v208) = 0;
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)&buf[16] = 0;
            *(_QWORD *)buf = 7708;
            *(_WORD *)&buf[2] = *(_WORD *)address->sa_data;
            *(_OWORD *)&buf[8] = __dst;
            v40 = nw_endpoint_create_address((const sockaddr *)buf);

            is_null = v181;
            v186 = v40;
          }
LABEL_61:
          if ((_QWORD)v219)
            free((void *)v219);
        }

      }
      v27 = endpoint;
LABEL_65:
      endpointa = v27;
      v41 = *(void **)(v7 + 128);
      v42 = v4[405];
      if (v41)
      {
        if ((v42 & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v43 = (id)gLogObj;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            v44 = *(os_unfair_lock_s **)(v7 + 128);
            if (v44)
            {
              v45 = v44;
              os_unfair_lock_lock(v44 + 24);
              v46 = v45[6];
              os_unfair_lock_unlock(v44 + 24);

            }
            else
            {
              v46 = 0;
            }
            v50 = v46;
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v4 + 407;
            *(_WORD *)&buf[22] = 2080;
            v208 = " ";
            v209 = 2112;
            v210 = (uint64_t)v44;
            v211 = 2112;
            *(_QWORD *)v212 = v50;
            _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sCreating new flow from evaluator %@ path %@", buf, 0x34u);

          }
          v41 = *(void **)(v7 + 128);
        }
        new_flow_from_evaluator = nw_path_flow_registration_create_new_flow_from_evaluator(*((void **)v4 + 35), v41);
      }
      else
      {
        if ((v42 & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v47 = (id)gLogObj;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v4 + 407;
            *(_WORD *)&buf[22] = 2080;
            v208 = " ";
            v209 = 2112;
            v210 = (uint64_t)endpointa;
            _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sCreating new flow for %@", buf, 0x2Au);
          }

        }
        if (is_null)
          v48 = 0;
        else
          v48 = (_OWORD *)v185;
        new_flow_from_evaluator = nw_path_flow_registration_create_new_flow(*((void **)v4 + 35), 1, is_null == 0, 0, 0, v48, v186, 0);
      }
      v51 = *(void **)(v7 + 56);
      *(_QWORD *)(v7 + 56) = new_flow_from_evaluator;

      v52 = *(void **)(v7 + 56);
      if (!v52)
      {
        if ((v4[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v68 = (id)gLogObj;
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            v69 = *(_QWORD *)(v7 + 48);
            v70 = "socket";
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&buf[12] = 2082;
            if (!is_null)
              v70 = "channel";
            *(_QWORD *)&buf[14] = v4 + 407;
            *(_WORD *)&buf[22] = 2080;
            v208 = " ";
            v209 = 2048;
            v210 = a2;
            v211 = 2080;
            *(_QWORD *)v212 = v70;
            *(_WORD *)&v212[8] = 2112;
            *(_QWORD *)&v212[10] = v69;
            _os_log_impl(&dword_182FBE000, v68, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sPath %lx failed to request %s flow over %@", buf, 0x3Eu);
          }

        }
        *(_DWORD *)(v7 + 160) = 2;
        *(_BYTE *)(v7 + 169) |= 8u;
        v71 = endpointa;
        (*(void (**)(char *, uint64_t, uint64_t, BOOL))(*(_QWORD *)(*((_QWORD *)v4 + 1) + 80) + 208))(v4, a2, 2, *((_QWORD *)v4 + 39) == a2);
        nw_protocol_path_state_dispose(v4, v185);
        nw_hash_table_remove_node(*((_QWORD *)v4 + 37), v7);
        v9 = 0;
        goto LABEL_198;
      }
      v53 = v4 - 96;
      if (is_null)
      {
        v226 = *(_OWORD *)v53;
        v225 = 0uLL;
        nw_path_flow_registration_get_id(v52, &v225);
        *(_OWORD *)v53 = v225;
        *((_QWORD *)v4 + 40) = a2;
        nw_path_override_interface(*((void **)v4 + 36), *(void **)(v7 + 48), 1);
        v54 = v186;
        if (!v186)
          v54 = *v183;
        objc_storeStrong((id *)v4 + 41, v54);
        v55 = (void *)*((_QWORD *)v4 + 42);
        *((_QWORD *)v4 + 42) = 0;

        v56 = *((id *)v4 + 6);
        v57 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v56, 0, 0);

        v58 = (void *)*((_QWORD *)v4 + 43);
        *((_QWORD *)v4 + 43) = v57;

        nw_parameters_require_interface(*((nw_parameters_t *)v4 + 43), *(nw_interface_t *)(v7 + 48));
        *(_QWORD *)&__dst = 0;
        *((_QWORD *)&__dst + 1) = &__dst;
        v223 = 0x2020000000;
        v224 = v4 - 96;
        *(_QWORD *)&v219 = 0;
        *((_QWORD *)&v219 + 1) = &v219;
        v220 = 0x2020000000;
        v221 = 0;
        v202[0] = 0;
        v202[1] = v202;
        v202[2] = 0x2020000000;
        v202[3] = 0;
        v59 = (void *)*((_QWORD *)v4 + 6);
        v60 = MEMORY[0x1E0C809B0];
        v198[0] = MEMORY[0x1E0C809B0];
        v198[1] = 3221225472;
        v198[2] = __nw_protocol_instance_establish_path_block_invoke;
        v198[3] = &unk_1E149B918;
        v61 = v4;
        v199 = v61;
        v200 = &v219;
        v201 = v202;
        nw_parameters_internal_iterate_protocol_stack(v59, 4, 0, v198);
        if (*(_BYTE *)(*((_QWORD *)&v219 + 1) + 24))
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2020000000;
          LOBYTE(v208) = 0;
          v62 = (void *)*((_QWORD *)v4 + 43);
          v191[0] = v60;
          v191[1] = 3221225472;
          v191[2] = __nw_protocol_instance_establish_path_block_invoke_2;
          v191[3] = &unk_1E149B940;
          v193 = v202;
          v63 = v61;
          v192 = v63;
          p_dst = &__dst;
          v195 = buf;
          v196 = a2;
          v197 = v185;
          nw_parameters_internal_iterate_protocol_stack(v62, 4, 0, v191);
          if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
          {
            if ((v4[405] & 0x80000000) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v64 = (id)gLogObj;
              if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v214 = 136446722;
                *(_QWORD *)&v214[4] = "nw_protocol_instance_establish_path";
                v215 = 2082;
                v216 = v63 + 407;
                v217 = 2080;
                v218 = " ";
                _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to attach application protocol", v214, 0x20u);
              }

            }
            nw_protocol_instance_tear_down_path_inner(v63, v185);
            *(_OWORD *)v53 = v226;
            *((_QWORD *)v4 + 40) = 0;
            nw_path_override_interface(*((void **)v4 + 36), 0, 0);
            v65 = (void *)*((_QWORD *)v4 + 41);
            *((_QWORD *)v4 + 41) = 0;

            v66 = (void *)*((_QWORD *)v4 + 42);
            *((_QWORD *)v4 + 42) = 0;

            v67 = (void *)*((_QWORD *)v4 + 43);
            *((_QWORD *)v4 + 43) = 0;

            _Block_object_dispose(buf, 8);
            v9 = 0;
            goto LABEL_196;
          }

          _Block_object_dispose(buf, 8);
        }
        v213 = *(_OWORD *)v53;
        if ((v4[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v87 = (id)gLogObj;
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
          {
            v88 = *(_QWORD *)(v7 + 48);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v61 + 407;
            *(_WORD *)&buf[22] = 2080;
            v208 = " ";
            v209 = 2048;
            v210 = a2;
            v211 = 1040;
            *(_DWORD *)v212 = 16;
            *(_WORD *)&v212[4] = 2096;
            *(_QWORD *)&v212[6] = &v213;
            *(_WORD *)&v212[14] = 2112;
            *(_QWORD *)&v212[16] = v88;
            _os_log_impl(&dword_182FBE000, v87, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPath %lx requested socket flow %{uuid_t}.16P over %@", buf, 0x44u);
          }

        }
        v89 = v61;
        v90 = nw_hash_table_get_node(*((_QWORD *)v4 + 37), a2, 8);
        if (v90)
        {
          v91 = v90;
          if (*(_QWORD *)(v90 + 56))
          {
            if (nw_socket_protocol_identifier::onceToken != -1)
              dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_63760);
            internal = nw_protocol_create_internal((uint64_t)&nw_socket_protocol_identifier::identifier, *((void **)v4 + 41), *((const char **)v4 + 43), 1);
            if (internal)
            {
              v93 = (const char *)internal;
              if (nw_socket_protocol_identifier::onceToken != -1)
                dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_63760);
              v94 = nw_protocol_definition_create_with_identifier(&nw_socket_protocol_identifier::identifier);
              v95 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)v4 + 43));
              v178 = nw_protocol_stack_copy_transport_protocol(v95);
              nw_protocol_instance_set_protocol_instance(v89, v178, v94, (uint64_t)v93);
              v177 = v95;
              v179 = nw_protocol_stack_copy_internet_protocol(v95);
              nw_protocol_instance_set_protocol_instance(v89, v179, v94, (uint64_t)v93);
              v184 = (uint64_t *)(v91 + 64);
              if (*(_QWORD *)(v91 + 64))
                v96 = *(_QWORD *)(v91 + 64);
              else
                v96 = (uint64_t)(v4 - 96);
              v182 = (void *)*((_QWORD *)v93 + 5);
              if (v182 == &nw_protocol_ref_counted_handle)
              {
                v102 = *((_QWORD *)v93 + 11);
                if (v102)
                  *((_QWORD *)v93 + 11) = v102 + 1;
                *(_QWORD *)v214 = v93;
                v97 = v214[8] | 1;
              }
              else
              {
                *(_QWORD *)v214 = v93;
                v97 = v214[8] & 0xFE;
              }
              v214[8] = v97;
              v180 = *(void **)(v96 + 40);
              if (v180 == &nw_protocol_ref_counted_handle)
              {
                v104 = *(_QWORD *)(v96 + 88);
                if (v104)
                  *(_QWORD *)(v96 + 88) = v104 + 1;
                v205 = (char *)v96;
                v103 = v206 | 1;
              }
              else
              {
                v205 = (char *)v96;
                v103 = v206 & 0xFE;
              }
              v206 = v103;
              v105 = (uint64_t (**)(const char *))*((_QWORD *)v93 + 3);
              v176 = v94;
              if (v105)
              {
                v106 = *v105;
                if (v106)
                {
                  v101 = v106(v93);
LABEL_163:
                  if (v180 == &nw_protocol_ref_counted_handle)
                    nw::release_if_needed<nw_protocol *>((uint64_t *)&v205);
                  if (v182 == &nw_protocol_ref_counted_handle)
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v214);
                  if (!*v184)
                  {
                    if (*((_UNKNOWN **)v93 + 5) == &nw_protocol_ref_counted_handle)
                    {
                      v108 = *((_QWORD *)v93 + 11);
                      if (v108)
                        *((_QWORD *)v93 + 11) = v108 + 1;
                      *(_QWORD *)buf = v93;
                      buf[8] |= 1u;
                      v107 = 1;
                    }
                    else
                    {
                      v107 = 0;
                      *(_QWORD *)buf = v93;
                      buf[8] &= ~1u;
                    }
                    v109 = *(_BYTE *)(v91 + 72);
                    if ((v109 & 1) != 0)
                    {
                      nw::release_if_needed<nw_protocol *>(v184);
                      v109 = *(_BYTE *)(v91 + 72);
                    }
                    *(_QWORD *)(v91 + 64) = v93;
                    *(_BYTE *)(v91 + 72) = v107 | v109 & 0xFE;
                  }

                  p_super = &v176->super;
                  goto LABEL_182;
                }
              }
              __nwlog_obj();
              v141 = (void *)objc_claimAutoreleasedReturnValue();
              v142 = (const char *)*((_QWORD *)v93 + 2);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
              if (!v142)
                v142 = "invalid";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v142;
              *(_WORD *)&buf[22] = 2048;
              v208 = v93;
              v175 = (char *)_os_log_send_and_compose_impl();

              type = OS_LOG_TYPE_ERROR;
              v203 = 0;
              if (__nwlog_fault(v175, &type, &v203))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v143 = objc_claimAutoreleasedReturnValue();
                  v144 = type;
                  if (os_log_type_enabled(v143, type))
                  {
                    v145 = (const char *)*((_QWORD *)v93 + 2);
                    if (!v145)
                      v145 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v145;
                    *(_WORD *)&buf[22] = 2048;
                    v208 = v93;
                    _os_log_impl(&dword_182FBE000, v143, v144, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback", buf, 0x20u);
                  }
                }
                else
                {
                  if (v203)
                  {
                    v152 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    log = objc_claimAutoreleasedReturnValue();
                    v173 = type;
                    v153 = os_log_type_enabled(log, type);
                    if (v152)
                    {
                      if (v153)
                      {
                        v154 = (const char *)*((_QWORD *)v93 + 2);
                        if (!v154)
                          v154 = "invalid";
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v154;
                        *(_WORD *)&buf[22] = 2048;
                        v208 = v93;
                        v209 = 2082;
                        v210 = (uint64_t)v152;
                        _os_log_impl(&dword_182FBE000, log, v173, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
                      }

                      free(v152);
                    }
                    else
                    {
                      if (v153)
                      {
                        v170 = (const char *)*((_QWORD *)v93 + 2);
                        if (!v170)
                          v170 = "invalid";
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v170;
                        *(_WORD *)&buf[22] = 2048;
                        v208 = v93;
                        _os_log_impl(&dword_182FBE000, log, v173, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, no backtrace", buf, 0x20u);
                      }

                    }
                    goto LABEL_307;
                  }
                  __nwlog_obj();
                  v143 = objc_claimAutoreleasedReturnValue();
                  v166 = type;
                  if (os_log_type_enabled(v143, type))
                  {
                    v167 = (const char *)*((_QWORD *)v93 + 2);
                    if (!v167)
                      v167 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v167;
                    *(_WORD *)&buf[22] = 2048;
                    v208 = v93;
                    _os_log_impl(&dword_182FBE000, v143, v166, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, backtrace limit exceeded", buf, 0x20u);
                  }
                }

              }
LABEL_307:
              if (v175)
                free(v175);
              v101 = 0;
              goto LABEL_163;
            }
            if ((v4[405] & 0x80000000) == 0)
            {
              __nwlog_obj();
              p_super = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_protocol_instance_attach_socket_protocol";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v89 + 407;
                *(_WORD *)&buf[22] = 2080;
                v208 = " ";
                v209 = 2048;
                v210 = a2;
                _os_log_impl(&dword_182FBE000, p_super, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sPath %lx could not create socket protocol", buf, 0x2Au);
              }
              v101 = 0;
LABEL_182:

              *(_OWORD *)v53 = v226;
              v110 = v4[405];
              if ((v101 & 1) != 0)
              {
                if ((v110 & 0x80000000) == 0)
                {
                  __nwlog_obj();
                  v111 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
                  {
                    v112 = *(_QWORD *)(v7 + 48);
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v89 + 407;
                    *(_WORD *)&buf[22] = 2080;
                    v208 = " ";
                    v209 = 2048;
                    v210 = a2;
                    v211 = 2112;
                    *(_QWORD *)v212 = v112;
                    _os_log_impl(&dword_182FBE000, v111, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPath %lx opened socket over %@", buf, 0x34u);
                  }

                }
                v113 = *(const char **)(v7 + 64);
                if (v113)
                {
                  v114 = (void *)*((_QWORD *)v113 + 5);
                  if (v114 == &nw_protocol_ref_counted_handle)
                  {
                    v121 = *((_QWORD *)v113 + 11);
                    if (v121)
                      *((_QWORD *)v113 + 11) = v121 + 1;
                    *(_QWORD *)v214 = v113;
                    v115 = v214[8] | 1;
                  }
                  else
                  {
                    *(_QWORD *)v214 = *(_QWORD *)(v7 + 64);
                    v115 = v214[8] & 0xFE;
                  }
                  v214[8] = v115;
                  v122 = (void *)*((_QWORD *)v89 - 7);
                  if (v122 == &nw_protocol_ref_counted_handle)
                  {
                    v124 = *((_QWORD *)v89 - 1);
                    if (v124)
                      *((_QWORD *)v89 - 1) = v124 + 1;
                    v205 = v4 - 96;
                    v123 = v206 | 1;
                  }
                  else
                  {
                    v205 = v4 - 96;
                    v123 = v206 & 0xFE;
                  }
                  v206 = v123;
                  v125 = *((_QWORD *)v113 + 3);
                  if (v125)
                  {
                    v126 = *(void (**)(const char *, char *))(v125 + 24);
                    if (v126)
                    {
                      v126(v113, v4 - 96);
                      if (v122 != &nw_protocol_ref_counted_handle)
                        goto LABEL_211;
                      goto LABEL_210;
                    }
                  }
                  __nwlog_obj();
                  v146 = (void *)objc_claimAutoreleasedReturnValue();
                  v147 = (const char *)*((_QWORD *)v113 + 2);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                  if (!v147)
                    v147 = "invalid";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v147;
                  *(_WORD *)&buf[22] = 2048;
                  v208 = v113;
                  v148 = (char *)_os_log_send_and_compose_impl();

                  type = OS_LOG_TYPE_ERROR;
                  v203 = 0;
                  if (__nwlog_fault(v148, &type, &v203))
                  {
                    if (type == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v149 = objc_claimAutoreleasedReturnValue();
                      v150 = type;
                      if (os_log_type_enabled(v149, type))
                      {
                        v151 = (const char *)*((_QWORD *)v113 + 2);
                        if (!v151)
                          v151 = "invalid";
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v151;
                        *(_WORD *)&buf[22] = 2048;
                        v208 = v113;
                        _os_log_impl(&dword_182FBE000, v149, v150, "%{public}s protocol %{public}s (%p) has invalid connect callback", buf, 0x20u);
                      }
LABEL_314:

                      goto LABEL_315;
                    }
                    if (!v203)
                    {
                      __nwlog_obj();
                      v149 = objc_claimAutoreleasedReturnValue();
                      v168 = type;
                      if (os_log_type_enabled(v149, type))
                      {
                        v169 = (const char *)*((_QWORD *)v113 + 2);
                        if (!v169)
                          v169 = "invalid";
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v169;
                        *(_WORD *)&buf[22] = 2048;
                        v208 = v113;
                        _os_log_impl(&dword_182FBE000, v149, v168, "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded", buf, 0x20u);
                      }
                      goto LABEL_314;
                    }
                    v159 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v149 = objc_claimAutoreleasedReturnValue();
                    v160 = type;
                    v161 = os_log_type_enabled(v149, type);
                    if (!v159)
                    {
                      if (v161)
                      {
                        v171 = (const char *)*((_QWORD *)v113 + 2);
                        if (!v171)
                          v171 = "invalid";
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v171;
                        *(_WORD *)&buf[22] = 2048;
                        v208 = v113;
                        _os_log_impl(&dword_182FBE000, v149, v160, "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace", buf, 0x20u);
                      }
                      goto LABEL_314;
                    }
                    if (v161)
                    {
                      v162 = (const char *)*((_QWORD *)v113 + 2);
                      if (!v162)
                        v162 = "invalid";
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v162;
                      *(_WORD *)&buf[22] = 2048;
                      v208 = v113;
                      v209 = 2082;
                      v210 = (uint64_t)v159;
                      _os_log_impl(&dword_182FBE000, v149, v160, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }

                    free(v159);
                  }
LABEL_315:
                  if (v148)
                    free(v148);
                  if (v122 != &nw_protocol_ref_counted_handle)
                    goto LABEL_211;
LABEL_210:
                  nw::release_if_needed<nw_protocol *>((uint64_t *)&v205);
LABEL_211:
                  if (v114 == &nw_protocol_ref_counted_handle)
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v214);
LABEL_213:
                  v9 = 1;
                  goto LABEL_195;
                }
                __nwlog_obj();
                v155 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                v156 = (char *)_os_log_send_and_compose_impl();

                v214[0] = 16;
                LOBYTE(v205) = 0;
                if (__nwlog_fault(v156, v214, &v205))
                {
                  if (v214[0] == 17)
                  {
                    __nwlog_obj();
                    v157 = objc_claimAutoreleasedReturnValue();
                    v158 = v214[0];
                    if (os_log_type_enabled(v157, (os_log_type_t)v214[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                      _os_log_impl(&dword_182FBE000, v157, v158, "%{public}s called with null protocol", buf, 0xCu);
                    }
                  }
                  else if ((_BYTE)v205)
                  {
                    v163 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v157 = objc_claimAutoreleasedReturnValue();
                    v164 = v214[0];
                    v165 = os_log_type_enabled(v157, (os_log_type_t)v214[0]);
                    if (v163)
                    {
                      if (v165)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v163;
                        _os_log_impl(&dword_182FBE000, v157, v164, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                      }

                      free(v163);
                      goto LABEL_325;
                    }
                    if (v165)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                      _os_log_impl(&dword_182FBE000, v157, v164, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                    }
                  }
                  else
                  {
                    __nwlog_obj();
                    v157 = objc_claimAutoreleasedReturnValue();
                    v172 = v214[0];
                    if (os_log_type_enabled(v157, (os_log_type_t)v214[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                      _os_log_impl(&dword_182FBE000, v157, v172, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                    }
                  }

                }
LABEL_325:
                if (v156)
                  free(v156);
                goto LABEL_213;
              }
              if ((v110 & 0x80000000) == 0)
                goto LABEL_191;
              goto LABEL_194;
            }
LABEL_144:

            *(_OWORD *)v53 = v226;
            if ((v4[405] & 0x80000000) == 0)
            {
LABEL_191:
              __nwlog_obj();
              v116 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
              {
                v117 = *(_QWORD *)(v7 + 48);
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v89 + 407;
                *(_WORD *)&buf[22] = 2080;
                v208 = " ";
                v209 = 2048;
                v210 = a2;
                v211 = 2112;
                *(_QWORD *)v212 = v117;
                _os_log_impl(&dword_182FBE000, v116, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sPath %lx failed to open socket over %@", buf, 0x34u);
              }

            }
LABEL_194:
            nw_protocol_instance_tear_down_path_inner(v89, v185);
            v9 = 0;
LABEL_195:
            *((_QWORD *)v4 + 40) = 0;
            nw_path_override_interface(*((void **)v4 + 36), 0, 0);
            v118 = (void *)*((_QWORD *)v4 + 41);
            *((_QWORD *)v4 + 41) = 0;

            v119 = (void *)*((_QWORD *)v4 + 42);
            *((_QWORD *)v4 + 42) = 0;

            v120 = (void *)*((_QWORD *)v4 + 43);
            *((_QWORD *)v4 + 43) = 0;

LABEL_196:
            _Block_object_dispose(v202, 8);
            _Block_object_dispose(&v219, 8);
            _Block_object_dispose(&__dst, 8);
            goto LABEL_197;
          }
          if (v4[405] < 0)
            goto LABEL_144;
          __nwlog_obj();
          v98 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
          {
LABEL_143:

            goto LABEL_144;
          }
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_attach_socket_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v89 + 407;
          *(_WORD *)&buf[22] = 2080;
          v208 = " ";
          v209 = 2048;
          v210 = a2;
          v99 = "%{public}s %{public}s%sPath %lx has no registered flow";
        }
        else
        {
          if (v4[405] < 0)
            goto LABEL_144;
          __nwlog_obj();
          v98 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
            goto LABEL_143;
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_attach_socket_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v89 + 407;
          *(_WORD *)&buf[22] = 2080;
          v208 = " ";
          v209 = 2048;
          v210 = a2;
          v99 = "%{public}s %{public}s%sNo path found for %lx";
        }
        _os_log_impl(&dword_182FBE000, v98, OS_LOG_TYPE_ERROR, v99, buf, 0x2Au);
        goto LABEL_143;
      }
      __dst = *(_OWORD *)v53;
      if ((v4[405] & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v72 = (id)gLogObj;
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
        {
          v73 = *(_QWORD *)(v7 + 48);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v4 + 407;
          *(_WORD *)&buf[22] = 2080;
          v208 = " ";
          v209 = 2048;
          v210 = a2;
          v211 = 1040;
          *(_DWORD *)v212 = 16;
          *(_WORD *)&v212[4] = 2096;
          *(_QWORD *)&v212[6] = &__dst;
          *(_WORD *)&v212[14] = 2112;
          *(_QWORD *)&v212[16] = v73;
          _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPath %lx requested channel flow %{uuid_t}.16P over %@", buf, 0x44u);
        }

        v52 = *(void **)(v7 + 56);
      }
      v74 = (NWConcrete_nw_path *)nw_path_flow_registration_force_update(v52);
      LODWORD(v202[0]) = 0;
      if (nw_path_flow_registration_get_nexus_instance(v74, *(NWConcrete_nw_path_flow_registration **)(v7 + 56), &v219, v202))
      {
        nw_protocol_instance_bring_up_channel(v4, a2, v185, v74);
LABEL_174:

        v9 = 1;
LABEL_197:
        v71 = endpointa;
LABEL_198:

        goto LABEL_19;
      }
      if ((v4[405] & 0x80000000) == 0)
      {
        __nwlog_obj();
        v75 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
        {
          v76 = *(_QWORD *)(v7 + 48);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v4 + 407;
          *(_WORD *)&buf[22] = 2080;
          v208 = " ";
          v209 = 2048;
          v210 = a2;
          v211 = 2112;
          *(_QWORD *)v212 = v76;
          _os_log_impl(&dword_182FBE000, v75, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNo nexus assignment yet, saving path %lx over %@", buf, 0x34u);
        }

      }
      v77 = (void *)*((_QWORD *)v4 + 9);
      if (!v77)
      {
        v78 = xpc_array_create(0, 0);
        v79 = (void *)*((_QWORD *)v4 + 9);
        *((_QWORD *)v4 + 9) = v78;

        v77 = (void *)*((_QWORD *)v4 + 9);
      }
      xpc_array_set_uint64(v77, 0xFFFFFFFFFFFFFFFFLL, a2);
      if (*((_QWORD *)v4 + 8))
        goto LABEL_174;
      v80 = nw_protocol_instance_copy_association(v4);
      v81 = (void *)*((_QWORD *)v4 + 8);
      *((_QWORD *)v4 + 8) = v80;

      v82 = (void *)*((_QWORD *)v4 + 8);
      v83 = v4[405];
      if (v82)
      {
        if ((v83 & 0x80000000) == 0)
        {
          __nwlog_obj();
          v84 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v4 + 407;
            *(_WORD *)&buf[22] = 2080;
            v208 = " ";
            _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRegistering association", buf, 0x20u);
          }

          v82 = (void *)*((_QWORD *)v4 + 8);
        }
        v85 = (void *)*((_QWORD *)v4 + 6);
        v189[0] = MEMORY[0x1E0C809B0];
        v189[1] = 3221225472;
        v189[2] = __nw_protocol_instance_establish_path_block_invoke_62;
        v189[3] = &unk_1E149FB00;
        v190 = v4;
        nw_association_register(v82, v85, v190, 0, v189);
        v86 = v190;
      }
      else
      {
        if (v83 < 0)
          goto LABEL_174;
        __nwlog_obj();
        v86 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v4 + 407;
          *(_WORD *)&buf[22] = 2080;
          v208 = " ";
          _os_log_impl(&dword_182FBE000, v86, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFailed to access protocol instance association", buf, 0x20u);
        }
      }

      goto LABEL_174;
    }
    v14 = nw_parameters_create();
    nw_parameters_require_interface(v14, *(nw_interface_t *)(v7 + 48));
    v15 = nw_path_create_evaluator_for_endpoint(0, v14);
    v16 = (os_unfair_lock_s *)v15;
    if (v15)
    {
      v17 = v15;
      os_unfair_lock_lock(v16 + 24);
      v18 = v17[6];
      os_unfair_lock_unlock(v16 + 24);

    }
    else
    {
      v18 = 0;
    }
    if (nw_path_has_ipv6(v18) && (v19 = (void *)*((_QWORD *)v4 + 46)) != 0)
    {
      if ((v4[405] & 0x80000000) == 0)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          logging_description = nw_endpoint_get_logging_description(*((void **)v4 + 46));
          *(_DWORD *)buf = 136446979;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v4 + 407;
          *(_WORD *)&buf[22] = 2080;
          v208 = " ";
          v209 = 2081;
          v210 = (uint64_t)logging_description;
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sUsing IPv6 Preferred Address %{private}s to establish a new path", buf, 0x2Au);
        }

        v19 = (void *)*((_QWORD *)v4 + 46);
      }
    }
    else
    {
      if (!nw_path_has_ipv4(v18) || (v19 = (void *)*((_QWORD *)v4 + 45)) == 0)
      {
        v13 = 0;
        goto LABEL_41;
      }
      if ((v4[405] & 0x80000000) == 0)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          v23 = nw_endpoint_get_logging_description(*((void **)v4 + 45));
          *(_DWORD *)buf = 136446979;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v4 + 407;
          *(_WORD *)&buf[22] = 2080;
          v208 = " ";
          v209 = 2081;
          v210 = (uint64_t)v23;
          _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sUsing IPv4 Preferred Address %{private}s to establish a new path", buf, 0x2Au);
        }

        v19 = (void *)*((_QWORD *)v4 + 45);
      }
    }
    v13 = v19;
    v24 = *(void **)(v7 + 120);
    *(_QWORD *)(v7 + 120) = v13;

LABEL_41:
    if (v13)
      goto LABEL_43;
    v13 = *(id *)(v7 + 152);
    if (v13)
      goto LABEL_43;
    goto LABEL_49;
  }
  if ((v4[405] & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v4 + 407;
      *(_WORD *)&buf[22] = 2080;
      v208 = " ";
      v209 = 2048;
      v210 = a2;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo path found for %lx", buf, 0x2Au);
    }
    goto LABEL_17;
  }
LABEL_18:
  v9 = 0;
LABEL_19:

  return v9;
}

void sub_183483CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  void *v59;
  void *v60;
  uint64_t v61;

  if (a21 == &nw_protocol_ref_counted_handle)
    nw::release_if_needed<nw_protocol *>(&a59);

  _Block_object_dispose(&a52, 8);
  _Block_object_dispose((const void *)(v61 - 224), 8);
  _Block_object_dispose((const void *)(v61 - 192), 8);

  _Unwind_Resume(a1);
}

BOOL __nw_protocol_instance_establish_path_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t protocol_handle;
  uint64_t v7;
  uint64_t v8;

  protocol_handle = nw_protocol_options_get_protocol_handle(a4);
  v7 = a1[4];
  if (v7)
    v8 = v7 - 96;
  else
    v8 = 0;
  if (v8 == protocol_handle)
  {
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = a2;
  }
  return v8 != protocol_handle;
}

uint64_t __nw_protocol_instance_establish_path_block_invoke_2(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  BOOL v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  int v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) < a2)
  {
    v9 = nw_protocol_instance_attach_protocol(*(void **)(a1 + 32), v7, v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *(char **)(a1 + 64), *(_QWORD *)(a1 + 72));
    if (!v9)
    {
      v16 = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
      goto LABEL_15;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v9;
    v10 = *(_QWORD *)(a1 + 32);
    if (!v10 || (*(char *)(v10 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_QWORD *)(a1 + 32);
        v13 = v12 == 0;
        if (v12)
          v14 = (const char *)(v12 + 407);
        else
          v14 = "";
        v18 = 136446978;
        v19 = "nw_protocol_instance_establish_path_block_invoke_2";
        v20 = 2082;
        v21 = v14;
        if (v13)
          v15 = "";
        else
          v15 = " ";
        v22 = 2080;
        v23 = v15;
        v24 = 2114;
        v25 = v7;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAttached application protocol: %{public}@", (uint8_t *)&v18, 0x2Au);
      }

    }
  }
  v16 = 1;
LABEL_15:

  return v16;
}

void sub_1834840D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_protocol_instance_set_protocol_instance(void *a1, void *a2, void *a3, uint64_t a4)
{
  char *v7;
  id v8;
  id v9;
  char *v10;
  size_t v11;
  _BOOL4 v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  NSObject *v22;
  void *v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  if (!v8)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_protocol_instance_set_protocol_instance";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v19, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_protocol_instance_set_protocol_instance";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null protocol_parameters", buf, 0xCu);
        }
      }
      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        v26 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            v31 = "nw_protocol_instance_set_protocol_instance";
            v32 = 2082;
            v33 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_protocol_instance_set_protocol_instance";
          _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null protocol_parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_protocol_instance_set_protocol_instance";
          _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null protocol_parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_32:
    if (v19)
      free(v19);
    goto LABEL_13;
  }
  v10 = strdup(v7 + 407);
  if (v10)
  {
LABEL_3:
    v11 = strlen(v10);
    if (v11)
      v10[v11 - 1] = 0;
    v12 = v11 > 2;
    v13 = *((unsigned __int16 *)v7 + 200);
    v14 = 0xFFFF;
    if (v13 != 0xFFFF)
    {
      v14 = v13 + 1;
      *((_WORD *)v7 + 200) = v13 + 1;
    }
    v15 = (char *)v8;
    v16 = v15;
    if (v10)
    {
      if (v10[2 * v12])
      {
        *((_WORD *)v15 + 68) = v14;
        snprintf(v15 + 48, 0x54uLL, "[%s%s:%u]", "C", &v10[2 * v12], v14);
      }

      free(v10);
    }
    else
    {

    }
    v17 = v16;
    *((_QWORD *)v17 + 2) = a4;

LABEL_13:
    return;
  }
  __nwlog_obj();
  v22 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v31 = "strict_strdup";
  v23 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v23))
  {
    free(v23);
    goto LABEL_3;
  }
  __break(1u);
}

void nw_protocol_instance_bring_up_channel(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  char *v7;
  NSObject *v8;
  char *v9;
  nw_endpoint_t v10;
  void *v11;
  nw_endpoint_t v12;
  void *v13;
  id v14;
  _BOOL8 v15;
  void *v16;
  int protocol_level;
  void *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  char *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  char *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  char *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  char *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  char *v46;
  NWConcrete_nw_path *v47;
  id v48;
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  NSObject *v52;
  char can_support_user_packet_pool;
  char v54;
  id *v55;
  id *v56;
  _DWORD *v57;
  _BOOL8 v58;
  void *v59;
  uint64_t v60;
  int v61;
  NSObject *v62;
  _BOOL4 has_protocol_in_stack;
  _BOOL4 v64;
  id v65;
  int v66;
  int address_family;
  void *v68;
  int v69;
  uint64_t stats_region;
  NSObject *v71;
  _QWORD *v72;
  void *v73;
  __int128 *v74;
  int v75;
  uint64_t v76;
  const char *protocol_handler;
  const char *v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  char v83;
  uint64_t v84;
  uint64_t (**v85)(const char *, uint64_t);
  uint64_t (*v86)(const char *, uint64_t);
  char v87;
  BOOL v88;
  const char *v89;
  void *v90;
  char v91;
  __int128 *upper_transport_protocol_identifier;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(const char *, char *);
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  char *v107;
  NSObject *v108;
  os_log_type_t v109;
  void *v110;
  os_log_type_t v111;
  void *v112;
  os_log_type_t v113;
  void *v114;
  os_log_type_t v115;
  char *v116;
  os_log_type_t v117;
  _BOOL4 v118;
  char *backtrace_string;
  os_log_type_t v120;
  _BOOL4 v121;
  os_log_type_t v122;
  _BOOL4 v123;
  os_log_type_t v124;
  _BOOL4 v125;
  void *v126;
  const char *v127;
  NSObject *v128;
  os_log_type_t v129;
  const char *v130;
  os_log_type_t v131;
  os_log_type_t v132;
  os_log_type_t v133;
  os_log_type_t v134;
  void *v135;
  char *v136;
  NSObject *v137;
  os_log_type_t v138;
  void *v139;
  NSObject *v140;
  os_log_type_t v141;
  char *v142;
  NSObject *v143;
  _BOOL4 v144;
  const char *v145;
  char *v146;
  NSObject *v147;
  os_log_type_t v148;
  _BOOL4 v149;
  char *v150;
  NSObject *v151;
  os_log_type_t v152;
  _BOOL4 v153;
  void *v154;
  const char *v155;
  char *v156;
  NSObject *v157;
  os_log_type_t v158;
  const char *v159;
  os_log_type_t v160;
  const char *v161;
  void *v162;
  char *v163;
  NSObject *v164;
  os_log_type_t v165;
  char *v166;
  os_log_type_t v167;
  _BOOL4 v168;
  const char *v169;
  const char *v170;
  os_log_type_t v171;
  os_log_type_t v172;
  char *v173;
  os_log_type_t v174;
  _BOOL4 v175;
  NSObject *v176;
  char *v177;
  uint64_t v178;
  void *v179;
  void *v180;
  void *v181;
  os_log_type_t v182;
  const char *v183;
  const char *v184;
  os_log_type_t v185;
  os_log_type_t v186;
  char *v187;
  char *v188;
  id v189;
  id v190;
  char *v191;
  NSObject *path;
  _QWORD v193[4];
  char *v194;
  os_log_type_t *v195;
  _BYTE *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD v199[4];
  char *v200;
  os_log_type_t *v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD v205[4];
  char *v206;
  os_log_type_t *v207;
  _BYTE *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD v211[4];
  char *v212;
  _QWORD *v213;
  os_log_type_t *v214;
  _BYTE *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD v218[4];
  char *v219;
  uint64_t *v220;
  _QWORD *v221;
  _QWORD v222[4];
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  char v226;
  os_log_type_t type[8];
  os_log_type_t *v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  char v234;
  os_log_type_t v235[8];
  char v236;
  os_log_type_t v237;
  _BYTE buf[24];
  const char *v239;
  __int16 v240;
  char *v241;
  __int16 v242;
  uint64_t v243;
  _BYTE v244[12];
  __int16 v245;
  char *v246;
  __int16 v247;
  const char *v248;
  __int128 v249;
  __int128 v250;
  __int128 uu;
  uint64_t v252;

  v252 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  path = a4;
  if (v7)
  {
    if (!a2)
    {
      __nwlog_obj();
      v110 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
      v107 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v223) = 0;
      if (!__nwlog_fault(v107, type, &v223))
        goto LABEL_221;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v108 = objc_claimAutoreleasedReturnValue();
        v111 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_182FBE000, v108, v111, "%{public}s called with null path", buf, 0xCu);
        }
        goto LABEL_220;
      }
      if (!(_BYTE)v223)
      {
        __nwlog_obj();
        v108 = objc_claimAutoreleasedReturnValue();
        v132 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_182FBE000, v108, v132, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_220;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v108 = objc_claimAutoreleasedReturnValue();
      v120 = type[0];
      v121 = os_log_type_enabled(v108, type[0]);
      if (!backtrace_string)
      {
        if (v121)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_182FBE000, v108, v120, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
        goto LABEL_220;
      }
      if (v121)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v108, v120, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_169;
    }
    if (!a3)
    {
      __nwlog_obj();
      v112 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
      v107 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v223) = 0;
      if (!__nwlog_fault(v107, type, &v223))
        goto LABEL_221;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v108 = objc_claimAutoreleasedReturnValue();
        v113 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_182FBE000, v108, v113, "%{public}s called with null path_state", buf, 0xCu);
        }
        goto LABEL_220;
      }
      if (!(_BYTE)v223)
      {
        __nwlog_obj();
        v108 = objc_claimAutoreleasedReturnValue();
        v133 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_182FBE000, v108, v133, "%{public}s called with null path_state, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_220;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v108 = objc_claimAutoreleasedReturnValue();
      v122 = type[0];
      v123 = os_log_type_enabled(v108, type[0]);
      if (!backtrace_string)
      {
        if (v123)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_182FBE000, v108, v122, "%{public}s called with null path_state, no backtrace", buf, 0xCu);
        }
        goto LABEL_220;
      }
      if (v123)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v108, v122, "%{public}s called with null path_state, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_169;
    }
    if (path)
    {
      if ((v7[405] & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          v9 = *(char **)(a3 + 16);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v7 + 407;
          *(_WORD *)&buf[22] = 2080;
          v239 = " ";
          v240 = 2112;
          v241 = v9;
          _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sReceived nexus assignment, bringing up channel for %@", buf, 0x2Au);
        }

      }
      v250 = *((_OWORD *)v7 - 6);
      v249 = 0uLL;
      nw_path_flow_registration_get_id(*(void **)(a3 + 24), &v249);
      v191 = v7 - 96;
      *((_OWORD *)v7 - 6) = v249;
      *((_QWORD *)v7 + 40) = a2;
      v10 = nw_path_copy_effective_remote_endpoint(path);
      v11 = (void *)*((_QWORD *)v7 + 41);
      *((_QWORD *)v7 + 41) = v10;

      v12 = nw_path_copy_effective_local_endpoint(path);
      v13 = (void *)*((_QWORD *)v7 + 42);
      *((_QWORD *)v7 + 42) = v12;

      v14 = *((id *)v7 + 6);
      v15 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v14, 0, 0);

      v16 = (void *)*((_QWORD *)v7 + 43);
      *((_QWORD *)v7 + 43) = v15;

      nw_parameters_require_interface(*((nw_parameters_t *)v7 + 43), *(nw_interface_t *)(a3 + 16));
      protocol_level = nw_path_flow_registration_get_protocol_level(path, *(void **)(a3 + 24));
      *(_QWORD *)type = 0;
      v228 = type;
      v229 = 0x2020000000;
      v230 = v7 - 96;
      v223 = 0;
      v224 = &v223;
      v225 = 0x2020000000;
      v226 = 0;
      v222[0] = 0;
      v222[1] = v222;
      v222[2] = 0x2020000000;
      v222[3] = 0;
      v18 = (void *)*((_QWORD *)v7 + 6);
      v19 = MEMORY[0x1E0C809B0];
      v218[0] = MEMORY[0x1E0C809B0];
      v218[1] = 3221225472;
      v218[2] = ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke;
      v218[3] = &unk_1E149B918;
      v20 = v7;
      v219 = v20;
      v220 = &v223;
      v221 = v222;
      nw_parameters_internal_iterate_protocol_stack(v18, 4, 0, v218);
      if (*((_BYTE *)v224 + 24))
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2020000000;
        LOBYTE(v239) = 0;
        v21 = (void *)*((_QWORD *)v7 + 43);
        v211[0] = v19;
        v211[1] = 3221225472;
        v211[2] = ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_2;
        v211[3] = &unk_1E149B940;
        v213 = v222;
        v22 = v20;
        v212 = v22;
        v214 = type;
        v215 = buf;
        v216 = a2;
        v217 = a3;
        nw_parameters_internal_iterate_protocol_stack(v21, 4, 0, v211);
        if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
        {
          if ((v7[405] & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v23 = (id)gLogObj;
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v244 = 136446722;
              *(_QWORD *)&v244[4] = "nw_protocol_instance_bring_up_channel";
              v245 = 2082;
              v246 = v22 + 407;
              v247 = 2080;
              v248 = " ";
              _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to attach application protocol", v244, 0x20u);
            }

          }
          nw_protocol_instance_tear_down_path_inner(v22, a3);
          *(_OWORD *)v191 = v250;
          v24 = (void *)*((_QWORD *)v7 + 41);
          *((_QWORD *)v7 + 40) = 0;
          *((_QWORD *)v7 + 41) = 0;

          v25 = (void *)*((_QWORD *)v7 + 42);
          *((_QWORD *)v7 + 42) = 0;

          v26 = (void *)*((_QWORD *)v7 + 43);
          *((_QWORD *)v7 + 43) = 0;

LABEL_24:
          _Block_object_dispose(buf, 8);
LABEL_291:

          _Block_object_dispose(v222, 8);
          _Block_object_dispose(&v223, 8);
          _Block_object_dispose(type, 8);
          goto LABEL_292;
        }

        _Block_object_dispose(buf, 8);
      }
      if ((protocol_level - 1) <= 2)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2020000000;
        LOBYTE(v239) = 0;
        v27 = (void *)*((_QWORD *)v7 + 43);
        v205[0] = v19;
        v205[1] = 3221225472;
        v205[2] = ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_251;
        v205[3] = &unk_1E149BA28;
        v28 = v20;
        v206 = v28;
        v207 = type;
        v209 = a2;
        v210 = a3;
        v208 = buf;
        nw_parameters_internal_iterate_protocol_stack(v27, 3, 0, v205);
        if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
        {
          if ((v7[405] & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v29 = (id)gLogObj;
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v244 = 136446722;
              *(_QWORD *)&v244[4] = "nw_protocol_instance_bring_up_channel";
              v245 = 2082;
              v246 = v28 + 407;
              v247 = 2080;
              v248 = " ";
              _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to attach transport protocol", v244, 0x20u);
            }

          }
          nw_protocol_instance_tear_down_path_inner(v28, a3);
          *(_OWORD *)v191 = v250;
          v30 = (void *)*((_QWORD *)v7 + 41);
          *((_QWORD *)v7 + 40) = 0;
          *((_QWORD *)v7 + 41) = 0;

          v31 = (void *)*((_QWORD *)v7 + 42);
          *((_QWORD *)v7 + 42) = 0;

          v32 = (void *)*((_QWORD *)v7 + 43);
          *((_QWORD *)v7 + 43) = 0;

          goto LABEL_24;
        }

        _Block_object_dispose(buf, 8);
        if ((protocol_level - 1) <= 1)
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2020000000;
          LOBYTE(v239) = 0;
          v33 = (void *)*((_QWORD *)v7 + 43);
          v199[0] = v19;
          v199[1] = 3221225472;
          v199[2] = ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_252;
          v199[3] = &unk_1E149BA28;
          v34 = v28;
          v200 = v34;
          v201 = type;
          v203 = a2;
          v204 = a3;
          v202 = buf;
          nw_parameters_internal_iterate_protocol_stack(v33, 2, 0, v199);
          if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
          {
            if ((v7[405] & 0x80000000) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v35 = (id)gLogObj;
              if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v244 = 136446722;
                *(_QWORD *)&v244[4] = "nw_protocol_instance_bring_up_channel";
                v245 = 2082;
                v246 = v34 + 407;
                v247 = 2080;
                v248 = " ";
                _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to attach internet protocol", v244, 0x20u);
              }

            }
            nw_protocol_instance_tear_down_path_inner(v34, a3);
            *(_OWORD *)v191 = v250;
            v36 = (void *)*((_QWORD *)v7 + 41);
            *((_QWORD *)v7 + 40) = 0;
            *((_QWORD *)v7 + 41) = 0;

            v37 = (void *)*((_QWORD *)v7 + 42);
            *((_QWORD *)v7 + 42) = 0;

            v38 = (void *)*((_QWORD *)v7 + 43);
            *((_QWORD *)v7 + 43) = 0;

            goto LABEL_24;
          }

          _Block_object_dispose(buf, 8);
          if (protocol_level == 1)
          {
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x2020000000;
            LOBYTE(v239) = 0;
            v39 = (void *)*((_QWORD *)v7 + 43);
            v193[0] = v19;
            v193[1] = 3221225472;
            v193[2] = ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_253;
            v193[3] = &unk_1E149BA28;
            v40 = v34;
            v194 = v40;
            v195 = type;
            v197 = a2;
            v198 = a3;
            v196 = buf;
            nw_parameters_internal_iterate_protocol_stack(v39, 1, 0, v193);
            if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
            {
              if ((v7[405] & 0x80000000) == 0)
              {
                __nwlog_obj();
                v41 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v244 = 136446722;
                  *(_QWORD *)&v244[4] = "nw_protocol_instance_bring_up_channel";
                  v245 = 2082;
                  v246 = v40 + 407;
                  v247 = 2080;
                  v248 = " ";
                  _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to attach link protocol", v244, 0x20u);
                }

              }
              nw_protocol_instance_tear_down_path_inner(v40, a3);
              *(_OWORD *)v191 = v250;
              v42 = (void *)*((_QWORD *)v7 + 41);
              *((_QWORD *)v7 + 40) = 0;
              *((_QWORD *)v7 + 41) = 0;

              v43 = (void *)*((_QWORD *)v7 + 42);
              *((_QWORD *)v7 + 42) = 0;

              v44 = (void *)*((_QWORD *)v7 + 43);
              *((_QWORD *)v7 + 43) = 0;

              goto LABEL_24;
            }

            _Block_object_dispose(buf, 8);
          }
        }
      }
      v45 = *((_QWORD *)v228 + 3);
      v46 = v20;
      v47 = path;
      uu = 0uLL;
      v233 = 0;
      if (!nw_path_flow_registration_get_nexus_instance(v47, *(NWConcrete_nw_path_flow_registration **)(a3 + 24), &uu, &v233))
      {
        if ((v7[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v52 = (id)gLogObj;
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_instance_attach_channel_protocol";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v46 + 407;
            *(_WORD *)&buf[22] = 2080;
            v239 = " ";
            _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%snexus is not ready", buf, 0x20u);
          }

        }
        goto LABEL_285;
      }
      v48 = nw_path_copy_flow_for_registration(v47, *(NWConcrete_nw_path_flow_registration **)(a3 + 24));
      v49 = v48;
      if (v48)
      {
        v50 = v48;
        v51 = v50[1];
        if (!v51 || !*((_DWORD *)v50 + 40))
          v51 = 0;

      }
      else
      {
        v51 = 0;
      }

      v232 = 0;
      v231 = 0;
      can_support_user_packet_pool = nw_path_flow_registration_can_support_user_packet_pool(v47, *(void **)(a3 + 24));
      BYTE4(v232) = BYTE4(v232) & 0xFE | can_support_user_packet_pool;
      if (nw_path_flow_registration_should_use_event_ring(v47, *(void **)(a3 + 24)))
        v54 = 2;
      else
        v54 = 0;
      BYTE4(v232) = BYTE4(v232) & 0xFD | v54;
      v231 = v51;
      LODWORD(v232) = 16;
      v55 = v47;
      v189 = v55[3];

      v56 = v55;
      v190 = v56[2];

      v57 = nw_parameters_copy_context(v190);
      v58 = nw_channel_create_with_attributes(v57, (unsigned __int8 *)&uu, v233, (uint64_t)&v231);
      v59 = *(void **)(a3 + 48);
      *(_QWORD *)(a3 + 48) = v58;

      v60 = *(_QWORD *)(a3 + 48);
      v61 = v7[405];
      if (!v60)
      {
        if ((v61 & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v71 = (id)gLogObj;
          if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_instance_attach_channel_protocol";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v46 + 407;
            *(_WORD *)&buf[22] = 2080;
            v239 = " ";
            _os_log_impl(&dword_182FBE000, v71, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sfailed to open channel", buf, 0x20u);
          }

        }
        goto LABEL_284;
      }
      if ((v61 & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v62 = (id)gLogObj;
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_attach_channel_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v46 + 407;
          *(_WORD *)&buf[22] = 2080;
          v239 = " ";
          v240 = 1024;
          LODWORD(v241) = protocol_level;
          _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sopened channel at level %u", buf, 0x26u);
        }

        v60 = *(_QWORD *)(a3 + 48);
      }
      nw_channel_set_close_automatically(v60, 1);
      nw_channel_set_defer_input_available(*(_QWORD *)(a3 + 48), 1);
      nw_channel_set_protocol_level(*(_QWORD *)(a3 + 48), protocol_level);
      if (protocol_level == 2)
      {
        if (nw_protocol_ip_identifier::onceToken != -1)
          dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_85105);
        has_protocol_in_stack = nw_parameters_has_protocol_in_stack(v190, &nw_protocol_ip_identifier::identifier);
        if (v189)
          v64 = has_protocol_in_stack;
        else
          v64 = 0;
        if (v64)
        {
          v65 = v189;
          v66 = objc_msgSend(v65, "type");

          if (v66 == 1)
          {
            address_family = nw_endpoint_get_address_family(v65);
            v68 = *(void **)(a3 + 24);
            if (nw_protocol_ip_identifier::onceToken != -1)
              dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_85105);
            if (address_family == 2)
              v69 = 1;
            else
              v69 = 2;
            stats_region = nw_channel_get_stats_region(*(_QWORD *)(a3 + 48), v69);
            nw_path_flow_registration_set_stats_region(v68, 2, (__int128 *)&nw_protocol_ip_identifier::identifier, stats_region);
          }
        }
      }
      else if ((protocol_level & 0xFFFFFFFE) != 2)
      {
        goto LABEL_87;
      }
      v72 = (_QWORD *)nw_protocol_tcp_identifier();
      if (nw_parameters_has_protocol_in_stack(v190, v72))
      {
        v73 = *(void **)(a3 + 24);
        v74 = (__int128 *)nw_protocol_tcp_identifier();
        v75 = 3;
      }
      else
      {
        if (nw_protocol_udp_identifier::onceToken != -1)
          dispatch_once(&nw_protocol_udp_identifier::onceToken, &__block_literal_global_24);
        if (!nw_parameters_has_protocol_in_stack(v190, &nw_protocol_udp_identifier::identifier))
        {
          if (nw_parameters_get_upper_transport_protocol(v190) == 253)
          {
            upper_transport_protocol_identifier = (__int128 *)nw_parameters_get_upper_transport_protocol_identifier(v190);
            v93 = *(void **)(a3 + 24);
            v94 = nw_channel_get_stats_region(*(_QWORD *)(a3 + 48), 5);
            nw_path_flow_registration_set_stats_region(v93, 3, upper_transport_protocol_identifier, v94);
            v95 = *(void **)(a3 + 24);
            if (nw_protocol_udp_identifier::onceToken != -1)
              dispatch_once(&nw_protocol_udp_identifier::onceToken, &__block_literal_global_24);
            v96 = nw_channel_get_stats_region(*(_QWORD *)(a3 + 48), 4);
            nw_path_flow_registration_set_stats_region(v95, 3, (__int128 *)&nw_protocol_udp_identifier::identifier, v96);
          }
LABEL_87:
          protocol_handler = (const char *)nw_channel_get_protocol_handler(*(_QWORD *)(a3 + 48));
          if (protocol_handler)
          {
            v78 = protocol_handler;
            v79 = (void *)*((_QWORD *)protocol_handler + 5);
            if (v79 == &nw_protocol_ref_counted_handle)
            {
              v81 = *((_QWORD *)protocol_handler + 11);
              if (v81)
                *((_QWORD *)protocol_handler + 11) = v81 + 1;
              v80 = -1;
            }
            else
            {
              v80 = 0;
            }
            *(_QWORD *)v244 = protocol_handler;
            v244[8] = v80;
            if (v45)
            {
              v82 = *(void **)(v45 + 40);
              if (v82 == &nw_protocol_ref_counted_handle)
              {
                v84 = *(_QWORD *)(v45 + 88);
                if (v84)
                  *(_QWORD *)(v45 + 88) = v84 + 1;
                v83 = -1;
              }
              else
              {
                v83 = 0;
              }
              *(_QWORD *)v235 = v45;
              v236 = v83;
              v85 = (uint64_t (**)(const char *, uint64_t))*((_QWORD *)protocol_handler + 3);
              if (v85)
              {
                v86 = *v85;
                if (v86)
                {
                  v87 = v86(protocol_handler, v45);
                  if (v82 != &nw_protocol_ref_counted_handle)
                    goto LABEL_103;
                  goto LABEL_102;
                }
              }
              __nwlog_obj();
              v126 = (void *)objc_claimAutoreleasedReturnValue();
              v127 = (const char *)*((_QWORD *)v78 + 2);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
              if (!v127)
                v127 = "invalid";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v127;
              *(_WORD *)&buf[22] = 2048;
              v239 = v78;
              v187 = (char *)_os_log_send_and_compose_impl();

              v237 = OS_LOG_TYPE_ERROR;
              v234 = 0;
              if (!__nwlog_fault(v187, &v237, &v234))
                goto LABEL_264;
              if (v237 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v128 = objc_claimAutoreleasedReturnValue();
                v129 = v237;
                if (os_log_type_enabled(v128, v237))
                {
                  v130 = (const char *)*((_QWORD *)v78 + 2);
                  if (!v130)
                    v130 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v130;
                  *(_WORD *)&buf[22] = 2048;
                  v239 = v78;
                  _os_log_impl(&dword_182FBE000, v128, v129, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback", buf, 0x20u);
                }
              }
              else
              {
                if (v234)
                {
                  v142 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v143 = objc_claimAutoreleasedReturnValue();
                  v186 = v237;
                  v144 = os_log_type_enabled(v143, v237);
                  if (v142)
                  {
                    if (v144)
                    {
                      v145 = (const char *)*((_QWORD *)v78 + 2);
                      if (!v145)
                        v145 = "invalid";
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v145;
                      *(_WORD *)&buf[22] = 2048;
                      v239 = v78;
                      v240 = 2082;
                      v241 = v142;
                      _os_log_impl(&dword_182FBE000, v143, v186, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }

                    free(v142);
                  }
                  else
                  {
                    if (v144)
                    {
                      v170 = (const char *)*((_QWORD *)v78 + 2);
                      if (!v170)
                        v170 = "invalid";
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v170;
                      *(_WORD *)&buf[22] = 2048;
                      v239 = v78;
                      _os_log_impl(&dword_182FBE000, v143, v186, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, no backtrace", buf, 0x20u);
                    }

                  }
LABEL_264:
                  if (v187)
                    free(v187);
                  v87 = 0;
                  if (v82 == &nw_protocol_ref_counted_handle)
LABEL_102:
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v235);
LABEL_103:
                  if (v79 == &nw_protocol_ref_counted_handle)
                  {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v244);
                    if ((v87 & 1) == 0)
                    {
LABEL_284:

LABEL_285:
                      goto LABEL_286;
                    }
                  }
                  else if ((v87 & 1) == 0)
                  {
                    goto LABEL_284;
                  }
                  v88 = nw_channel_set_path_flow_registration(*(_QWORD *)(a3 + 48), v56, *(void **)(a3 + 24));

                  if (!v88)
                  {
LABEL_286:
                    if ((v7[405] & 0x80000000) == 0)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v176 = (id)gLogObj;
                      if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
                      {
                        v178 = *((_QWORD *)v7 + 41);
                        v177 = (char *)*((_QWORD *)v7 + 42);
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v46 + 407;
                        *(_WORD *)&buf[22] = 2080;
                        v239 = " ";
                        v240 = 2112;
                        v241 = v177;
                        v242 = 2112;
                        v243 = v178;
                        _os_log_impl(&dword_182FBE000, v176, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to attach channel protocol for %@ -> %@", buf, 0x34u);
                      }

                    }
                    nw_protocol_instance_tear_down_path_inner(v46, a3);
                    *(_OWORD *)v191 = v250;
                    v179 = (void *)*((_QWORD *)v7 + 41);
                    *((_QWORD *)v7 + 40) = 0;
                    *((_QWORD *)v7 + 41) = 0;

                    v180 = (void *)*((_QWORD *)v7 + 42);
                    *((_QWORD *)v7 + 42) = 0;

                    v181 = (void *)*((_QWORD *)v7 + 43);
                    *((_QWORD *)v7 + 43) = 0;

                    goto LABEL_291;
                  }
                  *(_OWORD *)v191 = v250;
                  v89 = *(const char **)(a3 + 32);
                  if (v89)
                  {
                    v90 = (void *)*((_QWORD *)v89 + 5);
                    if (v90 == &nw_protocol_ref_counted_handle)
                    {
                      v97 = *((_QWORD *)v89 + 11);
                      if (v97)
                        *((_QWORD *)v89 + 11) = v97 + 1;
                      v91 = -1;
                    }
                    else
                    {
                      v91 = 0;
                    }
                    *(_QWORD *)v244 = v89;
                    v244[8] = v91;
                    v98 = (void *)*((_QWORD *)v46 - 7);
                    if (v98 == &nw_protocol_ref_counted_handle)
                    {
                      v100 = *((_QWORD *)v46 - 1);
                      if (v100)
                        *((_QWORD *)v46 - 1) = v100 + 1;
                      v99 = -1;
                    }
                    else
                    {
                      v99 = 0;
                    }
                    *(_QWORD *)v235 = v7 - 96;
                    v236 = v99;
                    v101 = *((_QWORD *)v89 + 3);
                    if (v101)
                    {
                      v102 = *(void (**)(const char *, char *))(v101 + 24);
                      if (v102)
                      {
                        v102(v89, v191);
                        if (v98 != &nw_protocol_ref_counted_handle)
                          goto LABEL_127;
                        goto LABEL_126;
                      }
                    }
                    __nwlog_obj();
                    v154 = (void *)objc_claimAutoreleasedReturnValue();
                    v155 = (const char *)*((_QWORD *)v89 + 2);
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                    if (!v155)
                      v155 = "invalid";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v155;
                    *(_WORD *)&buf[22] = 2048;
                    v239 = v89;
                    v156 = (char *)_os_log_send_and_compose_impl();

                    LOBYTE(uu) = 16;
                    LOBYTE(v231) = 0;
                    if (__nwlog_fault(v156, &uu, &v231))
                    {
                      if (uu == 17)
                      {
                        __nwlog_obj();
                        v157 = objc_claimAutoreleasedReturnValue();
                        v158 = uu;
                        if (os_log_type_enabled(v157, (os_log_type_t)uu))
                        {
                          v159 = (const char *)*((_QWORD *)v89 + 2);
                          if (!v159)
                            v159 = "invalid";
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v159;
                          *(_WORD *)&buf[22] = 2048;
                          v239 = v89;
                          _os_log_impl(&dword_182FBE000, v157, v158, "%{public}s protocol %{public}s (%p) has invalid connect callback", buf, 0x20u);
                        }
LABEL_308:

                        goto LABEL_309;
                      }
                      if (!(_BYTE)v231)
                      {
                        __nwlog_obj();
                        v157 = objc_claimAutoreleasedReturnValue();
                        v182 = uu;
                        if (os_log_type_enabled(v157, (os_log_type_t)uu))
                        {
                          v183 = (const char *)*((_QWORD *)v89 + 2);
                          if (!v183)
                            v183 = "invalid";
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v183;
                          *(_WORD *)&buf[22] = 2048;
                          v239 = v89;
                          _os_log_impl(&dword_182FBE000, v157, v182, "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded", buf, 0x20u);
                        }
                        goto LABEL_308;
                      }
                      v166 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v157 = objc_claimAutoreleasedReturnValue();
                      v167 = uu;
                      v168 = os_log_type_enabled(v157, (os_log_type_t)uu);
                      if (!v166)
                      {
                        if (v168)
                        {
                          v184 = (const char *)*((_QWORD *)v89 + 2);
                          if (!v184)
                            v184 = "invalid";
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v184;
                          *(_WORD *)&buf[22] = 2048;
                          v239 = v89;
                          _os_log_impl(&dword_182FBE000, v157, v167, "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace", buf, 0x20u);
                        }
                        goto LABEL_308;
                      }
                      if (v168)
                      {
                        v169 = (const char *)*((_QWORD *)v89 + 2);
                        if (!v169)
                          v169 = "invalid";
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v169;
                        *(_WORD *)&buf[22] = 2048;
                        v239 = v89;
                        v240 = 2082;
                        v241 = v166;
                        _os_log_impl(&dword_182FBE000, v157, v167, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", buf, 0x2Au);
                      }

                      free(v166);
                    }
LABEL_309:
                    if (v156)
                      free(v156);
                    if (v98 != &nw_protocol_ref_counted_handle)
                      goto LABEL_127;
LABEL_126:
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v235);
LABEL_127:
                    if (v90 == &nw_protocol_ref_counted_handle)
                      nw::release_if_needed<nw_protocol *>((uint64_t *)v244);
LABEL_129:
                    v103 = (void *)*((_QWORD *)v7 + 41);
                    *((_QWORD *)v7 + 40) = 0;
                    *((_QWORD *)v7 + 41) = 0;

                    v104 = (void *)*((_QWORD *)v7 + 42);
                    *((_QWORD *)v7 + 42) = 0;

                    v105 = (void *)*((_QWORD *)v7 + 43);
                    *((_QWORD *)v7 + 43) = 0;

                    goto LABEL_291;
                  }
                  __nwlog_obj();
                  v162 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                  v163 = (char *)_os_log_send_and_compose_impl();

                  v244[0] = 16;
                  v235[0] = OS_LOG_TYPE_DEFAULT;
                  if (__nwlog_fault(v163, v244, v235))
                  {
                    if (v244[0] == 17)
                    {
                      __nwlog_obj();
                      v164 = objc_claimAutoreleasedReturnValue();
                      v165 = v244[0];
                      if (os_log_type_enabled(v164, (os_log_type_t)v244[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                        _os_log_impl(&dword_182FBE000, v164, v165, "%{public}s called with null protocol", buf, 0xCu);
                      }
                    }
                    else if (v235[0])
                    {
                      v173 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v164 = objc_claimAutoreleasedReturnValue();
                      v174 = v244[0];
                      v175 = os_log_type_enabled(v164, (os_log_type_t)v244[0]);
                      if (v173)
                      {
                        if (v175)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v173;
                          _os_log_impl(&dword_182FBE000, v164, v174, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v173);
                        goto LABEL_319;
                      }
                      if (v175)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                        _os_log_impl(&dword_182FBE000, v164, v174, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                      }
                    }
                    else
                    {
                      __nwlog_obj();
                      v164 = objc_claimAutoreleasedReturnValue();
                      v185 = v244[0];
                      if (os_log_type_enabled(v164, (os_log_type_t)v244[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "__nw_protocol_connect";
                        _os_log_impl(&dword_182FBE000, v164, v185, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                      }
                    }

                  }
LABEL_319:
                  if (v163)
                    free(v163);
                  goto LABEL_129;
                }
                __nwlog_obj();
                v128 = objc_claimAutoreleasedReturnValue();
                v160 = v237;
                if (os_log_type_enabled(v128, v237))
                {
                  v161 = (const char *)*((_QWORD *)v78 + 2);
                  if (!v161)
                    v161 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v161;
                  *(_WORD *)&buf[22] = 2048;
                  v239 = v78;
                  _os_log_impl(&dword_182FBE000, v128, v160, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, backtrace limit exceeded", buf, 0x20u);
                }
              }

              goto LABEL_264;
            }
            __nwlog_obj();
            v139 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
            v188 = (char *)_os_log_send_and_compose_impl();

            v235[0] = OS_LOG_TYPE_ERROR;
            v237 = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v188, v235, &v237))
            {
              if (v235[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v140 = objc_claimAutoreleasedReturnValue();
                v141 = v235[0];
                if (os_log_type_enabled(v140, v235[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                  _os_log_impl(&dword_182FBE000, v140, v141, "%{public}s called with null input_protocol", buf, 0xCu);
                }

              }
              else
              {
                if (v237)
                {
                  v150 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v151 = objc_claimAutoreleasedReturnValue();
                  v152 = v235[0];
                  v153 = os_log_type_enabled(v151, v235[0]);
                  if (v150)
                  {
                    if (v153)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v150;
                      _os_log_impl(&dword_182FBE000, v151, v152, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
                    }

                    free(v150);
                    goto LABEL_296;
                  }
                  if (v153)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                    _os_log_impl(&dword_182FBE000, v151, v152, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v151 = objc_claimAutoreleasedReturnValue();
                  v172 = v235[0];
                  if (os_log_type_enabled(v151, v235[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                    _os_log_impl(&dword_182FBE000, v151, v172, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
                  }
                }

              }
            }
LABEL_296:
            if (v188)
              free(v188);
            v87 = 0;
            goto LABEL_103;
          }
          __nwlog_obj();
          v135 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
          v136 = (char *)_os_log_send_and_compose_impl();

          v244[0] = 16;
          v235[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v136, v244, v235))
          {
            if (v244[0] == 17)
            {
              __nwlog_obj();
              v137 = objc_claimAutoreleasedReturnValue();
              v138 = v244[0];
              if (os_log_type_enabled(v137, (os_log_type_t)v244[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                _os_log_impl(&dword_182FBE000, v137, v138, "%{public}s called with null protocol", buf, 0xCu);
              }
            }
            else
            {
              if (v235[0])
              {
                v146 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v147 = objc_claimAutoreleasedReturnValue();
                v148 = v244[0];
                v149 = os_log_type_enabled(v147, (os_log_type_t)v244[0]);
                if (v146)
                {
                  if (v149)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v146;
                    _os_log_impl(&dword_182FBE000, v147, v148, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v146);
                }
                else
                {
                  if (v149)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                    _os_log_impl(&dword_182FBE000, v147, v148, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                  }

                }
                goto LABEL_282;
              }
              __nwlog_obj();
              v137 = objc_claimAutoreleasedReturnValue();
              v171 = v244[0];
              if (os_log_type_enabled(v137, (os_log_type_t)v244[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
                _os_log_impl(&dword_182FBE000, v137, v171, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_282:
          if (v136)
            free(v136);
          goto LABEL_284;
        }
        v73 = *(void **)(a3 + 24);
        if (nw_protocol_udp_identifier::onceToken != -1)
          dispatch_once(&nw_protocol_udp_identifier::onceToken, &__block_literal_global_24);
        v74 = (__int128 *)&nw_protocol_udp_identifier::identifier;
        v75 = 4;
      }
      v76 = nw_channel_get_stats_region(*(_QWORD *)(a3 + 48), v75);
      nw_path_flow_registration_set_stats_region(v73, 3, v74, v76);
      goto LABEL_87;
    }
    __nwlog_obj();
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
    v107 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v223) = 0;
    if (__nwlog_fault(v107, type, &v223))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v108 = objc_claimAutoreleasedReturnValue();
        v115 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_182FBE000, v108, v115, "%{public}s called with null new_path", buf, 0xCu);
        }
LABEL_220:

        goto LABEL_221;
      }
      if (!(_BYTE)v223)
      {
        __nwlog_obj();
        v108 = objc_claimAutoreleasedReturnValue();
        v134 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_182FBE000, v108, v134, "%{public}s called with null new_path, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_220;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v108 = objc_claimAutoreleasedReturnValue();
      v124 = type[0];
      v125 = os_log_type_enabled(v108, type[0]);
      if (!backtrace_string)
      {
        if (v125)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_182FBE000, v108, v124, "%{public}s called with null new_path, no backtrace", buf, 0xCu);
        }
        goto LABEL_220;
      }
      if (v125)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v108, v124, "%{public}s called with null new_path, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_169:

      free(backtrace_string);
      if (!v107)
        goto LABEL_292;
      goto LABEL_222;
    }
  }
  else
  {
    __nwlog_obj();
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
    v107 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v223) = 0;
    if (!__nwlog_fault(v107, type, &v223))
      goto LABEL_221;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v108 = objc_claimAutoreleasedReturnValue();
      v109 = type[0];
      if (os_log_type_enabled(v108, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
        _os_log_impl(&dword_182FBE000, v108, v109, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_220;
    }
    if (!(_BYTE)v223)
    {
      __nwlog_obj();
      v108 = objc_claimAutoreleasedReturnValue();
      v131 = type[0];
      if (os_log_type_enabled(v108, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
        _os_log_impl(&dword_182FBE000, v108, v131, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_220;
    }
    v116 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v108 = objc_claimAutoreleasedReturnValue();
    v117 = type[0];
    v118 = os_log_type_enabled(v108, type[0]);
    if (!v116)
    {
      if (v118)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
        _os_log_impl(&dword_182FBE000, v108, v117, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_220;
    }
    if (v118)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_instance_bring_up_channel";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v116;
      _os_log_impl(&dword_182FBE000, v108, v117, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v116);
  }
LABEL_221:
  if (v107)
LABEL_222:
    free(v107);
LABEL_292:

}

void sub_183486AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a67;
  char a71;
  void *v71;

  _Block_object_dispose(&STACK[0x260], 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);

  _Unwind_Resume(a1);
}

void __nw_protocol_instance_establish_path_block_invoke_62(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  BOOL v11;
  const char *v12;
  id *v13;
  id v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  _QWORD applier[4];
  NSObject *v19;
  id v20;
  _BYTE *v21;
  uint8_t v22[4];
  const char *v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  const char *v27;
  _BYTE buf[24];
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  if (!v7 || (*(char *)(v7 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = "";
      v11 = v9 == 0;
      if (v9)
        v12 = (const char *)(v9 + 407);
      else
        v12 = "";
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_instance_establish_path_block_invoke";
      if (!v11)
        v10 = " ";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 2080;
      v29 = (uint64_t (*)(uint64_t, uint64_t))v10;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAssociation update", buf, 0x20u);
    }

  }
  v13 = (id *)v5;
  v14 = v13[9];
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(void **)(v15 + 72);
  *(_QWORD *)(v15 + 72) = 0;

  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v29 = __Block_byref_object_copy__11692;
  v30 = __Block_byref_object_dispose__11693;
  v31 = 0;
  if (v14 && object_getClass(v14) == (Class)MEMORY[0x1E0C812C8])
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = __nw_protocol_instance_establish_path_block_invoke_63;
    applier[3] = &unk_1E14A3098;
    v19 = v13;
    v20 = *(id *)(a1 + 32);
    v21 = buf;
    xpc_array_apply(v14, applier);

    v17 = v19;
LABEL_17:

    goto LABEL_18;
  }
  if ((*((char *)v13 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v22 = 136446722;
      v23 = "nw_protocol_instance_establish_path_block_invoke";
      v24 = 2082;
      v25 = (char *)v13 + 407;
      v26 = 2080;
      v27 = " ";
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNo saved paths to update", v22, 0x20u);
    }
    goto LABEL_17;
  }
LABEL_18:
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 72), *(id *)(*(_QWORD *)&buf[8] + 40));
  _Block_object_dispose(buf, 8);

}

void sub_183486F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11692(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11693(uint64_t a1)
{

}

uint64_t __nw_protocol_instance_establish_path_block_invoke_63(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t value;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  BOOL v9;
  const char *v10;
  const char *v11;
  uint64_t node;
  uint64_t v13;
  void *v14;
  NWConcrete_nw_path *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  BOOL v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  const char *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  const char *v36;
  BOOL v37;
  const char *v38;
  void *v39;
  xpc_object_t v40;
  uint64_t v41;
  void *v42;
  int v44;
  __int128 v45;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  value = xpc_uint64_get_value(v4);
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6 || (*(char *)(v6 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = v8 == 0;
      if (v8)
        v10 = (const char *)(v8 + 407);
      else
        v10 = "";
      *(_DWORD *)buf = 136446978;
      v47 = "nw_protocol_instance_establish_path_block_invoke";
      v48 = 2082;
      v49 = v10;
      if (v9)
        v11 = "";
      else
        v11 = " ";
      v50 = 2080;
      v51 = v11;
      v52 = 2048;
      v53 = value;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sChecking path %lx", buf, 0x2Au);
    }

    v6 = *(_QWORD *)(a1 + 32);
  }
  node = nw_hash_table_get_node(*(_QWORD *)(v6 + 296), value, 8);
  if (node)
  {
    v13 = node;
    v14 = *(void **)(node + 56);
    if (v14)
    {
      v15 = (NWConcrete_nw_path *)nw_path_flow_registration_force_update(v14);
      v44 = 0;
      if (nw_path_flow_registration_get_nexus_instance(v15, *(NWConcrete_nw_path_flow_registration **)(v13 + 56), &v45, &v44))
      {
        v16 = *(_QWORD *)(a1 + 40);
        if (!v16 || (*(char *)(v16 + 405) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v17 = (id)gLogObj;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            v18 = *(_QWORD *)(a1 + 40);
            v19 = "";
            v20 = v18 == 0;
            if (v18)
              v21 = (const char *)(v18 + 407);
            else
              v21 = "";
            *(_DWORD *)buf = 136446722;
            v47 = "nw_protocol_instance_establish_path_block_invoke";
            if (!v20)
              v19 = " ";
            v48 = 2082;
            v49 = v21;
            v50 = 2080;
            v51 = v19;
            _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPath has nexus assignment", buf, 0x20u);
          }

        }
        nw_protocol_instance_bring_up_channel(*(void **)(a1 + 32), value, v13 + 32, v15);
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 32);
        if (!v33 || (*(char *)(v33 + 405) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v34 = (id)gLogObj;
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          {
            v35 = *(_QWORD *)(a1 + 32);
            v36 = "";
            v37 = v35 == 0;
            if (v35)
              v38 = (const char *)(v35 + 407);
            else
              v38 = "";
            *(_DWORD *)buf = 136446722;
            v47 = "nw_protocol_instance_establish_path_block_invoke";
            if (!v37)
              v36 = " ";
            v48 = 2082;
            v49 = v38;
            v50 = 2080;
            v51 = v36;
            _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNo nexus assignment yet", buf, 0x20u);
          }

        }
        v39 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        if (!v39)
        {
          v40 = xpc_array_create(0, 0);
          v41 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
          v42 = *(void **)(v41 + 40);
          *(_QWORD *)(v41 + 40) = v40;

          v39 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        }
        xpc_array_set_uint64(v39, 0xFFFFFFFFFFFFFFFFLL, value);
      }
      goto LABEL_60;
    }
    v28 = *(_QWORD *)(a1 + 32);
    if (!v28 || (*(char *)(v28 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (NWConcrete_nw_path *)(id)gLogObj;
      if (os_log_type_enabled(&v15->super, OS_LOG_TYPE_ERROR))
      {
        v29 = *(_QWORD *)(a1 + 32);
        v30 = v29 == 0;
        if (v29)
          v31 = (const char *)(v29 + 407);
        else
          v31 = "";
        *(_DWORD *)buf = 136446978;
        v47 = "nw_protocol_instance_establish_path_block_invoke";
        v48 = 2082;
        v49 = v31;
        if (v30)
          v32 = "";
        else
          v32 = " ";
        v50 = 2080;
        v51 = v32;
        v52 = 2048;
        v53 = value;
        v27 = "%{public}s %{public}s%sNo flow registration found for path %lx";
LABEL_46:
        _os_log_impl(&dword_182FBE000, &v15->super, OS_LOG_TYPE_ERROR, v27, buf, 0x2Au);
        goto LABEL_60;
      }
      goto LABEL_60;
    }
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 32);
    if (!v22 || (*(char *)(v22 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (NWConcrete_nw_path *)(id)gLogObj;
      if (os_log_type_enabled(&v15->super, OS_LOG_TYPE_ERROR))
      {
        v23 = *(_QWORD *)(a1 + 32);
        v24 = v23 == 0;
        if (v23)
          v25 = (const char *)(v23 + 407);
        else
          v25 = "";
        *(_DWORD *)buf = 136446978;
        v47 = "nw_protocol_instance_establish_path_block_invoke";
        v48 = 2082;
        v49 = v25;
        if (v24)
          v26 = "";
        else
          v26 = " ";
        v50 = 2080;
        v51 = v26;
        v52 = 2048;
        v53 = value;
        v27 = "%{public}s %{public}s%sNo path found for path %lx";
        goto LABEL_46;
      }
LABEL_60:

    }
  }

  return 1;
}

void sub_183487450(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t protocol_handle;
  uint64_t v7;
  uint64_t v8;

  protocol_handle = nw_protocol_options_get_protocol_handle(a4);
  v7 = a1[4];
  if (v7)
    v8 = v7 - 96;
  else
    v8 = 0;
  if (v8 == protocol_handle)
  {
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = a2;
  }
  return v8 != protocol_handle;
}

uint64_t ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_2(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  BOOL v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  int v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) < a2)
  {
    v9 = nw_protocol_instance_attach_protocol(*(void **)(a1 + 32), v7, v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *(char **)(a1 + 64), *(_QWORD *)(a1 + 72));
    if (!v9)
    {
      v16 = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
      goto LABEL_15;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v9;
    v10 = *(_QWORD *)(a1 + 32);
    if (!v10 || (*(char *)(v10 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_QWORD *)(a1 + 32);
        v13 = v12 == 0;
        if (v12)
          v14 = (const char *)(v12 + 407);
        else
          v14 = "";
        v18 = 136446978;
        v19 = "nw_protocol_instance_bring_up_channel_block_invoke_2";
        v20 = 2082;
        v21 = v14;
        if (v13)
          v15 = "";
        else
          v15 = " ";
        v22 = 2080;
        v23 = v15;
        v24 = 2114;
        v25 = v7;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAttached application protocol: %{public}@", (uint8_t *)&v18, 0x2Au);
      }

    }
  }
  v16 = 1;
LABEL_15:

  return v16;
}

void sub_183487684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_251(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  BOOL v13;
  const char *v14;
  const char *v15;
  int v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = nw_protocol_instance_attach_protocol(*(void **)(a1 + 32), v6, v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), *(char **)(a1 + 56), *(_QWORD *)(a1 + 64));
  v9 = v8;
  if (v8)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v8;
    v10 = *(_QWORD *)(a1 + 32);
    if (!v10 || (*(char *)(v10 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_QWORD *)(a1 + 32);
        v13 = v12 == 0;
        if (v12)
          v14 = (const char *)(v12 + 407);
        else
          v14 = "";
        v17 = 136446978;
        v18 = "nw_protocol_instance_bring_up_channel_block_invoke";
        v19 = 2082;
        v20 = v14;
        if (v13)
          v15 = "";
        else
          v15 = " ";
        v21 = 2080;
        v22 = v15;
        v23 = 2114;
        v24 = v6;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAttached transport protocol: %{public}@", (uint8_t *)&v17, 0x2Au);
      }

    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }

  return v9 != 0;
}

void sub_183487834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_252(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  BOOL v13;
  const char *v14;
  const char *v15;
  int v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = nw_protocol_instance_attach_protocol(*(void **)(a1 + 32), v6, v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), *(char **)(a1 + 56), *(_QWORD *)(a1 + 64));
  v9 = v8;
  if (v8)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v8;
    v10 = *(_QWORD *)(a1 + 32);
    if (!v10 || (*(char *)(v10 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_QWORD *)(a1 + 32);
        v13 = v12 == 0;
        if (v12)
          v14 = (const char *)(v12 + 407);
        else
          v14 = "";
        v17 = 136446978;
        v18 = "nw_protocol_instance_bring_up_channel_block_invoke";
        v19 = 2082;
        v20 = v14;
        if (v13)
          v15 = "";
        else
          v15 = " ";
        v21 = 2080;
        v22 = v15;
        v23 = 2114;
        v24 = v6;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAttached internet protocol: %{public}@", (uint8_t *)&v17, 0x2Au);
      }

    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }

  return v9 != 0;
}

void sub_1834879E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_253(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  BOOL v13;
  const char *v14;
  const char *v15;
  int v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = nw_protocol_instance_attach_protocol(*(void **)(a1 + 32), v6, v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), *(char **)(a1 + 56), *(_QWORD *)(a1 + 64));
  v9 = v8;
  if (v8)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v8;
    v10 = *(_QWORD *)(a1 + 32);
    if (!v10 || (*(char *)(v10 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_QWORD *)(a1 + 32);
        v13 = v12 == 0;
        if (v12)
          v14 = (const char *)(v12 + 407);
        else
          v14 = "";
        v17 = 136446978;
        v18 = "nw_protocol_instance_bring_up_channel_block_invoke";
        v19 = 2082;
        v20 = v14;
        if (v13)
          v15 = "";
        else
          v15 = " ";
        v21 = 2080;
        v22 = v15;
        v23 = 2114;
        v24 = v6;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAttached link protocol: %{public}@", (uint8_t *)&v17, 0x2Au);
      }

    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }

  return v9 != 0;
}

void sub_183487B94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *nw_protocol_instance_attach_protocol(void *a1, void *a2, void *a3, uint64_t a4, char *a5, uint64_t a6)
{
  char *v11;
  id v12;
  id v13;
  char *identifier;
  uint64_t internal;
  const char *v16;
  void *v17;
  char v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t (**v25)(const char *, uint64_t);
  uint64_t (*v26)(const char *, uint64_t);
  int v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  void *v33;
  const char *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  void *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  char *backtrace_string;
  NSObject *v44;
  _BOOL4 v45;
  const char *v46;
  char *v47;
  _BOOL4 v48;
  os_log_type_t v49;
  const char *v50;
  const char *v51;
  os_log_type_t v52;
  os_log_type_t v53;
  os_log_type_t v54;
  const char *v55;
  char v56;
  os_log_type_t v57[8];
  char v58;
  os_log_type_t type;
  const char *v60;
  char v61;
  _BYTE buf[12];
  __int16 v63;
  char *v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  char *v68;
  __int16 v69;
  id v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a3;
  identifier = nw_protocol_definition_get_identifier(v12);
  internal = nw_protocol_create_internal((uint64_t)identifier, *((void **)v11 + 41), *((const char **)v11 + 43), 1);
  if (internal)
  {
    v16 = (const char *)internal;
    nw_protocol_instance_set_protocol_instance(v11, v13, v12, internal);
    v17 = (void *)*((_QWORD *)v16 + 5);
    if (v17 == &nw_protocol_ref_counted_handle)
    {
      v21 = *((_QWORD *)v16 + 11);
      if (v21)
        *((_QWORD *)v16 + 11) = v21 + 1;
      v18 = -1;
    }
    else
    {
      v18 = 0;
    }
    v60 = v16;
    v61 = v18;
    if (a4)
    {
      v22 = *(void **)(a4 + 40);
      if (v22 == &nw_protocol_ref_counted_handle)
      {
        v24 = *(_QWORD *)(a4 + 88);
        if (v24)
          *(_QWORD *)(a4 + 88) = v24 + 1;
        v23 = -1;
      }
      else
      {
        v23 = 0;
      }
      *(_QWORD *)v57 = a4;
      v58 = v23;
      v25 = (uint64_t (**)(const char *, uint64_t))*((_QWORD *)v16 + 3);
      if (v25)
      {
        v26 = *v25;
        if (v26)
        {
          v27 = v26(v16, a4);
          if (v22 != &nw_protocol_ref_counted_handle)
          {
LABEL_22:
            if (v17 == &nw_protocol_ref_counted_handle)
              nw::release_if_needed<nw_protocol *>((uint64_t *)&v60);
            if (!*(_QWORD *)(a6 + 32))
            {
              if (*((_UNKNOWN **)v16 + 5) == &nw_protocol_ref_counted_handle)
              {
                v30 = *((_QWORD *)v16 + 11);
                if (v30)
                  *((_QWORD *)v16 + 11) = v30 + 1;
                v29 = 1;
                v28 = -1;
              }
              else
              {
                v28 = 0;
                v29 = 0;
              }
              *(_QWORD *)buf = v16;
              buf[8] = v28;
              v31 = *(_BYTE *)(a6 + 40);
              if ((v31 & 1) != 0)
              {
                nw::release_if_needed<nw_protocol *>((uint64_t *)(a6 + 32));
                v31 = *(_BYTE *)(a6 + 40);
              }
              *(_QWORD *)(a6 + 32) = v16;
              *(_BYTE *)(a6 + 40) = v29 | v31 & 0xFE;
            }
            if (v27)
              v20 = v16;
            else
              v20 = 0;
            goto LABEL_36;
          }
LABEL_21:
          nw::release_if_needed<nw_protocol *>((uint64_t *)v57);
          goto LABEL_22;
        }
      }
      __nwlog_obj();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = (const char *)*((_QWORD *)v16 + 2);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
      if (!v34)
        v34 = "invalid";
      v63 = 2082;
      v64 = (char *)v34;
      v65 = 2048;
      v66 = v16;
      v55 = (const char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v56 = 0;
      v35 = (char *)v55;
      if (!__nwlog_fault(v55, &type, &v56))
      {
LABEL_74:
        if (v35)
          free(v35);
        v27 = 0;
        if (v22 != &nw_protocol_ref_counted_handle)
          goto LABEL_22;
        goto LABEL_21;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          v38 = (const char *)*((_QWORD *)v16 + 2);
          if (!v38)
            v38 = "invalid";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
          v63 = 2082;
          v64 = (char *)v38;
          v65 = 2048;
          v66 = v16;
          _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback", buf, 0x20u);
        }
      }
      else
      {
        if (v56)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v44 = objc_claimAutoreleasedReturnValue();
          v53 = type;
          v45 = os_log_type_enabled(v44, type);
          if (backtrace_string)
          {
            if (v45)
            {
              v46 = (const char *)*((_QWORD *)v16 + 2);
              if (!v46)
                v46 = "invalid";
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
              v63 = 2082;
              v64 = (char *)v46;
              v65 = 2048;
              v66 = v16;
              v67 = 2082;
              v68 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v44, v53, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
          }
          else
          {
            if (v45)
            {
              v51 = (const char *)*((_QWORD *)v16 + 2);
              if (!v51)
                v51 = "invalid";
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
              v63 = 2082;
              v64 = (char *)v51;
              v65 = 2048;
              v66 = v16;
              _os_log_impl(&dword_182FBE000, v44, v53, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, no backtrace", buf, 0x20u);
            }

          }
          goto LABEL_73;
        }
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v49 = type;
        if (os_log_type_enabled(v36, type))
        {
          v50 = (const char *)*((_QWORD *)v16 + 2);
          if (!v50)
            v50 = "invalid";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
          v63 = 2082;
          v64 = (char *)v50;
          v65 = 2048;
          v66 = v16;
          _os_log_impl(&dword_182FBE000, v36, v49, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, backtrace limit exceeded", buf, 0x20u);
        }
      }

LABEL_73:
      v35 = (char *)v55;
      goto LABEL_74;
    }
    __nwlog_obj();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
    v40 = (char *)_os_log_send_and_compose_impl();

    v57[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v40, v57, &type))
    {
      if (v57[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v42 = v57[0];
        if (os_log_type_enabled(v41, v57[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
          _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s called with null input_protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        v47 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v54 = v57[0];
        v48 = os_log_type_enabled(v41, v57[0]);
        if (v47)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
            v63 = 2082;
            v64 = v47;
            _os_log_impl(&dword_182FBE000, v41, v54, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v47);
          goto LABEL_84;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
          _os_log_impl(&dword_182FBE000, v41, v54, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v52 = v57[0];
        if (os_log_type_enabled(v41, v57[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_protocol_add_input_handler";
          _os_log_impl(&dword_182FBE000, v41, v52, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_84:
    if (v40)
      free(v40);
    v27 = 0;
    goto LABEL_22;
  }
  if ((v11[405] & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "nw_protocol_instance_attach_protocol";
      v63 = 2082;
      v64 = v11 + 407;
      v65 = 2080;
      v66 = " ";
      v67 = 2048;
      v68 = a5;
      v69 = 2114;
      v70 = v12;
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sPath %lx could not create protocol for %{public}@", buf, 0x34u);
    }

  }
  v20 = 0;
LABEL_36:

  return v20;
}

void nw_protocol_instance_tear_down_path(void *a1, uint64_t a2)
{
  char *v3;
  char *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  char *v22;
  uint64_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_instance_tear_down_path";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v8, &type, &v24))
      goto LABEL_43;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_instance_tear_down_path";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_protocol_instance_tear_down_path";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v8)
          goto LABEL_9;
LABEL_44:
        free(v8);
        goto LABEL_9;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_instance_tear_down_path";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_instance_tear_down_path";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_42:

    goto LABEL_43;
  }
  if (a2)
  {
    if (*((_QWORD *)v3 + 37))
    {
      v5 = (void *)*((_QWORD *)v3 + 15);
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_protocol_instance_tear_down_path_block_invoke;
      v21[3] = &unk_1E14AA348;
      v22 = v3;
      v23 = a2;
      nw_queue_context_async(v5, v21);

    }
    else if ((v3[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v27 = "nw_protocol_instance_tear_down_path";
        v28 = 2082;
        v29 = v4 + 407;
        v30 = 2080;
        v31 = " ";
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo path table found", buf, 0x20u);
      }

    }
    goto LABEL_9;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_protocol_instance_tear_down_path";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v8, &type, &v24))
    goto LABEL_43;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_instance_tear_down_path";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (!v24)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_instance_tear_down_path";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_42;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_instance_tear_down_path";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_protocol_instance_tear_down_path";
    v28 = 2082;
    v29 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_44;
LABEL_9:

}

void sub_18348898C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void __nw_protocol_instance_tear_down_path_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  BOOL v11;
  const char *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  const char *v20;
  const char *v21;
  int v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 296);
  if (!v3)
  {
    if (*(char *)(v2 + 405) < 0)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      goto LABEL_27;
    v9 = *(_QWORD *)(a1 + 32);
    v10 = "";
    v11 = v9 == 0;
    if (v9)
      v12 = (const char *)(v9 + 407);
    else
      v12 = "";
    v22 = 136446722;
    v23 = "nw_protocol_instance_tear_down_path_block_invoke";
    if (!v11)
      v10 = " ";
    v24 = 2082;
    v25 = v12;
    v26 = 2080;
    v27 = v10;
    v13 = "%{public}s %{public}s%sNo path table found";
    v14 = v8;
    v15 = 32;
    goto LABEL_26;
  }
  node = nw_hash_table_get_node(v3, *(_QWORD *)(a1 + 40), 8);
  if (!node)
  {
    v16 = *(_QWORD *)(a1 + 32);
    if (v16 && *(char *)(v16 + 405) < 0)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
LABEL_27:

      return;
    }
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(a1 + 40);
    v19 = v17 == 0;
    if (v17)
      v20 = (const char *)(v17 + 407);
    else
      v20 = "";
    v23 = "nw_protocol_instance_tear_down_path_block_invoke";
    v24 = 2082;
    v21 = " ";
    v22 = 136446978;
    if (v19)
      v21 = "";
    v25 = v20;
    v26 = 2080;
    v27 = v21;
    v28 = 2048;
    v29 = v18;
    v13 = "%{public}s %{public}s%sNo path found for %lx";
    v14 = v8;
    v15 = 42;
LABEL_26:
    _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v22, v15);
    goto LABEL_27;
  }
  v5 = node;
  nw_protocol_instance_tear_down_path_inner(*(void **)(a1 + 32), node + 32);
  if (*(_DWORD *)(v5 + 160) == 3)
  {
    *(_DWORD *)(v5 + 160) = 1;
    v6 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v6 + 404) & 8) == 0)
    {
      if (*(_QWORD *)(v6 + 16))
        (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 80) + 208))();
    }
  }
  v7 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v7 + 404) & 8) != 0)
    nw_protocol_implementation_destroy((NWConcrete_nw_protocol_instance *)v7);
}

void nw_protocol_implementation_destroy(NWConcrete_nw_protocol_instance *a1)
{
  NWConcrete_nw_protocol_instance *v1;
  NWConcrete_nw_protocol_instance *v2;
  NWConcrete_nw_protocol_instance *v3;
  NWConcrete_nw_protocol_instance *v4;
  nw_frame **tqh_last;
  int v6;
  NWConcrete_nw_protocol_instance *v7;
  char *flow_registration;
  BOOL v9;
  NSObject *v10;
  char *v11;
  NSObject *v12;
  void *v13;
  unint64_t maximum_content_size;
  NWConcrete_nw_protocol_definition *parent_definition;
  void (*var1)(NWConcrete_nw_protocol_definition *, unint64_t);
  OS_nw_parameters *parameters;
  OS_nw_parameters *v18;
  id wakeup;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  NSObject *v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type[8];
  os_log_type_t *v31;
  uint64_t v32;
  char v33;
  _BYTE buf[24];
  const char *v35;
  os_log_type_t *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_implementation_destroy";
    v21 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v21, type, &v29))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_destroy";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null instance", buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v25 = type[0];
        v26 = os_log_type_enabled(v22, type[0]);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_destroy";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_destroy";
          _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v28 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_destroy";
          _os_log_impl(&dword_182FBE000, v22, v28, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_45:
    if (v21)
      free(v21);
    goto LABEL_25;
  }
  v3 = v1;
  v4 = v3;
  tqh_last = v3->pending_outbound_frames.tqh_last;
  if (tqh_last)
  {
    v6 = *((_DWORD *)tqh_last + 10);

    if (v6)
    {
LABEL_8:
      BYTE4(v4->flow_in_connected) |= 8u;
      if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0 && gLogDatapath)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_destroy";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = (char *)&v4->flow_in_connected + 7;
          *(_WORD *)&buf[22] = 2080;
          v35 = " ";
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDeferring destroying protocol", buf, 0x20u);
        }

      }
LABEL_25:

      return;
    }
  }
  else
  {

  }
  v7 = v4;
  *(_QWORD *)type = 0;
  v31 = type;
  v32 = 0x2020000000;
  v33 = 0;
  flow_registration = (char *)v7->flow_registration;
  if (flow_registration)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL43nw_protocol_implementation_has_active_pathsP31NWConcrete_nw_protocol_instance_block_invoke;
    v35 = (const char *)&unk_1E149BA50;
    v36 = type;
    nw_hash_table_apply(flow_registration, (uint64_t)buf);
    v9 = *((_BYTE *)v31 + 24) == 0;
    _Block_object_dispose(type, 8);

    if (!v9)
      goto LABEL_8;
  }
  else
  {
    _Block_object_dispose(type, 8);

  }
  v11 = *(char **)v7->_anon_0;
  if (v11 == (char *)v7)
  {
LABEL_17:
    if ((SBYTE5(v7->flow_in_connected) & 0x80000000) == 0 && gLogDatapath)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_destroy";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)&v7->flow_in_connected + 7;
        *(_WORD *)&buf[22] = 2080;
        v35 = " ";
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDestroying protocol", buf, 0x20u);
      }

    }
    maximum_content_size = v7->maximum_content_size;
    if (maximum_content_size)
    {
      parent_definition = v7->parent_definition;
      var1 = (void (*)(NWConcrete_nw_protocol_definition *, unint64_t))parent_definition->extended_state->var1;
      if (var1)
      {
        var1(parent_definition, maximum_content_size);
        v7->maximum_content_size = 0;
      }
    }
    parameters = v7->parameters;
    if (parameters)
    {
      nw_association_unregister(parameters, v7);
      v18 = v7->parameters;
      v7->parameters = 0;

    }
    wakeup = v7->wakeup;
    v7->wakeup = 0;

    *(_QWORD *)v7->_anon_0 = 0;
    BYTE4(v7->flow_in_connected) &= ~8u;
    nw_protocol_destroy((uint64_t)v7, 0);
    goto LABEL_25;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_destroy";
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = v11;
  *(_WORD *)&buf[22] = 2048;
  v35 = (const char *)v7;
  v13 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v13))
  {
    free(v13);
    goto LABEL_17;
  }
  __break(1u);
}

void sub_1834891CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_protocol_implementation_has_active_pathsP31NWConcrete_nw_protocol_instance_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra;
  uint64_t result;

  extra = nw_hash_node_get_extra(a2);
  if (*(_DWORD *)(extra + 128) != 3 && !*(_QWORD *)(extra + 32))
    return 1;
  result = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

void *nw_protocol_instance_copy_endpoint(uint64_t a1)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  char *backtrace_string;
  os_log_type_t v7;
  _BOOL4 v8;
  os_log_type_t v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
    return nw_endpoint_copy(*(void **)(a1 + 40));
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_protocol_instance_copy_endpoint";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_instance_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_instance_copy_endpoint";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_instance_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_instance_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v4, v9, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_19:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_instance_get_maximum_message_size(void *a1, uint64_t a2)
{
  NWConcrete_nw_protocol_instance *v3;
  NWConcrete_nw_protocol_instance *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int16 *p_paths_log_id_num;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *, unsigned __int16 *, uint64_t *);
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  const char *v31;
  void *v32;
  const char *v33;
  os_log_type_t v34;
  const char *v35;
  char *backtrace_string;
  os_log_type_t v37;
  _BOOL4 v38;
  void *v39;
  os_log_type_t v40;
  char *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  const char *v44;
  void *v45;
  os_log_type_t v46;
  os_log_type_t v47;
  _BOOL4 v48;
  const char *v49;
  char *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  os_log_type_t v53;
  os_log_type_t v54;
  _BOOL4 v55;
  os_log_type_t v56;
  const char *v57;
  os_log_type_t v58;
  const char *v59;
  const char *v60;
  const char *v61;
  os_log_type_t v62;
  os_log_type_t v63;
  uint64_t v65;
  char v66;
  os_log_type_t v67;
  unsigned __int16 *v68;
  char v69;
  os_log_type_t type[8];
  char v71;
  uint8_t buf[4];
  const char *v73;
  __int16 v74;
  void *v75;
  __int16 v76;
  _QWORD *v77;
  __int16 v78;
  char *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v73 = "nw_protocol_instance_get_maximum_message_size";
    v23 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (!__nwlog_fault(v23, type, &v68))
      goto LABEL_140;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type[0];
      if (os_log_type_enabled(v24, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v73 = "nw_protocol_instance_get_maximum_message_size";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_139;
    }
    if (!(_BYTE)v68)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v53 = type[0];
      if (os_log_type_enabled(v24, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v73 = "nw_protocol_instance_get_maximum_message_size";
        _os_log_impl(&dword_182FBE000, v24, v53, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_139;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    v37 = type[0];
    v38 = os_log_type_enabled(v24, type[0]);
    if (!backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v73 = "nw_protocol_instance_get_maximum_message_size";
        _os_log_impl(&dword_182FBE000, v24, v37, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_139;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      v73 = "nw_protocol_instance_get_maximum_message_size";
      v74 = 2082;
      v75 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v24, v37, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
    goto LABEL_140;
  }
  if (a2)
  {
    v5 = nw_protocol_implementation_lookup_path(v3, a2, 0);
    if (!v5)
      goto LABEL_142;
    v6 = *(_QWORD **)(v5 + 32);
    v65 = 0;
    if (v6)
    {
      v7 = (void *)v6[5];
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        v10 = v6[11];
        if (v10)
          v6[11] = v10 + 1;
        v8 = -1;
      }
      else
      {
        v8 = 0;
      }
      p_paths_log_id_num = &v4[-1].paths_log_id_num;
      *(_QWORD *)type = v6;
      v71 = v8;
      v12 = *(void **)&v4[-1].log_str[33];
      if (v12 == &nw_protocol_ref_counted_handle)
      {
        v14 = *(_QWORD *)&v4[-1].log_str[81];
        if (v14)
          *(_QWORD *)&v4[-1].log_str[81] = v14 + 1;
        v13 = -1;
      }
      else
      {
        v13 = 0;
      }
      v68 = &v4[-1].paths_log_id_num;
      v69 = v13;
      v15 = v6[3];
      if (v15)
      {
        v16 = *(void (**)(_QWORD *, unsigned __int16 *, uint64_t *))(v15 + 248);
        if (v16)
        {
LABEL_31:
          v16(v6, p_paths_log_id_num, &v65);
          goto LABEL_32;
        }
      }
      __nwlog_obj();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = (const char *)v6[2];
      *(_DWORD *)buf = 136446722;
      v73 = "__nw_protocol_get_message_properties";
      if (!v27)
        v27 = "invalid";
      v74 = 2082;
      v75 = (void *)v27;
      v76 = 2048;
      v77 = v6;
      v28 = (char *)_os_log_send_and_compose_impl();

      v67 = OS_LOG_TYPE_ERROR;
      v66 = 0;
      if (__nwlog_fault(v28, &v67, &v66))
      {
        if (v67 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v30 = v67;
          if (os_log_type_enabled(v29, v67))
          {
            v31 = (const char *)v6[2];
            if (!v31)
              v31 = "invalid";
            *(_DWORD *)buf = 136446722;
            v73 = "__nw_protocol_get_message_properties";
            v74 = 2082;
            v75 = (void *)v31;
            v76 = 2048;
            v77 = v6;
            _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback", buf, 0x20u);
          }
LABEL_125:

          goto LABEL_126;
        }
        if (!v66)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v56 = v67;
          if (os_log_type_enabled(v29, v67))
          {
            v57 = (const char *)v6[2];
            if (!v57)
              v57 = "invalid";
            *(_DWORD *)buf = 136446722;
            v73 = "__nw_protocol_get_message_properties";
            v74 = 2082;
            v75 = (void *)v57;
            v76 = 2048;
            v77 = v6;
            _os_log_impl(&dword_182FBE000, v29, v56, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, backtrace limit exceeded", buf, 0x20u);
          }
          goto LABEL_125;
        }
        v41 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v42 = v67;
        v43 = os_log_type_enabled(v29, v67);
        if (!v41)
        {
          if (v43)
          {
            v60 = (const char *)v6[2];
            if (!v60)
              v60 = "invalid";
            *(_DWORD *)buf = 136446722;
            v73 = "__nw_protocol_get_message_properties";
            v74 = 2082;
            v75 = (void *)v60;
            v76 = 2048;
            v77 = v6;
            _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, no backtrace", buf, 0x20u);
          }
          goto LABEL_125;
        }
        if (v43)
        {
          v44 = (const char *)v6[2];
          if (!v44)
            v44 = "invalid";
          *(_DWORD *)buf = 136446978;
          v73 = "__nw_protocol_get_message_properties";
          v74 = 2082;
          v75 = (void *)v44;
          v76 = 2048;
          v77 = v6;
          v78 = 2082;
          v79 = v41;
          _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
LABEL_88:

        free(v41);
        goto LABEL_126;
      }
      goto LABEL_126;
    }
    __nwlog_obj();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v73 = "__nw_protocol_get_message_properties";
    v23 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (__nwlog_fault(v23, type, &v68))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v40 = type[0];
        if (os_log_type_enabled(v24, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v73 = "__nw_protocol_get_message_properties";
          _os_log_impl(&dword_182FBE000, v24, v40, "%{public}s called with null protocol", buf, 0xCu);
        }
LABEL_139:

        goto LABEL_140;
      }
      if (!(_BYTE)v68)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v62 = type[0];
        if (os_log_type_enabled(v24, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v73 = "__nw_protocol_get_message_properties";
          _os_log_impl(&dword_182FBE000, v24, v62, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_139;
      }
      v50 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v51 = type[0];
      v52 = os_log_type_enabled(v24, type[0]);
      if (!v50)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          v73 = "__nw_protocol_get_message_properties";
          _os_log_impl(&dword_182FBE000, v24, v51, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
        goto LABEL_139;
      }
      if (v52)
      {
        *(_DWORD *)buf = 136446466;
        v73 = "__nw_protocol_get_message_properties";
        v74 = 2082;
        v75 = v50;
        _os_log_impl(&dword_182FBE000, v24, v51, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_101:

      free(v50);
      if (!v23)
        goto LABEL_142;
      goto LABEL_141;
    }
LABEL_140:
    if (v23)
LABEL_141:
      free(v23);
LABEL_142:
    v21 = 0;
    goto LABEL_143;
  }
  v65 = 0;
  v6 = *(_QWORD **)&v3[-1].log_str[25];
  if (!v6)
  {
    __nwlog_obj();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v73 = "__nw_protocol_get_message_properties";
    v23 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (!__nwlog_fault(v23, type, &v68))
      goto LABEL_140;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v46 = type[0];
      if (os_log_type_enabled(v24, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v73 = "__nw_protocol_get_message_properties";
        _os_log_impl(&dword_182FBE000, v24, v46, "%{public}s called with null protocol", buf, 0xCu);
      }
      goto LABEL_139;
    }
    if (!(_BYTE)v68)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v63 = type[0];
      if (os_log_type_enabled(v24, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v73 = "__nw_protocol_get_message_properties";
        _os_log_impl(&dword_182FBE000, v24, v63, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_139;
    }
    v50 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    v54 = type[0];
    v55 = os_log_type_enabled(v24, type[0]);
    if (!v50)
    {
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        v73 = "__nw_protocol_get_message_properties";
        _os_log_impl(&dword_182FBE000, v24, v54, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
      goto LABEL_139;
    }
    if (v55)
    {
      *(_DWORD *)buf = 136446466;
      v73 = "__nw_protocol_get_message_properties";
      v74 = 2082;
      v75 = v50;
      _os_log_impl(&dword_182FBE000, v24, v54, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_101;
  }
  v7 = (void *)v6[5];
  if (v7 == &nw_protocol_ref_counted_handle)
  {
    v17 = v6[11];
    if (v17)
      v6[11] = v17 + 1;
    v9 = -1;
  }
  else
  {
    v9 = 0;
  }
  p_paths_log_id_num = &v3[-1].paths_log_id_num;
  *(_QWORD *)type = v6;
  v71 = v9;
  v12 = *(void **)&v3[-1].log_str[33];
  if (v12 == &nw_protocol_ref_counted_handle)
  {
    v19 = *(_QWORD *)&v3[-1].log_str[81];
    if (v19)
      *(_QWORD *)&v3[-1].log_str[81] = v19 + 1;
    v18 = -1;
  }
  else
  {
    v18 = 0;
  }
  v68 = &v3[-1].paths_log_id_num;
  v69 = v18;
  v20 = v6[3];
  if (v20)
  {
    v16 = *(void (**)(_QWORD *, unsigned __int16 *, uint64_t *))(v20 + 248);
    if (v16)
      goto LABEL_31;
  }
  __nwlog_obj();
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = (const char *)v6[2];
  *(_DWORD *)buf = 136446722;
  v73 = "__nw_protocol_get_message_properties";
  if (!v33)
    v33 = "invalid";
  v74 = 2082;
  v75 = (void *)v33;
  v76 = 2048;
  v77 = v6;
  v28 = (char *)_os_log_send_and_compose_impl();

  v67 = OS_LOG_TYPE_ERROR;
  v66 = 0;
  if (__nwlog_fault(v28, &v67, &v66))
  {
    if (v67 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v34 = v67;
      if (os_log_type_enabled(v29, v67))
      {
        v35 = (const char *)v6[2];
        if (!v35)
          v35 = "invalid";
        *(_DWORD *)buf = 136446722;
        v73 = "__nw_protocol_get_message_properties";
        v74 = 2082;
        v75 = (void *)v35;
        v76 = 2048;
        v77 = v6;
        _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback", buf, 0x20u);
      }
      goto LABEL_125;
    }
    if (!v66)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v58 = v67;
      if (os_log_type_enabled(v29, v67))
      {
        v59 = (const char *)v6[2];
        if (!v59)
          v59 = "invalid";
        *(_DWORD *)buf = 136446722;
        v73 = "__nw_protocol_get_message_properties";
        v74 = 2082;
        v75 = (void *)v59;
        v76 = 2048;
        v77 = v6;
        _os_log_impl(&dword_182FBE000, v29, v58, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, backtrace limit exceeded", buf, 0x20u);
      }
      goto LABEL_125;
    }
    v41 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    v47 = v67;
    v48 = os_log_type_enabled(v29, v67);
    if (!v41)
    {
      if (v48)
      {
        v61 = (const char *)v6[2];
        if (!v61)
          v61 = "invalid";
        *(_DWORD *)buf = 136446722;
        v73 = "__nw_protocol_get_message_properties";
        v74 = 2082;
        v75 = (void *)v61;
        v76 = 2048;
        v77 = v6;
        _os_log_impl(&dword_182FBE000, v29, v47, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, no backtrace", buf, 0x20u);
      }
      goto LABEL_125;
    }
    if (v48)
    {
      v49 = (const char *)v6[2];
      if (!v49)
        v49 = "invalid";
      *(_DWORD *)buf = 136446978;
      v73 = "__nw_protocol_get_message_properties";
      v74 = 2082;
      v75 = (void *)v49;
      v76 = 2048;
      v77 = v6;
      v78 = 2082;
      v79 = v41;
      _os_log_impl(&dword_182FBE000, v29, v47, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    goto LABEL_88;
  }
LABEL_126:
  if (v28)
    free(v28);
LABEL_32:
  if (v12 == &nw_protocol_ref_counted_handle)
  {
    nw::release_if_needed<nw_protocol *>((uint64_t *)&v68);
    if (v7 != &nw_protocol_ref_counted_handle)
      goto LABEL_34;
LABEL_36:
    nw::release_if_needed<nw_protocol *>((uint64_t *)type);
    goto LABEL_34;
  }
  if (v7 == &nw_protocol_ref_counted_handle)
    goto LABEL_36;
LABEL_34:
  v21 = v65;
LABEL_143:

  return v21;
}

void sub_18348A2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  if (v10 == v9)
    nw::release_if_needed<nw_protocol *>((uint64_t *)va);
  if (v8 == v9)
    nw::release_if_needed<nw_protocol *>((uint64_t *)va1);

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_instance_get_buffer_manager(void *a1, unsigned int a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t buffer_manager_with_context;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = (void *)*((_QWORD *)v3 + 15);
    if (v5)
    {
      buffer_manager_with_context = nw_frame_get_buffer_manager_with_context(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_instance_get_buffer_manager";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null instance->context", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null instance->context, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null instance->context, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_protocol_instance_get_buffer_manager";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null instance->context, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_instance_get_buffer_manager";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_protocol_instance_get_buffer_manager";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9)
    free(v9);
  buffer_manager_with_context = 0;
LABEL_4:

  return buffer_manager_with_context;
}

uint64_t nw_protocol_instance_access_cached_content(void *a1, void *a2)
{
  void **v3;
  uint64_t (**v4)(_QWORD);
  uint64_t (**v5)(_QWORD);
  _QWORD *v6;
  uint64_t v7;
  id *v8;
  id *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  _BOOL4 v37;
  char *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  os_log_type_t v42;
  os_log_type_t v43;
  os_log_type_t v44;
  os_log_type_t v45;
  os_log_type_t v46;
  char v48;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_instance_access_cached_content";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v12, &type, &v48))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (!v48)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v41, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v28 = type;
    v29 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v28, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v51 = "nw_protocol_instance_access_cached_content";
      v52 = 2082;
      v53 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v28, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_63:

    free(backtrace_string);
    goto LABEL_64;
  }
  if (!v4)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_instance_access_cached_content";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v12, &type, &v48))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null access_block", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (!v48)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v42, "%{public}s called with null access_block, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v30 = type;
    v31 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v30, "%{public}s called with null access_block, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v51 = "nw_protocol_instance_access_cached_content";
      v52 = 2082;
      v53 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v30, "%{public}s called with null access_block, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
  v6 = v3[1];
  if (!v6)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_instance_access_cached_content";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v12, &type, &v48))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null instance->parent_definition", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (!v48)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v43, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v32 = type;
    v33 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v32, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      v51 = "nw_protocol_instance_access_cached_content";
      v52 = 2082;
      v53 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v32, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
  v7 = v6[9];
  if (!v7)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_instance_access_cached_content";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v12, &type, &v48))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null instance->parent_definition->common_state", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (!v48)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v44, "%{public}s called with null instance->parent_definition->common_state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v34 = type;
    v35 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v34, "%{public}s called with null instance->parent_definition->common_state, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      v51 = "nw_protocol_instance_access_cached_content";
      v52 = 2082;
      v53 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v34, "%{public}s called with null instance->parent_definition->common_state, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
  if (*(_QWORD *)(v7 + 56))
  {
    v8 = nw_protocol_instance_copy_association(v3);
    v9 = v8;
    if (v8)
    {
      if (nw_association_get_cached_content_for_protocol(v8, v3[1]))
      {
        v10 = v5[2](v5);
LABEL_111:

        goto LABEL_112;
      }
LABEL_110:
      v10 = 0;
      goto LABEL_111;
    }
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_instance_access_cached_content";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (__nwlog_fault(v24, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_protocol_instance_access_cached_content";
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null association", buf, 0xCu);
        }
      }
      else if (v48)
      {
        v38 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v39 = type;
        v40 = os_log_type_enabled(v25, type);
        if (v38)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446466;
            v51 = "nw_protocol_instance_access_cached_content";
            v52 = 2082;
            v53 = v38;
            _os_log_impl(&dword_182FBE000, v25, v39, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v38);
          goto LABEL_108;
        }
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_protocol_instance_access_cached_content";
          _os_log_impl(&dword_182FBE000, v25, v39, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v46 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_protocol_instance_access_cached_content";
          _os_log_impl(&dword_182FBE000, v25, v46, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_108:
    if (v24)
      free(v24);
    goto LABEL_110;
  }
  __nwlog_obj();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v51 = "nw_protocol_instance_access_cached_content";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v48 = 0;
  if (__nwlog_fault(v12, &type, &v48))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry", buf, 0xCu);
      }
LABEL_104:

      goto LABEL_64;
    }
    if (!v48)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v45 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v45, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v36 = type;
    v37 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v36, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      v51 = "nw_protocol_instance_access_cached_content";
      v52 = 2082;
      v53 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v36, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
LABEL_64:
  if (v12)
    free(v12);
  v10 = 0;
LABEL_112:

  return v10;
}

void sub_18348B468(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_protocol_instance_set_cached_content(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  id *v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  _BOOL4 v34;
  char *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  os_log_type_t v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = (void **)v5;
  if (!v5)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_instance_set_cached_content";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v12, &type, &v43))
      goto LABEL_87;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      v27 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          v46 = "nw_protocol_instance_set_cached_content";
          v47 = 2082;
          v48 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_87:
        if (!v12)
          goto LABEL_8;
LABEL_88:
        free(v12);
        goto LABEL_8;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v38, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_86:

    goto LABEL_87;
  }
  v7 = v5[1];
  if (!v7)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_instance_set_cached_content";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v12, &type, &v43))
      goto LABEL_87;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null instance->parent_definition", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (!v43)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v39, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_86;
    }
    v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v29 = type;
    v30 = os_log_type_enabled(v13, type);
    if (!v28)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v29, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_instance_set_cached_content";
      v47 = 2082;
      v48 = v28;
      _os_log_impl(&dword_182FBE000, v13, v29, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_53;
  }
  v8 = *(_QWORD *)(v7 + 72);
  if (!v8)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_instance_set_cached_content";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v12, &type, &v43))
      goto LABEL_87;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null instance->parent_definition->common_state", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (!v43)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v40, "%{public}s called with null instance->parent_definition->common_state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_86;
    }
    v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v31 = type;
    v32 = os_log_type_enabled(v13, type);
    if (!v28)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v31, "%{public}s called with null instance->parent_definition->common_state, no backtrace", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_instance_set_cached_content";
      v47 = 2082;
      v48 = v28;
      _os_log_impl(&dword_182FBE000, v13, v31, "%{public}s called with null instance->parent_definition->common_state, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_53;
  }
  if (!*(_QWORD *)(v8 + 56))
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_instance_set_cached_content";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v12, &type, &v43))
      goto LABEL_87;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (!v43)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v41, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_86;
    }
    v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v33 = type;
    v34 = os_log_type_enabled(v13, type);
    if (!v28)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_182FBE000, v13, v33, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, no backtrace", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_instance_set_cached_content";
      v47 = 2082;
      v48 = v28;
      _os_log_impl(&dword_182FBE000, v13, v33, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_53:

    free(v28);
    if (!v12)
      goto LABEL_8;
    goto LABEL_88;
  }
  v9 = nw_protocol_instance_copy_association(v5);
  v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_instance_set_cached_content";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v22, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_protocol_instance_set_cached_content";
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null association", buf, 0xCu);
        }
      }
      else if (v43)
      {
        v35 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        v37 = os_log_type_enabled(v23, type);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            v46 = "nw_protocol_instance_set_cached_content";
            v47 = 2082;
            v48 = v35;
            _os_log_impl(&dword_182FBE000, v23, v36, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v35);
          goto LABEL_92;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_protocol_instance_set_cached_content";
          _os_log_impl(&dword_182FBE000, v23, v36, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v42 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_protocol_instance_set_cached_content";
          _os_log_impl(&dword_182FBE000, v23, v42, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_92:
    if (v22)
      free(v22);
    goto LABEL_7;
  }
  nw_association_set_cached_content_for_protocol(v9, v6[1], a2, a3);
LABEL_7:

LABEL_8:
}

void sub_18348BF48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_protocol_instance_copy_definition(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[1];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_instance_copy_definition";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_copy_definition";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_instance_copy_definition";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_copy_definition";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_copy_definition";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_instance_set_reserve_header_size(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_QWORD *)v3 + 10) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_instance_set_reserve_header_size";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_set_reserve_header_size";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_instance_set_reserve_header_size";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_set_reserve_header_size";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_set_reserve_header_size";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_protocol_instance_set_reserve_footer_size(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_QWORD *)v3 + 11) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_instance_set_reserve_footer_size";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_set_reserve_footer_size";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_instance_set_reserve_footer_size";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_set_reserve_footer_size";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_set_reserve_footer_size";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_protocol_instance_set_maximum_content_size(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_QWORD *)v3 + 12) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_instance_set_maximum_content_size";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_set_maximum_content_size";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_instance_set_maximum_content_size";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_set_maximum_content_size";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_instance_set_maximum_content_size";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_protocol_instance_notify_updated_metadata(void *a1)
{
  nw_protocol_instance_notify_updated_internal(a1, 5u, 0);
}

void nw_protocol_instance_notify_updated_internal(void *a1, unsigned int a2, int a3)
{
  _QWORD *v5;
  char *v6;
  void *v7;
  dispatch_queue_t *v8;
  dispatch_queue_t *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  void (*v13)(void);
  void *v14;
  char v15;
  uint64_t v16;
  void *v17;
  char v18;
  uint64_t v19;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  NSObject *v24;
  const char *v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  _QWORD v30[4];
  char *v31;
  unsigned int v32;
  char v33;
  char v34;
  os_log_type_t type[8];
  char v36;
  _BYTE buf[12];
  __int16 v38;
  char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = (char *)v5;
  if (!v5)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_instance_notify_updated_internal";
    v21 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (__nwlog_fault(v21, type, &v34))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_notify_updated_internal";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null instance", buf, 0xCu);
        }
      }
      else if (v34)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v27 = type[0];
        v28 = os_log_type_enabled(v22, type[0]);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_instance_notify_updated_internal";
            v38 = 2082;
            v39 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_53;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_notify_updated_internal";
          _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v29 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_notify_updated_internal";
          _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_53:
    if (v21)
      free(v21);
    goto LABEL_30;
  }
  v7 = (void *)v5[15];
  if (v7)
  {
    v8 = v7;
    v9 = v8;
    if (((_BYTE)v8[17] & 8) == 0)
      dispatch_assert_queue_V2(v8[1]);

  }
  if ((v6[405] & 0x80000000) == 0 && gLogDatapath)
  {
    __nwlog_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      if (a2 > 0x19)
        v25 = "unknown";
      else
        v25 = off_1E14A22C8[a2];
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_protocol_instance_notify_updated_internal";
      v38 = 2082;
      v39 = v6 + 407;
      v40 = 2080;
      v41 = " ";
      v42 = 2082;
      v43 = v25;
      _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNotify updated %{public}s", buf, 0x2Au);
    }

  }
  if (*(_DWORD *)(*((_QWORD *)v6 + 1) + 64) == 3)
  {
    v10 = (char *)*((_QWORD *)v6 + 29);
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = ___ZL44nw_protocol_instance_notify_updated_internalP31NWConcrete_nw_protocol_instance31nw_protocol_notification_type_tb_block_invoke;
    v30[3] = &unk_1E149BA78;
    v33 = a3;
    v31 = v6;
    v32 = a2;
    nw_hash_table_apply(v10, (uint64_t)v30);

  }
  else if (!a3 || v6[402] < 0)
  {
    v11 = (_QWORD *)*((_QWORD *)v6 - 6);
    if (v11)
    {
      v12 = v11[3];
      if (v12)
      {
        v13 = *(void (**)(void))(v12 + 160);
        if (v13)
        {
          v14 = (void *)v11[5];
          if (v14 == &nw_protocol_ref_counted_handle)
          {
            v16 = v11[11];
            if (v16)
              v11[11] = v16 + 1;
            v15 = -1;
          }
          else
          {
            v15 = 0;
          }
          *(_QWORD *)buf = v11;
          buf[8] = v15;
          v17 = (void *)*((_QWORD *)v6 - 7);
          if (v17 == &nw_protocol_ref_counted_handle)
          {
            v19 = *((_QWORD *)v6 - 1);
            if (v19)
              *((_QWORD *)v6 - 1) = v19 + 1;
            v18 = -1;
          }
          else
          {
            v18 = 0;
          }
          *(_QWORD *)type = v6 - 96;
          v36 = v18;
          v13();
          if (v17 == &nw_protocol_ref_counted_handle)
          {
            nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            if (v14 != &nw_protocol_ref_counted_handle)
              goto LABEL_30;
          }
          else if (v14 != &nw_protocol_ref_counted_handle)
          {
            goto LABEL_30;
          }
          nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
        }
      }
    }
  }
LABEL_30:

}

uint64_t ___ZL44nw_protocol_instance_notify_updated_internalP31NWConcrete_nw_protocol_instance31nw_protocol_notification_type_tb_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *object;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  int v9;
  void *v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *backtrace_string;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  void *v26;
  char v27;
  os_log_type_t type;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  char v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 44) && (*(_WORD *)(nw_hash_node_get_extra(a2) + 52) & 0x800) == 0)
    return 1;
  object = (_QWORD *)nw_hash_node_get_object(a2);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = v5 ? v5 - 96 : 0;
  if (!object)
    return 1;
  v7 = object[3];
  if (!v7)
    return 1;
  if (!v5)
    return 1;
  v8 = *(void (**)(void))(v7 + 160);
  if (!v8)
    return 1;
  v9 = *(_DWORD *)(a1 + 40);
  v10 = (void *)object[5];
  if (v10 == &nw_protocol_ref_counted_handle)
  {
    v12 = object[11];
    if (v12)
      object[11] = v12 + 1;
    v11 = -1;
  }
  else
  {
    v11 = 0;
  }
  v31 = object;
  v32 = v11;
  if (*(_UNKNOWN **)(v6 + 40) == &nw_protocol_ref_counted_handle)
  {
    v15 = *(_QWORD *)(v6 + 88);
    v14 = 0;
    if (v15)
      *(_QWORD *)(v6 + 88) = v15 + 1;
    v13 = -1;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v29 = v6;
  v30 = v13;
  if (!v9)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "__nw_protocol_notify";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v18, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "__nw_protocol_notify";
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null type", buf, 0xCu);
        }

      }
      else
      {
        v26 = v10;
        if (v27)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = type;
          v24 = os_log_type_enabled(v22, type);
          if (backtrace_string)
          {
            if (v24)
            {
              *(_DWORD *)buf = 136446466;
              v34 = "__nw_protocol_notify";
              v35 = 2082;
              v36 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
            }

            v10 = v26;
            free(backtrace_string);
            goto LABEL_43;
          }
          if (v24)
          {
            *(_DWORD *)buf = 136446210;
            v34 = "__nw_protocol_notify";
            _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null type, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v25 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)buf = 136446210;
            v34 = "__nw_protocol_notify";
            _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null type, backtrace limit exceeded", buf, 0xCu);
          }
        }

        v10 = v26;
      }
    }
LABEL_43:
    if (v18)
      free(v18);
    goto LABEL_22;
  }
  v8();
LABEL_22:
  if ((v14 & 1) == 0)
    nw::release_if_needed<nw_protocol *>(&v29);
  if (v10 == &nw_protocol_ref_counted_handle)
    nw::release_if_needed<nw_protocol *>((uint64_t *)&v31);
  return 1;
}

void sub_18348D234(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18348D240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  char v21;

  if ((v21 & 1) == 0)
    nw::release_if_needed<nw_protocol *>(&a17);
  if (v19 == v20)
    nw::release_if_needed<nw_protocol *>(&a19);
  _Unwind_Resume(exception_object);
}

void nw_protocol_instance_notify_updated_message_properties(void *a1, int a2)
{
  nw_protocol_instance_notify_updated_internal(a1, 6u, a2);
}

void nw_protocol_instance_update_available_paths(NWConcrete_nw_protocol_instance *a1)
{
  NWConcrete_nw_protocol_instance *v1;
  NWConcrete_nw_protocol_instance *v2;
  char v3;
  uint64_t v4;
  NSObject *v5;
  char *flow_registration;
  uint64_t v7;
  void **v8;
  void *v9;
  NSObject *v10;
  xpc_object_t v11;
  void *v12;
  id *v13;
  id v14;
  void *v15;
  id v16;
  xpc_object_t v17;
  char *v18;
  void **v19;
  void **v20;
  _BOOL8 should_fallback;
  uint64_t is_weak;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  unsigned int fallback_interface_index;
  id v29;
  NWConcrete_nw_interface *v30;
  void (*var27)(void **, NWConcrete_nw_interface *, _BOOL8, uint64_t);
  _BOOL8 internal;
  _BOOL8 v33;
  _OWORD *v34;
  id v35;
  void *v36;
  uint64_t v37;
  char v38;
  char v39;
  void *v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  char *backtrace_string;
  os_log_type_t v45;
  _BOOL4 v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  char v50;
  NSObject *v51;
  uint64_t v52;
  nw_frame **tqh_last;
  _QWORD v54[4];
  void **v55;
  _QWORD applier[4];
  void **v57;
  uint64_t v58;
  _QWORD v59[4];
  void **v60;
  id v61;
  _QWORD v62[4];
  void **v63;
  id v64;
  id v65;
  uint64_t *v66;
  _BYTE *v67;
  _QWORD *v68;
  _QWORD v69[3];
  char v70;
  uint64_t __buf[3];
  char v72;
  _QWORD v73[4];
  void **v74;
  _QWORD v75[4];
  void **v76;
  _BYTE buf[24];
  const char *v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if ((*((_BYTE *)v1->parent_definition + 184) & 0x10) == 0
    || !nw_parameters_get_multipath(v1->destroy_timer)
    || !v2->parent_definition->extended_state->var26)
  {

    goto LABEL_39;
  }
  v3 = BYTE5(v2->flow_in_connected);

  if ((v3 & 4) == 0)
  {
    if (v2->flow_registration)
      goto LABEL_6;
    internal = nw_hash_table_create_internal(5u, 144, (const void *(*)(const void *, unsigned int *))nw_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key, 0);
    if (internal)
    {
      *(_DWORD *)(internal + 48) &= ~2u;
      v2->flow_registration = (OS_nw_path_flow_registration *)internal;
      if (v2->wakeup_block && *(_QWORD *)&v2[-1].log_str[25])
      {
        __buf[0] = 0;
        arc4random_buf(__buf, 8uLL);
        LOBYTE(v69[0]) = 0;
        v33 = nw_hash_table_add_object((uint64_t)v2->flow_registration, __buf[0], (char *)v69);
        if (LOBYTE(v69[0]))
        {
          v34 = (_OWORD *)v33;
          if (v33)
          {
            *(_OWORD *)(v33 + 144) = 0u;
            *(_OWORD *)(v33 + 160) = 0u;
            *(_OWORD *)(v33 + 112) = 0u;
            *(_OWORD *)(v33 + 128) = 0u;
            *(_OWORD *)(v33 + 80) = 0u;
            *(_OWORD *)(v33 + 96) = 0u;
            *(_OWORD *)(v33 + 48) = 0u;
            *(_OWORD *)(v33 + 64) = 0u;
            *(_OWORD *)(v33 + 32) = 0u;
            v35 = nw_path_copy_interface(v2->wakeup_block);
            v36 = (void *)*((_QWORD *)v34 + 6);
            *((_QWORD *)v34 + 6) = v35;

            *((_DWORD *)v34 + 40) = 3;
            v37 = *(_QWORD *)&v2[-1].log_str[25];
            if (v37 && *(_UNKNOWN **)(v37 + 40) == &nw_protocol_ref_counted_handle)
            {
              v49 = *(_QWORD *)(v37 + 88);
              if (v49)
                *(_QWORD *)(v37 + 88) = v49 + 1;
              v39 = 1;
              v38 = -1;
            }
            else
            {
              v38 = 0;
              v39 = 0;
            }
            *(_QWORD *)buf = v37;
            buf[8] = v38;
            v50 = *((_BYTE *)v34 + 72);
            if ((v50 & 1) != 0)
            {
              nw::release_if_needed<nw_protocol *>((uint64_t *)v34 + 8);
              v50 = *((_BYTE *)v34 + 72);
            }
            *((_QWORD *)v34 + 8) = v37;
            *((_BYTE *)v34 + 72) = v39 | v50 & 0xFE;
            *((_BYTE *)v34 + 169) &= ~8u;
            if ((SBYTE5(v2->flow_in_connected) & 0x80000000) == 0)
            {
              __nwlog_obj();
              v51 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
              {
                v52 = *((_QWORD *)v34 + 6);
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_protocol_instance_update_available_paths";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = (char *)&v2->flow_in_connected + 7;
                *(_WORD *)&buf[22] = 2080;
                v78 = " ";
                v79 = 2048;
                v80 = __buf[0];
                v81 = 2112;
                v82 = v52;
                _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAdded path %lx as primary path over %@", buf, 0x34u);
              }

            }
            v4 = __buf[0];
            *((_QWORD *)v34 + 17) = 0;
            tqh_last = v2->pending_inbound_frames.tqh_last;
            v2->current_path = (OS_nw_path *)v4;
            v2->paths_table = (nw_hash_table *)v4;
            *((_QWORD *)v34 + 18) = (char *)v34 + 136;
            if (tqh_last)
            {
              *((_QWORD *)v34 + 17) = tqh_last;
              *((_QWORD *)v2->pending_inbound_frames.tqh_last + 5) = (char *)v34 + 136;
              *((_QWORD *)v34 + 18) = *(_QWORD *)&v2->pending_inbound_frame_count;
              v2->pending_inbound_frames.tqh_last = 0;
              *(_QWORD *)&v2->pending_inbound_frame_count = &v2->pending_inbound_frames.tqh_last;
            }
            goto LABEL_7;
          }
        }
        if ((SBYTE5(v2->flow_in_connected) & 0x80000000) == 0)
        {
          __nwlog_obj();
          v47 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_protocol_instance_update_available_paths";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = (char *)&v2->flow_in_connected + 7;
            *(_WORD *)&buf[22] = 2080;
            v78 = " ";
            v79 = 2048;
            v80 = __buf[0];
            _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to add path %lx to paths table", buf, 0x2Au);
          }

        }
      }
LABEL_6:
      v4 = 0;
LABEL_7:
      if ((SBYTE5(v2->flow_in_connected) & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = (id)gLogObj;
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_update_available_paths";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = (char *)&v2->flow_in_connected + 7;
          *(_WORD *)&buf[22] = 2080;
          v78 = " ";
          _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sExisting paths:", buf, 0x20u);
        }

      }
      flow_registration = (char *)v2->flow_registration;
      v7 = MEMORY[0x1E0C809B0];
      v75[0] = MEMORY[0x1E0C809B0];
      v75[1] = 3221225472;
      v75[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke;
      v75[3] = &unk_1E14AC340;
      v8 = v2;
      v76 = v8;
      nw_hash_table_apply(flow_registration, (uint64_t)v75);
      v9 = v8[36];
      if (v9)
      {
        if ((SBYTE5(v2->flow_in_connected) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v10 = (id)gLogObj;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_instance_update_available_paths";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = (char *)v8 + 407;
            *(_WORD *)&buf[22] = 2080;
            v78 = " ";
            _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sInterface options:", buf, 0x20u);
          }

          v9 = v8[36];
        }
        v73[0] = v7;
        v73[1] = 3221225472;
        v73[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_254;
        v73[3] = &unk_1E149BAA0;
        v74 = v8;
        nw_path_enumerate_interface_options(v9, v73);

      }
      v11 = xpc_array_create(0, 0);
      v12 = v8[36];
      if (v12)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2020000000;
        v78 = 0;
        __buf[0] = 0;
        __buf[1] = (uint64_t)__buf;
        __buf[2] = 0x2020000000;
        v72 = 1;
        v69[0] = 0;
        v69[1] = v69;
        v69[2] = 0x2020000000;
        v70 = 0;
        v13 = v12;
        v14 = v13[3];

        v15 = v8[36];
        v62[0] = v7;
        v62[1] = 3221225472;
        v62[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_256;
        v62[3] = &unk_1E149BAC8;
        v63 = v8;
        v64 = v14;
        v65 = v11;
        v66 = __buf;
        v67 = buf;
        v68 = v69;
        v16 = v14;
        nw_path_enumerate_interface_options_with_details(v15, v62);

        _Block_object_dispose(v69, 8);
        _Block_object_dispose(__buf, 8);
        _Block_object_dispose(buf, 8);
      }
      v17 = xpc_array_create(0, 0);
      if (v8[36])
      {
        v18 = (char *)v2->flow_registration;
        v59[0] = v7;
        v59[1] = 3221225472;
        v59[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_259;
        v59[3] = &unk_1E149B8F0;
        v60 = v8;
        v61 = v17;
        nw_hash_table_apply(v18, (uint64_t)v59);

      }
      if (v4)
        ((void (*)(void **, uint64_t, uint64_t, BOOL))v2->parent_definition->extended_state->var26)(v8, v4, 3, v4 == (_QWORD)v8[39]);
      applier[0] = v7;
      applier[1] = 3221225472;
      applier[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_260;
      applier[3] = &unk_1E149BB18;
      v58 = v4;
      v19 = v8;
      v57 = v19;
      xpc_array_apply(v11, applier);
      v54[0] = v7;
      v54[1] = 3221225472;
      v54[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_2_261;
      v54[3] = &unk_1E14AC908;
      v20 = v19;
      v55 = v20;
      xpc_array_apply(v17, v54);
      should_fallback = nw_path_should_fallback(v8[36], 1);
      is_weak = nw_path_fallback_is_weak(v8[36]);
      v23 = is_weak;
      v24 = BYTE5(v2->flow_in_connected);
      if (should_fallback == ((v24 & 0x10) == 0) || ((is_weak ^ ((v24 & 0x20) == 0)) & 1) == 0)
      {
        if (should_fallback)
          v25 = 16;
        else
          v25 = 0;
        v26 = v24 & 0xCF;
        if ((_DWORD)is_weak)
          v27 = 32;
        else
          v27 = 0;
        BYTE5(v2->flow_in_connected) = v27 | v25 | v26;
        fallback_interface_index = nw_path_get_fallback_interface_index((uint64_t)v8[36]);
        if (nw_context_copy_implicit_context::onceToken[0] != -1)
          dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
        v29 = (id)nw_context_copy_implicit_context::implicit_context;
        v30 = nw_path_copy_interface_with_generation(v29, fallback_interface_index, 0);

        if (v30)
        {
          var27 = (void (*)(void **, NWConcrete_nw_interface *, _BOOL8, uint64_t))v2->parent_definition->extended_state->var27;
          if (var27)
            var27(v20, v30, should_fallback, v23);
        }

      }
      goto LABEL_39;
    }
    v2->flow_registration = 0;
    __nwlog_obj();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_instance_update_available_paths";
    v41 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__buf[0]) = 16;
    LOBYTE(v69[0]) = 0;
    if (!__nwlog_fault(v41, __buf, v69))
      goto LABEL_68;
    if (LOBYTE(__buf[0]) == 17)
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v43 = __buf[0];
      if (os_log_type_enabled(v42, __buf[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_update_available_paths";
        _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s nw_hash_table_create_no_lock failed", buf, 0xCu);
      }
    }
    else if (LOBYTE(v69[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v45 = __buf[0];
      v46 = os_log_type_enabled(v42, __buf[0]);
      if (backtrace_string)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_update_available_paths";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v42, v45, "%{public}s nw_hash_table_create_no_lock failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_68;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_update_available_paths";
        _os_log_impl(&dword_182FBE000, v42, v45, "%{public}s nw_hash_table_create_no_lock failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v48 = __buf[0];
      if (os_log_type_enabled(v42, __buf[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_update_available_paths";
        _os_log_impl(&dword_182FBE000, v42, v48, "%{public}s nw_hash_table_create_no_lock failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_68:
    if (v41)
      free(v41);
  }
LABEL_39:

}

void sub_18348DCD0(_Unwind_Exception *a1)
{
  void *v1;
  char v2;
  uint64_t v3;

  if ((v2 & 1) == 0)
    nw::release_if_needed<nw_protocol *>((uint64_t *)(v3 - 176));

  _Unwind_Resume(a1);
}

void nw_protocol_implementation_report_connected(NWConcrete_nw_protocol_instance *a1, nw_protocol *a2, nw_protocol *a3, unint64_t a4)
{
  NWConcrete_nw_protocol_instance *v7;
  NWConcrete_nw_protocol_instance *v8;
  void *handle;
  char v10;
  nw_protocol_callbacks *callbacks;
  void *v12;
  char v13;
  nw_protocol_callbacks *v14;
  nw_protocol_callbacks *v15;
  void (*connected)(nw_protocol *, nw_protocol *);
  NSObject *v17;
  void (*var13)(NWConcrete_nw_protocol_instance *, unint64_t);
  int v19;
  void (*var14)(NWConcrete_nw_protocol_instance *, _QWORD);
  void *v21;
  nw_protocol_identifier *identifier;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  nw_protocol_identifier *v26;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  void *v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  char *v35;
  _BOOL4 v36;
  nw_protocol_identifier *v37;
  char *backtrace_string;
  os_log_type_t v39;
  _BOOL4 v40;
  char *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  nw_protocol_identifier *v47;
  nw_protocol_identifier *v48;
  os_log_type_t v49;
  os_log_type_t v50;
  os_log_type_t v51;
  os_log_type_t v52;
  char v53;
  os_log_type_t type;
  nw_protocol *v55;
  char v56;
  os_log_type_t v57[8];
  char v58;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  nw_protocol_identifier *v62;
  __int16 v63;
  nw_protocol *v64;
  __int16 v65;
  nw_protocol *v66;
  __int16 v67;
  unint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = v7;
  if (!v7)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v60 = "nw_protocol_implementation_report_connected";
    v28 = (char *)_os_log_send_and_compose_impl();

    v57[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v55) = 0;
    if (!__nwlog_fault(v28, v57, &v55))
      goto LABEL_111;
    if (v57[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = v57[0];
      if (os_log_type_enabled(v29, v57[0]))
      {
        *(_DWORD *)buf = 136446210;
        v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)v55)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v39 = v57[0];
      v40 = os_log_type_enabled(v29, v57[0]);
      if (backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          v60 = "nw_protocol_implementation_report_connected";
          v61 = 2082;
          v62 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v39, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_111:
        if (!v28)
          goto LABEL_31;
LABEL_112:
        free(v28);
        goto LABEL_31;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl(&dword_182FBE000, v29, v39, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v49 = v57[0];
      if (os_log_type_enabled(v29, v57[0]))
      {
        *(_DWORD *)buf = 136446210;
        v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl(&dword_182FBE000, v29, v49, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_110:

    goto LABEL_111;
  }
  if (!a2)
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v60 = "nw_protocol_implementation_report_connected";
    v28 = (char *)_os_log_send_and_compose_impl();

    v57[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v55) = 0;
    if (!__nwlog_fault(v28, v57, &v55))
      goto LABEL_111;
    if (v57[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v32 = v57[0];
      if (os_log_type_enabled(v29, v57[0]))
      {
        *(_DWORD *)buf = 136446210;
        v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null protocol", buf, 0xCu);
      }
      goto LABEL_110;
    }
    if (!(_BYTE)v55)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v50 = v57[0];
      if (os_log_type_enabled(v29, v57[0]))
      {
        *(_DWORD *)buf = 136446210;
        v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl(&dword_182FBE000, v29, v50, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_110;
    }
    v41 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    v42 = v57[0];
    v43 = os_log_type_enabled(v29, v57[0]);
    if (!v41)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
      goto LABEL_110;
    }
    if (v43)
    {
      *(_DWORD *)buf = 136446466;
      v60 = "nw_protocol_implementation_report_connected";
      v61 = 2082;
      v62 = (nw_protocol_identifier *)v41;
      _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_79;
  }
  if (!a3)
  {
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v60 = "nw_protocol_implementation_report_connected";
    v28 = (char *)_os_log_send_and_compose_impl();

    v57[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v55) = 0;
    if (!__nwlog_fault(v28, v57, &v55))
      goto LABEL_111;
    if (v57[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v34 = v57[0];
      if (os_log_type_enabled(v29, v57[0]))
      {
        *(_DWORD *)buf = 136446210;
        v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null input_protocol", buf, 0xCu);
      }
      goto LABEL_110;
    }
    if (!(_BYTE)v55)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v51 = v57[0];
      if (os_log_type_enabled(v29, v57[0]))
      {
        *(_DWORD *)buf = 136446210;
        v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl(&dword_182FBE000, v29, v51, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_110;
    }
    v41 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    v44 = v57[0];
    v45 = os_log_type_enabled(v29, v57[0]);
    if (!v41)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl(&dword_182FBE000, v29, v44, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
      }
      goto LABEL_110;
    }
    if (v45)
    {
      *(_DWORD *)buf = 136446466;
      v60 = "nw_protocol_implementation_report_connected";
      v61 = 2082;
      v62 = (nw_protocol_identifier *)v41;
      _os_log_impl(&dword_182FBE000, v29, v44, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_79:

    free(v41);
    if (!v28)
      goto LABEL_31;
    goto LABEL_112;
  }
  v7->preferred_ipv6_address = (OS_nw_endpoint *)a4;
  handle = a3->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    callbacks = a3[1].callbacks;
    if (callbacks)
      a3[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    v10 = -1;
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)v57 = a3;
  v58 = v10;
  v12 = a2->handle;
  if (v12 == &nw_protocol_ref_counted_handle)
  {
    v14 = a2[1].callbacks;
    if (v14)
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v14->add_input_handler + 1);
    v13 = -1;
  }
  else
  {
    v13 = 0;
  }
  v55 = a2;
  v56 = v13;
  v15 = a3->callbacks;
  if (v15)
  {
    connected = (void (*)(nw_protocol *, nw_protocol *))v15->connected;
    if (connected)
    {
      connected(a3, a2);
      goto LABEL_17;
    }
  }
  __nwlog_obj();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  identifier = a3->identifier;
  *(_DWORD *)buf = 136446722;
  v60 = "__nw_protocol_connected";
  if (!identifier)
    identifier = (nw_protocol_identifier *)"invalid";
  v61 = 2082;
  v62 = identifier;
  v63 = 2048;
  v64 = a3;
  v23 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v53 = 0;
  if (__nwlog_fault(v23, &type, &v53))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        v26 = a3->identifier;
        if (!v26)
          v26 = (nw_protocol_identifier *)"invalid";
        *(_DWORD *)buf = 136446722;
        v60 = "__nw_protocol_connected";
        v61 = 2082;
        v62 = v26;
        v63 = 2048;
        v64 = a3;
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s protocol %{public}s (%p) has invalid connected callback", buf, 0x20u);
      }
    }
    else if (v53)
    {
      v35 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v52 = type;
      v36 = os_log_type_enabled(v24, type);
      if (v35)
      {
        if (v36)
        {
          v37 = a3->identifier;
          if (!v37)
            v37 = (nw_protocol_identifier *)"invalid";
          *(_DWORD *)buf = 136446978;
          v60 = "__nw_protocol_connected";
          v61 = 2082;
          v62 = v37;
          v63 = 2048;
          v64 = a3;
          v65 = 2082;
          v66 = (nw_protocol *)v35;
          _os_log_impl(&dword_182FBE000, v24, v52, "%{public}s protocol %{public}s (%p) has invalid connected callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v35);
        goto LABEL_91;
      }
      if (v36)
      {
        v48 = a3->identifier;
        if (!v48)
          v48 = (nw_protocol_identifier *)"invalid";
        *(_DWORD *)buf = 136446722;
        v60 = "__nw_protocol_connected";
        v61 = 2082;
        v62 = v48;
        v63 = 2048;
        v64 = a3;
        _os_log_impl(&dword_182FBE000, v24, v52, "%{public}s protocol %{public}s (%p) has invalid connected callback, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v24, type))
      {
        v47 = a3->identifier;
        if (!v47)
          v47 = (nw_protocol_identifier *)"invalid";
        *(_DWORD *)buf = 136446722;
        v60 = "__nw_protocol_connected";
        v61 = 2082;
        v62 = v47;
        v63 = 2048;
        v64 = a3;
        _os_log_impl(&dword_182FBE000, v24, v46, "%{public}s protocol %{public}s (%p) has invalid connected callback, backtrace limit exceeded", buf, 0x20u);
      }
    }

  }
LABEL_91:
  if (v23)
    free(v23);
LABEL_17:
  if (v12 == &nw_protocol_ref_counted_handle)
  {
    nw::release_if_needed<nw_protocol *>((uint64_t *)&v55);
    if (handle != &nw_protocol_ref_counted_handle)
      goto LABEL_19;
  }
  else if (handle != &nw_protocol_ref_counted_handle)
  {
    goto LABEL_19;
  }
  nw::release_if_needed<nw_protocol *>((uint64_t *)v57);
LABEL_19:
  v8->preferred_ipv6_address = 0;
  if (a4 >= 0xFFFFFFFFFFFFFFFELL && (SBYTE5(v8->flow_in_connected) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136447234;
      v60 = "nw_protocol_implementation_report_connected";
      v61 = 2082;
      v62 = (nw_protocol_identifier *)((char *)&v8->flow_in_connected + 7);
      v63 = 2080;
      v64 = (nw_protocol *)" ";
      v65 = 2048;
      v66 = a2;
      v67 = 2048;
      v68 = a4;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sReporting connected with protocol: %p, flow: %llx", buf, 0x34u);
    }

  }
  if (a4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    var13 = (void (*)(NWConcrete_nw_protocol_instance *, unint64_t))v8->parent_definition->extended_state->var13;
    if (var13)
      var13(v8, a4);
  }
  v19 = SBYTE3(v8->flow_in_connected);
  if (v19 < 0)
  {
    BYTE3(v8->flow_in_connected) = v19 & 0x7F;
    var14 = (void (*)(NWConcrete_nw_protocol_instance *, _QWORD))v8->parent_definition->extended_state->var14;
    if (var14)
      var14(v8, 0);
  }
  nw_protocol_implementation_finalize_pending_frames(v8);
LABEL_31:

}

uint64_t ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra;
  uint64_t object;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  BOOL v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  extra = nw_hash_node_get_extra(a2);
  object = nw_hash_node_get_object(a2);
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6 || (*(char *)(v6 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = (const char *)(v8 + 407);
      v10 = v8 == 0;
      if (!v8)
        v9 = "";
      v11 = " ";
      if (v10)
        v11 = "";
      v12 = *(unsigned int *)(extra + 128);
      if (v12 > 3)
        v13 = "unknown";
      else
        v13 = off_1E149BD08[v12];
      v14 = *(_QWORD *)(extra + 16);
      v15 = *(char *)(extra + 136);
      v16 = *(_QWORD *)(extra + 120);
      v18 = 136448002;
      v19 = "nw_protocol_instance_update_available_paths_block_invoke";
      v20 = 2082;
      v21 = v9;
      v22 = 2080;
      v23 = v11;
      v24 = 2048;
      v25 = object;
      v26 = 2080;
      v27 = v13;
      v28 = 2112;
      v29 = v14;
      v30 = 1024;
      v31 = v15;
      v32 = 2112;
      v33 = v16;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s\tPath %lx %s over %@ p:%d (%@)", (uint8_t *)&v18, 0x4Eu);
    }

  }
  return 1;
}

void ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_254(uint64_t a1, void *a2, const unsigned __int8 *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  int is_null;
  const char *v13;
  const char *v14;
  const char *v15;
  int v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  v9 = *(_QWORD *)(a1 + 32);
  if (!v9 || (*(char *)(v9 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(a1 + 32);
      is_null = uuid_is_null(a3);
      v13 = " ";
      v16 = 136447490;
      v17 = "nw_protocol_instance_update_available_paths_block_invoke";
      v18 = 2082;
      v14 = (const char *)(v11 + 407);
      if (!v11)
        v14 = "";
      v19 = v14;
      if (!v11)
        v13 = "";
      v20 = 2080;
      v21 = v13;
      v15 = "channel";
      v22 = 2112;
      v23 = v7;
      v24 = 2112;
      if (is_null)
        v15 = "socket";
      v25 = v8;
      v26 = 2080;
      v27 = v15;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s\t%@ (%@) (%s)", (uint8_t *)&v16, 0x3Eu);
    }

  }
}

void sub_18348EC80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_256(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  BOOL v6;
  void *v7;
  id *v8;
  id v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  int sockfd;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  BOOL v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  BOOL v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  BOOL v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  const char *v70;
  const char *v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  BOOL v75;
  const char *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  void (**v80)(_QWORD);
  const void *v81;
  void *v82;
  char *v83;
  NSObject *v84;
  os_log_type_t v85;
  char *backtrace_string;
  os_log_type_t v87;
  _BOOL4 v88;
  os_log_type_t v89;
  id obj;
  uint64_t __buf;
  _QWORD v92[4];
  id v93;
  id v94;
  id v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint8_t buf[4];
  const char *v108;
  __int16 v109;
  void *v110;
  __int16 v111;
  const char *v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = nw_interface_option_details_copy_remote_endpoint(v3);
  v5 = nw_interface_option_details_copy_interface(v3);
  if (nw_parameters_get_stricter_path_scoping(*(void **)(*(_QWORD *)(a1 + 32) + 48)))
    v6 = v4 == 0;
  else
    v6 = 0;
  obj = v5;
  if (!v6 || (v7 = *(void **)(a1 + 40)) == 0)
  {
LABEL_9:
    v102 = 0;
    v103 = &v102;
    v104 = 0x2020000000;
    v105 = 0;
    v98 = 0;
    v99 = &v98;
    v100 = 0x2020000000;
    v101 = 0;
    v10 = *(char **)(*(_QWORD *)(a1 + 32) + 296);
    v92[0] = MEMORY[0x1E0C809B0];
    v92[1] = 3221225472;
    v92[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_257;
    v92[3] = &unk_1E149C6E8;
    v93 = v5;
    v94 = v4;
    v11 = v3;
    v95 = v11;
    v96 = &v102;
    v97 = &v98;
    nw_hash_table_apply(v10, (uint64_t)v92);
    v12 = v103[3];
    if (!v12)
    {
      __buf = 0;
      arc4random_buf(&__buf, 8uLL);
      v106 = 0;
      v13 = nw_hash_table_add_object(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 296), __buf, &v106);
      if (!v106 || (v14 = v13) == 0)
      {
        v67 = *(_QWORD *)(a1 + 32);
        if (!v67 || (*(char *)(v67 + 405) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v68 = (id)gLogObj;
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            v69 = *(_QWORD *)(a1 + 32);
            v70 = (const char *)(v69 + 407);
            v71 = "";
            if (!v69)
              v70 = "";
            v108 = "nw_protocol_instance_update_available_paths_block_invoke_2";
            v109 = 2082;
            *(_DWORD *)buf = 136446978;
            if (v69)
              v71 = " ";
            v110 = (void *)v70;
            v111 = 2080;
            v112 = v71;
            v113 = 2048;
            v114 = __buf;
            _os_log_impl(&dword_182FBE000, v68, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to add path %lx to paths table", buf, 0x2Au);
          }

        }
        goto LABEL_79;
      }
      *(_OWORD *)(v13 + 32) = 0u;
      v15 = v13 + 32;
      *(_OWORD *)(v13 + 48) = 0u;
      v16 = (uint64_t *)(v13 + 48);
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_OWORD *)(v13 + 128) = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      objc_storeStrong((id *)(v13 + 48), v5);
      nw_interface_option_details_get_nexus_agent(v11, (_OWORD *)(v14 + 32));
      objc_storeStrong((id *)(v14 + 152), v4);
      *(_BYTE *)(v14 + 168) = nw_interface_option_details_get_priority(v11);
      v17 = nw_interface_option_details_copy_local_cid(v11);
      v18 = *(void **)(v14 + 96);
      *(_QWORD *)(v14 + 96) = v17;

      v19 = nw_interface_option_details_copy_remote_cid(v11);
      v20 = *(void **)(v14 + 104);
      *(_QWORD *)(v14 + 104) = v19;

      v21 = nw_interface_option_details_copy_initial_data(v11);
      v22 = *(void **)(v14 + 112);
      *(_QWORD *)(v14 + 112) = v21;

      v23 = nw_interface_option_details_copy_evaluator(v11);
      v24 = *(void **)(v14 + 128);
      *(_QWORD *)(v14 + 128) = v23;

      sockfd = nw_interface_option_details_get_sockfd(v11);
      *(_QWORD *)(v14 + 136) = 0;
      v26 = v14 + 136;
      *(_BYTE *)(v26 + 33) &= ~8u;
      *(_DWORD *)(v26 + 24) = 1;
      *(_DWORD *)(v26 + 28) = sockfd;
      *(_QWORD *)(v26 + 8) = v26;
      xpc_array_set_uint64(*(xpc_object_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL, __buf);
      v27 = *(_QWORD *)(a1 + 32);
      if (!v27 || (*(char *)(v27 + 405) & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v28 = (id)gLogObj;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          v29 = *(_QWORD *)(a1 + 32);
          v30 = (const char *)(v29 + 407);
          v6 = v29 == 0;
          v31 = " ";
          v32 = *v16;
          if (v6)
          {
            v30 = "";
            v31 = "";
          }
          *(_DWORD *)buf = 136447234;
          v108 = "nw_protocol_instance_update_available_paths_block_invoke";
          v109 = 2082;
          v110 = (void *)v30;
          v111 = 2080;
          v112 = v31;
          v113 = 2048;
          v114 = __buf;
          v115 = 2112;
          v116 = v32;
          _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected path %lx over %@", buf, 0x34u);
        }

      }
      v103[3] = v15;
      v99[3] = __buf;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    {
      v33 = *(_QWORD *)(a1 + 32);
      v34 = *(_QWORD *)(v33 + 312);
      v35 = v99;
      v36 = v99[3];
      if (v34 != v36)
      {
        if (v34)
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v34;
          v36 = v35[3];
          v33 = *(_QWORD *)(a1 + 32);
        }
        *(_QWORD *)(v33 + 312) = v36;
        v37 = *(_QWORD *)(a1 + 32);
        if (!v37 || (*(char *)(v37 + 405) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v38 = (id)gLogObj;
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
          {
            v39 = *(_QWORD *)(a1 + 32);
            v40 = v39 == 0;
            if (v39)
              v41 = (const char *)(v39 + 407);
            else
              v41 = "";
            v42 = " ";
            if (v40)
              v42 = "";
            v43 = v99[3];
            v44 = *(_QWORD *)(v103[3] + 16);
            *(_DWORD *)buf = 136447234;
            v108 = "nw_protocol_instance_update_available_paths_block_invoke";
            v109 = 2082;
            v110 = (void *)v41;
            v111 = 2080;
            v112 = v42;
            v113 = 2048;
            v114 = v43;
            v115 = 2112;
            v116 = v44;
            _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sMarking path %lx as primary path over %@", buf, 0x34u);
          }

        }
        if (v12)
          xpc_array_set_uint64(*(xpc_object_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL, v99[3]);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    }
    else if (v12)
    {
      v45 = v99[3];
      if (v45 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
      {
        v46 = *(_QWORD *)(a1 + 32);
        if (!v46 || (*(char *)(v46 + 405) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v47 = (id)gLogObj;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            v48 = *(_QWORD *)(a1 + 32);
            v49 = v48 == 0;
            if (v48)
              v50 = (const char *)(v48 + 407);
            else
              v50 = "";
            v51 = " ";
            if (v49)
              v51 = "";
            v52 = v99[3];
            v53 = *(_QWORD *)(v103[3] + 16);
            *(_DWORD *)buf = 136447234;
            v108 = "nw_protocol_instance_update_available_paths_block_invoke";
            v109 = 2082;
            v110 = (void *)v50;
            v111 = 2080;
            v112 = v51;
            v113 = 2048;
            v114 = v52;
            v115 = 2112;
            v116 = v53;
            _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPath %lx over %@ is no longer primary", buf, 0x34u);
          }

          v45 = v99[3];
        }
        xpc_array_set_uint64(*(xpc_object_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL, v45);
      }
    }
    v54 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (*(_BYTE *)(v54 + 24) || (v55 = v103[3], *(_DWORD *)(v55 + 128) != 3))
    {
LABEL_79:

      _Block_object_dispose(&v98, 8);
      _Block_object_dispose(&v102, 8);
      goto LABEL_80;
    }
    *(_BYTE *)(v54 + 24) = 1;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 304) = v99[3];
    v56 = *(_QWORD *)(a1 + 32);
    if (v56 && *(char *)(v56 + 405) < 0)
    {
LABEL_63:
      v64 = *(_QWORD *)(v55 + 32);
      v65 = *(_QWORD *)(v56 - 64);
      if (v65 != v64)
      {
        if (v65)
        {
          if (*(_UNKNOWN **)(v65 + 40) == &nw_protocol_ref_counted_handle)
          {
            v78 = *(_QWORD *)(v65 + 88);
            if (v78)
            {
              v79 = v78 - 1;
              *(_QWORD *)(v65 + 88) = v79;
              if (!v79)
              {
                v80 = *(void (***)(_QWORD))(v65 + 64);
                if (v80)
                {
                  *(_QWORD *)(v65 + 64) = 0;
                  v80[2](v80);
                  _Block_release(v80);
                }
                if ((*(_BYTE *)(v65 + 72) & 1) != 0)
                {
                  v81 = *(const void **)(v65 + 64);
                  if (v81)
                    _Block_release(v81);
                }
                free((void *)v65);
              }
            }
          }
        }
        *(_QWORD *)(v56 - 64) = v64;
        if (v64)
        {
          if (*(_UNKNOWN **)(v64 + 40) == &nw_protocol_ref_counted_handle)
          {
            v66 = *(_QWORD *)(v64 + 88);
            if (v66)
              *(_QWORD *)(v64 + 88) = v66 + 1;
          }
        }
      }
      goto LABEL_79;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v57 = (id)gLogObj;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      v58 = *(_QWORD *)(a1 + 32);
      v59 = v58 == 0;
      if (v58)
        v60 = (const char *)(v58 + 407);
      else
        v60 = "";
      v61 = " ";
      if (v59)
        v61 = "";
      v62 = v99[3];
      v63 = *(_QWORD *)(v103[3] + 16);
      *(_DWORD *)buf = 136447234;
      v108 = "nw_protocol_instance_update_available_paths_block_invoke";
      v109 = 2082;
      v110 = (void *)v60;
      v111 = 2080;
      v112 = v61;
      v113 = 2048;
      v114 = v62;
      v115 = 2112;
      v116 = v63;
      _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sMarking path %lx as default path over %@", buf, 0x34u);
    }

    v56 = *(_QWORD *)(a1 + 32);
    if (v56)
    {
      v55 = v103[3];
      goto LABEL_63;
    }
    __nwlog_obj();
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v108 = "__nw_protocol_set_output_handler";
    v83 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__buf) = 16;
    v106 = 0;
    if (__nwlog_fault(v83, &__buf, &v106))
    {
      if (__buf == 17)
      {
        __nwlog_obj();
        v84 = objc_claimAutoreleasedReturnValue();
        v85 = __buf;
        if (os_log_type_enabled(v84, (os_log_type_t)__buf))
        {
          *(_DWORD *)buf = 136446210;
          v108 = "__nw_protocol_set_output_handler";
          _os_log_impl(&dword_182FBE000, v84, v85, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if (v106)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v84 = objc_claimAutoreleasedReturnValue();
        v87 = __buf;
        v88 = os_log_type_enabled(v84, (os_log_type_t)__buf);
        if (backtrace_string)
        {
          if (v88)
          {
            *(_DWORD *)buf = 136446466;
            v108 = "__nw_protocol_set_output_handler";
            v109 = 2082;
            v110 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v84, v87, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_117;
        }
        if (v88)
        {
          *(_DWORD *)buf = 136446210;
          v108 = "__nw_protocol_set_output_handler";
          _os_log_impl(&dword_182FBE000, v84, v87, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v84 = objc_claimAutoreleasedReturnValue();
        v89 = __buf;
        if (os_log_type_enabled(v84, (os_log_type_t)__buf))
        {
          *(_DWORD *)buf = 136446210;
          v108 = "__nw_protocol_set_output_handler";
          _os_log_impl(&dword_182FBE000, v84, v89, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_117:
    if (v83)
      free(v83);
    goto LABEL_79;
  }
  v8 = v7;
  v9 = v8[2];

  if (nw_interface_shallow_compare(v9, v5))
  {

    goto LABEL_9;
  }
  v72 = *(_QWORD *)(a1 + 32);
  if (!v72 || (*(char *)(v72 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v73 = (id)gLogObj;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
    {
      v74 = *(_QWORD *)(a1 + 32);
      v75 = v74 == 0;
      if (v74)
        v76 = (const char *)(v74 + 407);
      else
        v76 = "";
      *(_DWORD *)buf = 136446978;
      v108 = "nw_protocol_instance_update_available_paths_block_invoke";
      v109 = 2082;
      v110 = (void *)v76;
      if (v75)
        v77 = "";
      else
        v77 = " ";
      v111 = 2080;
      v112 = v77;
      v113 = 2112;
      v114 = (uint64_t)v5;
      _os_log_impl(&dword_182FBE000, v73, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSkipping path over %@, doesn't match endpoint interface", buf, 0x2Au);
    }

  }
LABEL_80:

}

void sub_18348F888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_259(uint64_t a1, uint64_t a2)
{
  uint64_t extra;
  _QWORD *v5;
  void *v6;
  uint64_t object;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  BOOL v13;
  const char *v14;
  uint64_t v15;
  _QWORD v17[4];
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  extra = nw_hash_node_get_extra(a2);
  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 0;
  v5 = *(_QWORD **)(a1 + 32);
  v6 = (void *)v5[36];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_2;
  v17[3] = &unk_1E149BAF0;
  v19 = &v21;
  v20 = extra;
  v18 = v5;
  nw_path_enumerate_interface_options_with_details(v6, v17);
  if (!*((_BYTE *)v22 + 24) && (*(_BYTE *)(extra + 137) & 8) == 0)
  {
    object = nw_hash_node_get_object(a2);
    xpc_array_set_uint64(*(xpc_object_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL, object);
    *(_DWORD *)(extra + 128) = 2;
    *(_BYTE *)(extra + 137) |= 8u;
    v8 = *(_QWORD *)(a1 + 32);
    if (!v8 || (*(char *)(v8 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v10 = *(_QWORD *)(a1 + 32);
        v11 = "";
        v12 = *(_QWORD *)(extra + 16);
        v13 = v10 == 0;
        if (v10)
          v14 = (const char *)(v10 + 407);
        else
          v14 = "";
        v15 = *(_QWORD *)(extra + 120);
        if (!v13)
          v11 = " ";
        *(_DWORD *)buf = 136447234;
        v26 = "nw_protocol_instance_update_available_paths_block_invoke";
        v27 = 2082;
        v28 = v14;
        v29 = 2080;
        v30 = v11;
        v31 = 2112;
        v32 = v12;
        v33 = 2112;
        v34 = v15;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRemoving path over %@ (override endpoint %@)", buf, 0x34u);
      }

    }
  }

  _Block_object_dispose(&v21, 8);
  return 1;
}

void sub_18348FAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_260(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t value;

  v4 = a3;
  value = xpc_uint64_get_value(v4);
  if (*(_QWORD *)(a1 + 40) != value)
  {
    nw_hash_table_get_node(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 296), value, 8);
    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 80) + 208))();
  }

  return 1;
}

void sub_18348FBA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_2_261(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t value;
  _BOOL8 node;
  uint64_t v7;

  v4 = a3;
  value = xpc_uint64_get_value(v4);
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 80) + 208))();
  node = nw_hash_table_get_node(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 296), value, 8);
  if (node)
  {
    v7 = node;
    nw_protocol_path_state_dispose(*(void **)(a1 + 32), node + 32);
    nw_hash_table_remove_node(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 296), v7);
  }

  return 1;
}

void sub_18348FC50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_2(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  _BOOL4 is_equal;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  id v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = nw_interface_option_details_copy_interface(v3);
  v5 = nw_interface_option_details_copy_remote_endpoint(v3);
  v6 = a1[4];
  if ((!v6 || (*(char *)(v6 + 405) & 0x80000000) == 0) && gLogDatapath)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v11 = a1[4];
      v12 = "";
      v13 = (const char *)(v11 + 407);
      v14 = a1[6];
      v15 = v11 == 0;
      v16 = *(_QWORD *)(v14 + 16);
      if (v15)
        v13 = "";
      v17 = *(_QWORD *)(v14 + 120);
      if (!v15)
        v12 = " ";
      v18 = 136447746;
      v19 = "nw_protocol_instance_update_available_paths_block_invoke_2";
      v20 = 2082;
      v21 = v13;
      v22 = 2080;
      v23 = v12;
      v24 = 2112;
      v25 = v4;
      v26 = 2112;
      v27 = v16;
      v28 = 2112;
      v29 = v5;
      v30 = 2112;
      v31 = v17;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sComparing interface %@ with %@ and endpoint %@ with %@", (uint8_t *)&v18, 0x48u);
    }

  }
  if (nw_interface_shallow_compare(v4, *(void **)(a1[6] + 16))
    && (!v5 || nw_endpoint_is_equal(v5, *(void **)(a1[6] + 120), 0)))
  {
    v7 = nw_interface_option_details_copy_local_cid(v3);
    if (nw_dispatch_data_is_equal(v7, *(NSObject **)(a1[6] + 64)))
    {
      v8 = nw_interface_option_details_copy_remote_cid(v3);
      is_equal = nw_dispatch_data_is_equal(v8, *(NSObject **)(a1[6] + 72));

      if (is_equal)
        *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    }
    else
    {

    }
  }

}

void sub_18348FE64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_257(uint64_t a1, uint64_t a2)
{
  uint64_t extra;
  NSObject *v5;
  NSObject *v6;
  _BOOL4 is_equal;

  extra = nw_hash_node_get_extra(a2);
  if (nw_interface_shallow_compare(*(void **)(a1 + 32), *(void **)(extra + 16))
    && nw_endpoint_is_equal(*(void **)(a1 + 40), *(void **)(extra + 120), 0))
  {
    v5 = nw_interface_option_details_copy_local_cid(*(void **)(a1 + 48));
    if (nw_dispatch_data_is_equal(v5, *(NSObject **)(extra + 64)))
    {
      v6 = nw_interface_option_details_copy_remote_cid(*(void **)(a1 + 48));
      is_equal = nw_dispatch_data_is_equal(v6, *(NSObject **)(extra + 72));

      if (is_equal)
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = extra;
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = nw_hash_node_get_object(a2);
        nw_interface_option_details_get_nexus_agent(*(void **)(a1 + 48), (_OWORD *)extra);
        return 0;
      }
    }
    else
    {

    }
  }
  return 1;
}

BOOL ___ZL47nw_protocol_implementation_lookup_path_by_frameP31NWConcrete_nw_protocol_instancePU22objcproto11OS_nw_frame8NSObjectPm_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(nw_hash_node_get_extra(a2) + 56);
  v5 = *(_QWORD *)(a1 + 40);
  if (v4 == v5)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return v4 != v5;
}

void nw_protocol_instance_set_flow_is_datagram(void *a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v7;
  char *v8;
  uint64_t node;
  __int16 v10;
  _QWORD *v11;
  uint64_t v12;
  void (*v13)(void);
  void *v14;
  char v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t v20;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  os_log_type_t v34;
  char v35;
  os_log_type_t type[8];
  char v37;
  _BYTE buf[12];
  __int16 v39;
  char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = (char *)v7;
  if (!v7)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_instance_set_flow_is_datagram";
    v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v22, type, &v35))
      goto LABEL_64;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_set_flow_is_datagram";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v28 = type[0];
      v29 = os_log_type_enabled(v23, type[0]);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_set_flow_is_datagram";
          v39 = 2082;
          v40 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_64:
        if (!v22)
          goto LABEL_18;
LABEL_65:
        free(v22);
        goto LABEL_18;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_set_flow_is_datagram";
        _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v33 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_set_flow_is_datagram";
        _os_log_impl(&dword_182FBE000, v23, v33, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_63:

    goto LABEL_64;
  }
  if (a2 != -1)
  {
    node = nw_hash_table_get_node(v7[29], a2, 8);
    if (node)
    {
      if (a3)
        v10 = 2048;
      else
        v10 = 0;
      *(_WORD *)(node + 84) = *(_WORD *)(node + 84) & 0xF7FF | v10;
      *(_DWORD *)(node + 76) = a4;
      if (a3)
      {
        if (*(_DWORD *)(*((_QWORD *)v8 + 1) + 64) == 3)
        {
          v11 = *(_QWORD **)(node + 16);
          if (v11)
          {
            v12 = v11[3];
            if (v12)
            {
              v13 = *(void (**)(void))(v12 + 160);
              if (v13)
              {
                v14 = (void *)v11[5];
                if (v14 == &nw_protocol_ref_counted_handle)
                {
                  v17 = v11[11];
                  if (v17)
                    v11[11] = v17 + 1;
                  v15 = -1;
                }
                else
                {
                  v15 = 0;
                }
                *(_QWORD *)buf = v11;
                buf[8] = v15;
                v18 = (void *)*((_QWORD *)v8 - 7);
                if (v18 == &nw_protocol_ref_counted_handle)
                {
                  v20 = *((_QWORD *)v8 - 1);
                  if (v20)
                    *((_QWORD *)v8 - 1) = v20 + 1;
                  v19 = -1;
                }
                else
                {
                  v19 = 0;
                }
                *(_QWORD *)type = v8 - 96;
                v37 = v19;
                v13();
                if (v18 == &nw_protocol_ref_counted_handle)
                  nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                if (v14 == &nw_protocol_ref_counted_handle)
                  nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
              }
            }
          }
        }
      }
    }
    else if ((v8[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_set_flow_is_datagram";
        v39 = 2082;
        v40 = v8 + 407;
        v41 = 2080;
        v42 = " ";
        v43 = 2048;
        v44 = a2;
        _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot set datagram, flow %llx does not exist", buf, 0x2Au);
      }

    }
    goto LABEL_18;
  }
  __nwlog_obj();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_instance_set_flow_is_datagram";
  v22 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (!__nwlog_fault(v22, type, &v35))
    goto LABEL_64;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v26 = type[0];
    if (os_log_type_enabled(v23, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_instance_set_flow_is_datagram";
      _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s called with null (flow != NW_PROTOCOL_ALL_FLOWS)", buf, 0xCu);
    }
    goto LABEL_63;
  }
  if (!v35)
  {
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v34 = type[0];
    if (os_log_type_enabled(v23, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_instance_set_flow_is_datagram";
      _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s called with null (flow != NW_PROTOCOL_ALL_FLOWS), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_63;
  }
  v30 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v23 = objc_claimAutoreleasedReturnValue();
  v31 = type[0];
  v32 = os_log_type_enabled(v23, type[0]);
  if (!v30)
  {
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_instance_set_flow_is_datagram";
      _os_log_impl(&dword_182FBE000, v23, v31, "%{public}s called with null (flow != NW_PROTOCOL_ALL_FLOWS), no backtrace", buf, 0xCu);
    }
    goto LABEL_63;
  }
  if (v32)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_instance_set_flow_is_datagram";
    v39 = 2082;
    v40 = v30;
    _os_log_impl(&dword_182FBE000, v23, v31, "%{public}s called with null (flow != NW_PROTOCOL_ALL_FLOWS), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v30);
  if (v22)
    goto LABEL_65;
LABEL_18:

}

uint64_t __nw_protocol_instance_update_outbound_data_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t extra;
  __int16 v6;
  uint64_t v7;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  extra = nw_hash_node_get_extra(a2);
  if (gLogDatapath)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_DWORD *)(extra + 40);
      v11 = *(_DWORD *)(a1 + 48);
      v12 = *(_QWORD *)(a1 + 40);
      v13 = 136446978;
      v14 = "nw_protocol_instance_update_outbound_data_limit_block_invoke";
      v15 = 1024;
      v16 = v10;
      v17 = 1024;
      v18 = v11;
      v19 = 2048;
      v20 = v12;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s Increase current outbound limit %u to %u bytes for flow %llx", (uint8_t *)&v13, 0x22u);
    }

  }
  *(_DWORD *)(extra + 40) = *(_DWORD *)(a1 + 48);
  v6 = *(_WORD *)(extra + 52);
  if ((v6 & 0x80) != 0 && (*(_WORD *)(extra + 52) & 0x100) == 0)
  {
    if (*(_DWORD *)(a1 + 48))
    {
      if (object)
      {
        v7 = *(_QWORD *)(object + 24);
        if (v7)
        {
          if (*(_QWORD *)(a1 + 32) && *(_QWORD *)(v7 + 72))
          {
            *(_WORD *)(extra + 52) = v6 | 0x100;
            *(_BYTE *)(*(_QWORD *)(a1 + 32) + 405) |= 1u;
          }
        }
      }
    }
  }
  return 1;
}

_DWORD *nw_protocol_custom_mapping_get_key(unsigned int *a1, unsigned int *a2)
{
  _DWORD *result;
  unsigned int v3;

  v3 = *a1;
  result = a1 + 1;
  *a2 = v3;
  return result;
}

uint64_t nw_protocol_custom_mapping_key_hash(uint8x8_t *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int32x4_t v5;
  int32x4_t v6;
  uint8x8_t *v7;
  uint64_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  uint8x16_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint64_t v20;
  int32x4_t v21;
  int32x4_t v22;
  uint64_t v23;
  uint8x8_t *v24;
  uint8x8_t v25;
  uint16x8_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;

  if (!a2)
    return 0;
  if (a2 > 7)
  {
    if (a2 >= 0x20)
    {
      v5 = 0uLL;
      v2 = a2 & 0xFFFFFFE0;
      v6 = 0uLL;
      v7 = a1 + 2;
      v8 = v2;
      v9 = 0uLL;
      v10 = 0uLL;
      v11 = 0uLL;
      v12 = 0uLL;
      v13 = 0uLL;
      v14 = 0uLL;
      do
      {
        v15 = *(uint8x16_t *)v7[-2].i8;
        v16 = vmovl_u8(*(uint8x8_t *)v15.i8);
        v17 = vmovl_high_u8(v15);
        v18 = vmovl_u8(*v7);
        v19 = vmovl_high_u8(*(uint8x16_t *)v7->i8);
        v10 = (int32x4_t)vaddw_high_u16((uint32x4_t)v10, v17);
        v9 = (int32x4_t)vaddw_u16((uint32x4_t)v9, *(uint16x4_t *)v17.i8);
        v6 = (int32x4_t)vaddw_high_u16((uint32x4_t)v6, v16);
        v5 = (int32x4_t)vaddw_u16((uint32x4_t)v5, *(uint16x4_t *)v16.i8);
        v14 = (int32x4_t)vaddw_high_u16((uint32x4_t)v14, v19);
        v13 = (int32x4_t)vaddw_u16((uint32x4_t)v13, *(uint16x4_t *)v19.i8);
        v12 = (int32x4_t)vaddw_high_u16((uint32x4_t)v12, v18);
        v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v18.i8);
        v7 += 4;
        v8 -= 32;
      }
      while (v8);
      v3 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v11, v5), vaddq_s32(v13, v9)), vaddq_s32(vaddq_s32(v12, v6), vaddq_s32(v14, v10))));
      if (v2 == a2)
        return v3;
      if ((a2 & 0x18) == 0)
        goto LABEL_14;
    }
    else
    {
      LODWORD(v3) = 0;
      v2 = 0;
    }
    v20 = v2;
    v2 = a2 & 0xFFFFFFF8;
    v21 = 0uLL;
    v22 = (int32x4_t)v3;
    v23 = v20 - v2;
    v24 = (uint8x8_t *)((char *)a1 + v20);
    do
    {
      v25 = *v24++;
      v26 = vmovl_u8(v25);
      v21 = (int32x4_t)vaddw_high_u16((uint32x4_t)v21, v26);
      v22 = (int32x4_t)vaddw_u16((uint32x4_t)v22, *(uint16x4_t *)v26.i8);
      v23 += 8;
    }
    while (v23);
    v3 = vaddvq_s32(vaddq_s32(v22, v21));
    if (v2 == a2)
      return v3;
    goto LABEL_14;
  }
  v2 = 0;
  LODWORD(v3) = 0;
LABEL_14:
  v27 = a2 - v2;
  v28 = (unsigned __int8 *)a1 + v2;
  do
  {
    v29 = *v28++;
    v3 = (v3 + v29);
    --v27;
  }
  while (v27);
  return v3;
}

BOOL nw_protocol_custom_mapping_matches_key(char *a1, unsigned __int8 *a2, unsigned int a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v10;
  _BOOL8 result;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *backtrace_string;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 == a3)
  {
    if (!a3)
      return 1;
    v3 = (unsigned __int8 *)(a1 + 4);
    v4 = a3 - 1;
    do
    {
      v6 = *v3++;
      v5 = v6;
      v8 = *a2++;
      v7 = v8;
      v10 = v4-- != 0;
      result = v5 == v7;
    }
    while (v5 == v7 && v10);
    return result;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_custom_mapping_matches_key";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v13, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_custom_mapping_matches_key";
        v16 = "%{public}s Cannot have custom mapping keys with different lengths";
LABEL_25:
        _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
      }
    }
    else
    {
      if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            v22 = "nw_protocol_custom_mapping_matches_key";
            v23 = 2082;
            v24 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Cannot have custom mapping keys with different lengths, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (!v18)
          goto LABEL_26;
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_custom_mapping_matches_key";
        v16 = "%{public}s Cannot have custom mapping keys with different lengths, no backtrace";
        goto LABEL_25;
      }
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_custom_mapping_matches_key";
        v16 = "%{public}s Cannot have custom mapping keys with different lengths, backtrace limit exceeded";
        goto LABEL_25;
      }
    }
LABEL_26:

  }
LABEL_27:
  if (v13)
    free(v13);
  return 0;
}

void nw_protocol_custom_mapping_release_object(void *a1)
{
  void *v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    free(a1);
    return;
  }
  __nwlog_obj();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v11 = "nw_protocol_custom_mapping_release_object";
  v2 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v3 = objc_claimAutoreleasedReturnValue();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_protocol_custom_mapping_release_object";
        v5 = "%{public}s called with null object";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else
    {
      if (v8)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v3 = objc_claimAutoreleasedReturnValue();
        v4 = type;
        v7 = os_log_type_enabled(v3, type);
        if (backtrace_string)
        {
          if (v7)
          {
            *(_DWORD *)buf = 136446466;
            v11 = "nw_protocol_custom_mapping_release_object";
            v12 = 2082;
            v13 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null object, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v7)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v11 = "nw_protocol_custom_mapping_release_object";
        v5 = "%{public}s called with null object, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v3 = objc_claimAutoreleasedReturnValue();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_protocol_custom_mapping_release_object";
        v5 = "%{public}s called with null object, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v2)
    free(v2);
}

void nw_protocol_instance_enumerate_flow_keys(void *a1, void *a2)
{
  char *v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[4];
  char *v16;
  id v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 30);
    if (v5 && *(_DWORD *)(v5 + 40))
    {
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __nw_protocol_instance_enumerate_flow_keys_block_invoke;
      v15[3] = &unk_1E149B990;
      v16 = v3;
      v17 = v4;
      nw_hash_table_apply((char *)v5, (uint64_t)v15);

    }
    else if ((v3[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v21 = "nw_protocol_instance_enumerate_flow_keys";
        v22 = 2082;
        v23 = v3 + 407;
        v24 = 2080;
        v25 = " ";
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFlow mapping table is empty", buf, 0x20u);
      }

    }
    goto LABEL_9;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_protocol_instance_enumerate_flow_keys";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v8, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_instance_enumerate_flow_keys";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_protocol_instance_enumerate_flow_keys";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_instance_enumerate_flow_keys";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_instance_enumerate_flow_keys";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_26:
  if (v8)
    free(v8);
LABEL_9:

}

uint64_t __nw_protocol_instance_enumerate_flow_keys_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  const char *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  BOOL v14;
  const char *v15;
  const char *v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  uint64_t v20;
  BOOL v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  BOOL v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  BOOL v30;
  const char *v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (a2)
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 16) + 4, *(_QWORD *)(a2 + 32));
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4 || (*(char *)(v4 + 405) & 0x80000000) == 0)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 32);
    v7 = v6 == 0;
    if (v6)
      v8 = (const char *)(v6 + 407);
    else
      v8 = "";
    *(_DWORD *)buf = 136446722;
    v35 = "nw_protocol_instance_enumerate_flow_keys_block_invoke";
    if (v7)
      v9 = "";
    else
      v9 = " ";
    v36 = 2082;
    v37 = v8;
    v38 = 2080;
    v39 = v9;
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v10, &type, &v32))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        v13 = *(_QWORD *)(a1 + 32);
        v14 = v13 == 0;
        if (v13)
          v15 = (const char *)(v13 + 407);
        else
          v15 = "";
        *(_DWORD *)buf = 136446722;
        if (v14)
          v16 = "";
        else
          v16 = " ";
        v35 = "nw_protocol_instance_enumerate_flow_keys_block_invoke";
        v36 = 2082;
        v37 = v15;
        v38 = 2080;
        v39 = v16;
        v17 = "%{public}s %{public}s%sFound null node when enumerating custom flow mapping table";
LABEL_46:
        _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x20u);
      }
    }
    else
    {
      if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v19 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v19)
          {
            v20 = *(_QWORD *)(a1 + 32);
            v21 = v20 == 0;
            if (v20)
              v22 = (const char *)(v20 + 407);
            else
              v22 = "";
            if (v21)
              v23 = "";
            else
              v23 = " ";
            *(_DWORD *)buf = 136446978;
            v35 = "nw_protocol_instance_enumerate_flow_keys_block_invoke";
            v36 = 2082;
            v37 = v22;
            v38 = 2080;
            v39 = v23;
            v40 = 2082;
            v41 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s %{public}s%sFound null node when enumerating custom flow mapping table, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (!v19)
          goto LABEL_47;
        v28 = *(_QWORD *)(a1 + 32);
        v29 = (const char *)(v28 + 407);
        v30 = v28 == 0;
        v31 = "";
        if (v30)
          v29 = "";
        *(_DWORD *)buf = 136446722;
        if (!v30)
          v31 = " ";
        v35 = "nw_protocol_instance_enumerate_flow_keys_block_invoke";
        v36 = 2082;
        v37 = v29;
        v38 = 2080;
        v39 = v31;
        v17 = "%{public}s %{public}s%sFound null node when enumerating custom flow mapping table, no backtrace";
        goto LABEL_46;
      }
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        v24 = *(_QWORD *)(a1 + 32);
        v25 = v24 == 0;
        if (v24)
          v26 = (const char *)(v24 + 407);
        else
          v26 = "";
        *(_DWORD *)buf = 136446722;
        if (v25)
          v27 = "";
        else
          v27 = " ";
        v35 = "nw_protocol_instance_enumerate_flow_keys_block_invoke";
        v36 = 2082;
        v37 = v26;
        v38 = 2080;
        v39 = v27;
        v17 = "%{public}s %{public}s%sFound null node when enumerating custom flow mapping table, backtrace limit exceeded";
        goto LABEL_46;
      }
    }
LABEL_47:

LABEL_48:
    if (v10)
      free(v10);
  }
  return 1;
}

void nw_protocol_instance_set_link_flow_controlled(void *a1, int a2)
{
  _BYTE *v3;
  _BYTE *v4;
  char v5;
  int v6;
  char v7;
  void (*v8)(_BYTE *, _QWORD, BOOL);
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = v3[403];
    if (a2)
      v6 = 4;
    else
      v6 = 0;
    v3[403] = v5 & 0xFB | v6;
    if ((a2 & 1) == 0 && (v5 & 8) != 0)
    {
      nw_protocol_implementation_output_available((nw_protocol *)(v3 - 96), (nw_protocol *)(v3 - 96));
      v7 = v4[403];
      v4[403] = v7 & 0xF7;
      v6 = v7 & 4;
    }
    v8 = *(void (**)(_BYTE *, _QWORD, BOOL))(*(_QWORD *)(*((_QWORD *)v4 + 1) + 80) + 136);
    if (v8)
      v8(v4, 0, v6 != 0);
    goto LABEL_10;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_protocol_instance_set_link_flow_controlled";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_instance_set_link_flow_controlled";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_protocol_instance_set_link_flow_controlled";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_instance_set_link_flow_controlled";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_instance_set_link_flow_controlled";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_27:
  if (v10)
    free(v10);
LABEL_10:

}

void sub_1834917F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_implementation_output_available(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  nw_protocol **p_output_handler;
  NWConcrete_nw_protocol_instance *v5;
  NWConcrete_nw_protocol_instance *v6;
  NWConcrete_nw_protocol_definition *parent_definition;
  _BOOL4 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(const char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, nw_frame ***);
  char *tqh_last;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, unsigned __int16 *);
  void *v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  void *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  void *v40;
  os_log_type_t v41;
  void *v42;
  os_log_type_t v43;
  char *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  char *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  char *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  os_log_type_t v53;
  _BOOL4 v54;
  void *v55;
  const char *v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  const char *v60;
  void *v61;
  const char *v62;
  const char *v63;
  char *v64;
  NSObject *v65;
  os_log_type_t v66;
  const char *v67;
  void *v68;
  NSObject *v69;
  os_log_type_t v70;
  char *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  const char *v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  char *v78;
  NSObject *v79;
  os_log_type_t v80;
  const char *v81;
  void *v82;
  char *v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  NSObject *v87;
  char *backtrace_string;
  os_log_type_t v89;
  _BOOL4 v90;
  const char *v91;
  os_log_type_t v92;
  os_log_type_t v93;
  os_log_type_t v94;
  os_log_type_t v95;
  os_log_type_t v96;
  _BOOL4 v97;
  void *v98;
  os_log_type_t v99;
  NSObject *v100;
  char *v101;
  os_log_type_t v102;
  _BOOL4 v103;
  const char *v104;
  char *v105;
  os_log_type_t v106;
  _BOOL4 v107;
  os_log_type_t v108;
  const char *v109;
  os_log_type_t v110;
  const char *v111;
  char *v112;
  os_log_type_t v113;
  _BOOL4 v114;
  const char *v115;
  os_log_type_t v116;
  const char *v117;
  os_log_type_t v118;
  const char *v119;
  os_log_type_t v120;
  const char *v121;
  os_log_type_t v122;
  _QWORD v123[4];
  NWConcrete_nw_protocol_instance *v124;
  unint64_t v125;
  char v126;
  os_log_type_t v127;
  os_log_type_t v128[8];
  char v129;
  os_log_type_t type[8];
  char v131;
  uint8_t buf[4];
  const char *v133;
  __int16 v134;
  void *v135;
  __int16 v136;
  const char *v137;
  __int16 v138;
  unint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v5 = p_output_handler;
    v6 = v5;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      parent_definition = v5->parent_definition;
      if (parent_definition)
      {
        if (parent_definition->extended_state)
        {
          v8 = nw_protocol_service_outbound_requests(v5);
          v125 = 0;
          v9 = nw_protocol_implementation_lookup_path_by_protocol(v6, a2, &v125);
          if (v9)
          {
            v10 = *(_BYTE *)(v9 + 137);
            if ((v10 & 1) == 0)
              goto LABEL_37;
            v11 = v9 + 104;
            if (!*(_QWORD *)(v9 + 104))
              goto LABEL_37;
            if ((SBYTE5(v6->flow_in_connected) & 0x80000000) == 0 && gLogDatapath)
            {
              v86 = v9;
              __nwlog_obj();
              v87 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446978;
                v133 = "nw_protocol_implementation_output_available";
                v134 = 2082;
                v135 = (char *)&v6->flow_in_connected + 7;
                v136 = 2080;
                v137 = " ";
                v138 = 2048;
                v139 = v125;
                _os_log_impl(&dword_182FBE000, v87, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing pending outbound frames for %lx", buf, 0x2Au);
              }

              v9 = v86;
              v10 = *(_BYTE *)(v86 + 137);
            }
            *(_BYTE *)(v9 + 137) = v10 & 0xFE;
            v12 = *(const char **)(v9 + 32);
            if (v12)
            {
              v13 = (void *)*((_QWORD *)v12 + 5);
              if (v13 == &nw_protocol_ref_counted_handle)
              {
                v18 = *((_QWORD *)v12 + 11);
                if (v18)
                  *((_QWORD *)v12 + 11) = v18 + 1;
                v14 = -1;
              }
              else
              {
                v14 = 0;
              }
              *(_QWORD *)type = v12;
              v131 = v14;
              v19 = *((_QWORD *)v12 + 3);
              if (v19)
              {
                v20 = *(void (**)(const char *, uint64_t))(v19 + 96);
                if (v20)
                {
                  v20(v12, v11);
                  goto LABEL_28;
                }
              }
              __nwlog_obj();
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              v62 = (const char *)*((_QWORD *)v12 + 2);
              *(_DWORD *)buf = 136446722;
              v133 = "__nw_protocol_finalize_output_frames";
              if (!v62)
                v62 = "invalid";
              v134 = 2082;
              v135 = (void *)v62;
              v136 = 2048;
              v63 = v12;
              v137 = v12;
              v64 = (char *)_os_log_send_and_compose_impl();

              v128[0] = OS_LOG_TYPE_ERROR;
              v127 = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v64, v128, &v127))
              {
                if (v128[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v65 = objc_claimAutoreleasedReturnValue();
                  v66 = v128[0];
                  if (os_log_type_enabled(v65, v128[0]))
                  {
                    v67 = (const char *)*((_QWORD *)v63 + 2);
                    if (!v67)
                      v67 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    v133 = "__nw_protocol_finalize_output_frames";
                    v134 = 2082;
                    v135 = (void *)v67;
                    v136 = 2048;
                    v137 = v63;
                    _os_log_impl(&dword_182FBE000, v65, v66, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback", buf, 0x20u);
                  }
                }
                else if (v127)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v65 = objc_claimAutoreleasedReturnValue();
                  v89 = v128[0];
                  v90 = os_log_type_enabled(v65, v128[0]);
                  if (backtrace_string)
                  {
                    if (v90)
                    {
                      v91 = (const char *)*((_QWORD *)v63 + 2);
                      if (!v91)
                        v91 = "invalid";
                      *(_DWORD *)buf = 136446978;
                      v133 = "__nw_protocol_finalize_output_frames";
                      v134 = 2082;
                      v135 = (void *)v91;
                      v136 = 2048;
                      v137 = v63;
                      v138 = 2082;
                      v139 = (unint64_t)backtrace_string;
                      _os_log_impl(&dword_182FBE000, v65, v89, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }

                    free(backtrace_string);
                    goto LABEL_238;
                  }
                  if (v90)
                  {
                    v117 = (const char *)*((_QWORD *)v63 + 2);
                    if (!v117)
                      v117 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    v133 = "__nw_protocol_finalize_output_frames";
                    v134 = 2082;
                    v135 = (void *)v117;
                    v136 = 2048;
                    v137 = v63;
                    _os_log_impl(&dword_182FBE000, v65, v89, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace", buf, 0x20u);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v65 = objc_claimAutoreleasedReturnValue();
                  v110 = v128[0];
                  if (os_log_type_enabled(v65, v128[0]))
                  {
                    v111 = (const char *)*((_QWORD *)v63 + 2);
                    if (!v111)
                      v111 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    v133 = "__nw_protocol_finalize_output_frames";
                    v134 = 2082;
                    v135 = (void *)v111;
                    v136 = 2048;
                    v137 = v63;
                    _os_log_impl(&dword_182FBE000, v65, v110, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded", buf, 0x20u);
                  }
                }

              }
LABEL_238:
              if (v64)
                free(v64);
LABEL_28:
              if (v13 == &nw_protocol_ref_counted_handle)
                goto LABEL_36;
              goto LABEL_37;
            }
            __nwlog_obj();
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v133 = "__nw_protocol_finalize_output_frames";
            v83 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            v128[0] = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v83, type, v128))
              goto LABEL_271;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v84 = objc_claimAutoreleasedReturnValue();
              v85 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl(&dword_182FBE000, v84, v85, "%{public}s called with null protocol", buf, 0xCu);
              }
            }
            else if (v128[0])
            {
              v105 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v84 = objc_claimAutoreleasedReturnValue();
              v106 = type[0];
              v107 = os_log_type_enabled(v84, type[0]);
              if (v105)
              {
                if (v107)
                {
                  *(_DWORD *)buf = 136446466;
                  v133 = "__nw_protocol_finalize_output_frames";
                  v134 = 2082;
                  v135 = v105;
                  _os_log_impl(&dword_182FBE000, v84, v106, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v105);
LABEL_271:
                if (!v83)
                  goto LABEL_37;
LABEL_272:
                free(v83);
                goto LABEL_37;
              }
              if (v107)
              {
                *(_DWORD *)buf = 136446210;
                v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl(&dword_182FBE000, v84, v106, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v84 = objc_claimAutoreleasedReturnValue();
              v120 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl(&dword_182FBE000, v84, v120, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }
LABEL_270:

            goto LABEL_271;
          }
          v15 = BYTE5(v6->flow_in_connected);
          if ((v15 & 2) == 0 || !v6->pending_inbound_frames.tqh_last)
            goto LABEL_37;
          if ((v6->flow_in_connected & 0x800000000000) == 0 && gLogDatapath)
          {
            __nwlog_obj();
            v100 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446722;
              v133 = "nw_protocol_implementation_output_available";
              v134 = 2082;
              v135 = (char *)&v6->flow_in_connected + 7;
              v136 = 2080;
              v137 = " ";
              _os_log_impl(&dword_182FBE000, v100, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing pending outbound frames", buf, 0x20u);
            }

            v15 = BYTE5(v6->flow_in_connected);
          }
          BYTE5(v6->flow_in_connected) = v15 & 0xFD;
          v16 = *(_QWORD *)&v6[-1].log_str[25];
          if (!v16)
          {
            __nwlog_obj();
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v133 = "__nw_protocol_finalize_output_frames";
            v83 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            v128[0] = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v83, type, v128))
              goto LABEL_271;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v84 = objc_claimAutoreleasedReturnValue();
              v99 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl(&dword_182FBE000, v84, v99, "%{public}s called with null protocol", buf, 0xCu);
              }
            }
            else if (v128[0])
            {
              v112 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v84 = objc_claimAutoreleasedReturnValue();
              v113 = type[0];
              v114 = os_log_type_enabled(v84, type[0]);
              if (v112)
              {
                if (v114)
                {
                  *(_DWORD *)buf = 136446466;
                  v133 = "__nw_protocol_finalize_output_frames";
                  v134 = 2082;
                  v135 = v112;
                  _os_log_impl(&dword_182FBE000, v84, v113, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v112);
                if (!v83)
                  goto LABEL_37;
                goto LABEL_272;
              }
              if (v114)
              {
                *(_DWORD *)buf = 136446210;
                v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl(&dword_182FBE000, v84, v113, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v84 = objc_claimAutoreleasedReturnValue();
              v122 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl(&dword_182FBE000, v84, v122, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }
            goto LABEL_270;
          }
          if (*(_UNKNOWN **)(v16 + 40) == &nw_protocol_ref_counted_handle)
          {
            v21 = *(_QWORD *)(v16 + 88);
            if (v21)
              *(_QWORD *)(v16 + 88) = v21 + 1;
            v17 = -1;
          }
          else
          {
            v17 = 0;
          }
          *(_QWORD *)type = v16;
          v131 = v17;
          v22 = *(_QWORD *)(v16 + 24);
          if (v22)
          {
            v23 = *(void (**)(uint64_t, nw_frame ***))(v22 + 96);
            if (v23)
            {
              v23(v16, &v6->pending_inbound_frames.tqh_last);
              if ((v131 & 1) != 0)
LABEL_36:
                nw::release_if_needed<nw_protocol *>((uint64_t *)type);
LABEL_37:
              if (!v8)
              {
LABEL_58:

                return;
              }
              if (v6->parent_definition->variant == 3)
              {
                tqh_last = (char *)v6->pending_outbound_frames.tqh_last;
                v123[0] = MEMORY[0x1E0C809B0];
                v123[1] = 3221225472;
                v123[2] = ___ZL43nw_protocol_implementation_output_availableP11nw_protocolS0__block_invoke;
                v123[3] = &unk_1E14AC340;
                v124 = v6;
                nw_hash_table_apply(tqh_last, (uint64_t)v123);

                goto LABEL_58;
              }
              v25 = *(_QWORD *)&v6[-1].log_str[41];
              if (v25)
              {
                if (*(_UNKNOWN **)(v25 + 40) == &nw_protocol_ref_counted_handle)
                {
                  v27 = *(_QWORD *)(v25 + 88);
                  if (v27)
                    *(_QWORD *)(v25 + 88) = v27 + 1;
                  *(_QWORD *)type = v25;
                  v26 = v131 | 1;
                }
                else
                {
                  *(_QWORD *)type = *(_QWORD *)&v6[-1].log_str[41];
                  v26 = v131 & 0xFE;
                }
                v131 = v26;
                if (*(_UNKNOWN **)&v6[-1].log_str[33] == &nw_protocol_ref_counted_handle)
                {
                  v29 = *(_QWORD *)&v6[-1].log_str[81];
                  if (v29)
                    *(_QWORD *)&v6[-1].log_str[81] = v29 + 1;
                  *(_QWORD *)v128 = (char *)v6 - 96;
                  v28 = v129 | 1;
                }
                else
                {
                  *(_QWORD *)v128 = (char *)v6 - 96;
                  v28 = v129 & 0xFE;
                }
                v129 = v28;
                v30 = *(_QWORD *)(v25 + 24);
                if (v30)
                {
                  v31 = *(void (**)(uint64_t, unsigned __int16 *))(v30 + 72);
                  if (v31)
                  {
                    v31(v25, &v6[-1].paths_log_id_num);
                    v28 = v129;
LABEL_54:
                    if ((v28 & 1) != 0)
                      nw::release_if_needed<nw_protocol *>((uint64_t *)v128);
                    if ((v131 & 1) != 0)
                      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                    goto LABEL_58;
                  }
                }
                __nwlog_obj();
                v55 = (void *)objc_claimAutoreleasedReturnValue();
                v56 = *(const char **)(v25 + 16);
                *(_DWORD *)buf = 136446722;
                v133 = "__nw_protocol_output_available";
                if (!v56)
                  v56 = "invalid";
                v134 = 2082;
                v135 = (void *)v56;
                v136 = 2048;
                v137 = (const char *)v25;
                v57 = (char *)_os_log_send_and_compose_impl();

                v127 = OS_LOG_TYPE_ERROR;
                v126 = 0;
                if (__nwlog_fault(v57, &v127, &v126))
                {
                  if (v127 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v58 = objc_claimAutoreleasedReturnValue();
                    v59 = v127;
                    if (os_log_type_enabled(v58, v127))
                    {
                      v60 = *(const char **)(v25 + 16);
                      if (!v60)
                        v60 = "invalid";
                      *(_DWORD *)buf = 136446722;
                      v133 = "__nw_protocol_output_available";
                      v134 = 2082;
                      v135 = (void *)v60;
                      v136 = 2048;
                      v137 = (const char *)v25;
                      _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s protocol %{public}s (%p) has invalid output_available callback", buf, 0x20u);
                    }
                  }
                  else if (v126)
                  {
                    v71 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v58 = objc_claimAutoreleasedReturnValue();
                    v72 = v127;
                    v73 = os_log_type_enabled(v58, v127);
                    if (v71)
                    {
                      if (v73)
                      {
                        v74 = *(const char **)(v25 + 16);
                        if (!v74)
                          v74 = "invalid";
                        *(_DWORD *)buf = 136446978;
                        v133 = "__nw_protocol_output_available";
                        v134 = 2082;
                        v135 = (void *)v74;
                        v136 = 2048;
                        v137 = (const char *)v25;
                        v138 = 2082;
                        v139 = (unint64_t)v71;
                        _os_log_impl(&dword_182FBE000, v58, v72, "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
                      }

                      free(v71);
                      goto LABEL_228;
                    }
                    if (v73)
                    {
                      v115 = *(const char **)(v25 + 16);
                      if (!v115)
                        v115 = "invalid";
                      *(_DWORD *)buf = 136446722;
                      v133 = "__nw_protocol_output_available";
                      v134 = 2082;
                      v135 = (void *)v115;
                      v136 = 2048;
                      v137 = (const char *)v25;
                      _os_log_impl(&dword_182FBE000, v58, v72, "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace", buf, 0x20u);
                    }
                  }
                  else
                  {
                    __nwlog_obj();
                    v58 = objc_claimAutoreleasedReturnValue();
                    v108 = v127;
                    if (os_log_type_enabled(v58, v127))
                    {
                      v109 = *(const char **)(v25 + 16);
                      if (!v109)
                        v109 = "invalid";
                      *(_DWORD *)buf = 136446722;
                      v133 = "__nw_protocol_output_available";
                      v134 = 2082;
                      v135 = (void *)v109;
                      v136 = 2048;
                      v137 = (const char *)v25;
                      _os_log_impl(&dword_182FBE000, v58, v108, "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded", buf, 0x20u);
                    }
                  }

                }
LABEL_228:
                if (v57)
                  free(v57);
                goto LABEL_54;
              }
              __nwlog_obj();
              v68 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446210;
              v133 = "__nw_protocol_output_available";
              v37 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              v128[0] = OS_LOG_TYPE_DEFAULT;
              if (!__nwlog_fault(v37, type, v128))
                goto LABEL_251;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v69 = objc_claimAutoreleasedReturnValue();
                v70 = type[0];
                if (os_log_type_enabled(v69, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v133 = "__nw_protocol_output_available";
                  _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s called with null protocol", buf, 0xCu);
                }
LABEL_250:

                goto LABEL_251;
              }
              if (v128[0] == OS_LOG_TYPE_DEFAULT)
              {
                __nwlog_obj();
                v69 = objc_claimAutoreleasedReturnValue();
                v116 = type[0];
                if (os_log_type_enabled(v69, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v133 = "__nw_protocol_output_available";
                  _os_log_impl(&dword_182FBE000, v69, v116, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_250;
              }
              v50 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v69 = objc_claimAutoreleasedReturnValue();
              v96 = type[0];
              v97 = os_log_type_enabled(v69, type[0]);
              if (!v50)
              {
                if (v97)
                {
                  *(_DWORD *)buf = 136446210;
                  v133 = "__nw_protocol_output_available";
                  _os_log_impl(&dword_182FBE000, v69, v96, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                }
                goto LABEL_250;
              }
              if (v97)
              {
                *(_DWORD *)buf = 136446466;
                v133 = "__nw_protocol_output_available";
                v134 = 2082;
                v135 = v50;
                _os_log_impl(&dword_182FBE000, v69, v96, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
              }

LABEL_100:
              free(v50);
              if (!v37)
                goto LABEL_58;
              goto LABEL_252;
            }
          }
          __nwlog_obj();
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          v76 = *(const char **)(v16 + 16);
          *(_DWORD *)buf = 136446722;
          v133 = "__nw_protocol_finalize_output_frames";
          if (!v76)
            v76 = "invalid";
          v134 = 2082;
          v135 = (void *)v76;
          v136 = 2048;
          v77 = v16;
          v137 = (const char *)v16;
          v78 = (char *)_os_log_send_and_compose_impl();

          v128[0] = OS_LOG_TYPE_ERROR;
          v127 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v78, v128, &v127))
          {
            if (v128[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v79 = objc_claimAutoreleasedReturnValue();
              v80 = v128[0];
              if (os_log_type_enabled(v79, v128[0]))
              {
                v81 = *(const char **)(v77 + 16);
                if (!v81)
                  v81 = "invalid";
                *(_DWORD *)buf = 136446722;
                v133 = "__nw_protocol_finalize_output_frames";
                v134 = 2082;
                v135 = (void *)v81;
                v136 = 2048;
                v137 = (const char *)v77;
                _os_log_impl(&dword_182FBE000, v79, v80, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback", buf, 0x20u);
              }
LABEL_257:

              goto LABEL_258;
            }
            if (v127 == OS_LOG_TYPE_DEFAULT)
            {
              __nwlog_obj();
              v79 = objc_claimAutoreleasedReturnValue();
              v118 = v128[0];
              if (os_log_type_enabled(v79, v128[0]))
              {
                v119 = *(const char **)(v77 + 16);
                if (!v119)
                  v119 = "invalid";
                *(_DWORD *)buf = 136446722;
                v133 = "__nw_protocol_finalize_output_frames";
                v134 = 2082;
                v135 = (void *)v119;
                v136 = 2048;
                v137 = (const char *)v77;
                _os_log_impl(&dword_182FBE000, v79, v118, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded", buf, 0x20u);
              }
              goto LABEL_257;
            }
            v101 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v79 = objc_claimAutoreleasedReturnValue();
            v102 = v128[0];
            v103 = os_log_type_enabled(v79, v128[0]);
            if (!v101)
            {
              if (v103)
              {
                v121 = *(const char **)(v77 + 16);
                if (!v121)
                  v121 = "invalid";
                *(_DWORD *)buf = 136446722;
                v133 = "__nw_protocol_finalize_output_frames";
                v134 = 2082;
                v135 = (void *)v121;
                v136 = 2048;
                v137 = (const char *)v77;
                _os_log_impl(&dword_182FBE000, v79, v102, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace", buf, 0x20u);
              }
              goto LABEL_257;
            }
            if (v103)
            {
              v104 = *(const char **)(v77 + 16);
              if (!v104)
                v104 = "invalid";
              *(_DWORD *)buf = 136446978;
              v133 = "__nw_protocol_finalize_output_frames";
              v134 = 2082;
              v135 = (void *)v104;
              v136 = 2048;
              v137 = (const char *)v77;
              v138 = 2082;
              v139 = (unint64_t)v101;
              _os_log_impl(&dword_182FBE000, v79, v102, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v101);
          }
LABEL_258:
          if (v78)
            free(v78);
          if ((v17 & 1) == 0)
            goto LABEL_37;
          goto LABEL_36;
        }
        __nwlog_obj();
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v133 = "nw_protocol_implementation_output_available";
        v37 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v128[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v37, type, v128))
          goto LABEL_251;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          v43 = type[0];
          if (os_log_type_enabled(v38, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v133 = "nw_protocol_implementation_output_available";
            _os_log_impl(&dword_182FBE000, v38, v43, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_191;
        }
        if (v128[0] == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          v95 = type[0];
          if (os_log_type_enabled(v38, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v133 = "nw_protocol_implementation_output_available";
            _os_log_impl(&dword_182FBE000, v38, v95, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_191;
        }
        v50 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v38 = objc_claimAutoreleasedReturnValue();
        v53 = type[0];
        v54 = os_log_type_enabled(v38, type[0]);
        if (!v50)
        {
          if (v54)
          {
            *(_DWORD *)buf = 136446210;
            v133 = "nw_protocol_implementation_output_available";
            _os_log_impl(&dword_182FBE000, v38, v53, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_191;
        }
        if (v54)
        {
          *(_DWORD *)buf = 136446466;
          v133 = "nw_protocol_implementation_output_available";
          v134 = 2082;
          v135 = v50;
          _os_log_impl(&dword_182FBE000, v38, v53, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v133 = "nw_protocol_implementation_output_available";
        v37 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v128[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v37, type, v128))
          goto LABEL_251;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          v41 = type[0];
          if (os_log_type_enabled(v38, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v133 = "nw_protocol_implementation_output_available";
            _os_log_impl(&dword_182FBE000, v38, v41, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_191;
        }
        if (v128[0] == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          v94 = type[0];
          if (os_log_type_enabled(v38, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v133 = "nw_protocol_implementation_output_available";
            _os_log_impl(&dword_182FBE000, v38, v94, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_191;
        }
        v50 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v38 = objc_claimAutoreleasedReturnValue();
        v51 = type[0];
        v52 = os_log_type_enabled(v38, type[0]);
        if (!v50)
        {
          if (v52)
          {
            *(_DWORD *)buf = 136446210;
            v133 = "nw_protocol_implementation_output_available";
            _os_log_impl(&dword_182FBE000, v38, v51, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_191;
        }
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          v133 = "nw_protocol_implementation_output_available";
          v134 = 2082;
          v135 = v50;
          _os_log_impl(&dword_182FBE000, v38, v51, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      goto LABEL_100;
    }
    __nwlog_obj();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v133 = "nw_protocol_implementation_output_available";
    v37 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v128[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v37, type, v128))
      goto LABEL_251;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v39 = type[0];
      if (os_log_type_enabled(v38, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_protocol_implementation_output_available";
        _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v128[0])
    {
      v47 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v48 = type[0];
      v49 = os_log_type_enabled(v38, type[0]);
      if (v47)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          v133 = "nw_protocol_implementation_output_available";
          v134 = 2082;
          v135 = v47;
          _os_log_impl(&dword_182FBE000, v38, v48, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v47);
LABEL_251:
        if (!v37)
          goto LABEL_58;
LABEL_252:
        free(v37);
        goto LABEL_58;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_protocol_implementation_output_available";
        _os_log_impl(&dword_182FBE000, v38, v48, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v93 = type[0];
      if (os_log_type_enabled(v38, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_protocol_implementation_output_available";
        _os_log_impl(&dword_182FBE000, v38, v93, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_191:

    goto LABEL_251;
  }
  __nwlog_obj();
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v133 = "nw_protocol_implementation_output_available";
  v33 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v128[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v33, type, v128))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v35 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_protocol_implementation_output_available";
        _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v128[0])
    {
      v44 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v45 = type[0];
      v46 = os_log_type_enabled(v34, type[0]);
      if (v44)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          v133 = "nw_protocol_implementation_output_available";
          v134 = 2082;
          v135 = v44;
          _os_log_impl(&dword_182FBE000, v34, v45, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v44);
        goto LABEL_176;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_protocol_implementation_output_available";
        _os_log_impl(&dword_182FBE000, v34, v45, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v92 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_protocol_implementation_output_available";
        _os_log_impl(&dword_182FBE000, v34, v92, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_176:
  if (v33)
    free(v33);
}

void sub_1834932C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  if ((a24 & 1) != 0)
    nw::release_if_needed<nw_protocol *>(&a23);

  _Unwind_Resume(a1);
}

BOOL nw_protocol_service_outbound_requests(NWConcrete_nw_protocol_instance *a1)
{
  NWConcrete_nw_protocol_instance *v1;
  NWConcrete_nw_protocol_instance *v2;
  id *p_tqh_first;
  unsigned __int8 *tqh_first;
  _BOOL8 v5;
  _QWORD v7[4];
  NWConcrete_nw_protocol_instance *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v1 = a1;
  v2 = v1;
  p_tqh_first = (id *)&v1->pending_outbound_frames.tqh_first;
  tqh_first = (unsigned __int8 *)v1->pending_outbound_frames.tqh_first;
  if (tqh_first)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x3032000000;
    v13 = __Block_byref_object_copy__11692;
    v14 = __Block_byref_object_dispose__11693;
    v15 = 0;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___ZL37nw_protocol_service_outbound_requestsP31NWConcrete_nw_protocol_instance_block_invoke;
    v7[3] = &unk_1E14AB5F0;
    v9 = &v10;
    v8 = v1;
    nw_array_apply(tqh_first, (uint64_t)v7);
    objc_storeStrong(p_tqh_first, (id)v11[5]);
    v5 = v11[5] == 0;

    _Block_object_dispose(&v10, 8);
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

uint64_t nw_protocol_implementation_lookup_path_by_protocol(NWConcrete_nw_protocol_instance *a1, nw_protocol *a2, unint64_t *a3)
{
  NWConcrete_nw_protocol_instance *v5;
  NWConcrete_nw_protocol_instance *v6;
  char *flow_registration;
  uint64_t v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _QWORD v18[7];
  char v19;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v22 = 0;
    flow_registration = (char *)v5->flow_registration;
    if (flow_registration)
    {
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = ___ZL50nw_protocol_implementation_lookup_path_by_protocolP31NWConcrete_nw_protocol_instanceP11nw_protocolPm_block_invoke;
      v18[3] = &unk_1E149C6C0;
      v18[4] = buf;
      v18[5] = a2;
      v18[6] = a3;
      nw_hash_table_apply(flow_registration, (uint64_t)v18);
      v8 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    }
    else
    {
      v8 = 0;
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_lookup_path_by_protocol";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v11, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_lookup_path_by_protocol";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_lookup_path_by_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_lookup_path_by_protocol";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_lookup_path_by_protocol";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v11)
    free(v11);
  v8 = 0;
LABEL_6:

  return v8;
}

uint64_t ___ZL43nw_protocol_implementation_output_availableP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *object;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  char v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *);
  void *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  const char *v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  const char *v41;
  const char *v42;
  os_log_type_t v43;
  os_log_type_t v44;
  char v45;
  os_log_type_t v46[8];
  char v47;
  os_log_type_t type;
  os_log_type_t v49[8];
  char v50;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  _QWORD *v56;
  __int16 v57;
  char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  object = (_QWORD *)nw_hash_node_get_object(a2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    v5 = v4 - 96;
  else
    v5 = 0;
  if (object)
  {
    v6 = object;
    v7 = (void *)object[5];
    if (v7 == &nw_protocol_ref_counted_handle)
    {
      v9 = object[11];
      if (v9)
        object[11] = v9 + 1;
      v8 = -1;
    }
    else
    {
      v8 = 0;
    }
    *(_QWORD *)v49 = object;
    v50 = v8;
    if (v4)
    {
      v10 = *(void **)(v5 + 40);
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        v12 = *(_QWORD *)(v5 + 88);
        if (v12)
          *(_QWORD *)(v5 + 88) = v12 + 1;
        v11 = -1;
      }
      else
      {
        v11 = 0;
      }
      *(_QWORD *)v46 = v5;
      v47 = v11;
      v13 = object[3];
      if (v13)
      {
        v14 = *(void (**)(_QWORD *))(v13 + 72);
        if (v14)
        {
          v14(object);
LABEL_19:
          if (v10 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)v46);
LABEL_21:
          if (v7 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)v49);
          return 1;
        }
      }
      __nwlog_obj();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (const char *)v6[2];
      *(_DWORD *)buf = 136446722;
      v52 = "__nw_protocol_output_available";
      if (!v17)
        v17 = "invalid";
      v53 = 2082;
      v54 = (void *)v17;
      v55 = 2048;
      v56 = v6;
      v18 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v45 = 0;
      if (__nwlog_fault(v18, &type, &v45))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            v21 = (const char *)v6[2];
            if (!v21)
              v21 = "invalid";
            *(_DWORD *)buf = 136446722;
            v52 = "__nw_protocol_output_available";
            v53 = 2082;
            v54 = (void *)v21;
            v55 = 2048;
            v56 = v6;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s protocol %{public}s (%p) has invalid output_available callback", buf, 0x20u);
          }
        }
        else if (v45)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v31 = type;
          v32 = os_log_type_enabled(v19, type);
          if (backtrace_string)
          {
            if (v32)
            {
              v33 = (const char *)v6[2];
              if (!v33)
                v33 = "invalid";
              *(_DWORD *)buf = 136446978;
              v52 = "__nw_protocol_output_available";
              v53 = 2082;
              v54 = (void *)v33;
              v55 = 2048;
              v56 = v6;
              v57 = 2082;
              v58 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
            goto LABEL_70;
          }
          if (v32)
          {
            v42 = (const char *)v6[2];
            if (!v42)
              v42 = "invalid";
            *(_DWORD *)buf = 136446722;
            v52 = "__nw_protocol_output_available";
            v53 = 2082;
            v54 = (void *)v42;
            v55 = 2048;
            v56 = v6;
            _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v40 = type;
          if (os_log_type_enabled(v19, type))
          {
            v41 = (const char *)v6[2];
            if (!v41)
              v41 = "invalid";
            *(_DWORD *)buf = 136446722;
            v52 = "__nw_protocol_output_available";
            v53 = 2082;
            v54 = (void *)v41;
            v55 = 2048;
            v56 = v6;
            _os_log_impl(&dword_182FBE000, v19, v40, "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded", buf, 0x20u);
          }
        }

      }
LABEL_70:
      if (v18)
        free(v18);
      goto LABEL_19;
    }
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v52 = "__nw_protocol_output_available";
    v27 = (char *)_os_log_send_and_compose_impl();

    v46[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v27, v46, &type))
    {
      if (v46[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = v46[0];
        if (os_log_type_enabled(v28, v46[0]))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_output_available";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null other_protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        v37 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v38 = v46[0];
        v39 = os_log_type_enabled(v28, v46[0]);
        if (v37)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            v52 = "__nw_protocol_output_available";
            v53 = 2082;
            v54 = v37;
            _os_log_impl(&dword_182FBE000, v28, v38, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v37);
          goto LABEL_86;
        }
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_output_available";
          _os_log_impl(&dword_182FBE000, v28, v38, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v44 = v46[0];
        if (os_log_type_enabled(v28, v46[0]))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_output_available";
          _os_log_impl(&dword_182FBE000, v28, v44, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_86:
    if (v27)
      free(v27);
    goto LABEL_21;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v52 = "__nw_protocol_output_available";
  v23 = (char *)_os_log_send_and_compose_impl();

  v49[0] = OS_LOG_TYPE_ERROR;
  v46[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v49, v46))
  {
    if (v49[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_output_available";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v46[0])
    {
      v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v35 = v49[0];
      v36 = os_log_type_enabled(v24, v49[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v52 = "__nw_protocol_output_available";
          v53 = 2082;
          v54 = v34;
          _os_log_impl(&dword_182FBE000, v24, v35, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        goto LABEL_81;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_output_available";
        _os_log_impl(&dword_182FBE000, v24, v35, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v43 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_output_available";
        _os_log_impl(&dword_182FBE000, v24, v43, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_81:
  if (v23)
    free(v23);
  return 1;
}

void sub_183493F24(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL50nw_protocol_implementation_lookup_path_by_protocolP31NWConcrete_nw_protocol_instanceP11nw_protocolPm_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t extra;
  uint64_t v5;
  uint64_t result;
  uint64_t object;

  extra = nw_hash_node_get_extra(a2);
  v5 = *(_QWORD *)(extra + 32);
  if (!v5)
    return 1;
  while (a1[5] != v5)
  {
    v5 = *(_QWORD *)(v5 + 32);
    if (!v5)
      return 1;
  }
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = extra;
  if (!a1[6])
    return 0;
  object = nw_hash_node_get_object(a2);
  result = 0;
  *(_QWORD *)a1[6] = object;
  return result;
}

uint64_t ___ZL37nw_protocol_service_outbound_requestsP31NWConcrete_nw_protocol_instance_block_invoke(uint64_t a1, int a2, void *aBlock)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v4 = _Block_copy(aBlock);
  v5 = v4;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v6)
    goto LABEL_4;
  if (((*((uint64_t (**)(void *, _QWORD, _QWORD))v4 + 2))(v4, *(_QWORD *)(a1 + 32), 0) & 1) == 0)
  {
    v7 = nw_array_create();
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
LABEL_4:
    v10 = _Block_copy(v5);
    nw_array_append(v6, v10);

  }
  return 1;
}

void sub_18349407C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_instance_set_preferred_addresses(void *a1, void *a2, void *a3)
{
  id *v5;
  id v6;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5)
  {
    objc_storeStrong(v5 + 45, a2);
    objc_storeStrong(v5 + 46, a3);
    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_instance_set_preferred_addresses";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_instance_set_preferred_addresses";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_instance_set_preferred_addresses";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_instance_set_preferred_addresses";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_instance_set_preferred_addresses";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
LABEL_3:

}

void nw_protocol_definition_initialize_common_state(NWConcrete_nw_protocol_definition *a1)
{
  NWConcrete_nw_protocol_definition *v1;
  nw_protocol_definition_common_state *v2;
  NSObject *v3;
  void *v4;

  v1 = a1;
  if (v1->common_state)
    goto LABEL_4;
  v2 = (nw_protocol_definition_common_state *)malloc_type_calloc(1uLL, 0x58uLL, 0xEAFB8F1AuLL);
  if (v2)
  {
LABEL_3:
    v1->common_state = v2;
LABEL_4:

    return;
  }
  __nwlog_obj();
  v3 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  v4 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v4))
  {
    free(v4);
    goto LABEL_3;
  }
  __break(1u);
}

void sub_18349448C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_definition_get_framer_create(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1[9];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_definition_get_framer_create";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_get_framer_create";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null definition->common_state", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_definition_get_framer_create";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition->common_state, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_get_framer_create";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition->common_state, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_get_framer_create";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null definition->common_state, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

NWConcrete_nw_protocol_definition *nw_protocol_definition_create(int a1)
{
  return nw_protocol_definition_create_named(a1, 0);
}

void nw_protocol_definition_set_is_proxy(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *((_BYTE *)v1 + 184) |= 0x80u;
    goto LABEL_3;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_definition_set_is_proxy";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_definition_set_is_proxy";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_definition_set_is_proxy";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_definition_set_is_proxy";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_definition_set_is_proxy";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v4)
    free(v4);
LABEL_3:

}

uint64_t nw_protocol_definition_is_framer(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_BYTE *)v1 + 184) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_definition_is_framer";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_is_framer";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_definition_is_framer";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_is_framer";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_is_framer";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_protocol_definition_get_multipath(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[184] >> 4) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_definition_get_multipath";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_get_multipath";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_definition_get_multipath";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_get_multipath";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_get_multipath";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_protocol_definition_get_supports_discontiguous_data(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[184] >> 5) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_definition_get_supports_discontiguous_data";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_get_supports_discontiguous_data";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_definition_get_supports_discontiguous_data";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_get_supports_discontiguous_data";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_get_supports_discontiguous_data";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_definition_initialize_extended_state(NWConcrete_nw_protocol_definition *a1)
{
  NWConcrete_nw_protocol_definition *v1;
  nw_protocol_definition_extended_state *v2;
  NSObject *v3;
  void *v4;

  v1 = a1;
  if (v1->extended_state)
    goto LABEL_4;
  v2 = (nw_protocol_definition_extended_state *)malloc_type_calloc(1uLL, 0x108uLL, 0xEAFB8F1AuLL);
  if (v2)
  {
LABEL_3:
    v1->extended_state = v2;
LABEL_4:

    return;
  }
  __nwlog_obj();
  v3 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  v4 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v4))
  {
    free(v4);
    goto LABEL_3;
  }
  __break(1u);
}

void sub_1834952D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_metadata_serializer(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_definition_set_metadata_serializer";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_protocol_definition_set_metadata_serializer";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v8)
          goto LABEL_5;
LABEL_56:
        free(v8);
        goto LABEL_5;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_182FBE000, v9, v23, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!a2)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_definition_set_metadata_serializer";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null serialize_function", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_182FBE000, v9, v24, "%{public}s called with null serialize_function, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null serialize_function, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_definition_set_metadata_serializer";
      v30 = 2082;
      v31 = v18;
      _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null serialize_function, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!a3)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_definition_set_metadata_serializer";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null deserialize_function", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_182FBE000, v9, v25, "%{public}s called with null deserialize_function, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null deserialize_function, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_definition_set_metadata_serializer";
      v30 = 2082;
      v31 = v18;
      _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null deserialize_function, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v18);
    if (!v8)
      goto LABEL_5;
    goto LABEL_56;
  }
  *((_QWORD *)v5 + 21) = a2;
  *((_QWORD *)v5 + 22) = a3;
LABEL_5:

}

void nw_protocol_definition_set_metadata_comparator(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_definition_set_metadata_comparator";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_definition_set_metadata_comparator";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_protocol_definition_set_metadata_comparator";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_definition_set_metadata_comparator";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_definition_set_metadata_comparator";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *((_QWORD *)v3 + 20) = a2;
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_definition_set_metadata_comparator";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_metadata_comparator";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null comparator_function", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_metadata_comparator";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null comparator_function, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_metadata_comparator";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null comparator_function, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_definition_set_metadata_comparator";
    v23 = 2082;
    v24 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null comparator_function, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

void *nw_protocol_copy_definition_for_identifier(_QWORD *a1)
{
  uint64_t *v2;
  void *v7;
  void *v8;
  void *v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_copy_definition_for_identifier";
    v11 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault((const char *)v11, &type, &v17))
    {
LABEL_38:
      if (v11)
        free(v11);
      return 0;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_copy_definition_for_identifier";
        v14 = "%{public}s called with null identifier";
LABEL_36:
        _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_protocol_copy_definition_for_identifier";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }
        if (!v16)
          goto LABEL_37;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_copy_definition_for_identifier";
        v14 = "%{public}s called with null identifier, no backtrace";
        goto LABEL_36;
      }
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_copy_definition_for_identifier";
        v14 = "%{public}s called with null identifier, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v2 = &g_registration_list;
  while (1)
  {
    v2 = (uint64_t *)*v2;
    if (!v2)
      break;
    if (*a1 == v2[4] && a1[1] == v2[5] && a1[2] == v2[6] && a1[3] == v2[7] && a1[4] == v2[8])
    {
      v7 = (void *)v2[14];
      if (v7)
      {
        v8 = os_retain(v7);
        goto LABEL_21;
      }
      break;
    }
  }
  v8 = 0;
LABEL_21:
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  return v8;
}

id *nw_protocol_implementation_create(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  _DWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  objc_class *v14;
  id *v15;
  id *v16;
  char v17;
  uint64_t (**v18)(void);
  uint64_t (*v19)(void);
  id *v20;
  id *v21;
  id v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  void *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  void *v35;
  os_log_type_t v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  os_log_type_t v43;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  char *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (a1)
  {
    if (v8)
    {
      v11 = v8;
      if (v11[16] == 3)
      {
        if (nw_protocol_instance_multiplex_callbacks(void)::onceToken != -1)
          dispatch_once(&nw_protocol_instance_multiplex_callbacks(void)::onceToken, &__block_literal_global_283);
        v12 = &nw_protocol_instance_multiplex_callbacks(void)::callbacks;
      }
      else
      {
        if (nw_protocol_instance_one_to_one_callbacks(void)::onceToken != -1)
          dispatch_once(&nw_protocol_instance_one_to_one_callbacks(void)::onceToken, &__block_literal_global_268);
        v12 = &nw_protocol_instance_one_to_one_callbacks(void)::callbacks;
      }
      v13 = *v12;
      v14 = (objc_class *)objc_opt_class();
      v15 = (id *)nw_protocol_new_objc(v14, (uint64_t)v10, (uint64_t)(v11 + 2), v13);
      v16 = v15;
      if (v15)
      {
        objc_storeStrong(v15 + 5, a3);
        objc_storeStrong(v16 + 6, a4);
        objc_storeStrong(v16 + 1, a2);
        if (nw_parameters_get_logging_disabled((uint64_t)v10))
          v17 = 0x80;
        else
          v17 = 0;
        *((_BYTE *)v16 + 405) = v17 & 0x80 | *((_BYTE *)v16 + 405) & 0x7F;
        v18 = (uint64_t (**)(void))*((_QWORD *)v16[1] + 10);
        if (v18)
        {
          v19 = *v18;
          if (v19)
            v16[14] = (id)v19();
        }
        v20 = v16;
        v20[2] = v20;
        v21 = v20 - 12;
        goto LABEL_38;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v47 = "nw_protocol_implementation_create";
      v23 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (__nwlog_fault(v23, &type, &v44))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v24 = (id)gLogObj;
          v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)buf = 136446210;
            v47 = "nw_protocol_implementation_create";
            _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s nw_protocol_new_objc failed", buf, 0xCu);
          }
        }
        else if (v44)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v24 = (id)gLogObj;
          v27 = type;
          v28 = os_log_type_enabled(v24, type);
          if (backtrace_string)
          {
            if (v28)
            {
              *(_DWORD *)buf = 136446466;
              v47 = "nw_protocol_implementation_create";
              v48 = 2082;
              v49 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s nw_protocol_new_objc failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v23)
              goto LABEL_37;
            goto LABEL_36;
          }
          if (v28)
          {
            *(_DWORD *)buf = 136446210;
            v47 = "nw_protocol_implementation_create";
            _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s nw_protocol_new_objc failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v24 = (id)gLogObj;
          v29 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)buf = 136446210;
            v47 = "nw_protocol_implementation_create";
            _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s nw_protocol_new_objc failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v23)
      {
LABEL_37:
        v21 = 0;
LABEL_38:

        goto LABEL_39;
      }
LABEL_36:
      free(v23);
      goto LABEL_37;
    }
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_protocol_implementation_create";
    v32 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v32, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_182FBE000, v33, v36, "%{public}s called with null handle", buf, 0xCu);
        }
LABEL_71:

        goto LABEL_72;
      }
      if (!v44)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_182FBE000, v33, v43, "%{public}s called with null handle, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      v41 = os_log_type_enabled(v33, type);
      if (!v37)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_182FBE000, v33, v40, "%{public}s called with null handle, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_protocol_implementation_create";
        v48 = 2082;
        v49 = v37;
        _os_log_impl(&dword_182FBE000, v33, v40, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_59;
    }
  }
  else
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_protocol_implementation_create";
    v32 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v32, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null identifier", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (!v44)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v42 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_182FBE000, v33, v42, "%{public}s called with null identifier, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      v39 = os_log_type_enabled(v33, type);
      if (!v37)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_182FBE000, v33, v38, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_protocol_implementation_create";
        v48 = 2082;
        v49 = v37;
        _os_log_impl(&dword_182FBE000, v33, v38, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_59:

      free(v37);
    }
  }
LABEL_72:
  if (v32)
    free(v32);
  v21 = 0;
LABEL_39:

  return v21;
}

void sub_183496930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_implementation_accept(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  os_log_type_t v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!a1)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_protocol_implementation_accept";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null many_to_one_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_182FBE000, v12, v26, "%{public}s called with null many_to_one_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null many_to_one_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_protocol_implementation_accept";
      v33 = 2082;
      v34 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null many_to_one_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_30;
  }
  if (!v5)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_protocol_implementation_accept";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_protocol_implementation_accept";
      v33 = 2082;
      v34 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_30:

    free(backtrace_string);
    if (!v11)
      goto LABEL_57;
    goto LABEL_56;
  }
  if (!v6)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_protocol_implementation_accept";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v29)
    {
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_protocol_implementation_accept";
          v33 = 2082;
          v34 = v23;
          _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
LABEL_55:
        if (!v11)
        {
LABEL_57:
          v8 = 0;
          goto LABEL_5;
        }
LABEL_56:
        free(v11);
        goto LABEL_57;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_182FBE000, v12, v28, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  v8 = 1;
LABEL_5:

  return v8;
}

void ___ZL40nw_protocol_instance_multiplex_callbacksv_block_invoke()
{
  nw_protocol_instance_multiplex_callbacks(void)::callbacks = nw_protocol_one_to_one_callbacks_new();
  nw_protocol_callbacks_set_add_input_handler((_QWORD *)nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_add_input_handler);
  nw_protocol_callbacks_set_replace_input_handler(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_replace_input_handler);
  nw_protocol_callbacks_set_remove_input_handler(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_remove_input_handler);
  nw_protocol_callbacks_set_connected(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_connected);
  nw_protocol_callbacks_set_disconnect(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_disconnect);
  nw_protocol_callbacks_set_disconnected(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_disconnected);
  nw_protocol_callbacks_set_link_state(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_link_state);
  nw_protocol_callbacks_set_get_message_properties(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_message_properties);
  nw_protocol_callbacks_set_waiting_for_output(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_waiting_for_output);
  nw_protocol_callbacks_set_get_input_frames(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_input_frames);
  nw_protocol_callbacks_set_get_output_frames(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_output_frames);
  nw_protocol_callbacks_set_finalize_output_frames(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_finalize_output_frames);
  nw_protocol_callbacks_set_input_available(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_input_available);
  nw_protocol_callbacks_set_input_finished(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_input_finished);
  nw_protocol_callbacks_set_input_flush(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_input_flush);
  nw_protocol_callbacks_set_output_available(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_output_available);
  nw_protocol_callbacks_set_output_finished(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_output_finished);
  nw_protocol_callbacks_set_copy_info(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_copy_info);
  nw_protocol_callbacks_set_notify(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_notify);
  nw_protocol_callbacks_set_error(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_error);
  nw_protocol_callbacks_set_updated_path(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_updated_path);
  nw_protocol_callbacks_set_connect(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_connect);
  nw_protocol_callbacks_set_add_listen_handler(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_add_listen_handler);
  nw_protocol_callbacks_set_remove_listen_handler(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_remove_listen_handler);
  nw_protocol_callbacks_set_get_parameters(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_parameters);
  nw_protocol_callbacks_set_get_local_endpoint(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_local);
  nw_protocol_callbacks_set_get_remote_endpoint(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_remote);
  nw_protocol_callbacks_set_get_path(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_path);
}

uint64_t nw_protocol_implementation_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v6;
  char *v7;
  uint64_t v8;
  nw_protocol_callbacks *callbacks;
  void *v10;
  char v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  nw_protocol_callbacks *v16;
  nw_protocol_callbacks *v17;
  void (*get_parameters)(nw_protocol *);
  id v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  uint64_t v24;
  void *v25;
  nw_protocol_identifier *identifier;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  nw_protocol_identifier *v30;
  void *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  void *v35;
  NSObject *v36;
  os_log_type_t v37;
  void *v38;
  os_log_type_t v39;
  void *v40;
  os_log_type_t v41;
  void *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  char *backtrace_string;
  os_log_type_t v47;
  _BOOL4 v48;
  nw_protocol_identifier *v49;
  char *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  char *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  char *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  os_log_type_t v59;
  _BOOL4 v60;
  char *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  os_log_type_t v64;
  nw_protocol_identifier *v65;
  os_log_type_t v66;
  os_log_type_t v67;
  os_log_type_t v68;
  os_log_type_t v69;
  nw_protocol_identifier *v70;
  _QWORD *v71;
  nw_protocol *v72;
  id v73;
  uint64_t v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  const char *v79;
  char *v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  os_log_type_t v84;
  uint64_t v85;
  os_log_type_t v86;
  uint64_t v87;
  _QWORD *v88;
  id v89;
  void *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  unsigned __int8 *v97;
  BOOL v98;
  NSObject *v99;
  NSObject *v100;
  char v101;
  os_log_type_t v102;
  void *v103;
  char *v104;
  NSObject *v105;
  os_log_type_t v106;
  char *v107;
  os_log_type_t v108;
  _BOOL4 v109;
  os_log_type_t v110;
  void *v111;
  char *v112;
  NSObject *v113;
  os_log_type_t v114;
  char *v115;
  os_log_type_t v116;
  _BOOL4 v117;
  os_log_type_t v118;
  char *v119;
  uint64_t v120;
  uint64_t internal;
  _BOOL8 v122;
  nw_protocol_callbacks *v123;
  nw_protocol_callbacks *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  int v128;
  id v129;
  char *v130;
  NSObject *v131;
  os_log_type_t v132;
  nw_protocol_callbacks *v133;
  id v134;
  char *v135;
  os_log_type_t v136;
  char *v137;
  os_log_type_t v138;
  _BOOL4 v139;
  unsigned __int8 *v140;
  id v141;
  void *v142;
  NSObject *v143;
  unsigned int port;
  id v145;
  id v146;
  void *v147;
  void *v148;
  NSObject *v149;
  uint64_t extra;
  uint64_t v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  nw_protocol_callbacks *v155;
  uint64_t (*supports_external_data)(nw_protocol *);
  void *v157;
  char v158;
  char *v159;
  os_log_type_t v160;
  _BOOL4 v161;
  id v162;
  os_log_type_t v163;
  os_log_type_t v164;
  void *v165;
  char *v166;
  NSObject *v167;
  os_log_type_t v168;
  char *v169;
  os_log_type_t v170;
  _BOOL4 v171;
  nw_protocol_callbacks *v172;
  int v173;
  __int16 v174;
  uint64_t (*v175)(uint64_t, uint64_t);
  char *v176;
  uint64_t v177;
  uint64_t v178;
  os_log_type_t v179;
  char *v180;
  os_log_type_t v181;
  _BOOL4 v182;
  os_log_type_t v183;
  os_log_type_t v184;
  void *v185;
  char *v186;
  NSObject *v187;
  os_log_type_t v188;
  char *v189;
  os_log_type_t v190;
  _BOOL4 v191;
  os_log_type_t v192;
  NSObject *v193;
  NSObject *v194;
  uint64_t v195;
  void *v196;
  char *v197;
  NSObject *v198;
  os_log_type_t v199;
  NSObject *v200;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *v202;
  nw_protocol_callbacks *v203;
  void (**v204)(_QWORD);
  const void *v205;
  nw_protocol_callbacks *v206;
  uint64_t v207;
  void *v208;
  nw_protocol_callbacks *v210;
  uint64_t (*v211)(nw_protocol *);
  void *v212;
  char v213;
  nw_protocol_callbacks *v214;
  int v215;
  char v216;
  uint64_t v217;
  _QWORD *v218;
  void *v219;
  id v220;
  void *v221;
  void **v222;
  void **v223;
  _BOOL4 v224;
  NSObject *v225;
  const sockaddr *address;
  int v227;
  uint64_t v228;
  uint64_t v229;
  nw_endpoint_t v231;
  void *v232;
  void *v233;
  char *v234;
  NSObject *v235;
  os_log_type_t v236;
  char *v237;
  NSObject *v238;
  _BOOL4 v239;
  void *v240;
  char *v241;
  NSObject *v242;
  os_log_type_t v243;
  char *v244;
  NSObject *v245;
  _BOOL4 v246;
  os_log_type_t v247;
  char *v248;
  os_log_type_t v249;
  _BOOL4 v250;
  void *v251;
  char *v252;
  NSObject *v253;
  os_log_type_t v254;
  char *v255;
  NSObject *v256;
  _BOOL4 v257;
  os_log_type_t v258;
  void *v259;
  char *v260;
  NSObject *v261;
  os_log_type_t v262;
  char *v263;
  NSObject *v264;
  _BOOL4 v265;
  os_log_type_t v266;
  os_log_type_t v267;
  os_log_type_t v268;
  os_log_type_t v269;
  os_log_type_t v270;
  os_log_type_t v271;
  os_log_type_t v272;
  nw_endpoint_t v273;
  _BOOL8 v274;
  int v275;
  char v276;
  _BYTE type[20];
  uint64_t v278;
  __int128 v279;
  _BYTE buf[22];
  __int16 v281;
  nw_protocol *v282;
  __int16 v283;
  _BYTE v284[24];
  uint64_t v285;

  v285 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v6 = p_output_handler;
    v7 = v6;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v8 = *((_QWORD *)v6 + 1);
      if (v8)
      {
        if (*(_QWORD *)(v8 + 80))
        {
          if (a1 != a2)
          {
            if (a2)
            {
              if (!a2->output_handler)
              {
                a2->output_handler = a1;
                if (a1->handle == &nw_protocol_ref_counted_handle)
                {
                  callbacks = a1[1].callbacks;
                  if (callbacks)
                    a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
                }
              }
              v10 = a2->handle;
              if (v10 == &nw_protocol_ref_counted_handle)
              {
                v16 = a2[1].callbacks;
                if (v16)
                  a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v16->add_input_handler + 1);
                *(_QWORD *)type = a2;
                v11 = type[8] | 1;
              }
              else
              {
                *(_QWORD *)type = a2;
                v11 = type[8] & 0xFE;
              }
              type[8] = v11;
              v17 = a2->callbacks;
              if (v17)
              {
                get_parameters = (void (*)(nw_protocol *))v17->get_parameters;
                if (get_parameters)
                {
                  get_parameters(a2);
                  v19 = (id)objc_claimAutoreleasedReturnValue();

                  if (v10 != &nw_protocol_ref_counted_handle)
                    goto LABEL_27;
                  goto LABEL_136;
                }
              }
              __nwlog_obj();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              identifier = a2->identifier;
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_get_parameters";
              if (!identifier)
                identifier = (nw_protocol_identifier *)"invalid";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = identifier;
              v281 = 2048;
              v282 = a2;
              v27 = (char *)_os_log_send_and_compose_impl();

              LOBYTE(v279) = 16;
              LOBYTE(v275) = 0;
              if (__nwlog_fault(v27, &v279, &v275))
              {
                if (v279 == 17)
                {
                  __nwlog_obj();
                  v28 = objc_claimAutoreleasedReturnValue();
                  v29 = v279;
                  if (os_log_type_enabled(v28, (os_log_type_t)v279))
                  {
                    v30 = a2->identifier;
                    if (!v30)
                      v30 = (nw_protocol_identifier *)"invalid";
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "__nw_protocol_get_parameters";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v30;
                    v281 = 2048;
                    v282 = a2;
                    _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback", buf, 0x20u);
                  }
LABEL_132:

                  goto LABEL_133;
                }
                if (!(_BYTE)v275)
                {
                  __nwlog_obj();
                  v28 = objc_claimAutoreleasedReturnValue();
                  v64 = v279;
                  if (os_log_type_enabled(v28, (os_log_type_t)v279))
                  {
                    v65 = a2->identifier;
                    if (!v65)
                      v65 = (nw_protocol_identifier *)"invalid";
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "__nw_protocol_get_parameters";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v65;
                    v281 = 2048;
                    v282 = a2;
                    _os_log_impl(&dword_182FBE000, v28, v64, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded", buf, 0x20u);
                  }
                  goto LABEL_132;
                }
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v28 = objc_claimAutoreleasedReturnValue();
                v47 = v279;
                v48 = os_log_type_enabled(v28, (os_log_type_t)v279);
                if (!backtrace_string)
                {
                  if (v48)
                  {
                    v70 = a2->identifier;
                    if (!v70)
                      v70 = (nw_protocol_identifier *)"invalid";
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "__nw_protocol_get_parameters";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v70;
                    v281 = 2048;
                    v282 = a2;
                    _os_log_impl(&dword_182FBE000, v28, v47, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace", buf, 0x20u);
                  }
                  goto LABEL_132;
                }
                if (v48)
                {
                  v49 = a2->identifier;
                  if (!v49)
                    v49 = (nw_protocol_identifier *)"invalid";
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "__nw_protocol_get_parameters";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v49;
                  v281 = 2048;
                  v282 = a2;
                  v283 = 2082;
                  *(_QWORD *)v284 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v28, v47, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
                }

                free(backtrace_string);
              }
LABEL_133:
              if (v27)
                free(v27);
              v19 = 0;
              if (v10 != &nw_protocol_ref_counted_handle)
              {
LABEL_27:
                if (!v19)
                  goto LABEL_240;
                goto LABEL_137;
              }
LABEL_136:
              nw::release_if_needed<nw_protocol *>((uint64_t *)type);
              if (!v19)
              {
LABEL_240:
                v88 = 0;
                v92 = 0;
                v101 = 1;
                goto LABEL_241;
              }
LABEL_137:
              if (!*((_QWORD *)v7 + 15))
              {
LABEL_159:
                v88 = v19;
                v89 = *(id *)(v88[13] + 136);

                v90 = (void *)*((_QWORD *)v7 + 15);
                *((_QWORD *)v7 + 15) = v89;

                *(_DWORD *)type = 0;
                v91 = nw_parameters_copy_protocol_options(v88, v7, type);
                v92 = v91;
                if (v91)
                {
                  if (!v7[407])
                  {
                    v93 = v91;
                    v7[407] = 0;
                    v94 = 84;
                    v95 = 407;
                    while (1)
                    {
                      v96 = v93[v95 - 359];
                      v7[v95] = v96;
                      if (!v96)
                        break;
                      --v94;
                      ++v95;
                      if (v94 <= 1)
                      {
                        v7[v95] = 0;
                        break;
                      }
                    }

                  }
                  if ((v7[404] & 4) == 0)
                  {
                    v97 = v92;
                    v98 = v97[153] == 0;

                    if (!v98)
                    {
                      if ((v7[405] & 0x80000000) == 0)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v99 = (id)gLogObj;
                        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v7 + 407;
                          v281 = 2080;
                          v282 = (nw_protocol *)" ";
                          _os_log_impl(&dword_182FBE000, v99, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sProhibit joining set, removing eligibility to join", buf, 0x20u);
                        }

                      }
                      v7[404] |= 4u;
                      nw_protocol_remove_instance((uint64_t)(v7 - 96));
                    }
                  }
                }
                if (!*((_DWORD *)v7 + 94))
                {
                  if (*(_DWORD *)type)
                  {
                    *((_DWORD *)v7 + 94) = *(_DWORD *)type;
                  }
                  else if ((v7[405] & 0x80000000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v100 = (id)gLogObj;
                    if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v7 + 407;
                      v281 = 2080;
                      v282 = (nw_protocol *)" ";
                      v283 = 2048;
                      *(_QWORD *)v284 = v7;
                      _os_log_impl(&dword_182FBE000, v100, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sProtocol level is undefined for instance %p", buf, 0x2Au);
                    }

                  }
                }
                v101 = 0;
LABEL_241:
                if (*(_DWORD *)(*((_QWORD *)v7 + 1) + 64) == 3)
                {
                  v119 = v7;
                  if (nw_protocol_definition_get_message_is_stream(*((void **)v7 + 1))
                    && *((nw_protocol **)v119 - 6) == a2)
                  {
                    v120 = -2;
                  }
                  else
                  {
                    v120 = (uint64_t)a2;
                  }

                  if (gLogDatapath)
                  {
                    __nwlog_obj();
                    v193 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v119;
                      v281 = 2048;
                      v282 = (nw_protocol *)v120;
                      _os_log_impl(&dword_182FBE000, v193, OS_LOG_TYPE_DEBUG, "%{public}s Instance %p add input handler for flow %llx", buf, 0x20u);
                    }

                  }
                  internal = *((_QWORD *)v119 + 29);
                  if (!internal)
                  {
                    internal = nw_hash_table_create_internal(0x1Fu, 56, (const void *(*)(const void *, unsigned int *))nw_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key, 0);
                    if (!internal)
                    {
                      *((_QWORD *)v119 + 29) = 0;
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v162 = (id)gLogObj;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                      v130 = (char *)_os_log_send_and_compose_impl();

                      type[0] = 16;
                      LOBYTE(v279) = 0;
                      if (!__nwlog_fault(v130, type, &v279))
                        goto LABEL_328;
                      if (type[0] == 17)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v131 = (id)gLogObj;
                        v163 = type[0];
                        if (os_log_type_enabled(v131, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                          _os_log_impl(&dword_182FBE000, v131, v163, "%{public}s nw_hash_table_create_no_lock failed", buf, 0xCu);
                        }
                      }
                      else if ((_BYTE)v279)
                      {
                        v169 = (char *)__nw_create_backtrace_string();
                        __nwlog_obj();
                        v131 = objc_claimAutoreleasedReturnValue();
                        v170 = type[0];
                        v171 = os_log_type_enabled(v131, (os_log_type_t)type[0]);
                        if (v169)
                        {
                          if (v171)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v169;
                            _os_log_impl(&dword_182FBE000, v131, v170, "%{public}s nw_hash_table_create_no_lock failed, dumping backtrace:%{public}s", buf, 0x16u);
                          }

                          free(v169);
                          if (!v130)
                            goto LABEL_330;
                          goto LABEL_329;
                        }
                        if (v171)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                          _os_log_impl(&dword_182FBE000, v131, v170, "%{public}s nw_hash_table_create_no_lock failed, no backtrace", buf, 0xCu);
                        }
                      }
                      else
                      {
                        __nwlog_obj();
                        v131 = objc_claimAutoreleasedReturnValue();
                        v183 = type[0];
                        if (os_log_type_enabled(v131, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                          _os_log_impl(&dword_182FBE000, v131, v183, "%{public}s nw_hash_table_create_no_lock failed, backtrace limit exceeded", buf, 0xCu);
                        }
                      }
                      goto LABEL_327;
                    }
                    *(_DWORD *)(internal + 48) &= ~2u;
                    *((_QWORD *)v119 + 29) = internal;
                  }
                  LOBYTE(v275) = 0;
                  v122 = nw_hash_table_add_object(internal, (uint64_t)a2, (char *)&v275);
                  if ((_BYTE)v275)
                  {
                    v274 = v122;
                    if ((v119[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      __nwlog_obj();
                      v194 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
                      {
                        v195 = nw_protocol_flow_for_protocol((NWConcrete_nw_protocol_instance *)v119, (uint64_t)a2);
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v119 + 407;
                        v281 = 2080;
                        v282 = (nw_protocol *)" ";
                        v283 = 2048;
                        *(_QWORD *)v284 = a2;
                        *(_WORD *)&v284[8] = 2048;
                        *(_QWORD *)&v284[10] = v195;
                        _os_log_impl(&dword_182FBE000, v194, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sMultiplexing protocol added protocol %p to hash table for flow %llx", buf, 0x34u);
                      }

                      v122 = v274;
                      if (a2)
                      {
LABEL_253:
                        a2->output_handler_context = (void *)v122;
                        if (!a2->output_handler)
                        {
                          a2->output_handler = a1;
                          if (a1->handle == &nw_protocol_ref_counted_handle)
                          {
                            v123 = a1[1].callbacks;
                            if (v123)
                              a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v123->add_input_handler + 1);
                          }
                        }
                        if (!a1->default_input_handler)
                        {
                          a1->default_input_handler = a2;
                          if (a2->handle == &nw_protocol_ref_counted_handle)
                          {
                            v124 = a2[1].callbacks;
                            if (v124)
                              a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v124->add_input_handler + 1);
                          }
LABEL_261:
                          nw_protocol_set_flow_id_from_protocol(a1, a2);
                          v125 = nw_protocol_instance_copy_path(v119, -1);
                          v126 = (void *)*((_QWORD *)v119 + 36);
                          *((_QWORD *)v119 + 36) = v125;

                          v122 = v274;
                        }
LABEL_262:
                        if ((v101 & 1) != 0)
                        {
                          v127 = 0;
                          if ((v119[402] & 2) != 0)
                            goto LABEL_305;
                          goto LABEL_295;
                        }
                        v140 = v88;
                        if (v140)
                        {
                          v127 = v140[97] >> 7;
                          goto LABEL_294;
                        }
                        __nwlog_obj();
                        v233 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_parameters_get_server_mode";
                        v234 = (char *)_os_log_send_and_compose_impl();

                        type[0] = 16;
                        LOBYTE(v279) = 0;
                        if (__nwlog_fault(v234, type, &v279))
                        {
                          if (type[0] == 17)
                          {
                            __nwlog_obj();
                            v235 = objc_claimAutoreleasedReturnValue();
                            v236 = type[0];
                            if (os_log_type_enabled(v235, (os_log_type_t)type[0]))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_parameters_get_server_mode";
                              _os_log_impl(&dword_182FBE000, v235, v236, "%{public}s called with null parameters", buf, 0xCu);
                            }
                          }
                          else
                          {
                            if ((_BYTE)v279)
                            {
                              v244 = (char *)__nw_create_backtrace_string();
                              __nwlog_obj();
                              v245 = objc_claimAutoreleasedReturnValue();
                              v269 = type[0];
                              v246 = os_log_type_enabled(v245, (os_log_type_t)type[0]);
                              if (v244)
                              {
                                if (v246)
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(_QWORD *)&buf[4] = "nw_parameters_get_server_mode";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = v244;
                                  _os_log_impl(&dword_182FBE000, v245, v269, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                                }

                                free(v244);
                              }
                              else
                              {
                                if (v246)
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(_QWORD *)&buf[4] = "nw_parameters_get_server_mode";
                                  _os_log_impl(&dword_182FBE000, v245, v269, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
                                }

                              }
                              goto LABEL_560;
                            }
                            __nwlog_obj();
                            v235 = objc_claimAutoreleasedReturnValue();
                            v267 = type[0];
                            if (os_log_type_enabled(v235, (os_log_type_t)type[0]))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_parameters_get_server_mode";
                              _os_log_impl(&dword_182FBE000, v235, v267, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
                            }
                          }

                        }
LABEL_560:
                        if (v234)
                          free(v234);
                        v127 = 0;
                        v140 = 0;
LABEL_294:

                        v122 = v274;
                        if ((v119[402] & 2) != 0)
                        {
LABEL_305:
                          extra = nw_hash_node_get_extra(v122);
                          *(_QWORD *)(extra + 16) = 0;
                          *(_QWORD *)(extra + 24) = extra + 16;
                          objc_storeStrong((id *)(extra + 8), v92);
                          v152 = *(_WORD *)(extra + 52) & 0xFFFE | v127;
                          *(_WORD *)(extra + 52) = v152;
                          v153 = v152 & 0xFFFFFFFD | (2 * ((v119[404] >> 1) & 1));
                          *(_WORD *)(extra + 52) = v153;
                          if ((v119[404] & 3) == 1)
                            *(_WORD *)(extra + 52) = v153 | 8;
                          v154 = *((_QWORD *)v7 + 1);
                          if (a2)
                          {
                            if ((*(_BYTE *)(v154 + 184) & 0x20) != 0)
                            {
                              v155 = a2->callbacks;
                              if (v155)
                              {
                                supports_external_data = (uint64_t (*)(nw_protocol *))v155->supports_external_data;
                                if (supports_external_data)
                                {
                                  v157 = a2->handle;
                                  if (v157 == &nw_protocol_ref_counted_handle)
                                  {
                                    v172 = a2[1].callbacks;
                                    if (v172)
                                      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v172->add_input_handler + 1);
                                    *(_QWORD *)buf = a2;
                                    v158 = buf[8] | 1;
                                  }
                                  else
                                  {
                                    *(_QWORD *)buf = a2;
                                    v158 = buf[8] & 0xFE;
                                  }
                                  buf[8] = v158;
                                  v173 = supports_external_data(a2);
                                  if (v157 == &nw_protocol_ref_counted_handle)
                                    nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                                  if (v173)
                                    v174 = 1024;
                                  else
                                    v174 = 0;
                                  *(_WORD *)(extra + 52) = *(_WORD *)(extra + 52) & 0xFBFF | v174;
                                  v154 = *((_QWORD *)v7 + 1);
                                }
                              }
                            }
                          }
                          v175 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v154 + 80) + 16);
                          if (v175)
                            *(_QWORD *)extra = v175(v154, v151);
                          v176 = v119;
                          if (nw_protocol_definition_get_message_is_stream(*((void **)v7 + 1))
                            && *((nw_protocol **)v176 - 6) == a2)
                          {
                            a2 = (nw_protocol *)-2;
                          }

                          *((_QWORD *)v176 + 31) = a2;
                          v178 = *((_QWORD *)v176 + 4);
                          if (v178)
                          {
                            nw_queue_cancel_source(v178, v177);
                            *((_QWORD *)v176 + 4) = 0;
                          }
LABEL_459:
                          v222 = v7;
                          v223 = v222;
                          if ((*(_BYTE *)(*((_QWORD *)v7 + 1) + 184) & 0x10) != 0
                            && nw_parameters_get_multipath(v222[6])
                            && *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 80) + 208))
                          {
                            v224 = (*((_BYTE *)v223 + 405) & 4) == 0;

                            if (v224)
                            {
                              v225 = v223[5];
                              if (v225)
                              {
                                if (nw_endpoint_get_type(v225) == nw_endpoint_type_address
                                  && nw_endpoint_get_address_family(v223[5]) == 30
                                  && nw_path_is_eligible_for_CrazyIvan46(v223[36]))
                                {
                                  LODWORD(v279) = nw_path_get_interface_index(v223[36]);
                                  address = nw_endpoint_get_address((nw_endpoint_t)v223[5]);
                                  *(_QWORD *)type = 0;
                                  v227 = nw_nat64_copy_prefixes((unsigned int *)&v279, type);
                                  if (v227 >= 1)
                                  {
                                    v228 = 0;
                                    v229 = 16 * v227;
                                    while (1)
                                    {
                                      v275 = 0;
                                      if (nw_nat64_extract_v4((unsigned int *)(*(_QWORD *)type + v228), &address->sa_data[6], (uint64_t)&v275))break;
                                      v228 += 16;
                                      if (v229 == v228)
                                        goto LABEL_478;
                                    }
                                    *(_WORD *)buf = 528;
                                    *(_WORD *)&buf[2] = *(_WORD *)address->sa_data;
                                    *(_DWORD *)&buf[4] = v275;
                                    *(_QWORD *)&buf[8] = 0;
                                    v231 = nw_endpoint_create_address((const sockaddr *)buf);
                                    v232 = v223[44];
                                    v223[44] = v231;

                                  }
LABEL_478:
                                  if (*(_QWORD *)type)
                                    free(*(void **)type);
                                }
                              }
                            }
                          }
                          else
                          {

                          }
                          v24 = 1;
                          goto LABEL_474;
                        }
LABEL_295:
                        if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 80) + 40))
                        {
                          objc_storeStrong((id *)v119 + 7, v92);
                          v279 = 0uLL;
                          nw_protocol_get_flow_id(a2, &v279);
                          v141 = nw_path_copy_flow_registration(*((void **)v119 + 15), (uint64_t)&v279);
                          v142 = (void *)*((_QWORD *)v119 + 35);
                          *((_QWORD *)v119 + 35) = v141;

                          (*(void (**)(char *, uint64_t))(*(_QWORD *)(*((_QWORD *)v7 + 1) + 80) + 40))(v119, v127);
                          v119[402] |= 2u;
                          if ((_DWORD)v127)
                          {
                            v143 = nw_parameters_copy_local_endpoint(*((nw_parameters_t *)v119 + 6));
                            port = nw_endpoint_get_port(v143);
                            *(_OWORD *)&type[4] = 0uLL;
                            v278 = 0;
                            *(_WORD *)&type[2] = __rev16(port);
                            *(_WORD *)type = 7708;
                            v273 = nw_endpoint_create_address((const sockaddr *)type);
                            v145 = nw_context_copy_registered_endpoint(*((void **)v119 + 15), v273);
                            v146 = nw_endpoint_copy_registrar_for_identifier(v145, (__int128 *)a1->identifier->name, 1);
                            v147 = (void *)*((_QWORD *)v119 + 49);
                            *((_QWORD *)v119 + 49) = v146;

                            v148 = (void *)*((_QWORD *)v119 + 49);
                            if (v148)
                            {
                              if ((v119[405] & 0x80000000) == 0)
                              {
                                __nwlog_obj();
                                v149 = objc_claimAutoreleasedReturnValue();
                                if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
                                {
                                  *(_DWORD *)buf = 136446722;
                                  *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = v119 + 407;
                                  v281 = 2080;
                                  v282 = (nw_protocol *)" ";
                                  _os_log_impl(&dword_182FBE000, v149, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAdded server protocol to the registrar", buf, 0x20u);
                                }

                                v148 = (void *)*((_QWORD *)v119 + 49);
                              }
                              nw_protocol_instance_registrar_add_instance(v148, (uint64_t)a1);
                            }

                          }
                          v122 = v274;
                        }
                        goto LABEL_305;
                      }
                    }
                    else if (a2)
                    {
                      goto LABEL_253;
                    }
                    __nwlog_obj();
                    v196 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler_context";
                    v197 = (char *)_os_log_send_and_compose_impl();

                    type[0] = 16;
                    LOBYTE(v279) = 0;
                    if (__nwlog_fault(v197, type, &v279))
                    {
                      if (type[0] == 17)
                      {
                        __nwlog_obj();
                        v198 = objc_claimAutoreleasedReturnValue();
                        v199 = type[0];
                        if (os_log_type_enabled(v198, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler_context";
                          _os_log_impl(&dword_182FBE000, v198, v199, "%{public}s called with null protocol", buf, 0xCu);
                        }
LABEL_415:

                        goto LABEL_511;
                      }
                      if (!(_BYTE)v279)
                      {
                        __nwlog_obj();
                        v198 = objc_claimAutoreleasedReturnValue();
                        v247 = type[0];
                        if (os_log_type_enabled(v198, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler_context";
                          _os_log_impl(&dword_182FBE000, v198, v247, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                        }
                        goto LABEL_415;
                      }
                      v237 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v238 = objc_claimAutoreleasedReturnValue();
                      v270 = type[0];
                      v239 = os_log_type_enabled(v238, (os_log_type_t)type[0]);
                      if (v237)
                      {
                        if (v239)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler_context";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v237;
                          _os_log_impl(&dword_182FBE000, v238, v270, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v237);
                      }
                      else
                      {
                        if (v239)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler_context";
                          _os_log_impl(&dword_182FBE000, v238, v270, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                        }

                      }
                    }
LABEL_511:
                    if (v197)
                      free(v197);
                    __nwlog_obj();
                    v251 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                    v252 = (char *)_os_log_send_and_compose_impl();

                    type[0] = 16;
                    LOBYTE(v279) = 0;
                    if (__nwlog_fault(v252, type, &v279))
                    {
                      if (type[0] == 17)
                      {
                        __nwlog_obj();
                        v253 = objc_claimAutoreleasedReturnValue();
                        v254 = type[0];
                        if (os_log_type_enabled(v253, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                          _os_log_impl(&dword_182FBE000, v253, v254, "%{public}s called with null protocol", buf, 0xCu);
                        }
LABEL_517:

                        goto LABEL_529;
                      }
                      if (!(_BYTE)v279)
                      {
                        __nwlog_obj();
                        v253 = objc_claimAutoreleasedReturnValue();
                        v258 = type[0];
                        if (os_log_type_enabled(v253, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                          _os_log_impl(&dword_182FBE000, v253, v258, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                        }
                        goto LABEL_517;
                      }
                      v255 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v256 = objc_claimAutoreleasedReturnValue();
                      v271 = type[0];
                      v257 = os_log_type_enabled(v256, (os_log_type_t)type[0]);
                      if (v255)
                      {
                        if (v257)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v255;
                          _os_log_impl(&dword_182FBE000, v256, v271, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v255);
                      }
                      else
                      {
                        if (v257)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                          _os_log_impl(&dword_182FBE000, v256, v271, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                        }

                      }
                    }
LABEL_529:
                    if (v252)
                      free(v252);
                    __nwlog_obj();
                    v259 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                    v260 = (char *)_os_log_send_and_compose_impl();

                    type[0] = 16;
                    LOBYTE(v279) = 0;
                    if (__nwlog_fault(v260, type, &v279))
                    {
                      if (type[0] == 17)
                      {
                        __nwlog_obj();
                        v261 = objc_claimAutoreleasedReturnValue();
                        v262 = type[0];
                        if (os_log_type_enabled(v261, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                          _os_log_impl(&dword_182FBE000, v261, v262, "%{public}s called with null protocol", buf, 0xCu);
                        }
LABEL_535:

                        goto LABEL_547;
                      }
                      if (!(_BYTE)v279)
                      {
                        __nwlog_obj();
                        v261 = objc_claimAutoreleasedReturnValue();
                        v266 = type[0];
                        if (os_log_type_enabled(v261, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                          _os_log_impl(&dword_182FBE000, v261, v266, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                        }
                        goto LABEL_535;
                      }
                      v263 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v264 = objc_claimAutoreleasedReturnValue();
                      v272 = type[0];
                      v265 = os_log_type_enabled(v264, (os_log_type_t)type[0]);
                      if (v263)
                      {
                        if (v265)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v263;
                          _os_log_impl(&dword_182FBE000, v264, v272, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v263);
                      }
                      else
                      {
                        if (v265)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                          _os_log_impl(&dword_182FBE000, v264, v272, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                        }

                      }
                    }
LABEL_547:
                    if (v260)
                      free(v260);
                    v122 = v274;
                    if (!a1->default_input_handler)
                      goto LABEL_261;
                    goto LABEL_262;
                  }
                  *(_QWORD *)type = 0;
                  *(_QWORD *)&type[8] = 0;
                  nw_protocol_get_flow_id(a2, type);
                  if (v119[405] < 0)
                    goto LABEL_330;
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v134 = (id)gLogObj;
                  v135 = v119 + 407;
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v119 + 407;
                  v281 = 2080;
                  v282 = (nw_protocol *)" ";
                  v283 = 1042;
                  *(_DWORD *)v284 = 16;
                  *(_WORD *)&v284[4] = 2098;
                  *(_QWORD *)&v284[6] = type;
                  v130 = (char *)_os_log_send_and_compose_impl();

                  LOBYTE(v279) = 16;
                  v276 = 0;
                  if (!__nwlog_fault(v130, &v279, &v276))
                  {
LABEL_328:
                    if (v130)
LABEL_329:
                      free(v130);
LABEL_330:
                    v24 = 0;
LABEL_474:

                    goto LABEL_475;
                  }
                  if (v279 == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v131 = (id)gLogObj;
                    v136 = v279;
                    if (os_log_type_enabled(v131, (os_log_type_t)v279))
                    {
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v135;
                      v281 = 2080;
                      v282 = (nw_protocol *)" ";
                      v283 = 1042;
                      *(_DWORD *)v284 = 16;
                      *(_WORD *)&v284[4] = 2098;
                      *(_QWORD *)&v284[6] = type;
                      _os_log_impl(&dword_182FBE000, v131, v136, "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P", buf, 0x30u);
                    }
                  }
                  else if (v276)
                  {
                    v159 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v131 = objc_claimAutoreleasedReturnValue();
                    v160 = v279;
                    v161 = os_log_type_enabled(v131, (os_log_type_t)v279);
                    if (v159)
                    {
                      if (v161)
                      {
                        *(_DWORD *)buf = 136447490;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v135;
                        v281 = 2080;
                        v282 = (nw_protocol *)" ";
                        v283 = 1042;
                        *(_DWORD *)v284 = 16;
                        *(_WORD *)&v284[4] = 2098;
                        *(_QWORD *)&v284[6] = type;
                        *(_WORD *)&v284[14] = 2082;
                        *(_QWORD *)&v284[16] = v159;
                        _os_log_impl(&dword_182FBE000, v131, v160, "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P, dumping backtrace:%{public}s", buf, 0x3Au);
                      }

                      free(v159);
                      if (!v130)
                        goto LABEL_330;
                      goto LABEL_329;
                    }
                    if (v161)
                    {
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v135;
                      v281 = 2080;
                      v282 = (nw_protocol *)" ";
                      v283 = 1042;
                      *(_DWORD *)v284 = 16;
                      *(_WORD *)&v284[4] = 2098;
                      *(_QWORD *)&v284[6] = type;
                      _os_log_impl(&dword_182FBE000, v131, v160, "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P, no backtrace", buf, 0x30u);
                    }
                  }
                  else
                  {
                    __nwlog_obj();
                    v131 = objc_claimAutoreleasedReturnValue();
                    v179 = v279;
                    if (os_log_type_enabled(v131, (os_log_type_t)v279))
                    {
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v135;
                      v281 = 2080;
                      v282 = (nw_protocol *)" ";
                      v283 = 1042;
                      *(_DWORD *)v284 = 16;
                      *(_WORD *)&v284[4] = 2098;
                      *(_QWORD *)&v284[6] = type;
                      _os_log_impl(&dword_182FBE000, v131, v179, "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P, backtrace limit exceeded", buf, 0x30u);
                    }
                  }
LABEL_327:

                  goto LABEL_328;
                }
                v128 = v7[405];
                if (a1->default_input_handler)
                {
                  if (v128 < 0)
                    goto LABEL_330;
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v129 = (id)gLogObj;
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v7 + 407;
                  v281 = 2080;
                  v282 = (nw_protocol *)" ";
                  v130 = (char *)_os_log_send_and_compose_impl();

                  type[0] = 16;
                  LOBYTE(v279) = 0;
                  if (!__nwlog_fault(v130, type, &v279))
                    goto LABEL_328;
                  if (type[0] == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v131 = (id)gLogObj;
                    v132 = type[0];
                    if (os_log_type_enabled(v131, (os_log_type_t)type[0]))
                    {
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v7 + 407;
                      v281 = 2080;
                      v282 = (nw_protocol *)" ";
                      _os_log_impl(&dword_182FBE000, v131, v132, "%{public}s %{public}s%sProtocol instance already has default input handler", buf, 0x20u);
                    }
                  }
                  else if ((_BYTE)v279)
                  {
                    v137 = (char *)__nw_create_backtrace_string();
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v131 = (id)gLogObj;
                    v138 = type[0];
                    v139 = os_log_type_enabled(v131, (os_log_type_t)type[0]);
                    if (v137)
                    {
                      if (v139)
                      {
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v7 + 407;
                        v281 = 2080;
                        v282 = (nw_protocol *)" ";
                        v283 = 2082;
                        *(_QWORD *)v284 = v137;
                        _os_log_impl(&dword_182FBE000, v131, v138, "%{public}s %{public}s%sProtocol instance already has default input handler, dumping backtrace:%{public}s", buf, 0x2Au);
                      }

                      free(v137);
                      if (!v130)
                        goto LABEL_330;
                      goto LABEL_329;
                    }
                    if (v139)
                    {
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v7 + 407;
                      v281 = 2080;
                      v282 = (nw_protocol *)" ";
                      _os_log_impl(&dword_182FBE000, v131, v138, "%{public}s %{public}s%sProtocol instance already has default input handler, no backtrace", buf, 0x20u);
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v131 = (id)gLogObj;
                    v164 = type[0];
                    if (os_log_type_enabled(v131, (os_log_type_t)type[0]))
                    {
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v7 + 407;
                      v281 = 2080;
                      v282 = (nw_protocol *)" ";
                      _os_log_impl(&dword_182FBE000, v131, v164, "%{public}s %{public}s%sProtocol instance already has default input handler, backtrace limit exceeded", buf, 0x20u);
                    }
                  }
                  goto LABEL_327;
                }
                if ((v128 & 0x80000000) == 0 && gLogDatapath)
                {
                  __nwlog_obj();
                  v200 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v200, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v7 + 407;
                    v281 = 2080;
                    v282 = (nw_protocol *)" ";
                    _os_log_impl(&dword_182FBE000, v200, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sProtocol add input handler", buf, 0x20u);
                  }

                  default_input_handler = a1->default_input_handler;
                  if (default_input_handler != a2)
                  {
                    if (default_input_handler)
                    {
                      if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
                      {
                        v202 = default_input_handler[1].callbacks;
                        if (v202)
                        {
                          v203 = (nw_protocol_callbacks *)((char *)v202 - 1);
                          default_input_handler[1].callbacks = v203;
                          if (!v203)
                          {
                            v204 = *(void (***)(_QWORD))default_input_handler[1].flow_id;
                            if (v204)
                            {
                              *(_QWORD *)default_input_handler[1].flow_id = 0;
                              v204[2](v204);
                              _Block_release(v204);
                            }
                            if ((default_input_handler[1].flow_id[8] & 1) != 0)
                            {
                              v205 = *(const void **)default_input_handler[1].flow_id;
                              if (v205)
                                _Block_release(v205);
                            }
                            free(default_input_handler);
                          }
                        }
                      }
                    }
                    goto LABEL_275;
                  }
                }
                else if (a2)
                {
LABEL_275:
                  a1->default_input_handler = a2;
                  if (a2)
                  {
                    if (a2->handle == &nw_protocol_ref_counted_handle)
                    {
                      v133 = a2[1].callbacks;
                      if (v133)
                        a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v133->add_input_handler + 1);
                    }
                    nw_protocol_set_flow_id_from_protocol(a1, a2);
                    goto LABEL_430;
                  }
                  nw_protocol_set_flow_id_from_protocol(a1, 0);
                  goto LABEL_332;
                }
                nw_protocol_set_flow_id_from_protocol(a1, a2);
                if (a2)
                {
LABEL_430:
                  if (!a2->output_handler)
                  {
                    a2->output_handler = a1;
                    if (a1->handle == &nw_protocol_ref_counted_handle)
                    {
                      v206 = a1[1].callbacks;
                      if (v206)
                        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v206->add_input_handler + 1);
                    }
                  }
                  goto LABEL_434;
                }
LABEL_332:
                __nwlog_obj();
                v165 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                v166 = (char *)_os_log_send_and_compose_impl();

                type[0] = 16;
                LOBYTE(v279) = 0;
                if (!__nwlog_fault(v166, type, &v279))
                  goto LABEL_385;
                if (type[0] == 17)
                {
                  __nwlog_obj();
                  v167 = objc_claimAutoreleasedReturnValue();
                  v168 = type[0];
                  if (os_log_type_enabled(v167, (os_log_type_t)type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                    _os_log_impl(&dword_182FBE000, v167, v168, "%{public}s called with null protocol", buf, 0xCu);
                  }
                }
                else if ((_BYTE)v279)
                {
                  v180 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v167 = objc_claimAutoreleasedReturnValue();
                  v181 = type[0];
                  v182 = os_log_type_enabled(v167, (os_log_type_t)type[0]);
                  if (v180)
                  {
                    if (v182)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v180;
                      _os_log_impl(&dword_182FBE000, v167, v181, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                    }

                    free(v180);
LABEL_385:
                    if (v166)
                      free(v166);
                    __nwlog_obj();
                    v185 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                    v186 = (char *)_os_log_send_and_compose_impl();

                    type[0] = 16;
                    LOBYTE(v279) = 0;
                    if (!__nwlog_fault(v186, type, &v279))
                      goto LABEL_403;
                    if (type[0] == 17)
                    {
                      __nwlog_obj();
                      v187 = objc_claimAutoreleasedReturnValue();
                      v188 = type[0];
                      if (os_log_type_enabled(v187, (os_log_type_t)type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                        _os_log_impl(&dword_182FBE000, v187, v188, "%{public}s called with null protocol", buf, 0xCu);
                      }
                    }
                    else if ((_BYTE)v279)
                    {
                      v189 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v187 = objc_claimAutoreleasedReturnValue();
                      v190 = type[0];
                      v191 = os_log_type_enabled(v187, (os_log_type_t)type[0]);
                      if (v189)
                      {
                        if (v191)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v189;
                          _os_log_impl(&dword_182FBE000, v187, v190, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v189);
                        goto LABEL_403;
                      }
                      if (v191)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                        _os_log_impl(&dword_182FBE000, v187, v190, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                      }
                    }
                    else
                    {
                      __nwlog_obj();
                      v187 = objc_claimAutoreleasedReturnValue();
                      v192 = type[0];
                      if (os_log_type_enabled(v187, (os_log_type_t)type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                        _os_log_impl(&dword_182FBE000, v187, v192, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                      }
                    }

LABEL_403:
                    if (v186)
                      free(v186);
LABEL_434:
                    v207 = nw_protocol_instance_copy_path(v7, -1);
                    v208 = (void *)*((_QWORD *)v7 + 36);
                    *((_QWORD *)v7 + 36) = v207;

                    objc_storeStrong((id *)v7 + 7, v92);
                    if ((*(_BYTE *)(*((_QWORD *)v7 + 1) + 184) & 0x20) != 0 && a2 != 0)
                    {
                      v210 = a2->callbacks;
                      if (v210)
                      {
                        v211 = (uint64_t (*)(nw_protocol *))v210->supports_external_data;
                        if (v211)
                        {
                          v212 = a2->handle;
                          if (v212 == &nw_protocol_ref_counted_handle)
                          {
                            v214 = a2[1].callbacks;
                            if (v214)
                              a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v214->add_input_handler + 1);
                            *(_QWORD *)buf = a2;
                            v213 = buf[8] | 1;
                          }
                          else
                          {
                            *(_QWORD *)buf = a2;
                            v213 = buf[8] & 0xFE;
                          }
                          buf[8] = v213;
                          v215 = v211(a2);
                          if (v212 == &nw_protocol_ref_counted_handle)
                            nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                          if (v215)
                            v216 = 2;
                          else
                            v216 = 0;
                          v7[403] = v7[403] & 0xFD | v216;
                        }
                      }
                    }
                    if ((v101 & 1) != 0)
                    {
                      v217 = 0;
LABEL_456:
                      if ((v7[402] & 2) == 0 && *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 80) + 40))
                      {
                        *(_OWORD *)buf = *(_OWORD *)a1->flow_id;
                        v220 = nw_path_copy_flow_registration(*((void **)v7 + 15), (uint64_t)buf);
                        v221 = (void *)*((_QWORD *)v7 + 35);
                        *((_QWORD *)v7 + 35) = v220;

                        (*(void (**)(char *, uint64_t))(*(_QWORD *)(*((_QWORD *)v7 + 1) + 80) + 40))(v7, v217);
                        v7[402] |= 2u;
                      }
                      goto LABEL_459;
                    }
                    v218 = v88;
                    v219 = v218;
                    if (v218)
                    {
                      v217 = *((unsigned __int8 *)v218 + 97) >> 7;
LABEL_455:

                      goto LABEL_456;
                    }
                    __nwlog_obj();
                    v240 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_parameters_get_server_mode";
                    v241 = (char *)_os_log_send_and_compose_impl();

                    type[0] = 16;
                    LOBYTE(v279) = 0;
                    if (__nwlog_fault(v241, type, &v279))
                    {
                      if (type[0] == 17)
                      {
                        __nwlog_obj();
                        v242 = objc_claimAutoreleasedReturnValue();
                        v243 = type[0];
                        if (os_log_type_enabled(v242, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_parameters_get_server_mode";
                          _os_log_impl(&dword_182FBE000, v242, v243, "%{public}s called with null parameters", buf, 0xCu);
                        }
                      }
                      else if ((_BYTE)v279)
                      {
                        v248 = (char *)__nw_create_backtrace_string();
                        __nwlog_obj();
                        v242 = objc_claimAutoreleasedReturnValue();
                        v249 = type[0];
                        v250 = os_log_type_enabled(v242, (os_log_type_t)type[0]);
                        if (v248)
                        {
                          if (v250)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(_QWORD *)&buf[4] = "nw_parameters_get_server_mode";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v248;
                            _os_log_impl(&dword_182FBE000, v242, v249, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                          }

                          free(v248);
                          goto LABEL_566;
                        }
                        if (v250)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_parameters_get_server_mode";
                          _os_log_impl(&dword_182FBE000, v242, v249, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
                        }
                      }
                      else
                      {
                        __nwlog_obj();
                        v242 = objc_claimAutoreleasedReturnValue();
                        v268 = type[0];
                        if (os_log_type_enabled(v242, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_parameters_get_server_mode";
                          _os_log_impl(&dword_182FBE000, v242, v268, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
                        }
                      }

                    }
LABEL_566:
                    if (v241)
                      free(v241);
                    v217 = 0;
                    goto LABEL_455;
                  }
                  if (v182)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                    _os_log_impl(&dword_182FBE000, v167, v181, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v167 = objc_claimAutoreleasedReturnValue();
                  v184 = type[0];
                  if (os_log_type_enabled(v167, (os_log_type_t)type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                    _os_log_impl(&dword_182FBE000, v167, v184, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                  }
                }

                goto LABEL_385;
              }
              v71 = v19;
              v72 = (nw_protocol *)*(id *)(v71[13] + 136);

              if (!nw_context_shares_workloop(*((void **)v7 + 15), v72))
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v73 = (id)gLogObj;
                v74 = *((_QWORD *)v7 + 15);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = a2;
                v281 = 2112;
                v282 = v72;
                v283 = 2112;
                *(_QWORD *)v284 = v74;
                v75 = (char *)_os_log_send_and_compose_impl();

                type[0] = 16;
                LOBYTE(v279) = 0;
                if (__nwlog_fault(v75, type, &v279))
                {
                  if (type[0] == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v76 = (id)gLogObj;
                    v77 = type[0];
                    if (os_log_type_enabled(v76, (os_log_type_t)type[0]))
                    {
                      v78 = *((_QWORD *)v7 + 15);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = a2;
                      v281 = 2112;
                      v282 = v72;
                      v283 = 2112;
                      *(_QWORD *)v284 = v78;
                      _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol create, which had workloop %@", buf, 0x2Au);
                    }
                  }
                  else if ((_BYTE)v279)
                  {
                    v79 = __nw_create_backtrace_string();
                    if (v79)
                    {
                      v80 = (char *)v79;
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v81 = (id)gLogObj;
                      v82 = type[0];
                      if (os_log_type_enabled(v81, (os_log_type_t)type[0]))
                      {
                        v83 = *((_QWORD *)v7 + 15);
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = a2;
                        v281 = 2112;
                        v282 = v72;
                        v283 = 2112;
                        *(_QWORD *)v284 = v83;
                        *(_WORD *)&v284[8] = 2082;
                        *(_QWORD *)&v284[10] = v80;
                        _os_log_impl(&dword_182FBE000, v81, v82, "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol create, which had workloop %@, dumping backtrace:%{public}s", buf, 0x34u);
                      }

                      free(v80);
                      if (!v75)
                        goto LABEL_158;
                      goto LABEL_157;
                    }
                    __nwlog_obj();
                    v76 = objc_claimAutoreleasedReturnValue();
                    v86 = type[0];
                    if (os_log_type_enabled(v76, (os_log_type_t)type[0]))
                    {
                      v87 = *((_QWORD *)v7 + 15);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = a2;
                      v281 = 2112;
                      v282 = v72;
                      v283 = 2112;
                      *(_QWORD *)v284 = v87;
                      _os_log_impl(&dword_182FBE000, v76, v86, "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol create, which had workloop %@, no backtrace", buf, 0x2Au);
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v76 = (id)gLogObj;
                    v84 = type[0];
                    if (os_log_type_enabled(v76, (os_log_type_t)type[0]))
                    {
                      v85 = *((_QWORD *)v7 + 15);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = a2;
                      v281 = 2112;
                      v282 = v72;
                      v283 = 2112;
                      *(_QWORD *)v284 = v85;
                      _os_log_impl(&dword_182FBE000, v76, v84, "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol create, which had workloop %@, backtrace limit exceeded", buf, 0x2Au);
                    }
                  }

                }
                if (v75)
LABEL_157:
                  free(v75);
              }
LABEL_158:

              goto LABEL_159;
            }
            __nwlog_obj();
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
            v43 = (char *)_os_log_send_and_compose_impl();

            type[0] = 16;
            LOBYTE(v279) = 0;
            if (__nwlog_fault(v43, type, &v279))
            {
              if (type[0] == 17)
              {
                __nwlog_obj();
                v44 = objc_claimAutoreleasedReturnValue();
                v45 = type[0];
                if (os_log_type_enabled(v44, (os_log_type_t)type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                  _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s called with null protocol", buf, 0xCu);
                }
LABEL_201:

                goto LABEL_202;
              }
              if (!(_BYTE)v279)
              {
                __nwlog_obj();
                v44 = objc_claimAutoreleasedReturnValue();
                v102 = type[0];
                if (os_log_type_enabled(v44, (os_log_type_t)type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                  _os_log_impl(&dword_182FBE000, v44, v102, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_201;
              }
              v61 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v44 = objc_claimAutoreleasedReturnValue();
              v62 = type[0];
              v63 = os_log_type_enabled(v44, (os_log_type_t)type[0]);
              if (!v61)
              {
                if (v63)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                  _os_log_impl(&dword_182FBE000, v44, v62, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                }
                goto LABEL_201;
              }
              if (v63)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v61;
                _os_log_impl(&dword_182FBE000, v44, v62, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v61);
            }
LABEL_202:
            if (v43)
              free(v43);
            __nwlog_obj();
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
            v104 = (char *)_os_log_send_and_compose_impl();

            type[0] = 16;
            LOBYTE(v279) = 0;
            if (__nwlog_fault(v104, type, &v279))
            {
              if (type[0] == 17)
              {
                __nwlog_obj();
                v105 = objc_claimAutoreleasedReturnValue();
                v106 = type[0];
                if (os_log_type_enabled(v105, (os_log_type_t)type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                  _os_log_impl(&dword_182FBE000, v105, v106, "%{public}s called with null protocol", buf, 0xCu);
                }
LABEL_219:

                goto LABEL_220;
              }
              if (!(_BYTE)v279)
              {
                __nwlog_obj();
                v105 = objc_claimAutoreleasedReturnValue();
                v110 = type[0];
                if (os_log_type_enabled(v105, (os_log_type_t)type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                  _os_log_impl(&dword_182FBE000, v105, v110, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_219;
              }
              v107 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v105 = objc_claimAutoreleasedReturnValue();
              v108 = type[0];
              v109 = os_log_type_enabled(v105, (os_log_type_t)type[0]);
              if (!v107)
              {
                if (v109)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                  _os_log_impl(&dword_182FBE000, v105, v108, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                }
                goto LABEL_219;
              }
              if (v109)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "__nw_protocol_set_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v107;
                _os_log_impl(&dword_182FBE000, v105, v108, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v107);
            }
LABEL_220:
            if (v104)
              free(v104);
            __nwlog_obj();
            v111 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_parameters";
            v112 = (char *)_os_log_send_and_compose_impl();

            type[0] = 16;
            LOBYTE(v279) = 0;
            if (!__nwlog_fault(v112, type, &v279))
              goto LABEL_238;
            if (type[0] == 17)
            {
              __nwlog_obj();
              v113 = objc_claimAutoreleasedReturnValue();
              v114 = type[0];
              if (os_log_type_enabled(v113, (os_log_type_t)type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_get_parameters";
                _os_log_impl(&dword_182FBE000, v113, v114, "%{public}s called with null protocol", buf, 0xCu);
              }
            }
            else if ((_BYTE)v279)
            {
              v115 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v113 = objc_claimAutoreleasedReturnValue();
              v116 = type[0];
              v117 = os_log_type_enabled(v113, (os_log_type_t)type[0]);
              if (v115)
              {
                if (v117)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "__nw_protocol_get_parameters";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v115;
                  _os_log_impl(&dword_182FBE000, v113, v116, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v115);
                goto LABEL_238;
              }
              if (v117)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_get_parameters";
                _os_log_impl(&dword_182FBE000, v113, v116, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v113 = objc_claimAutoreleasedReturnValue();
              v118 = type[0];
              if (os_log_type_enabled(v113, (os_log_type_t)type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_get_parameters";
                _os_log_impl(&dword_182FBE000, v113, v118, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }

LABEL_238:
            if (v112)
              free(v112);
            goto LABEL_240;
          }
          if (v6[405] < 0)
            goto LABEL_43;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = (id)gLogObj;
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v7 + 407;
          v281 = 2080;
          v282 = (nw_protocol *)" ";
          v283 = 2048;
          *(_QWORD *)v284 = a1;
          v13 = (char *)_os_log_send_and_compose_impl();

          type[0] = 16;
          LOBYTE(v279) = 0;
          if (__nwlog_fault(v13, type, &v279))
          {
            if (type[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v14 = (id)gLogObj;
              v15 = type[0];
              if (os_log_type_enabled(v14, (os_log_type_t)type[0]))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v7 + 407;
                v281 = 2080;
                v282 = (nw_protocol *)" ";
                v283 = 2048;
                *(_QWORD *)v284 = a1;
                _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s %{public}s%sCannot add input handler %p to itself", buf, 0x2Au);
              }
            }
            else if ((_BYTE)v279)
            {
              v20 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v14 = (id)gLogObj;
              v21 = type[0];
              v22 = os_log_type_enabled(v14, (os_log_type_t)type[0]);
              if (v20)
              {
                if (v22)
                {
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v7 + 407;
                  v281 = 2080;
                  v282 = (nw_protocol *)" ";
                  v283 = 2048;
                  *(_QWORD *)v284 = a1;
                  *(_WORD *)&v284[8] = 2082;
                  *(_QWORD *)&v284[10] = v20;
                  _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s %{public}s%sCannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x34u);
                }

                free(v20);
                if (!v13)
                  goto LABEL_43;
                goto LABEL_42;
              }
              if (v22)
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v7 + 407;
                v281 = 2080;
                v282 = (nw_protocol *)" ";
                v283 = 2048;
                *(_QWORD *)v284 = a1;
                _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s %{public}s%sCannot add input handler %p to itself, no backtrace", buf, 0x2Au);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v14 = (id)gLogObj;
              v23 = type[0];
              if (os_log_type_enabled(v14, (os_log_type_t)type[0]))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v7 + 407;
                v281 = 2080;
                v282 = (nw_protocol *)" ";
                v283 = 2048;
                *(_QWORD *)v284 = a1;
                _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s %{public}s%sCannot add input handler %p to itself, backtrace limit exceeded", buf, 0x2Au);
              }
            }

          }
LABEL_41:
          if (v13)
LABEL_42:
            free(v13);
LABEL_43:
          v24 = 0;
LABEL_475:

          return v24;
        }
        __nwlog_obj();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
        v13 = (char *)_os_log_send_and_compose_impl();

        type[0] = 16;
        LOBYTE(v279) = 0;
        if (!__nwlog_fault(v13, type, &v279))
          goto LABEL_41;
        if (type[0] == 17)
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v41 = type[0];
          if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl(&dword_182FBE000, v36, v41, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_195;
        }
        if (!(_BYTE)v279)
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v69 = type[0];
          if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl(&dword_182FBE000, v36, v69, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_195;
        }
        v56 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v59 = type[0];
        v60 = os_log_type_enabled(v36, (os_log_type_t)type[0]);
        if (!v56)
        {
          if (v60)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl(&dword_182FBE000, v36, v59, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_195;
        }
        if (v60)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v56;
          _os_log_impl(&dword_182FBE000, v36, v59, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
        v13 = (char *)_os_log_send_and_compose_impl();

        type[0] = 16;
        LOBYTE(v279) = 0;
        if (!__nwlog_fault(v13, type, &v279))
          goto LABEL_41;
        if (type[0] == 17)
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v39 = type[0];
          if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl(&dword_182FBE000, v36, v39, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_195;
        }
        if (!(_BYTE)v279)
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v68 = type[0];
          if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl(&dword_182FBE000, v36, v68, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_195;
        }
        v56 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v57 = type[0];
        v58 = os_log_type_enabled(v36, (os_log_type_t)type[0]);
        if (!v56)
        {
          if (v58)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl(&dword_182FBE000, v36, v57, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_195;
        }
        if (v58)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v56;
          _os_log_impl(&dword_182FBE000, v36, v57, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v56);
      if (!v13)
        goto LABEL_43;
      goto LABEL_42;
    }
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
    v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(v279) = 0;
    if (!__nwlog_fault(v13, type, &v279))
      goto LABEL_41;
    if (type[0] == 17)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v37 = type[0];
      if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)v279)
    {
      v53 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v54 = type[0];
      v55 = os_log_type_enabled(v36, (os_log_type_t)type[0]);
      if (v53)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v53;
          _os_log_impl(&dword_182FBE000, v36, v54, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v53);
        goto LABEL_41;
      }
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_182FBE000, v36, v54, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v67 = type[0];
      if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_182FBE000, v36, v67, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_195:

    goto LABEL_41;
  }
  __nwlog_obj();
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
  v32 = (char *)_os_log_send_and_compose_impl();

  type[0] = 16;
  LOBYTE(v279) = 0;
  if (__nwlog_fault(v32, type, &v279))
  {
    if (type[0] == 17)
    {
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v34 = type[0];
      if (os_log_type_enabled(v33, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v279)
    {
      v50 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v51 = type[0];
      v52 = os_log_type_enabled(v33, (os_log_type_t)type[0]);
      if (v50)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v50;
          _os_log_impl(&dword_182FBE000, v33, v51, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v50);
        goto LABEL_184;
      }
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_182FBE000, v33, v51, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v66 = type[0];
      if (os_log_type_enabled(v33, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_182FBE000, v33, v66, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_184:
  if (v32)
    free(v32);
  return 0;
}

void sub_18349ADF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_implementation_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *output_handler_context;
  _BOOL8 v12;
  void *v13;
  uint64_t extra;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  nw_protocol_callbacks *callbacks;
  nw_protocol_callbacks *v31;
  uint64_t (*supports_external_data)(nw_protocol *);
  void *v33;
  char v34;
  id v35;
  nw_protocol *default_input_handler;
  const char *v37;
  NSObject *v38;
  os_log_type_t v39;
  nw_protocol *v40;
  NSObject *v41;
  nw_protocol_callbacks *v42;
  nw_protocol_callbacks *v43;
  nw_protocol_callbacks *v44;
  uint64_t (*v45)(nw_protocol *);
  void *v46;
  char v47;
  char *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  nw_protocol *v51;
  id v52;
  const char *v53;
  NSObject *v54;
  os_log_type_t v55;
  os_log_type_t v56;
  nw_protocol *v57;
  const char *v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  nw_protocol_callbacks *v62;
  int v63;
  int v64;
  __int16 v65;
  nw_protocol_callbacks *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void (*v70)(uint64_t, _QWORD);
  id v71;
  const char *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  NSObject *v76;
  char *v77;
  os_log_type_t v78;
  _BOOL4 v79;
  nw_protocol_callbacks *v80;
  nw_protocol_callbacks *v81;
  void (**v82)(_QWORD);
  const void *v83;
  nw_protocol_callbacks *v84;
  int v85;
  int v86;
  char v87;
  nw_protocol *v88;
  char *v89;
  os_log_type_t v90;
  os_log_type_t v91;
  nw_protocol_callbacks *v92;
  nw_protocol_callbacks *v93;
  void (**v94)(_QWORD);
  const void *v95;
  os_log_type_t v96;
  void *v98;
  char *v99;
  NSObject *v100;
  os_log_type_t v101;
  void *v102;
  NSObject *v103;
  os_log_type_t v104;
  void *v105;
  os_log_type_t v106;
  void *v107;
  os_log_type_t v108;
  void *v109;
  os_log_type_t v110;
  void *v111;
  os_log_type_t v112;
  char *v113;
  os_log_type_t v114;
  _BOOL4 v115;
  char *v116;
  os_log_type_t v117;
  _BOOL4 v118;
  os_log_type_t v119;
  _BOOL4 v120;
  os_log_type_t v121;
  _BOOL4 v122;
  os_log_type_t v123;
  _BOOL4 v124;
  os_log_type_t v125;
  _BOOL4 v126;
  NSObject *v127;
  void *v128;
  NSObject *v129;
  os_log_type_t v130;
  NSObject *v131;
  uint64_t v132;
  os_log_type_t v133;
  os_log_type_t v134;
  os_log_type_t v135;
  os_log_type_t v136;
  os_log_type_t v137;
  os_log_type_t v138;
  char *backtrace_string;
  _BOOL4 v140;
  os_log_type_t v141;
  os_log_type_t v142;
  char *v143;
  char v144;
  char v145;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v148;
  char *v149;
  __int16 v150;
  const char *v151;
  __int16 v152;
  _BYTE v153[28];
  __int128 v154;
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v8 = p_output_handler;
    v9 = v8;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v10 = *((_QWORD *)v8 + 1);
      if (v10)
      {
        if (*(_QWORD *)(v10 + 80))
        {
          if (a2)
          {
            if (a3)
            {
              if (*(_DWORD *)(v10 + 64) == 3)
              {
                if ((v8[405] & 0x80000000) == 0 && gLogDatapath)
                {
                  __nwlog_obj();
                  v127 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                    v148 = 2082;
                    v149 = v9 + 407;
                    v150 = 2080;
                    v151 = " ";
                    v152 = 2048;
                    *(_QWORD *)v153 = nw_protocol_flow_for_protocol((NWConcrete_nw_protocol_instance *)v9, (uint64_t)a2);
                    *(_WORD *)&v153[8] = 2048;
                    *(_QWORD *)&v153[10] = a3;
                    _os_log_impl(&dword_182FBE000, v127, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReplacing input handler for flow %llx to %p", buf, 0x34u);
                  }

                }
                output_handler_context = a2->output_handler_context;
                if (!output_handler_context)
                {
                  if ((v9[405] & 0x80000000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v41 = (id)gLogObj;
                    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                      v148 = 2082;
                      v149 = v9 + 407;
                      v150 = 2080;
                      v151 = " ";
                      v152 = 2048;
                      *(_QWORD *)v153 = a2;
                      _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sOutput handler context doesn't exist on protocol %p", buf, 0x2Au);
                    }

                  }
                  goto LABEL_157;
                }
                a2->output_handler_context = 0;
                v145 = 0;
                v12 = nw_hash_table_add_object(*((_QWORD *)v9 + 29), (uint64_t)a3, &v145);
                if (v145)
                {
                  v13 = (void *)v12;
                  if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
                  {
                    __nwlog_obj();
                    v131 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
                    {
                      v132 = nw_protocol_flow_for_protocol((NWConcrete_nw_protocol_instance *)v9, (uint64_t)a3);
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                      v148 = 2082;
                      v149 = v9 + 407;
                      v150 = 2080;
                      v151 = " ";
                      v152 = 2048;
                      *(_QWORD *)v153 = a3;
                      *(_WORD *)&v153[8] = 2048;
                      *(_QWORD *)&v153[10] = v132;
                      _os_log_impl(&dword_182FBE000, v131, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sMultiplexing protocol added protocol %p to hash table for flow %llx", buf, 0x34u);
                    }

                  }
                  a3->output_handler_context = v13;
                  extra = nw_hash_node_get_extra((uint64_t)v13);
                  v15 = extra;
                  if (extra)
                  {
                    *(_QWORD *)(extra + 16) = 0;
                    *(_QWORD *)(extra + 24) = extra + 16;
                    v16 = (char *)(output_handler_context + 6);
                    v17 = output_handler_context[6];
                    if (v17)
                    {
                      *(_QWORD *)(extra + 16) = v17;
                      *(_QWORD *)(output_handler_context[6] + 40) = extra + 16;
                      *(_QWORD *)(extra + 24) = output_handler_context[7];
                      output_handler_context[6] = 0;
                      output_handler_context[7] = v16;
                    }
                    v18 = (void *)output_handler_context[5];
                    output_handler_context[6] = 0;
                    output_handler_context[7] = v16;
                    *(_QWORD *)extra = output_handler_context[4];
                    objc_storeStrong((id *)(extra + 8), v18);
                    v19 = (void *)output_handler_context[5];
                    output_handler_context[5] = 0;

                    *(_OWORD *)(v15 + 32) = *((_OWORD *)output_handler_context + 4);
                    v20 = *(_WORD *)(v15 + 52) & 0xFFFE | *((_WORD *)output_handler_context + 42) & 1;
                    *(_WORD *)(v15 + 52) = *(_WORD *)(v15 + 52) & 0xFFFE | *((_WORD *)output_handler_context + 42) & 1;
                    v21 = v20 & 0xFFFFFFFD | (2 * ((*((unsigned __int16 *)output_handler_context + 42) >> 1) & 1));
                    *(_WORD *)(v15 + 52) = v21;
                    v22 = v21 & 0xFFFFFFFB | (4 * ((*((unsigned __int16 *)output_handler_context + 42) >> 2) & 1));
                    *(_WORD *)(v15 + 52) = v22;
                    v23 = v22 & 0xFFFFFFF7 | (8 * ((*((unsigned __int16 *)output_handler_context + 42) >> 3) & 1));
                    *(_WORD *)(v15 + 52) = v23;
                    v24 = v23 & 0xFFFFFFEF | (16 * ((*((unsigned __int16 *)output_handler_context + 42) >> 4) & 1));
                    *(_WORD *)(v15 + 52) = v24;
                    v25 = v24 & 0xFFFFFFDF | (32 * ((*((unsigned __int16 *)output_handler_context + 42) >> 5) & 1));
                    *(_WORD *)(v15 + 52) = v25;
                    v26 = v25 & 0xFFFFFF7F | (((*((unsigned __int16 *)output_handler_context + 42) >> 7) & 1) << 7);
                    *(_WORD *)(v15 + 52) = v26;
                    v27 = v26 & 0xFFFFFEFF | ((HIBYTE(*((unsigned __int16 *)output_handler_context + 42)) & 1) << 8);
                    *(_WORD *)(v15 + 52) = v27;
                    v28 = v27 & 0xFFFFFDFF | (((*((unsigned __int16 *)output_handler_context + 42) >> 9) & 1) << 9);
                    *(_WORD *)(v15 + 52) = v28;
                    v29 = v28 & 0xFFFFFBFF | (((*((unsigned __int16 *)output_handler_context + 42) >> 10) & 1) << 10);
                    *(_WORD *)(v15 + 52) = v29;
                    *(_WORD *)(v15 + 52) = v29 & 0xF7FF | *((_WORD *)output_handler_context + 42) & 0x800;
                    goto LABEL_20;
                  }
                  __nwlog_obj();
                  v128 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_protocol_flow_state_move";
                  v143 = (char *)_os_log_send_and_compose_impl();

                  LOBYTE(v154) = 16;
                  type = OS_LOG_TYPE_DEFAULT;
                  if (__nwlog_fault(v143, &v154, &type))
                  {
                    if (v154 == 17)
                    {
                      __nwlog_obj();
                      v129 = objc_claimAutoreleasedReturnValue();
                      v130 = v154;
                      if (os_log_type_enabled(v129, (os_log_type_t)v154))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_protocol_flow_state_move";
                        _os_log_impl(&dword_182FBE000, v129, v130, "%{public}s called with null dst", buf, 0xCu);
                      }
                    }
                    else if (type)
                    {
                      backtrace_string = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v129 = objc_claimAutoreleasedReturnValue();
                      v142 = v154;
                      v140 = os_log_type_enabled(v129, (os_log_type_t)v154);
                      if (backtrace_string)
                      {
                        if (v140)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_protocol_flow_state_move";
                          v148 = 2082;
                          v149 = backtrace_string;
                          _os_log_impl(&dword_182FBE000, v129, v142, "%{public}s called with null dst, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(backtrace_string);
                        goto LABEL_281;
                      }
                      if (v140)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_protocol_flow_state_move";
                        _os_log_impl(&dword_182FBE000, v129, v142, "%{public}s called with null dst, no backtrace", buf, 0xCu);
                      }
                    }
                    else
                    {
                      __nwlog_obj();
                      v129 = objc_claimAutoreleasedReturnValue();
                      v141 = v154;
                      if (os_log_type_enabled(v129, (os_log_type_t)v154))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_protocol_flow_state_move";
                        _os_log_impl(&dword_182FBE000, v129, v141, "%{public}s called with null dst, backtrace limit exceeded", buf, 0xCu);
                      }
                    }

                  }
LABEL_281:
                  if (v143)
                    free(v143);
LABEL_20:
                  if (!a3->output_handler)
                  {
                    a3->output_handler = a1;
                    if (a1->handle == &nw_protocol_ref_counted_handle)
                    {
                      callbacks = a1[1].callbacks;
                      if (callbacks)
                        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
                    }
                  }
                  v31 = a3->callbacks;
                  if (v31)
                  {
                    supports_external_data = (uint64_t (*)(nw_protocol *))v31->supports_external_data;
                    if (supports_external_data)
                    {
                      v33 = a3->handle;
                      if (v33 == &nw_protocol_ref_counted_handle)
                      {
                        v62 = a3[1].callbacks;
                        if (v62)
                          a3[1].callbacks = (nw_protocol_callbacks *)((char *)&v62->add_input_handler + 1);
                        v34 = -1;
                      }
                      else
                      {
                        v34 = 0;
                      }
                      *(_QWORD *)buf = a3;
                      buf[8] = v34;
                      v63 = supports_external_data(a3);
                      v64 = v63;
                      if (v33 == &nw_protocol_ref_counted_handle)
                      {
                        nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                        if (v64)
                          goto LABEL_78;
                      }
                      else if (v63)
                      {
LABEL_78:
                        v65 = *(_WORD *)(v15 + 52) | 0x400;
                        goto LABEL_81;
                      }
                    }
                  }
                  v65 = *(_WORD *)(v15 + 52) & 0xFBFF;
LABEL_81:
                  *(_WORD *)(v15 + 52) = v65;
                  if (a1->default_input_handler == a2)
                  {
                    if (a2 != a3)
                    {
                      if (a2->handle == &nw_protocol_ref_counted_handle)
                      {
                        v92 = a2[1].callbacks;
                        if (v92)
                        {
                          v93 = (nw_protocol_callbacks *)((char *)v92 - 1);
                          a2[1].callbacks = v93;
                          if (!v93)
                          {
                            v94 = *(void (***)(_QWORD))a2[1].flow_id;
                            if (v94)
                            {
                              *(_QWORD *)a2[1].flow_id = 0;
                              v94[2](v94);
                              _Block_release(v94);
                            }
                            if ((a2[1].flow_id[8] & 1) != 0)
                            {
                              v95 = *(const void **)a2[1].flow_id;
                              if (v95)
                                _Block_release(v95);
                            }
                            free(a2);
                          }
                        }
                      }
                      a1->default_input_handler = a3;
                      if (a3->handle == &nw_protocol_ref_counted_handle)
                      {
                        v66 = a3[1].callbacks;
                        if (v66)
                          a3[1].callbacks = (nw_protocol_callbacks *)((char *)&v66->add_input_handler + 1);
                      }
                    }
                    *(_OWORD *)a1->flow_id = *(_OWORD *)a3->flow_id;
                    v67 = nw_protocol_instance_copy_path(v9, -1);
                    v68 = (void *)*((_QWORD *)v9 + 36);
                    *((_QWORD *)v9 + 36) = v67;

                  }
                  if (nw_hash_table_remove_node(*((_QWORD *)v9 + 29), (uint64_t)output_handler_context))
                  {
                    v69 = *((_QWORD *)v9 + 1);
                    v70 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v69 + 80) + 32);
                    if (v70 && *(_QWORD *)v15)
                    {
                      v70(v69, *(_QWORD *)v15);
                    }
                    else
                    {
                      v75 = 1;
                      if (v9[405] < 0 || !gLogDatapath)
                        goto LABEL_158;
                      __nwlog_obj();
                      v76 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                        v148 = 2082;
                        v149 = v9 + 407;
                        v150 = 2080;
                        v151 = " ";
                        _os_log_impl(&dword_182FBE000, v76, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNot calling instance replace flow state", buf, 0x20u);
                      }

                    }
                    goto LABEL_126;
                  }
                  if ((v9[405] & 0x80000000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v71 = (id)gLogObj;
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                    v148 = 2082;
                    v149 = v9 + 407;
                    v150 = 2080;
                    v151 = " ";
                    v152 = 2048;
                    *(_QWORD *)v153 = a2;
                    v72 = (const char *)_os_log_send_and_compose_impl();

                    LOBYTE(v154) = 16;
                    type = OS_LOG_TYPE_DEFAULT;
                    if (__nwlog_fault(v72, &v154, &type))
                    {
                      if (v154 == 17)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v73 = (id)gLogObj;
                        v74 = v154;
                        if (os_log_type_enabled(v73, (os_log_type_t)v154))
                        {
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                          v148 = 2082;
                          v149 = v9 + 407;
                          v150 = 2080;
                          v151 = " ";
                          v152 = 2048;
                          *(_QWORD *)v153 = a2;
                          _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s %{public}s%sFailed to remove protocol node for protocol %p from table", buf, 0x2Au);
                        }
                      }
                      else if (type)
                      {
                        v77 = (char *)__nw_create_backtrace_string();
                        __nwlog_obj();
                        v73 = objc_claimAutoreleasedReturnValue();
                        v78 = v154;
                        v79 = os_log_type_enabled(v73, (os_log_type_t)v154);
                        if (v77)
                        {
                          if (v79)
                          {
                            *(_DWORD *)buf = 136447234;
                            *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                            v148 = 2082;
                            v149 = v9 + 407;
                            v150 = 2080;
                            v151 = " ";
                            v152 = 2048;
                            *(_QWORD *)v153 = a2;
                            *(_WORD *)&v153[8] = 2082;
                            *(_QWORD *)&v153[10] = v77;
                            _os_log_impl(&dword_182FBE000, v73, v78, "%{public}s %{public}s%sFailed to remove protocol node for protocol %p from table, dumping backtrace:%{public}s", buf, 0x34u);
                          }

                          free(v77);
                          if (!v72)
                            goto LABEL_157;
                          goto LABEL_155;
                        }
                        if (v79)
                        {
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                          v148 = 2082;
                          v149 = v9 + 407;
                          v150 = 2080;
                          v151 = " ";
                          v152 = 2048;
                          *(_QWORD *)v153 = a2;
                          _os_log_impl(&dword_182FBE000, v73, v78, "%{public}s %{public}s%sFailed to remove protocol node for protocol %p from table, no backtrace", buf, 0x2Au);
                        }
                      }
                      else
                      {
                        __nwlog_obj();
                        v73 = objc_claimAutoreleasedReturnValue();
                        v91 = v154;
                        if (os_log_type_enabled(v73, (os_log_type_t)v154))
                        {
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                          v148 = 2082;
                          v149 = v9 + 407;
                          v150 = 2080;
                          v151 = " ";
                          v152 = 2048;
                          *(_QWORD *)v153 = a2;
                          _os_log_impl(&dword_182FBE000, v73, v91, "%{public}s %{public}s%sFailed to remove protocol node for protocol %p from table, backtrace limit exceeded", buf, 0x2Au);
                        }
                      }

                    }
                    if (v72)
                    {
LABEL_155:
                      v89 = (char *)v72;
                      goto LABEL_156;
                    }
                  }
LABEL_157:
                  v75 = 0;
                  goto LABEL_158;
                }
                v154 = *(_OWORD *)a3->flow_id;
                if (v9[405] < 0)
                  goto LABEL_157;
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v52 = (id)gLogObj;
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                v148 = 2082;
                v149 = v9 + 407;
                v150 = 2080;
                v151 = " ";
                v152 = 1042;
                *(_DWORD *)v153 = 16;
                *(_WORD *)&v153[4] = 2098;
                *(_QWORD *)&v153[6] = &v154;
                v53 = (const char *)_os_log_send_and_compose_impl();

                type = OS_LOG_TYPE_ERROR;
                v144 = 0;
                if (__nwlog_fault(v53, &type, &v144))
                {
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v54 = (id)gLogObj;
                    v55 = type;
                    if (os_log_type_enabled(v54, type))
                    {
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                      v148 = 2082;
                      v149 = v9 + 407;
                      v150 = 2080;
                      v151 = " ";
                      v152 = 1042;
                      *(_DWORD *)v153 = 16;
                      *(_WORD *)&v153[4] = 2098;
                      *(_QWORD *)&v153[6] = &v154;
                      _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P", buf, 0x30u);
                    }
                  }
                  else if (v144)
                  {
                    v58 = __nw_create_backtrace_string();
                    if (v58)
                    {
                      v59 = (char *)v58;
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v60 = (id)gLogObj;
                      v61 = type;
                      if (os_log_type_enabled(v60, type))
                      {
                        *(_DWORD *)buf = 136447490;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                        v148 = 2082;
                        v149 = v9 + 407;
                        v150 = 2080;
                        v151 = " ";
                        v152 = 1042;
                        *(_DWORD *)v153 = 16;
                        *(_WORD *)&v153[4] = 2098;
                        *(_QWORD *)&v153[6] = &v154;
                        *(_WORD *)&v153[14] = 2082;
                        *(_QWORD *)&v153[16] = v59;
                        _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P, dumping backtrace:%{public}s", buf, 0x3Au);
                      }

                      free(v59);
                      if (!v53)
                        goto LABEL_157;
LABEL_150:
                      v89 = (char *)v53;
                      goto LABEL_156;
                    }
                    __nwlog_obj();
                    v54 = objc_claimAutoreleasedReturnValue();
                    v96 = type;
                    if (os_log_type_enabled(v54, type))
                    {
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                      v148 = 2082;
                      v149 = v9 + 407;
                      v150 = 2080;
                      v151 = " ";
                      v152 = 1042;
                      *(_DWORD *)v153 = 16;
                      *(_WORD *)&v153[4] = 2098;
                      *(_QWORD *)&v153[6] = &v154;
                      _os_log_impl(&dword_182FBE000, v54, v96, "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P, no backtrace", buf, 0x30u);
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v54 = (id)gLogObj;
                    v90 = type;
                    if (os_log_type_enabled(v54, type))
                    {
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                      v148 = 2082;
                      v149 = v9 + 407;
                      v150 = 2080;
                      v151 = " ";
                      v152 = 1042;
                      *(_DWORD *)v153 = 16;
                      *(_WORD *)&v153[4] = 2098;
                      *(_QWORD *)&v153[6] = &v154;
                      _os_log_impl(&dword_182FBE000, v54, v90, "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P, backtrace limit exceeded", buf, 0x30u);
                    }
                  }

                }
LABEL_149:
                if (!v53)
                  goto LABEL_157;
                goto LABEL_150;
              }
              if (a1->default_input_handler != a2)
              {
                if (v8[405] < 0)
                  goto LABEL_157;
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v35 = (id)gLogObj;
                default_input_handler = a1->default_input_handler;
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                v148 = 2082;
                v149 = v9 + 407;
                v150 = 2080;
                v151 = " ";
                v152 = 2048;
                *(_QWORD *)v153 = default_input_handler;
                *(_WORD *)&v153[8] = 2048;
                *(_QWORD *)&v153[10] = a2;
                v37 = (const char *)_os_log_send_and_compose_impl();

                LOBYTE(v154) = 16;
                type = OS_LOG_TYPE_DEFAULT;
                if (__nwlog_fault(v37, &v154, &type))
                {
                  if (v154 == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v38 = (id)gLogObj;
                    v39 = v154;
                    if (os_log_type_enabled(v38, (os_log_type_t)v154))
                    {
                      v40 = a1->default_input_handler;
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                      v148 = 2082;
                      v149 = v9 + 407;
                      v150 = 2080;
                      v151 = " ";
                      v152 = 2048;
                      *(_QWORD *)v153 = v40;
                      *(_WORD *)&v153[8] = 2048;
                      *(_QWORD *)&v153[10] = a2;
                      _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s %{public}s%sOld input handler does not match (%p != %p)", buf, 0x34u);
                    }
                  }
                  else if (type)
                  {
                    v48 = (char *)__nw_create_backtrace_string();
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v38 = (id)gLogObj;
                    v49 = v154;
                    v50 = os_log_type_enabled(v38, (os_log_type_t)v154);
                    if (v48)
                    {
                      if (v50)
                      {
                        v51 = a1->default_input_handler;
                        *(_DWORD *)buf = 136447490;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                        v148 = 2082;
                        v149 = v9 + 407;
                        v150 = 2080;
                        v151 = " ";
                        v152 = 2048;
                        *(_QWORD *)v153 = v51;
                        *(_WORD *)&v153[8] = 2048;
                        *(_QWORD *)&v153[10] = a2;
                        *(_WORD *)&v153[18] = 2082;
                        *(_QWORD *)&v153[20] = v48;
                        _os_log_impl(&dword_182FBE000, v38, v49, "%{public}s %{public}s%sOld input handler does not match (%p != %p), dumping backtrace:%{public}s", buf, 0x3Eu);
                      }

                      free(v48);
                      if (!v37)
                        goto LABEL_157;
LABEL_131:
                      v89 = (char *)v37;
LABEL_156:
                      free(v89);
                      goto LABEL_157;
                    }
                    if (v50)
                    {
                      v88 = a1->default_input_handler;
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                      v148 = 2082;
                      v149 = v9 + 407;
                      v150 = 2080;
                      v151 = " ";
                      v152 = 2048;
                      *(_QWORD *)v153 = v88;
                      *(_WORD *)&v153[8] = 2048;
                      *(_QWORD *)&v153[10] = a2;
                      _os_log_impl(&dword_182FBE000, v38, v49, "%{public}s %{public}s%sOld input handler does not match (%p != %p), no backtrace", buf, 0x34u);
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v38 = (id)gLogObj;
                    v56 = v154;
                    if (os_log_type_enabled(v38, (os_log_type_t)v154))
                    {
                      v57 = a1->default_input_handler;
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                      v148 = 2082;
                      v149 = v9 + 407;
                      v150 = 2080;
                      v151 = " ";
                      v152 = 2048;
                      *(_QWORD *)v153 = v57;
                      *(_WORD *)&v153[8] = 2048;
                      *(_QWORD *)&v153[10] = a2;
                      _os_log_impl(&dword_182FBE000, v38, v56, "%{public}s %{public}s%sOld input handler does not match (%p != %p), backtrace limit exceeded", buf, 0x34u);
                    }
                  }

                }
                if (!v37)
                  goto LABEL_157;
                goto LABEL_131;
              }
              if (a2 != a3)
              {
                if (a2->handle == &nw_protocol_ref_counted_handle)
                {
                  v80 = a2[1].callbacks;
                  if (v80)
                  {
                    v81 = (nw_protocol_callbacks *)((char *)v80 - 1);
                    a2[1].callbacks = v81;
                    if (!v81)
                    {
                      v82 = *(void (***)(_QWORD))a2[1].flow_id;
                      if (v82)
                      {
                        *(_QWORD *)a2[1].flow_id = 0;
                        v82[2](v82);
                        _Block_release(v82);
                      }
                      if ((a2[1].flow_id[8] & 1) != 0)
                      {
                        v83 = *(const void **)a2[1].flow_id;
                        if (v83)
                          _Block_release(v83);
                      }
                      free(a2);
                    }
                  }
                }
                a1->default_input_handler = a3;
                if (a3->handle == &nw_protocol_ref_counted_handle)
                {
                  v42 = a3[1].callbacks;
                  if (v42)
                    a3[1].callbacks = (nw_protocol_callbacks *)((char *)&v42->add_input_handler + 1);
                }
              }
              *(_OWORD *)a1->flow_id = *(_OWORD *)a3->flow_id;
              if (!a3->output_handler)
              {
                a3->output_handler = a1;
                if (a1->handle == &nw_protocol_ref_counted_handle)
                {
                  v43 = a1[1].callbacks;
                  if (v43)
                    a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v43->add_input_handler + 1);
                }
              }
              v44 = a3->callbacks;
              if (v44)
              {
                v45 = (uint64_t (*)(nw_protocol *))v44->supports_external_data;
                if (v45)
                {
                  v46 = a3->handle;
                  if (v46 == &nw_protocol_ref_counted_handle)
                  {
                    v84 = a3[1].callbacks;
                    if (v84)
                      a3[1].callbacks = (nw_protocol_callbacks *)((char *)&v84->add_input_handler + 1);
                    v47 = -1;
                  }
                  else
                  {
                    v47 = 0;
                  }
                  *(_QWORD *)buf = a3;
                  buf[8] = v47;
                  v85 = v45(a3);
                  v86 = v85;
                  if (v46 == &nw_protocol_ref_counted_handle)
                  {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                    if (v86)
                      goto LABEL_122;
                  }
                  else if (v85)
                  {
LABEL_122:
                    v87 = v9[403] | 2;
LABEL_125:
                    v9[403] = v87;
LABEL_126:
                    v75 = 1;
LABEL_158:

                    return v75;
                  }
                }
              }
              v87 = v9[403] & 0xFD;
              goto LABEL_125;
            }
            __nwlog_obj();
            v111 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
            v53 = (const char *)_os_log_send_and_compose_impl();

            LOBYTE(v154) = 16;
            type = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v53, &v154, &type))
              goto LABEL_149;
            if (v154 == 17)
            {
              __nwlog_obj();
              v103 = objc_claimAutoreleasedReturnValue();
              v112 = v154;
              if (os_log_type_enabled(v103, (os_log_type_t)v154))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                _os_log_impl(&dword_182FBE000, v103, v112, "%{public}s called with null new_input_handler", buf, 0xCu);
              }
LABEL_269:

              goto LABEL_149;
            }
            if (type == OS_LOG_TYPE_DEFAULT)
            {
              __nwlog_obj();
              v103 = objc_claimAutoreleasedReturnValue();
              v138 = v154;
              if (os_log_type_enabled(v103, (os_log_type_t)v154))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                _os_log_impl(&dword_182FBE000, v103, v138, "%{public}s called with null new_input_handler, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_269;
            }
            v116 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v103 = objc_claimAutoreleasedReturnValue();
            v125 = v154;
            v126 = os_log_type_enabled(v103, (os_log_type_t)v154);
            if (!v116)
            {
              if (v126)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                _os_log_impl(&dword_182FBE000, v103, v125, "%{public}s called with null new_input_handler, no backtrace", buf, 0xCu);
              }
              goto LABEL_269;
            }
            if (v126)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
              v148 = 2082;
              v149 = v116;
              _os_log_impl(&dword_182FBE000, v103, v125, "%{public}s called with null new_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
          else
          {
            __nwlog_obj();
            v109 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
            v53 = (const char *)_os_log_send_and_compose_impl();

            LOBYTE(v154) = 16;
            type = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v53, &v154, &type))
              goto LABEL_149;
            if (v154 == 17)
            {
              __nwlog_obj();
              v103 = objc_claimAutoreleasedReturnValue();
              v110 = v154;
              if (os_log_type_enabled(v103, (os_log_type_t)v154))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                _os_log_impl(&dword_182FBE000, v103, v110, "%{public}s called with null old_input_handler", buf, 0xCu);
              }
              goto LABEL_269;
            }
            if (type == OS_LOG_TYPE_DEFAULT)
            {
              __nwlog_obj();
              v103 = objc_claimAutoreleasedReturnValue();
              v137 = v154;
              if (os_log_type_enabled(v103, (os_log_type_t)v154))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                _os_log_impl(&dword_182FBE000, v103, v137, "%{public}s called with null old_input_handler, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_269;
            }
            v116 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v103 = objc_claimAutoreleasedReturnValue();
            v123 = v154;
            v124 = os_log_type_enabled(v103, (os_log_type_t)v154);
            if (!v116)
            {
              if (v124)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                _os_log_impl(&dword_182FBE000, v103, v123, "%{public}s called with null old_input_handler, no backtrace", buf, 0xCu);
              }
              goto LABEL_269;
            }
            if (v124)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
              v148 = 2082;
              v149 = v116;
              _os_log_impl(&dword_182FBE000, v103, v123, "%{public}s called with null old_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
        }
        else
        {
          __nwlog_obj();
          v107 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
          v53 = (const char *)_os_log_send_and_compose_impl();

          LOBYTE(v154) = 16;
          type = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v53, &v154, &type))
            goto LABEL_149;
          if (v154 == 17)
          {
            __nwlog_obj();
            v103 = objc_claimAutoreleasedReturnValue();
            v108 = v154;
            if (os_log_type_enabled(v103, (os_log_type_t)v154))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
              _os_log_impl(&dword_182FBE000, v103, v108, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
            }
            goto LABEL_269;
          }
          if (type == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            v103 = objc_claimAutoreleasedReturnValue();
            v136 = v154;
            if (os_log_type_enabled(v103, (os_log_type_t)v154))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
              _os_log_impl(&dword_182FBE000, v103, v136, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_269;
          }
          v116 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v103 = objc_claimAutoreleasedReturnValue();
          v121 = v154;
          v122 = os_log_type_enabled(v103, (os_log_type_t)v154);
          if (!v116)
          {
            if (v122)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
              _os_log_impl(&dword_182FBE000, v103, v121, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
            }
            goto LABEL_269;
          }
          if (v122)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
            v148 = 2082;
            v149 = v116;
            _os_log_impl(&dword_182FBE000, v103, v121, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
      }
      else
      {
        __nwlog_obj();
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
        v53 = (const char *)_os_log_send_and_compose_impl();

        LOBYTE(v154) = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v53, &v154, &type))
          goto LABEL_149;
        if (v154 == 17)
        {
          __nwlog_obj();
          v103 = objc_claimAutoreleasedReturnValue();
          v106 = v154;
          if (os_log_type_enabled(v103, (os_log_type_t)v154))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
            _os_log_impl(&dword_182FBE000, v103, v106, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_269;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v103 = objc_claimAutoreleasedReturnValue();
          v135 = v154;
          if (os_log_type_enabled(v103, (os_log_type_t)v154))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
            _os_log_impl(&dword_182FBE000, v103, v135, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_269;
        }
        v116 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v119 = v154;
        v120 = os_log_type_enabled(v103, (os_log_type_t)v154);
        if (!v116)
        {
          if (v120)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
            _os_log_impl(&dword_182FBE000, v103, v119, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_269;
        }
        if (v120)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
          v148 = 2082;
          v149 = v116;
          _os_log_impl(&dword_182FBE000, v103, v119, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
      v53 = (const char *)_os_log_send_and_compose_impl();

      LOBYTE(v154) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v53, &v154, &type))
        goto LABEL_149;
      if (v154 == 17)
      {
        __nwlog_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v104 = v154;
        if (os_log_type_enabled(v103, (os_log_type_t)v154))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
          _os_log_impl(&dword_182FBE000, v103, v104, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_269;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v134 = v154;
        if (os_log_type_enabled(v103, (os_log_type_t)v154))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
          _os_log_impl(&dword_182FBE000, v103, v134, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_269;
      }
      v116 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v103 = objc_claimAutoreleasedReturnValue();
      v117 = v154;
      v118 = os_log_type_enabled(v103, (os_log_type_t)v154);
      if (!v116)
      {
        if (v118)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
          _os_log_impl(&dword_182FBE000, v103, v117, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_269;
      }
      if (v118)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
        v148 = 2082;
        v149 = v116;
        _os_log_impl(&dword_182FBE000, v103, v117, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v116);
    goto LABEL_149;
  }
  __nwlog_obj();
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
  v99 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v154) = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v99, &v154, &type))
  {
    if (v154 == 17)
    {
      __nwlog_obj();
      v100 = objc_claimAutoreleasedReturnValue();
      v101 = v154;
      if (os_log_type_enabled(v100, (os_log_type_t)v154))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
        _os_log_impl(&dword_182FBE000, v100, v101, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (type)
    {
      v113 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v100 = objc_claimAutoreleasedReturnValue();
      v114 = v154;
      v115 = os_log_type_enabled(v100, (os_log_type_t)v154);
      if (v113)
      {
        if (v115)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
          v148 = 2082;
          v149 = v113;
          _os_log_impl(&dword_182FBE000, v100, v114, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v113);
        goto LABEL_252;
      }
      if (v115)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
        _os_log_impl(&dword_182FBE000, v100, v114, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v100 = objc_claimAutoreleasedReturnValue();
      v133 = v154;
      if (os_log_type_enabled(v100, (os_log_type_t)v154))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
        _os_log_impl(&dword_182FBE000, v100, v133, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_252:
  if (v99)
    free(v99);
  return 0;
}

void sub_18349CE90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_implementation_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *output_handler_context;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  void (*v19)(void);
  int v20;
  int v21;
  char *v22;
  int v23;
  nw_protocol *default_input_handler;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  char *v30;
  int64_t int64_with_default;
  uint64_t v32;
  dispatch_time_t v33;
  uint64_t v34;
  id v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  nw_protocol_callbacks *callbacks;
  nw_protocol_callbacks *v40;
  void (**v41)(_QWORD);
  const void *v42;
  const char *backtrace_string;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  char *v47;
  os_log_type_t v48;
  nw_protocol_callbacks *v49;
  nw_protocol_callbacks *v50;
  void (**v51)(_QWORD);
  const void *v52;
  os_log_type_t v53;
  void *v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  void *v58;
  os_log_type_t v59;
  void *v60;
  os_log_type_t v61;
  void *v62;
  os_log_type_t v63;
  void *v64;
  char *v65;
  NSObject *v66;
  os_log_type_t v67;
  char *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  char *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  os_log_type_t v74;
  _BOOL4 v75;
  os_log_type_t v76;
  _BOOL4 v77;
  char *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  NSObject *v81;
  NSObject *v82;
  uint64_t v83;
  os_log_type_t v84;
  os_log_type_t v85;
  os_log_type_t v86;
  os_log_type_t v87;
  os_log_type_t v88;
  NSObject *v89;
  NSObject *v90;
  int v91;
  uint64_t v92;
  void *v93;
  char *v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  nw_protocol *output_handler;
  void *v105;
  char v106;
  nw_protocol_callbacks *v107;
  nw_protocol_callbacks *v108;
  void (**v109)(_QWORD);
  const void *v110;
  nw_protocol_callbacks *v111;
  void *v112;
  char v113;
  nw_protocol_callbacks *v114;
  nw_protocol_callbacks *v115;
  uint64_t (*remove_input_handler)(nw_protocol *, nw_protocol *, uint64_t);
  char v117;
  id v118;
  void *v119;
  NSObject *v120;
  os_log_type_t v121;
  char *v122;
  os_log_type_t v123;
  _BOOL4 v124;
  os_log_type_t v125;
  nw_protocol *v126;
  nw_protocol_callbacks *v127;
  nw_protocol_callbacks *v128;
  void (**v129)(_QWORD);
  const void *v130;
  NSObject *v131;
  char *v132;
  os_log_type_t v133;
  _BOOL4 v134;
  void *v135;
  const char *name;
  char *v137;
  NSObject *v138;
  os_log_type_t v139;
  const char *v140;
  NSObject *v141;
  NSObject *v142;
  char *v143;
  _BOOL4 v144;
  const char *v145;
  os_log_type_t v146;
  NSObject *v147;
  os_log_type_t v149;
  const char *v150;
  NSObject *v151;
  NSObject *v152;
  const char *v153;
  NSObject *v154;
  os_log_type_t v155;
  _QWORD v156[4];
  char *v157;
  nw_protocol *v158;
  _QWORD v159[4];
  char *v160;
  _QWORD v161[5];
  char v162;
  os_log_type_t v163;
  nw_protocol *v164;
  char v165;
  os_log_type_t type[8];
  char v167;
  _BYTE buf[24];
  const char *v169;
  _BYTE v170[10];
  __int16 v171;
  char *v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v8 = p_output_handler;
    v9 = v8;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v10 = *((_QWORD *)v8 + 1);
      if (v10)
      {
        if (*(_QWORD *)(v10 + 80))
        {
          if (a2)
          {
            if (a2->output_handler == a1)
            {
              if (a1->handle == &nw_protocol_ref_counted_handle)
              {
                callbacks = a1[1].callbacks;
                if (callbacks)
                {
                  v40 = (nw_protocol_callbacks *)((char *)callbacks - 1);
                  a1[1].callbacks = v40;
                  if (!v40)
                  {
                    v41 = *(void (***)(_QWORD))a1[1].flow_id;
                    if (v41)
                    {
                      *(_QWORD *)a1[1].flow_id = 0;
                      v41[2](v41);
                      _Block_release(v41);
                    }
                    if ((a1[1].flow_id[8] & 1) != 0)
                    {
                      v42 = *(const void **)a1[1].flow_id;
                      if (v42)
                        _Block_release(v42);
                    }
                    free(a1);
                  }
                }
              }
              a2->output_handler = 0;
              v10 = *((_QWORD *)v9 + 1);
            }
            if (*(_DWORD *)(v10 + 64) == 3)
            {
              output_handler_context = a2->output_handler_context;
              if (output_handler_context)
              {
                if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
                {
                  __nwlog_obj();
                  v82 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
                  {
                    v83 = nw_protocol_flow_for_protocol((NWConcrete_nw_protocol_instance *)v9, (uint64_t)a2);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v9 + 407;
                    *(_WORD *)&buf[22] = 2080;
                    v169 = " ";
                    *(_WORD *)v170 = 2048;
                    *(_QWORD *)&v170[2] = v83;
                    _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRemove input handler for flow %llx", buf, 0x2Au);
                  }

                }
                v12 = (void *)output_handler_context[5];
                output_handler_context[4] = 0;
                output_handler_context[5] = 0;

                if (gLogDatapath)
                {
                  __nwlog_obj();
                  v81 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
                    _os_log_impl(&dword_182FBE000, v81, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                  }

                }
                v13 = MEMORY[0x1E0C809B0];
                *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                *(_QWORD *)&buf[8] = 3221225472;
                *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_11351;
                v169 = (const char *)&__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
                *(_QWORD *)v170 = output_handler_context + 6;
                v170[8] = 0;
                v14 = output_handler_context[6];
                do
                {
                  if (!v14)
                    break;
                  v15 = *(_QWORD *)(v14 + 32);
                  v16 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                  v14 = v15;
                }
                while ((v16 & 1) != 0);
                v18 = nw_hash_table_remove_node(*((_QWORD *)v9 + 29), (uint64_t)output_handler_context);
                v19 = *(void (**)(void))(*(_QWORD *)(*((_QWORD *)v9 + 1) + 80) + 24);
                if (v19)
                  v19();
                if (v18)
                {
                  a2->output_handler_context = 0;
                  v20 = nw_hash_table_count(*((_QWORD *)v9 + 29), v17);
                  if (!v20)
                    goto LABEL_25;
                  v21 = v20;
                  *(_QWORD *)buf = 0;
                  *(_QWORD *)&buf[8] = buf;
                  *(_QWORD *)&buf[16] = 0x2020000000;
                  LOBYTE(v169) = 1;
                  v22 = (char *)*((_QWORD *)v9 + 29);
                  v161[0] = v13;
                  v161[1] = 3221225472;
                  v161[2] = ___ZL47nw_protocol_implementation_remove_input_handlerP11nw_protocolS0_b_block_invoke;
                  v161[3] = &unk_1E149BA50;
                  v161[4] = buf;
                  nw_hash_table_apply(v22, (uint64_t)v161);
                  v23 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 24);
                  _Block_object_dispose(buf, 8);
                  if (!v23)
                  {
                    if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      __nwlog_obj();
                      v152 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v9 + 407;
                        *(_WORD *)&buf[22] = 2080;
                        v169 = " ";
                        *(_WORD *)v170 = 2048;
                        *(_QWORD *)&v170[2] = v9;
                        v171 = 1024;
                        LODWORD(v172) = v21;
                        _os_log_impl(&dword_182FBE000, v152, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNot destroying instance %p, still have %u input handlers", buf, 0x30u);
                      }

                    }
                    if (a1->default_input_handler == a2)
                    {
                      v47 = (char *)*((_QWORD *)v9 + 29);
                      v156[0] = v13;
                      v156[1] = 3221225472;
                      v156[2] = ___ZL47nw_protocol_implementation_remove_input_handlerP11nw_protocolS0_b_block_invoke_270;
                      v156[3] = &unk_1E149C860;
                      v158 = a1;
                      v157 = v9;
                      nw_hash_table_apply(v47, (uint64_t)v156);

                    }
                  }
                  else
                  {
LABEL_25:
                    if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      __nwlog_obj();
                      v89 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v9 + 407;
                        *(_WORD *)&buf[22] = 2080;
                        v169 = " ";
                        _os_log_impl(&dword_182FBE000, v89, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNo more input handlers on multiplexing connections, scheduling destroy", buf, 0x20u);
                      }

                    }
                    default_input_handler = a1->default_input_handler;
                    if (default_input_handler)
                    {
                      if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
                      {
                        v49 = default_input_handler[1].callbacks;
                        if (v49)
                        {
                          v50 = (nw_protocol_callbacks *)((char *)v49 - 1);
                          default_input_handler[1].callbacks = v50;
                          if (!v50)
                          {
                            v51 = *(void (***)(_QWORD))default_input_handler[1].flow_id;
                            if (v51)
                            {
                              *(_QWORD *)default_input_handler[1].flow_id = 0;
                              v51[2](v51);
                              _Block_release(v51);
                            }
                            if ((default_input_handler[1].flow_id[8] & 1) != 0)
                            {
                              v52 = *(const void **)default_input_handler[1].flow_id;
                              if (v52)
                                _Block_release(v52);
                            }
                            free(default_input_handler);
                          }
                        }
                      }
                      a1->default_input_handler = 0;
                    }
                    if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      __nwlog_obj();
                      v90 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
                      {
                        v91 = *((_DWORD *)v9 + 40);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_protocol_purge_frame_pool";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v9 + 407;
                        *(_WORD *)&buf[22] = 2080;
                        v169 = " ";
                        *(_WORD *)v170 = 1024;
                        *(_DWORD *)&v170[2] = v91;
                        _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPurging %u empty frames", buf, 0x26u);
                      }

                    }
                    *(_QWORD *)buf = v13;
                    *(_QWORD *)&buf[8] = 3221225472;
                    *(_QWORD *)&buf[16] = ___ZL28nw_protocol_purge_frame_poolP31NWConcrete_nw_protocol_instance_block_invoke;
                    v169 = (const char *)&unk_1E14AB5A0;
                    *(_QWORD *)v170 = v9;
                    v25 = *((_QWORD *)v9 + 21);
                    do
                    {
                      if (!v25)
                        break;
                      v26 = *(_QWORD *)(v25 + 16);
                      v27 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                      v25 = v26;
                    }
                    while ((v27 & 1) != 0);
                    if ((v9[404] & 8) != 0)
                    {
                      nw_protocol_implementation_destroy((NWConcrete_nw_protocol_instance *)v9);
                    }
                    else if ((~v9[402] & 0x18) != 0 || !*((_QWORD *)v9 + 3))
                    {
                      if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
                      {
                        __nwlog_obj();
                        v151 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v9 + 407;
                          *(_WORD *)&buf[22] = 2080;
                          v169 = " ";
                          *(_WORD *)v170 = 2048;
                          *(_QWORD *)&v170[2] = v9;
                          _os_log_impl(&dword_182FBE000, v151, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDestroying instance %p immediately", buf, 0x2Au);
                        }

                      }
                      nw_protocol_implementation_teardown((NWConcrete_nw_protocol_instance *)v9);
                    }
                    else
                    {
                      v28 = *((_QWORD *)v9 + 4);
                      if (v28)
                      {
                        nw_queue_cancel_source(v28, v25);
                        *((_QWORD *)v9 + 4) = 0;
                      }
                      v29 = (void *)*((_QWORD *)v9 + 15);
                      v159[0] = v13;
                      v159[1] = 3221225472;
                      v159[2] = ___ZL47nw_protocol_implementation_remove_input_handlerP11nw_protocolS0_b_block_invoke_269;
                      v159[3] = &unk_1E14ACFD0;
                      v30 = v9;
                      v160 = v30;
                      *((_QWORD *)v9 + 4) = nw_queue_context_create_source(v29, 2, 3, 0, v159, 0);
                      int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_multiplexing_teardown_delay, 10);
                      v32 = *((_QWORD *)v9 + 4);
                      v33 = dispatch_time(0x8000000000000000, 1000000000 * int64_with_default);
                      nw_queue_set_timer_values(v32, v33, 0xFFFFFFFFFFFFFFFFLL, 1000000 * int64_with_default);
                      nw_queue_activate_source(*((_QWORD *)v9 + 4), v34);
                      if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
                      {
                        __nwlog_obj();
                        v154 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136447234;
                          *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v30 + 407;
                          *(_WORD *)&buf[22] = 2080;
                          v169 = " ";
                          *(_WORD *)v170 = 2048;
                          *(_QWORD *)&v170[2] = v30;
                          v171 = 2048;
                          v172 = (char *)int64_with_default;
                          _os_log_impl(&dword_182FBE000, v154, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDestroying instance %p after delay of %lld seconds", buf, 0x34u);
                        }

                      }
                    }
                  }
LABEL_255:
                  v92 = 1;
LABEL_307:

                  return v92;
                }
                if (v9[405] < 0)
                  goto LABEL_306;
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v35 = (id)gLogObj;
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v9 + 407;
                *(_WORD *)&buf[22] = 2080;
                v169 = " ";
                *(_WORD *)v170 = 2048;
                *(_QWORD *)&v170[2] = a2;
                v36 = (char *)_os_log_send_and_compose_impl();

                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(v164) = 0;
                if (__nwlog_fault(v36, type, &v164))
                {
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v37 = (id)gLogObj;
                    v38 = type[0];
                    if (os_log_type_enabled(v37, type[0]))
                    {
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v9 + 407;
                      *(_WORD *)&buf[22] = 2080;
                      v169 = " ";
                      *(_WORD *)v170 = 2048;
                      *(_QWORD *)&v170[2] = a2;
                      _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s %{public}s%sFailed to remove protocol node for protocol %p from table", buf, 0x2Au);
                    }
                  }
                  else if ((_BYTE)v164)
                  {
                    backtrace_string = __nw_create_backtrace_string();
                    if (backtrace_string)
                    {
                      v44 = (char *)backtrace_string;
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v45 = (id)gLogObj;
                      v46 = type[0];
                      if (os_log_type_enabled(v45, type[0]))
                      {
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v9 + 407;
                        *(_WORD *)&buf[22] = 2080;
                        v169 = " ";
                        *(_WORD *)v170 = 2048;
                        *(_QWORD *)&v170[2] = a2;
                        v171 = 2082;
                        v172 = v44;
                        _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s %{public}s%sFailed to remove protocol node for protocol %p from table, dumping backtrace:%{public}s", buf, 0x34u);
                      }

                      free(v44);
                      if (!v36)
                        goto LABEL_306;
                      goto LABEL_85;
                    }
                    __nwlog_obj();
                    v37 = objc_claimAutoreleasedReturnValue();
                    v53 = type[0];
                    if (os_log_type_enabled(v37, type[0]))
                    {
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v9 + 407;
                      *(_WORD *)&buf[22] = 2080;
                      v169 = " ";
                      *(_WORD *)v170 = 2048;
                      *(_QWORD *)&v170[2] = a2;
                      _os_log_impl(&dword_182FBE000, v37, v53, "%{public}s %{public}s%sFailed to remove protocol node for protocol %p from table, no backtrace", buf, 0x2Au);
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v37 = (id)gLogObj;
                    v48 = type[0];
                    if (os_log_type_enabled(v37, type[0]))
                    {
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v9 + 407;
                      *(_WORD *)&buf[22] = 2080;
                      v169 = " ";
                      *(_WORD *)v170 = 2048;
                      *(_QWORD *)&v170[2] = a2;
                      _os_log_impl(&dword_182FBE000, v37, v48, "%{public}s %{public}s%sFailed to remove protocol node for protocol %p from table, backtrace limit exceeded", buf, 0x2Au);
                    }
                  }
                  goto LABEL_83;
                }
LABEL_84:
                if (v36)
LABEL_85:
                  free(v36);
LABEL_306:
                v92 = 0;
                goto LABEL_307;
              }
LABEL_302:
              if ((v9[405] & 0x80000000) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v147 = (id)gLogObj;
                if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v9 + 407;
                  *(_WORD *)&buf[22] = 2080;
                  v169 = " ";
                  *(_WORD *)v170 = 2048;
                  *(_QWORD *)&v170[2] = a2;
                  _os_log_impl(&dword_182FBE000, v147, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sOutput handler context doesn't exist on protocol %p", buf, 0x2Au);
                }

              }
              goto LABEL_306;
            }
LABEL_189:
            if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
            {
              __nwlog_obj();
              v131 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v9 + 407;
                *(_WORD *)&buf[22] = 2080;
                v169 = " ";
                _os_log_impl(&dword_182FBE000, v131, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRemove input handler", buf, 0x20u);
              }

            }
            if (a1->default_input_handler != a2)
              goto LABEL_306;
            if (a2)
            {
              if (a2->handle == &nw_protocol_ref_counted_handle)
              {
                v107 = a2[1].callbacks;
                if (v107)
                {
                  v108 = (nw_protocol_callbacks *)((char *)v107 - 1);
                  a2[1].callbacks = v108;
                  if (!v108)
                  {
                    v109 = *(void (***)(_QWORD))a2[1].flow_id;
                    if (v109)
                    {
                      *(_QWORD *)a2[1].flow_id = 0;
                      v109[2](v109);
                      _Block_release(v109);
                    }
                    if ((a2[1].flow_id[8] & 1) != 0)
                    {
                      v110 = *(const void **)a2[1].flow_id;
                      if (v110)
                        _Block_release(v110);
                    }
                    free(a2);
                  }
                }
              }
              a1->default_input_handler = 0;
            }
            if (gLogDatapath)
            {
              __nwlog_obj();
              v141 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
                _os_log_impl(&dword_182FBE000, v141, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
              }

            }
            v97 = MEMORY[0x1E0C809B0];
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_11351;
            v169 = (const char *)&__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
            *(_QWORD *)v170 = v9 + 208;
            v170[8] = 0;
            v98 = *((_QWORD *)v9 + 26);
            do
            {
              if (!v98)
                break;
              v99 = *(_QWORD *)(v98 + 32);
              v100 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
              v98 = v99;
            }
            while ((v100 & 1) != 0);
            if (gLogDatapath)
            {
              __nwlog_obj();
              v142 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
                _os_log_impl(&dword_182FBE000, v142, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
              }

            }
            *(_QWORD *)buf = v97;
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_11351;
            v169 = (const char *)&__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
            *(_QWORD *)v170 = v9 + 184;
            v170[8] = 0;
            v101 = *((_QWORD *)v9 + 23);
            do
            {
              if (!v101)
                break;
              v102 = *(_QWORD *)(v101 + 32);
              v103 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
              v101 = v102;
            }
            while ((v103 & 1) != 0);
            output_handler = a1->output_handler;
            if (!output_handler)
            {
LABEL_253:
              if ((_DWORD)a3)
                nw_protocol_implementation_teardown((NWConcrete_nw_protocol_instance *)v9);
              goto LABEL_255;
            }
            v105 = output_handler->handle;
            if (v105 == &nw_protocol_ref_counted_handle)
            {
              v111 = output_handler[1].callbacks;
              if (v111)
                output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v111->add_input_handler + 1);
              v106 = -1;
            }
            else
            {
              v106 = 0;
            }
            *(_QWORD *)type = output_handler;
            v167 = v106;
            v112 = a1->handle;
            if (v112 == &nw_protocol_ref_counted_handle)
            {
              v114 = a1[1].callbacks;
              if (v114)
                a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v114->add_input_handler + 1);
              v113 = -1;
            }
            else
            {
              v113 = 0;
            }
            v164 = a1;
            v165 = v113;
            v115 = output_handler->callbacks;
            if (v115)
            {
              remove_input_handler = (uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t))v115->remove_input_handler;
              if (remove_input_handler)
              {
                v117 = remove_input_handler(output_handler, a1, a3);
                if (v112 != &nw_protocol_ref_counted_handle)
                  goto LABEL_226;
                goto LABEL_225;
              }
            }
            __nwlog_obj();
            v135 = (void *)objc_claimAutoreleasedReturnValue();
            name = output_handler->identifier->name;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
            if (!name)
              name = "invalid";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = name;
            *(_WORD *)&buf[22] = 2048;
            v169 = (const char *)output_handler;
            v137 = (char *)_os_log_send_and_compose_impl();

            v163 = OS_LOG_TYPE_ERROR;
            v162 = 0;
            if (__nwlog_fault(v137, &v163, &v162))
            {
              if (v163 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v138 = objc_claimAutoreleasedReturnValue();
                v139 = v163;
                if (os_log_type_enabled(v138, v163))
                {
                  v140 = output_handler->identifier->name;
                  if (!v140)
                    v140 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v140;
                  *(_WORD *)&buf[22] = 2048;
                  v169 = (const char *)output_handler;
                  _os_log_impl(&dword_182FBE000, v138, v139, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback", buf, 0x20u);
                }
LABEL_324:

                goto LABEL_325;
              }
              if (!v162)
              {
                __nwlog_obj();
                v138 = objc_claimAutoreleasedReturnValue();
                v149 = v163;
                if (os_log_type_enabled(v138, v163))
                {
                  v150 = output_handler->identifier->name;
                  if (!v150)
                    v150 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v150;
                  *(_WORD *)&buf[22] = 2048;
                  v169 = (const char *)output_handler;
                  _os_log_impl(&dword_182FBE000, v138, v149, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded", buf, 0x20u);
                }
                goto LABEL_324;
              }
              v143 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v138 = objc_claimAutoreleasedReturnValue();
              v155 = v163;
              v144 = os_log_type_enabled(v138, v163);
              if (!v143)
              {
                if (v144)
                {
                  v153 = output_handler->identifier->name;
                  if (!v153)
                    v153 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v153;
                  *(_WORD *)&buf[22] = 2048;
                  v169 = (const char *)output_handler;
                  _os_log_impl(&dword_182FBE000, v138, v155, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace", buf, 0x20u);
                }
                goto LABEL_324;
              }
              if (v144)
              {
                v145 = output_handler->identifier->name;
                if (!v145)
                  v145 = "invalid";
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v145;
                *(_WORD *)&buf[22] = 2048;
                v169 = (const char *)output_handler;
                *(_WORD *)v170 = 2082;
                *(_QWORD *)&v170[2] = v143;
                _os_log_impl(&dword_182FBE000, v138, v155, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
              }

              free(v143);
            }
LABEL_325:
            if (v137)
              free(v137);
            v117 = 0;
            if (v112 != &nw_protocol_ref_counted_handle)
            {
LABEL_226:
              if (v105 == &nw_protocol_ref_counted_handle)
              {
                nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                if ((v117 & 1) != 0)
                  goto LABEL_250;
              }
              else if ((v117 & 1) != 0)
              {
LABEL_250:
                v126 = a1->output_handler;
                if (v126)
                {
                  if (v126->handle == &nw_protocol_ref_counted_handle)
                  {
                    v127 = v126[1].callbacks;
                    if (v127)
                    {
                      v128 = (nw_protocol_callbacks *)((char *)v127 - 1);
                      v126[1].callbacks = v128;
                      if (!v128)
                      {
                        v129 = *(void (***)(_QWORD))v126[1].flow_id;
                        if (v129)
                        {
                          *(_QWORD *)v126[1].flow_id = 0;
                          v129[2](v129);
                          _Block_release(v129);
                        }
                        if ((v126[1].flow_id[8] & 1) != 0)
                        {
                          v130 = *(const void **)v126[1].flow_id;
                          if (v130)
                            _Block_release(v130);
                        }
                        free(v126);
                      }
                    }
                  }
                  a1->output_handler = 0;
                }
                goto LABEL_253;
              }
              if (v9[405] < 0)
                goto LABEL_250;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v118 = (id)gLogObj;
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v9 + 407;
              *(_WORD *)&buf[22] = 2080;
              v169 = " ";
              v119 = (void *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v164) = 0;
              if (__nwlog_fault((const char *)v119, type, &v164))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v120 = (id)gLogObj;
                  v121 = type[0];
                  if (os_log_type_enabled(v120, type[0]))
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v9 + 407;
                    *(_WORD *)&buf[22] = 2080;
                    v169 = " ";
                    _os_log_impl(&dword_182FBE000, v120, v121, "%{public}s %{public}s%sUnable to remove output handler", buf, 0x20u);
                  }
                }
                else if ((_BYTE)v164)
                {
                  v122 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v120 = objc_claimAutoreleasedReturnValue();
                  v123 = type[0];
                  v124 = os_log_type_enabled(v120, type[0]);
                  if (v122)
                  {
                    if (v124)
                    {
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v9 + 407;
                      *(_WORD *)&buf[22] = 2080;
                      v169 = " ";
                      *(_WORD *)v170 = 2082;
                      *(_QWORD *)&v170[2] = v122;
                      _os_log_impl(&dword_182FBE000, v120, v123, "%{public}s %{public}s%sUnable to remove output handler, dumping backtrace:%{public}s", buf, 0x2Au);
                    }

                    free(v122);
                    if (!v119)
                      goto LABEL_250;
LABEL_249:
                    free(v119);
                    goto LABEL_250;
                  }
                  if (v124)
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v9 + 407;
                    *(_WORD *)&buf[22] = 2080;
                    v169 = " ";
                    _os_log_impl(&dword_182FBE000, v120, v123, "%{public}s %{public}s%sUnable to remove output handler, no backtrace", buf, 0x20u);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v120 = objc_claimAutoreleasedReturnValue();
                  v125 = type[0];
                  if (os_log_type_enabled(v120, type[0]))
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v9 + 407;
                    *(_WORD *)&buf[22] = 2080;
                    v169 = " ";
                    _os_log_impl(&dword_182FBE000, v120, v125, "%{public}s %{public}s%sUnable to remove output handler, backtrace limit exceeded", buf, 0x20u);
                  }
                }

              }
              if (!v119)
                goto LABEL_250;
              goto LABEL_249;
            }
LABEL_225:
            nw::release_if_needed<nw_protocol *>((uint64_t *)&v164);
            goto LABEL_226;
          }
          __nwlog_obj();
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
          v65 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v164) = 0;
          if (__nwlog_fault(v65, type, &v164))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v66 = objc_claimAutoreleasedReturnValue();
              v67 = type[0];
              if (os_log_type_enabled(v66, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                _os_log_impl(&dword_182FBE000, v66, v67, "%{public}s called with null protocol", buf, 0xCu);
              }
LABEL_180:

              goto LABEL_181;
            }
            if (!(_BYTE)v164)
            {
              __nwlog_obj();
              v66 = objc_claimAutoreleasedReturnValue();
              v88 = type[0];
              if (os_log_type_enabled(v66, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                _os_log_impl(&dword_182FBE000, v66, v88, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_180;
            }
            v78 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v66 = objc_claimAutoreleasedReturnValue();
            v79 = type[0];
            v80 = os_log_type_enabled(v66, type[0]);
            if (!v78)
            {
              if (v80)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
                _os_log_impl(&dword_182FBE000, v66, v79, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
              goto LABEL_180;
            }
            if (v80)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v78;
              _os_log_impl(&dword_182FBE000, v66, v79, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v78);
          }
LABEL_181:
          if (v65)
            free(v65);
          if (*(_DWORD *)(*((_QWORD *)v9 + 1) + 64) != 3)
            goto LABEL_189;
          __nwlog_obj();
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler_context";
          v94 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v164) = 0;
          if (__nwlog_fault(v94, type, &v164))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v95 = objc_claimAutoreleasedReturnValue();
              v96 = type[0];
              if (os_log_type_enabled(v95, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler_context";
                _os_log_impl(&dword_182FBE000, v95, v96, "%{public}s called with null protocol", buf, 0xCu);
              }
            }
            else if ((_BYTE)v164)
            {
              v132 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v95 = objc_claimAutoreleasedReturnValue();
              v133 = type[0];
              v134 = os_log_type_enabled(v95, type[0]);
              if (v132)
              {
                if (v134)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler_context";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v132;
                  _os_log_impl(&dword_182FBE000, v95, v133, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v132);
                goto LABEL_300;
              }
              if (v134)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler_context";
                _os_log_impl(&dword_182FBE000, v95, v133, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v95 = objc_claimAutoreleasedReturnValue();
              v146 = type[0];
              if (os_log_type_enabled(v95, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler_context";
                _os_log_impl(&dword_182FBE000, v95, v146, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_300:
          if (v94)
            free(v94);
          goto LABEL_302;
        }
        __nwlog_obj();
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
        v36 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v164) = 0;
        if (!__nwlog_fault(v36, type, &v164))
          goto LABEL_84;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v63 = type[0];
          if (os_log_type_enabled(v37, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl(&dword_182FBE000, v37, v63, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
LABEL_83:

          goto LABEL_84;
        }
        if (!(_BYTE)v164)
        {
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v87 = type[0];
          if (os_log_type_enabled(v37, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl(&dword_182FBE000, v37, v87, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_83;
        }
        v71 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v76 = type[0];
        v77 = os_log_type_enabled(v37, type[0]);
        if (!v71)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl(&dword_182FBE000, v37, v76, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_83;
        }
        if (v77)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v71;
          _os_log_impl(&dword_182FBE000, v37, v76, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
        v36 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v164) = 0;
        if (!__nwlog_fault(v36, type, &v164))
          goto LABEL_84;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v61 = type[0];
          if (os_log_type_enabled(v37, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl(&dword_182FBE000, v37, v61, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_83;
        }
        if (!(_BYTE)v164)
        {
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v86 = type[0];
          if (os_log_type_enabled(v37, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl(&dword_182FBE000, v37, v86, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_83;
        }
        v71 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v74 = type[0];
        v75 = os_log_type_enabled(v37, type[0]);
        if (!v71)
        {
          if (v75)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl(&dword_182FBE000, v37, v74, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_83;
        }
        if (v75)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v71;
          _os_log_impl(&dword_182FBE000, v37, v74, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
      v36 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v164) = 0;
      if (!__nwlog_fault(v36, type, &v164))
        goto LABEL_84;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v59 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
          _os_log_impl(&dword_182FBE000, v37, v59, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_83;
      }
      if (!(_BYTE)v164)
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v85 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
          _os_log_impl(&dword_182FBE000, v37, v85, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_83;
      }
      v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v37 = objc_claimAutoreleasedReturnValue();
      v72 = type[0];
      v73 = os_log_type_enabled(v37, type[0]);
      if (!v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
          _os_log_impl(&dword_182FBE000, v37, v72, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_83;
      }
      if (v73)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v71;
        _os_log_impl(&dword_182FBE000, v37, v72, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v71);
    goto LABEL_84;
  }
  __nwlog_obj();
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
  v55 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v164) = 0;
  if (__nwlog_fault(v55, type, &v164))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v57 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
        _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v164)
    {
      v68 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v69 = type[0];
      v70 = os_log_type_enabled(v56, type[0]);
      if (v68)
      {
        if (v70)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v68;
          _os_log_impl(&dword_182FBE000, v56, v69, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v68);
        goto LABEL_166;
      }
      if (v70)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
        _os_log_impl(&dword_182FBE000, v56, v69, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v84 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_remove_input_handler";
        _os_log_impl(&dword_182FBE000, v56, v84, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_166:
  if (v55)
    free(v55);
  return 0;
}

void sub_18349F150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void nw_protocol_implementation_connected(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  NWConcrete_nw_protocol_instance *v21;
  nw_protocol *default_input_handler;
  void *v23;
  char v24;
  nw_protocol_callbacks *callbacks;
  void *v26;
  char v27;
  nw_protocol_callbacks *v28;
  nw_protocol_callbacks *v29;
  void (*connected)(nw_protocol *, nw_protocol *);
  char v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t server_mode;
  nw_protocol *v35;
  void *v36;
  char v37;
  nw_protocol_callbacks *v38;
  void *v39;
  char v40;
  nw_protocol_callbacks *v41;
  nw_protocol_callbacks *v42;
  void (*v43)(nw_protocol *, nw_protocol *);
  void *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  char *backtrace_string;
  os_log_type_t v49;
  _BOOL4 v50;
  os_log_type_t v51;
  void *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  void *v56;
  NSObject *v57;
  os_log_type_t v58;
  void *v59;
  os_log_type_t v60;
  void *v61;
  os_log_type_t v62;
  void *v63;
  const char *v64;
  char *v65;
  NSObject *v66;
  os_log_type_t v67;
  const char *v68;
  char *v69;
  os_log_type_t v70;
  _BOOL4 v71;
  char *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  os_log_type_t v75;
  _BOOL4 v76;
  void *v77;
  char *v78;
  NSObject *v79;
  os_log_type_t v80;
  os_log_type_t v81;
  _BOOL4 v82;
  void *v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  char *v87;
  _BOOL4 v88;
  const char *v89;
  char *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  char *v93;
  os_log_type_t v94;
  _BOOL4 v95;
  os_log_type_t v96;
  os_log_type_t v97;
  os_log_type_t v98;
  os_log_type_t v99;
  void *v100;
  const char *name;
  char *v102;
  NSObject *v103;
  os_log_type_t v104;
  const char *v105;
  os_log_type_t v106;
  const char *v107;
  const char *v108;
  void *v109;
  os_log_type_t v110;
  os_log_type_t v111;
  os_log_type_t v112;
  char *v113;
  os_log_type_t v114;
  _BOOL4 v115;
  const char *v116;
  os_log_type_t v117;
  _BOOL4 v118;
  os_log_type_t v119;
  const char *v120;
  const char *v121;
  os_log_type_t v122;
  os_log_type_t v123;
  const char *v124;
  _QWORD v125[4];
  NWConcrete_nw_protocol_instance *v126;
  _QWORD v127[5];
  char v128;
  os_log_type_t v129[8];
  char v130;
  os_log_type_t v131;
  os_log_type_t type[8];
  char v133;
  uint8_t buf[4];
  const char *v135;
  __int16 v136;
  void *v137;
  __int16 v138;
  const char *v139;
  __int16 v140;
  char *v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v6 = p_output_handler;
    v7 = v6;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v8 = *((_QWORD *)v6 + 1);
      if (v8)
      {
        if (*(_QWORD *)(v8 + 80))
        {
          if (!*((_QWORD *)v6 + 36))
          {
            v9 = nw_protocol_instance_copy_path(v6, -1);
            v10 = (void *)*((_QWORD *)v7 + 36);
            *((_QWORD *)v7 + 36) = v9;

          }
          if (a1->output_handler != a2)
          {
            *(_QWORD *)type = 0;
            v11 = nw_protocol_implementation_lookup_path_by_protocol((NWConcrete_nw_protocol_instance *)v7, a2, (unint64_t *)type);
            if (v11)
            {
              v12 = v11;
              if (*(_DWORD *)(v11 + 128) != 3)
              {
                if ((v7[405] & 0x80000000) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v13 = (id)gLogObj;
                  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
                  {
                    v14 = *(_QWORD *)(v12 + 16);
                    v15 = *(_QWORD *)(v12 + 120);
                    *(_DWORD *)buf = 136447490;
                    v135 = "nw_protocol_implementation_connected";
                    v136 = 2082;
                    v137 = v7 + 407;
                    v138 = 2080;
                    v139 = " ";
                    v140 = 2048;
                    v141 = *(char **)type;
                    v142 = 2112;
                    v143 = v14;
                    v144 = 2112;
                    v145 = v15;
                    _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPath %lx is now established over %@:%@", buf, 0x3Eu);
                  }

                }
                *(_DWORD *)(v12 + 128) = 3;
                v16 = (char *)*((_QWORD *)v7 + 39);
                v17 = *(char **)type;
                if (v16 == *(char **)type)
                  *((_QWORD *)v7 + 38) = v16;
                (*(void (**)(char *, char *, uint64_t, BOOL))(*(_QWORD *)(*((_QWORD *)v7 + 1) + 80) + 208))(v7, v17, 3, v16 == v17);
                nw_protocol_implementation_read((NWConcrete_nw_protocol_instance *)v7, a2);
              }
            }
          }
          if (*(_DWORD *)(*((_QWORD *)v7 + 1) + 64) == 3)
          {
            v18 = MEMORY[0x1E0C809B0];
            v19 = (char *)*((_QWORD *)v7 + 29);
            v127[0] = MEMORY[0x1E0C809B0];
            v127[1] = 3221225472;
            v127[2] = ___ZL36nw_protocol_implementation_connectedP11nw_protocolS0__block_invoke;
            v127[3] = &__block_descriptor_40_e23_B16__0__nw_hash_node__8l;
            v127[4] = a2;
            nw_hash_table_apply(v19, (uint64_t)v127);
            if (a1->output_handler == a2)
            {
              v7[402] |= 0x20u;
              v20 = (char *)*((_QWORD *)v7 + 29);
              v125[0] = v18;
              v125[1] = 3221225472;
              v125[2] = ___ZL36nw_protocol_implementation_connectedP11nw_protocolS0__block_invoke_2;
              v125[3] = &unk_1E14AC340;
              v21 = v7;
              v126 = v21;
              nw_hash_table_apply(v20, (uint64_t)v125);
              nw_protocol_implementation_read(v21, a1->output_handler);

            }
            goto LABEL_42;
          }
          default_input_handler = a1->default_input_handler;
          if (default_input_handler)
          {
            v23 = default_input_handler->handle;
            if (v23 == &nw_protocol_ref_counted_handle)
            {
              callbacks = default_input_handler[1].callbacks;
              if (callbacks)
                default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
              v24 = -1;
            }
            else
            {
              v24 = 0;
            }
            *(_QWORD *)type = default_input_handler;
            v133 = v24;
            if (a2)
            {
              v26 = a2->handle;
              if (v26 == &nw_protocol_ref_counted_handle)
              {
                v28 = a2[1].callbacks;
                if (v28)
                  a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v28->add_input_handler + 1);
                v27 = -1;
              }
              else
              {
                v27 = 0;
              }
              *(_QWORD *)v129 = a2;
              v130 = v27;
              v29 = default_input_handler->callbacks;
              if (v29)
              {
                connected = (void (*)(nw_protocol *, nw_protocol *))v29->connected;
                if (connected)
                {
                  connected(default_input_handler, a2);
LABEL_37:
                  if (v26 == &nw_protocol_ref_counted_handle)
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v129);
LABEL_39:
                  if (v23 == &nw_protocol_ref_counted_handle)
                    nw::release_if_needed<nw_protocol *>((uint64_t *)type);
LABEL_41:
                  if (a1->output_handler != a2)
                  {
LABEL_42:

                    return;
                  }
                  v31 = v7[402];
                  v7[402] = v31 | 0x20;
                  v32 = *((_QWORD *)v7 + 1);
                  if (*(_DWORD *)(v32 + 64) != 1 && (v31 & 8) == 0)
                  {
                    if ((v31 & 4) != 0)
                      goto LABEL_42;
                    if (*(_QWORD *)(*(_QWORD *)(v32 + 80) + 120))
                    {
                      v7[402] = v31 | 0x24;
                      v33 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 + 80) + 120);
                      server_mode = nw_parameters_get_server_mode(*((void **)v7 + 6));
                      v33(v7, -1, server_mode);
                      nw_protocol_implementation_read((NWConcrete_nw_protocol_instance *)v7, a1->output_handler);
                      goto LABEL_42;
                    }
                    __nwlog_obj();
                    v44 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446210;
                    v135 = "nw_protocol_implementation_connected";
                    v45 = (char *)_os_log_send_and_compose_impl();

                    type[0] = OS_LOG_TYPE_ERROR;
                    v129[0] = OS_LOG_TYPE_DEFAULT;
                    if (!__nwlog_fault(v45, type, v129))
                      goto LABEL_85;
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v46 = objc_claimAutoreleasedReturnValue();
                      v47 = type[0];
                      if (os_log_type_enabled(v46, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        v135 = "nw_protocol_implementation_connected";
                        _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null instance->parent_definition->start", buf, 0xCu);
                      }
LABEL_84:

                      goto LABEL_85;
                    }
                    if (v129[0] == OS_LOG_TYPE_DEFAULT)
                    {
                      __nwlog_obj();
                      v46 = objc_claimAutoreleasedReturnValue();
                      v51 = type[0];
                      if (os_log_type_enabled(v46, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        v135 = "nw_protocol_implementation_connected";
                        _os_log_impl(&dword_182FBE000, v46, v51, "%{public}s called with null instance->parent_definition->start, backtrace limit exceeded", buf, 0xCu);
                      }
                      goto LABEL_84;
                    }
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v46 = objc_claimAutoreleasedReturnValue();
                    v49 = type[0];
                    v50 = os_log_type_enabled(v46, type[0]);
                    if (!backtrace_string)
                    {
                      if (v50)
                      {
                        *(_DWORD *)buf = 136446210;
                        v135 = "nw_protocol_implementation_connected";
                        _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s called with null instance->parent_definition->start, no backtrace", buf, 0xCu);
                      }
                      goto LABEL_84;
                    }
                    if (v50)
                    {
                      *(_DWORD *)buf = 136446466;
                      v135 = "nw_protocol_implementation_connected";
                      v136 = 2082;
                      v137 = backtrace_string;
                      _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s called with null instance->parent_definition->start, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    goto LABEL_76;
                  }
                  v7[402] = v31 | 0x28;
                  v35 = a1->default_input_handler;
                  if (v35)
                  {
                    v36 = v35->handle;
                    if (v36 == &nw_protocol_ref_counted_handle)
                    {
                      v38 = v35[1].callbacks;
                      if (v38)
                        v35[1].callbacks = (nw_protocol_callbacks *)((char *)&v38->add_input_handler + 1);
                      v37 = -1;
                    }
                    else
                    {
                      v37 = 0;
                    }
                    *(_QWORD *)type = v35;
                    v133 = v37;
                    v39 = a1->handle;
                    if (v39 == &nw_protocol_ref_counted_handle)
                    {
                      v41 = a1[1].callbacks;
                      if (v41)
                        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v41->add_input_handler + 1);
                      v40 = -1;
                    }
                    else
                    {
                      v40 = 0;
                    }
                    *(_QWORD *)v129 = a1;
                    v130 = v40;
                    v42 = v35->callbacks;
                    if (v42)
                    {
                      v43 = (void (*)(nw_protocol *, nw_protocol *))v42->connected;
                      if (v43)
                      {
                        v43(v35, a1);
LABEL_63:
                        if (v39 == &nw_protocol_ref_counted_handle)
                          nw::release_if_needed<nw_protocol *>((uint64_t *)v129);
                        if (v36 == &nw_protocol_ref_counted_handle)
                          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                        goto LABEL_42;
                      }
                    }
                    __nwlog_obj();
                    v100 = (void *)objc_claimAutoreleasedReturnValue();
                    name = v35->identifier->name;
                    *(_DWORD *)buf = 136446722;
                    v135 = "__nw_protocol_connected";
                    if (!name)
                      name = "invalid";
                    v136 = 2082;
                    v137 = (void *)name;
                    v138 = 2048;
                    v139 = (const char *)v35;
                    v102 = (char *)_os_log_send_and_compose_impl();

                    v131 = OS_LOG_TYPE_ERROR;
                    v128 = 0;
                    if (__nwlog_fault(v102, &v131, &v128))
                    {
                      if (v131 == OS_LOG_TYPE_FAULT)
                      {
                        __nwlog_obj();
                        v103 = objc_claimAutoreleasedReturnValue();
                        v104 = v131;
                        if (os_log_type_enabled(v103, v131))
                        {
                          v105 = v35->identifier->name;
                          if (!v105)
                            v105 = "invalid";
                          *(_DWORD *)buf = 136446722;
                          v135 = "__nw_protocol_connected";
                          v136 = 2082;
                          v137 = (void *)v105;
                          v138 = 2048;
                          v139 = (const char *)v35;
                          _os_log_impl(&dword_182FBE000, v103, v104, "%{public}s protocol %{public}s (%p) has invalid connected callback", buf, 0x20u);
                        }
                      }
                      else if (v128)
                      {
                        v113 = (char *)__nw_create_backtrace_string();
                        __nwlog_obj();
                        v103 = objc_claimAutoreleasedReturnValue();
                        v114 = v131;
                        v115 = os_log_type_enabled(v103, v131);
                        if (v113)
                        {
                          if (v115)
                          {
                            v116 = v35->identifier->name;
                            if (!v116)
                              v116 = "invalid";
                            *(_DWORD *)buf = 136446978;
                            v135 = "__nw_protocol_connected";
                            v136 = 2082;
                            v137 = (void *)v116;
                            v138 = 2048;
                            v139 = (const char *)v35;
                            v140 = 2082;
                            v141 = v113;
                            _os_log_impl(&dword_182FBE000, v103, v114, "%{public}s protocol %{public}s (%p) has invalid connected callback, dumping backtrace:%{public}s", buf, 0x2Au);
                          }

                          free(v113);
                          goto LABEL_254;
                        }
                        if (v115)
                        {
                          v121 = v35->identifier->name;
                          if (!v121)
                            v121 = "invalid";
                          *(_DWORD *)buf = 136446722;
                          v135 = "__nw_protocol_connected";
                          v136 = 2082;
                          v137 = (void *)v121;
                          v138 = 2048;
                          v139 = (const char *)v35;
                          _os_log_impl(&dword_182FBE000, v103, v114, "%{public}s protocol %{public}s (%p) has invalid connected callback, no backtrace", buf, 0x20u);
                        }
                      }
                      else
                      {
                        __nwlog_obj();
                        v103 = objc_claimAutoreleasedReturnValue();
                        v119 = v131;
                        if (os_log_type_enabled(v103, v131))
                        {
                          v120 = v35->identifier->name;
                          if (!v120)
                            v120 = "invalid";
                          *(_DWORD *)buf = 136446722;
                          v135 = "__nw_protocol_connected";
                          v136 = 2082;
                          v137 = (void *)v120;
                          v138 = 2048;
                          v139 = (const char *)v35;
                          _os_log_impl(&dword_182FBE000, v103, v119, "%{public}s protocol %{public}s (%p) has invalid connected callback, backtrace limit exceeded", buf, 0x20u);
                        }
                      }

                    }
LABEL_254:
                    if (v102)
                      free(v102);
                    goto LABEL_63;
                  }
                  __nwlog_obj();
                  v109 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446210;
                  v135 = "__nw_protocol_connected";
                  v45 = (char *)_os_log_send_and_compose_impl();

                  type[0] = OS_LOG_TYPE_ERROR;
                  v129[0] = OS_LOG_TYPE_DEFAULT;
                  if (__nwlog_fault(v45, type, v129))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v46 = objc_claimAutoreleasedReturnValue();
                      v110 = type[0];
                      if (os_log_type_enabled(v46, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        v135 = "__nw_protocol_connected";
                        _os_log_impl(&dword_182FBE000, v46, v110, "%{public}s called with null protocol", buf, 0xCu);
                      }
                      goto LABEL_84;
                    }
                    if (v129[0] == OS_LOG_TYPE_DEFAULT)
                    {
                      __nwlog_obj();
                      v46 = objc_claimAutoreleasedReturnValue();
                      v122 = type[0];
                      if (os_log_type_enabled(v46, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        v135 = "__nw_protocol_connected";
                        _os_log_impl(&dword_182FBE000, v46, v122, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                      }
                      goto LABEL_84;
                    }
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v46 = objc_claimAutoreleasedReturnValue();
                    v117 = type[0];
                    v118 = os_log_type_enabled(v46, type[0]);
                    if (!backtrace_string)
                    {
                      if (v118)
                      {
                        *(_DWORD *)buf = 136446210;
                        v135 = "__nw_protocol_connected";
                        _os_log_impl(&dword_182FBE000, v46, v117, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                      }
                      goto LABEL_84;
                    }
                    if (v118)
                    {
                      *(_DWORD *)buf = 136446466;
                      v135 = "__nw_protocol_connected";
                      v136 = 2082;
                      v137 = backtrace_string;
                      _os_log_impl(&dword_182FBE000, v46, v117, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                    }
LABEL_76:

                    goto LABEL_77;
                  }
LABEL_85:
                  if (!v45)
                    goto LABEL_42;
LABEL_86:
                  free(v45);
                  goto LABEL_42;
                }
              }
              __nwlog_obj();
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              v64 = default_input_handler->identifier->name;
              *(_DWORD *)buf = 136446722;
              v135 = "__nw_protocol_connected";
              if (!v64)
                v64 = "invalid";
              v136 = 2082;
              v137 = (void *)v64;
              v138 = 2048;
              v139 = (const char *)default_input_handler;
              v124 = (const char *)_os_log_send_and_compose_impl();

              v131 = OS_LOG_TYPE_ERROR;
              v128 = 0;
              v65 = (char *)v124;
              if (!__nwlog_fault(v124, &v131, &v128))
              {
LABEL_209:
                if (v65)
                  free(v65);
                goto LABEL_37;
              }
              if (v131 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v66 = objc_claimAutoreleasedReturnValue();
                v67 = v131;
                if (os_log_type_enabled(v66, v131))
                {
                  v68 = default_input_handler->identifier->name;
                  if (!v68)
                    v68 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  v135 = "__nw_protocol_connected";
                  v136 = 2082;
                  v137 = (void *)v68;
                  v138 = 2048;
                  v139 = (const char *)default_input_handler;
                  _os_log_impl(&dword_182FBE000, v66, v67, "%{public}s protocol %{public}s (%p) has invalid connected callback", buf, 0x20u);
                }
              }
              else if (v128)
              {
                v87 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v66 = objc_claimAutoreleasedReturnValue();
                v123 = v131;
                v88 = os_log_type_enabled(v66, v131);
                if (v87)
                {
                  if (v88)
                  {
                    v89 = default_input_handler->identifier->name;
                    if (!v89)
                      v89 = "invalid";
                    *(_DWORD *)buf = 136446978;
                    v135 = "__nw_protocol_connected";
                    v136 = 2082;
                    v137 = (void *)v89;
                    v138 = 2048;
                    v139 = (const char *)default_input_handler;
                    v140 = 2082;
                    v141 = v87;
                    _os_log_impl(&dword_182FBE000, v66, v123, "%{public}s protocol %{public}s (%p) has invalid connected callback, dumping backtrace:%{public}s", buf, 0x2Au);
                  }

                  free(v87);
                  goto LABEL_208;
                }
                if (v88)
                {
                  v108 = default_input_handler->identifier->name;
                  if (!v108)
                    v108 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  v135 = "__nw_protocol_connected";
                  v136 = 2082;
                  v137 = (void *)v108;
                  v138 = 2048;
                  v139 = (const char *)default_input_handler;
                  _os_log_impl(&dword_182FBE000, v66, v123, "%{public}s protocol %{public}s (%p) has invalid connected callback, no backtrace", buf, 0x20u);
                }
              }
              else
              {
                __nwlog_obj();
                v66 = objc_claimAutoreleasedReturnValue();
                v106 = v131;
                if (os_log_type_enabled(v66, v131))
                {
                  v107 = default_input_handler->identifier->name;
                  if (!v107)
                    v107 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  v135 = "__nw_protocol_connected";
                  v136 = 2082;
                  v137 = (void *)v107;
                  v138 = 2048;
                  v139 = (const char *)default_input_handler;
                  _os_log_impl(&dword_182FBE000, v66, v106, "%{public}s protocol %{public}s (%p) has invalid connected callback, backtrace limit exceeded", buf, 0x20u);
                }
              }

LABEL_208:
              v65 = (char *)v124;
              goto LABEL_209;
            }
            __nwlog_obj();
            v83 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v135 = "__nw_protocol_connected";
            v84 = (char *)_os_log_send_and_compose_impl();

            v129[0] = OS_LOG_TYPE_ERROR;
            v131 = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v84, v129, &v131))
            {
              if (v129[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v85 = objc_claimAutoreleasedReturnValue();
                v86 = v129[0];
                if (os_log_type_enabled(v85, v129[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v135 = "__nw_protocol_connected";
                  _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s called with null other_protocol", buf, 0xCu);
                }
              }
              else if (v131)
              {
                v93 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v85 = objc_claimAutoreleasedReturnValue();
                v94 = v129[0];
                v95 = os_log_type_enabled(v85, v129[0]);
                if (v93)
                {
                  if (v95)
                  {
                    *(_DWORD *)buf = 136446466;
                    v135 = "__nw_protocol_connected";
                    v136 = 2082;
                    v137 = v93;
                    _os_log_impl(&dword_182FBE000, v85, v94, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v93);
                  goto LABEL_237;
                }
                if (v95)
                {
                  *(_DWORD *)buf = 136446210;
                  v135 = "__nw_protocol_connected";
                  _os_log_impl(&dword_182FBE000, v85, v94, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v85 = objc_claimAutoreleasedReturnValue();
                v112 = v129[0];
                if (os_log_type_enabled(v85, v129[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v135 = "__nw_protocol_connected";
                  _os_log_impl(&dword_182FBE000, v85, v112, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
                }
              }

            }
LABEL_237:
            if (v84)
              free(v84);
            goto LABEL_39;
          }
          __nwlog_obj();
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v135 = "__nw_protocol_connected";
          v78 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          v129[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v78, type, v129))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v79 = objc_claimAutoreleasedReturnValue();
              v80 = type[0];
              if (os_log_type_enabled(v79, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v135 = "__nw_protocol_connected";
                _os_log_impl(&dword_182FBE000, v79, v80, "%{public}s called with null protocol", buf, 0xCu);
              }
            }
            else if (v129[0])
            {
              v90 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v79 = objc_claimAutoreleasedReturnValue();
              v91 = type[0];
              v92 = os_log_type_enabled(v79, type[0]);
              if (v90)
              {
                if (v92)
                {
                  *(_DWORD *)buf = 136446466;
                  v135 = "__nw_protocol_connected";
                  v136 = 2082;
                  v137 = v90;
                  _os_log_impl(&dword_182FBE000, v79, v91, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v90);
                goto LABEL_232;
              }
              if (v92)
              {
                *(_DWORD *)buf = 136446210;
                v135 = "__nw_protocol_connected";
                _os_log_impl(&dword_182FBE000, v79, v91, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v79 = objc_claimAutoreleasedReturnValue();
              v111 = type[0];
              if (os_log_type_enabled(v79, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v135 = "__nw_protocol_connected";
                _os_log_impl(&dword_182FBE000, v79, v111, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_232:
          if (v78)
            free(v78);
          goto LABEL_41;
        }
        __nwlog_obj();
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v135 = "nw_protocol_implementation_connected";
        v45 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v129[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v45, type, v129))
          goto LABEL_85;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v57 = objc_claimAutoreleasedReturnValue();
          v62 = type[0];
          if (os_log_type_enabled(v57, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v135 = "nw_protocol_implementation_connected";
            _os_log_impl(&dword_182FBE000, v57, v62, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_202;
        }
        if (v129[0] == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v57 = objc_claimAutoreleasedReturnValue();
          v99 = type[0];
          if (os_log_type_enabled(v57, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v135 = "nw_protocol_implementation_connected";
            _os_log_impl(&dword_182FBE000, v57, v99, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_202;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v57 = objc_claimAutoreleasedReturnValue();
        v81 = type[0];
        v82 = os_log_type_enabled(v57, type[0]);
        if (!backtrace_string)
        {
          if (v82)
          {
            *(_DWORD *)buf = 136446210;
            v135 = "nw_protocol_implementation_connected";
            _os_log_impl(&dword_182FBE000, v57, v81, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_202;
        }
        if (v82)
        {
          *(_DWORD *)buf = 136446466;
          v135 = "nw_protocol_implementation_connected";
          v136 = 2082;
          v137 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v57, v81, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v135 = "nw_protocol_implementation_connected";
        v45 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v129[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v45, type, v129))
          goto LABEL_85;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v57 = objc_claimAutoreleasedReturnValue();
          v60 = type[0];
          if (os_log_type_enabled(v57, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v135 = "nw_protocol_implementation_connected";
            _os_log_impl(&dword_182FBE000, v57, v60, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_202;
        }
        if (v129[0] == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v57 = objc_claimAutoreleasedReturnValue();
          v98 = type[0];
          if (os_log_type_enabled(v57, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v135 = "nw_protocol_implementation_connected";
            _os_log_impl(&dword_182FBE000, v57, v98, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_202;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v57 = objc_claimAutoreleasedReturnValue();
        v75 = type[0];
        v76 = os_log_type_enabled(v57, type[0]);
        if (!backtrace_string)
        {
          if (v76)
          {
            *(_DWORD *)buf = 136446210;
            v135 = "nw_protocol_implementation_connected";
            _os_log_impl(&dword_182FBE000, v57, v75, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_202;
        }
        if (v76)
        {
          *(_DWORD *)buf = 136446466;
          v135 = "nw_protocol_implementation_connected";
          v136 = 2082;
          v137 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v57, v75, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

LABEL_77:
      free(backtrace_string);
      if (!v45)
        goto LABEL_42;
      goto LABEL_86;
    }
    __nwlog_obj();
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v135 = "nw_protocol_implementation_connected";
    v45 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v129[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v45, type, v129))
      goto LABEL_85;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v57 = objc_claimAutoreleasedReturnValue();
      v58 = type[0];
      if (os_log_type_enabled(v57, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v135 = "nw_protocol_implementation_connected";
        _os_log_impl(&dword_182FBE000, v57, v58, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v129[0])
    {
      v72 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v57 = objc_claimAutoreleasedReturnValue();
      v73 = type[0];
      v74 = os_log_type_enabled(v57, type[0]);
      if (v72)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446466;
          v135 = "nw_protocol_implementation_connected";
          v136 = 2082;
          v137 = v72;
          _os_log_impl(&dword_182FBE000, v57, v73, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v72);
        goto LABEL_85;
      }
      if (v74)
      {
        *(_DWORD *)buf = 136446210;
        v135 = "nw_protocol_implementation_connected";
        _os_log_impl(&dword_182FBE000, v57, v73, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v57 = objc_claimAutoreleasedReturnValue();
      v97 = type[0];
      if (os_log_type_enabled(v57, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v135 = "nw_protocol_implementation_connected";
        _os_log_impl(&dword_182FBE000, v57, v97, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_202:

    goto LABEL_85;
  }
  __nwlog_obj();
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v135 = "nw_protocol_implementation_connected";
  v53 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v129[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v53, type, v129))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v55 = type[0];
      if (os_log_type_enabled(v54, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v135 = "nw_protocol_implementation_connected";
        _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v129[0])
    {
      v69 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v70 = type[0];
      v71 = os_log_type_enabled(v54, type[0]);
      if (v69)
      {
        if (v71)
        {
          *(_DWORD *)buf = 136446466;
          v135 = "nw_protocol_implementation_connected";
          v136 = 2082;
          v137 = v69;
          _os_log_impl(&dword_182FBE000, v54, v70, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v69);
        goto LABEL_192;
      }
      if (v71)
      {
        *(_DWORD *)buf = 136446210;
        v135 = "nw_protocol_implementation_connected";
        _os_log_impl(&dword_182FBE000, v54, v70, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v96 = type[0];
      if (os_log_type_enabled(v54, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v135 = "nw_protocol_implementation_connected";
        _os_log_impl(&dword_182FBE000, v54, v96, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_192:
  if (v53)
    free(v53);
}

void nw_protocol_implementation_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v5;
  void **v6;
  _QWORD *v7;
  int v8;
  uint64_t (*v9)(void **, uint64_t, uint64_t);
  void **v10;
  uint64_t v11;
  NSObject *v12;
  nw_protocol **v13;
  uint64_t v14;
  id v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t (*v19)(void **, uint64_t, uint64_t);
  id v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  id v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  id v28;
  os_log_type_t v29;
  const char *v30;
  nw_protocol *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  nw_protocol *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  char *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  os_log_type_t v46;
  NSObject *v47;
  void **v48;
  uint64_t v49;
  char v50;
  nw_protocol_callbacks *callbacks;
  char v52;
  uint64_t v53;
  nw_protocol_callbacks *v54;
  void (*disconnected)(nw_protocol *, void **);
  os_log_type_t v56;
  os_log_type_t v57;
  char v58;
  nw_protocol_callbacks *v59;
  uint64_t v60;
  nw_protocol_callbacks *v61;
  void (*v62)(nw_protocol *, void **);
  os_log_type_t v63;
  char *v64;
  void *v65;
  nw_protocol_identifier *v66;
  void *v67;
  NSObject *v68;
  os_log_type_t v69;
  nw_protocol_identifier *v70;
  void *v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  void *v75;
  const char *v76;
  NSObject *v77;
  os_log_type_t v78;
  void *v79;
  os_log_type_t v80;
  void *v81;
  os_log_type_t v82;
  NSObject *v83;
  void *v84;
  os_log_type_t v85;
  char *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  nw_protocol_identifier *v89;
  char *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  char *backtrace_string;
  os_log_type_t v94;
  _BOOL4 v95;
  char *v96;
  os_log_type_t v97;
  _BOOL4 v98;
  os_log_type_t v99;
  _BOOL4 v100;
  void *v101;
  nw_protocol_identifier *identifier;
  os_log_type_t v103;
  nw_protocol_identifier *v104;
  os_log_type_t v105;
  _BOOL4 v106;
  os_log_type_t v107;
  nw_protocol_identifier *v108;
  void *v109;
  os_log_type_t v110;
  os_log_type_t v111;
  _BOOL4 v112;
  nw_protocol_identifier *v113;
  os_log_type_t v114;
  os_log_type_t v115;
  os_log_type_t v116;
  os_log_type_t v117;
  nw_protocol_identifier *v118;
  os_log_type_t v119;
  os_log_type_t v120;
  _BOOL4 v121;
  void *v122;
  char *v123;
  NSObject *v124;
  os_log_type_t v125;
  os_log_type_t v126;
  nw_protocol_identifier *v127;
  nw_protocol_identifier *v128;
  char *v129;
  os_log_type_t v130;
  _BOOL4 v131;
  os_log_type_t v132;
  os_log_type_t v133;
  char v134;
  os_log_type_t v135;
  void **v136;
  char v137;
  os_log_type_t type[8];
  char v139;
  uint8_t buf[4];
  const char *v141;
  __int16 v142;
  nw_protocol *v143;
  __int16 v144;
  nw_protocol *v145;
  __int16 v146;
  char *v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v5 = p_output_handler;
    v6 = (void **)v5;
    if (handle != &nw_protocol_ref_counted_handle)
    {
      __nwlog_obj();
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v141 = "nw_protocol_implementation_disconnect";
      v76 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v136) = 0;
      if (!__nwlog_fault(v76, type, &v136))
        goto LABEL_307;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v78 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s called with null instance", buf, 0xCu);
        }
      }
      else if ((_BYTE)v136)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v94 = type[0];
        v95 = os_log_type_enabled(v77, type[0]);
        if (backtrace_string)
        {
          if (v95)
          {
            *(_DWORD *)buf = 136446466;
            v141 = "nw_protocol_implementation_disconnect";
            v142 = 2082;
            v143 = (nw_protocol *)backtrace_string;
            _os_log_impl(&dword_182FBE000, v77, v94, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
LABEL_307:
          if (!v76)
            goto LABEL_129;
          goto LABEL_308;
        }
        if (v95)
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v77, v94, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v115 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v77, v115, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_306:

      goto LABEL_307;
    }
    v7 = (_QWORD *)*((_QWORD *)v5 + 1);
    if (!v7)
    {
      __nwlog_obj();
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v141 = "nw_protocol_implementation_disconnect";
      v76 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v136) = 0;
      if (!__nwlog_fault(v76, type, &v136))
        goto LABEL_307;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v80 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v77, v80, "%{public}s called with null instance->parent_definition", buf, 0xCu);
        }
        goto LABEL_306;
      }
      if (!(_BYTE)v136)
      {
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v116 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v77, v116, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_306;
      }
      v96 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v77 = objc_claimAutoreleasedReturnValue();
      v97 = type[0];
      v98 = os_log_type_enabled(v77, type[0]);
      if (!v96)
      {
        if (v98)
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v77, v97, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_306;
      }
      if (v98)
      {
        *(_DWORD *)buf = 136446466;
        v141 = "nw_protocol_implementation_disconnect";
        v142 = 2082;
        v143 = (nw_protocol *)v96;
        _os_log_impl(&dword_182FBE000, v77, v97, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_274;
    }
    if (!v7[10])
    {
      __nwlog_obj();
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v141 = "nw_protocol_implementation_disconnect";
      v76 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v136) = 0;
      if (!__nwlog_fault(v76, type, &v136))
        goto LABEL_307;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v82 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v77, v82, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
        }
        goto LABEL_306;
      }
      if (!(_BYTE)v136)
      {
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v117 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v77, v117, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_306;
      }
      v96 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v77 = objc_claimAutoreleasedReturnValue();
      v99 = type[0];
      v100 = os_log_type_enabled(v77, type[0]);
      if (!v96)
      {
        if (v100)
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v77, v99, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
        }
        goto LABEL_306;
      }
      if (v100)
      {
        *(_DWORD *)buf = 136446466;
        v141 = "nw_protocol_implementation_disconnect";
        v142 = 2082;
        v143 = (nw_protocol *)v96;
        _os_log_impl(&dword_182FBE000, v77, v99, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_274;
    }
    if ((v5[405] & 0x80000000) == 0 && gLogDatapath)
    {
      __nwlog_obj();
      v83 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v141 = "nw_protocol_implementation_disconnect";
        v142 = 2082;
        v143 = (nw_protocol *)((char *)v6 + 407);
        v144 = 2080;
        v145 = (nw_protocol *)" ";
        _os_log_impl(&dword_182FBE000, v83, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDisconnect from input handler", buf, 0x20u);
      }

      v7 = v6[1];
    }
    v8 = *((_DWORD *)v7 + 16);
    if (v8 != 2)
    {
      if (v8 == 3)
      {
        v9 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v7[10] + 128);
        if (v9)
        {
          v10 = v6;
          if (nw_protocol_definition_get_message_is_stream(v6[1]) && *(v10 - 6) == a2)
            v11 = -2;
          else
            v11 = (uint64_t)a2;

          if ((v9(v10, v11, 3) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v12 = (id)gLogObj;
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
            {
              v13 = v10;
              if (nw_protocol_definition_get_message_is_stream(v6[1]) && *(v13 - 6) == a2)
                v14 = -2;
              else
                v14 = (uint64_t)a2;

              *(_DWORD *)buf = 136446466;
              v141 = "nw_protocol_implementation_disconnect";
              v142 = 2048;
              v143 = (nw_protocol *)v14;
              _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s Flow %llx deferred stop, holding disconnected", buf, 0x16u);
            }

            if (a2)
            {
              if (a2->output_handler_context)
                goto LABEL_129;
LABEL_23:
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v15 = (id)gLogObj;
              *(_DWORD *)buf = 136446466;
              v141 = "nw_protocol_implementation_disconnect";
              v142 = 2048;
              v143 = a2;
              v16 = (const char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v136) = 0;
              if (!__nwlog_fault(v16, type, &v136))
                goto LABEL_138;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v17 = objc_claimAutoreleasedReturnValue();
                v18 = type[0];
                if (os_log_type_enabled(v17, type[0]))
                {
                  *(_DWORD *)buf = 136446466;
                  v141 = "nw_protocol_implementation_disconnect";
                  v142 = 2048;
                  v143 = a2;
                  _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s Output handler context doesn't exist on protocol %p", buf, 0x16u);
                }
              }
              else if ((_BYTE)v136)
              {
                v42 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v17 = objc_claimAutoreleasedReturnValue();
                v43 = type[0];
                v44 = os_log_type_enabled(v17, type[0]);
                if (v42)
                {
                  if (v44)
                  {
                    *(_DWORD *)buf = 136446722;
                    v141 = "nw_protocol_implementation_disconnect";
                    v142 = 2048;
                    v143 = a2;
                    v144 = 2082;
                    v145 = (nw_protocol *)v42;
                    _os_log_impl(&dword_182FBE000, v17, v43, "%{public}s Output handler context doesn't exist on protocol %p, dumping backtrace:%{public}s", buf, 0x20u);
                  }

                  free(v42);
LABEL_138:
                  if (v16)
                  {
                    v64 = (char *)v16;
LABEL_140:
                    free(v64);
                  }
LABEL_129:

                  return;
                }
                if (v44)
                {
                  *(_DWORD *)buf = 136446466;
                  v141 = "nw_protocol_implementation_disconnect";
                  v142 = 2048;
                  v143 = a2;
                  _os_log_impl(&dword_182FBE000, v17, v43, "%{public}s Output handler context doesn't exist on protocol %p, no backtrace", buf, 0x16u);
                }
              }
              else
              {
                __nwlog_obj();
                v17 = objc_claimAutoreleasedReturnValue();
                v63 = type[0];
                if (os_log_type_enabled(v17, type[0]))
                {
                  *(_DWORD *)buf = 136446466;
                  v141 = "nw_protocol_implementation_disconnect";
                  v142 = 2048;
                  v143 = a2;
                  _os_log_impl(&dword_182FBE000, v17, v63, "%{public}s Output handler context doesn't exist on protocol %p, backtrace limit exceeded", buf, 0x16u);
                }
              }

              goto LABEL_138;
            }
            __nwlog_obj();
            v122 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v141 = "__nw_protocol_get_output_handler_context";
            v123 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v136) = 0;
            if (__nwlog_fault(v123, type, &v136))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v124 = objc_claimAutoreleasedReturnValue();
                v125 = type[0];
                if (os_log_type_enabled(v124, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v141 = "__nw_protocol_get_output_handler_context";
                  _os_log_impl(&dword_182FBE000, v124, v125, "%{public}s called with null protocol", buf, 0xCu);
                }
              }
              else if ((_BYTE)v136)
              {
                v129 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v124 = objc_claimAutoreleasedReturnValue();
                v130 = type[0];
                v131 = os_log_type_enabled(v124, type[0]);
                if (v129)
                {
                  if (v131)
                  {
                    *(_DWORD *)buf = 136446466;
                    v141 = "__nw_protocol_get_output_handler_context";
                    v142 = 2082;
                    v143 = (nw_protocol *)v129;
                    _os_log_impl(&dword_182FBE000, v124, v130, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v129);
                  goto LABEL_315;
                }
                if (v131)
                {
                  *(_DWORD *)buf = 136446210;
                  v141 = "__nw_protocol_get_output_handler_context";
                  _os_log_impl(&dword_182FBE000, v124, v130, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v124 = objc_claimAutoreleasedReturnValue();
                v133 = type[0];
                if (os_log_type_enabled(v124, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v141 = "__nw_protocol_get_output_handler_context";
                  _os_log_impl(&dword_182FBE000, v124, v133, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                }
              }

            }
LABEL_315:
            if (v123)
              free(v123);
            goto LABEL_23;
          }
          goto LABEL_82;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v141 = "nw_protocol_implementation_disconnect";
        v25 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v136) = 0;
        if (__nwlog_fault(v25, type, &v136))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v26 = (id)gLogObj;
            v27 = type[0];
            if (os_log_type_enabled(v26, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v141 = "nw_protocol_implementation_disconnect";
              _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null instance->parent_definition->stop", buf, 0xCu);
            }
          }
          else if ((_BYTE)v136)
          {
            v30 = __nw_create_backtrace_string();
            if (v30)
            {
              v31 = (nw_protocol *)v30;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v32 = (id)gLogObj;
              v33 = type[0];
              if (os_log_type_enabled(v32, type[0]))
              {
                *(_DWORD *)buf = 136446466;
                v141 = "nw_protocol_implementation_disconnect";
                v142 = 2082;
                v143 = v31;
                _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null instance->parent_definition->stop, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v31);
              if (!v25)
                goto LABEL_82;
              goto LABEL_81;
            }
            __nwlog_obj();
            v26 = objc_claimAutoreleasedReturnValue();
            v46 = type[0];
            if (os_log_type_enabled(v26, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v141 = "nw_protocol_implementation_disconnect";
              _os_log_impl(&dword_182FBE000, v26, v46, "%{public}s called with null instance->parent_definition->stop, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v26 = (id)gLogObj;
            v40 = type[0];
            if (os_log_type_enabled(v26, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v141 = "nw_protocol_implementation_disconnect";
              _os_log_impl(&dword_182FBE000, v26, v40, "%{public}s called with null instance->parent_definition->stop, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
        if (!v25)
        {
LABEL_82:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v47 = (id)gLogObj;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            v48 = v6;
            if (nw_protocol_definition_get_message_is_stream(v6[1]) && *(v48 - 6) == a2)
              v49 = -2;
            else
              v49 = (uint64_t)a2;

            *(_DWORD *)buf = 136446466;
            v141 = "nw_protocol_implementation_disconnect";
            v142 = 2048;
            v143 = (nw_protocol *)v49;
            _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s Flow %llx stopping immediately, sending disconnected", buf, 0x16u);
          }

          if (a2)
          {
            if (a2->handle == &nw_protocol_ref_counted_handle)
            {
              callbacks = a2[1].callbacks;
              if (callbacks)
                a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
              *(_QWORD *)type = a2;
              v50 = v139 | 1;
            }
            else
            {
              *(_QWORD *)type = a2;
              v50 = v139 & 0xFE;
            }
            v139 = v50;
            if (*(v6 - 7) == &nw_protocol_ref_counted_handle)
            {
              v53 = (uint64_t)*(v6 - 1);
              if (v53)
                *(v6 - 1) = (void *)(v53 + 1);
              v52 = -1;
            }
            else
            {
              v52 = 0;
            }
            v136 = v6 - 12;
            v137 = v52;
            v54 = a2->callbacks;
            if (v54)
            {
              disconnected = (void (*)(nw_protocol *, void **))v54->disconnected;
              if (disconnected)
              {
                disconnected(a2, v6 - 12);
                v52 = v137;
                goto LABEL_101;
              }
            }
            __nwlog_obj();
            v101 = (void *)objc_claimAutoreleasedReturnValue();
            identifier = a2->identifier;
            *(_DWORD *)buf = 136446722;
            v141 = "__nw_protocol_disconnected";
            if (!identifier)
              identifier = (nw_protocol_identifier *)"invalid";
            v142 = 2082;
            v143 = (nw_protocol *)identifier;
            v144 = 2048;
            v145 = a2;
            v67 = (void *)_os_log_send_and_compose_impl();

            v135 = OS_LOG_TYPE_ERROR;
            v134 = 0;
            if (!__nwlog_fault((const char *)v67, &v135, &v134))
            {
LABEL_294:
              if (v67)
                free(v67);
LABEL_101:
              if ((v52 & 1) == 0)
              {
LABEL_127:
                if ((v139 & 1) != 0)
                  nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                goto LABEL_129;
              }
LABEL_126:
              nw::release_if_needed<nw_protocol *>((uint64_t *)&v136);
              goto LABEL_127;
            }
            if (v135 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v68 = objc_claimAutoreleasedReturnValue();
              v103 = v135;
              if (os_log_type_enabled(v68, v135))
              {
                v104 = a2->identifier;
                if (!v104)
                  v104 = (nw_protocol_identifier *)"invalid";
                *(_DWORD *)buf = 136446722;
                v141 = "__nw_protocol_disconnected";
                v142 = 2082;
                v143 = (nw_protocol *)v104;
                v144 = 2048;
                v145 = a2;
                _os_log_impl(&dword_182FBE000, v68, v103, "%{public}s protocol %{public}s (%p) has invalid disconnected callback", buf, 0x20u);
              }
LABEL_293:

              goto LABEL_294;
            }
            if (!v134)
            {
              __nwlog_obj();
              v68 = objc_claimAutoreleasedReturnValue();
              v126 = v135;
              if (os_log_type_enabled(v68, v135))
              {
                v127 = a2->identifier;
                if (!v127)
                  v127 = (nw_protocol_identifier *)"invalid";
                *(_DWORD *)buf = 136446722;
                v141 = "__nw_protocol_disconnected";
                v142 = 2082;
                v143 = (nw_protocol *)v127;
                v144 = 2048;
                v145 = a2;
                _os_log_impl(&dword_182FBE000, v68, v126, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded", buf, 0x20u);
              }
              goto LABEL_293;
            }
            v86 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v68 = objc_claimAutoreleasedReturnValue();
            v111 = v135;
            v112 = os_log_type_enabled(v68, v135);
            if (!v86)
            {
              if (v112)
              {
                v128 = a2->identifier;
                if (!v128)
                  v128 = (nw_protocol_identifier *)"invalid";
                *(_DWORD *)buf = 136446722;
                v141 = "__nw_protocol_disconnected";
                v142 = 2082;
                v143 = (nw_protocol *)v128;
                v144 = 2048;
                v145 = a2;
                _os_log_impl(&dword_182FBE000, v68, v111, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace", buf, 0x20u);
              }
              goto LABEL_293;
            }
            if (v112)
            {
              v113 = a2->identifier;
              if (!v113)
                v113 = (nw_protocol_identifier *)"invalid";
              *(_DWORD *)buf = 136446978;
              v141 = "__nw_protocol_disconnected";
              v142 = 2082;
              v143 = (nw_protocol *)v113;
              v144 = 2048;
              v145 = a2;
              v146 = 2082;
              v147 = v86;
              _os_log_impl(&dword_182FBE000, v68, v111, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }
LABEL_235:

            free(v86);
            goto LABEL_294;
          }
          __nwlog_obj();
          v109 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v141 = "__nw_protocol_disconnected";
          v76 = (const char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v136) = 0;
          if (!__nwlog_fault(v76, type, &v136))
            goto LABEL_307;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v77 = objc_claimAutoreleasedReturnValue();
            v110 = type[0];
            if (os_log_type_enabled(v77, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v141 = "__nw_protocol_disconnected";
              _os_log_impl(&dword_182FBE000, v77, v110, "%{public}s called with null protocol", buf, 0xCu);
            }
            goto LABEL_306;
          }
          if (!(_BYTE)v136)
          {
            __nwlog_obj();
            v77 = objc_claimAutoreleasedReturnValue();
            v132 = type[0];
            if (os_log_type_enabled(v77, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v141 = "__nw_protocol_disconnected";
              _os_log_impl(&dword_182FBE000, v77, v132, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_306;
          }
          v96 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v77 = objc_claimAutoreleasedReturnValue();
          v120 = type[0];
          v121 = os_log_type_enabled(v77, type[0]);
          if (!v96)
          {
            if (v121)
            {
              *(_DWORD *)buf = 136446210;
              v141 = "__nw_protocol_disconnected";
              _os_log_impl(&dword_182FBE000, v77, v120, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
            }
            goto LABEL_306;
          }
          if (v121)
          {
            *(_DWORD *)buf = 136446466;
            v141 = "__nw_protocol_disconnected";
            v142 = 2082;
            v143 = (nw_protocol *)v96;
            _os_log_impl(&dword_182FBE000, v77, v120, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
LABEL_274:

          free(v96);
          if (!v76)
            goto LABEL_129;
LABEL_308:
          v64 = (char *)v76;
          goto LABEL_140;
        }
LABEL_81:
        free(v25);
        goto LABEL_82;
      }
LABEL_112:
      if (a2)
      {
        if (a2->handle == &nw_protocol_ref_counted_handle)
        {
          v59 = a2[1].callbacks;
          if (v59)
            a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v59->add_input_handler + 1);
          v58 = -1;
        }
        else
        {
          v58 = 0;
        }
        *(_QWORD *)type = a2;
        v139 = v58;
        if (*(v6 - 7) == &nw_protocol_ref_counted_handle)
        {
          v60 = (uint64_t)*(v6 - 1);
          if (v60)
            *(v6 - 1) = (void *)(v60 + 1);
          v52 = -1;
        }
        else
        {
          v52 = 0;
        }
        v136 = v6 - 12;
        v137 = v52;
        v61 = a2->callbacks;
        if (v61)
        {
          v62 = (void (*)(nw_protocol *, void **))v61->disconnected;
          if (v62)
          {
            v62(a2, v6 - 12);
            if ((v137 & 1) == 0)
              goto LABEL_127;
            goto LABEL_126;
          }
        }
        __nwlog_obj();
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        v66 = a2->identifier;
        *(_DWORD *)buf = 136446722;
        v141 = "__nw_protocol_disconnected";
        if (!v66)
          v66 = (nw_protocol_identifier *)"invalid";
        v142 = 2082;
        v143 = (nw_protocol *)v66;
        v144 = 2048;
        v145 = a2;
        v67 = (void *)_os_log_send_and_compose_impl();

        v135 = OS_LOG_TYPE_ERROR;
        v134 = 0;
        if (!__nwlog_fault((const char *)v67, &v135, &v134))
          goto LABEL_294;
        if (v135 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v68 = objc_claimAutoreleasedReturnValue();
          v69 = v135;
          if (os_log_type_enabled(v68, v135))
          {
            v70 = a2->identifier;
            if (!v70)
              v70 = (nw_protocol_identifier *)"invalid";
            *(_DWORD *)buf = 136446722;
            v141 = "__nw_protocol_disconnected";
            v142 = 2082;
            v143 = (nw_protocol *)v70;
            v144 = 2048;
            v145 = a2;
            _os_log_impl(&dword_182FBE000, v68, v69, "%{public}s protocol %{public}s (%p) has invalid disconnected callback", buf, 0x20u);
          }
          goto LABEL_293;
        }
        if (!v134)
        {
          __nwlog_obj();
          v68 = objc_claimAutoreleasedReturnValue();
          v107 = v135;
          if (os_log_type_enabled(v68, v135))
          {
            v108 = a2->identifier;
            if (!v108)
              v108 = (nw_protocol_identifier *)"invalid";
            *(_DWORD *)buf = 136446722;
            v141 = "__nw_protocol_disconnected";
            v142 = 2082;
            v143 = (nw_protocol *)v108;
            v144 = 2048;
            v145 = a2;
            _os_log_impl(&dword_182FBE000, v68, v107, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded", buf, 0x20u);
          }
          goto LABEL_293;
        }
        v86 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v68 = objc_claimAutoreleasedReturnValue();
        v87 = v135;
        v88 = os_log_type_enabled(v68, v135);
        if (!v86)
        {
          if (v88)
          {
            v118 = a2->identifier;
            if (!v118)
              v118 = (nw_protocol_identifier *)"invalid";
            *(_DWORD *)buf = 136446722;
            v141 = "__nw_protocol_disconnected";
            v142 = 2082;
            v143 = (nw_protocol *)v118;
            v144 = 2048;
            v145 = a2;
            _os_log_impl(&dword_182FBE000, v68, v87, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace", buf, 0x20u);
          }
          goto LABEL_293;
        }
        if (v88)
        {
          v89 = a2->identifier;
          if (!v89)
            v89 = (nw_protocol_identifier *)"invalid";
          *(_DWORD *)buf = 136446978;
          v141 = "__nw_protocol_disconnected";
          v142 = 2082;
          v143 = (nw_protocol *)v89;
          v144 = 2048;
          v145 = a2;
          v146 = 2082;
          v147 = v86;
          _os_log_impl(&dword_182FBE000, v68, v87, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        goto LABEL_235;
      }
      __nwlog_obj();
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v141 = "__nw_protocol_disconnected";
      v76 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v136) = 0;
      if (!__nwlog_fault(v76, type, &v136))
        goto LABEL_307;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v85 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "__nw_protocol_disconnected";
          _os_log_impl(&dword_182FBE000, v77, v85, "%{public}s called with null protocol", buf, 0xCu);
        }
        goto LABEL_306;
      }
      if (!(_BYTE)v136)
      {
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v119 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "__nw_protocol_disconnected";
          _os_log_impl(&dword_182FBE000, v77, v119, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_306;
      }
      v96 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v77 = objc_claimAutoreleasedReturnValue();
      v105 = type[0];
      v106 = os_log_type_enabled(v77, type[0]);
      if (!v96)
      {
        if (v106)
        {
          *(_DWORD *)buf = 136446210;
          v141 = "__nw_protocol_disconnected";
          _os_log_impl(&dword_182FBE000, v77, v105, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
        goto LABEL_306;
      }
      if (v106)
      {
        *(_DWORD *)buf = 136446466;
        v141 = "__nw_protocol_disconnected";
        v142 = 2082;
        v143 = (nw_protocol *)v96;
        _os_log_impl(&dword_182FBE000, v77, v105, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_274;
    }
    v19 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v7[10] + 128);
    if (v19)
    {
      if ((v19(v6, -1, 3) & 1) != 0)
        goto LABEL_112;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v141 = "nw_protocol_implementation_disconnect";
      v21 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v136) = 0;
      if (!__nwlog_fault(v21, type, &v136))
        goto LABEL_110;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW", buf, 0xCu);
        }
LABEL_109:

LABEL_110:
        if (!v21)
          goto LABEL_112;
LABEL_111:
        free(v21);
        goto LABEL_112;
      }
      if (!(_BYTE)v136)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v45 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v22, v45, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_109;
      }
      v38 = __nw_create_backtrace_string();
      if (!v38)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v57 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v22, v57, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, no backtrace", buf, 0xCu);
        }
        goto LABEL_109;
      }
      v35 = (nw_protocol *)v38;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = (id)gLogObj;
      v39 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v141 = "nw_protocol_implementation_disconnect";
        v142 = 2082;
        v143 = v35;
        _os_log_impl(&dword_182FBE000, v36, v39, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v28 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v141 = "nw_protocol_implementation_disconnect";
      v21 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v136) = 0;
      if (!__nwlog_fault(v21, type, &v136))
        goto LABEL_110;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v29 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s called with null instance->parent_definition->stop", buf, 0xCu);
        }
        goto LABEL_109;
      }
      if (!(_BYTE)v136)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v41 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v22, v41, "%{public}s called with null instance->parent_definition->stop, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_109;
      }
      v34 = __nw_create_backtrace_string();
      if (!v34)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v56 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_182FBE000, v22, v56, "%{public}s called with null instance->parent_definition->stop, no backtrace", buf, 0xCu);
        }
        goto LABEL_109;
      }
      v35 = (nw_protocol *)v34;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = (id)gLogObj;
      v37 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v141 = "nw_protocol_implementation_disconnect";
        v142 = 2082;
        v143 = v35;
        _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s called with null instance->parent_definition->stop, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v35);
    if (!v21)
      goto LABEL_112;
    goto LABEL_111;
  }
  __nwlog_obj();
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v141 = "nw_protocol_implementation_disconnect";
  v72 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v136) = 0;
  if (__nwlog_fault(v72, type, &v136))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v73 = objc_claimAutoreleasedReturnValue();
      v74 = type[0];
      if (os_log_type_enabled(v73, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v141 = "nw_protocol_implementation_disconnect";
        _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v136)
    {
      v90 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v73 = objc_claimAutoreleasedReturnValue();
      v91 = type[0];
      v92 = os_log_type_enabled(v73, type[0]);
      if (v90)
      {
        if (v92)
        {
          *(_DWORD *)buf = 136446466;
          v141 = "nw_protocol_implementation_disconnect";
          v142 = 2082;
          v143 = (nw_protocol *)v90;
          _os_log_impl(&dword_182FBE000, v73, v91, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v90);
        goto LABEL_259;
      }
      if (v92)
      {
        *(_DWORD *)buf = 136446210;
        v141 = "nw_protocol_implementation_disconnect";
        _os_log_impl(&dword_182FBE000, v73, v91, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v73 = objc_claimAutoreleasedReturnValue();
      v114 = type[0];
      if (os_log_type_enabled(v73, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v141 = "nw_protocol_implementation_disconnect";
        _os_log_impl(&dword_182FBE000, v73, v114, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_259:
  if (v72)
    free(v72);
}

void sub_1834A2E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  if ((a16 & 1) != 0)
    nw::release_if_needed<nw_protocol *>(&a15);
  if ((a18 & 1) != 0)
    nw::release_if_needed<nw_protocol *>(&a17);

  _Unwind_Resume(a1);
}

void nw_protocol_implementation_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, _QWORD, uint64_t, uint64_t);
  NSObject *v10;
  char *v11;
  int v12;
  uint64_t v13;
  char *v14;
  nw_protocol *default_input_handler;
  void *v16;
  char v17;
  nw_protocol_callbacks *callbacks;
  void *v19;
  char v20;
  nw_protocol_callbacks *v21;
  nw_protocol_callbacks *v22;
  void (*disconnected)(nw_protocol *, nw_protocol *);
  void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  void *v34;
  os_log_type_t v35;
  NSObject *v36;
  void *v37;
  const char *name;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  char *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  os_log_type_t v52;
  _BOOL4 v53;
  void *v54;
  NSObject *v55;
  os_log_type_t v56;
  char *backtrace_string;
  os_log_type_t v58;
  _BOOL4 v59;
  const char *v60;
  os_log_type_t v61;
  os_log_type_t v62;
  os_log_type_t v63;
  os_log_type_t v64;
  os_log_type_t v65;
  _BOOL4 v66;
  os_log_type_t v67;
  const char *v68;
  const char *v69;
  os_log_type_t v70;
  _QWORD v71[5];
  _QWORD v72[5];
  char v73;
  os_log_type_t v74;
  nw_protocol *v75;
  char v76;
  os_log_type_t type[8];
  char v78;
  _BYTE buf[24];
  const char *v80;
  __int16 v81;
  nw_protocol *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v6 = p_output_handler;
    v7 = v6;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v8 = *((_QWORD *)v6 + 1);
      if (v8)
      {
        if (*(_QWORD *)(v8 + 80))
        {
          if ((v6[405] & 0x80000000) == 0 && gLogDatapath)
          {
            __nwlog_obj();
            v36 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v7 + 407;
              *(_WORD *)&buf[22] = 2080;
              v80 = " ";
              _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDisconnected from output handler", buf, 0x20u);
            }

          }
          if (*((_QWORD *)v7 + 37))
          {
            *(_QWORD *)type = 0;
            if (nw_protocol_implementation_lookup_path_by_protocol((NWConcrete_nw_protocol_instance *)v7, a2, (unint64_t *)type))
            {
              nw_protocol_instance_tear_down_path(v7, *(uint64_t *)type);
            }
            else if ((v7[405] & 0x80000000) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v10 = (id)gLogObj;
              if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v7 + 407;
                *(_WORD *)&buf[22] = 2080;
                v80 = " ";
                v81 = 2048;
                v82 = a2;
                _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sReceived a disconnected event from an unknown protocol %p", buf, 0x2Au);
              }

            }
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x2020000000;
            LOBYTE(v80) = 0;
            v11 = (char *)*((_QWORD *)v7 + 37);
            v72[0] = MEMORY[0x1E0C809B0];
            v72[1] = 3221225472;
            v72[2] = ___ZL39nw_protocol_implementation_disconnectedP11nw_protocolS0__block_invoke;
            v72[3] = &unk_1E149BA50;
            v72[4] = buf;
            nw_hash_table_apply(v11, (uint64_t)v72);
            v12 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 24);
            _Block_object_dispose(buf, 8);
            if (v12)
              goto LABEL_42;
          }
          else
          {
            v9 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(*((_QWORD *)v7 + 1) + 80)
                                                                         + 208);
            if (v9)
              v9(v7, 0, 2, 1);
          }
          v7[404] |= 4u;
          nw_protocol_remove_instance((uint64_t)a1);
          v13 = *((_QWORD *)v7 + 3);
          if (v13)
            (*(void (**)(uint64_t, nw_protocol *, uint64_t))(*(_QWORD *)v13 + 8))(v13, a1, 57);
          if (*(_DWORD *)(*((_QWORD *)v7 + 1) + 64) == 3)
          {
            v14 = (char *)*((_QWORD *)v7 + 29);
            v71[0] = MEMORY[0x1E0C809B0];
            v71[1] = 3221225472;
            v71[2] = ___ZL39nw_protocol_implementation_disconnectedP11nw_protocolS0__block_invoke_2;
            v71[3] = &__block_descriptor_40_e23_B16__0__nw_hash_node__8l;
            v71[4] = a1;
            nw_hash_table_apply(v14, (uint64_t)v71);
LABEL_42:

            return;
          }
          default_input_handler = a1->default_input_handler;
          if (default_input_handler)
          {
            v16 = default_input_handler->handle;
            if (v16 == &nw_protocol_ref_counted_handle)
            {
              callbacks = default_input_handler[1].callbacks;
              if (callbacks)
                default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
              v17 = -1;
            }
            else
            {
              v17 = 0;
            }
            *(_QWORD *)type = default_input_handler;
            v78 = v17;
            v19 = a1->handle;
            if (v19 == &nw_protocol_ref_counted_handle)
            {
              v21 = a1[1].callbacks;
              if (v21)
                a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v21->add_input_handler + 1);
              v20 = -1;
            }
            else
            {
              v20 = 0;
            }
            v75 = a1;
            v76 = v20;
            v22 = default_input_handler->callbacks;
            if (v22)
            {
              disconnected = (void (*)(nw_protocol *, nw_protocol *))v22->disconnected;
              if (disconnected)
              {
                disconnected(default_input_handler, a1);
                goto LABEL_37;
              }
            }
            __nwlog_obj();
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            name = default_input_handler->identifier->name;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "__nw_protocol_disconnected";
            if (!name)
              name = "invalid";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = name;
            *(_WORD *)&buf[22] = 2048;
            v80 = (const char *)default_input_handler;
            v39 = (char *)_os_log_send_and_compose_impl();

            v74 = OS_LOG_TYPE_ERROR;
            v73 = 0;
            if (__nwlog_fault(v39, &v74, &v73))
            {
              if (v74 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v40 = objc_claimAutoreleasedReturnValue();
                v41 = v74;
                if (os_log_type_enabled(v40, v74))
                {
                  v42 = default_input_handler->identifier->name;
                  if (!v42)
                    v42 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "__nw_protocol_disconnected";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v42;
                  *(_WORD *)&buf[22] = 2048;
                  v80 = (const char *)default_input_handler;
                  _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s protocol %{public}s (%p) has invalid disconnected callback", buf, 0x20u);
                }
              }
              else if (v73)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v40 = objc_claimAutoreleasedReturnValue();
                v58 = v74;
                v59 = os_log_type_enabled(v40, v74);
                if (backtrace_string)
                {
                  if (v59)
                  {
                    v60 = default_input_handler->identifier->name;
                    if (!v60)
                      v60 = "invalid";
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "__nw_protocol_disconnected";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v60;
                    *(_WORD *)&buf[22] = 2048;
                    v80 = (const char *)default_input_handler;
                    v81 = 2082;
                    v82 = (nw_protocol *)backtrace_string;
                    _os_log_impl(&dword_182FBE000, v40, v58, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x2Au);
                  }

                  free(backtrace_string);
                  goto LABEL_151;
                }
                if (v59)
                {
                  v69 = default_input_handler->identifier->name;
                  if (!v69)
                    v69 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "__nw_protocol_disconnected";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v69;
                  *(_WORD *)&buf[22] = 2048;
                  v80 = (const char *)default_input_handler;
                  _os_log_impl(&dword_182FBE000, v40, v58, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace", buf, 0x20u);
                }
              }
              else
              {
                __nwlog_obj();
                v40 = objc_claimAutoreleasedReturnValue();
                v67 = v74;
                if (os_log_type_enabled(v40, v74))
                {
                  v68 = default_input_handler->identifier->name;
                  if (!v68)
                    v68 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "__nw_protocol_disconnected";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v68;
                  *(_WORD *)&buf[22] = 2048;
                  v80 = (const char *)default_input_handler;
                  _os_log_impl(&dword_182FBE000, v40, v67, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded", buf, 0x20u);
                }
              }

            }
LABEL_151:
            if (v39)
              free(v39);
LABEL_37:
            if (v19 == &nw_protocol_ref_counted_handle)
            {
              nw::release_if_needed<nw_protocol *>((uint64_t *)&v75);
              if (v16 != &nw_protocol_ref_counted_handle)
                goto LABEL_42;
            }
            else if (v16 != &nw_protocol_ref_counted_handle)
            {
              goto LABEL_42;
            }
            nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            goto LABEL_42;
          }
          __nwlog_obj();
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_protocol_disconnected";
          v29 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v75) = 0;
          if (!__nwlog_fault(v29, type, &v75))
            goto LABEL_159;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v55 = objc_claimAutoreleasedReturnValue();
            v56 = type[0];
            if (os_log_type_enabled(v55, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "__nw_protocol_disconnected";
              _os_log_impl(&dword_182FBE000, v55, v56, "%{public}s called with null protocol", buf, 0xCu);
            }
LABEL_158:

            goto LABEL_159;
          }
          if (!(_BYTE)v75)
          {
            __nwlog_obj();
            v55 = objc_claimAutoreleasedReturnValue();
            v70 = type[0];
            if (os_log_type_enabled(v55, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "__nw_protocol_disconnected";
              _os_log_impl(&dword_182FBE000, v55, v70, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_158;
          }
          v49 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v55 = objc_claimAutoreleasedReturnValue();
          v65 = type[0];
          v66 = os_log_type_enabled(v55, type[0]);
          if (!v49)
          {
            if (v66)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "__nw_protocol_disconnected";
              _os_log_impl(&dword_182FBE000, v55, v65, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
            }
            goto LABEL_158;
          }
          if (v66)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "__nw_protocol_disconnected";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v49;
            _os_log_impl(&dword_182FBE000, v55, v65, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

LABEL_125:
          free(v49);
          if (!v29)
            goto LABEL_42;
          goto LABEL_160;
        }
        __nwlog_obj();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
        v29 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v75) = 0;
        if (!__nwlog_fault(v29, type, &v75))
          goto LABEL_159;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v35 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
            _os_log_impl(&dword_182FBE000, v30, v35, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_140;
        }
        if (!(_BYTE)v75)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v64 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
            _os_log_impl(&dword_182FBE000, v30, v64, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_140;
        }
        v49 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v52 = type[0];
        v53 = os_log_type_enabled(v30, type[0]);
        if (!v49)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
            _os_log_impl(&dword_182FBE000, v30, v52, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_140;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v49;
          _os_log_impl(&dword_182FBE000, v30, v52, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
        v29 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v75) = 0;
        if (!__nwlog_fault(v29, type, &v75))
          goto LABEL_159;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v33 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
            _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_140;
        }
        if (!(_BYTE)v75)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v63 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
            _os_log_impl(&dword_182FBE000, v30, v63, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_140;
        }
        v49 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v50 = type[0];
        v51 = os_log_type_enabled(v30, type[0]);
        if (!v49)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
            _os_log_impl(&dword_182FBE000, v30, v50, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_140;
        }
        if (v51)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v49;
          _os_log_impl(&dword_182FBE000, v30, v50, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      goto LABEL_125;
    }
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
    v29 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v75) = 0;
    if (!__nwlog_fault(v29, type, &v75))
      goto LABEL_159;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = type[0];
      if (os_log_type_enabled(v30, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
        _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)v75)
    {
      v46 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v47 = type[0];
      v48 = os_log_type_enabled(v30, type[0]);
      if (v46)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v46;
          _os_log_impl(&dword_182FBE000, v30, v47, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v46);
LABEL_159:
        if (!v29)
          goto LABEL_42;
LABEL_160:
        free(v29);
        goto LABEL_42;
      }
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
        _os_log_impl(&dword_182FBE000, v30, v47, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v62 = type[0];
      if (os_log_type_enabled(v30, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
        _os_log_impl(&dword_182FBE000, v30, v62, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_140:

    goto LABEL_159;
  }
  __nwlog_obj();
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
  v25 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v75) = 0;
  if (__nwlog_fault(v25, type, &v75))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = type[0];
      if (os_log_type_enabled(v26, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
        _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v75)
    {
      v43 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v44 = type[0];
      v45 = os_log_type_enabled(v26, type[0]);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v43;
          _os_log_impl(&dword_182FBE000, v26, v44, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        goto LABEL_130;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
        _os_log_impl(&dword_182FBE000, v26, v44, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v61 = type[0];
      if (os_log_type_enabled(v26, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_disconnected";
        _os_log_impl(&dword_182FBE000, v26, v61, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_130:
  if (v25)
    free(v25);
}

void nw_protocol_implementation_link_state(nw_protocol *a1, nw_protocol *a2, void *a3)
{
  id v5;
  void *handle;
  nw_protocol **p_output_handler;
  nw_protocol **v8;
  NWConcrete_nw_protocol_instance *v9;
  nw_protocol *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  void (*var17)(NWConcrete_nw_protocol_instance *, uint64_t, _QWORD);
  uint64_t v20;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  void *v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  char *backtrace_string;
  os_log_type_t v36;
  _BOOL4 v37;
  char *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  char *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  char *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  os_log_type_t v50;
  os_log_type_t v51;
  os_log_type_t v52;
  os_log_type_t v53;
  char v54;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v57;
  char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (!__nwlog_fault(v22, &type, &v54))
      goto LABEL_101;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null link_info", buf, 0xCu);
      }
    }
    else if (v54)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      v37 = os_log_type_enabled(v23, type);
      if (backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
          v57 = 2082;
          v58 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v23, v36, "%{public}s called with null link_info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_101:
        if (!v22)
          goto LABEL_27;
LABEL_102:
        free(v22);
        goto LABEL_27;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
        _os_log_impl(&dword_182FBE000, v23, v36, "%{public}s called with null link_info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v49 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
        _os_log_impl(&dword_182FBE000, v23, v49, "%{public}s called with null link_info, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_100:

    goto LABEL_101;
  }
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v8 = p_output_handler;
    v9 = (NWConcrete_nw_protocol_instance *)v8;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v10 = v8[1];
      if (v10)
      {
        if (v10[1].identifier)
        {
          v11 = v5;
          v12 = v11[2];

          *(_QWORD *)buf = 0;
          v13 = nw_protocol_implementation_lookup_path_by_protocol(v9, a2, (unint64_t *)buf);
          if (v13)
          {
            v14 = v13;
            if (v12 == 1)
            {
              v16 = *(_BYTE *)(v13 + 137) | 2;
            }
            else
            {
              if (v12 || (v15 = *(_BYTE *)(v13 + 137), *(_BYTE *)(v13 + 137) = v15 & 0xFD, (v15 & 4) == 0))
              {
LABEL_19:
                var17 = (void (*)(NWConcrete_nw_protocol_instance *, uint64_t, _QWORD))v9->parent_definition->extended_state->var17;
                if (var17)
                {
                  v20 = *(_QWORD *)buf;
LABEL_25:
                  var17(v9, v20, (BYTE3(v9->flow_in_connected) >> 2) & 1);
                  goto LABEL_26;
                }
                goto LABEL_26;
              }
              nw_protocol_implementation_output_available(a1, a2);
              v16 = *(_BYTE *)(v14 + 137) & 0xFB;
            }
            *(_BYTE *)(v14 + 137) = v16;
            goto LABEL_19;
          }
          if (v12 == 1)
          {
            v18 = BYTE3(v9->flow_in_connected) | 4;
          }
          else
          {
            if (v12 || (v17 = BYTE3(v9->flow_in_connected), BYTE3(v9->flow_in_connected) = v17 & 0xFB, (v17 & 8) == 0))
            {
LABEL_23:
              var17 = (void (*)(NWConcrete_nw_protocol_instance *, uint64_t, _QWORD))v9->parent_definition->extended_state->var17;
              if (var17)
              {
                v20 = 0;
                goto LABEL_25;
              }
LABEL_26:

              goto LABEL_27;
            }
            nw_protocol_implementation_output_available(a1, a2);
            v18 = BYTE3(v9->flow_in_connected) & 0xF7;
          }
          BYTE3(v9->flow_in_connected) = v18;
          goto LABEL_23;
        }
        __nwlog_obj();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
        v28 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v54 = 0;
        if (!__nwlog_fault(v28, &type, &v54))
          goto LABEL_112;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v34 = type;
          if (os_log_type_enabled(v29, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
            _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_111;
        }
        if (!v54)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v53 = type;
          if (os_log_type_enabled(v29, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
            _os_log_impl(&dword_182FBE000, v29, v53, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_111;
        }
        v44 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v47 = type;
        v48 = os_log_type_enabled(v29, type);
        if (!v44)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
            _os_log_impl(&dword_182FBE000, v29, v47, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_111;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
          v57 = 2082;
          v58 = v44;
          _os_log_impl(&dword_182FBE000, v29, v47, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
        v28 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v54 = 0;
        if (!__nwlog_fault(v28, &type, &v54))
          goto LABEL_112;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v32 = type;
          if (os_log_type_enabled(v29, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
            _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_111;
        }
        if (!v54)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v52 = type;
          if (os_log_type_enabled(v29, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
            _os_log_impl(&dword_182FBE000, v29, v52, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_111;
        }
        v44 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v45 = type;
        v46 = os_log_type_enabled(v29, type);
        if (!v44)
        {
          if (v46)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
            _os_log_impl(&dword_182FBE000, v29, v45, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_111;
        }
        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
          v57 = 2082;
          v58 = v44;
          _os_log_impl(&dword_182FBE000, v29, v45, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v44);
      if (!v28)
        goto LABEL_26;
      goto LABEL_113;
    }
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (!__nwlog_fault(v28, &type, &v54))
      goto LABEL_112;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
        _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v54)
    {
      v41 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      v43 = os_log_type_enabled(v29, type);
      if (v41)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
          v57 = 2082;
          v58 = v41;
          _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v41);
LABEL_112:
        if (!v28)
          goto LABEL_26;
LABEL_113:
        free(v28);
        goto LABEL_26;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
        _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v51 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
        _os_log_impl(&dword_182FBE000, v29, v51, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_111:

    goto LABEL_112;
  }
  __nwlog_obj();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
  v22 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v54 = 0;
  if (!__nwlog_fault(v22, &type, &v54))
    goto LABEL_101;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    if (os_log_type_enabled(v23, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
      _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_100;
  }
  if (!v54)
  {
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v50 = type;
    if (os_log_type_enabled(v23, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
      _os_log_impl(&dword_182FBE000, v23, v50, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_100;
  }
  v38 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v23 = objc_claimAutoreleasedReturnValue();
  v39 = type;
  v40 = os_log_type_enabled(v23, type);
  if (!v38)
  {
    if (v40)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
      _os_log_impl(&dword_182FBE000, v23, v39, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_100;
  }
  if (v40)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_state";
    v57 = 2082;
    v58 = v38;
    _os_log_impl(&dword_182FBE000, v23, v39, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v38);
  if (v22)
    goto LABEL_102;
LABEL_27:

}

void sub_1834A4BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_protocol_implementation_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  void *v5;
  void *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  _BOOL4 v34;
  void *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  os_log_type_t v42;
  char *backtrace_string;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  NSObject *v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  char *v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = *(void **)(a1 + 40);
    v6 = (void *)(a1 + 96);
    if (v5 != &nw_protocol_ref_counted_handle)
      v6 = 0;
    v7 = v6;
    v8 = (char *)v7;
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      v9 = v7[1];
      if (v9)
      {
        if (*(_QWORD *)(v9 + 80))
        {
          if (!a3)
          {
LABEL_107:

            return;
          }
          if (*(_DWORD *)(v9 + 64) != 3)
          {
LABEL_104:
            v48 = *((_QWORD *)v8 + 12);
            if (!v48)
              LODWORD(v48) = -1;
            *a3 = v48;
            v49 = a3[1] & 0xFFFFFFFC | (v8[402] >> 7);
            a3[1] = v49;
            a3[1] = v49 & 0xFFFFFFF9 | (*(unsigned __int8 *)(*((_QWORD *)v8 + 1) + 184) >> 1) & 4;
            goto LABEL_107;
          }
          if (a2)
          {
            v10 = *(_QWORD *)(a2 + 56);
            if (v10)
            {
              if ((*(_WORD *)(v10 + 84) & 0x800) != 0)
              {
                v11 = a3[1] & 0xFFFFFFF8 | 1;
                *a3 = *(_DWORD *)(v10 + 76);
                a3[1] = v11;
                goto LABEL_107;
              }
              goto LABEL_104;
            }
LABEL_100:
            if ((v8[405] & 0x80000000) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v47 = (id)gLogObj;
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446978;
                v53 = "nw_protocol_implementation_get_message_properties";
                v54 = 2082;
                v55 = v8 + 407;
                v56 = 2080;
                v57 = " ";
                v58 = 2048;
                v59 = a2;
                _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sOutput handler context doesn't exist on protocol %p", buf, 0x2Au);
              }

            }
            goto LABEL_104;
          }
          __nwlog_obj();
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v53 = "__nw_protocol_get_output_handler_context";
          v36 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v50 = 0;
          if (__nwlog_fault(v36, &type, &v50))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v37 = objc_claimAutoreleasedReturnValue();
              v38 = type;
              if (os_log_type_enabled(v37, type))
              {
                *(_DWORD *)buf = 136446210;
                v53 = "__nw_protocol_get_output_handler_context";
                _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s called with null protocol", buf, 0xCu);
              }
            }
            else if (v50)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v37 = objc_claimAutoreleasedReturnValue();
              v44 = type;
              v45 = os_log_type_enabled(v37, type);
              if (backtrace_string)
              {
                if (v45)
                {
                  *(_DWORD *)buf = 136446466;
                  v53 = "__nw_protocol_get_output_handler_context";
                  v54 = 2082;
                  v55 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v37, v44, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(backtrace_string);
                goto LABEL_98;
              }
              if (v45)
              {
                *(_DWORD *)buf = 136446210;
                v53 = "__nw_protocol_get_output_handler_context";
                _os_log_impl(&dword_182FBE000, v37, v44, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v37 = objc_claimAutoreleasedReturnValue();
              v46 = type;
              if (os_log_type_enabled(v37, type))
              {
                *(_DWORD *)buf = 136446210;
                v53 = "__nw_protocol_get_output_handler_context";
                _os_log_impl(&dword_182FBE000, v37, v46, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_98:
          if (v36)
            free(v36);
          goto LABEL_100;
        }
        __nwlog_obj();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_implementation_get_message_properties";
        v17 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v50 = 0;
        if (!__nwlog_fault(v17, &type, &v50))
          goto LABEL_90;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v23 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_protocol_implementation_get_message_properties";
            _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_89;
        }
        if (!v50)
        {
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v42 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_protocol_implementation_get_message_properties";
            _os_log_impl(&dword_182FBE000, v18, v42, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_89;
        }
        v30 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        v34 = os_log_type_enabled(v18, type);
        if (!v30)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_protocol_implementation_get_message_properties";
            _os_log_impl(&dword_182FBE000, v18, v33, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_89;
        }
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "nw_protocol_implementation_get_message_properties";
          v54 = 2082;
          v55 = v30;
          _os_log_impl(&dword_182FBE000, v18, v33, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_implementation_get_message_properties";
        v17 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v50 = 0;
        if (!__nwlog_fault(v17, &type, &v50))
          goto LABEL_90;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v21 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_protocol_implementation_get_message_properties";
            _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_89;
        }
        if (!v50)
        {
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v41 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_protocol_implementation_get_message_properties";
            _os_log_impl(&dword_182FBE000, v18, v41, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_89;
        }
        v30 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v18, type);
        if (!v30)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_protocol_implementation_get_message_properties";
            _os_log_impl(&dword_182FBE000, v18, v31, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_89;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "nw_protocol_implementation_get_message_properties";
          v54 = 2082;
          v55 = v30;
          _os_log_impl(&dword_182FBE000, v18, v31, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v30);
      if (!v17)
        goto LABEL_107;
      goto LABEL_91;
    }
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_protocol_implementation_get_message_properties";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v17, &type, &v50))
      goto LABEL_90;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_implementation_get_message_properties";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v50)
    {
      v27 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      v29 = os_log_type_enabled(v18, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "nw_protocol_implementation_get_message_properties";
          v54 = 2082;
          v55 = v27;
          _os_log_impl(&dword_182FBE000, v18, v28, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v27);
LABEL_90:
        if (!v17)
          goto LABEL_107;
LABEL_91:
        free(v17);
        goto LABEL_107;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_implementation_get_message_properties";
        _os_log_impl(&dword_182FBE000, v18, v28, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_implementation_get_message_properties";
        _os_log_impl(&dword_182FBE000, v18, v40, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_89:

    goto LABEL_90;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v53 = "nw_protocol_implementation_get_message_properties";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v50 = 0;
  if (__nwlog_fault(v13, &type, &v50))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_implementation_get_message_properties";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v50)
    {
      v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v14, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "nw_protocol_implementation_get_message_properties";
          v54 = 2082;
          v55 = v24;
          _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        goto LABEL_79;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_implementation_get_message_properties";
        _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_implementation_get_message_properties";
        _os_log_impl(&dword_182FBE000, v14, v39, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_79:
  if (v13)
    free(v13);
}

uint64_t nw_protocol_implementation_waiting_for_output(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v5;
  char *v6;
  uint64_t v7;
  _WORD *output_handler_context;
  uint64_t v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  void *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v5 = p_output_handler;
    v6 = v5;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v7 = *((_QWORD *)v5 + 1);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 80))
        {
          if (!a2
            || (output_handler_context = a2->output_handler_context) == 0
            || (output_handler_context[42] & 2) == 0)
          {
            v9 = (v5[405] >> 3) & 1;
LABEL_11:

            return v9;
          }
LABEL_82:
          v9 = 0;
          goto LABEL_11;
        }
        __nwlog_obj();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_implementation_waiting_for_output";
        v16 = (void *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v37 = 0;
        if (!__nwlog_fault((const char *)v16, &type, &v37))
        {
LABEL_80:
          if (v16)
            free(v16);
          goto LABEL_82;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v22 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)buf = 136446210;
            v40 = "nw_protocol_implementation_waiting_for_output";
            _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
LABEL_79:

          goto LABEL_80;
        }
        if (!v37)
        {
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v36 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)buf = 136446210;
            v40 = "nw_protocol_implementation_waiting_for_output";
            _os_log_impl(&dword_182FBE000, v17, v36, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_79;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v17, type);
        if (!backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446210;
            v40 = "nw_protocol_implementation_waiting_for_output";
            _os_log_impl(&dword_182FBE000, v17, v31, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_79;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_protocol_implementation_waiting_for_output";
          v41 = 2082;
          v42 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v17, v31, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_implementation_waiting_for_output";
        v16 = (void *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v37 = 0;
        if (!__nwlog_fault((const char *)v16, &type, &v37))
          goto LABEL_80;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v20 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)buf = 136446210;
            v40 = "nw_protocol_implementation_waiting_for_output";
            _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_79;
        }
        if (!v37)
        {
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v35 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)buf = 136446210;
            v40 = "nw_protocol_implementation_waiting_for_output";
            _os_log_impl(&dword_182FBE000, v17, v35, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_79;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        v30 = os_log_type_enabled(v17, type);
        if (!backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446210;
            v40 = "nw_protocol_implementation_waiting_for_output";
            _os_log_impl(&dword_182FBE000, v17, v29, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_79;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_protocol_implementation_waiting_for_output";
          v41 = 2082;
          v42 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v17, v29, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v40 = "nw_protocol_implementation_waiting_for_output";
      v16 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (!__nwlog_fault((const char *)v16, &type, &v37))
        goto LABEL_80;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_waiting_for_output";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_79;
      }
      if (!v37)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_waiting_for_output";
          _os_log_impl(&dword_182FBE000, v17, v34, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_79;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_waiting_for_output";
          _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_79;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        v40 = "nw_protocol_implementation_waiting_for_output";
        v41 = 2082;
        v42 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_80;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_protocol_implementation_waiting_for_output";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v12, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_implementation_waiting_for_output";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v37)
    {
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v13, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_protocol_implementation_waiting_for_output";
          v41 = 2082;
          v42 = v23;
          _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
        goto LABEL_68;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_implementation_waiting_for_output";
        _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_implementation_waiting_for_output";
        _os_log_impl(&dword_182FBE000, v13, v33, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_68:
  if (v12)
    free(v12);
  return 0;
}

uint64_t nw_protocol_implementation_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  void *handle;
  nw_protocol **p_output_handler;
  nw_protocol **v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char v18;
  void *v19;
  nw_protocol **v20;
  nw_protocol **v21;
  nw_protocol **v22;
  nw_protocol *v23;
  char *v24;
  char *v25;
  char *output_handler_context;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  NSObject *v33;
  int v34;
  nw_frame *v35;
  unsigned int v36;
  unsigned int v37;
  nw_protocol *v38;
  nw_protocol *output_handler;
  char v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  void *v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  void *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  void *v54;
  os_log_type_t v55;
  void *v56;
  os_log_type_t v57;
  void *v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  void *v62;
  os_log_type_t v63;
  void *v64;
  os_log_type_t v65;
  char *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  char *v69;
  os_log_type_t v70;
  _BOOL4 v71;
  os_log_type_t v72;
  _BOOL4 v73;
  os_log_type_t v74;
  _BOOL4 v75;
  char *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  os_log_type_t v79;
  _BOOL4 v80;
  void *v81;
  char *v82;
  NSObject *v83;
  os_log_type_t v84;
  os_log_type_t v85;
  _BOOL4 v86;
  char *backtrace_string;
  os_log_type_t v88;
  _BOOL4 v89;
  os_log_type_t v90;
  os_log_type_t v91;
  os_log_type_t v92;
  os_log_type_t v93;
  os_log_type_t v94;
  os_log_type_t v95;
  os_log_type_t v96;
  os_log_type_t v97;
  NSObject *v98;
  nw_protocol **v100;
  os_log_type_t type[8];
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t *v105;
  uint64_t *v106;
  char *v107;
  nw_frame_array_s *v108;
  _QWORD v109[3];
  unsigned int v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;
  _BYTE buf[24];
  const char *v120;
  __int128 v121;
  uint64_t *v122;
  nw_protocol *v123;
  nw_protocol *v124;
  nw_frame_array_s *v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle == &nw_protocol_ref_counted_handle)
      v14 = &a1[1].output_handler;
    else
      v14 = 0;
    v15 = v14;
    v16 = v15;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v17 = *((_QWORD *)v15 + 1);
      if (v17)
      {
        if (*(_QWORD *)(v17 + 80))
        {
          v18 = v15[404];
          if ((v18 & 0x40) != 0)
          {
            v15[404] = v18 & 0xBF;
            nw_protocol_implementation_read((NWConcrete_nw_protocol_instance *)v15, a1->output_handler);
            v18 = v16[404];
          }
          v16[404] = v18 | 0x20;
          v19 = a1->handle;
          if (v19 == &nw_protocol_ref_counted_handle)
            v20 = p_output_handler;
          else
            v20 = 0;
          v21 = v20;
          v22 = v21;
          if (v19 == &nw_protocol_ref_counted_handle)
          {
            v23 = v21[1];
            v24 = (char *)v21;
            if (v23)
            {
              if (v23[1].identifier)
              {
                v115 = 0;
                v116 = &v115;
                v118 = 0;
                v117 = 0x2020000000;
                if (*(_DWORD *)v23[1].flow_id != 3)
                {
                  v35 = (nw_frame *)v21[23];
                  if (v35)
                  {
                    v36 = *((_DWORD *)v21 + 51);
                    if (v36 >= a3)
                    {
                      if (v36 <= a4 && (v37 = *((_DWORD *)v21 + 50), v37 <= a5))
                      {
                        *a6->tqh_last = v35;
                        v21[23]->handle = a6->tqh_last;
                        a6->tqh_last = (nw_frame **)v21[24];
                        v21[23] = 0;
                        v21[24] = (nw_protocol *)(v21 + 23);
                        *((_DWORD *)v116 + 6) = v37;
                        v21[25] = 0;
                      }
                      else
                      {
                        *(_QWORD *)type = 0;
                        v102 = (uint64_t)type;
                        v103 = 0x2020000000;
                        LODWORD(v104) = a5;
                        v111 = 0;
                        v112 = &v111;
                        v113 = 0x2020000000;
                        v114 = a4;
                        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&buf[8] = 3221225472;
                        *(_QWORD *)&buf[16] = ___ZL47nw_protocol_implementation_service_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_279;
                        v120 = (const char *)&unk_1E149BBD8;
                        *((_QWORD *)&v121 + 1) = type;
                        v122 = &v111;
                        v124 = a1;
                        *(_QWORD *)&v121 = v21;
                        v123 = (nw_protocol *)&v115;
                        v125 = a6;
                        v38 = v22[23];
                        do
                        {
                          if (!v38)
                            break;
                          output_handler = v38->output_handler;
                          v40 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                          v38 = output_handler;
                        }
                        while ((v40 & 1) != 0);

                        _Block_object_dispose(&v111, 8);
                        _Block_object_dispose(type, 8);
                      }
                      goto LABEL_51;
                    }
                  }
LABEL_195:
                  v45 = 0;
                  goto LABEL_196;
                }
                if (a2)
                {
                  v25 = v16;
                  output_handler_context = (char *)a2->output_handler_context;
                  if (output_handler_context)
                  {
                    if ((*((_WORD *)output_handler_context + 42) & 2) == 0)
                      *((_BYTE *)v21 + 402) |= 0x10u;
                    v28 = (uint64_t *)(output_handler_context + 48);
                    v27 = *((_QWORD *)output_handler_context + 6);
                    if (v27)
                    {
                      v100 = v21;
                      v111 = 0;
                      v112 = &v111;
                      v113 = 0x2020000000;
                      v114 = a5;
                      v109[0] = 0;
                      v109[1] = v109;
                      v109[2] = 0x2020000000;
                      v110 = a4;
                      *(_QWORD *)type = MEMORY[0x1E0C809B0];
                      v102 = 3221225472;
                      v103 = (uint64_t)___ZL47nw_protocol_implementation_service_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
                      v104 = &unk_1E149BB88;
                      v105 = &v111;
                      v106 = &v115;
                      v107 = output_handler_context + 32;
                      v108 = a6;
                      do
                      {
                        if (!v27)
                          break;
                        v29 = *(_QWORD *)(v27 + 32);
                        v30 = ((uint64_t (*)(os_log_type_t *))v103)(type);
                        v27 = v29;
                      }
                      while ((v30 & 1) != 0);
                      v31 = *((_DWORD *)output_handler_context + 17);
                      if (v31 < a3)
                      {
                        if ((v24[405] & 0x80000000) == 0 && gLogDatapath)
                        {
                          v32 = *((_DWORD *)output_handler_context + 17);
                          __nwlog_obj();
                          v33 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                          {
                            v34 = *((_DWORD *)output_handler_context + 17);
                            *(_DWORD *)buf = 136447234;
                            *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = (char *)v100 + 407;
                            *(_WORD *)&buf[22] = 2080;
                            v120 = " ";
                            LOWORD(v121) = 1024;
                            *(_DWORD *)((char *)&v121 + 2) = v34;
                            WORD3(v121) = 1024;
                            DWORD2(v121) = a3;
                            _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPending inbound bytes %u < minimum bytes %u", buf, 0x2Cu);
                          }

                          v31 = v32;
                        }
                        goto LABEL_50;
                      }
                      if (v31 <= a4)
                      {
                        v42 = *((_DWORD *)output_handler_context + 16);
                        v41 = *((_QWORD *)output_handler_context + 6);
                        if (v42 <= a5)
                        {
                          if (v41)
                          {
                            *a6->tqh_last = (nw_frame *)v41;
                            *(_QWORD *)(*((_QWORD *)output_handler_context + 6) + 40) = a6->tqh_last;
                            a6->tqh_last = (nw_frame **)*((_QWORD *)output_handler_context + 7);
                            *((_QWORD *)output_handler_context + 6) = 0;
                            *((_QWORD *)output_handler_context + 7) = v28;
                          }
                          *((_DWORD *)v116 + 6) = v42;
                          *((_QWORD *)output_handler_context + 8) = 0;
LABEL_50:
                          _Block_object_dispose(v109, 8);
                          _Block_object_dispose(&v111, 8);
                          v16 = v25;
                          if (v31 >= a3)
                          {
LABEL_51:
                            v45 = *((unsigned int *)v116 + 6);
LABEL_196:
                            _Block_object_dispose(&v115, 8);
LABEL_197:

LABEL_198:
                            return v45;
                          }
                          goto LABEL_195;
                        }
                      }
                      else
                      {
                        v41 = *v28;
                      }
                      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                      *(_QWORD *)&buf[8] = 3221225472;
                      *(_QWORD *)&buf[16] = ___ZL47nw_protocol_implementation_service_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_278;
                      v120 = (const char *)&unk_1E149BBB0;
                      *(_QWORD *)&v121 = &v111;
                      *((_QWORD *)&v121 + 1) = v109;
                      v122 = &v115;
                      v123 = a1;
                      v124 = (nw_protocol *)(output_handler_context + 32);
                      v125 = a6;
                      do
                      {
                        if (!v41)
                          break;
                        v43 = *(_QWORD *)(v41 + 32);
                        v44 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                        v41 = v43;
                      }
                      while ((v44 & 1) != 0);
                      goto LABEL_50;
                    }
LABEL_200:
                    v45 = 0;
                    v16 = v25;
                    goto LABEL_196;
                  }
LABEL_191:
                  if ((v24[405] & 0x80000000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v98 = (id)gLogObj;
                    v16 = v25;
                    if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v24 + 407;
                      *(_WORD *)&buf[22] = 2080;
                      v120 = " ";
                      LOWORD(v121) = 2048;
                      *(_QWORD *)((char *)&v121 + 2) = a2;
                      _os_log_impl(&dword_182FBE000, v98, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sOutput handler context doesn't exist on protocol %p", buf, 0x2Au);
                    }

                    goto LABEL_195;
                  }
                  goto LABEL_200;
                }
                __nwlog_obj();
                v81 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler_context";
                v82 = (char *)_os_log_send_and_compose_impl();

                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(v111) = 0;
                if (__nwlog_fault(v82, type, &v111))
                {
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v83 = objc_claimAutoreleasedReturnValue();
                    v84 = type[0];
                    if (os_log_type_enabled(v83, type[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler_context";
                      _os_log_impl(&dword_182FBE000, v83, v84, "%{public}s called with null protocol", buf, 0xCu);
                    }
                  }
                  else if ((_BYTE)v111)
                  {
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v83 = objc_claimAutoreleasedReturnValue();
                    v88 = type[0];
                    v89 = os_log_type_enabled(v83, type[0]);
                    if (backtrace_string)
                    {
                      if (v89)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler_context";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = backtrace_string;
                        _os_log_impl(&dword_182FBE000, v83, v88, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                      }

                      free(backtrace_string);
                      goto LABEL_189;
                    }
                    if (v89)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler_context";
                      _os_log_impl(&dword_182FBE000, v83, v88, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                    }
                  }
                  else
                  {
                    __nwlog_obj();
                    v83 = objc_claimAutoreleasedReturnValue();
                    v97 = type[0];
                    if (os_log_type_enabled(v83, type[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "__nw_protocol_get_output_handler_context";
                      _os_log_impl(&dword_182FBE000, v83, v97, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                    }
                  }

                }
LABEL_189:
                v25 = v16;
                if (v82)
                  free(v82);
                goto LABEL_191;
              }
              __nwlog_obj();
              v64 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
              v59 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v115) = 0;
              if (__nwlog_fault(v59, type, &v115))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v60 = objc_claimAutoreleasedReturnValue();
                  v65 = type[0];
                  if (os_log_type_enabled(v60, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
                    _os_log_impl(&dword_182FBE000, v60, v65, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
                  }
LABEL_179:

                  goto LABEL_180;
                }
                if (!(_BYTE)v115)
                {
                  __nwlog_obj();
                  v60 = objc_claimAutoreleasedReturnValue();
                  v96 = type[0];
                  if (os_log_type_enabled(v60, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
                    _os_log_impl(&dword_182FBE000, v60, v96, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
                  }
                  goto LABEL_179;
                }
                v76 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v60 = objc_claimAutoreleasedReturnValue();
                v85 = type[0];
                v86 = os_log_type_enabled(v60, type[0]);
                if (!v76)
                {
                  if (v86)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
                    _os_log_impl(&dword_182FBE000, v60, v85, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
                  }
                  goto LABEL_179;
                }
                if (v86)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v76;
                  _os_log_impl(&dword_182FBE000, v60, v85, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
                }
                goto LABEL_126;
              }
LABEL_180:
              if (v59)
                free(v59);
              v45 = 0;
              goto LABEL_197;
            }
            __nwlog_obj();
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
            v59 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v115) = 0;
            if (!__nwlog_fault(v59, type, &v115))
              goto LABEL_180;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v60 = objc_claimAutoreleasedReturnValue();
              v63 = type[0];
              if (os_log_type_enabled(v60, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
                _os_log_impl(&dword_182FBE000, v60, v63, "%{public}s called with null instance->parent_definition", buf, 0xCu);
              }
              goto LABEL_179;
            }
            if (!(_BYTE)v115)
            {
              __nwlog_obj();
              v60 = objc_claimAutoreleasedReturnValue();
              v95 = type[0];
              if (os_log_type_enabled(v60, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
                _os_log_impl(&dword_182FBE000, v60, v95, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_179;
            }
            v76 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v60 = objc_claimAutoreleasedReturnValue();
            v79 = type[0];
            v80 = os_log_type_enabled(v60, type[0]);
            if (!v76)
            {
              if (v80)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
                _os_log_impl(&dword_182FBE000, v60, v79, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
              }
              goto LABEL_179;
            }
            if (v80)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v76;
              _os_log_impl(&dword_182FBE000, v60, v79, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
          else
          {
            __nwlog_obj();
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
            v59 = (char *)_os_log_send_and_compose_impl();

            v24 = (char *)v22;
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v115) = 0;
            if (!__nwlog_fault(v59, type, &v115))
              goto LABEL_180;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v60 = objc_claimAutoreleasedReturnValue();
              v61 = type[0];
              if (os_log_type_enabled(v60, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
                _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s called with null instance", buf, 0xCu);
              }
              goto LABEL_179;
            }
            if (!(_BYTE)v115)
            {
              __nwlog_obj();
              v60 = objc_claimAutoreleasedReturnValue();
              v94 = type[0];
              if (os_log_type_enabled(v60, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
                _os_log_impl(&dword_182FBE000, v60, v94, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_179;
            }
            v76 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v60 = objc_claimAutoreleasedReturnValue();
            v77 = type[0];
            v78 = os_log_type_enabled(v60, type[0]);
            if (!v76)
            {
              if (v78)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
                _os_log_impl(&dword_182FBE000, v60, v77, "%{public}s called with null instance, no backtrace", buf, 0xCu);
              }
              goto LABEL_179;
            }
            if (v78)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_service_input_frames";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v76;
              _os_log_impl(&dword_182FBE000, v60, v77, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
LABEL_126:

          free(v76);
          goto LABEL_180;
        }
        __nwlog_obj();
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
        v51 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v115) = 0;
        if (__nwlog_fault(v51, type, &v115))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v52 = objc_claimAutoreleasedReturnValue();
            v57 = type[0];
            if (os_log_type_enabled(v52, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
              _os_log_impl(&dword_182FBE000, v52, v57, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
            }
LABEL_167:

            goto LABEL_168;
          }
          if (!(_BYTE)v115)
          {
            __nwlog_obj();
            v52 = objc_claimAutoreleasedReturnValue();
            v93 = type[0];
            if (os_log_type_enabled(v52, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
              _os_log_impl(&dword_182FBE000, v52, v93, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_167;
          }
          v69 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v52 = objc_claimAutoreleasedReturnValue();
          v74 = type[0];
          v75 = os_log_type_enabled(v52, type[0]);
          if (!v69)
          {
            if (v75)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
              _os_log_impl(&dword_182FBE000, v52, v74, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
            }
            goto LABEL_167;
          }
          if (v75)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v69;
            _os_log_impl(&dword_182FBE000, v52, v74, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
          }
          goto LABEL_106;
        }
LABEL_168:
        if (v51)
          free(v51);
        v45 = 0;
        goto LABEL_198;
      }
      __nwlog_obj();
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
      v51 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v115) = 0;
      if (!__nwlog_fault(v51, type, &v115))
        goto LABEL_168;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v52 = objc_claimAutoreleasedReturnValue();
        v55 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
          _os_log_impl(&dword_182FBE000, v52, v55, "%{public}s called with null instance->parent_definition", buf, 0xCu);
        }
        goto LABEL_167;
      }
      if (!(_BYTE)v115)
      {
        __nwlog_obj();
        v52 = objc_claimAutoreleasedReturnValue();
        v92 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
          _os_log_impl(&dword_182FBE000, v52, v92, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_167;
      }
      v69 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v52 = objc_claimAutoreleasedReturnValue();
      v72 = type[0];
      v73 = os_log_type_enabled(v52, type[0]);
      if (!v69)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
          _os_log_impl(&dword_182FBE000, v52, v72, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_167;
      }
      if (v73)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v69;
        _os_log_impl(&dword_182FBE000, v52, v72, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      __nwlog_obj();
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
      v51 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v115) = 0;
      if (!__nwlog_fault(v51, type, &v115))
        goto LABEL_168;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v52 = objc_claimAutoreleasedReturnValue();
        v53 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
          _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_167;
      }
      if (!(_BYTE)v115)
      {
        __nwlog_obj();
        v52 = objc_claimAutoreleasedReturnValue();
        v91 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
          _os_log_impl(&dword_182FBE000, v52, v91, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_167;
      }
      v69 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v52 = objc_claimAutoreleasedReturnValue();
      v70 = type[0];
      v71 = os_log_type_enabled(v52, type[0]);
      if (!v69)
      {
        if (v71)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
          _os_log_impl(&dword_182FBE000, v52, v70, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_167;
      }
      if (v71)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v69;
        _os_log_impl(&dword_182FBE000, v52, v70, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
LABEL_106:

    free(v69);
    goto LABEL_168;
  }
  __nwlog_obj();
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
  v47 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v115) = 0;
  if (__nwlog_fault(v47, type, &v115))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v48 = objc_claimAutoreleasedReturnValue();
      v49 = type[0];
      if (os_log_type_enabled(v48, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
        _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v115)
    {
      v66 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v48 = objc_claimAutoreleasedReturnValue();
      v67 = type[0];
      v68 = os_log_type_enabled(v48, type[0]);
      if (v66)
      {
        if (v68)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v66;
          _os_log_impl(&dword_182FBE000, v48, v67, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v66);
        goto LABEL_156;
      }
      if (v68)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
        _os_log_impl(&dword_182FBE000, v48, v67, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v48 = objc_claimAutoreleasedReturnValue();
      v90 = type[0];
      if (os_log_type_enabled(v48, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_frames";
        _os_log_impl(&dword_182FBE000, v48, v90, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_156:
  if (v47)
    free(v47);
  return 0;
}

void sub_1834A76F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_implementation_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, uint64_t a5, nw_frame_array_s *a6)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *output_handler_context;
  unsigned int v20;
  int v21;
  unsigned int maximum_datagram_size;
  int v23;
  unsigned int maximum_message_size;
  _BOOL4 v25;
  char *v26;
  _DWORD *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  char v33;
  nw_protocol_callbacks *callbacks;
  char v35;
  uint64_t v36;
  nw_protocol_callbacks *v37;
  void (*error)(nw_protocol *, char *, uint64_t);
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  size_t v47;
  NSObject *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  nw_protocol **v55;
  nw_frame **v56;
  unsigned int v57;
  uint64_t outbound_data;
  uint64_t metadata;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  nw_frame **tqh_last;
  _DWORD *v67;
  char v68;
  nw_protocol_callbacks *v69;
  uint64_t v70;
  nw_protocol_callbacks *v71;
  void (*v72)(nw_protocol *, char *, uint64_t);
  void *v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  void *v78;
  void *v79;
  NSObject *v80;
  os_log_type_t v81;
  void *v82;
  os_log_type_t v83;
  void *v84;
  os_log_type_t v85;
  void *v86;
  os_log_type_t v87;
  void *v88;
  os_log_type_t v89;
  char *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  char *v93;
  os_log_type_t v94;
  _BOOL4 v95;
  os_log_type_t v96;
  _BOOL4 v97;
  os_log_type_t v98;
  _BOOL4 v99;
  os_log_type_t v100;
  _BOOL4 v101;
  os_log_type_t v102;
  _BOOL4 v103;
  void *v104;
  nw_protocol_identifier *identifier;
  char *v106;
  NSObject *v107;
  os_log_type_t v108;
  nw_protocol_identifier *v109;
  void *v110;
  const char *name;
  os_log_type_t v112;
  const char *v113;
  NSObject *v114;
  os_log_type_t v115;
  os_log_type_t v116;
  os_log_type_t v117;
  os_log_type_t v118;
  os_log_type_t v119;
  os_log_type_t v120;
  char *backtrace_string;
  os_log_type_t v122;
  _BOOL4 v123;
  nw_protocol_identifier *v124;
  NSObject *v125;
  int v126;
  NSObject *v127;
  os_log_type_t v128;
  _BOOL4 v129;
  const char *v130;
  os_log_type_t v131;
  nw_protocol_identifier *v132;
  os_log_type_t v133;
  const char *v134;
  NSObject *v135;
  int v136;
  nw_protocol_identifier *v137;
  const char *v138;
  _DWORD *v139;
  unsigned int v140;
  nw_protocol *v141;
  int v142;
  char *v143;
  char v144;
  os_log_type_t v145;
  char *v146;
  char v147;
  os_log_type_t type[8];
  char v149;
  uint8_t buf[4];
  const char *v151;
  __int16 v152;
  nw_protocol_identifier *v153;
  __int16 v154;
  nw_protocol *v155;
  __int16 v156;
  _BYTE v157[10];
  __int16 v158;
  unsigned int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  const char *v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v13 = p_output_handler;
    v143 = v13;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v14 = v13;
      v15 = *((_QWORD *)v13 + 1);
      if (v15)
      {
        if (*(_QWORD *)(v15 + 80))
        {
          if (a2)
          {
            if (a6)
            {
              v16 = v13[402];
              v17 = *((_DWORD *)v13 + 24);
              if (*(_DWORD *)(v15 + 64) == 3)
              {
                v18 = a5;
                output_handler_context = a2->output_handler_context;
                if (!output_handler_context)
                {
                  if (v13[405] < 0)
                  {
LABEL_136:
                    v30 = 0;
                    goto LABEL_137;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v31 = (id)gLogObj;
                  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446978;
                    v151 = "nw_protocol_implementation_get_output_frames";
                    v152 = 2082;
                    v153 = (nw_protocol_identifier *)(v14 + 407);
                    v154 = 2080;
                    v155 = (nw_protocol *)" ";
                    v156 = 2048;
                    *(_QWORD *)v157 = a2;
                    _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sOutput handler context doesn't exist on protocol %p", buf, 0x2Au);
                  }

                  v30 = 0;
LABEL_97:
                  v14 = v143;
LABEL_137:

                  return v30;
                }
                v20 = *((unsigned __int16 *)output_handler_context + 42);
                if ((v20 & 0x200) != 0)
                {
                  if ((v13[405] & 0x80000000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v32 = (id)gLogObj;
                    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446722;
                      v151 = "nw_protocol_implementation_get_output_frames";
                      v152 = 2082;
                      v153 = (nw_protocol_identifier *)(v14 + 407);
                      v154 = 2080;
                      v155 = (nw_protocol *)" ";
                      _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sIgnoring request for output frames from closed flow", buf, 0x20u);
                    }

                    v14 = v143;
                  }
                  if (a2->handle == &nw_protocol_ref_counted_handle)
                  {
                    callbacks = a2[1].callbacks;
                    if (callbacks)
                      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
                    v33 = -1;
                  }
                  else
                  {
                    v33 = 0;
                  }
                  *(_QWORD *)type = a2;
                  v149 = v33;
                  if (*((_UNKNOWN **)v14 - 7) == &nw_protocol_ref_counted_handle)
                  {
                    v36 = *((_QWORD *)v14 - 1);
                    if (v36)
                      *((_QWORD *)v14 - 1) = v36 + 1;
                    v35 = -1;
                  }
                  else
                  {
                    v35 = 0;
                  }
                  v146 = v14 - 96;
                  v147 = v35;
                  v37 = a2->callbacks;
                  if (v37)
                  {
                    error = (void (*)(nw_protocol *, char *, uint64_t))v37->error;
                    if (error)
                    {
                      error(a2, v14 - 96, 57);
LABEL_131:
                      v35 = v147;
LABEL_132:
                      if ((v35 & 1) != 0)
                        nw::release_if_needed<nw_protocol *>((uint64_t *)&v146);
                      if ((v149 & 1) != 0)
                        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                      goto LABEL_136;
                    }
                  }
                  __nwlog_obj();
                  v104 = (void *)objc_claimAutoreleasedReturnValue();
                  identifier = a2->identifier;
                  *(_DWORD *)buf = 136446722;
                  v151 = "__nw_protocol_error";
                  if (!identifier)
                    identifier = (nw_protocol_identifier *)"invalid";
                  v152 = 2082;
                  v153 = identifier;
                  v154 = 2048;
                  v155 = a2;
                  v106 = (char *)_os_log_send_and_compose_impl();

                  v145 = OS_LOG_TYPE_ERROR;
                  v144 = 0;
                  if (__nwlog_fault(v106, &v145, &v144))
                  {
                    if (v145 == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v107 = objc_claimAutoreleasedReturnValue();
                      v108 = v145;
                      if (os_log_type_enabled(v107, v145))
                      {
                        v109 = a2->identifier;
                        if (!v109)
                          v109 = (nw_protocol_identifier *)"invalid";
                        *(_DWORD *)buf = 136446722;
                        v151 = "__nw_protocol_error";
                        v152 = 2082;
                        v153 = v109;
                        v154 = 2048;
                        v155 = a2;
                        _os_log_impl(&dword_182FBE000, v107, v108, "%{public}s protocol %{public}s (%p) has invalid error callback", buf, 0x20u);
                      }
                      goto LABEL_307;
                    }
                    if (!v144)
                    {
                      __nwlog_obj();
                      v107 = objc_claimAutoreleasedReturnValue();
                      v131 = v145;
                      if (os_log_type_enabled(v107, v145))
                      {
                        v132 = a2->identifier;
                        if (!v132)
                          v132 = (nw_protocol_identifier *)"invalid";
                        *(_DWORD *)buf = 136446722;
                        v151 = "__nw_protocol_error";
                        v152 = 2082;
                        v153 = v132;
                        v154 = 2048;
                        v155 = a2;
                        _os_log_impl(&dword_182FBE000, v107, v131, "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded", buf, 0x20u);
                      }
                      goto LABEL_307;
                    }
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v107 = objc_claimAutoreleasedReturnValue();
                    v122 = v145;
                    v123 = os_log_type_enabled(v107, v145);
                    if (!backtrace_string)
                    {
                      if (v123)
                      {
                        v137 = a2->identifier;
                        if (!v137)
                          v137 = (nw_protocol_identifier *)"invalid";
                        *(_DWORD *)buf = 136446722;
                        v151 = "__nw_protocol_error";
                        v152 = 2082;
                        v153 = v137;
                        v154 = 2048;
                        v155 = a2;
                        _os_log_impl(&dword_182FBE000, v107, v122, "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace", buf, 0x20u);
                      }
                      goto LABEL_307;
                    }
                    if (v123)
                    {
                      v124 = a2->identifier;
                      if (!v124)
                        v124 = (nw_protocol_identifier *)"invalid";
                      *(_DWORD *)buf = 136446978;
                      v151 = "__nw_protocol_error";
                      v152 = 2082;
                      v153 = v124;
                      v154 = 2048;
                      v155 = a2;
                      v156 = 2082;
                      *(_QWORD *)v157 = backtrace_string;
                      _os_log_impl(&dword_182FBE000, v107, v122, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }
                    goto LABEL_263;
                  }
LABEL_308:
                  v14 = v143;
                  if (v106)
                    free(v106);
                  goto LABEL_132;
                }
                v21 = v16 >> 7;
                if ((v20 & 2) == 0)
                {
                  LOBYTE(v16) = v16 | 0x10;
                  v13[402] = v16;
                  v20 = *((unsigned __int16 *)output_handler_context + 42);
                }
                v141 = a2;
                if ((v20 & 0x800) != 0)
                {
                  v17 = output_handler_context[19];
                  v21 = 1;
                  if ((_DWORD)v18 == 1 && v17 < a3)
                  {
                    maximum_datagram_size = nw_path_get_maximum_datagram_size(*((void **)v13 + 36));
                    v23 = output_handler_context[20];
                    if (!v23)
                    {
                      maximum_message_size = nw_protocol_instance_get_maximum_message_size(v14, 0);
                      v23 = maximum_message_size - v17;
                      if (maximum_message_size <= v17)
                        v23 = output_handler_context[20];
                      else
                        output_handler_context[20] = v23;
                    }
                    v39 = v23 + v17;
                    v40 = maximum_datagram_size - v23;
                    if (maximum_datagram_size > v39)
                      v17 = v40;
                    v20 = *((unsigned __int16 *)output_handler_context + 42);
                    LOBYTE(v16) = v14[402];
                    v21 = 1;
                  }
                }
                v26 = (char *)(output_handler_context + 8);
                v142 = (v20 >> 10) & 1;
                v25 = v21 != 0;
                if ((v16 & 0x40) != 0)
                {
                  v27 = output_handler_context + 18;
                  v41 = output_handler_context[18];
                  if (v41 < a3)
                  {
                    if ((v14[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      __nwlog_obj();
                      v135 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
                      {
                        v136 = *v27;
                        *(_DWORD *)buf = 136447234;
                        v151 = "nw_protocol_implementation_get_output_frames";
                        v152 = 2082;
                        v153 = (nw_protocol_identifier *)(v143 + 407);
                        v154 = 2080;
                        v155 = (nw_protocol *)" ";
                        v156 = 1024;
                        *(_DWORD *)v157 = a3;
                        *(_WORD *)&v157[4] = 1024;
                        *(_DWORD *)&v157[6] = v136;
                        _os_log_impl(&dword_182FBE000, v135, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFlow is flow controlled below %u bytes (limit %u bytes), returning 0 frames", buf, 0x2Cu);
                      }

                      LOWORD(v20) = *((_WORD *)output_handler_context + 42);
                      v14 = v143;
                    }
                    v30 = 0;
                    *((_WORD *)output_handler_context + 42) = v20 | 0x80;
                    goto LABEL_137;
                  }
                  *((_WORD *)output_handler_context + 42) = v20 & 0xFF7F;
                  if (v41 >= a4)
                    v28 = a4;
                  else
                    v28 = v41;
                }
                else
                {
                  v27 = 0;
                  v28 = a4;
                }
                a5 = v18;
              }
              else
              {
                v141 = a2;
                v25 = (v16 & 0x80u) != 0;
                v142 = (v13[403] >> 1) & 1;
                if ((v16 & 0x40) != 0)
                {
                  v27 = v13 + 104;
                  v29 = *((_DWORD *)v13 + 26);
                  if (v29 < a3)
                  {
                    if ((v13[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      __nwlog_obj();
                      v125 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
                      {
                        v126 = *((_DWORD *)v143 + 26);
                        *(_DWORD *)buf = 136447234;
                        v151 = "nw_protocol_implementation_get_output_frames";
                        v152 = 2082;
                        v153 = (nw_protocol_identifier *)(v143 + 407);
                        v154 = 2080;
                        v155 = (nw_protocol *)" ";
                        v156 = 1024;
                        *(_DWORD *)v157 = a3;
                        *(_WORD *)&v157[4] = 1024;
                        *(_DWORD *)&v157[6] = v126;
                        _os_log_impl(&dword_182FBE000, v125, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sConnection is flow controlled below %u bytes (limit %u bytes), returning 0 frames", buf, 0x2Cu);
                      }

                      v14 = v143;
                    }
                    v30 = 0;
                    v14[404] |= 0x80u;
                    goto LABEL_137;
                  }
                  v26 = 0;
                  v13[404] &= ~0x80u;
                  if (v29 >= a4)
                    v28 = a4;
                  else
                    v28 = v29;
                }
                else
                {
                  v26 = 0;
                  v27 = 0;
                  v28 = a4;
                }
              }
              v42 = *((_QWORD *)v14 + 10);
              v43 = *((_QWORD *)v14 + 11);
              if (*((_OWORD *)v14 + 5) != 0)
              {
                v44 = 0xFFFFFFFFLL - (v42 + v43);
                v45 = v28 + v42 + v43;
                if (v44 >= v28)
                  v28 = v45;
                else
                  v28 = -1;
              }
              v140 = v28;
              if (v25)
              {
                if (v17 + 1 >= 2)
                  v46 = v17;
                else
                  v46 = 9216;
                if (v28 >= v46)
                  v47 = v46;
                else
                  v47 = v28;
                if ((int)v47 * (int)a5 < a3)
                {
                  if ((v14[405] & 0x80000000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v48 = (id)gLogObj;
                    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                    {
                      v49 = "s";
                      *(_DWORD *)buf = 136448002;
                      v151 = "nw_protocol_implementation_get_output_frames";
                      v152 = 2082;
                      v153 = (nw_protocol_identifier *)(v14 + 407);
                      v155 = (nw_protocol *)" ";
                      v154 = 2080;
                      if ((_DWORD)a5 == 1)
                        v49 = "";
                      v156 = 1024;
                      *(_DWORD *)v157 = v47;
                      *(_WORD *)&v157[4] = 1024;
                      *(_DWORD *)&v157[6] = a3;
                      v158 = 1024;
                      v159 = a4;
                      v160 = 1024;
                      v161 = a5;
                      v162 = 2080;
                      v163 = v49;
                      _os_log_impl(&dword_182FBE000, v48, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot return %u/%u/%u bytes in %u datagram%s, returning 0 frames", buf, 0x42u);
                    }

                    v14 = v143;
                  }
                  if (v26)
                    *((_WORD *)v26 + 26) |= 0x1000u;
                  else
                    v14[403] |= 1u;
                  if (v141->handle == &nw_protocol_ref_counted_handle)
                  {
                    v69 = v141[1].callbacks;
                    if (v69)
                      v141[1].callbacks = (nw_protocol_callbacks *)((char *)&v69->add_input_handler + 1);
                    v68 = -1;
                  }
                  else
                  {
                    v68 = 0;
                  }
                  *(_QWORD *)type = v141;
                  v149 = v68;
                  if (*((_UNKNOWN **)v14 - 7) == &nw_protocol_ref_counted_handle)
                  {
                    v70 = *((_QWORD *)v14 - 1);
                    if (v70)
                      *((_QWORD *)v14 - 1) = v70 + 1;
                    v35 = -1;
                  }
                  else
                  {
                    v35 = 0;
                  }
                  v146 = v14 - 96;
                  v147 = v35;
                  v71 = v141->callbacks;
                  if (v71)
                  {
                    v72 = (void (*)(nw_protocol *, char *, uint64_t))v71->error;
                    if (v72)
                    {
                      v72(v141, v14 - 96, 40);
                      goto LABEL_131;
                    }
                  }
                  __nwlog_obj();
                  v110 = (void *)objc_claimAutoreleasedReturnValue();
                  name = v141->identifier->name;
                  *(_DWORD *)buf = 136446722;
                  v151 = "__nw_protocol_error";
                  if (!name)
                    name = "invalid";
                  v152 = 2082;
                  v153 = (nw_protocol_identifier *)name;
                  v154 = 2048;
                  v155 = v141;
                  v106 = (char *)_os_log_send_and_compose_impl();

                  v145 = OS_LOG_TYPE_ERROR;
                  v144 = 0;
                  if (__nwlog_fault(v106, &v145, &v144))
                  {
                    if (v145 == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v107 = objc_claimAutoreleasedReturnValue();
                      v112 = v145;
                      if (os_log_type_enabled(v107, v145))
                      {
                        v113 = v141->identifier->name;
                        if (!v113)
                          v113 = "invalid";
                        *(_DWORD *)buf = 136446722;
                        v151 = "__nw_protocol_error";
                        v152 = 2082;
                        v153 = (nw_protocol_identifier *)v113;
                        v154 = 2048;
                        v155 = v141;
                        _os_log_impl(&dword_182FBE000, v107, v112, "%{public}s protocol %{public}s (%p) has invalid error callback", buf, 0x20u);
                      }
LABEL_307:

                      goto LABEL_308;
                    }
                    if (!v144)
                    {
                      __nwlog_obj();
                      v107 = objc_claimAutoreleasedReturnValue();
                      v133 = v145;
                      if (os_log_type_enabled(v107, v145))
                      {
                        v134 = v141->identifier->name;
                        if (!v134)
                          v134 = "invalid";
                        *(_DWORD *)buf = 136446722;
                        v151 = "__nw_protocol_error";
                        v152 = 2082;
                        v153 = (nw_protocol_identifier *)v134;
                        v154 = 2048;
                        v155 = v141;
                        _os_log_impl(&dword_182FBE000, v107, v133, "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded", buf, 0x20u);
                      }
                      goto LABEL_307;
                    }
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v107 = objc_claimAutoreleasedReturnValue();
                    v128 = v145;
                    v129 = os_log_type_enabled(v107, v145);
                    if (!backtrace_string)
                    {
                      if (v129)
                      {
                        v138 = v141->identifier->name;
                        if (!v138)
                          v138 = "invalid";
                        *(_DWORD *)buf = 136446722;
                        v151 = "__nw_protocol_error";
                        v152 = 2082;
                        v153 = (nw_protocol_identifier *)v138;
                        v154 = 2048;
                        v155 = v141;
                        _os_log_impl(&dword_182FBE000, v107, v128, "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace", buf, 0x20u);
                      }
                      goto LABEL_307;
                    }
                    if (v129)
                    {
                      v130 = v141->identifier->name;
                      if (!v130)
                        v130 = "invalid";
                      *(_DWORD *)buf = 136446978;
                      v151 = "__nw_protocol_error";
                      v152 = 2082;
                      v153 = (nw_protocol_identifier *)v130;
                      v154 = 2048;
                      v155 = v141;
                      v156 = 2082;
                      *(_QWORD *)v157 = backtrace_string;
                      _os_log_impl(&dword_182FBE000, v107, v128, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }
LABEL_263:

                    free(backtrace_string);
                    goto LABEL_308;
                  }
                  goto LABEL_308;
                }
                v139 = v27;
                v30 = 0;
                v57 = 0;
                if ((_DWORD)a5 && v28)
                {
                  LODWORD(v30) = 0;
                  v57 = 0;
                  do
                  {
                    outbound_data = nw_protocol_create_outbound_data((NWConcrete_nw_protocol_instance *)v14, v47, v142);
                    metadata = nw_frame_get_metadata(outbound_data);
                    if (metadata)
                    {
                      v61 = (_QWORD *)metadata;
                      v62 = v26;
                      v63 = a5;
                      v64 = v14;
                      if (nw_protocol_definition_get_message_is_stream(*((void **)v14 + 1))
                        && *((nw_protocol **)v14 - 6) == v141)
                      {
                        v65 = -2;
                      }
                      else
                      {
                        v65 = (uint64_t)v141;
                      }

                      *v61 = v65;
                      v14 = v143;
                      a5 = v63;
                      v26 = v62;
                      v28 = v140;
                    }
                    if (*((_OWORD *)v14 + 5) != 0)
                      nw_frame_claim(outbound_data, v60, *((_QWORD *)v14 + 10), *((_QWORD *)v14 + 11));
                    *(_QWORD *)(outbound_data + 32) = 0;
                    tqh_last = a6->tqh_last;
                    *(_QWORD *)(outbound_data + 40) = tqh_last;
                    *tqh_last = (nw_frame *)outbound_data;
                    a6->tqh_last = (nw_frame **)(outbound_data + 32);
                    v57 += v47;
                    v30 = (v30 + 1);

                  }
                  while (v30 < a5 && v57 < v28);
                }
                if ((v14[405] & 0x80000000) == 0 && gLogDatapath)
                {
                  __nwlog_obj();
                  v127 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136447234;
                    v151 = "nw_protocol_implementation_get_output_frames";
                    v152 = 2082;
                    v153 = (nw_protocol_identifier *)(v143 + 407);
                    v154 = 2080;
                    v155 = (nw_protocol *)" ";
                    v156 = 1024;
                    *(_DWORD *)v157 = v30;
                    *(_WORD *)&v157[4] = 1024;
                    *(_DWORD *)&v157[6] = v57;
                    _os_log_impl(&dword_182FBE000, v127, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sCreated %u outbound frames with total of %u bytes", buf, 0x2Cu);
                  }

                  v14 = v143;
                  if (v26)
                  {
LABEL_115:
                    *((_WORD *)v26 + 26) &= ~0x1000u;
                    v67 = v139;
                    if (!v139)
                      goto LABEL_137;
                    goto LABEL_255;
                  }
                }
                else if (v26)
                {
                  goto LABEL_115;
                }
                v14[403] &= ~1u;
                v67 = v139;
                if (!v139)
                  goto LABEL_137;
LABEL_255:
                if (*v67 != -1)
                  *v67 -= v57;
                goto LABEL_137;
              }
              v50 = nw_protocol_create_outbound_data((NWConcrete_nw_protocol_instance *)v14, v28, v142);
              v51 = nw_frame_get_metadata(v50);
              v53 = (uint64_t)v141;
              if (v51)
              {
                v54 = (_QWORD *)v51;
                v55 = v143;
                if (nw_protocol_definition_get_message_is_stream(*((void **)v143 + 1))
                  && *(v55 - 6) == v141)
                {
                  v53 = -2;
                }

                *v54 = v53;
              }
              if (*((_OWORD *)v143 + 5) != 0)
                nw_frame_claim(v50, v52, *((_QWORD *)v143 + 10), *((_QWORD *)v143 + 11));
              *(_QWORD *)(v50 + 32) = 0;
              v56 = a6->tqh_last;
              *(_QWORD *)(v50 + 40) = v56;
              *v56 = (nw_frame *)v50;
              a6->tqh_last = (nw_frame **)(v50 + 32);
              if ((v143[405] & 0x80000000) == 0 && gLogDatapath)
              {
                __nwlog_obj();
                v114 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446978;
                  v151 = "nw_protocol_implementation_get_output_frames";
                  v152 = 2082;
                  v153 = (nw_protocol_identifier *)(v143 + 407);
                  v154 = 2080;
                  v155 = (nw_protocol *)" ";
                  v156 = 1024;
                  *(_DWORD *)v157 = v28;
                  _os_log_impl(&dword_182FBE000, v114, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sCreated 1 outbound frame with total of %u bytes", buf, 0x26u);
                }

                if (!v27)
                  goto LABEL_96;
              }
              else if (!v27)
              {
LABEL_96:

                v30 = 1;
                goto LABEL_97;
              }
              if (*v27 != -1)
                *v27 -= v28;
              goto LABEL_96;
            }
            __nwlog_obj();
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            v79 = (void *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v146) = 0;
            if (!__nwlog_fault((const char *)v79, type, &v146))
            {
LABEL_199:
              v14 = v143;
              if (v79)
                free(v79);
              goto LABEL_136;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v80 = objc_claimAutoreleasedReturnValue();
              v89 = type[0];
              if (os_log_type_enabled(v80, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl(&dword_182FBE000, v80, v89, "%{public}s called with null return_array", buf, 0xCu);
              }
LABEL_284:

              goto LABEL_199;
            }
            if (!(_BYTE)v146)
            {
              __nwlog_obj();
              v80 = objc_claimAutoreleasedReturnValue();
              v120 = type[0];
              if (os_log_type_enabled(v80, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl(&dword_182FBE000, v80, v120, "%{public}s called with null return_array, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_284;
            }
            v93 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v80 = objc_claimAutoreleasedReturnValue();
            v102 = type[0];
            v103 = os_log_type_enabled(v80, type[0]);
            if (!v93)
            {
              if (v103)
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl(&dword_182FBE000, v80, v102, "%{public}s called with null return_array, no backtrace", buf, 0xCu);
              }
              goto LABEL_284;
            }
            if (v103)
            {
              *(_DWORD *)buf = 136446466;
              v151 = "nw_protocol_implementation_get_output_frames";
              v152 = 2082;
              v153 = (nw_protocol_identifier *)v93;
              _os_log_impl(&dword_182FBE000, v80, v102, "%{public}s called with null return_array, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
          else
          {
            __nwlog_obj();
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            v79 = (void *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v146) = 0;
            if (!__nwlog_fault((const char *)v79, type, &v146))
              goto LABEL_199;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v80 = objc_claimAutoreleasedReturnValue();
              v87 = type[0];
              if (os_log_type_enabled(v80, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl(&dword_182FBE000, v80, v87, "%{public}s called with null input_protocol", buf, 0xCu);
              }
              goto LABEL_284;
            }
            if (!(_BYTE)v146)
            {
              __nwlog_obj();
              v80 = objc_claimAutoreleasedReturnValue();
              v119 = type[0];
              if (os_log_type_enabled(v80, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl(&dword_182FBE000, v80, v119, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_284;
            }
            v93 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v80 = objc_claimAutoreleasedReturnValue();
            v100 = type[0];
            v101 = os_log_type_enabled(v80, type[0]);
            if (!v93)
            {
              if (v101)
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl(&dword_182FBE000, v80, v100, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
              }
              goto LABEL_284;
            }
            if (v101)
            {
              *(_DWORD *)buf = 136446466;
              v151 = "nw_protocol_implementation_get_output_frames";
              v152 = 2082;
              v153 = (nw_protocol_identifier *)v93;
              _os_log_impl(&dword_182FBE000, v80, v100, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
        }
        else
        {
          __nwlog_obj();
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v151 = "nw_protocol_implementation_get_output_frames";
          v79 = (void *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v146) = 0;
          if (!__nwlog_fault((const char *)v79, type, &v146))
            goto LABEL_199;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v80 = objc_claimAutoreleasedReturnValue();
            v85 = type[0];
            if (os_log_type_enabled(v80, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v151 = "nw_protocol_implementation_get_output_frames";
              _os_log_impl(&dword_182FBE000, v80, v85, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
            }
            goto LABEL_284;
          }
          if (!(_BYTE)v146)
          {
            __nwlog_obj();
            v80 = objc_claimAutoreleasedReturnValue();
            v118 = type[0];
            if (os_log_type_enabled(v80, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v151 = "nw_protocol_implementation_get_output_frames";
              _os_log_impl(&dword_182FBE000, v80, v118, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_284;
          }
          v93 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v80 = objc_claimAutoreleasedReturnValue();
          v98 = type[0];
          v99 = os_log_type_enabled(v80, type[0]);
          if (!v93)
          {
            if (v99)
            {
              *(_DWORD *)buf = 136446210;
              v151 = "nw_protocol_implementation_get_output_frames";
              _os_log_impl(&dword_182FBE000, v80, v98, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
            }
            goto LABEL_284;
          }
          if (v99)
          {
            *(_DWORD *)buf = 136446466;
            v151 = "nw_protocol_implementation_get_output_frames";
            v152 = 2082;
            v153 = (nw_protocol_identifier *)v93;
            _os_log_impl(&dword_182FBE000, v80, v98, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
      }
      else
      {
        __nwlog_obj();
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v151 = "nw_protocol_implementation_get_output_frames";
        v79 = (void *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v146) = 0;
        if (!__nwlog_fault((const char *)v79, type, &v146))
          goto LABEL_199;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v80 = objc_claimAutoreleasedReturnValue();
          v83 = type[0];
          if (os_log_type_enabled(v80, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            _os_log_impl(&dword_182FBE000, v80, v83, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_284;
        }
        if (!(_BYTE)v146)
        {
          __nwlog_obj();
          v80 = objc_claimAutoreleasedReturnValue();
          v117 = type[0];
          if (os_log_type_enabled(v80, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            _os_log_impl(&dword_182FBE000, v80, v117, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_284;
        }
        v93 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v80 = objc_claimAutoreleasedReturnValue();
        v96 = type[0];
        v97 = os_log_type_enabled(v80, type[0]);
        if (!v93)
        {
          if (v97)
          {
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            _os_log_impl(&dword_182FBE000, v80, v96, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_284;
        }
        if (v97)
        {
          *(_DWORD *)buf = 136446466;
          v151 = "nw_protocol_implementation_get_output_frames";
          v152 = 2082;
          v153 = (nw_protocol_identifier *)v93;
          _os_log_impl(&dword_182FBE000, v80, v96, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v151 = "nw_protocol_implementation_get_output_frames";
      v79 = (void *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v146) = 0;
      if (!__nwlog_fault((const char *)v79, type, &v146))
        goto LABEL_199;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v80 = objc_claimAutoreleasedReturnValue();
        v81 = type[0];
        if (os_log_type_enabled(v80, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v151 = "nw_protocol_implementation_get_output_frames";
          _os_log_impl(&dword_182FBE000, v80, v81, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_284;
      }
      if (!(_BYTE)v146)
      {
        __nwlog_obj();
        v80 = objc_claimAutoreleasedReturnValue();
        v116 = type[0];
        if (os_log_type_enabled(v80, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v151 = "nw_protocol_implementation_get_output_frames";
          _os_log_impl(&dword_182FBE000, v80, v116, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_284;
      }
      v93 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v80 = objc_claimAutoreleasedReturnValue();
      v94 = type[0];
      v95 = os_log_type_enabled(v80, type[0]);
      if (!v93)
      {
        if (v95)
        {
          *(_DWORD *)buf = 136446210;
          v151 = "nw_protocol_implementation_get_output_frames";
          _os_log_impl(&dword_182FBE000, v80, v94, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_284;
      }
      if (v95)
      {
        *(_DWORD *)buf = 136446466;
        v151 = "nw_protocol_implementation_get_output_frames";
        v152 = 2082;
        v153 = (nw_protocol_identifier *)v93;
        _os_log_impl(&dword_182FBE000, v80, v94, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v93);
    goto LABEL_199;
  }
  __nwlog_obj();
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v151 = "nw_protocol_implementation_get_output_frames";
  v75 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v146) = 0;
  if (__nwlog_fault(v75, type, &v146))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v76 = objc_claimAutoreleasedReturnValue();
      v77 = type[0];
      if (os_log_type_enabled(v76, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v151 = "nw_protocol_implementation_get_output_frames";
        _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v146)
    {
      v90 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v76 = objc_claimAutoreleasedReturnValue();
      v91 = type[0];
      v92 = os_log_type_enabled(v76, type[0]);
      if (v90)
      {
        if (v92)
        {
          *(_DWORD *)buf = 136446466;
          v151 = "nw_protocol_implementation_get_output_frames";
          v152 = 2082;
          v153 = (nw_protocol_identifier *)v90;
          _os_log_impl(&dword_182FBE000, v76, v91, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v90);
        goto LABEL_267;
      }
      if (v92)
      {
        *(_DWORD *)buf = 136446210;
        v151 = "nw_protocol_implementation_get_output_frames";
        _os_log_impl(&dword_182FBE000, v76, v91, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v76 = objc_claimAutoreleasedReturnValue();
      v115 = type[0];
      if (os_log_type_enabled(v76, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v151 = "nw_protocol_implementation_get_output_frames";
        _os_log_impl(&dword_182FBE000, v76, v115, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_267:
  if (v75)
    free(v75);
  return 0;
}

void sub_1834A9348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_implementation_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NWConcrete_nw_protocol_instance *v9;
  nw_frame *tqh_first;
  nw_frame *v11;
  char v12;
  OS_nw_endpoint *v13;
  void (*v14)(NWConcrete_nw_protocol_instance *);
  uint64_t v15;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  void *v29;
  os_log_type_t v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  os_log_type_t v44;
  os_log_type_t v45;
  os_log_type_t v46;
  os_log_type_t v47;
  _QWORD v48[2];
  uint64_t (*v49)(_QWORD *);
  void *v50;
  NWConcrete_nw_protocol_instance *v51;
  _BYTE *v52;
  nw_frame_array_s *v53;
  char v54;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v5 = p_output_handler;
    v6 = v5;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v7 = *((_QWORD *)v5 + 1);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 80);
        if (v8)
        {
          if (*(_QWORD *)(v8 + 64))
          {
            v5[403] |= 0x20u;
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x2020000000;
            v57 = -1;
            v48[0] = MEMORY[0x1E0C809B0];
            v48[1] = 3221225472;
            v49 = (uint64_t (*)(_QWORD *))___ZL49nw_protocol_implementation_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
            v50 = &unk_1E149BC00;
            v9 = v5;
            v51 = v9;
            v52 = buf;
            v53 = a2;
            tqh_first = a2->tqh_first;
            do
            {
              if (!tqh_first)
                break;
              v11 = (nw_frame *)*((_QWORD *)tqh_first + 4);
              v12 = v49(v48);
              tqh_first = v11;
            }
            while ((v12 & 1) != 0);
            v13 = *(OS_nw_endpoint **)(*(_QWORD *)&buf[8] + 24);
            if (v13 != (OS_nw_endpoint *)-1 && v13 != v9->preferred_ipv6_address)
            {
              v14 = *(void (**)(NWConcrete_nw_protocol_instance *))(*(_QWORD *)(*((_QWORD *)v6 + 1) + 80)
                                                                             + 104);
              if (v14)
                v14(v9);
            }
            v6[403] &= ~0x20u;
            nw_protocol_implementation_deliver_output_available(v9);
            v15 = nw_protocol_implementation_finalize_pending_frames(v9);

            _Block_object_dispose(buf, 8);
LABEL_16:

            return v15;
          }
          __nwlog_obj();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
          v22 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v54 = 0;
          if (__nwlog_fault(v22, &type, &v54))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v23 = objc_claimAutoreleasedReturnValue();
              v30 = type;
              if (os_log_type_enabled(v23, type))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
                _os_log_impl(&dword_182FBE000, v23, v30, "%{public}s called with null instance->parent_definition->extended_state->handle_outbound", buf, 0xCu);
              }
LABEL_103:

              goto LABEL_68;
            }
            if (!v54)
            {
              __nwlog_obj();
              v23 = objc_claimAutoreleasedReturnValue();
              v47 = type;
              if (os_log_type_enabled(v23, type))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
                _os_log_impl(&dword_182FBE000, v23, v47, "%{public}s called with null instance->parent_definition->extended_state->handle_outbound, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_103;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v23 = objc_claimAutoreleasedReturnValue();
            v41 = type;
            v42 = os_log_type_enabled(v23, type);
            if (!backtrace_string)
            {
              if (v42)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
                _os_log_impl(&dword_182FBE000, v23, v41, "%{public}s called with null instance->parent_definition->extended_state->handle_outbound, no backtrace", buf, 0xCu);
              }
              goto LABEL_103;
            }
            if (v42)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v23, v41, "%{public}s called with null instance->parent_definition->extended_state->handle_outbound, dumping backtrace:%{public}s", buf, 0x16u);
            }
            goto LABEL_67;
          }
LABEL_68:
          if (v22)
            free(v22);
          v15 = 0;
          goto LABEL_16;
        }
        __nwlog_obj();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
        v22 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v54 = 0;
        if (!__nwlog_fault(v22, &type, &v54))
          goto LABEL_68;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v23 = objc_claimAutoreleasedReturnValue();
          v28 = type;
          if (os_log_type_enabled(v23, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
            _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_103;
        }
        if (!v54)
        {
          __nwlog_obj();
          v23 = objc_claimAutoreleasedReturnValue();
          v46 = type;
          if (os_log_type_enabled(v23, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
            _os_log_impl(&dword_182FBE000, v23, v46, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_103;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v39 = type;
        v40 = os_log_type_enabled(v23, type);
        if (!backtrace_string)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
            _os_log_impl(&dword_182FBE000, v23, v39, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_103;
        }
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v23, v39, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
        v22 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v54 = 0;
        if (!__nwlog_fault(v22, &type, &v54))
          goto LABEL_68;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v23 = objc_claimAutoreleasedReturnValue();
          v26 = type;
          if (os_log_type_enabled(v23, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
            _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_103;
        }
        if (!v54)
        {
          __nwlog_obj();
          v23 = objc_claimAutoreleasedReturnValue();
          v45 = type;
          if (os_log_type_enabled(v23, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
            _os_log_impl(&dword_182FBE000, v23, v45, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_103;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        v38 = os_log_type_enabled(v23, type);
        if (!backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
            _os_log_impl(&dword_182FBE000, v23, v37, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_103;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v23, v37, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
      v22 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v54 = 0;
      if (!__nwlog_fault(v22, &type, &v54))
        goto LABEL_68;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_103;
      }
      if (!v54)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v44 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v23, v44, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_103;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      v36 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v23, v35, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_103;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v23, v35, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
LABEL_67:

    free(backtrace_string);
    goto LABEL_68;
  }
  __nwlog_obj();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
  v18 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v54 = 0;
  if (__nwlog_fault(v18, &type, &v54))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v54)
    {
      v31 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      v33 = os_log_type_enabled(v19, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v31;
          _os_log_impl(&dword_182FBE000, v19, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v31);
        goto LABEL_89;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v19, v32, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v19, v43, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_89:
  if (v18)
    free(v18);
  return 0;
}

void sub_1834A9F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nw_protocol_implementation_input_available(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  nw_protocol **p_output_handler;
  NWConcrete_nw_protocol_instance *v5;
  NWConcrete_nw_protocol_instance *v6;
  NWConcrete_nw_protocol_definition *parent_definition;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  os_log_type_t v32;
  os_log_type_t v33;
  os_log_type_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v5 = p_output_handler;
    v6 = v5;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      parent_definition = v5->parent_definition;
      if (parent_definition)
      {
        if (parent_definition->extended_state)
        {
          nw_protocol_implementation_read(v5, a2);
LABEL_8:

          return;
        }
        __nwlog_obj();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_implementation_input_available";
        v13 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v35 = 0;
        if (!__nwlog_fault(v13, &type, &v35))
          goto LABEL_77;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          v19 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            v38 = "nw_protocol_implementation_input_available";
            _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_76;
        }
        if (!v35)
        {
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          v34 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            v38 = "nw_protocol_implementation_input_available";
            _os_log_impl(&dword_182FBE000, v14, v34, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        v30 = os_log_type_enabled(v14, type);
        if (!backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446210;
            v38 = "nw_protocol_implementation_input_available";
            _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_76;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_protocol_implementation_input_available";
          v39 = 2082;
          v40 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_implementation_input_available";
        v13 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v35 = 0;
        if (!__nwlog_fault(v13, &type, &v35))
          goto LABEL_77;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          v17 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            v38 = "nw_protocol_implementation_input_available";
            _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_76;
        }
        if (!v35)
        {
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          v33 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            v38 = "nw_protocol_implementation_input_available";
            _os_log_impl(&dword_182FBE000, v14, v33, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        v28 = os_log_type_enabled(v14, type);
        if (!backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446210;
            v38 = "nw_protocol_implementation_input_available";
            _os_log_impl(&dword_182FBE000, v14, v27, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_76;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_protocol_implementation_input_available";
          v39 = 2082;
          v40 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v27, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(backtrace_string);
      if (!v13)
        goto LABEL_8;
      goto LABEL_78;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_implementation_input_available";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v13, &type, &v35))
      goto LABEL_77;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_implementation_input_available";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v35)
    {
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v14, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_protocol_implementation_input_available";
          v39 = 2082;
          v40 = v23;
          _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
LABEL_77:
        if (!v13)
          goto LABEL_8;
LABEL_78:
        free(v13);
        goto LABEL_8;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_implementation_input_available";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_implementation_input_available";
        _os_log_impl(&dword_182FBE000, v14, v32, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_76:

    goto LABEL_77;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v38 = "nw_protocol_implementation_input_available";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (__nwlog_fault(v9, &type, &v35))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_implementation_input_available";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v35)
    {
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v10, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_protocol_implementation_input_available";
          v39 = 2082;
          v40 = v20;
          _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_66;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_implementation_input_available";
        _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_implementation_input_available";
        _os_log_impl(&dword_182FBE000, v10, v31, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_66:
  if (v9)
    free(v9);
}

void sub_1834AA878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_implementation_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  id v15;
  os_log_type_t v16;
  uint64_t v17;
  char v18;
  id v19;
  os_log_type_t v20;
  id v21;
  os_log_type_t v22;
  id v23;
  os_log_type_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *);
  const char *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  os_log_type_t v35;
  const char *v36;
  os_log_type_t v37;
  const char *v38;
  os_log_type_t v39;
  const char *v40;
  os_log_type_t v41;
  os_log_type_t v42;
  os_log_type_t v43;
  os_log_type_t v44;
  os_log_type_t v45;
  os_log_type_t v46;
  os_log_type_t v47;
  os_log_type_t v48;
  os_log_type_t v49;
  os_log_type_t v50;
  os_log_type_t v51;
  void *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  void *v56;
  os_log_type_t v57;
  void *v58;
  os_log_type_t v59;
  void *v60;
  os_log_type_t v61;
  void *v62;
  os_log_type_t v63;
  NSObject *v64;
  char *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  char *backtrace_string;
  os_log_type_t v69;
  _BOOL4 v70;
  char *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  os_log_type_t v74;
  _BOOL4 v75;
  os_log_type_t v76;
  _BOOL4 v77;
  void *v78;
  const char *v79;
  char *v80;
  NSObject *v81;
  os_log_type_t v82;
  const char *v83;
  NSObject *v84;
  void *v85;
  os_log_type_t v86;
  char *v87;
  os_log_type_t v88;
  _BOOL4 v89;
  const char *v90;
  os_log_type_t v91;
  os_log_type_t v92;
  os_log_type_t v93;
  os_log_type_t v94;
  os_log_type_t v95;
  os_log_type_t v96;
  _BOOL4 v97;
  os_log_type_t v98;
  const char *v99;
  const char *v100;
  os_log_type_t v101;
  char v102;
  os_log_type_t v103;
  char *v104;
  char v105;
  os_log_type_t type[8];
  char v107;
  uint8_t buf[4];
  const char *v109;
  __int16 v110;
  char *v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  char *v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v5 = p_output_handler;
    v6 = v5;
    if (handle != &nw_protocol_ref_counted_handle)
    {
      __nwlog_obj();
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_input_finished";
      v11 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (__nwlog_fault(v11, type, &v104))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v57 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v57, "%{public}s called with null instance", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (!(_BYTE)v104)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v92 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v92, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_114;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v69 = type[0];
        v70 = os_log_type_enabled(v12, type[0]);
        if (!backtrace_string)
        {
          if (v70)
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v69, "%{public}s called with null instance, no backtrace", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (v70)
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_input_finished";
          v110 = 2082;
          v111 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v69, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
      }
      goto LABEL_115;
    }
    v7 = *((_QWORD *)v5 + 1);
    if (!v7)
    {
      __nwlog_obj();
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_input_finished";
      v11 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v11, type, &v104))
        goto LABEL_115;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v59 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_182FBE000, v12, v59, "%{public}s called with null instance->parent_definition", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (!(_BYTE)v104)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v93 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_182FBE000, v12, v93, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_114;
      }
      v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v72 = type[0];
      v73 = os_log_type_enabled(v12, type[0]);
      if (!v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_182FBE000, v12, v72, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (v73)
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_input_finished";
        v110 = 2082;
        v111 = v71;
        _os_log_impl(&dword_182FBE000, v12, v72, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_171;
    }
    if (!*(_QWORD *)(v7 + 80))
    {
      __nwlog_obj();
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_input_finished";
      v11 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v11, type, &v104))
        goto LABEL_115;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v61 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_182FBE000, v12, v61, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (!(_BYTE)v104)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v94 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_182FBE000, v12, v94, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_114;
      }
      v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v74 = type[0];
      v75 = os_log_type_enabled(v12, type[0]);
      if (!v71)
      {
        if (v75)
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_182FBE000, v12, v74, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (v75)
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_input_finished";
        v110 = 2082;
        v111 = v71;
        _os_log_impl(&dword_182FBE000, v12, v74, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_171;
    }
    if (!a2)
    {
      __nwlog_obj();
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_input_finished";
      v11 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v11, type, &v104))
        goto LABEL_115;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v63 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_182FBE000, v12, v63, "%{public}s called with null output_protocol", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (!(_BYTE)v104)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v95 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_182FBE000, v12, v95, "%{public}s called with null output_protocol, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_114;
      }
      v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v76 = type[0];
      v77 = os_log_type_enabled(v12, type[0]);
      if (!v71)
      {
        if (v77)
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_182FBE000, v12, v76, "%{public}s called with null output_protocol, no backtrace", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (v77)
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_input_finished";
        v110 = 2082;
        v111 = v71;
        _os_log_impl(&dword_182FBE000, v12, v76, "%{public}s called with null output_protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_171;
    }
    if (gLogDatapath)
    {
      __nwlog_obj();
      v64 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_input_finished";
        v110 = 2048;
        v111 = v6;
        _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s Instance %p input finished", buf, 0x16u);
      }

      v7 = *((_QWORD *)v6 + 1);
    }
    v8 = *(_DWORD *)(v7 + 64);
    if (v8 == 2)
    {
      v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 + 80) + 128);
      if (v14)
      {
        if ((v14(v6, -1, 1) & 1) != 0)
          goto LABEL_117;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        v11 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v104) = 0;
        if (!__nwlog_fault(v11, type, &v104))
          goto LABEL_115;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = (id)gLogObj;
          v16 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v16, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (!(_BYTE)v104)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v46 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v46, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_114;
        }
        v40 = __nw_create_backtrace_string();
        if (!v40)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v51 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v51, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, no backtrace", buf, 0xCu);
          }
          goto LABEL_114;
        }
        v31 = (char *)v40;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = (id)gLogObj;
        v41 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_input_finished";
          v110 = 2082;
          v111 = v31;
          _os_log_impl(&dword_182FBE000, v32, v41, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        v11 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v104) = 0;
        if (!__nwlog_fault(v11, type, &v104))
          goto LABEL_115;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = (id)gLogObj;
          v22 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null instance->parent_definition->stop", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (!(_BYTE)v104)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = (id)gLogObj;
          v43 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v43, "%{public}s called with null instance->parent_definition->stop, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_114;
        }
        v34 = __nw_create_backtrace_string();
        if (!v34)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v48 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v48, "%{public}s called with null instance->parent_definition->stop, no backtrace", buf, 0xCu);
          }
          goto LABEL_114;
        }
        v31 = (char *)v34;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = (id)gLogObj;
        v35 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_input_finished";
          v110 = 2082;
          v111 = v31;
          _os_log_impl(&dword_182FBE000, v32, v35, "%{public}s called with null instance->parent_definition->stop, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      goto LABEL_83;
    }
    if (v8 == 3)
    {
      v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 + 80) + 128);
      if (!v9)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        v11 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v104) = 0;
        if (!__nwlog_fault(v11, type, &v104))
          goto LABEL_115;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = (id)gLogObj;
          v20 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null instance->parent_definition->stop", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (!(_BYTE)v104)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = (id)gLogObj;
          v42 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v42, "%{public}s called with null instance->parent_definition->stop, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_114;
        }
        v30 = __nw_create_backtrace_string();
        if (!v30)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v47 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v47, "%{public}s called with null instance->parent_definition->stop, no backtrace", buf, 0xCu);
          }
          goto LABEL_114;
        }
        v31 = (char *)v30;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = (id)gLogObj;
        v33 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_input_finished";
          v110 = 2082;
          v111 = v31;
          _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null instance->parent_definition->stop, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_83;
      }
      if ((v9(v6, -1, 1) & 1) != 0)
        goto LABEL_117;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_input_finished";
      v11 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (__nwlog_fault(v11, type, &v104))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = (id)gLogObj;
          v13 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s Cannot defer stop of NW_PROTOCOL_ALL_FLOWS", buf, 0xCu);
          }
LABEL_114:

          goto LABEL_115;
        }
        if (!(_BYTE)v104)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v45 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v45, "%{public}s Cannot defer stop of NW_PROTOCOL_ALL_FLOWS, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_114;
        }
        v38 = __nw_create_backtrace_string();
        if (!v38)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v50 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v50, "%{public}s Cannot defer stop of NW_PROTOCOL_ALL_FLOWS, no backtrace", buf, 0xCu);
          }
          goto LABEL_114;
        }
        v31 = (char *)v38;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = (id)gLogObj;
        v39 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_input_finished";
          v110 = 2082;
          v111 = v31;
          _os_log_impl(&dword_182FBE000, v32, v39, "%{public}s Cannot defer stop of NW_PROTOCOL_ALL_FLOWS, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_83:

        free(v31);
        if (!v11)
          goto LABEL_117;
        goto LABEL_116;
      }
LABEL_115:
      if (v11)
LABEL_116:
        free(v11);
LABEL_117:

      return;
    }
    v17 = *((_QWORD *)v6 - 6);
    if (!v17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_input_finished";
      v11 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v11, type, &v104))
        goto LABEL_115;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v24 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s called with null nw_protocol_get_input_handler(&instance->protocol)", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (!(_BYTE)v104)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v44 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_182FBE000, v12, v44, "%{public}s called with null nw_protocol_get_input_handler(&instance->protocol), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_114;
      }
      v36 = __nw_create_backtrace_string();
      if (!v36)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v49 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_182FBE000, v12, v49, "%{public}s called with null nw_protocol_get_input_handler(&instance->protocol), no backtrace", buf, 0xCu);
        }
        goto LABEL_114;
      }
      v31 = (char *)v36;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v32 = (id)gLogObj;
      v37 = type[0];
      if (os_log_type_enabled(v32, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_input_finished";
        v110 = 2082;
        v111 = v31;
        _os_log_impl(&dword_182FBE000, v32, v37, "%{public}s called with null nw_protocol_get_input_handler(&instance->protocol), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_83;
    }
    if (gLogDatapath)
    {
      __nwlog_obj();
      v84 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_DEBUG, "%{public}s Passing through input finished to default input handler", buf, 0xCu);
      }

      v17 = *((_QWORD *)v6 - 6);
      if (!v17)
      {
        __nwlog_obj();
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v109 = "__nw_protocol_input_finished";
        v11 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v104) = 0;
        if (!__nwlog_fault(v11, type, &v104))
          goto LABEL_115;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v86 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "__nw_protocol_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v86, "%{public}s called with null protocol", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (!(_BYTE)v104)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v101 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "__nw_protocol_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v101, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_114;
        }
        v71 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v96 = type[0];
        v97 = os_log_type_enabled(v12, type[0]);
        if (!v71)
        {
          if (v97)
          {
            *(_DWORD *)buf = 136446210;
            v109 = "__nw_protocol_input_finished";
            _os_log_impl(&dword_182FBE000, v12, v96, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (v97)
        {
          *(_DWORD *)buf = 136446466;
          v109 = "__nw_protocol_input_finished";
          v110 = 2082;
          v111 = v71;
          _os_log_impl(&dword_182FBE000, v12, v96, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_171:

        free(v71);
        if (!v11)
          goto LABEL_117;
        goto LABEL_116;
      }
    }
    if (*(_UNKNOWN **)(v17 + 40) == &nw_protocol_ref_counted_handle)
    {
      v25 = *(_QWORD *)(v17 + 88);
      if (v25)
        *(_QWORD *)(v17 + 88) = v25 + 1;
      v18 = -1;
    }
    else
    {
      v18 = 0;
    }
    *(_QWORD *)type = v17;
    v107 = v18;
    if (*((_UNKNOWN **)v6 - 7) == &nw_protocol_ref_counted_handle)
    {
      v27 = *((_QWORD *)v6 - 1);
      if (v27)
        *((_QWORD *)v6 - 1) = v27 + 1;
      v26 = -1;
    }
    else
    {
      v26 = 0;
    }
    v104 = v6 - 96;
    v105 = v26;
    v28 = *(_QWORD *)(v17 + 24);
    if (v28)
    {
      v29 = *(void (**)(uint64_t, char *))(v28 + 184);
      if (v29)
      {
        v29(v17, v6 - 96);
        v26 = v105;
LABEL_55:
        if ((v26 & 1) != 0)
          nw::release_if_needed<nw_protocol *>((uint64_t *)&v104);
        if ((v107 & 1) != 0)
          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
        goto LABEL_117;
      }
    }
    __nwlog_obj();
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v79 = *(const char **)(v17 + 16);
    *(_DWORD *)buf = 136446722;
    v109 = "__nw_protocol_input_finished";
    if (!v79)
      v79 = "invalid";
    v110 = 2082;
    v111 = (char *)v79;
    v112 = 2048;
    v113 = v17;
    v80 = (char *)_os_log_send_and_compose_impl();

    v103 = OS_LOG_TYPE_ERROR;
    v102 = 0;
    if (__nwlog_fault(v80, &v103, &v102))
    {
      if (v103 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v81 = objc_claimAutoreleasedReturnValue();
        v82 = v103;
        if (os_log_type_enabled(v81, v103))
        {
          v83 = *(const char **)(v17 + 16);
          if (!v83)
            v83 = "invalid";
          *(_DWORD *)buf = 136446722;
          v109 = "__nw_protocol_input_finished";
          v110 = 2082;
          v111 = (char *)v83;
          v112 = 2048;
          v113 = v17;
          _os_log_impl(&dword_182FBE000, v81, v82, "%{public}s protocol %{public}s (%p) has invalid input_finished callback", buf, 0x20u);
        }
      }
      else if (v102)
      {
        v87 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v81 = objc_claimAutoreleasedReturnValue();
        v88 = v103;
        v89 = os_log_type_enabled(v81, v103);
        if (v87)
        {
          if (v89)
          {
            v90 = *(const char **)(v17 + 16);
            if (!v90)
              v90 = "invalid";
            *(_DWORD *)buf = 136446978;
            v109 = "__nw_protocol_input_finished";
            v110 = 2082;
            v111 = (char *)v90;
            v112 = 2048;
            v113 = v17;
            v114 = 2082;
            v115 = v87;
            _os_log_impl(&dword_182FBE000, v81, v88, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v87);
          goto LABEL_244;
        }
        if (v89)
        {
          v100 = *(const char **)(v17 + 16);
          if (!v100)
            v100 = "invalid";
          *(_DWORD *)buf = 136446722;
          v109 = "__nw_protocol_input_finished";
          v110 = 2082;
          v111 = (char *)v100;
          v112 = 2048;
          v113 = v17;
          _os_log_impl(&dword_182FBE000, v81, v88, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        __nwlog_obj();
        v81 = objc_claimAutoreleasedReturnValue();
        v98 = v103;
        if (os_log_type_enabled(v81, v103))
        {
          v99 = *(const char **)(v17 + 16);
          if (!v99)
            v99 = "invalid";
          *(_DWORD *)buf = 136446722;
          v109 = "__nw_protocol_input_finished";
          v110 = 2082;
          v111 = (char *)v99;
          v112 = 2048;
          v113 = v17;
          _os_log_impl(&dword_182FBE000, v81, v98, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
LABEL_244:
    if (v80)
      free(v80);
    goto LABEL_55;
  }
  __nwlog_obj();
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v109 = "nw_protocol_implementation_input_finished";
  v53 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v104) = 0;
  if (__nwlog_fault(v53, type, &v104))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v55 = type[0];
      if (os_log_type_enabled(v54, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v104)
    {
      v65 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v66 = type[0];
      v67 = os_log_type_enabled(v54, type[0]);
      if (v65)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_input_finished";
          v110 = 2082;
          v111 = v65;
          _os_log_impl(&dword_182FBE000, v54, v66, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v65);
        goto LABEL_215;
      }
      if (v67)
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        _os_log_impl(&dword_182FBE000, v54, v66, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v91 = type[0];
      if (os_log_type_enabled(v54, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        _os_log_impl(&dword_182FBE000, v54, v91, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_215:
  if (v53)
    free(v53);
}

void sub_1834AC5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  if ((a16 & 1) != 0)
    nw::release_if_needed<nw_protocol *>(&a15);
  if ((a18 & 1) != 0)
    nw::release_if_needed<nw_protocol *>(&a17);

  _Unwind_Resume(a1);
}

void nw_protocol_implementation_input_flush(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v4;
  char *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  os_log_type_t v31;
  os_log_type_t v32;
  os_log_type_t v33;
  char v34;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v4 = p_output_handler;
    v5 = v4;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v6 = *((_QWORD *)v4 + 1);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 80))
        {
LABEL_7:

          return;
        }
        __nwlog_obj();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v37 = "nw_protocol_implementation_input_flush";
        v12 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v34 = 0;
        if (!__nwlog_fault(v12, &type, &v34))
          goto LABEL_76;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v13 = objc_claimAutoreleasedReturnValue();
          v18 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)buf = 136446210;
            v37 = "nw_protocol_implementation_input_flush";
            _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
        }
        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v13 = objc_claimAutoreleasedReturnValue();
          v28 = type;
          v29 = os_log_type_enabled(v13, type);
          if (backtrace_string)
          {
            if (v29)
            {
              *(_DWORD *)buf = 136446466;
              v37 = "nw_protocol_implementation_input_flush";
              v38 = 2082;
              v39 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v13, v28, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
LABEL_76:
            if (!v12)
              goto LABEL_7;
LABEL_77:
            free(v12);
            goto LABEL_7;
          }
          if (v29)
          {
            *(_DWORD *)buf = 136446210;
            v37 = "nw_protocol_implementation_input_flush";
            _os_log_impl(&dword_182FBE000, v13, v28, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v13 = objc_claimAutoreleasedReturnValue();
          v33 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)buf = 136446210;
            v37 = "nw_protocol_implementation_input_flush";
            _os_log_impl(&dword_182FBE000, v13, v33, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
        }
LABEL_75:

        goto LABEL_76;
      }
      __nwlog_obj();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v37 = "nw_protocol_implementation_input_flush";
      v12 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v34 = 0;
      if (!__nwlog_fault(v12, &type, &v34))
        goto LABEL_76;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_protocol_implementation_input_flush";
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null instance->parent_definition", buf, 0xCu);
        }
        goto LABEL_75;
      }
      if (!v34)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_protocol_implementation_input_flush";
          _os_log_impl(&dword_182FBE000, v13, v32, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_75;
      }
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v13, type);
      if (!v22)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_protocol_implementation_input_flush";
          _os_log_impl(&dword_182FBE000, v13, v25, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_75;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        v37 = "nw_protocol_implementation_input_flush";
        v38 = 2082;
        v39 = v22;
        _os_log_impl(&dword_182FBE000, v13, v25, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v37 = "nw_protocol_implementation_input_flush";
      v12 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v34 = 0;
      if (!__nwlog_fault(v12, &type, &v34))
        goto LABEL_76;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_protocol_implementation_input_flush";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_75;
      }
      if (!v34)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_protocol_implementation_input_flush";
          _os_log_impl(&dword_182FBE000, v13, v31, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_75;
      }
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v13, type);
      if (!v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_protocol_implementation_input_flush";
          _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_75;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        v37 = "nw_protocol_implementation_input_flush";
        v38 = 2082;
        v39 = v22;
        _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v22);
    if (!v12)
      goto LABEL_7;
    goto LABEL_77;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v37 = "nw_protocol_implementation_input_flush";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v34 = 0;
  if (__nwlog_fault(v8, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_protocol_implementation_input_flush";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v34)
    {
      v19 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v9, type);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v37 = "nw_protocol_implementation_input_flush";
          v38 = 2082;
          v39 = v19;
          _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v19);
        goto LABEL_65;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_protocol_implementation_input_flush";
        _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_protocol_implementation_input_flush";
        _os_log_impl(&dword_182FBE000, v9, v30, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_65:
  if (v8)
    free(v8);
}

void nw_protocol_implementation_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v5;
  void **v6;
  _QWORD *v7;
  int v8;
  uint64_t (*v9)(NWConcrete_nw_protocol_instance *, uint64_t, uint64_t);
  NWConcrete_nw_protocol_instance *v10;
  uint64_t v11;
  char v12;
  char v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t (*v16)(void **, uint64_t, uint64_t);
  id v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  char v22;
  id v23;
  os_log_type_t v24;
  id v25;
  os_log_type_t v26;
  id v27;
  os_log_type_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, void **);
  const char *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  os_log_type_t v39;
  const char *v40;
  os_log_type_t v41;
  const char *v42;
  os_log_type_t v43;
  os_log_type_t v44;
  os_log_type_t v45;
  os_log_type_t v46;
  os_log_type_t v47;
  os_log_type_t v48;
  os_log_type_t v49;
  os_log_type_t v50;
  os_log_type_t v51;
  void *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  void *v56;
  os_log_type_t v57;
  void *v58;
  os_log_type_t v59;
  void *v60;
  os_log_type_t v61;
  void *v62;
  os_log_type_t v63;
  NSObject *v64;
  char *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  char *backtrace_string;
  os_log_type_t v69;
  _BOOL4 v70;
  char *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  os_log_type_t v74;
  _BOOL4 v75;
  os_log_type_t v76;
  _BOOL4 v77;
  void *v78;
  const char *v79;
  char *v80;
  NSObject *v81;
  os_log_type_t v82;
  const char *v83;
  NSObject *v84;
  void *v85;
  os_log_type_t v86;
  char *v87;
  os_log_type_t v88;
  _BOOL4 v89;
  const char *v90;
  os_log_type_t v91;
  os_log_type_t v92;
  os_log_type_t v93;
  os_log_type_t v94;
  os_log_type_t v95;
  os_log_type_t v96;
  _BOOL4 v97;
  os_log_type_t v98;
  const char *v99;
  const char *v100;
  os_log_type_t v101;
  char v102;
  os_log_type_t v103;
  void **v104;
  char v105;
  os_log_type_t type[8];
  char v107;
  uint8_t buf[4];
  const char *v109;
  __int16 v110;
  char *v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  char *v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v5 = p_output_handler;
    v6 = (void **)v5;
    if (handle != &nw_protocol_ref_counted_handle)
    {
      __nwlog_obj();
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (__nwlog_fault(v18, type, &v104))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v57 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v57, "%{public}s called with null instance", buf, 0xCu);
          }
          goto LABEL_108;
        }
        if (!(_BYTE)v104)
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v92 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v92, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_108;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v69 = type[0];
        v70 = os_log_type_enabled(v19, type[0]);
        if (!backtrace_string)
        {
          if (v70)
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v69, "%{public}s called with null instance, no backtrace", buf, 0xCu);
          }
          goto LABEL_108;
        }
        if (v70)
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_output_finished";
          v110 = 2082;
          v111 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v69, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
      }
      goto LABEL_109;
    }
    v7 = (_QWORD *)*((_QWORD *)v5 + 1);
    if (!v7)
    {
      __nwlog_obj();
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v18, type, &v104))
        goto LABEL_109;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v59 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_182FBE000, v19, v59, "%{public}s called with null instance->parent_definition", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (!(_BYTE)v104)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v93 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_182FBE000, v19, v93, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_108;
      }
      v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v72 = type[0];
      v73 = os_log_type_enabled(v19, type[0]);
      if (!v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_182FBE000, v19, v72, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (v73)
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_output_finished";
        v110 = 2082;
        v111 = v71;
        _os_log_impl(&dword_182FBE000, v19, v72, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_165;
    }
    if (!v7[10])
    {
      __nwlog_obj();
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v18, type, &v104))
        goto LABEL_109;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v61 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_182FBE000, v19, v61, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (!(_BYTE)v104)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v94 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_182FBE000, v19, v94, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_108;
      }
      v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v74 = type[0];
      v75 = os_log_type_enabled(v19, type[0]);
      if (!v71)
      {
        if (v75)
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_182FBE000, v19, v74, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (v75)
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_output_finished";
        v110 = 2082;
        v111 = v71;
        _os_log_impl(&dword_182FBE000, v19, v74, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_165;
    }
    if (!a2)
    {
      __nwlog_obj();
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v18, type, &v104))
        goto LABEL_109;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v63 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_182FBE000, v19, v63, "%{public}s called with null input_protocol", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (!(_BYTE)v104)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v95 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_182FBE000, v19, v95, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_108;
      }
      v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v76 = type[0];
      v77 = os_log_type_enabled(v19, type[0]);
      if (!v71)
      {
        if (v77)
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_182FBE000, v19, v76, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (v77)
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_output_finished";
        v110 = 2082;
        v111 = v71;
        _os_log_impl(&dword_182FBE000, v19, v76, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_165;
    }
    if (gLogDatapath)
    {
      __nwlog_obj();
      v64 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_output_finished";
        v110 = 2048;
        v111 = (char *)v6;
        _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s Instance %p output finished", buf, 0x16u);
      }

      v7 = v6[1];
    }
    v8 = *((_DWORD *)v7 + 16);
    if (v8 == 2)
    {
      v16 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v7[10] + 128);
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_output_finished";
        v18 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v104) = 0;
        if (!__nwlog_fault(v18, type, &v104))
          goto LABEL_109;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          v26 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v26, "%{public}s called with null instance->parent_definition->stop", buf, 0xCu);
          }
          goto LABEL_108;
        }
        if (!(_BYTE)v104)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          v45 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v45, "%{public}s called with null instance->parent_definition->stop, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_108;
        }
        v38 = __nw_create_backtrace_string();
        if (!v38)
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v49 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v49, "%{public}s called with null instance->parent_definition->stop, no backtrace", buf, 0xCu);
          }
          goto LABEL_108;
        }
        v35 = (char *)v38;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        v39 = type[0];
        if (os_log_type_enabled(v36, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_output_finished";
          v110 = 2082;
          v111 = v35;
          _os_log_impl(&dword_182FBE000, v36, v39, "%{public}s called with null instance->parent_definition->stop, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_82;
      }
      if ((v16(v6, -1, 2) & 1) != 0)
        goto LABEL_111;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (__nwlog_fault(v18, type, &v104))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          v20 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW", buf, 0xCu);
          }
          goto LABEL_108;
        }
        if (!(_BYTE)v104)
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v47 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v47, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_108;
        }
        v42 = __nw_create_backtrace_string();
        if (!v42)
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v51 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v51, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, no backtrace", buf, 0xCu);
          }
          goto LABEL_108;
        }
        v35 = (char *)v42;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        v43 = type[0];
        if (os_log_type_enabled(v36, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_output_finished";
          v110 = 2082;
          v111 = v35;
          _os_log_impl(&dword_182FBE000, v36, v43, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_82;
      }
      goto LABEL_109;
    }
    if (v8 == 3)
    {
      v9 = *(uint64_t (**)(NWConcrete_nw_protocol_instance *, uint64_t, uint64_t))(v7[10] + 128);
      if (v9)
      {
        v10 = v6;
        if (nw_protocol_definition_get_message_is_stream(v6[1])
          && *(nw_protocol **)&v10[-1].log_str[41] == a2)
        {
          v11 = -2;
        }
        else
        {
          v11 = (uint64_t)a2;
        }

        v12 = v9(v10, v11, 2);
        if (gLogDatapath)
          v13 = v12;
        else
          v13 = 1;
        if ((v13 & 1) == 0)
        {
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            v15 = nw_protocol_flow_for_protocol(v10, (uint64_t)a2);
            *(_DWORD *)buf = 136446466;
            v109 = "nw_protocol_implementation_output_finished";
            v110 = 2048;
            v111 = (char *)v15;
            _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s Flow %llx elected to defer stop, ignoring output_finished anyway", buf, 0x16u);
          }

        }
        goto LABEL_111;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (__nwlog_fault(v18, type, &v104))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          v24 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null instance->parent_definition->stop", buf, 0xCu);
          }
LABEL_108:

          goto LABEL_109;
        }
        if (!(_BYTE)v104)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          v44 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v44, "%{public}s called with null instance->parent_definition->stop, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_108;
        }
        v34 = __nw_create_backtrace_string();
        if (!v34)
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v48 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v48, "%{public}s called with null instance->parent_definition->stop, no backtrace", buf, 0xCu);
          }
          goto LABEL_108;
        }
        v35 = (char *)v34;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        v37 = type[0];
        if (os_log_type_enabled(v36, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_output_finished";
          v110 = 2082;
          v111 = v35;
          _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s called with null instance->parent_definition->stop, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_82:

        free(v35);
        if (!v18)
          goto LABEL_111;
        goto LABEL_110;
      }
LABEL_109:
      if (v18)
LABEL_110:
        free(v18);
LABEL_111:

      return;
    }
    v21 = (uint64_t)*(v6 - 8);
    if (!v21)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v27 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v18, type, &v104))
        goto LABEL_109;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v28 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_182FBE000, v19, v28, "%{public}s called with null nw_protocol_get_output_handler(&instance->protocol)", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (!(_BYTE)v104)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v46 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_182FBE000, v19, v46, "%{public}s called with null nw_protocol_get_output_handler(&instance->protocol), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_108;
      }
      v40 = __nw_create_backtrace_string();
      if (!v40)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v50 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_182FBE000, v19, v50, "%{public}s called with null nw_protocol_get_output_handler(&instance->protocol), no backtrace", buf, 0xCu);
        }
        goto LABEL_108;
      }
      v35 = (char *)v40;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = (id)gLogObj;
      v41 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_output_finished";
        v110 = 2082;
        v111 = v35;
        _os_log_impl(&dword_182FBE000, v36, v41, "%{public}s called with null nw_protocol_get_output_handler(&instance->protocol), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_82;
    }
    if (gLogDatapath)
    {
      __nwlog_obj();
      v84 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_output_finished";
        _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_DEBUG, "%{public}s Passing through output finished to output handler", buf, 0xCu);
      }

      v21 = (uint64_t)*(v6 - 8);
      if (!v21)
      {
        __nwlog_obj();
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v109 = "__nw_protocol_output_finished";
        v18 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v104) = 0;
        if (!__nwlog_fault(v18, type, &v104))
          goto LABEL_109;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v86 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "__nw_protocol_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v86, "%{public}s called with null protocol", buf, 0xCu);
          }
          goto LABEL_108;
        }
        if (!(_BYTE)v104)
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v101 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "__nw_protocol_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v101, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_108;
        }
        v71 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v96 = type[0];
        v97 = os_log_type_enabled(v19, type[0]);
        if (!v71)
        {
          if (v97)
          {
            *(_DWORD *)buf = 136446210;
            v109 = "__nw_protocol_output_finished";
            _os_log_impl(&dword_182FBE000, v19, v96, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }
          goto LABEL_108;
        }
        if (v97)
        {
          *(_DWORD *)buf = 136446466;
          v109 = "__nw_protocol_output_finished";
          v110 = 2082;
          v111 = v71;
          _os_log_impl(&dword_182FBE000, v19, v96, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_165:

        free(v71);
        if (!v18)
          goto LABEL_111;
        goto LABEL_110;
      }
    }
    if (*(_UNKNOWN **)(v21 + 40) == &nw_protocol_ref_counted_handle)
    {
      v29 = *(_QWORD *)(v21 + 88);
      if (v29)
        *(_QWORD *)(v21 + 88) = v29 + 1;
      v22 = -1;
    }
    else
    {
      v22 = 0;
    }
    *(_QWORD *)type = v21;
    v107 = v22;
    if (*(v6 - 7) == &nw_protocol_ref_counted_handle)
    {
      v31 = (uint64_t)*(v6 - 1);
      if (v31)
        *(v6 - 1) = (void *)(v31 + 1);
      v30 = -1;
    }
    else
    {
      v30 = 0;
    }
    v104 = v6 - 12;
    v105 = v30;
    v32 = *(_QWORD *)(v21 + 24);
    if (v32)
    {
      v33 = *(void (**)(uint64_t, void **))(v32 + 192);
      if (v33)
      {
        v33(v21, v6 - 12);
        v30 = v105;
LABEL_59:
        if ((v30 & 1) != 0)
          nw::release_if_needed<nw_protocol *>((uint64_t *)&v104);
        if ((v107 & 1) != 0)
          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
        goto LABEL_111;
      }
    }
    __nwlog_obj();
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v79 = *(const char **)(v21 + 16);
    *(_DWORD *)buf = 136446722;
    v109 = "__nw_protocol_output_finished";
    if (!v79)
      v79 = "invalid";
    v110 = 2082;
    v111 = (char *)v79;
    v112 = 2048;
    v113 = v21;
    v80 = (char *)_os_log_send_and_compose_impl();

    v103 = OS_LOG_TYPE_ERROR;
    v102 = 0;
    if (__nwlog_fault(v80, &v103, &v102))
    {
      if (v103 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v81 = objc_claimAutoreleasedReturnValue();
        v82 = v103;
        if (os_log_type_enabled(v81, v103))
        {
          v83 = *(const char **)(v21 + 16);
          if (!v83)
            v83 = "invalid";
          *(_DWORD *)buf = 136446722;
          v109 = "__nw_protocol_output_finished";
          v110 = 2082;
          v111 = (char *)v83;
          v112 = 2048;
          v113 = v21;
          _os_log_impl(&dword_182FBE000, v81, v82, "%{public}s protocol %{public}s (%p) has invalid output_finished callback", buf, 0x20u);
        }
      }
      else if (v102)
      {
        v87 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v81 = objc_claimAutoreleasedReturnValue();
        v88 = v103;
        v89 = os_log_type_enabled(v81, v103);
        if (v87)
        {
          if (v89)
          {
            v90 = *(const char **)(v21 + 16);
            if (!v90)
              v90 = "invalid";
            *(_DWORD *)buf = 136446978;
            v109 = "__nw_protocol_output_finished";
            v110 = 2082;
            v111 = (char *)v90;
            v112 = 2048;
            v113 = v21;
            v114 = 2082;
            v115 = v87;
            _os_log_impl(&dword_182FBE000, v81, v88, "%{public}s protocol %{public}s (%p) has invalid output_finished callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v87);
          goto LABEL_238;
        }
        if (v89)
        {
          v100 = *(const char **)(v21 + 16);
          if (!v100)
            v100 = "invalid";
          *(_DWORD *)buf = 136446722;
          v109 = "__nw_protocol_output_finished";
          v110 = 2082;
          v111 = (char *)v100;
          v112 = 2048;
          v113 = v21;
          _os_log_impl(&dword_182FBE000, v81, v88, "%{public}s protocol %{public}s (%p) has invalid output_finished callback, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        __nwlog_obj();
        v81 = objc_claimAutoreleasedReturnValue();
        v98 = v103;
        if (os_log_type_enabled(v81, v103))
        {
          v99 = *(const char **)(v21 + 16);
          if (!v99)
            v99 = "invalid";
          *(_DWORD *)buf = 136446722;
          v109 = "__nw_protocol_output_finished";
          v110 = 2082;
          v111 = (char *)v99;
          v112 = 2048;
          v113 = v21;
          _os_log_impl(&dword_182FBE000, v81, v98, "%{public}s protocol %{public}s (%p) has invalid output_finished callback, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
LABEL_238:
    if (v80)
      free(v80);
    goto LABEL_59;
  }
  __nwlog_obj();
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v109 = "nw_protocol_implementation_output_finished";
  v53 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v104) = 0;
  if (__nwlog_fault(v53, type, &v104))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v55 = type[0];
      if (os_log_type_enabled(v54, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_output_finished";
        _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v104)
    {
      v65 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v66 = type[0];
      v67 = os_log_type_enabled(v54, type[0]);
      if (v65)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_output_finished";
          v110 = 2082;
          v111 = v65;
          _os_log_impl(&dword_182FBE000, v54, v66, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v65);
        goto LABEL_209;
      }
      if (v67)
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_output_finished";
        _os_log_impl(&dword_182FBE000, v54, v66, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v91 = type[0];
      if (os_log_type_enabled(v54, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_output_finished";
        _os_log_impl(&dword_182FBE000, v54, v91, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_209:
  if (v53)
    free(v53);
}

void sub_1834AEA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  if ((a16 & 1) != 0)
    nw::release_if_needed<nw_protocol *>(&a15);
  if ((a18 & 1) != 0)
    nw::release_if_needed<nw_protocol *>(&a17);

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_implementation_copy_info(_QWORD *a1, int a2, uint64_t a3)
{
  void *v6;
  void *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  void *v15;
  char v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  void *v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  void *v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  void *v32;
  char v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t (*v37)(char *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *);
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  void *v50;
  char v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t);
  void *v54;
  uint64_t (*v55)(char *, uint64_t);
  void *v56;
  void *v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  void *v61;
  char *v62;
  NSObject *v63;
  os_log_type_t v64;
  void *v65;
  os_log_type_t v66;
  void *v67;
  os_log_type_t v68;
  char *v69;
  os_log_type_t v70;
  _BOOL4 v71;
  char *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  char *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  os_log_type_t v78;
  _BOOL4 v79;
  os_log_type_t v80;
  os_log_type_t v81;
  os_log_type_t v82;
  os_log_type_t v83;
  void *v84;
  char *v85;
  NSObject *v86;
  os_log_type_t v87;
  NSObject *v89;
  char *backtrace_string;
  os_log_type_t v91;
  _BOOL4 v92;
  os_log_type_t v93;
  void *v94;
  char v95;
  os_log_type_t v96;
  os_log_type_t type[8];
  char v98;
  _BYTE buf[12];
  __int16 v100;
  char *v101;
  __int16 v102;
  const char *v103;
  __int16 v104;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = (void *)a1[5];
    v7 = a1 + 12;
    if (v6 != &nw_protocol_ref_counted_handle)
      v7 = 0;
    v8 = v7;
    v9 = (char *)v8;
    if (v6 == &nw_protocol_ref_counted_handle)
    {
      v10 = v8[1];
      if (v10)
      {
        v11 = *(_QWORD **)(v10 + 80);
        if (v11)
        {
          if (a2 <= 253)
          {
            if (a2 == 4)
            {
              v19 = (_QWORD *)a1[4];
              if (v19)
              {
                v20 = v19[3];
                if (v20)
                {
                  v21 = *(uint64_t (**)(void))(v20 + 224);
                  if (v21)
                  {
                    v22 = (void *)v19[5];
                    if (v22 == &nw_protocol_ref_counted_handle)
                    {
                      v41 = v19[11];
                      if (v41)
                        v19[11] = v41 + 1;
                      v23 = -1;
                    }
                    else
                    {
                      v23 = 0;
                    }
                    *(_QWORD *)buf = v19;
                    buf[8] = v23;
                    v36 = v21();
                    if (v22 == &nw_protocol_ref_counted_handle)
                      nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                    if (v36)
                      goto LABEL_187;
                    v11 = *(_QWORD **)(*((_QWORD *)v9 + 1) + 80);
                  }
                }
              }
              v42 = (uint64_t (*)(char *))v11[25];
              if (v42)
              {
                v40 = v42(v9);
                goto LABEL_62;
              }
              goto LABEL_186;
            }
            if (a2 == 5)
            {
              v12 = (_QWORD *)a1[4];
              if (v12 && (v13 = v12[3]) != 0 && (v14 = *(uint64_t (**)(void))(v13 + 224)) != 0)
              {
                v15 = (void *)v12[5];
                if (v15 == &nw_protocol_ref_counted_handle)
                {
                  v39 = v12[11];
                  if (v39)
                    v12[11] = v39 + 1;
                  v16 = -1;
                }
                else
                {
                  v16 = 0;
                }
                *(_QWORD *)buf = v12;
                buf[8] = v16;
                v34 = v14();
                if (v15 == &nw_protocol_ref_counted_handle)
                  nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*((_QWORD *)v9 + 1) + 80)
                                                                         + 192);
                if (v35)
                  goto LABEL_52;
              }
              else
              {
                v34 = 0;
                v35 = (uint64_t (*)(char *, uint64_t, uint64_t))v11[24];
                if (v35)
                {
LABEL_52:
                  v40 = v35(v9, v34, a3);
LABEL_62:
                  v36 = v40;
LABEL_187:

                  return v36;
                }
              }
LABEL_186:
              v36 = 0;
              goto LABEL_187;
            }
LABEL_35:
            v29 = (_QWORD *)a1[4];
            if (!v29)
              goto LABEL_186;
            v30 = v29[3];
            if (!v30)
              goto LABEL_186;
            v31 = *(uint64_t (**)(void))(v30 + 224);
            if (!v31)
              goto LABEL_186;
            v32 = (void *)v29[5];
            if (v32 == &nw_protocol_ref_counted_handle)
            {
              v45 = v29[11];
              if (v45)
                v29[11] = v45 + 1;
              v33 = -1;
            }
            else
            {
              v33 = 0;
            }
            *(_QWORD *)type = v29;
            v98 = v33;
            if (a2)
            {
              v36 = v31();
              if (v32 != &nw_protocol_ref_counted_handle)
                goto LABEL_187;
LABEL_79:
              nw::release_if_needed<nw_protocol *>((uint64_t *)type);
              goto LABEL_187;
            }
            v94 = v32;
            __nwlog_obj();
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_copy_info";
            v85 = (char *)_os_log_send_and_compose_impl();

            v96 = OS_LOG_TYPE_ERROR;
            v95 = 0;
            if (__nwlog_fault(v85, &v96, &v95))
            {
              if (v96 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v86 = objc_claimAutoreleasedReturnValue();
                v87 = v96;
                if (os_log_type_enabled(v86, v96))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "__nw_protocol_copy_info";
                  _os_log_impl(&dword_182FBE000, v86, v87, "%{public}s called with null type", buf, 0xCu);
                }
LABEL_202:

                goto LABEL_203;
              }
              if (!v95)
              {
                __nwlog_obj();
                v86 = objc_claimAutoreleasedReturnValue();
                v93 = v96;
                if (os_log_type_enabled(v86, v96))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "__nw_protocol_copy_info";
                  _os_log_impl(&dword_182FBE000, v86, v93, "%{public}s called with null type, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_202;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v86 = objc_claimAutoreleasedReturnValue();
              v91 = v96;
              v92 = os_log_type_enabled(v86, v96);
              if (!backtrace_string)
              {
                if (v92)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "__nw_protocol_copy_info";
                  _os_log_impl(&dword_182FBE000, v86, v91, "%{public}s called with null type, no backtrace", buf, 0xCu);
                }
                goto LABEL_202;
              }
              if (v92)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "__nw_protocol_copy_info";
                v100 = 2082;
                v101 = backtrace_string;
                _os_log_impl(&dword_182FBE000, v86, v91, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
            }
LABEL_203:
            if (v85)
              free(v85);
            v36 = 0;
            if (v94 != &nw_protocol_ref_counted_handle)
              goto LABEL_187;
            goto LABEL_79;
          }
          if (a2 == 254)
          {
            v24 = (_QWORD *)a1[4];
            if (v24 && (v25 = v24[3]) != 0 && (v26 = *(uint64_t (**)(void))(v25 + 224)) != 0)
            {
              v27 = (void *)v24[5];
              if (v27 == &nw_protocol_ref_counted_handle)
              {
                v43 = v24[11];
                if (v43)
                  v24[11] = v43 + 1;
                v28 = -1;
              }
              else
              {
                v28 = 0;
              }
              *(_QWORD *)buf = v24;
              buf[8] = v28;
              v36 = v26();
              if (v27 == &nw_protocol_ref_counted_handle)
                nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
              v37 = *(uint64_t (**)(char *))(*(_QWORD *)(*((_QWORD *)v9 + 1) + 80) + 184);
              if (!v37)
                goto LABEL_187;
            }
            else
            {
              v36 = 0;
              v37 = (uint64_t (*)(char *))v11[23];
              if (!v37)
                goto LABEL_187;
            }
            v44 = (void *)v37(v9);
            if (v44)
            {
              if (!v36)
                v36 = nw_array_create();
              nw_array_append(v36, v44);
            }

            goto LABEL_187;
          }
          if (a2 != 255)
            goto LABEL_35;
          if (!a3)
          {
            if (v8[32])
            {
              v38 = nw_array_create();
              nw_array_append(v38, *((void **)v9 + 32));
              goto LABEL_109;
            }
            goto LABEL_84;
          }
          if (*(_DWORD *)(v10 + 64) != 3)
          {
LABEL_84:
            v47 = (_QWORD *)a1[4];
            if (v47 && (v48 = v47[3]) != 0 && (v49 = *(uint64_t (**)(void))(v48 + 224)) != 0)
            {
              v50 = (void *)v47[5];
              if (v50 == &nw_protocol_ref_counted_handle)
              {
                v52 = v47[11];
                if (v52)
                  v47[11] = v52 + 1;
                v51 = -1;
              }
              else
              {
                v51 = 0;
              }
              *(_QWORD *)buf = v47;
              buf[8] = v51;
              v38 = v49();
              if (v50 == &nw_protocol_ref_counted_handle)
                nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
            }
            else
            {
              v38 = 0;
            }
            v18 = -1;
            v46 = 1;
LABEL_96:
            v53 = *(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(*((_QWORD *)v9 + 1) + 80) + 176);
            if (v53)
            {
              v54 = (void *)v53(v9, -1);
              if (v54)
              {
                if (!v38)
                  v38 = nw_array_create();
                nw_array_append(v38, v54);
              }
              v55 = *(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(*((_QWORD *)v9 + 1) + 80) + 176);
              if ((v46 & 1) != 0)
              {
                v56 = (void *)v55(v9, -2);
                if (!v56)
                  goto LABEL_108;
              }
              else
              {
                v56 = (void *)v55(v9, v18);
                if (!v56)
                {
LABEL_108:

                  goto LABEL_109;
                }
              }
              if (!v38)
                v38 = nw_array_create();
              nw_array_append(v38, v56);
              goto LABEL_108;
            }
LABEL_109:
            v36 = (uint64_t)(id)v38;

            goto LABEL_187;
          }
          if (nw_hash_table_get_node(v8[29], a3, 8))
          {
            v17 = v9;
            if (nw_protocol_definition_get_message_is_stream(*((void **)v9 + 1))
              && *((_QWORD *)v17 - 6) == a3)
            {
              v18 = -2;
            }
            else
            {
              v18 = a3;
            }

            if (v9[405] < 0)
              goto LABEL_82;
          }
          else
          {
            v18 = -1;
            if (v9[405] < 0)
              goto LABEL_82;
          }
          if (gLogDatapath)
          {
            __nwlog_obj();
            v89 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
              v100 = 2082;
              v101 = v9 + 407;
              v102 = 2080;
              v103 = " ";
              v104 = 2048;
              v105 = v18;
              _os_log_impl(&dword_182FBE000, v89, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sCopy metadata for flow %llx", buf, 0x2Au);
            }

          }
LABEL_82:
          if (v18 != -1)
          {
            v46 = 0;
            v38 = 0;
            goto LABEL_96;
          }
          goto LABEL_84;
        }
        __nwlog_obj();
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
        v62 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v96 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v62, type, &v96))
          goto LABEL_184;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v63 = objc_claimAutoreleasedReturnValue();
          v68 = type[0];
          if (os_log_type_enabled(v63, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl(&dword_182FBE000, v63, v68, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_183;
        }
        if (v96 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v63 = objc_claimAutoreleasedReturnValue();
          v83 = type[0];
          if (os_log_type_enabled(v63, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl(&dword_182FBE000, v63, v83, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_183;
        }
        v75 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v63 = objc_claimAutoreleasedReturnValue();
        v78 = type[0];
        v79 = os_log_type_enabled(v63, type[0]);
        if (!v75)
        {
          if (v79)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl(&dword_182FBE000, v63, v78, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_183;
        }
        if (v79)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
          v100 = 2082;
          v101 = v75;
          _os_log_impl(&dword_182FBE000, v63, v78, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
        v62 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v96 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v62, type, &v96))
          goto LABEL_184;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v63 = objc_claimAutoreleasedReturnValue();
          v66 = type[0];
          if (os_log_type_enabled(v63, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl(&dword_182FBE000, v63, v66, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_183;
        }
        if (v96 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v63 = objc_claimAutoreleasedReturnValue();
          v82 = type[0];
          if (os_log_type_enabled(v63, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl(&dword_182FBE000, v63, v82, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_183;
        }
        v75 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v63 = objc_claimAutoreleasedReturnValue();
        v76 = type[0];
        v77 = os_log_type_enabled(v63, type[0]);
        if (!v75)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl(&dword_182FBE000, v63, v76, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_183;
        }
        if (v77)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
          v100 = 2082;
          v101 = v75;
          _os_log_impl(&dword_182FBE000, v63, v76, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v75);
      if (!v62)
        goto LABEL_186;
      goto LABEL_185;
    }
    __nwlog_obj();
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
    v62 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v96 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v62, type, &v96))
      goto LABEL_184;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v63 = objc_claimAutoreleasedReturnValue();
      v64 = type[0];
      if (os_log_type_enabled(v63, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_182FBE000, v63, v64, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v96)
    {
      v72 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v63 = objc_claimAutoreleasedReturnValue();
      v73 = type[0];
      v74 = os_log_type_enabled(v63, type[0]);
      if (v72)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
          v100 = 2082;
          v101 = v72;
          _os_log_impl(&dword_182FBE000, v63, v73, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v72);
LABEL_184:
        if (!v62)
          goto LABEL_186;
LABEL_185:
        free(v62);
        goto LABEL_186;
      }
      if (v74)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_182FBE000, v63, v73, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v63 = objc_claimAutoreleasedReturnValue();
      v81 = type[0];
      if (os_log_type_enabled(v63, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_182FBE000, v63, v81, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_183:

    goto LABEL_184;
  }
  __nwlog_obj();
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
  v58 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v96 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v58, type, &v96))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v59 = objc_claimAutoreleasedReturnValue();
      v60 = type[0];
      if (os_log_type_enabled(v59, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v96)
    {
      v69 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v59 = objc_claimAutoreleasedReturnValue();
      v70 = type[0];
      v71 = os_log_type_enabled(v59, type[0]);
      if (v69)
      {
        if (v71)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
          v100 = 2082;
          v101 = v69;
          _os_log_impl(&dword_182FBE000, v59, v70, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v69);
        goto LABEL_172;
      }
      if (v71)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_182FBE000, v59, v70, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v59 = objc_claimAutoreleasedReturnValue();
      v80 = type[0];
      if (os_log_type_enabled(v59, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_182FBE000, v59, v80, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_172:
  if (v58)
    free(v58);
  return 0;
}

void sub_1834AFA68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_protocol_implementation_notify(_QWORD *a1, nw_protocol *a2, unsigned int a3, unsigned __int8 *a4, uint64_t a5)
{
  void *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  _QWORD *v17;
  uint64_t v18;
  void (*v19)(void);
  void *v20;
  char v21;
  uint64_t v22;
  void *v23;
  char v24;
  nw_protocol_callbacks *v25;
  void (*v26)(char *);
  _BOOL8 node;
  nw_protocol_callbacks *callbacks;
  uint64_t (*supports_external_data)(nw_protocol *);
  uint64_t v30;
  void *handle;
  char v32;
  void *v33;
  void *v34;
  NWConcrete_nw_protocol_instance *v35;
  NWConcrete_nw_protocol_instance *v36;
  NWConcrete_nw_protocol_definition *parent_definition;
  uint64_t v38;
  void (*var18)(NWConcrete_nw_protocol_instance *, uint64_t, unsigned __int8 *);
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  const char *v45;
  nw_protocol_callbacks *v46;
  uint64_t (*v47)(nw_protocol *);
  void *v48;
  char v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  void (*v53)(_QWORD *, nw_protocol *);
  void *v54;
  char v55;
  uint64_t v56;
  void *v57;
  char v58;
  nw_protocol_callbacks *v59;
  nw_protocol_callbacks *v60;
  int v61;
  __int16 v62;
  NSObject *v63;
  char v64;
  nw_protocol_callbacks *v65;
  int v66;
  char v67;
  void *v68;
  char *v69;
  NSObject *v70;
  os_log_type_t v71;
  void *v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  void *v76;
  os_log_type_t v77;
  void *v78;
  os_log_type_t v79;
  void *v80;
  os_log_type_t v81;
  char *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  char *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  char *v88;
  os_log_type_t v89;
  _BOOL4 v90;
  os_log_type_t v91;
  _BOOL4 v92;
  os_log_type_t v93;
  _BOOL4 v94;
  os_log_type_t v95;
  os_log_type_t v96;
  os_log_type_t v97;
  os_log_type_t v98;
  os_log_type_t v99;
  void *v100;
  NSObject *v101;
  os_log_type_t v102;
  void *v103;
  os_log_type_t v104;
  void *v105;
  os_log_type_t v106;
  void *v107;
  char *v108;
  NSObject *v109;
  os_log_type_t v110;
  char *v111;
  os_log_type_t v112;
  _BOOL4 v113;
  os_log_type_t v114;
  _BOOL4 v115;
  os_log_type_t v116;
  _BOOL4 v117;
  char *backtrace_string;
  os_log_type_t v119;
  _BOOL4 v120;
  os_log_type_t v121;
  os_log_type_t v122;
  os_log_type_t v123;
  os_log_type_t v124;
  void *v125;
  _QWORD v127[7];
  unsigned int v128;
  char v129;
  os_log_type_t v130;
  nw_protocol *v131;
  char v132;
  os_log_type_t type[8];
  char v134;
  _BYTE buf[12];
  __int16 v136;
  char *v137;
  __int16 v138;
  const char *v139;
  __int16 v140;
  const char *v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v9 = (void *)a1[5];
    v10 = a1 + 12;
    if (v9 == &nw_protocol_ref_counted_handle)
      v11 = a1 + 12;
    else
      v11 = 0;
    v12 = v11;
    v13 = (char *)v12;
    if (v9 == &nw_protocol_ref_counted_handle)
    {
      v14 = v12[1];
      if (v14)
      {
        if (*(_QWORD *)(v14 + 80))
        {
          if (a2)
          {
            if ((*((char *)v12 + 405) & 0x80000000) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v15 = (id)gLogObj;
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
              {
                if (a3 > 0x19)
                  v16 = "unknown";
                else
                  v16 = off_1E14A22C8[a3];
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
                v136 = 2082;
                v137 = v13 + 407;
                v138 = 2080;
                v139 = " ";
                v140 = 2082;
                v141 = v16;
                _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sreceived notification %{public}s", buf, 0x2Au);
              }

            }
            switch(a3)
            {
              case 6u:
                v26 = *(void (**)(char *))(*(_QWORD *)(*((_QWORD *)v13 + 1) + 80) + 160);
                if (!v26)
                  goto LABEL_77;
                v26(v13);
                goto LABEL_122;
              case 7u:
                if (*(_DWORD *)(*((_QWORD *)v13 + 1) + 64) == 3)
                {
                  node = nw_hash_table_get_node(*((_QWORD *)v13 + 29), (uint64_t)a2, 8);
                  if (node)
                  {
                    callbacks = a2->callbacks;
                    if (callbacks)
                    {
                      supports_external_data = (uint64_t (*)(nw_protocol *))callbacks->supports_external_data;
                      if (supports_external_data)
                      {
                        v30 = node;
                        handle = a2->handle;
                        if (handle == &nw_protocol_ref_counted_handle)
                        {
                          v60 = a2[1].callbacks;
                          if (v60)
                            a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v60->add_input_handler + 1);
                          v32 = -1;
                        }
                        else
                        {
                          v32 = 0;
                        }
                        *(_QWORD *)buf = a2;
                        buf[8] = v32;
                        v61 = supports_external_data(a2);
                        if (handle == &nw_protocol_ref_counted_handle)
                          nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                        if (v61)
                          v62 = 1024;
                        else
                          v62 = 0;
                        *(_WORD *)(v30 + 84) = *(_WORD *)(v30 + 84) & 0xFBFF | v62;
                      }
                    }
                  }
                }
                else if (*((nw_protocol **)v13 - 6) == a2)
                {
                  v46 = a2->callbacks;
                  if (v46)
                  {
                    v47 = (uint64_t (*)(nw_protocol *))v46->supports_external_data;
                    if (v47)
                    {
                      v48 = a2->handle;
                      if (v48 == &nw_protocol_ref_counted_handle)
                      {
                        v65 = a2[1].callbacks;
                        if (v65)
                          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v65->add_input_handler + 1);
                        v49 = -1;
                      }
                      else
                      {
                        v49 = 0;
                      }
                      *(_QWORD *)buf = a2;
                      buf[8] = v49;
                      v66 = v47(a2);
                      if (v48 == &nw_protocol_ref_counted_handle)
                        nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                      if (v66)
                        v67 = 2;
                      else
                        v67 = 0;
                      v64 = v13[403] & 0xFD | v67;
                      goto LABEL_121;
                    }
                  }
                }
                goto LABEL_122;
              case 0xDu:
              case 0xFu:
              case 0x10u:
                v17 = (_QWORD *)a1[4];
                if (!v17)
                  goto LABEL_122;
                v18 = v17[3];
                if (!v18)
                  goto LABEL_122;
                v19 = *(void (**)(void))(v18 + 160);
                if (!v19)
                  goto LABEL_122;
                v20 = (void *)v17[5];
                if (v20 == &nw_protocol_ref_counted_handle)
                {
                  v22 = v17[11];
                  if (v22)
                    v17[11] = v22 + 1;
                  v21 = -1;
                }
                else
                {
                  v21 = 0;
                }
                *(_QWORD *)buf = v17;
                buf[8] = v21;
                v23 = a2->handle;
                if (v23 == &nw_protocol_ref_counted_handle)
                {
                  v25 = a2[1].callbacks;
                  if (v25)
                    a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v25->add_input_handler + 1);
                  v24 = -1;
                }
                else
                {
                  v24 = 0;
                }
                *(_QWORD *)type = a2;
                v134 = v24;
                v19();
                if (v23 == &nw_protocol_ref_counted_handle)
                {
                  nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                  if (v20 == &nw_protocol_ref_counted_handle)
LABEL_34:
                    nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                }
                else if (v20 == &nw_protocol_ref_counted_handle)
                {
                  goto LABEL_34;
                }
LABEL_122:

                return;
              case 0x15u:
                if (a4 && a5 == 1)
                {
                  v41 = *a4;
                  if (v41 || (unint64_t)(*((_QWORD *)v13 + 48) + 1) < 2)
                  {
                    v42 = *((_QWORD *)v13 + 1);
                    v43 = *(_QWORD *)(v42 + 80);
                    if (v43 && *(_QWORD *)(v43 + 112))
                    {
                      if ((v13[405] & 0x80000000) == 0)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v44 = (id)gLogObj;
                        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
                        {
                          v45 = " not";
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
                          v137 = v13 + 407;
                          v138 = 2080;
                          v139 = " ";
                          v136 = 2082;
                          if (v41)
                            v45 = "";
                          v140 = 2082;
                          v141 = v45;
                          _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sOutbound data is%{public}s pending", buf, 0x2Au);
                        }

                        v42 = *((_QWORD *)v13 + 1);
                      }
                      v13[403] &= ~0x80u;
                      (*(void (**)(char *, BOOL))(*(_QWORD *)(v42 + 80) + 112))(v13, v41 != 0);
                    }
                  }
                  else
                  {
                    if ((v13[405] & 0x80000000) == 0)
                    {
                      __nwlog_obj();
                      v63 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
                        v136 = 2082;
                        v137 = v13 + 407;
                        v138 = 2080;
                        v139 = " ";
                        _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sOutbound data is not pending, deferring until current flow is done with connected", buf, 0x20u);
                      }

                    }
                    v64 = v13[403] | 0x80;
LABEL_121:
                    v13[403] = v64;
                  }
                }
                goto LABEL_122;
              default:
                if (a3 != 20 || !a4 || a5 != 8)
                  goto LABEL_77;
                v33 = (void *)a1[5];
                if (v33 == &nw_protocol_ref_counted_handle)
                  v34 = v10;
                else
                  v34 = 0;
                v35 = v34;
                v36 = v35;
                if (v33 == &nw_protocol_ref_counted_handle)
                {
                  parent_definition = v35->parent_definition;
                  if (parent_definition)
                  {
                    if (parent_definition->extended_state)
                    {
                      *(_QWORD *)buf = 0;
                      v38 = nw_protocol_implementation_lookup_path_by_protocol(v35, a2, (unint64_t *)buf);
                      var18 = (void (*)(NWConcrete_nw_protocol_instance *, uint64_t, unsigned __int8 *))v36->parent_definition->extended_state->var18;
                      if (v38)
                      {
                        if (var18)
                        {
                          v40 = *(_QWORD *)buf;
LABEL_75:
                          var18(v36, v40, a4);
                        }
                      }
                      else if (var18)
                      {
                        v40 = 0;
                        goto LABEL_75;
                      }
LABEL_76:

LABEL_77:
                      if (*(_DWORD *)(*((_QWORD *)v13 + 1) + 64) == 3)
                      {
                        v50 = (char *)*((_QWORD *)v13 + 29);
                        v127[0] = MEMORY[0x1E0C809B0];
                        v127[1] = 3221225472;
                        v127[2] = ___ZL33nw_protocol_implementation_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke;
                        v127[3] = &__block_descriptor_60_e23_B16__0__nw_hash_node__8l;
                        v128 = a3;
                        v127[4] = a2;
                        v127[5] = a4;
                        v127[6] = a5;
                        nw_hash_table_apply(v50, (uint64_t)v127);
                        goto LABEL_122;
                      }
                      v51 = (_QWORD *)a1[6];
                      if (!v51)
                        goto LABEL_122;
                      v52 = v51[3];
                      if (!v52)
                        goto LABEL_122;
                      v53 = *(void (**)(_QWORD *, nw_protocol *))(v52 + 160);
                      if (!v53)
                        goto LABEL_122;
                      v54 = (void *)v51[5];
                      if (v54 == &nw_protocol_ref_counted_handle)
                      {
                        v56 = v51[11];
                        if (v56)
                          v51[11] = v56 + 1;
                        v55 = -1;
                      }
                      else
                      {
                        v55 = 0;
                      }
                      *(_QWORD *)type = v51;
                      v134 = v55;
                      v57 = a2->handle;
                      if (v57 == &nw_protocol_ref_counted_handle)
                      {
                        v59 = a2[1].callbacks;
                        if (v59)
                          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v59->add_input_handler + 1);
                        v58 = -1;
                      }
                      else
                      {
                        v58 = 0;
                      }
                      v131 = a2;
                      v132 = v58;
                      if (a3)
                      {
                        v53(v51, a2);
LABEL_94:
                        if (v57 == &nw_protocol_ref_counted_handle)
                          nw::release_if_needed<nw_protocol *>((uint64_t *)&v131);
                        if (v54 == &nw_protocol_ref_counted_handle)
                          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                        goto LABEL_122;
                      }
                      __nwlog_obj();
                      v107 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "__nw_protocol_notify";
                      v108 = (char *)_os_log_send_and_compose_impl();

                      v130 = OS_LOG_TYPE_ERROR;
                      v129 = 0;
                      if (__nwlog_fault(v108, &v130, &v129))
                      {
                        if (v130 == OS_LOG_TYPE_FAULT)
                        {
                          __nwlog_obj();
                          v109 = objc_claimAutoreleasedReturnValue();
                          v110 = v130;
                          if (os_log_type_enabled(v109, v130))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "__nw_protocol_notify";
                            _os_log_impl(&dword_182FBE000, v109, v110, "%{public}s called with null type", buf, 0xCu);
                          }
                        }
                        else if (v129)
                        {
                          backtrace_string = (char *)__nw_create_backtrace_string();
                          __nwlog_obj();
                          v109 = objc_claimAutoreleasedReturnValue();
                          v119 = v130;
                          v120 = os_log_type_enabled(v109, v130);
                          if (backtrace_string)
                          {
                            if (v120)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(_QWORD *)&buf[4] = "__nw_protocol_notify";
                              v136 = 2082;
                              v137 = backtrace_string;
                              _os_log_impl(&dword_182FBE000, v109, v119, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
                            }

                            free(backtrace_string);
                            goto LABEL_275;
                          }
                          if (v120)
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "__nw_protocol_notify";
                            _os_log_impl(&dword_182FBE000, v109, v119, "%{public}s called with null type, no backtrace", buf, 0xCu);
                          }
                        }
                        else
                        {
                          __nwlog_obj();
                          v109 = objc_claimAutoreleasedReturnValue();
                          v124 = v130;
                          if (os_log_type_enabled(v109, v130))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "__nw_protocol_notify";
                            _os_log_impl(&dword_182FBE000, v109, v124, "%{public}s called with null type, backtrace limit exceeded", buf, 0xCu);
                          }
                        }

                      }
LABEL_275:
                      if (v108)
                        free(v108);
                      goto LABEL_94;
                    }
                    __nwlog_obj();
                    v105 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                    v125 = (void *)_os_log_send_and_compose_impl();

                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(v131) = 0;
                    if (!__nwlog_fault((const char *)v125, type, &v131))
                    {
LABEL_270:
                      if (v125)
                        free(v125);
                      goto LABEL_76;
                    }
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v101 = objc_claimAutoreleasedReturnValue();
                      v106 = type[0];
                      if (os_log_type_enabled(v101, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl(&dword_182FBE000, v101, v106, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
                      }
LABEL_269:

                      goto LABEL_270;
                    }
                    if (!(_BYTE)v131)
                    {
                      __nwlog_obj();
                      v101 = objc_claimAutoreleasedReturnValue();
                      v123 = type[0];
                      if (os_log_type_enabled(v101, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl(&dword_182FBE000, v101, v123, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
                      }
                      goto LABEL_269;
                    }
                    v111 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v101 = objc_claimAutoreleasedReturnValue();
                    v116 = type[0];
                    v117 = os_log_type_enabled(v101, type[0]);
                    if (!v111)
                    {
                      if (v117)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl(&dword_182FBE000, v101, v116, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
                      }
                      goto LABEL_269;
                    }
                    if (v117)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                      v136 = 2082;
                      v137 = v111;
                      _os_log_impl(&dword_182FBE000, v101, v116, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                  }
                  else
                  {
                    __nwlog_obj();
                    v103 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                    v125 = (void *)_os_log_send_and_compose_impl();

                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(v131) = 0;
                    if (!__nwlog_fault((const char *)v125, type, &v131))
                      goto LABEL_270;
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v101 = objc_claimAutoreleasedReturnValue();
                      v104 = type[0];
                      if (os_log_type_enabled(v101, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl(&dword_182FBE000, v101, v104, "%{public}s called with null instance->parent_definition", buf, 0xCu);
                      }
                      goto LABEL_269;
                    }
                    if (!(_BYTE)v131)
                    {
                      __nwlog_obj();
                      v101 = objc_claimAutoreleasedReturnValue();
                      v122 = type[0];
                      if (os_log_type_enabled(v101, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl(&dword_182FBE000, v101, v122, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
                      }
                      goto LABEL_269;
                    }
                    v111 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v101 = objc_claimAutoreleasedReturnValue();
                    v114 = type[0];
                    v115 = os_log_type_enabled(v101, type[0]);
                    if (!v111)
                    {
                      if (v115)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl(&dword_182FBE000, v101, v114, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
                      }
                      goto LABEL_269;
                    }
                    if (v115)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                      v136 = 2082;
                      v137 = v111;
                      _os_log_impl(&dword_182FBE000, v101, v114, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                  }
                }
                else
                {
                  __nwlog_obj();
                  v100 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                  v125 = (void *)_os_log_send_and_compose_impl();

                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(v131) = 0;
                  if (!__nwlog_fault((const char *)v125, type, &v131))
                    goto LABEL_270;
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v101 = objc_claimAutoreleasedReturnValue();
                    v102 = type[0];
                    if (os_log_type_enabled(v101, type[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                      _os_log_impl(&dword_182FBE000, v101, v102, "%{public}s called with null instance", buf, 0xCu);
                    }
                    goto LABEL_269;
                  }
                  if (!(_BYTE)v131)
                  {
                    __nwlog_obj();
                    v101 = objc_claimAutoreleasedReturnValue();
                    v121 = type[0];
                    if (os_log_type_enabled(v101, type[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                      _os_log_impl(&dword_182FBE000, v101, v121, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
                    }
                    goto LABEL_269;
                  }
                  v111 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v101 = objc_claimAutoreleasedReturnValue();
                  v112 = type[0];
                  v113 = os_log_type_enabled(v101, type[0]);
                  if (!v111)
                  {
                    if (v113)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                      _os_log_impl(&dword_182FBE000, v101, v112, "%{public}s called with null instance, no backtrace", buf, 0xCu);
                    }
                    goto LABEL_269;
                  }
                  if (v113)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_protocol_implementation_link_congestion_info";
                    v136 = 2082;
                    v137 = v111;
                    _os_log_impl(&dword_182FBE000, v101, v112, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                }

                free(v111);
                goto LABEL_270;
            }
          }
          __nwlog_obj();
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
          v73 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v131) = 0;
          if (!__nwlog_fault(v73, type, &v131))
            goto LABEL_207;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v74 = objc_claimAutoreleasedReturnValue();
            v81 = type[0];
            if (os_log_type_enabled(v74, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl(&dword_182FBE000, v74, v81, "%{public}s called with null other_protocol", buf, 0xCu);
            }
            goto LABEL_206;
          }
          if (!(_BYTE)v131)
          {
            __nwlog_obj();
            v74 = objc_claimAutoreleasedReturnValue();
            v99 = type[0];
            if (os_log_type_enabled(v74, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl(&dword_182FBE000, v74, v99, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_206;
          }
          v88 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v74 = objc_claimAutoreleasedReturnValue();
          v93 = type[0];
          v94 = os_log_type_enabled(v74, type[0]);
          if (!v88)
          {
            if (v94)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl(&dword_182FBE000, v74, v93, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
            }
            goto LABEL_206;
          }
          if (v94)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
            v136 = 2082;
            v137 = v88;
            _os_log_impl(&dword_182FBE000, v74, v93, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
        else
        {
          __nwlog_obj();
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
          v73 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v131) = 0;
          if (!__nwlog_fault(v73, type, &v131))
            goto LABEL_207;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v74 = objc_claimAutoreleasedReturnValue();
            v79 = type[0];
            if (os_log_type_enabled(v74, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl(&dword_182FBE000, v74, v79, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
            }
            goto LABEL_206;
          }
          if (!(_BYTE)v131)
          {
            __nwlog_obj();
            v74 = objc_claimAutoreleasedReturnValue();
            v98 = type[0];
            if (os_log_type_enabled(v74, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl(&dword_182FBE000, v74, v98, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_206;
          }
          v88 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v74 = objc_claimAutoreleasedReturnValue();
          v91 = type[0];
          v92 = os_log_type_enabled(v74, type[0]);
          if (!v88)
          {
            if (v92)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl(&dword_182FBE000, v74, v91, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
            }
            goto LABEL_206;
          }
          if (v92)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
            v136 = 2082;
            v137 = v88;
            _os_log_impl(&dword_182FBE000, v74, v91, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
      }
      else
      {
        __nwlog_obj();
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
        v73 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v131) = 0;
        if (!__nwlog_fault(v73, type, &v131))
          goto LABEL_207;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v74 = objc_claimAutoreleasedReturnValue();
          v77 = type[0];
          if (os_log_type_enabled(v74, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
            _os_log_impl(&dword_182FBE000, v74, v77, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_206;
        }
        if (!(_BYTE)v131)
        {
          __nwlog_obj();
          v74 = objc_claimAutoreleasedReturnValue();
          v97 = type[0];
          if (os_log_type_enabled(v74, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
            _os_log_impl(&dword_182FBE000, v74, v97, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_206;
        }
        v88 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v74 = objc_claimAutoreleasedReturnValue();
        v89 = type[0];
        v90 = os_log_type_enabled(v74, type[0]);
        if (!v88)
        {
          if (v90)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
            _os_log_impl(&dword_182FBE000, v74, v89, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_206;
        }
        if (v90)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
          v136 = 2082;
          v137 = v88;
          _os_log_impl(&dword_182FBE000, v74, v89, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v88);
      if (!v73)
        goto LABEL_122;
      goto LABEL_208;
    }
    __nwlog_obj();
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
    v73 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v131) = 0;
    if (!__nwlog_fault(v73, type, &v131))
      goto LABEL_207;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      v75 = type[0];
      if (os_log_type_enabled(v74, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_182FBE000, v74, v75, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)v131)
    {
      v85 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      v86 = type[0];
      v87 = os_log_type_enabled(v74, type[0]);
      if (v85)
      {
        if (v87)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
          v136 = 2082;
          v137 = v85;
          _os_log_impl(&dword_182FBE000, v74, v86, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v85);
LABEL_207:
        if (!v73)
          goto LABEL_122;
LABEL_208:
        free(v73);
        goto LABEL_122;
      }
      if (v87)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_182FBE000, v74, v86, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      v96 = type[0];
      if (os_log_type_enabled(v74, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_182FBE000, v74, v96, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_206:

    goto LABEL_207;
  }
  __nwlog_obj();
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
  v69 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v131) = 0;
  if (__nwlog_fault(v69, type, &v131))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v70 = objc_claimAutoreleasedReturnValue();
      v71 = type[0];
      if (os_log_type_enabled(v70, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_182FBE000, v70, v71, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v131)
    {
      v82 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v70 = objc_claimAutoreleasedReturnValue();
      v83 = type[0];
      v84 = os_log_type_enabled(v70, type[0]);
      if (v82)
      {
        if (v84)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
          v136 = 2082;
          v137 = v82;
          _os_log_impl(&dword_182FBE000, v70, v83, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v82);
        goto LABEL_193;
      }
      if (v84)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_182FBE000, v70, v83, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v70 = objc_claimAutoreleasedReturnValue();
      v95 = type[0];
      if (os_log_type_enabled(v70, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_182FBE000, v70, v95, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_193:
  if (v69)
    free(v69);
}

void nw_protocol_implementation_error(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, _DWORD *);
  uint64_t v12;
  _DWORD *posix_error;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, char *, uint64_t);
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  void *v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  void *v35;
  os_log_type_t v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  char *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  _BOOL4 v47;
  os_log_type_t v48;
  _BOOL4 v49;
  void *v50;
  const char *v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  const char *v55;
  os_log_type_t v56;
  os_log_type_t v57;
  os_log_type_t v58;
  os_log_type_t v59;
  os_log_type_t v60;
  void *v61;
  os_log_type_t v62;
  char *backtrace_string;
  os_log_type_t v64;
  _BOOL4 v65;
  const char *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  os_log_type_t v69;
  const char *v70;
  const char *v71;
  os_log_type_t v72;
  _QWORD v73[4];
  char *v74;
  int v75;
  char v76;
  os_log_type_t v77;
  char *v78;
  char v79;
  os_log_type_t type[8];
  char v81;
  _BYTE buf[12];
  __int16 v83;
  void *v84;
  __int16 v85;
  const char *v86;
  __int16 v87;
  char *v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v7 = p_output_handler;
    v8 = v7;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v9 = *((_QWORD *)v7 + 1);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 80);
        if (v10)
        {
          if (a2)
          {
            if (!(_DWORD)a3)
            {
              if ((v7[405] & 0x80000000) == 0 && gLogDatapath)
              {
                __nwlog_obj();
                v15 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
                  v83 = 2082;
                  v84 = v8 + 407;
                  v85 = 2080;
                  v86 = " ";
                  _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSupressing error 0", buf, 0x20u);
                }

              }
              goto LABEL_37;
            }
            if (*(_QWORD *)(v10 + 72))
            {
              *(_QWORD *)buf = 0;
              nw_protocol_implementation_lookup_path_by_protocol((NWConcrete_nw_protocol_instance *)v7, a2, (unint64_t *)buf);
              v11 = *(void (**)(char *, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)(*((_QWORD *)v8 + 1) + 80)
                                                                              + 72);
              v12 = *(_QWORD *)buf;
              posix_error = nw_error_create_posix_error(a3);
              v11(v8, -1, v12, posix_error);

            }
            if ((v8[402] & 0x20) != 0)
            {
LABEL_37:

              return;
            }
            if (*(_DWORD *)(*((_QWORD *)v8 + 1) + 64) == 3)
            {
              v14 = (char *)*((_QWORD *)v8 + 29);
              v73[0] = MEMORY[0x1E0C809B0];
              v73[1] = 3221225472;
              v73[2] = ___ZL32nw_protocol_implementation_errorP11nw_protocolS0_i_block_invoke;
              v73[3] = &unk_1E149BC28;
              v74 = v8;
              v75 = a3;
              nw_hash_table_apply(v14, (uint64_t)v73);

              goto LABEL_37;
            }
            v16 = *((_QWORD *)v8 - 6);
            if (v16)
            {
              if (*(_UNKNOWN **)(v16 + 40) == &nw_protocol_ref_counted_handle)
              {
                v18 = *(_QWORD *)(v16 + 88);
                if (v18)
                  *(_QWORD *)(v16 + 88) = v18 + 1;
                v17 = -1;
              }
              else
              {
                v17 = 0;
              }
              *(_QWORD *)type = v16;
              v81 = v17;
              if (*((_UNKNOWN **)v8 - 7) == &nw_protocol_ref_counted_handle)
              {
                v20 = *((_QWORD *)v8 - 1);
                if (v20)
                  *((_QWORD *)v8 - 1) = v20 + 1;
                v19 = -1;
              }
              else
              {
                v19 = 0;
              }
              v78 = v8 - 96;
              v79 = v19;
              v21 = *(_QWORD *)(v16 + 24);
              if (v21)
              {
                v22 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 56);
                if (v22)
                {
                  v22(v16, v8 - 96, a3);
                  v19 = v79;
LABEL_33:
                  if ((v19 & 1) != 0)
                    nw::release_if_needed<nw_protocol *>((uint64_t *)&v78);
                  if ((v81 & 1) != 0)
                    nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                  goto LABEL_37;
                }
              }
              __nwlog_obj();
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              v51 = *(const char **)(v16 + 16);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_error";
              if (!v51)
                v51 = "invalid";
              v83 = 2082;
              v84 = (void *)v51;
              v85 = 2048;
              v86 = (const char *)v16;
              v52 = (char *)_os_log_send_and_compose_impl();

              v77 = OS_LOG_TYPE_ERROR;
              v76 = 0;
              if (__nwlog_fault(v52, &v77, &v76))
              {
                if (v77 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v53 = objc_claimAutoreleasedReturnValue();
                  v54 = v77;
                  if (os_log_type_enabled(v53, v77))
                  {
                    v55 = *(const char **)(v16 + 16);
                    if (!v55)
                      v55 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "__nw_protocol_error";
                    v83 = 2082;
                    v84 = (void *)v55;
                    v85 = 2048;
                    v86 = (const char *)v16;
                    _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s protocol %{public}s (%p) has invalid error callback", buf, 0x20u);
                  }
                }
                else if (v76)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v53 = objc_claimAutoreleasedReturnValue();
                  v64 = v77;
                  v65 = os_log_type_enabled(v53, v77);
                  if (backtrace_string)
                  {
                    if (v65)
                    {
                      v66 = *(const char **)(v16 + 16);
                      if (!v66)
                        v66 = "invalid";
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "__nw_protocol_error";
                      v83 = 2082;
                      v84 = (void *)v66;
                      v85 = 2048;
                      v86 = (const char *)v16;
                      v87 = 2082;
                      v88 = backtrace_string;
                      _os_log_impl(&dword_182FBE000, v53, v64, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }

                    free(backtrace_string);
                    goto LABEL_160;
                  }
                  if (v65)
                  {
                    v71 = *(const char **)(v16 + 16);
                    if (!v71)
                      v71 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "__nw_protocol_error";
                    v83 = 2082;
                    v84 = (void *)v71;
                    v85 = 2048;
                    v86 = (const char *)v16;
                    _os_log_impl(&dword_182FBE000, v53, v64, "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace", buf, 0x20u);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v53 = objc_claimAutoreleasedReturnValue();
                  v69 = v77;
                  if (os_log_type_enabled(v53, v77))
                  {
                    v70 = *(const char **)(v16 + 16);
                    if (!v70)
                      v70 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "__nw_protocol_error";
                    v83 = 2082;
                    v84 = (void *)v70;
                    v85 = 2048;
                    v86 = (const char *)v16;
                    _os_log_impl(&dword_182FBE000, v53, v69, "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded", buf, 0x20u);
                  }
                }

              }
LABEL_160:
              if (v52)
                free(v52);
              goto LABEL_33;
            }
            __nwlog_obj();
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_error";
            v28 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v78) = 0;
            if (!__nwlog_fault(v28, type, &v78))
              goto LABEL_143;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v29 = objc_claimAutoreleasedReturnValue();
              v62 = type[0];
              if (os_log_type_enabled(v29, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_error";
                _os_log_impl(&dword_182FBE000, v29, v62, "%{public}s called with null protocol", buf, 0xCu);
              }
              goto LABEL_142;
            }
            if (!(_BYTE)v78)
            {
              __nwlog_obj();
              v29 = objc_claimAutoreleasedReturnValue();
              v72 = type[0];
              if (os_log_type_enabled(v29, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_error";
                _os_log_impl(&dword_182FBE000, v29, v72, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_142;
            }
            v43 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v29 = objc_claimAutoreleasedReturnValue();
            v67 = type[0];
            v68 = os_log_type_enabled(v29, type[0]);
            if (!v43)
            {
              if (v68)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "__nw_protocol_error";
                _os_log_impl(&dword_182FBE000, v29, v67, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
              goto LABEL_142;
            }
            if (v68)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "__nw_protocol_error";
              v83 = 2082;
              v84 = v43;
              _os_log_impl(&dword_182FBE000, v29, v67, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
          else
          {
            __nwlog_obj();
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
            v28 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v78) = 0;
            if (!__nwlog_fault(v28, type, &v78))
              goto LABEL_143;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v29 = objc_claimAutoreleasedReturnValue();
              v36 = type[0];
              if (os_log_type_enabled(v29, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
                _os_log_impl(&dword_182FBE000, v29, v36, "%{public}s called with null other_protocol", buf, 0xCu);
              }
              goto LABEL_142;
            }
            if (!(_BYTE)v78)
            {
              __nwlog_obj();
              v29 = objc_claimAutoreleasedReturnValue();
              v60 = type[0];
              if (os_log_type_enabled(v29, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
                _os_log_impl(&dword_182FBE000, v29, v60, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_142;
            }
            v43 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v29 = objc_claimAutoreleasedReturnValue();
            v48 = type[0];
            v49 = os_log_type_enabled(v29, type[0]);
            if (!v43)
            {
              if (v49)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
                _os_log_impl(&dword_182FBE000, v29, v48, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
              }
              goto LABEL_142;
            }
            if (v49)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
              v83 = 2082;
              v84 = v43;
              _os_log_impl(&dword_182FBE000, v29, v48, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
        }
        else
        {
          __nwlog_obj();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
          v28 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v78) = 0;
          if (!__nwlog_fault(v28, type, &v78))
            goto LABEL_143;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v29 = objc_claimAutoreleasedReturnValue();
            v34 = type[0];
            if (os_log_type_enabled(v29, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
              _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
            }
            goto LABEL_142;
          }
          if (!(_BYTE)v78)
          {
            __nwlog_obj();
            v29 = objc_claimAutoreleasedReturnValue();
            v59 = type[0];
            if (os_log_type_enabled(v29, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
              _os_log_impl(&dword_182FBE000, v29, v59, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_142;
          }
          v43 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v46 = type[0];
          v47 = os_log_type_enabled(v29, type[0]);
          if (!v43)
          {
            if (v47)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
              _os_log_impl(&dword_182FBE000, v29, v46, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
            }
            goto LABEL_142;
          }
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
            v83 = 2082;
            v84 = v43;
            _os_log_impl(&dword_182FBE000, v29, v46, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
      }
      else
      {
        __nwlog_obj();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
        v28 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v78) = 0;
        if (!__nwlog_fault(v28, type, &v78))
          goto LABEL_143;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v32 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
            _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_142;
        }
        if (!(_BYTE)v78)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v58 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
            _os_log_impl(&dword_182FBE000, v29, v58, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_142;
        }
        v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v44 = type[0];
        v45 = os_log_type_enabled(v29, type[0]);
        if (!v43)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
            _os_log_impl(&dword_182FBE000, v29, v44, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_142;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
          v83 = 2082;
          v84 = v43;
          _os_log_impl(&dword_182FBE000, v29, v44, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v43);
      if (!v28)
        goto LABEL_37;
      goto LABEL_144;
    }
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
    v28 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v78) = 0;
    if (!__nwlog_fault(v28, type, &v78))
      goto LABEL_143;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)v78)
    {
      v40 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v41 = type[0];
      v42 = os_log_type_enabled(v29, type[0]);
      if (v40)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
          v83 = 2082;
          v84 = v40;
          _os_log_impl(&dword_182FBE000, v29, v41, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v40);
LABEL_143:
        if (!v28)
          goto LABEL_37;
LABEL_144:
        free(v28);
        goto LABEL_37;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_182FBE000, v29, v41, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v57 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_182FBE000, v29, v57, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_142:

    goto LABEL_143;
  }
  __nwlog_obj();
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
  v24 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v78) = 0;
  if (__nwlog_fault(v24, type, &v78))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v78)
    {
      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v38 = type[0];
      v39 = os_log_type_enabled(v25, type[0]);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
          v83 = 2082;
          v84 = v37;
          _os_log_impl(&dword_182FBE000, v25, v38, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v37);
        goto LABEL_129;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_182FBE000, v25, v38, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v56 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_182FBE000, v25, v56, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_129:
  if (v24)
    free(v24);
}

void sub_1834B2668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  void *v22;

  if ((a20 & 1) != 0)
    nw::release_if_needed<nw_protocol *>(&a19);
  if ((a22 & 1) != 0)
    nw::release_if_needed<nw_protocol *>(&a21);

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_implementation_updated_path(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  int ctl_command;
  int v13;
  NSObject *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  void (*v18)(_QWORD *, _QWORD);
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  void *v34;
  os_log_type_t v35;
  void *v36;
  os_log_type_t v37;
  NSObject *v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  char *backtrace_string;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  _BOOL4 v46;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  _BOOL4 v50;
  os_log_type_t v51;
  os_log_type_t v52;
  os_log_type_t v53;
  os_log_type_t v54;
  os_log_type_t v55;
  _QWORD v56[4];
  _QWORD *v57;
  int v58;
  int v59;
  os_log_type_t type[8];
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  char *v64;
  __int16 v65;
  const char *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (a1)
  {
    v6 = *(void **)(a1 + 40);
    v7 = (void *)(a1 + 96);
    if (v6 != &nw_protocol_ref_counted_handle)
      v7 = 0;
    v8 = v7;
    v9 = v8;
    if (v6 == &nw_protocol_ref_counted_handle)
    {
      v10 = v8[1];
      if (v10)
      {
        if (*(_QWORD *)(v10 + 80))
        {
          if (v5)
          {
            if ((*((char *)v8 + 405) & 0x80000000) == 0 && gLogDatapath)
            {
              __nwlog_obj();
              v38 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446722;
                v62 = "nw_protocol_implementation_updated_path";
                v63 = 2082;
                v64 = (char *)v9 + 407;
                v65 = 2080;
                v66 = " ";
                _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s", buf, 0x20u);
              }

            }
            objc_storeStrong((id *)v9 + 36, a3);
            if (*(_QWORD *)(*(_QWORD *)(v9[1] + 80) + 224))
            {
              v11 = (void *)v9[35];
              if (v11)
              {
                *(_QWORD *)type = 0;
                v59 = 0;
                ctl_command = nw_path_flow_registration_get_ctl_command(v5, v11, &type[4], type, &v59);
                v13 = *(_DWORD *)&type[4] == 5 ? ctl_command : 0;
                if (v13 == 1)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v14 = (id)gLogObj;
                  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446466;
                    v62 = "nw_protocol_implementation_updated_path";
                    v63 = 1024;
                    LODWORD(v64) = *(_DWORD *)type;
                    _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s receive PRC_MSGSIZE %u", buf, 0x12u);
                  }

                  if (v9[37])
                  {
                    v56[0] = MEMORY[0x1E0C809B0];
                    v56[1] = 3221225472;
                    v56[2] = ___ZL39nw_protocol_implementation_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke;
                    v56[3] = &unk_1E149BC78;
                    v57 = v9;
                    v58 = *(_DWORD *)type;
                    nw_path_enumerate_interface_options(v5, v56);

                  }
                  else
                  {
                    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*(_QWORD *)(v9[1] + 80) + 224))(v9, 0, *(unsigned int *)type);
                  }
                }
              }
            }
            v15 = (unsigned __int8 *)v5;
            v16 = v15[474];

            v17 = *(_QWORD *)(v9[1] + 80);
            v18 = *(void (**)(_QWORD *, _QWORD))(v17 + 152);
            if (v18)
            {
              v18(v9, (v16 >> 1) & 1);
              v17 = *(_QWORD *)(v9[1] + 80);
            }
            if (*(_QWORD *)(v17 + 168))
            {
              v19 = v15;
              v20 = v15[474];

              v21 = *((_BYTE *)v9 + 402);
              if (((v20 >> 5) & 1) == ((v21 & 1) == 0))
              {
                *((_BYTE *)v9 + 402) = v21 & 0xFE | ((v20 & 0x20) >> 5);
                (*(void (**)(_QWORD *, BOOL))(*(_QWORD *)(v9[1] + 80) + 168))(v9, (v20 & 0x20) != 0);
              }
            }
            nw_protocol_instance_update_available_paths((NWConcrete_nw_protocol_instance *)v9);
            v22 = 1;
LABEL_27:

            goto LABEL_28;
          }
          __nwlog_obj();
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v62 = "nw_protocol_implementation_updated_path";
          v29 = (char *)_os_log_send_and_compose_impl();

          type[4] = OS_LOG_TYPE_ERROR;
          type[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v29, &type[4], type))
          {
            if (type[4] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v30 = objc_claimAutoreleasedReturnValue();
              v37 = type[4];
              if (os_log_type_enabled(v30, type[4]))
              {
                *(_DWORD *)buf = 136446210;
                v62 = "nw_protocol_implementation_updated_path";
                _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s called with null path", buf, 0xCu);
              }
LABEL_117:

              goto LABEL_82;
            }
            if (type[0] == OS_LOG_TYPE_DEFAULT)
            {
              __nwlog_obj();
              v30 = objc_claimAutoreleasedReturnValue();
              v55 = type[4];
              if (os_log_type_enabled(v30, type[4]))
              {
                *(_DWORD *)buf = 136446210;
                v62 = "nw_protocol_implementation_updated_path";
                _os_log_impl(&dword_182FBE000, v30, v55, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_117;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v30 = objc_claimAutoreleasedReturnValue();
            v49 = type[4];
            v50 = os_log_type_enabled(v30, type[4]);
            if (!backtrace_string)
            {
              if (v50)
              {
                *(_DWORD *)buf = 136446210;
                v62 = "nw_protocol_implementation_updated_path";
                _os_log_impl(&dword_182FBE000, v30, v49, "%{public}s called with null path, no backtrace", buf, 0xCu);
              }
              goto LABEL_117;
            }
            if (v50)
            {
              *(_DWORD *)buf = 136446466;
              v62 = "nw_protocol_implementation_updated_path";
              v63 = 2082;
              v64 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v30, v49, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
            }
            goto LABEL_81;
          }
LABEL_82:
          if (v29)
            free(v29);
          v22 = 0;
          goto LABEL_27;
        }
        __nwlog_obj();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v62 = "nw_protocol_implementation_updated_path";
        v29 = (char *)_os_log_send_and_compose_impl();

        type[4] = OS_LOG_TYPE_ERROR;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v29, &type[4], type))
          goto LABEL_82;
        if (type[4] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v35 = type[4];
          if (os_log_type_enabled(v30, type[4]))
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl(&dword_182FBE000, v30, v35, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_117;
        }
        if (type[0] == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v54 = type[4];
          if (os_log_type_enabled(v30, type[4]))
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl(&dword_182FBE000, v30, v54, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_117;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v47 = type[4];
        v48 = os_log_type_enabled(v30, type[4]);
        if (!backtrace_string)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl(&dword_182FBE000, v30, v47, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_117;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_protocol_implementation_updated_path";
          v63 = 2082;
          v64 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v30, v47, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v62 = "nw_protocol_implementation_updated_path";
        v29 = (char *)_os_log_send_and_compose_impl();

        type[4] = OS_LOG_TYPE_ERROR;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v29, &type[4], type))
          goto LABEL_82;
        if (type[4] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v33 = type[4];
          if (os_log_type_enabled(v30, type[4]))
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_117;
        }
        if (type[0] == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v53 = type[4];
          if (os_log_type_enabled(v30, type[4]))
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl(&dword_182FBE000, v30, v53, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_117;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v45 = type[4];
        v46 = os_log_type_enabled(v30, type[4]);
        if (!backtrace_string)
        {
          if (v46)
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl(&dword_182FBE000, v30, v45, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_117;
        }
        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_protocol_implementation_updated_path";
          v63 = 2082;
          v64 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v30, v45, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v62 = "nw_protocol_implementation_updated_path";
      v29 = (char *)_os_log_send_and_compose_impl();

      type[4] = OS_LOG_TYPE_ERROR;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v29, &type[4], type))
        goto LABEL_82;
      if (type[4] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = type[4];
        if (os_log_type_enabled(v30, type[4]))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_protocol_implementation_updated_path";
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_117;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v52 = type[4];
        if (os_log_type_enabled(v30, type[4]))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_protocol_implementation_updated_path";
          _os_log_impl(&dword_182FBE000, v30, v52, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_117;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v43 = type[4];
      v44 = os_log_type_enabled(v30, type[4]);
      if (!backtrace_string)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_protocol_implementation_updated_path";
          _os_log_impl(&dword_182FBE000, v30, v43, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_117;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446466;
        v62 = "nw_protocol_implementation_updated_path";
        v63 = 2082;
        v64 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v30, v43, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
LABEL_81:

    free(backtrace_string);
    goto LABEL_82;
  }
  __nwlog_obj();
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v62 = "nw_protocol_implementation_updated_path";
  v25 = (char *)_os_log_send_and_compose_impl();

  type[4] = OS_LOG_TYPE_ERROR;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v25, &type[4], type))
  {
    if (type[4] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = type[4];
      if (os_log_type_enabled(v26, type[4]))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_protocol_implementation_updated_path";
        _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (type[0])
    {
      v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v40 = type[4];
      v41 = os_log_type_enabled(v26, type[4]);
      if (v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_protocol_implementation_updated_path";
          v63 = 2082;
          v64 = v39;
          _os_log_impl(&dword_182FBE000, v26, v40, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v39);
        goto LABEL_103;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_protocol_implementation_updated_path";
        _os_log_impl(&dword_182FBE000, v26, v40, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v51 = type[4];
      if (os_log_type_enabled(v26, type[4]))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_protocol_implementation_updated_path";
        _os_log_impl(&dword_182FBE000, v26, v51, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_103:
  if (v25)
    free(v25);
  v22 = 0;
LABEL_28:

  return v22;
}

void sub_1834B3418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_implementation_connect(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v6;
  char *v7;
  uint64_t v8;
  _WORD *output_handler_context;
  int v10;
  nw_protocol *output_handler;
  void *v12;
  char v13;
  id v14;
  const char *v15;
  NSObject *v16;
  os_log_type_t v17;
  _WORD *v18;
  int v19;
  __int16 v20;
  __int16 v21;
  void *v22;
  char v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  nw_protocol *v27;
  void *v28;
  char v29;
  os_log_type_t v30;
  NSObject *v31;
  nw_protocol_callbacks *v32;
  void *v33;
  char v34;
  nw_protocol_callbacks *v35;
  nw_protocol_callbacks *v36;
  void (*v37)(nw_protocol *, nw_protocol *);
  char *v38;
  uint64_t v39;
  nw_protocol_callbacks *callbacks;
  void *v41;
  char v42;
  nw_protocol_callbacks *v43;
  nw_protocol_callbacks *v44;
  void (*connect)(nw_protocol *, nw_protocol *);
  NSObject *v46;
  void *v47;
  const char *v48;
  __int16 v49;
  unint64_t v50;
  void *v51;
  const char *v52;
  NSObject *v53;
  os_log_type_t v54;
  nw_protocol_callbacks *v55;
  nw_protocol_callbacks *v56;
  void (*get_parameters)(nw_protocol *);
  void *v58;
  unsigned __int8 *v59;
  void *v60;
  void (*v61)(uint64_t *, uint64_t, _QWORD);
  uint64_t *v62;
  uint64_t v63;
  NWConcrete_nw_protocol_instance *v64;
  unint64_t v65;
  NSObject *v67;
  char *backtrace_string;
  os_log_type_t v69;
  _BOOL4 v70;
  os_log_type_t v71;
  void *v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  void *v76;
  os_log_type_t v77;
  void *v78;
  os_log_type_t v79;
  void *v80;
  os_log_type_t v81;
  void *v82;
  os_log_type_t v83;
  char *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  os_log_type_t v87;
  _BOOL4 v88;
  os_log_type_t v89;
  _BOOL4 v90;
  os_log_type_t v91;
  _BOOL4 v92;
  os_log_type_t v93;
  _BOOL4 v94;
  NSObject *v95;
  void *v96;
  const char *v97;
  char *v98;
  NSObject *v99;
  os_log_type_t v100;
  const char *v101;
  void *v102;
  const char *name;
  NSObject *v104;
  const char *v105;
  os_log_type_t v106;
  os_log_type_t v107;
  os_log_type_t v108;
  os_log_type_t v109;
  os_log_type_t v110;
  void *v111;
  char *v112;
  NSObject *v113;
  os_log_type_t v114;
  char *v115;
  os_log_type_t v116;
  _BOOL4 v117;
  const char *v118;
  void *v119;
  char *v120;
  NSObject *v121;
  os_log_type_t v122;
  NSObject *v123;
  uint64_t v124;
  NSObject *v125;
  char *v126;
  _BOOL4 v127;
  const char *v128;
  char *v129;
  os_log_type_t v130;
  _BOOL4 v131;
  void *v132;
  nw_protocol_identifier *identifier;
  char *v134;
  NSObject *v135;
  os_log_type_t v136;
  nw_protocol_identifier *v137;
  os_log_type_t v138;
  const char *v139;
  char *v140;
  os_log_type_t v141;
  _BOOL4 v142;
  const char *v143;
  const char *v144;
  NSObject *v145;
  char *v146;
  _BOOL4 v147;
  nw_protocol_identifier *v148;
  os_log_type_t v149;
  const char *v150;
  NSObject *v151;
  os_log_type_t v152;
  os_log_type_t v153;
  nw_protocol_identifier *v154;
  nw_protocol_identifier *v155;
  os_log_type_t v156;
  os_log_type_t v157;
  NSObject *v158;
  os_log_type_t v159;
  os_log_type_t v160;
  char *v161;
  char v162;
  os_log_type_t v163[8];
  char v164;
  os_log_type_t v165;
  os_log_type_t type[8];
  char v167;
  uint8_t buf[4];
  const char *v169;
  __int16 v170;
  char *v171;
  __int16 v172;
  nw_protocol *v173;
  __int16 v174;
  nw_protocol *v175;
  __int16 v176;
  char *v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v6 = p_output_handler;
    v7 = v6;
    if (handle != &nw_protocol_ref_counted_handle)
    {
      __nwlog_obj();
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v169 = "nw_protocol_implementation_connect";
      v52 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v163[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v52, type, v163))
        goto LABEL_152;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v53 = objc_claimAutoreleasedReturnValue();
        v77 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v77, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (v163[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v53 = objc_claimAutoreleasedReturnValue();
        v107 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v107, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_151;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      v87 = type[0];
      v88 = os_log_type_enabled(v53, type[0]);
      if (!backtrace_string)
      {
        if (v88)
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v87, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (v88)
      {
        *(_DWORD *)buf = 136446466;
        v169 = "nw_protocol_implementation_connect";
        v170 = 2082;
        v171 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v53, v87, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_143;
    }
    v8 = *((_QWORD *)v6 + 1);
    if (!v8)
    {
      __nwlog_obj();
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v169 = "nw_protocol_implementation_connect";
      v52 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v163[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v52, type, v163))
        goto LABEL_152;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v53 = objc_claimAutoreleasedReturnValue();
        v79 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v79, "%{public}s called with null instance->parent_definition", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (v163[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v53 = objc_claimAutoreleasedReturnValue();
        v108 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v108, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_151;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      v89 = type[0];
      v90 = os_log_type_enabled(v53, type[0]);
      if (!backtrace_string)
      {
        if (v90)
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v89, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (v90)
      {
        *(_DWORD *)buf = 136446466;
        v169 = "nw_protocol_implementation_connect";
        v170 = 2082;
        v171 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v53, v89, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_143;
    }
    if (!*(_QWORD *)(v8 + 80))
    {
      __nwlog_obj();
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v169 = "nw_protocol_implementation_connect";
      v52 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v163[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v52, type, v163))
        goto LABEL_152;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v53 = objc_claimAutoreleasedReturnValue();
        v81 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v81, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (v163[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v53 = objc_claimAutoreleasedReturnValue();
        v109 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v109, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_151;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      v91 = type[0];
      v92 = os_log_type_enabled(v53, type[0]);
      if (!backtrace_string)
      {
        if (v92)
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v91, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (v92)
      {
        *(_DWORD *)buf = 136446466;
        v169 = "nw_protocol_implementation_connect";
        v170 = 2082;
        v171 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v53, v91, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_143;
    }
    if (!a2)
    {
      __nwlog_obj();
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v169 = "nw_protocol_implementation_connect";
      v52 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v163[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v52, type, v163))
        goto LABEL_152;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v53 = objc_claimAutoreleasedReturnValue();
        v83 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v83, "%{public}s called with null input_protocol", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (v163[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v53 = objc_claimAutoreleasedReturnValue();
        v110 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v110, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_151;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      v93 = type[0];
      v94 = os_log_type_enabled(v53, type[0]);
      if (!backtrace_string)
      {
        if (v94)
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v93, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (v94)
      {
        *(_DWORD *)buf = 136446466;
        v169 = "nw_protocol_implementation_connect";
        v170 = 2082;
        v171 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v53, v93, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_143;
    }
    if (a1->output_handler != a1)
    {
      if ((v6[402] & 0x20) == 0)
      {
        if ((v6[405] & 0x80000000) == 0 && gLogDatapath)
        {
          __nwlog_obj();
          v95 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            v169 = "nw_protocol_implementation_connect";
            v170 = 2082;
            v171 = v7 + 407;
            v172 = 2080;
            v173 = (nw_protocol *)" ";
            _os_log_impl(&dword_182FBE000, v95, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sConnect", buf, 0x20u);
          }

          v8 = *((_QWORD *)v7 + 1);
        }
        if (*(_DWORD *)(v8 + 64) == 3)
        {
          output_handler_context = a2->output_handler_context;
          v10 = v7[405];
          if (output_handler_context)
          {
            if ((v10 & 0x80000000) == 0 && gLogDatapath)
            {
              __nwlog_obj();
              v123 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
              {
                v124 = nw_protocol_flow_for_protocol((NWConcrete_nw_protocol_instance *)v7, (uint64_t)a2);
                *(_DWORD *)buf = 136446978;
                v169 = "nw_protocol_implementation_connect";
                v170 = 2082;
                v171 = v7 + 407;
                v172 = 2080;
                v173 = (nw_protocol *)" ";
                v174 = 2048;
                v175 = (nw_protocol *)v124;
                _os_log_impl(&dword_182FBE000, v123, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRequested connect from flow %llx", buf, 0x2Au);
              }

            }
            output_handler_context[42] |= 4u;
            output_handler = a1->output_handler;
            if (output_handler)
            {
              v12 = output_handler->handle;
              if (v12 == &nw_protocol_ref_counted_handle)
              {
                callbacks = output_handler[1].callbacks;
                if (callbacks)
                  output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
                v13 = -1;
              }
              else
              {
                v13 = 0;
              }
              *(_QWORD *)type = output_handler;
              v167 = v13;
              v41 = a1->handle;
              if (v41 == &nw_protocol_ref_counted_handle)
              {
                v43 = a1[1].callbacks;
                if (v43)
                  a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v43->add_input_handler + 1);
                v42 = -1;
              }
              else
              {
                v42 = 0;
              }
              *(_QWORD *)v163 = a1;
              v164 = v42;
              v44 = output_handler->callbacks;
              if (v44)
              {
                connect = (void (*)(nw_protocol *, nw_protocol *))v44->connect;
                if (connect)
                {
                  connect(output_handler, a1);
LABEL_90:
                  if (v41 == &nw_protocol_ref_counted_handle)
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v163);
                  if (v12 == &nw_protocol_ref_counted_handle)
                    nw::release_if_needed<nw_protocol *>((uint64_t *)type);
LABEL_94:
                  if (output_handler_context == a2->output_handler_context)
                  {
                    v49 = output_handler_context[42];
                    if ((v49 & 0x20) != 0)
                    {
                      if ((v7[405] & 0x80000000) == 0 && gLogDatapath)
                      {
                        __nwlog_obj();
                        v151 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136446722;
                          v169 = "nw_protocol_implementation_connect";
                          v170 = 2082;
                          v171 = v7 + 407;
                          v172 = 2080;
                          v173 = (nw_protocol *)" ";
                          _os_log_impl(&dword_182FBE000, v151, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDelivering deferred connected event", buf, 0x20u);
                        }

                        v49 = output_handler_context[42];
                      }
                      output_handler_context[42] = v49 & 0xFFDF;
                      v50 = nw_protocol_flow_for_protocol((NWConcrete_nw_protocol_instance *)v7, (uint64_t)a2);
                      nw_protocol_implementation_report_connected((NWConcrete_nw_protocol_instance *)v7, a1, a2, v50);
                    }
                  }
                  else if ((v7[405] & 0x80000000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v46 = (id)gLogObj;
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                    {
                      v47 = a2->output_handler_context;
                      *(_DWORD *)buf = 136446978;
                      v169 = "nw_protocol_implementation_connect";
                      if (v47)
                        v48 = "changed";
                      else
                        v48 = "freed";
                      v170 = 2082;
                      v171 = v7 + 407;
                      v172 = 2080;
                      v173 = (nw_protocol *)" ";
                      v174 = 2082;
                      v175 = (nw_protocol *)v48;
                      _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%soutput_handler_context %{public}s, no deferrred connected event", buf, 0x2Au);
                    }

                  }
                  goto LABEL_131;
                }
              }
              __nwlog_obj();
              v102 = (void *)objc_claimAutoreleasedReturnValue();
              name = output_handler->identifier->name;
              *(_DWORD *)buf = 136446722;
              v169 = "__nw_protocol_connect";
              if (!name)
                name = "invalid";
              v170 = 2082;
              v171 = (char *)name;
              v172 = 2048;
              v173 = output_handler;
              v161 = (char *)_os_log_send_and_compose_impl();

              v165 = OS_LOG_TYPE_ERROR;
              v162 = 0;
              if (__nwlog_fault(v161, &v165, &v162))
              {
                if (v165 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v104 = objc_claimAutoreleasedReturnValue();
                  v157 = v165;
                  if (os_log_type_enabled(v104, v165))
                  {
                    v105 = output_handler->identifier->name;
                    if (!v105)
                      v105 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    v169 = "__nw_protocol_connect";
                    v170 = 2082;
                    v171 = (char *)v105;
                    v172 = 2048;
                    v173 = output_handler;
                    _os_log_impl(&dword_182FBE000, v104, v157, "%{public}s protocol %{public}s (%p) has invalid connect callback", buf, 0x20u);
                  }
                }
                else
                {
                  if (v162)
                  {
                    v126 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v158 = objc_claimAutoreleasedReturnValue();
                    v156 = v165;
                    v127 = os_log_type_enabled(v158, v165);
                    if (v126)
                    {
                      if (v127)
                      {
                        v128 = output_handler->identifier->name;
                        if (!v128)
                          v128 = "invalid";
                        *(_DWORD *)buf = 136446978;
                        v169 = "__nw_protocol_connect";
                        v170 = 2082;
                        v171 = (char *)v128;
                        v172 = 2048;
                        v173 = output_handler;
                        v174 = 2082;
                        v175 = (nw_protocol *)v126;
                        _os_log_impl(&dword_182FBE000, v158, v156, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", buf, 0x2Au);
                      }

                      free(v126);
                    }
                    else
                    {
                      if (v127)
                      {
                        v150 = output_handler->identifier->name;
                        if (!v150)
                          v150 = "invalid";
                        *(_DWORD *)buf = 136446722;
                        v169 = "__nw_protocol_connect";
                        v170 = 2082;
                        v171 = (char *)v150;
                        v172 = 2048;
                        v173 = output_handler;
                        _os_log_impl(&dword_182FBE000, v158, v156, "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace", buf, 0x20u);
                      }

                    }
                    goto LABEL_342;
                  }
                  __nwlog_obj();
                  v104 = objc_claimAutoreleasedReturnValue();
                  v159 = v165;
                  if (os_log_type_enabled(v104, v165))
                  {
                    v144 = output_handler->identifier->name;
                    if (!v144)
                      v144 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    v169 = "__nw_protocol_connect";
                    v170 = 2082;
                    v171 = (char *)v144;
                    v172 = 2048;
                    v173 = output_handler;
                    _os_log_impl(&dword_182FBE000, v104, v159, "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded", buf, 0x20u);
                  }
                }

              }
LABEL_342:
              if (v161)
                free(v161);
              goto LABEL_90;
            }
            __nwlog_obj();
            v119 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v169 = "__nw_protocol_connect";
            v120 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            v163[0] = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v120, type, v163))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v121 = objc_claimAutoreleasedReturnValue();
                v122 = type[0];
                if (os_log_type_enabled(v121, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v169 = "__nw_protocol_connect";
                  _os_log_impl(&dword_182FBE000, v121, v122, "%{public}s called with null protocol", buf, 0xCu);
                }
              }
              else if (v163[0])
              {
                v140 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v121 = objc_claimAutoreleasedReturnValue();
                v141 = type[0];
                v142 = os_log_type_enabled(v121, type[0]);
                if (v140)
                {
                  if (v142)
                  {
                    *(_DWORD *)buf = 136446466;
                    v169 = "__nw_protocol_connect";
                    v170 = 2082;
                    v171 = v140;
                    _os_log_impl(&dword_182FBE000, v121, v141, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v140);
                  goto LABEL_358;
                }
                if (v142)
                {
                  *(_DWORD *)buf = 136446210;
                  v169 = "__nw_protocol_connect";
                  _os_log_impl(&dword_182FBE000, v121, v141, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v121 = objc_claimAutoreleasedReturnValue();
                v152 = type[0];
                if (os_log_type_enabled(v121, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v169 = "__nw_protocol_connect";
                  _os_log_impl(&dword_182FBE000, v121, v152, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                }
              }

            }
LABEL_358:
            if (v120)
              free(v120);
            goto LABEL_94;
          }
          if ((v10 & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v31 = (id)gLogObj;
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446978;
              v169 = "nw_protocol_implementation_connect";
              v170 = 2082;
              v171 = v7 + 407;
              v172 = 2080;
              v173 = (nw_protocol *)" ";
              v174 = 2048;
              v175 = a2;
              _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sOutput handler context doesn't exist on protocol %p", buf, 0x2Au);
            }
LABEL_48:

          }
LABEL_78:
          v39 = 0;
LABEL_132:

          return v39;
        }
        v27 = a1->output_handler;
        if (v27)
        {
          v28 = v27->handle;
          if (v28 == &nw_protocol_ref_counted_handle)
          {
            v32 = v27[1].callbacks;
            if (v32)
              v27[1].callbacks = (nw_protocol_callbacks *)((char *)&v32->add_input_handler + 1);
            v29 = -1;
          }
          else
          {
            v29 = 0;
          }
          *(_QWORD *)type = v27;
          v167 = v29;
          v33 = a1->handle;
          if (v33 == &nw_protocol_ref_counted_handle)
          {
            v35 = a1[1].callbacks;
            if (v35)
              a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v35->add_input_handler + 1);
            v34 = -1;
          }
          else
          {
            v34 = 0;
          }
          *(_QWORD *)v163 = a1;
          v164 = v34;
          v36 = v27->callbacks;
          if (v36)
          {
            v37 = (void (*)(nw_protocol *, nw_protocol *))v36->connect;
            if (v37)
            {
              v37(v27, a1);
LABEL_64:
              if (v33 == &nw_protocol_ref_counted_handle)
                nw::release_if_needed<nw_protocol *>((uint64_t *)v163);
              if (v28 == &nw_protocol_ref_counted_handle)
                nw::release_if_needed<nw_protocol *>((uint64_t *)type);
              goto LABEL_131;
            }
          }
          __nwlog_obj();
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          v97 = v27->identifier->name;
          *(_DWORD *)buf = 136446722;
          v169 = "__nw_protocol_connect";
          if (!v97)
            v97 = "invalid";
          v170 = 2082;
          v171 = (char *)v97;
          v172 = 2048;
          v173 = v27;
          v98 = (char *)_os_log_send_and_compose_impl();

          v165 = OS_LOG_TYPE_ERROR;
          v162 = 0;
          if (__nwlog_fault(v98, &v165, &v162))
          {
            if (v165 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v99 = objc_claimAutoreleasedReturnValue();
              v100 = v165;
              if (os_log_type_enabled(v99, v165))
              {
                v101 = v27->identifier->name;
                if (!v101)
                  v101 = "invalid";
                *(_DWORD *)buf = 136446722;
                v169 = "__nw_protocol_connect";
                v170 = 2082;
                v171 = (char *)v101;
                v172 = 2048;
                v173 = v27;
                _os_log_impl(&dword_182FBE000, v99, v100, "%{public}s protocol %{public}s (%p) has invalid connect callback", buf, 0x20u);
              }
            }
            else if (v162)
            {
              v115 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v99 = objc_claimAutoreleasedReturnValue();
              v116 = v165;
              v117 = os_log_type_enabled(v99, v165);
              if (v115)
              {
                if (v117)
                {
                  v118 = v27->identifier->name;
                  if (!v118)
                    v118 = "invalid";
                  *(_DWORD *)buf = 136446978;
                  v169 = "__nw_protocol_connect";
                  v170 = 2082;
                  v171 = (char *)v118;
                  v172 = 2048;
                  v173 = v27;
                  v174 = 2082;
                  v175 = (nw_protocol *)v115;
                  _os_log_impl(&dword_182FBE000, v99, v116, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", buf, 0x2Au);
                }

                free(v115);
                goto LABEL_317;
              }
              if (v117)
              {
                v143 = v27->identifier->name;
                if (!v143)
                  v143 = "invalid";
                *(_DWORD *)buf = 136446722;
                v169 = "__nw_protocol_connect";
                v170 = 2082;
                v171 = (char *)v143;
                v172 = 2048;
                v173 = v27;
                _os_log_impl(&dword_182FBE000, v99, v116, "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace", buf, 0x20u);
              }
            }
            else
            {
              __nwlog_obj();
              v99 = objc_claimAutoreleasedReturnValue();
              v138 = v165;
              if (os_log_type_enabled(v99, v165))
              {
                v139 = v27->identifier->name;
                if (!v139)
                  v139 = "invalid";
                *(_DWORD *)buf = 136446722;
                v169 = "__nw_protocol_connect";
                v170 = 2082;
                v171 = (char *)v139;
                v172 = 2048;
                v173 = v27;
                _os_log_impl(&dword_182FBE000, v99, v138, "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded", buf, 0x20u);
              }
            }

          }
LABEL_317:
          if (v98)
            free(v98);
          goto LABEL_64;
        }
        __nwlog_obj();
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v169 = "__nw_protocol_connect";
        v112 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v163[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v112, type, v163))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v113 = objc_claimAutoreleasedReturnValue();
            v114 = type[0];
            if (os_log_type_enabled(v113, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v169 = "__nw_protocol_connect";
              _os_log_impl(&dword_182FBE000, v113, v114, "%{public}s called with null protocol", buf, 0xCu);
            }
          }
          else if (v163[0])
          {
            v129 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v113 = objc_claimAutoreleasedReturnValue();
            v130 = type[0];
            v131 = os_log_type_enabled(v113, type[0]);
            if (v129)
            {
              if (v131)
              {
                *(_DWORD *)buf = 136446466;
                v169 = "__nw_protocol_connect";
                v170 = 2082;
                v171 = v129;
                _os_log_impl(&dword_182FBE000, v113, v130, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v129);
              goto LABEL_350;
            }
            if (v131)
            {
              *(_DWORD *)buf = 136446210;
              v169 = "__nw_protocol_connect";
              _os_log_impl(&dword_182FBE000, v113, v130, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v113 = objc_claimAutoreleasedReturnValue();
            v149 = type[0];
            if (os_log_type_enabled(v113, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v169 = "__nw_protocol_connect";
              _os_log_impl(&dword_182FBE000, v113, v149, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_350:
        if (v112)
          free(v112);
        goto LABEL_131;
      }
      if (*(_DWORD *)(v8 + 64) != 3)
        goto LABEL_131;
      v18 = a2->output_handler_context;
      v19 = v6[405];
      if (!v18)
      {
        if (v19 < 0)
          goto LABEL_78;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v31 = (id)gLogObj;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          v169 = "nw_protocol_implementation_connect";
          v170 = 2082;
          v171 = v7 + 407;
          v172 = 2080;
          v173 = (nw_protocol *)" ";
          v174 = 2048;
          v175 = a2;
          _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sOutput handler context doesn't exist on protocol %p", buf, 0x2Au);
        }
        goto LABEL_48;
      }
      if ((v19 & 0x80000000) == 0 && gLogDatapath)
      {
        __nwlog_obj();
        v125 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          v169 = "nw_protocol_implementation_connect";
          v170 = 2082;
          v171 = v7 + 407;
          v172 = 2080;
          v173 = (nw_protocol *)" ";
          v174 = 2048;
          v175 = (nw_protocol *)nw_protocol_flow_for_protocol((NWConcrete_nw_protocol_instance *)v7, (uint64_t)a2);
          _os_log_impl(&dword_182FBE000, v125, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sConnect from flow %llx", buf, 0x2Au);
        }

      }
      v20 = v18[42];
      v21 = v20 | 4;
      v18[42] = v20 | 4;
      if ((v20 & 8) != 0)
      {
        if ((v20 & 0x10) != 0)
        {
          v21 = v20 | 0x24;
          v18[42] = v20 | 0x24;
        }
        if ((v21 & 0x20) == 0)
          goto LABEL_131;
        goto LABEL_125;
      }
      if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 80) + 120))
      {
        v22 = a2->handle;
        if (v22 == &nw_protocol_ref_counted_handle)
        {
          v55 = a2[1].callbacks;
          if (v55)
            a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v55->add_input_handler + 1);
          *(_QWORD *)type = a2;
          v23 = v167 | 1;
        }
        else
        {
          *(_QWORD *)type = a2;
          v23 = v167 & 0xFE;
        }
        v167 = v23;
        v56 = a2->callbacks;
        if (v56)
        {
          get_parameters = (void (*)(nw_protocol *))v56->get_parameters;
          if (get_parameters)
          {
            get_parameters(a2);
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            if (v22 != &nw_protocol_ref_counted_handle)
              goto LABEL_118;
            goto LABEL_117;
          }
        }
        __nwlog_obj();
        v132 = (void *)objc_claimAutoreleasedReturnValue();
        identifier = a2->identifier;
        *(_DWORD *)buf = 136446722;
        v169 = "__nw_protocol_get_parameters";
        if (!identifier)
          identifier = (nw_protocol_identifier *)"invalid";
        v170 = 2082;
        v171 = (char *)identifier;
        v172 = 2048;
        v173 = a2;
        v134 = (char *)_os_log_send_and_compose_impl();

        v163[0] = OS_LOG_TYPE_ERROR;
        v165 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v134, v163, &v165))
        {
          if (v163[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v135 = objc_claimAutoreleasedReturnValue();
            v136 = v163[0];
            if (os_log_type_enabled(v135, v163[0]))
            {
              v137 = a2->identifier;
              if (!v137)
                v137 = (nw_protocol_identifier *)"invalid";
              *(_DWORD *)buf = 136446722;
              v169 = "__nw_protocol_get_parameters";
              v170 = 2082;
              v171 = (char *)v137;
              v172 = 2048;
              v173 = a2;
              _os_log_impl(&dword_182FBE000, v135, v136, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback", buf, 0x20u);
            }
LABEL_369:

            goto LABEL_370;
          }
          if (v165 == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            v135 = objc_claimAutoreleasedReturnValue();
            v153 = v163[0];
            if (os_log_type_enabled(v135, v163[0]))
            {
              v154 = a2->identifier;
              if (!v154)
                v154 = (nw_protocol_identifier *)"invalid";
              *(_DWORD *)buf = 136446722;
              v169 = "__nw_protocol_get_parameters";
              v170 = 2082;
              v171 = (char *)v154;
              v172 = 2048;
              v173 = a2;
              _os_log_impl(&dword_182FBE000, v135, v153, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded", buf, 0x20u);
            }
            goto LABEL_369;
          }
          v146 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v135 = objc_claimAutoreleasedReturnValue();
          v160 = v163[0];
          v147 = os_log_type_enabled(v135, v163[0]);
          if (!v146)
          {
            if (v147)
            {
              v155 = a2->identifier;
              if (!v155)
                v155 = (nw_protocol_identifier *)"invalid";
              *(_DWORD *)buf = 136446722;
              v169 = "__nw_protocol_get_parameters";
              v170 = 2082;
              v171 = (char *)v155;
              v172 = 2048;
              v173 = a2;
              _os_log_impl(&dword_182FBE000, v135, v160, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace", buf, 0x20u);
            }
            goto LABEL_369;
          }
          if (v147)
          {
            v148 = a2->identifier;
            if (!v148)
              v148 = (nw_protocol_identifier *)"invalid";
            *(_DWORD *)buf = 136446978;
            v169 = "__nw_protocol_get_parameters";
            v170 = 2082;
            v171 = (char *)v148;
            v172 = 2048;
            v173 = a2;
            v174 = 2082;
            v175 = (nw_protocol *)v146;
            _os_log_impl(&dword_182FBE000, v135, v160, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v146);
        }
LABEL_370:
        if (v134)
          free(v134);
        v58 = 0;
        if (v22 != &nw_protocol_ref_counted_handle)
        {
LABEL_118:
          if (v58)
          {
            v59 = nw_parameters_copy_protocol_options(v58, v7, 0);
            objc_storeStrong((id *)v7 + 7, v59);
            v60 = (void *)*((_QWORD *)v18 + 5);
            *((_QWORD *)v18 + 5) = v59;

          }
          v18[42] |= 8u;
          v61 = *(void (**)(uint64_t *, uint64_t, _QWORD))(*(_QWORD *)(*((_QWORD *)v7 + 1) + 80) + 120);
          v62 = v7;
          if (nw_protocol_definition_get_message_is_stream(*((void **)v7 + 1))
            && (nw_protocol *)*(v62 - 6) == a2)
          {
            v63 = -2;
          }
          else
          {
            v63 = (uint64_t)a2;
          }

          v61(v62, v63, v18[42] & 1);
          if (!nw_hash_table_get_node(v62[29], (uint64_t)a2, 8))
          {
            if ((v7[405] & 0x80000000) == 0)
            {
              __nwlog_obj();
              v67 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446978;
                v169 = "nw_protocol_implementation_connect";
                v170 = 2082;
                v171 = (char *)v62 + 407;
                v172 = 2080;
                v173 = (nw_protocol *)" ";
                v174 = 2048;
                v175 = a2;
                _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sinput_protocol %p no longer exists in flows_table", buf, 0x2Au);
              }

            }
            goto LABEL_78;
          }

          v21 = v18[42];
          if ((v21 & 0x20) != 0)
          {
LABEL_125:
            if ((v7[405] & 0x80000000) == 0 && gLogDatapath)
            {
              __nwlog_obj();
              v145 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446722;
                v169 = "nw_protocol_implementation_connect";
                v170 = 2082;
                v171 = v7 + 407;
                v172 = 2080;
                v173 = (nw_protocol *)" ";
                _os_log_impl(&dword_182FBE000, v145, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDelivering deferred connected event", buf, 0x20u);
              }

              v21 = v18[42];
            }
            v18[42] = v21 & 0xFFDF;
            v64 = v7;
            if (nw_protocol_definition_get_message_is_stream(*((void **)v7 + 1))
              && *(nw_protocol **)&v64[-1].log_str[41] == a2)
            {
              v65 = -2;
            }
            else
            {
              v65 = (unint64_t)a2;
            }

            nw_protocol_implementation_report_connected(v64, a1, a2, v65);
          }
LABEL_131:
          v39 = 1;
          goto LABEL_132;
        }
LABEL_117:
        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
        goto LABEL_118;
      }
      __nwlog_obj();
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v169 = "nw_protocol_implementation_connect";
      v52 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v163[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v52, type, v163))
        goto LABEL_152;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v53 = objc_claimAutoreleasedReturnValue();
        v54 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s called with null instance->parent_definition->start", buf, 0xCu);
        }
LABEL_151:

        goto LABEL_152;
      }
      if (v163[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v53 = objc_claimAutoreleasedReturnValue();
        v71 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v71, "%{public}s called with null instance->parent_definition->start, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_151;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      v69 = type[0];
      v70 = os_log_type_enabled(v53, type[0]);
      if (!backtrace_string)
      {
        if (v70)
        {
          *(_DWORD *)buf = 136446210;
          v169 = "nw_protocol_implementation_connect";
          _os_log_impl(&dword_182FBE000, v53, v69, "%{public}s called with null instance->parent_definition->start, no backtrace", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (v70)
      {
        *(_DWORD *)buf = 136446466;
        v169 = "nw_protocol_implementation_connect";
        v170 = 2082;
        v171 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v53, v69, "%{public}s called with null instance->parent_definition->start, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_143:

      free(backtrace_string);
LABEL_152:
      if (!v52)
        goto LABEL_78;
      v38 = (char *)v52;
      goto LABEL_77;
    }
    if (v6[405] < 0)
      goto LABEL_78;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446978;
    v169 = "nw_protocol_implementation_connect";
    v170 = 2082;
    v171 = v7 + 407;
    v172 = 2080;
    v173 = (nw_protocol *)" ";
    v174 = 2048;
    v175 = a1;
    v15 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v163[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v15, type, v163))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v17 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          v169 = "nw_protocol_implementation_connect";
          v170 = 2082;
          v171 = v7 + 407;
          v172 = 2080;
          v173 = (nw_protocol *)" ";
          v174 = 2048;
          v175 = a1;
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s %{public}s%sProtocol %p output_handler is pointing to itself", buf, 0x2Au);
        }
      }
      else if (v163[0])
      {
        v24 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v25 = type[0];
        v26 = os_log_type_enabled(v16, type[0]);
        if (v24)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136447234;
            v169 = "nw_protocol_implementation_connect";
            v170 = 2082;
            v171 = v7 + 407;
            v172 = 2080;
            v173 = (nw_protocol *)" ";
            v174 = 2048;
            v175 = a1;
            v176 = 2082;
            v177 = v24;
            _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s %{public}s%sProtocol %p output_handler is pointing to itself, dumping backtrace:%{public}s", buf, 0x34u);
          }

          free(v24);
          if (!v15)
            goto LABEL_78;
LABEL_76:
          v38 = (char *)v15;
LABEL_77:
          free(v38);
          goto LABEL_78;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446978;
          v169 = "nw_protocol_implementation_connect";
          v170 = 2082;
          v171 = v7 + 407;
          v172 = 2080;
          v173 = (nw_protocol *)" ";
          v174 = 2048;
          v175 = a1;
          _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s %{public}s%sProtocol %p output_handler is pointing to itself, no backtrace", buf, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v30 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          v169 = "nw_protocol_implementation_connect";
          v170 = 2082;
          v171 = v7 + 407;
          v172 = 2080;
          v173 = (nw_protocol *)" ";
          v174 = 2048;
          v175 = a1;
          _os_log_impl(&dword_182FBE000, v16, v30, "%{public}s %{public}s%sProtocol %p output_handler is pointing to itself, backtrace limit exceeded", buf, 0x2Au);
        }
      }

    }
    if (!v15)
      goto LABEL_78;
    goto LABEL_76;
  }
  __nwlog_obj();
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v169 = "nw_protocol_implementation_connect";
  v73 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v163[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v73, type, v163))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      v75 = type[0];
      if (os_log_type_enabled(v74, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v169 = "nw_protocol_implementation_connect";
        _os_log_impl(&dword_182FBE000, v74, v75, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v163[0])
    {
      v84 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      v85 = type[0];
      v86 = os_log_type_enabled(v74, type[0]);
      if (v84)
      {
        if (v86)
        {
          *(_DWORD *)buf = 136446466;
          v169 = "nw_protocol_implementation_connect";
          v170 = 2082;
          v171 = v84;
          _os_log_impl(&dword_182FBE000, v74, v85, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v84);
        goto LABEL_255;
      }
      if (v86)
      {
        *(_DWORD *)buf = 136446210;
        v169 = "nw_protocol_implementation_connect";
        _os_log_impl(&dword_182FBE000, v74, v85, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      v106 = type[0];
      if (os_log_type_enabled(v74, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v169 = "nw_protocol_implementation_connect";
        _os_log_impl(&dword_182FBE000, v74, v106, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_255:
  if (v73)
    free(v73);
  return 0;
}

void sub_1834B5A64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_implementation_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2, char a3)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  void *v21;
  NSObject *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  void *v26;
  os_log_type_t v27;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  char v42;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  char *v47;
  __int16 v48;
  const char *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v7 = p_output_handler;
    v8 = v7;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v9 = *((_QWORD *)v7 + 1);
      if (v9)
      {
        if (*(_QWORD *)(v9 + 80))
        {
          v10 = v7[405];
          if (!*((_QWORD *)v7 + 3))
          {
            if ((v10 & 0x80000000) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v13 = (id)gLogObj;
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446722;
                v45 = "nw_protocol_implementation_add_listen_handler";
                v46 = 2082;
                v47 = v8 + 407;
                v48 = 2080;
                v49 = " ";
                _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAdded protocol listen handler", buf, 0x20u);
              }

            }
            *((_QWORD *)v8 + 3) = a2;
            a2->protocol_handler = (nw_protocol *)(v8 - 96);
            if ((a3 & 1) != 0)
            {
              if ((v8[405] & 0x80000000) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v14 = (id)gLogObj;
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446722;
                  v45 = "nw_protocol_implementation_add_listen_handler";
                  v46 = 2082;
                  v47 = v8 + 407;
                  v48 = 2080;
                  v49 = " ";
                  _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sListen handler prohibits joining, removing instance", buf, 0x20u);
                }

              }
              v8[404] |= 4u;
              nw_protocol_remove_instance((uint64_t)(v8 - 96));
            }
            v12 = 1;
            goto LABEL_24;
          }
          if ((v10 & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v11 = (id)gLogObj;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              v45 = "nw_protocol_implementation_add_listen_handler";
              v46 = 2082;
              v47 = v8 + 407;
              v48 = 2080;
              v49 = " ";
              _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sAlready have a listen handler, ignoring add", buf, 0x20u);
            }

          }
LABEL_12:
          v12 = 0;
LABEL_24:

          return v12;
        }
        __nwlog_obj();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v45 = "nw_protocol_implementation_add_listen_handler";
        v21 = (void *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v42 = 0;
        if (!__nwlog_fault((const char *)v21, &type, &v42))
        {
LABEL_93:
          if (v21)
            free(v21);
          goto LABEL_12;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v27 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)buf = 136446210;
            v45 = "nw_protocol_implementation_add_listen_handler";
            _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
LABEL_92:

          goto LABEL_93;
        }
        if (!v42)
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v41 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)buf = 136446210;
            v45 = "nw_protocol_implementation_add_listen_handler";
            _os_log_impl(&dword_182FBE000, v22, v41, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_92;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        v37 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446210;
            v45 = "nw_protocol_implementation_add_listen_handler";
            _os_log_impl(&dword_182FBE000, v22, v36, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_92;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_protocol_implementation_add_listen_handler";
          v46 = 2082;
          v47 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v36, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v45 = "nw_protocol_implementation_add_listen_handler";
        v21 = (void *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v42 = 0;
        if (!__nwlog_fault((const char *)v21, &type, &v42))
          goto LABEL_93;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v25 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)buf = 136446210;
            v45 = "nw_protocol_implementation_add_listen_handler";
            _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_92;
        }
        if (!v42)
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v40 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)buf = 136446210;
            v45 = "nw_protocol_implementation_add_listen_handler";
            _os_log_impl(&dword_182FBE000, v22, v40, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_92;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446210;
            v45 = "nw_protocol_implementation_add_listen_handler";
            _os_log_impl(&dword_182FBE000, v22, v34, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_92;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_protocol_implementation_add_listen_handler";
          v46 = 2082;
          v47 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v34, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v45 = "nw_protocol_implementation_add_listen_handler";
      v21 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v42 = 0;
      if (!__nwlog_fault((const char *)v21, &type, &v42))
        goto LABEL_93;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_protocol_implementation_add_listen_handler";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_92;
      }
      if (!v42)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v39 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_protocol_implementation_add_listen_handler";
          _os_log_impl(&dword_182FBE000, v22, v39, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_92;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      v33 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_protocol_implementation_add_listen_handler";
          _os_log_impl(&dword_182FBE000, v22, v32, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_92;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        v45 = "nw_protocol_implementation_add_listen_handler";
        v46 = 2082;
        v47 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v22, v32, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_93;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v45 = "nw_protocol_implementation_add_listen_handler";
  v17 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v42 = 0;
  if (__nwlog_fault(v17, &type, &v42))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_protocol_implementation_add_listen_handler";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v42)
    {
      v28 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      v30 = os_log_type_enabled(v18, type);
      if (v28)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_protocol_implementation_add_listen_handler";
          v46 = 2082;
          v47 = v28;
          _os_log_impl(&dword_182FBE000, v18, v29, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v28);
        goto LABEL_81;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_protocol_implementation_add_listen_handler";
        _os_log_impl(&dword_182FBE000, v18, v29, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_protocol_implementation_add_listen_handler";
        _os_log_impl(&dword_182FBE000, v18, v38, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_81:
  if (v17)
    free(v17);
  return 0;
}

uint64_t nw_protocol_implementation_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  char *v42;
  __int16 v43;
  const char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v5 = p_output_handler;
    v6 = v5;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v7 = *((_QWORD *)v5 + 1);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 80))
        {
          if (*((nw_listen_protocol **)v5 + 3) == a2)
          {
            *((_QWORD *)v5 + 3) = 0;
            a2->protocol_handler = 0;
          }
          if ((v5[405] & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v8 = (id)gLogObj;
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446722;
              v40 = "nw_protocol_implementation_remove_listen_handler";
              v41 = 2082;
              v42 = v6 + 407;
              v43 = 2080;
              v44 = " ";
              _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRemoved protocol listen handler", buf, 0x20u);
            }

          }
          v6[404] |= 4u;
          nw_protocol_remove_instance((uint64_t)(v6 - 96));
          v9 = 1;
LABEL_14:

          return v9;
        }
        __nwlog_obj();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_implementation_remove_listen_handler";
        v16 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v37 = 0;
        if (__nwlog_fault(v16, &type, &v37))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v17 = objc_claimAutoreleasedReturnValue();
            v22 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              v40 = "nw_protocol_implementation_remove_listen_handler";
              _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
            }
LABEL_82:

            goto LABEL_83;
          }
          if (!v37)
          {
            __nwlog_obj();
            v17 = objc_claimAutoreleasedReturnValue();
            v36 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              v40 = "nw_protocol_implementation_remove_listen_handler";
              _os_log_impl(&dword_182FBE000, v17, v36, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_82;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v31 = type;
          v32 = os_log_type_enabled(v17, type);
          if (!backtrace_string)
          {
            if (v32)
            {
              *(_DWORD *)buf = 136446210;
              v40 = "nw_protocol_implementation_remove_listen_handler";
              _os_log_impl(&dword_182FBE000, v17, v31, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
            }
            goto LABEL_82;
          }
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v40 = "nw_protocol_implementation_remove_listen_handler";
            v41 = 2082;
            v42 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v17, v31, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
          }
          goto LABEL_55;
        }
LABEL_83:
        if (v16)
          free(v16);
        v9 = 0;
        goto LABEL_14;
      }
      __nwlog_obj();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v40 = "nw_protocol_implementation_remove_listen_handler";
      v16 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (!__nwlog_fault(v16, &type, &v37))
        goto LABEL_83;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null instance->parent_definition", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (!v37)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v35 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          _os_log_impl(&dword_182FBE000, v17, v35, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_82;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      v30 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          _os_log_impl(&dword_182FBE000, v17, v29, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        v40 = "nw_protocol_implementation_remove_listen_handler";
        v41 = 2082;
        v42 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v17, v29, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v40 = "nw_protocol_implementation_remove_listen_handler";
      v16 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (!__nwlog_fault(v16, &type, &v37))
        goto LABEL_83;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (!v37)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          _os_log_impl(&dword_182FBE000, v17, v34, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_82;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        v40 = "nw_protocol_implementation_remove_listen_handler";
        v41 = 2082;
        v42 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
LABEL_55:

    free(backtrace_string);
    goto LABEL_83;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_protocol_implementation_remove_listen_handler";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v12, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_implementation_remove_listen_handler";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v37)
    {
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v13, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          v41 = 2082;
          v42 = v23;
          _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
        goto LABEL_71;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_implementation_remove_listen_handler";
        _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_implementation_remove_listen_handler";
        _os_log_impl(&dword_182FBE000, v13, v33, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_71:
  if (v12)
    free(v12);
  return 0;
}

id nw_protocol_implementation_get_parameters(nw_protocol *a1)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v4;
  char *v5;
  uint64_t v6;
  void *v7;
  id v8;
  nw_protocol *default_input_handler;
  void *v11;
  char v12;
  nw_protocol_callbacks *callbacks;
  nw_protocol_callbacks *v14;
  void (*get_parameters)(nw_protocol *);
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  void *v26;
  os_log_type_t v27;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  _BOOL4 v38;
  void *v39;
  const char *name;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  const char *v44;
  os_log_type_t v45;
  os_log_type_t v46;
  os_log_type_t v47;
  void *v48;
  os_log_type_t v49;
  os_log_type_t v50;
  char *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  const char *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  os_log_type_t v57;
  const char *v58;
  const char *v59;
  os_log_type_t v60;
  nw_protocol *v61;
  char v62;
  os_log_type_t type[8];
  char v64;
  os_log_type_t v65;
  uint8_t buf[4];
  const char *v67;
  __int16 v68;
  void *v69;
  __int16 v70;
  nw_protocol *v71;
  __int16 v72;
  char *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v4 = p_output_handler;
    v5 = v4;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v6 = *((_QWORD *)v4 + 1);
      if (!v6)
      {
        __nwlog_obj();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v67 = "nw_protocol_implementation_get_parameters";
        v21 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v65 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v21, type, &v65))
          goto LABEL_137;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v25 = type[0];
          if (os_log_type_enabled(v22, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_protocol_implementation_get_parameters";
            _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_136;
        }
        if (v65 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v47 = type[0];
          if (os_log_type_enabled(v22, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_protocol_implementation_get_parameters";
            _os_log_impl(&dword_182FBE000, v22, v47, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_136;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v35 = type[0];
        v36 = os_log_type_enabled(v22, type[0]);
        if (!backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_protocol_implementation_get_parameters";
            _os_log_impl(&dword_182FBE000, v22, v35, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_136;
        }
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v67 = "nw_protocol_implementation_get_parameters";
          v68 = 2082;
          v69 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v35, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_62;
      }
      if (!*(_QWORD *)(v6 + 80))
      {
        __nwlog_obj();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v67 = "nw_protocol_implementation_get_parameters";
        v21 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v65 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v21, type, &v65))
          goto LABEL_137;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v27 = type[0];
          if (os_log_type_enabled(v22, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_protocol_implementation_get_parameters";
            _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_136;
        }
        if (v65 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v50 = type[0];
          if (os_log_type_enabled(v22, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_protocol_implementation_get_parameters";
            _os_log_impl(&dword_182FBE000, v22, v50, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_136;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v37 = type[0];
        v38 = os_log_type_enabled(v22, type[0]);
        if (!backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_protocol_implementation_get_parameters";
            _os_log_impl(&dword_182FBE000, v22, v37, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_136;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          v67 = "nw_protocol_implementation_get_parameters";
          v68 = 2082;
          v69 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v37, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_62;
      }
      if (*((_QWORD *)v4 + 40))
      {
        v7 = (void *)*((_QWORD *)v4 + 43);
LABEL_11:
        v8 = v7;
LABEL_12:

        return v8;
      }
      if (*(_DWORD *)(v6 + 64) == 3)
      {
        v7 = (void *)*((_QWORD *)v4 + 6);
        goto LABEL_11;
      }
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        v11 = default_input_handler->handle;
        if (v11 == &nw_protocol_ref_counted_handle)
        {
          callbacks = default_input_handler[1].callbacks;
          if (callbacks)
            default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
          v12 = -1;
        }
        else
        {
          v12 = 0;
        }
        *(_QWORD *)type = default_input_handler;
        v64 = v12;
        v14 = default_input_handler->callbacks;
        if (v14)
        {
          get_parameters = (void (*)(nw_protocol *))v14->get_parameters;
          if (get_parameters)
          {
            get_parameters(default_input_handler);
            v8 = (id)objc_claimAutoreleasedReturnValue();
            if (v11 != &nw_protocol_ref_counted_handle)
              goto LABEL_12;
LABEL_22:
            nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            goto LABEL_12;
          }
        }
        __nwlog_obj();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        name = default_input_handler->identifier->name;
        *(_DWORD *)buf = 136446722;
        v67 = "__nw_protocol_get_parameters";
        if (!name)
          name = "invalid";
        v68 = 2082;
        v69 = (void *)name;
        v70 = 2048;
        v61 = default_input_handler;
        v71 = default_input_handler;
        v41 = (char *)_os_log_send_and_compose_impl();

        v65 = OS_LOG_TYPE_ERROR;
        v62 = 0;
        if (__nwlog_fault(v41, &v65, &v62))
        {
          if (v65 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v42 = objc_claimAutoreleasedReturnValue();
            v43 = v65;
            if (os_log_type_enabled(v42, v65))
            {
              v44 = v61->identifier->name;
              if (!v44)
                v44 = "invalid";
              *(_DWORD *)buf = 136446722;
              v67 = "__nw_protocol_get_parameters";
              v68 = 2082;
              v69 = (void *)v44;
              v70 = 2048;
              v71 = v61;
              _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback", buf, 0x20u);
            }
LABEL_126:

            goto LABEL_127;
          }
          if (!v62)
          {
            __nwlog_obj();
            v42 = objc_claimAutoreleasedReturnValue();
            v57 = v65;
            if (os_log_type_enabled(v42, v65))
            {
              v58 = v61->identifier->name;
              if (!v58)
                v58 = "invalid";
              *(_DWORD *)buf = 136446722;
              v67 = "__nw_protocol_get_parameters";
              v68 = 2082;
              v69 = (void *)v58;
              v70 = 2048;
              v71 = v61;
              _os_log_impl(&dword_182FBE000, v42, v57, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded", buf, 0x20u);
            }
            goto LABEL_126;
          }
          v51 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v42 = objc_claimAutoreleasedReturnValue();
          v52 = v65;
          v53 = os_log_type_enabled(v42, v65);
          if (!v51)
          {
            if (v53)
            {
              v59 = v61->identifier->name;
              if (!v59)
                v59 = "invalid";
              *(_DWORD *)buf = 136446722;
              v67 = "__nw_protocol_get_parameters";
              v68 = 2082;
              v69 = (void *)v59;
              v70 = 2048;
              v71 = v61;
              _os_log_impl(&dword_182FBE000, v42, v52, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace", buf, 0x20u);
            }
            goto LABEL_126;
          }
          if (v53)
          {
            v54 = v61->identifier->name;
            if (!v54)
              v54 = "invalid";
            *(_DWORD *)buf = 136446978;
            v67 = "__nw_protocol_get_parameters";
            v68 = 2082;
            v69 = (void *)v54;
            v70 = 2048;
            v71 = v61;
            v72 = 2082;
            v73 = v51;
            _os_log_impl(&dword_182FBE000, v42, v52, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v51);
        }
LABEL_127:
        if (v41)
          free(v41);
        v8 = 0;
        if (v11 != &nw_protocol_ref_counted_handle)
          goto LABEL_12;
        goto LABEL_22;
      }
      __nwlog_obj();
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v67 = "__nw_protocol_get_parameters";
      v21 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v65 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v21, type, &v65))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v49 = type[0];
          if (os_log_type_enabled(v22, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "__nw_protocol_get_parameters";
            _os_log_impl(&dword_182FBE000, v22, v49, "%{public}s called with null protocol", buf, 0xCu);
          }
LABEL_136:

          goto LABEL_137;
        }
        if (v65 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v60 = type[0];
          if (os_log_type_enabled(v22, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "__nw_protocol_get_parameters";
            _os_log_impl(&dword_182FBE000, v22, v60, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_136;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v55 = type[0];
        v56 = os_log_type_enabled(v22, type[0]);
        if (!backtrace_string)
        {
          if (v56)
          {
            *(_DWORD *)buf = 136446210;
            v67 = "__nw_protocol_get_parameters";
            _os_log_impl(&dword_182FBE000, v22, v55, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }
          goto LABEL_136;
        }
        if (v56)
        {
          *(_DWORD *)buf = 136446466;
          v67 = "__nw_protocol_get_parameters";
          v68 = 2082;
          v69 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v55, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_62:

        free(backtrace_string);
        if (!v21)
          goto LABEL_139;
        goto LABEL_138;
      }
    }
    else
    {
      __nwlog_obj();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v67 = "nw_protocol_implementation_get_parameters";
      v21 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v65 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v21, type, &v65))
        goto LABEL_137;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_protocol_implementation_get_parameters";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_136;
      }
      if (v65 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v46 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_protocol_implementation_get_parameters";
          _os_log_impl(&dword_182FBE000, v22, v46, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_136;
      }
      v31 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v32 = type[0];
      v33 = os_log_type_enabled(v22, type[0]);
      if (!v31)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_protocol_implementation_get_parameters";
          _os_log_impl(&dword_182FBE000, v22, v32, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_136;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        v67 = "nw_protocol_implementation_get_parameters";
        v68 = 2082;
        v69 = v31;
        _os_log_impl(&dword_182FBE000, v22, v32, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v31);
    }
LABEL_137:
    if (!v21)
    {
LABEL_139:
      v8 = 0;
      goto LABEL_12;
    }
LABEL_138:
    free(v21);
    goto LABEL_139;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v67 = "nw_protocol_implementation_get_parameters";
  v17 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v65 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v17, type, &v65))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type[0];
      if (os_log_type_enabled(v18, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v67 = "nw_protocol_implementation_get_parameters";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v65)
    {
      v28 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v29 = type[0];
      v30 = os_log_type_enabled(v18, type[0]);
      if (v28)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          v67 = "nw_protocol_implementation_get_parameters";
          v68 = 2082;
          v69 = v28;
          _os_log_impl(&dword_182FBE000, v18, v29, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v28);
        goto LABEL_100;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v67 = "nw_protocol_implementation_get_parameters";
        _os_log_impl(&dword_182FBE000, v18, v29, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v45 = type[0];
      if (os_log_type_enabled(v18, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v67 = "nw_protocol_implementation_get_parameters";
        _os_log_impl(&dword_182FBE000, v18, v45, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_100:
  if (v17)
    free(v17);
  return 0;
}

id nw_protocol_implementation_get_local(nw_protocol *a1)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t some_node;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(void);
  void *v13;
  char v14;
  nw_protocol *default_input_handler;
  void *v16;
  char v17;
  NSObject *v18;
  nw_protocol_callbacks *callbacks;
  nw_protocol_callbacks *v20;
  void (*get_local_endpoint)(nw_protocol *);
  uint64_t v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  void *v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  char *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  char *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  char *backtrace_string;
  os_log_type_t v42;
  _BOOL4 v43;
  os_log_type_t v44;
  _BOOL4 v45;
  void *v46;
  const char *name;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  const char *v51;
  os_log_type_t v52;
  os_log_type_t v53;
  os_log_type_t v54;
  void *v55;
  os_log_type_t v56;
  os_log_type_t v57;
  char *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  const char *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  os_log_type_t v64;
  const char *v65;
  const char *v66;
  os_log_type_t v67;
  nw_protocol *v68;
  char v69;
  os_log_type_t type[8];
  char v71;
  os_log_type_t v72;
  _BYTE buf[12];
  __int16 v74;
  char *v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  char *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v4 = p_output_handler;
    v5 = v4;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v6 = *((_QWORD *)v4 + 1);
      if (!v6)
      {
        __nwlog_obj();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
        v28 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v72 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v28, type, &v72))
          goto LABEL_151;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v32 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
            _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v72 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v54 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
            _os_log_impl(&dword_182FBE000, v29, v54, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_150;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v42 = type[0];
        v43 = os_log_type_enabled(v29, type[0]);
        if (!backtrace_string)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
            _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
          v74 = 2082;
          v75 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_76;
      }
      if (!*(_QWORD *)(v6 + 80))
      {
        __nwlog_obj();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
        v28 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v72 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v28, type, &v72))
          goto LABEL_151;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v34 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
            _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v72 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v57 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
            _os_log_impl(&dword_182FBE000, v29, v57, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_150;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v44 = type[0];
        v45 = os_log_type_enabled(v29, type[0]);
        if (!backtrace_string)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
            _os_log_impl(&dword_182FBE000, v29, v44, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
          v74 = 2082;
          v75 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v44, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_76;
      }
      if (*((_QWORD *)v4 + 40))
      {
        v7 = *((id *)v4 + 42);
LABEL_9:

        return v7;
      }
      if (*(_DWORD *)(v6 + 64) == 3)
      {
        some_node = nw_hash_table_get_some_node(*((os_unfair_lock_s **)v4 + 29));
        if (some_node)
        {
          v10 = *(_QWORD **)(some_node + 16);
          if (v10)
          {
            v11 = v10[3];
            if (v11)
            {
              v12 = *(void (**)(void))(v11 + 128);
              if (v12)
              {
                v13 = (void *)v10[5];
                if (v13 == &nw_protocol_ref_counted_handle)
                {
                  v22 = v10[11];
                  if (v22)
                    v10[11] = v22 + 1;
                  v14 = -1;
                }
                else
                {
                  v14 = 0;
                }
                *(_QWORD *)buf = v10;
                buf[8] = v14;
                v12();
                v7 = (id)objc_claimAutoreleasedReturnValue();
                if (v13 == &nw_protocol_ref_counted_handle)
                  nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                goto LABEL_9;
              }
            }
          }
        }
        else if ((v5[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v18 = (id)gLogObj;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
            v74 = 2082;
            v75 = v5 + 407;
            v76 = 2080;
            v77 = " ";
            _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to find any flow", buf, 0x20u);
          }

        }
        goto LABEL_24;
      }
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        v16 = default_input_handler->handle;
        if (v16 == &nw_protocol_ref_counted_handle)
        {
          callbacks = default_input_handler[1].callbacks;
          if (callbacks)
            default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
          v17 = -1;
        }
        else
        {
          v17 = 0;
        }
        *(_QWORD *)type = default_input_handler;
        v71 = v17;
        v20 = default_input_handler->callbacks;
        if (v20)
        {
          get_local_endpoint = (void (*)(nw_protocol *))v20->get_local_endpoint;
          if (get_local_endpoint)
          {
            get_local_endpoint(default_input_handler);
            v7 = (id)objc_claimAutoreleasedReturnValue();
            if (v16 != &nw_protocol_ref_counted_handle)
              goto LABEL_9;
LABEL_31:
            nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            goto LABEL_9;
          }
        }
        __nwlog_obj();
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        name = default_input_handler->identifier->name;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "__nw_protocol_get_local_endpoint";
        if (!name)
          name = "invalid";
        v74 = 2082;
        v75 = (char *)name;
        v76 = 2048;
        v68 = default_input_handler;
        v77 = (const char *)default_input_handler;
        v48 = (char *)_os_log_send_and_compose_impl();

        v72 = OS_LOG_TYPE_ERROR;
        v69 = 0;
        if (__nwlog_fault(v48, &v72, &v69))
        {
          if (v72 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v49 = objc_claimAutoreleasedReturnValue();
            v50 = v72;
            if (os_log_type_enabled(v49, v72))
            {
              v51 = v68->identifier->name;
              if (!v51)
                v51 = "invalid";
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_get_local_endpoint";
              v74 = 2082;
              v75 = (char *)v51;
              v76 = 2048;
              v77 = (const char *)v68;
              _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback", buf, 0x20u);
            }
LABEL_140:

            goto LABEL_141;
          }
          if (!v69)
          {
            __nwlog_obj();
            v49 = objc_claimAutoreleasedReturnValue();
            v64 = v72;
            if (os_log_type_enabled(v49, v72))
            {
              v65 = v68->identifier->name;
              if (!v65)
                v65 = "invalid";
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_get_local_endpoint";
              v74 = 2082;
              v75 = (char *)v65;
              v76 = 2048;
              v77 = (const char *)v68;
              _os_log_impl(&dword_182FBE000, v49, v64, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, backtrace limit exceeded", buf, 0x20u);
            }
            goto LABEL_140;
          }
          v58 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v49 = objc_claimAutoreleasedReturnValue();
          v59 = v72;
          v60 = os_log_type_enabled(v49, v72);
          if (!v58)
          {
            if (v60)
            {
              v66 = v68->identifier->name;
              if (!v66)
                v66 = "invalid";
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_get_local_endpoint";
              v74 = 2082;
              v75 = (char *)v66;
              v76 = 2048;
              v77 = (const char *)v68;
              _os_log_impl(&dword_182FBE000, v49, v59, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, no backtrace", buf, 0x20u);
            }
            goto LABEL_140;
          }
          if (v60)
          {
            v61 = v68->identifier->name;
            if (!v61)
              v61 = "invalid";
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_local_endpoint";
            v74 = 2082;
            v75 = (char *)v61;
            v76 = 2048;
            v77 = (const char *)v68;
            v78 = 2082;
            v79 = v58;
            _os_log_impl(&dword_182FBE000, v49, v59, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v58);
        }
LABEL_141:
        if (v48)
          free(v48);
        v7 = 0;
        if (v16 != &nw_protocol_ref_counted_handle)
          goto LABEL_9;
        goto LABEL_31;
      }
      __nwlog_obj();
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "__nw_protocol_get_local_endpoint";
      v28 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v72 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v28, type, &v72))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v56 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_local_endpoint";
            _os_log_impl(&dword_182FBE000, v29, v56, "%{public}s called with null protocol", buf, 0xCu);
          }
LABEL_150:

          goto LABEL_151;
        }
        if (v72 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v67 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_local_endpoint";
            _os_log_impl(&dword_182FBE000, v29, v67, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_150;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v62 = type[0];
        v63 = os_log_type_enabled(v29, type[0]);
        if (!backtrace_string)
        {
          if (v63)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_local_endpoint";
            _os_log_impl(&dword_182FBE000, v29, v62, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v63)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "__nw_protocol_get_local_endpoint";
          v74 = 2082;
          v75 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v62, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_76:

        free(backtrace_string);
        if (!v28)
          goto LABEL_24;
        goto LABEL_152;
      }
    }
    else
    {
      __nwlog_obj();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
      v28 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v72 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v28, type, &v72))
        goto LABEL_151;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v30 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
          _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_150;
      }
      if (v72 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v53 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
          _os_log_impl(&dword_182FBE000, v29, v53, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_150;
      }
      v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v39 = type[0];
      v40 = os_log_type_enabled(v29, type[0]);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
          _os_log_impl(&dword_182FBE000, v29, v39, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_150;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
        v74 = 2082;
        v75 = v38;
        _os_log_impl(&dword_182FBE000, v29, v39, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v38);
    }
LABEL_151:
    if (!v28)
    {
LABEL_24:
      v7 = 0;
      goto LABEL_9;
    }
LABEL_152:
    free(v28);
    goto LABEL_24;
  }
  __nwlog_obj();
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
  v24 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v72 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v24, type, &v72))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v72)
    {
      v35 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v36 = type[0];
      v37 = os_log_type_enabled(v25, type[0]);
      if (v35)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
          v74 = 2082;
          v75 = v35;
          _os_log_impl(&dword_182FBE000, v25, v36, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v35);
        goto LABEL_114;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
        _os_log_impl(&dword_182FBE000, v25, v36, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v52 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_local";
        _os_log_impl(&dword_182FBE000, v25, v52, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_114:
  if (v24)
    free(v24);
  return 0;
}

id nw_protocol_implementation_get_remote(nw_protocol *a1)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t some_node;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(void);
  void *v13;
  char v14;
  nw_protocol *default_input_handler;
  void *v16;
  char v17;
  NSObject *v18;
  nw_protocol_callbacks *callbacks;
  nw_protocol_callbacks *v20;
  void (*get_remote_endpoint)(nw_protocol *);
  uint64_t v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  void *v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  char *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  char *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  char *backtrace_string;
  os_log_type_t v42;
  _BOOL4 v43;
  os_log_type_t v44;
  _BOOL4 v45;
  void *v46;
  const char *name;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  const char *v51;
  os_log_type_t v52;
  os_log_type_t v53;
  os_log_type_t v54;
  void *v55;
  os_log_type_t v56;
  os_log_type_t v57;
  char *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  const char *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  os_log_type_t v64;
  const char *v65;
  const char *v66;
  os_log_type_t v67;
  nw_protocol *v68;
  char v69;
  os_log_type_t type[8];
  char v71;
  os_log_type_t v72;
  _BYTE buf[12];
  __int16 v74;
  char *v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  char *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v4 = p_output_handler;
    v5 = v4;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v6 = *((_QWORD *)v4 + 1);
      if (!v6)
      {
        __nwlog_obj();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
        v28 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v72 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v28, type, &v72))
          goto LABEL_151;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v32 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
            _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v72 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v54 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
            _os_log_impl(&dword_182FBE000, v29, v54, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_150;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v42 = type[0];
        v43 = os_log_type_enabled(v29, type[0]);
        if (!backtrace_string)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
            _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
          v74 = 2082;
          v75 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_76;
      }
      if (!*(_QWORD *)(v6 + 80))
      {
        __nwlog_obj();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
        v28 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v72 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v28, type, &v72))
          goto LABEL_151;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v34 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
            _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v72 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v57 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
            _os_log_impl(&dword_182FBE000, v29, v57, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_150;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v44 = type[0];
        v45 = os_log_type_enabled(v29, type[0]);
        if (!backtrace_string)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
            _os_log_impl(&dword_182FBE000, v29, v44, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
          v74 = 2082;
          v75 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v44, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_76;
      }
      if (*((_QWORD *)v4 + 40))
      {
        v7 = *((id *)v4 + 41);
LABEL_9:

        return v7;
      }
      if (*(_DWORD *)(v6 + 64) == 3)
      {
        some_node = nw_hash_table_get_some_node(*((os_unfair_lock_s **)v4 + 29));
        if (some_node)
        {
          v10 = *(_QWORD **)(some_node + 16);
          if (v10)
          {
            v11 = v10[3];
            if (v11)
            {
              v12 = *(void (**)(void))(v11 + 136);
              if (v12)
              {
                v13 = (void *)v10[5];
                if (v13 == &nw_protocol_ref_counted_handle)
                {
                  v22 = v10[11];
                  if (v22)
                    v10[11] = v22 + 1;
                  v14 = -1;
                }
                else
                {
                  v14 = 0;
                }
                *(_QWORD *)buf = v10;
                buf[8] = v14;
                v12();
                v7 = (id)objc_claimAutoreleasedReturnValue();
                if (v13 == &nw_protocol_ref_counted_handle)
                  nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                goto LABEL_9;
              }
            }
          }
        }
        else if ((v5[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v18 = (id)gLogObj;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
            v74 = 2082;
            v75 = v5 + 407;
            v76 = 2080;
            v77 = " ";
            _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to find any flow", buf, 0x20u);
          }

        }
        goto LABEL_24;
      }
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        v16 = default_input_handler->handle;
        if (v16 == &nw_protocol_ref_counted_handle)
        {
          callbacks = default_input_handler[1].callbacks;
          if (callbacks)
            default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
          v17 = -1;
        }
        else
        {
          v17 = 0;
        }
        *(_QWORD *)type = default_input_handler;
        v71 = v17;
        v20 = default_input_handler->callbacks;
        if (v20)
        {
          get_remote_endpoint = (void (*)(nw_protocol *))v20->get_remote_endpoint;
          if (get_remote_endpoint)
          {
            get_remote_endpoint(default_input_handler);
            v7 = (id)objc_claimAutoreleasedReturnValue();
            if (v16 != &nw_protocol_ref_counted_handle)
              goto LABEL_9;
LABEL_31:
            nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            goto LABEL_9;
          }
        }
        __nwlog_obj();
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        name = default_input_handler->identifier->name;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "__nw_protocol_get_remote_endpoint";
        if (!name)
          name = "invalid";
        v74 = 2082;
        v75 = (char *)name;
        v76 = 2048;
        v68 = default_input_handler;
        v77 = (const char *)default_input_handler;
        v48 = (char *)_os_log_send_and_compose_impl();

        v72 = OS_LOG_TYPE_ERROR;
        v69 = 0;
        if (__nwlog_fault(v48, &v72, &v69))
        {
          if (v72 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v49 = objc_claimAutoreleasedReturnValue();
            v50 = v72;
            if (os_log_type_enabled(v49, v72))
            {
              v51 = v68->identifier->name;
              if (!v51)
                v51 = "invalid";
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_get_remote_endpoint";
              v74 = 2082;
              v75 = (char *)v51;
              v76 = 2048;
              v77 = (const char *)v68;
              _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback", buf, 0x20u);
            }
LABEL_140:

            goto LABEL_141;
          }
          if (!v69)
          {
            __nwlog_obj();
            v49 = objc_claimAutoreleasedReturnValue();
            v64 = v72;
            if (os_log_type_enabled(v49, v72))
            {
              v65 = v68->identifier->name;
              if (!v65)
                v65 = "invalid";
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_get_remote_endpoint";
              v74 = 2082;
              v75 = (char *)v65;
              v76 = 2048;
              v77 = (const char *)v68;
              _os_log_impl(&dword_182FBE000, v49, v64, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded", buf, 0x20u);
            }
            goto LABEL_140;
          }
          v58 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v49 = objc_claimAutoreleasedReturnValue();
          v59 = v72;
          v60 = os_log_type_enabled(v49, v72);
          if (!v58)
          {
            if (v60)
            {
              v66 = v68->identifier->name;
              if (!v66)
                v66 = "invalid";
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_get_remote_endpoint";
              v74 = 2082;
              v75 = (char *)v66;
              v76 = 2048;
              v77 = (const char *)v68;
              _os_log_impl(&dword_182FBE000, v49, v59, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace", buf, 0x20u);
            }
            goto LABEL_140;
          }
          if (v60)
          {
            v61 = v68->identifier->name;
            if (!v61)
              v61 = "invalid";
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_remote_endpoint";
            v74 = 2082;
            v75 = (char *)v61;
            v76 = 2048;
            v77 = (const char *)v68;
            v78 = 2082;
            v79 = v58;
            _os_log_impl(&dword_182FBE000, v49, v59, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v58);
        }
LABEL_141:
        if (v48)
          free(v48);
        v7 = 0;
        if (v16 != &nw_protocol_ref_counted_handle)
          goto LABEL_9;
        goto LABEL_31;
      }
      __nwlog_obj();
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "__nw_protocol_get_remote_endpoint";
      v28 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v72 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v28, type, &v72))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v56 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_remote_endpoint";
            _os_log_impl(&dword_182FBE000, v29, v56, "%{public}s called with null protocol", buf, 0xCu);
          }
LABEL_150:

          goto LABEL_151;
        }
        if (v72 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v67 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_remote_endpoint";
            _os_log_impl(&dword_182FBE000, v29, v67, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_150;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v62 = type[0];
        v63 = os_log_type_enabled(v29, type[0]);
        if (!backtrace_string)
        {
          if (v63)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_remote_endpoint";
            _os_log_impl(&dword_182FBE000, v29, v62, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v63)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "__nw_protocol_get_remote_endpoint";
          v74 = 2082;
          v75 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v62, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_76:

        free(backtrace_string);
        if (!v28)
          goto LABEL_24;
        goto LABEL_152;
      }
    }
    else
    {
      __nwlog_obj();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
      v28 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v72 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v28, type, &v72))
        goto LABEL_151;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v30 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
          _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_150;
      }
      if (v72 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v53 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
          _os_log_impl(&dword_182FBE000, v29, v53, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_150;
      }
      v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v39 = type[0];
      v40 = os_log_type_enabled(v29, type[0]);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
          _os_log_impl(&dword_182FBE000, v29, v39, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_150;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
        v74 = 2082;
        v75 = v38;
        _os_log_impl(&dword_182FBE000, v29, v39, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v38);
    }
LABEL_151:
    if (!v28)
    {
LABEL_24:
      v7 = 0;
      goto LABEL_9;
    }
LABEL_152:
    free(v28);
    goto LABEL_24;
  }
  __nwlog_obj();
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
  v24 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v72 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v24, type, &v72))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v72)
    {
      v35 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v36 = type[0];
      v37 = os_log_type_enabled(v25, type[0]);
      if (v35)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
          v74 = 2082;
          v75 = v35;
          _os_log_impl(&dword_182FBE000, v25, v36, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v35);
        goto LABEL_114;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
        _os_log_impl(&dword_182FBE000, v25, v36, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v52 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_remote";
        _os_log_impl(&dword_182FBE000, v25, v52, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_114:
  if (v24)
    free(v24);
  return 0;
}

id nw_protocol_implementation_get_path(nw_protocol *a1)
{
  void *handle;
  nw_protocol **p_output_handler;
  char *v4;
  char *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t some_node;
  _QWORD *v11;
  uint64_t v12;
  void (*v13)(void);
  void *v14;
  char v15;
  nw_protocol *default_input_handler;
  void *v17;
  char v18;
  NSObject *v19;
  nw_protocol_callbacks *callbacks;
  nw_protocol_callbacks *v21;
  void (*get_path)(nw_protocol *);
  uint64_t v23;
  void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  void *v34;
  os_log_type_t v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  char *backtrace_string;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  _BOOL4 v46;
  void *v47;
  const char *name;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  const char *v52;
  os_log_type_t v53;
  os_log_type_t v54;
  os_log_type_t v55;
  void *v56;
  os_log_type_t v57;
  os_log_type_t v58;
  char *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  const char *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  os_log_type_t v65;
  const char *v66;
  const char *v67;
  os_log_type_t v68;
  nw_protocol *v69;
  char v70;
  os_log_type_t type[8];
  char v72;
  os_log_type_t v73;
  _BYTE buf[12];
  __int16 v75;
  char *v76;
  __int16 v77;
  const char *v78;
  __int16 v79;
  char *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle)
      p_output_handler = 0;
    v4 = p_output_handler;
    v5 = v4;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      v6 = *((_QWORD *)v4 + 1);
      if (!v6)
      {
        __nwlog_obj();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
        v29 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v73 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v29, type, &v73))
          goto LABEL_151;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v33 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
            _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v73 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v55 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
            _os_log_impl(&dword_182FBE000, v30, v55, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_150;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v43 = type[0];
        v44 = os_log_type_enabled(v30, type[0]);
        if (!backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
            _os_log_impl(&dword_182FBE000, v30, v43, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
          v75 = 2082;
          v76 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v30, v43, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_76;
      }
      if (!*(_QWORD *)(v6 + 80))
      {
        __nwlog_obj();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
        v29 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v73 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v29, type, &v73))
          goto LABEL_151;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v35 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
            _os_log_impl(&dword_182FBE000, v30, v35, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v73 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v58 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
            _os_log_impl(&dword_182FBE000, v30, v58, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_150;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v45 = type[0];
        v46 = os_log_type_enabled(v30, type[0]);
        if (!backtrace_string)
        {
          if (v46)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
            _os_log_impl(&dword_182FBE000, v30, v45, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
          v75 = 2082;
          v76 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v30, v45, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_76;
      }
      v7 = (void *)*((_QWORD *)v4 + 36);
      if (v7)
      {
        v8 = v7;
LABEL_9:

        return v8;
      }
      if (*(_DWORD *)(v6 + 64) == 3)
      {
        some_node = nw_hash_table_get_some_node(*((os_unfair_lock_s **)v4 + 29));
        if (some_node)
        {
          v11 = *(_QWORD **)(some_node + 16);
          if (v11)
          {
            v12 = v11[3];
            if (v12)
            {
              v13 = *(void (**)(void))(v12 + 120);
              if (v13)
              {
                v14 = (void *)v11[5];
                if (v14 == &nw_protocol_ref_counted_handle)
                {
                  v23 = v11[11];
                  if (v23)
                    v11[11] = v23 + 1;
                  v15 = -1;
                }
                else
                {
                  v15 = 0;
                }
                *(_QWORD *)buf = v11;
                buf[8] = v15;
                v13();
                v8 = (id)objc_claimAutoreleasedReturnValue();
                if (v14 == &nw_protocol_ref_counted_handle)
                  nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                goto LABEL_9;
              }
            }
          }
        }
        else if ((v5[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
            v75 = 2082;
            v76 = v5 + 407;
            v77 = 2080;
            v78 = " ";
            _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to find any flow", buf, 0x20u);
          }

        }
        goto LABEL_24;
      }
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        v17 = default_input_handler->handle;
        if (v17 == &nw_protocol_ref_counted_handle)
        {
          callbacks = default_input_handler[1].callbacks;
          if (callbacks)
            default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
          v18 = -1;
        }
        else
        {
          v18 = 0;
        }
        *(_QWORD *)type = default_input_handler;
        v72 = v18;
        v21 = default_input_handler->callbacks;
        if (v21)
        {
          get_path = (void (*)(nw_protocol *))v21->get_path;
          if (get_path)
          {
            get_path(default_input_handler);
            v8 = (id)objc_claimAutoreleasedReturnValue();
            if (v17 != &nw_protocol_ref_counted_handle)
              goto LABEL_9;
LABEL_31:
            nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            goto LABEL_9;
          }
        }
        __nwlog_obj();
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        name = default_input_handler->identifier->name;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "__nw_protocol_get_path";
        if (!name)
          name = "invalid";
        v75 = 2082;
        v76 = (char *)name;
        v77 = 2048;
        v69 = default_input_handler;
        v78 = (const char *)default_input_handler;
        v49 = (char *)_os_log_send_and_compose_impl();

        v73 = OS_LOG_TYPE_ERROR;
        v70 = 0;
        if (__nwlog_fault(v49, &v73, &v70))
        {
          if (v73 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v50 = objc_claimAutoreleasedReturnValue();
            v51 = v73;
            if (os_log_type_enabled(v50, v73))
            {
              v52 = v69->identifier->name;
              if (!v52)
                v52 = "invalid";
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_get_path";
              v75 = 2082;
              v76 = (char *)v52;
              v77 = 2048;
              v78 = (const char *)v69;
              _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s protocol %{public}s (%p) has invalid get_path callback", buf, 0x20u);
            }
LABEL_140:

            goto LABEL_141;
          }
          if (!v70)
          {
            __nwlog_obj();
            v50 = objc_claimAutoreleasedReturnValue();
            v65 = v73;
            if (os_log_type_enabled(v50, v73))
            {
              v66 = v69->identifier->name;
              if (!v66)
                v66 = "invalid";
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_get_path";
              v75 = 2082;
              v76 = (char *)v66;
              v77 = 2048;
              v78 = (const char *)v69;
              _os_log_impl(&dword_182FBE000, v50, v65, "%{public}s protocol %{public}s (%p) has invalid get_path callback, backtrace limit exceeded", buf, 0x20u);
            }
            goto LABEL_140;
          }
          v59 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v50 = objc_claimAutoreleasedReturnValue();
          v60 = v73;
          v61 = os_log_type_enabled(v50, v73);
          if (!v59)
          {
            if (v61)
            {
              v67 = v69->identifier->name;
              if (!v67)
                v67 = "invalid";
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_get_path";
              v75 = 2082;
              v76 = (char *)v67;
              v77 = 2048;
              v78 = (const char *)v69;
              _os_log_impl(&dword_182FBE000, v50, v60, "%{public}s protocol %{public}s (%p) has invalid get_path callback, no backtrace", buf, 0x20u);
            }
            goto LABEL_140;
          }
          if (v61)
          {
            v62 = v69->identifier->name;
            if (!v62)
              v62 = "invalid";
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_path";
            v75 = 2082;
            v76 = (char *)v62;
            v77 = 2048;
            v78 = (const char *)v69;
            v79 = 2082;
            v80 = v59;
            _os_log_impl(&dword_182FBE000, v50, v60, "%{public}s protocol %{public}s (%p) has invalid get_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v59);
        }
LABEL_141:
        if (v49)
          free(v49);
        v8 = 0;
        if (v17 != &nw_protocol_ref_counted_handle)
          goto LABEL_9;
        goto LABEL_31;
      }
      __nwlog_obj();
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "__nw_protocol_get_path";
      v29 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v73 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v29, type, &v73))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v57 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_path";
            _os_log_impl(&dword_182FBE000, v30, v57, "%{public}s called with null protocol", buf, 0xCu);
          }
LABEL_150:

          goto LABEL_151;
        }
        if (v73 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v68 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_path";
            _os_log_impl(&dword_182FBE000, v30, v68, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_150;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v63 = type[0];
        v64 = os_log_type_enabled(v30, type[0]);
        if (!backtrace_string)
        {
          if (v64)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_path";
            _os_log_impl(&dword_182FBE000, v30, v63, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (v64)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "__nw_protocol_get_path";
          v75 = 2082;
          v76 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v30, v63, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_76:

        free(backtrace_string);
        if (!v29)
          goto LABEL_24;
        goto LABEL_152;
      }
    }
    else
    {
      __nwlog_obj();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
      v29 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v73 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v29, type, &v73))
        goto LABEL_151;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = type[0];
        if (os_log_type_enabled(v30, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_150;
      }
      if (v73 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v54 = type[0];
        if (os_log_type_enabled(v30, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
          _os_log_impl(&dword_182FBE000, v30, v54, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_150;
      }
      v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v40 = type[0];
      v41 = os_log_type_enabled(v30, type[0]);
      if (!v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
          _os_log_impl(&dword_182FBE000, v30, v40, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_150;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
        v75 = 2082;
        v76 = v39;
        _os_log_impl(&dword_182FBE000, v30, v40, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v39);
    }
LABEL_151:
    if (!v29)
    {
LABEL_24:
      v8 = 0;
      goto LABEL_9;
    }
LABEL_152:
    free(v29);
    goto LABEL_24;
  }
  __nwlog_obj();
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
  v25 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v73 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v25, type, &v73))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = type[0];
      if (os_log_type_enabled(v26, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
        _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v73)
    {
      v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v37 = type[0];
      v38 = os_log_type_enabled(v26, type[0]);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
          v75 = 2082;
          v76 = v36;
          _os_log_impl(&dword_182FBE000, v26, v37, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
        goto LABEL_114;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
        _os_log_impl(&dword_182FBE000, v26, v37, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v53 = type[0];
      if (os_log_type_enabled(v26, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_path";
        _os_log_impl(&dword_182FBE000, v26, v53, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_114:
  if (v25)
    free(v25);
  return 0;
}

uint64_t nw_protocol_flow_for_protocol(NWConcrete_nw_protocol_instance *a1, uint64_t a2)
{
  NWConcrete_nw_protocol_instance *v3;

  v3 = a1;
  if (nw_protocol_definition_get_message_is_stream(v3->parent_definition)
    && *(_QWORD *)&v3[-1].log_str[41] == a2)
  {
    a2 = -2;
  }

  return a2;
}

void ___ZL39nw_protocol_implementation_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  char *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  _QWORD *v9;
  int v10;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  v5 = (char *)v4[37];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZL39nw_protocol_implementation_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke_2;
  v7[3] = &unk_1E149BC50;
  v8 = v3;
  v9 = v4;
  v10 = *(_DWORD *)(a1 + 40);
  v6 = v3;
  nw_hash_table_apply(v5, (uint64_t)v7);

}

uint64_t ___ZL39nw_protocol_implementation_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t extra;

  extra = nw_hash_node_get_extra(a2);
  if (nw_interface_shallow_compare(*(void **)(a1 + 32), *(void **)(extra + 16)))
  {
    nw_hash_node_get_object(a2);
    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 80) + 224))();
  }
  return 1;
}

uint64_t ___ZL32nw_protocol_implementation_errorP11nw_protocolS0_i_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *object;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  char v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *);
  void *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  const char *v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  const char *v41;
  const char *v42;
  os_log_type_t v43;
  os_log_type_t v44;
  char v45;
  os_log_type_t v46[8];
  char v47;
  os_log_type_t type;
  os_log_type_t v49[8];
  char v50;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  _QWORD *v56;
  __int16 v57;
  char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  object = (_QWORD *)nw_hash_node_get_object(a2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    v5 = v4 - 96;
  else
    v5 = 0;
  if (object)
  {
    v6 = object;
    v7 = (void *)object[5];
    if (v7 == &nw_protocol_ref_counted_handle)
    {
      v9 = object[11];
      if (v9)
        object[11] = v9 + 1;
      v8 = -1;
    }
    else
    {
      v8 = 0;
    }
    *(_QWORD *)v49 = object;
    v50 = v8;
    if (v4)
    {
      v10 = *(void **)(v5 + 40);
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        v12 = *(_QWORD *)(v5 + 88);
        if (v12)
          *(_QWORD *)(v5 + 88) = v12 + 1;
        v11 = -1;
      }
      else
      {
        v11 = 0;
      }
      *(_QWORD *)v46 = v5;
      v47 = v11;
      v13 = object[3];
      if (v13)
      {
        v14 = *(void (**)(_QWORD *))(v13 + 56);
        if (v14)
        {
          v14(object);
LABEL_19:
          if (v10 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)v46);
LABEL_21:
          if (v7 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)v49);
          return 1;
        }
      }
      __nwlog_obj();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (const char *)v6[2];
      *(_DWORD *)buf = 136446722;
      v52 = "__nw_protocol_error";
      if (!v17)
        v17 = "invalid";
      v53 = 2082;
      v54 = (void *)v17;
      v55 = 2048;
      v56 = v6;
      v18 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v45 = 0;
      if (__nwlog_fault(v18, &type, &v45))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            v21 = (const char *)v6[2];
            if (!v21)
              v21 = "invalid";
            *(_DWORD *)buf = 136446722;
            v52 = "__nw_protocol_error";
            v53 = 2082;
            v54 = (void *)v21;
            v55 = 2048;
            v56 = v6;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s protocol %{public}s (%p) has invalid error callback", buf, 0x20u);
          }
        }
        else if (v45)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v31 = type;
          v32 = os_log_type_enabled(v19, type);
          if (backtrace_string)
          {
            if (v32)
            {
              v33 = (const char *)v6[2];
              if (!v33)
                v33 = "invalid";
              *(_DWORD *)buf = 136446978;
              v52 = "__nw_protocol_error";
              v53 = 2082;
              v54 = (void *)v33;
              v55 = 2048;
              v56 = v6;
              v57 = 2082;
              v58 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
            goto LABEL_70;
          }
          if (v32)
          {
            v42 = (const char *)v6[2];
            if (!v42)
              v42 = "invalid";
            *(_DWORD *)buf = 136446722;
            v52 = "__nw_protocol_error";
            v53 = 2082;
            v54 = (void *)v42;
            v55 = 2048;
            v56 = v6;
            _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          v40 = type;
          if (os_log_type_enabled(v19, type))
          {
            v41 = (const char *)v6[2];
            if (!v41)
              v41 = "invalid";
            *(_DWORD *)buf = 136446722;
            v52 = "__nw_protocol_error";
            v53 = 2082;
            v54 = (void *)v41;
            v55 = 2048;
            v56 = v6;
            _os_log_impl(&dword_182FBE000, v19, v40, "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded", buf, 0x20u);
          }
        }

      }
LABEL_70:
      if (v18)
        free(v18);
      goto LABEL_19;
    }
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v52 = "__nw_protocol_error";
    v27 = (char *)_os_log_send_and_compose_impl();

    v46[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v27, v46, &type))
    {
      if (v46[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = v46[0];
        if (os_log_type_enabled(v28, v46[0]))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_error";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null other_protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        v37 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v38 = v46[0];
        v39 = os_log_type_enabled(v28, v46[0]);
        if (v37)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            v52 = "__nw_protocol_error";
            v53 = 2082;
            v54 = v37;
            _os_log_impl(&dword_182FBE000, v28, v38, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v37);
          goto LABEL_86;
        }
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_error";
          _os_log_impl(&dword_182FBE000, v28, v38, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v44 = v46[0];
        if (os_log_type_enabled(v28, v46[0]))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_error";
          _os_log_impl(&dword_182FBE000, v28, v44, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_86:
    if (v27)
      free(v27);
    goto LABEL_21;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v52 = "__nw_protocol_error";
  v23 = (char *)_os_log_send_and_compose_impl();

  v49[0] = OS_LOG_TYPE_ERROR;
  v46[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v49, v46))
  {
    if (v49[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_error";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v46[0])
    {
      v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v35 = v49[0];
      v36 = os_log_type_enabled(v24, v49[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v52 = "__nw_protocol_error";
          v53 = 2082;
          v54 = v34;
          _os_log_impl(&dword_182FBE000, v24, v35, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        goto LABEL_81;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_error";
        _os_log_impl(&dword_182FBE000, v24, v35, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v43 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_error";
        _os_log_impl(&dword_182FBE000, v24, v43, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_81:
  if (v23)
    free(v23);
  return 1;
}

void sub_1834BB614(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL33nw_protocol_implementation_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *object;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  int v7;
  void *v8;
  char v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *backtrace_string;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  void *v24;
  char v25;
  os_log_type_t type;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  char v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  object = (_QWORD *)nw_hash_node_get_object(a2);
  if (object)
  {
    v4 = object[3];
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 32);
      if (v5)
      {
        v6 = *(void (**)(void))(v4 + 160);
        if (v6)
        {
          v7 = *(_DWORD *)(a1 + 56);
          v8 = (void *)object[5];
          if (v8 == &nw_protocol_ref_counted_handle)
          {
            v10 = object[11];
            if (v10)
              object[11] = v10 + 1;
            v9 = -1;
          }
          else
          {
            v9 = 0;
          }
          v29 = object;
          v30 = v9;
          v11 = *(void **)(v5 + 40);
          if (v11 == &nw_protocol_ref_counted_handle)
          {
            v13 = *(_QWORD *)(v5 + 88);
            if (v13)
              *(_QWORD *)(v5 + 88) = v13 + 1;
            v12 = -1;
          }
          else
          {
            v12 = 0;
          }
          v27 = v5;
          v28 = v12;
          if (v7)
          {
            v6();
            goto LABEL_17;
          }
          __nwlog_obj();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_notify";
          v16 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v25 = 0;
          if (__nwlog_fault(v16, &type, &v25))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v17 = objc_claimAutoreleasedReturnValue();
              v18 = type;
              if (os_log_type_enabled(v17, type))
              {
                *(_DWORD *)buf = 136446210;
                v32 = "__nw_protocol_notify";
                _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null type", buf, 0xCu);
              }

            }
            else
            {
              v24 = v8;
              if (v25)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v20 = objc_claimAutoreleasedReturnValue();
                v21 = type;
                v22 = os_log_type_enabled(v20, type);
                if (backtrace_string)
                {
                  if (v22)
                  {
                    *(_DWORD *)buf = 136446466;
                    v32 = "__nw_protocol_notify";
                    v33 = 2082;
                    v34 = backtrace_string;
                    _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  v8 = v24;
                  free(backtrace_string);
                  goto LABEL_38;
                }
                if (v22)
                {
                  *(_DWORD *)buf = 136446210;
                  v32 = "__nw_protocol_notify";
                  _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null type, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v20 = objc_claimAutoreleasedReturnValue();
                v23 = type;
                if (os_log_type_enabled(v20, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v32 = "__nw_protocol_notify";
                  _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null type, backtrace limit exceeded", buf, 0xCu);
                }
              }

              v8 = v24;
            }
          }
LABEL_38:
          if (v16)
            free(v16);
LABEL_17:
          if (v11 == &nw_protocol_ref_counted_handle)
          {
            nw::release_if_needed<nw_protocol *>(&v27);
            if (v8 != &nw_protocol_ref_counted_handle)
              return 1;
          }
          else if (v8 != &nw_protocol_ref_counted_handle)
          {
            return 1;
          }
          nw::release_if_needed<nw_protocol *>((uint64_t *)&v29);
        }
      }
    }
  }
  return 1;
}

void sub_1834BB998(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1834BB9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (v21 == v20)
    nw::release_if_needed<nw_protocol *>(&a17);
  if (v19 == v20)
    nw::release_if_needed<nw_protocol *>(&a19);
  _Unwind_Resume(exception_object);
}

void nw_protocol_implementation_read(NWConcrete_nw_protocol_instance *a1, nw_protocol *a2)
{
  NWConcrete_nw_protocol_instance *v3;
  NWConcrete_nw_protocol_instance *v4;
  char v5;
  void (*var10)(NWConcrete_nw_protocol_instance *);
  unint64_t v7;
  NWConcrete_nw_protocol_instance *v8;
  char v9;
  nw_protocol_callbacks *callbacks;
  char v11;
  uint64_t v12;
  nw_protocol_callbacks *v13;
  uint64_t (*get_input_frames)(nw_protocol *, unsigned __int16 *, uint64_t, uint64_t, uint64_t, _QWORD *);
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, nw_frame ***);
  char *flow_registration;
  void *v25;
  nw_protocol_identifier *identifier;
  char *v27;
  NSObject *v28;
  nw_protocol_identifier *v29;
  const char *v30;
  char *v31;
  const char *v32;
  void *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  char *v37;
  _BOOL4 v38;
  nw_protocol_identifier *v39;
  void *v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  NSObject *v44;
  const char *v45;
  _BOOL4 v46;
  const char *v47;
  char *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  nw_protocol_identifier *v51;
  char *v52;
  _BOOL4 v53;
  nw_protocol_identifier *v54;
  const char *v55;
  os_log_type_t v56;
  const char *v57;
  NSObject *v58;
  os_log_type_t v59;
  NSObject *v60;
  void *v61;
  char *v62;
  NSObject *v63;
  os_log_type_t v64;
  char *backtrace_string;
  os_log_type_t v66;
  _BOOL4 v67;
  os_log_type_t v68;
  os_log_type_t v69;
  os_log_type_t v70;
  char *v71;
  os_log_type_t v72;
  os_log_type_t v73;
  NSObject *v74;
  os_log_type_t v75[8];
  os_log_type_t v76;
  os_log_type_t v77;
  const char *log;
  os_log_t loga;
  NSObject *logb;
  NSObject *logc;
  os_log_type_t logd;
  _QWORD v83[4];
  NWConcrete_nw_protocol_instance *v84;
  unint64_t v85;
  _QWORD v86[2];
  char v87;
  os_log_type_t type;
  os_log_type_t v89[8];
  char v90;
  nw_protocol *v91;
  char v92;
  _BYTE buf[24];
  nw_protocol *v94;
  __int128 v95;
  unint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!a2)
  {
    __nwlog_obj();
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_implementation_read";
    v62 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v91) = 16;
    v89[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v62, &v91, v89))
    {
      if (v91 == 17)
      {
        __nwlog_obj();
        v63 = objc_claimAutoreleasedReturnValue();
        v64 = v91;
        if (os_log_type_enabled(v63, (os_log_type_t)v91))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_read";
          _os_log_impl(&dword_182FBE000, v63, v64, "%{public}s called with null output_handler", buf, 0xCu);
        }
      }
      else if (v89[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v63 = objc_claimAutoreleasedReturnValue();
        v66 = v91;
        v67 = os_log_type_enabled(v63, (os_log_type_t)v91);
        if (backtrace_string)
        {
          if (v67)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_read";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v63, v66, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_174;
        }
        if (v67)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_read";
          _os_log_impl(&dword_182FBE000, v63, v66, "%{public}s called with null output_handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v63 = objc_claimAutoreleasedReturnValue();
        v68 = v91;
        if (os_log_type_enabled(v63, (os_log_type_t)v91))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_implementation_read";
          _os_log_impl(&dword_182FBE000, v63, v68, "%{public}s called with null output_handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_174:
    if (v62)
      free(v62);
    goto LABEL_157;
  }
  if ((v3->flow_in_connected & 0x10000000) != 0)
    goto LABEL_157;
  v85 = 0;
  if (v3->flow_registration && !nw_protocol_implementation_lookup_path_by_protocol(v3, a2, &v85))
  {
    if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v60 = (id)gLogObj;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_read";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)&v4->flow_in_connected + 7;
        *(_WORD *)&buf[22] = 2080;
        v94 = (nw_protocol *)" ";
        LOWORD(v95) = 2048;
        *(_QWORD *)((char *)&v95 + 2) = a2;
        _os_log_impl(&dword_182FBE000, v60, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCould not find path state for protocol %p", buf, 0x2Au);
      }

    }
    goto LABEL_157;
  }
  v5 = BYTE4(v4->flow_in_connected);
  while (1)
  {
    BYTE4(v4->flow_in_connected) = v5 & 0xDF;
    BYTE3(v4->flow_in_connected) |= 0x10u;
    var10 = (void (*)(NWConcrete_nw_protocol_instance *))v4->parent_definition->extended_state->var10;
    if (var10)
      var10(v4);
    v7 = v85;
    v8 = v4;
    if (!v4->parent_definition->extended_state->var7)
    {
      __nwlog_obj();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_internal";
      v34 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(v91) = 16;
      v89[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v34, &v91, v89))
      {
        if (v91 == 17)
        {
          __nwlog_obj();
          v35 = objc_claimAutoreleasedReturnValue();
          v36 = v91;
          if (os_log_type_enabled(v35, (os_log_type_t)v91))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_internal";
            _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null instance->parent_definition->extended_state->handle_inbound", buf, 0xCu);
          }
        }
        else if (v89[0])
        {
          v48 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v35 = objc_claimAutoreleasedReturnValue();
          v49 = v91;
          v50 = os_log_type_enabled(v35, (os_log_type_t)v91);
          if (v48)
          {
            if (v50)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_internal";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v48;
              _os_log_impl(&dword_182FBE000, v35, v49, "%{public}s called with null instance->parent_definition->extended_state->handle_inbound, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v48);
            goto LABEL_140;
          }
          if (v50)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_internal";
            _os_log_impl(&dword_182FBE000, v35, v49, "%{public}s called with null instance->parent_definition->extended_state->handle_inbound, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v35 = objc_claimAutoreleasedReturnValue();
          v56 = v91;
          if (os_log_type_enabled(v35, (os_log_type_t)v91))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_implementation_get_input_internal";
            _os_log_impl(&dword_182FBE000, v35, v56, "%{public}s called with null instance->parent_definition->extended_state->handle_inbound, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_140:
      if (v34)
        free(v34);
      v15 = 0;
      goto LABEL_32;
    }
    v86[0] = 0;
    v86[1] = v86;
    if (a2->handle == &nw_protocol_ref_counted_handle)
    {
      callbacks = a2[1].callbacks;
      if (callbacks)
        a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
      v91 = a2;
      v9 = v92 | 1;
    }
    else
    {
      v91 = a2;
      v9 = v92 & 0xFE;
    }
    v92 = v9;
    if (*(_UNKNOWN **)&v4[-1].log_str[33] == &nw_protocol_ref_counted_handle)
    {
      v12 = *(_QWORD *)&v4[-1].log_str[81];
      if (v12)
        *(_QWORD *)&v4[-1].log_str[81] = v12 + 1;
      *(_QWORD *)v89 = (char *)v4 - 96;
      v11 = v90 | 1;
    }
    else
    {
      *(_QWORD *)v89 = (char *)v4 - 96;
      v11 = v90 & 0xFE;
    }
    v90 = v11;
    v13 = a2->callbacks;
    if (!v13
      || (get_input_frames = (uint64_t (*)(nw_protocol *, unsigned __int16 *, uint64_t, uint64_t, uint64_t, _QWORD *))v13->get_input_frames) == 0)
    {
      __nwlog_obj();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      identifier = a2->identifier;
      if (!identifier)
        identifier = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "__nw_protocol_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = identifier;
      *(_WORD *)&buf[22] = 2048;
      v94 = a2;
      log = (const char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v87 = 0;
      v27 = (char *)log;
      if (!__nwlog_fault(log, &type, &v87))
      {
LABEL_118:
        if (v27)
          free(v27);
        v15 = 0;
        if ((v11 & 1) == 0)
          goto LABEL_24;
LABEL_23:
        nw::release_if_needed<nw_protocol *>((uint64_t *)v89);
        goto LABEL_24;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v72 = type;
        if (os_log_type_enabled(v28, type))
        {
          v29 = a2->identifier;
          if (!v29)
            v29 = (nw_protocol_identifier *)"invalid";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v29;
          *(_WORD *)&buf[22] = 2048;
          v94 = a2;
          _os_log_impl(&dword_182FBE000, v28, v72, "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback", buf, 0x20u);
        }
      }
      else
      {
        if (v87)
        {
          v37 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v74 = objc_claimAutoreleasedReturnValue();
          v70 = type;
          v38 = os_log_type_enabled(v74, type);
          if (v37)
          {
            if (v38)
            {
              v39 = a2->identifier;
              if (!v39)
                v39 = (nw_protocol_identifier *)"invalid";
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "__nw_protocol_get_input_frames";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v39;
              *(_WORD *)&buf[22] = 2048;
              v94 = a2;
              LOWORD(v95) = 2082;
              *(_QWORD *)((char *)&v95 + 2) = v37;
              _os_log_impl(&dword_182FBE000, v74, v70, "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v37);
          }
          else
          {
            if (v38)
            {
              v54 = a2->identifier;
              if (!v54)
                v54 = (nw_protocol_identifier *)"invalid";
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_get_input_frames";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v54;
              *(_WORD *)&buf[22] = 2048;
              v94 = a2;
              _os_log_impl(&dword_182FBE000, v74, v70, "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, no backtrace", buf, 0x20u);
            }

          }
          goto LABEL_117;
        }
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v76 = type;
        if (os_log_type_enabled(v28, type))
        {
          v51 = a2->identifier;
          if (!v51)
            v51 = (nw_protocol_identifier *)"invalid";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v51;
          *(_WORD *)&buf[22] = 2048;
          v94 = a2;
          _os_log_impl(&dword_182FBE000, v28, v76, "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, backtrace limit exceeded", buf, 0x20u);
        }
      }

LABEL_117:
      v27 = (char *)log;
      goto LABEL_118;
    }
    v15 = get_input_frames(a2, &v4[-1].paths_log_id_num, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v86);
    if ((v11 & 1) != 0)
      goto LABEL_23;
LABEL_24:
    if ((v9 & 1) != 0)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)&v91);
      if (!v15)
        goto LABEL_32;
    }
    else if (!v15)
    {
      goto LABEL_32;
    }
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL45nw_protocol_implementation_get_input_internalP31NWConcrete_nw_protocol_instanceP11nw_protocolmjjj_block_invoke;
    v94 = (nw_protocol *)&unk_1E149BB60;
    *((_QWORD *)&v95 + 1) = v86;
    *(_QWORD *)&v95 = v8;
    v96 = v7;
    v16 = v86[0];
    do
    {
      if (!v16)
        break;
      v17 = *(_QWORD *)(v16 + 32);
      v18 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v16 = v17;
    }
    while ((v18 & 1) != 0);

LABEL_32:
    nw_protocol_instance_flush_batched_input_internal(v8);
    if (!v4->pending_inbound_frames.tqh_last)
      goto LABEL_46;
    if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0 && gLogDatapath)
    {
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_protocol_implementation_read";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)&v4->flow_in_connected + 7;
        *(_WORD *)&buf[22] = 2080;
        v94 = (nw_protocol *)" ";
        _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing pending outbound frames (one-off)", buf, 0x20u);
      }

    }
    v19 = *(_QWORD *)&v4[-1].log_str[25];
    if (v19)
    {
      if (*(_UNKNOWN **)(v19 + 40) == &nw_protocol_ref_counted_handle)
      {
        v21 = *(_QWORD *)(v19 + 88);
        if (v21)
          *(_QWORD *)(v19 + 88) = v21 + 1;
        v91 = (nw_protocol *)v19;
        v20 = v92 | 1;
      }
      else
      {
        v91 = *(nw_protocol **)&v4[-1].log_str[25];
        v20 = v92 & 0xFE;
      }
      v92 = v20;
      v22 = *(_QWORD *)(v19 + 24);
      if (v22)
      {
        v23 = *(void (**)(uint64_t, nw_frame ***))(v22 + 96);
        if (v23)
        {
          v23(v19, &v4->pending_inbound_frames.tqh_last);
LABEL_44:
          if ((v20 & 1) != 0)
            nw::release_if_needed<nw_protocol *>((uint64_t *)&v91);
          goto LABEL_46;
        }
      }
      __nwlog_obj();
      loga = (os_log_t)objc_claimAutoreleasedReturnValue();
      v30 = *(const char **)(v19 + 16);
      if (!v30)
        v30 = "invalid";
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "__nw_protocol_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v30;
      *(_WORD *)&buf[22] = 2048;
      v94 = (nw_protocol *)v19;
      v31 = (char *)_os_log_send_and_compose_impl();

      v89[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v86[0]) = 0;
      if (__nwlog_fault(v31, v89, v86))
      {
        if (v89[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          logb = objc_claimAutoreleasedReturnValue();
          v73 = v89[0];
          if (os_log_type_enabled(logb, v89[0]))
          {
            v32 = *(const char **)(v19 + 16);
            if (!v32)
              v32 = "invalid";
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "__nw_protocol_finalize_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v32;
            *(_WORD *)&buf[22] = 2048;
            v94 = (nw_protocol *)v19;
            _os_log_impl(&dword_182FBE000, logb, v73, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback", buf, 0x20u);
          }
        }
        else
        {
          if (LOBYTE(v86[0]))
          {
            *(_QWORD *)v75 = v31;
            v45 = __nw_create_backtrace_string();
            __nwlog_obj();
            logc = objc_claimAutoreleasedReturnValue();
            v69 = v89[0];
            v46 = os_log_type_enabled(logc, v89[0]);
            v71 = (char *)v45;
            if (v45)
            {
              if (v46)
              {
                v47 = *(const char **)(v19 + 16);
                if (!v47)
                  v47 = "invalid";
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "__nw_protocol_finalize_output_frames";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v47;
                *(_WORD *)&buf[22] = 2048;
                v94 = (nw_protocol *)v19;
                LOWORD(v95) = 2082;
                *(_QWORD *)((char *)&v95 + 2) = v45;
                _os_log_impl(&dword_182FBE000, logc, v69, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
              }

              v31 = *(char **)v75;
              free(v71);
            }
            else
            {
              if (v46)
              {
                v57 = *(const char **)(v19 + 16);
                if (!v57)
                  v57 = "invalid";
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "__nw_protocol_finalize_output_frames";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v57;
                *(_WORD *)&buf[22] = 2048;
                v94 = (nw_protocol *)v19;
                _os_log_impl(&dword_182FBE000, logc, v69, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace", buf, 0x20u);
              }

              v31 = *(char **)v75;
            }
            goto LABEL_135;
          }
          __nwlog_obj();
          logb = objc_claimAutoreleasedReturnValue();
          v77 = v89[0];
          if (os_log_type_enabled(logb, v89[0]))
          {
            v55 = *(const char **)(v19 + 16);
            if (!v55)
              v55 = "invalid";
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "__nw_protocol_finalize_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v55;
            *(_WORD *)&buf[22] = 2048;
            v94 = (nw_protocol *)v19;
            _os_log_impl(&dword_182FBE000, logb, v77, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded", buf, 0x20u);
          }
        }

      }
LABEL_135:
      if (v31)
        free(v31);
      goto LABEL_44;
    }
    __nwlog_obj();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "__nw_protocol_finalize_output_frames";
    v41 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v91) = 16;
    v89[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v41, &v91, v89))
    {
      if (v91 == 17)
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v43 = v91;
        if (os_log_type_enabled(v42, (os_log_type_t)v91))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_protocol_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else
      {
        if (v89[0] == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v58 = objc_claimAutoreleasedReturnValue();
          v59 = v91;
          if (os_log_type_enabled(v58, (os_log_type_t)v91))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_protocol_finalize_output_frames";
            _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
          }

          goto LABEL_149;
        }
        v52 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        logd = v91;
        v53 = os_log_type_enabled(v42, (os_log_type_t)v91);
        if (v52)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "__nw_protocol_finalize_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v52;
            _os_log_impl(&dword_182FBE000, v42, logd, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v52);
          goto LABEL_149;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_protocol_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v42, logd, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }

    }
LABEL_149:
    if (v41)
      free(v41);
LABEL_46:
    flow_registration = (char *)v4->flow_registration;
    if (flow_registration)
    {
      v83[0] = MEMORY[0x1E0C809B0];
      v83[1] = 3221225472;
      v83[2] = ___ZL31nw_protocol_implementation_readP31NWConcrete_nw_protocol_instanceP11nw_protocol_block_invoke;
      v83[3] = &unk_1E14AC340;
      v84 = v8;
      nw_hash_table_apply(flow_registration, (uint64_t)v83);

    }
    v5 = BYTE4(v4->flow_in_connected);
    if ((v5 & 0x40) != 0 || v15 && (v4->flow_in_connected & 0x2000000000) == 0)
      break;
    if (!v15)
      goto LABEL_152;
  }
  BYTE4(v4->flow_in_connected) = v5 | 0x40;
LABEL_152:
  nw_protocol_implementation_deliver_output_available(v8);
LABEL_157:

}

void sub_1834BCAFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL45nw_protocol_implementation_get_input_internalP31NWConcrete_nw_protocol_instanceP11nw_protocolmjjj_block_invoke(_QWORD *a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD *, void *, _QWORD);
  uint64_t v11;
  void *v12;

  v3 = a2;
  v4 = v3;
  v6 = v3 + 4;
  v5 = v3[4];
  v7 = (_QWORD *)v3[5];
  if (v5)
  {
    *(_QWORD *)(v5 + 40) = v7;
    v7 = (_QWORD *)v3[5];
  }
  else
  {
    *(_QWORD *)(a1[5] + 8) = v7;
  }
  *v7 = v5;
  *v6 = 0;
  v3[5] = 0;
  v8 = a1[4];
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(void (**)(uint64_t, uint64_t, _QWORD *, void *, _QWORD))(*(_QWORD *)(v9 + 80) + 56);
  v11 = a1[6];
  v12 = nw_frame_copy_metadata_for_protocol((uint64_t)v3, v9);
  v10(v8, v11, v4, v12, 0);

  if (!*v6 && !v4[5] && (v4[2] || v4[3]))
    nw_frame_finalize((uint64_t)v4);

  return 1;
}

void sub_1834BCC20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL31nw_protocol_implementation_readP31NWConcrete_nw_protocol_instanceP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t extra;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(const char *, uint64_t);
  void *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  NSObject *v26;
  uint64_t v27;
  BOOL v28;
  const char *v29;
  const char *v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  const char *v34;
  char *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  const char *v39;
  const char *v40;
  os_log_type_t v41;
  char v42;
  os_log_type_t v43[8];
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  extra = nw_hash_node_get_extra(a2);
  v6 = extra + 104;
  if (!*(_QWORD *)(extra + 104))
    return 1;
  v7 = extra;
  v8 = *(_QWORD *)(a1 + 32);
  if ((!v8 || (*(char *)(v8 + 405) & 0x80000000) == 0) && gLogDatapath)
  {
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      v27 = *(_QWORD *)(a1 + 32);
      v28 = v27 == 0;
      if (v27)
        v29 = (const char *)(v27 + 407);
      else
        v29 = "";
      *(_DWORD *)buf = 136446978;
      v47 = "nw_protocol_implementation_read_block_invoke";
      v48 = 2082;
      v49 = (void *)v29;
      if (v28)
        v30 = "";
      else
        v30 = " ";
      v50 = 2080;
      v51 = v30;
      v52 = 2048;
      v53 = object;
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing pending outbound frames for %lx (one-off)", buf, 0x2Au);
    }

  }
  v9 = *(const char **)(v7 + 32);
  if (v9)
  {
    v10 = (void *)*((_QWORD *)v9 + 5);
    if (v10 == &nw_protocol_ref_counted_handle)
    {
      v12 = *((_QWORD *)v9 + 11);
      if (v12)
        *((_QWORD *)v9 + 11) = v12 + 1;
      v11 = -1;
    }
    else
    {
      v11 = 0;
    }
    *(_QWORD *)v43 = v9;
    v44 = v11;
    v13 = *((_QWORD *)v9 + 3);
    if (v13)
    {
      v14 = *(void (**)(const char *, uint64_t))(v13 + 96);
      if (v14)
      {
        v14(v9, v6);
LABEL_14:
        if (v10 == &nw_protocol_ref_counted_handle)
          nw::release_if_needed<nw_protocol *>((uint64_t *)v43);
        return 1;
      }
    }
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (const char *)*((_QWORD *)v9 + 2);
    *(_DWORD *)buf = 136446722;
    v47 = "__nw_protocol_finalize_output_frames";
    if (!v17)
      v17 = "invalid";
    v48 = 2082;
    v49 = (void *)v17;
    v50 = 2048;
    v51 = v9;
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v18, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          v21 = (const char *)*((_QWORD *)v9 + 2);
          if (!v21)
            v21 = "invalid";
          *(_DWORD *)buf = 136446722;
          v47 = "__nw_protocol_finalize_output_frames";
          v48 = 2082;
          v49 = (void *)v21;
          v50 = 2048;
          v51 = v9;
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback", buf, 0x20u);
        }
      }
      else if (v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        v33 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v33)
          {
            if (*((_QWORD *)v9 + 2))
              v34 = (const char *)*((_QWORD *)v9 + 2);
            else
              v34 = "invalid";
            *(_DWORD *)buf = 136446978;
            v47 = "__nw_protocol_finalize_output_frames";
            v48 = 2082;
            v49 = (void *)v34;
            v50 = 2048;
            v51 = v9;
            v52 = 2082;
            v53 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v32, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_64;
        }
        if (v33)
        {
          if (*((_QWORD *)v9 + 2))
            v40 = (const char *)*((_QWORD *)v9 + 2);
          else
            v40 = "invalid";
          *(_DWORD *)buf = 136446722;
          v47 = "__nw_protocol_finalize_output_frames";
          v48 = 2082;
          v49 = (void *)v40;
          v50 = 2048;
          v51 = v9;
          _os_log_impl(&dword_182FBE000, v19, v32, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v19, type))
        {
          v39 = (const char *)*((_QWORD *)v9 + 2);
          if (!v39)
            v39 = "invalid";
          *(_DWORD *)buf = 136446722;
          v47 = "__nw_protocol_finalize_output_frames";
          v48 = 2082;
          v49 = (void *)v39;
          v50 = 2048;
          v51 = v9;
          _os_log_impl(&dword_182FBE000, v19, v38, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
LABEL_64:
    if (v18)
      free(v18);
    goto LABEL_14;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v47 = "__nw_protocol_finalize_output_frames";
  v23 = (char *)_os_log_send_and_compose_impl();

  v43[0] = OS_LOG_TYPE_ERROR;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v43, &type))
  {
    if (v43[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = v43[0];
      if (os_log_type_enabled(v24, v43[0]))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (type)
    {
      v35 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v36 = v43[0];
      v37 = os_log_type_enabled(v24, v43[0]);
      if (v35)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v47 = "__nw_protocol_finalize_output_frames";
          v48 = 2082;
          v49 = v35;
          _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v35);
        goto LABEL_72;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v41 = v43[0];
      if (os_log_type_enabled(v24, v43[0]))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v24, v41, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_72:
  if (v23)
    free(v23);
  return 1;
}

void sub_1834BD2CC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void nw_protocol_implementation_deliver_output_available(NWConcrete_nw_protocol_instance *a1)
{
  NWConcrete_nw_protocol_instance *v1;
  NWConcrete_nw_protocol_instance *v2;
  char v3;
  char *tqh_last;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  _QWORD *v15;
  void *v16;
  const char *v17;
  _QWORD *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  const char *v26;
  os_log_type_t v27;
  const char *v28;
  const char *v29;
  void *v30;
  _QWORD v31[4];
  NWConcrete_nw_protocol_instance *v32;
  char v33;
  os_log_type_t type;
  unsigned __int16 *p_paths_log_id_num;
  char v36;
  _QWORD *v37;
  char v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  _QWORD *v44;
  __int16 v45;
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  v3 = BYTE5(v1->flow_in_connected);
  if ((v3 & 1) != 0)
  {
    if (v1->parent_definition->variant == 3)
    {
      BYTE5(v1->flow_in_connected) = v3 & 0xFE;
      tqh_last = (char *)v1->pending_outbound_frames.tqh_last;
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = ___ZL51nw_protocol_implementation_deliver_output_availableP31NWConcrete_nw_protocol_instance_block_invoke;
      v31[3] = &unk_1E14AC340;
      v32 = v1;
      nw_hash_table_apply(tqh_last, (uint64_t)v31);

      goto LABEL_2;
    }
    v5 = *(_QWORD **)&v1[-1].log_str[41];
    if (v5)
    {
      v6 = v5[3];
      if (v6)
      {
        if (*(_QWORD *)(v6 + 72))
        {
          BYTE5(v2->flow_in_connected) = v3 & 0xFE;
          v7 = (void *)v5[5];
          if (v7 == &nw_protocol_ref_counted_handle)
          {
            v9 = v5[11];
            if (v9)
              v5[11] = v9 + 1;
            v8 = -1;
          }
          else
          {
            v8 = 0;
          }
          v37 = v5;
          v38 = v8;
          v10 = *(void **)&v2[-1].log_str[33];
          if (v10 == &nw_protocol_ref_counted_handle)
          {
            v12 = *(_QWORD *)&v2[-1].log_str[81];
            if (v12)
              *(_QWORD *)&v2[-1].log_str[81] = v12 + 1;
            v11 = -1;
          }
          else
          {
            v11 = 0;
          }
          p_paths_log_id_num = &v2[-1].paths_log_id_num;
          v36 = v11;
          v13 = v5[3];
          if (v13)
          {
            v14 = *(void (**)(void))(v13 + 72);
            if (v14)
            {
              v14();
              if (v10 != &nw_protocol_ref_counted_handle)
                goto LABEL_23;
              goto LABEL_22;
            }
          }
          v30 = v10;
          v15 = v5;
          __nwlog_obj();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = (const char *)v15[2];
          *(_DWORD *)buf = 136446722;
          v40 = "__nw_protocol_output_available";
          if (!v17)
            v17 = "invalid";
          v41 = 2082;
          v42 = v17;
          v43 = 2048;
          v18 = v15;
          v44 = v15;
          v19 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v33 = 0;
          if (__nwlog_fault(v19, &type, &v33))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v20 = objc_claimAutoreleasedReturnValue();
              v21 = type;
              if (os_log_type_enabled(v20, type))
              {
                v22 = (const char *)v18[2];
                if (!v22)
                  v22 = "invalid";
                *(_DWORD *)buf = 136446722;
                v40 = "__nw_protocol_output_available";
                v41 = 2082;
                v42 = v22;
                v43 = 2048;
                v44 = v18;
                _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid output_available callback", buf, 0x20u);
              }
LABEL_50:

              goto LABEL_51;
            }
            if (!v33)
            {
              __nwlog_obj();
              v20 = objc_claimAutoreleasedReturnValue();
              v27 = type;
              if (os_log_type_enabled(v20, type))
              {
                v28 = (const char *)v18[2];
                if (!v28)
                  v28 = "invalid";
                *(_DWORD *)buf = 136446722;
                v40 = "__nw_protocol_output_available";
                v41 = 2082;
                v42 = v28;
                v43 = 2048;
                v44 = v18;
                _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded", buf, 0x20u);
              }
              goto LABEL_50;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v20 = objc_claimAutoreleasedReturnValue();
            v24 = type;
            v25 = os_log_type_enabled(v20, type);
            if (!backtrace_string)
            {
              if (v25)
              {
                v29 = (const char *)v18[2];
                if (!v29)
                  v29 = "invalid";
                *(_DWORD *)buf = 136446722;
                v40 = "__nw_protocol_output_available";
                v41 = 2082;
                v42 = v29;
                v43 = 2048;
                v44 = v18;
                _os_log_impl(&dword_182FBE000, v20, v24, "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace", buf, 0x20u);
              }
              goto LABEL_50;
            }
            if (v25)
            {
              v26 = (const char *)v18[2];
              if (!v26)
                v26 = "invalid";
              *(_DWORD *)buf = 136446978;
              v40 = "__nw_protocol_output_available";
              v41 = 2082;
              v42 = v26;
              v43 = 2048;
              v44 = v18;
              v45 = 2082;
              v46 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v20, v24, "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
          }
LABEL_51:
          if (v19)
            free(v19);
          if (v30 != &nw_protocol_ref_counted_handle)
            goto LABEL_23;
LABEL_22:
          nw::release_if_needed<nw_protocol *>((uint64_t *)&p_paths_log_id_num);
LABEL_23:
          if (v7 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)&v37);
        }
      }
    }
  }
LABEL_2:

}

void sub_1834BD794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  va_list va;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v18 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if (v15 == v14)
    nw::release_if_needed<nw_protocol *>((uint64_t *)va);
  if (v16 == v14)
    nw::release_if_needed<nw_protocol *>((uint64_t *)va1);

  _Unwind_Resume(a1);
}

uint64_t ___ZL51nw_protocol_implementation_deliver_output_availableP31NWConcrete_nw_protocol_instance_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra;
  _QWORD *object;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *);
  void *v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  const char *v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  const char *v37;
  const char *v38;
  os_log_type_t v39;
  char v40;
  os_log_type_t v41[8];
  char v42;
  os_log_type_t type;
  _QWORD *v44;
  char v45;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  _QWORD *v51;
  __int16 v52;
  char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  extra = nw_hash_node_get_extra(a2);
  object = (_QWORD *)nw_hash_node_get_object(a2);
  if (!extra)
    return 1;
  if ((*(_WORD *)(extra + 52) & 0x100) == 0)
    return 1;
  v6 = object;
  if (!object)
    return 1;
  v7 = object[3];
  if (!v7 || !*(_QWORD *)(a1 + 32) || !*(_QWORD *)(v7 + 72))
    return 1;
  *(_WORD *)(extra + 52) &= ~0x100u;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    v9 = v8 - 96;
  else
    v9 = 0;
  v10 = (void *)object[5];
  if (v10 == &nw_protocol_ref_counted_handle)
  {
    v12 = object[11];
    if (v12)
      object[11] = v12 + 1;
    v11 = -1;
  }
  else
  {
    v11 = 0;
  }
  v44 = object;
  v45 = v11;
  if (!v8)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "__nw_protocol_output_available";
    v26 = (char *)_os_log_send_and_compose_impl();

    v41[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v26, v41, &type))
    {
      if (v41[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = v41[0];
        if (os_log_type_enabled(v27, v41[0]))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "__nw_protocol_output_available";
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null other_protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v34 = v41[0];
        v35 = os_log_type_enabled(v27, v41[0]);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            v47 = "__nw_protocol_output_available";
            v48 = 2082;
            v49 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v27, v34, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_73;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "__nw_protocol_output_available";
          _os_log_impl(&dword_182FBE000, v27, v34, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v39 = v41[0];
        if (os_log_type_enabled(v27, v41[0]))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "__nw_protocol_output_available";
          _os_log_impl(&dword_182FBE000, v27, v39, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_73:
    if (v26)
      free(v26);
    goto LABEL_26;
  }
  v13 = *(void **)(v9 + 40);
  if (v13 == &nw_protocol_ref_counted_handle)
  {
    v15 = *(_QWORD *)(v9 + 88);
    if (v15)
      *(_QWORD *)(v9 + 88) = v15 + 1;
    v14 = -1;
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)v41 = v9;
  v42 = v14;
  v16 = object[3];
  if (!v16 || (v17 = *(void (**)(_QWORD *))(v16 + 72)) == 0)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (const char *)v6[2];
    *(_DWORD *)buf = 136446722;
    v47 = "__nw_protocol_output_available";
    if (!v20)
      v20 = "invalid";
    v48 = 2082;
    v49 = (void *)v20;
    v50 = 2048;
    v51 = v6;
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if (!__nwlog_fault(v21, &type, &v40))
      goto LABEL_65;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        v24 = (const char *)v6[2];
        if (!v24)
          v24 = "invalid";
        *(_DWORD *)buf = 136446722;
        v47 = "__nw_protocol_output_available";
        v48 = 2082;
        v49 = (void *)v24;
        v50 = 2048;
        v51 = v6;
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s protocol %{public}s (%p) has invalid output_available callback", buf, 0x20u);
      }
    }
    else if (v40)
    {
      v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v22, type);
      if (v29)
      {
        if (v31)
        {
          v32 = (const char *)v6[2];
          if (!v32)
            v32 = "invalid";
          *(_DWORD *)buf = 136446978;
          v47 = "__nw_protocol_output_available";
          v48 = 2082;
          v49 = (void *)v32;
          v50 = 2048;
          v51 = v6;
          v52 = 2082;
          v53 = v29;
          _os_log_impl(&dword_182FBE000, v22, v30, "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v29);
        goto LABEL_65;
      }
      if (v31)
      {
        v38 = (const char *)v6[2];
        if (!v38)
          v38 = "invalid";
        *(_DWORD *)buf = 136446722;
        v47 = "__nw_protocol_output_available";
        v48 = 2082;
        v49 = (void *)v38;
        v50 = 2048;
        v51 = v6;
        _os_log_impl(&dword_182FBE000, v22, v30, "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v22, type))
      {
        v37 = (const char *)v6[2];
        if (!v37)
          v37 = "invalid";
        *(_DWORD *)buf = 136446722;
        v47 = "__nw_protocol_output_available";
        v48 = 2082;
        v49 = (void *)v37;
        v50 = 2048;
        v51 = v6;
        _os_log_impl(&dword_182FBE000, v22, v36, "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded", buf, 0x20u);
      }
    }

LABEL_65:
    if (v21)
      free(v21);
    goto LABEL_24;
  }
  v17(object);
LABEL_24:
  if (v13 == &nw_protocol_ref_counted_handle)
    nw::release_if_needed<nw_protocol *>((uint64_t *)v41);
LABEL_26:
  if (v10 == &nw_protocol_ref_counted_handle)
    nw::release_if_needed<nw_protocol *>((uint64_t *)&v44);
  return 1;
}

void sub_1834BDE3C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL49nw_protocol_implementation_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *metadata;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, void *, uint64_t, _QWORD);
  void *v18;
  uint64_t v19;
  NSObject *v21;
  uint64_t size;
  int is_metadata_complete;
  int v24;
  int v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (uint64_t)v3;
  if (*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 64) == 3)
  {
    metadata = (uint64_t *)nw_frame_get_metadata((uint64_t)v3);
    v6 = metadata;
    if (metadata)
    {
      v7 = *metadata;
      goto LABEL_6;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = -1;
LABEL_6:
  v8 = *(_QWORD *)(a1[5] + 8);
  v9 = *(_QWORD *)(v8 + 24);
  if (v9 != v7)
  {
    if (v9 != -1)
    {
      v10 = *(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 80) + 104);
      if (v10)
      {
        v10();
        v8 = *(_QWORD *)(a1[5] + 8);
      }
    }
    *(_QWORD *)(v8 + 24) = v7;
    v11 = *(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 80) + 96);
    if (v11)
      v11();
  }
  if (gLogDatapath)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      size = nw_protocol_data_get_size((void *)v4);
      is_metadata_complete = nw_frame_is_metadata_complete(v4);
      v24 = *(unsigned __int8 *)(v4 + 186) >> 7;
      v25 = 136447490;
      v26 = "nw_protocol_implementation_finalize_output_frames_block_invoke";
      v27 = 2048;
      v28 = v4;
      v29 = 2048;
      v30 = size;
      v31 = 2048;
      v32 = v6;
      v33 = 1024;
      v34 = is_metadata_complete;
      v35 = 1024;
      v36 = v24;
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s calling handle outbound with frame %p (length %zu bytes), metadata %p complete: %u, connection complete: %u", (uint8_t *)&v25, 0x36u);
    }

  }
  v12 = *(_QWORD *)(v4 + 32);
  v13 = *(_QWORD **)(v4 + 40);
  v14 = (_QWORD *)(v4 + 32);
  if (v12)
  {
    *(_QWORD *)(v12 + 40) = v13;
    v13 = *(_QWORD **)(v4 + 40);
  }
  else
  {
    *(_QWORD *)(a1[6] + 8) = v13;
  }
  *v13 = v12;
  *v14 = 0;
  *(_QWORD *)(v4 + 40) = 0;
  v15 = a1[4];
  v16 = *(_QWORD *)(v15 + 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, _QWORD))(*(_QWORD *)(v16 + 80) + 64);
  v18 = nw_frame_copy_metadata_for_protocol(v4, v16);
  v19 = nw_frame_is_metadata_complete(v4);
  v17(v15, v7, v4, v18, v19, *(unsigned __int8 *)(v4 + 186) >> 7);

  if (!*v14 && !*(_QWORD *)(v4 + 40) && (*(_QWORD *)(v4 + 16) || *(_QWORD *)(v4 + 24)))
  {
    if (nw_frame_get_finalizer_context(v4))
      nw_frame_finalize(v4);
  }

  return 1;
}

void sub_1834BE0D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_protocol_create_outbound_data(NWConcrete_nw_protocol_instance *a1, size_t a2, char a3)
{
  NWConcrete_nw_protocol_instance *v5;
  NWConcrete_nw_protocol_instance *v6;
  nw_frame **data_from_pool;
  NWConcrete_nw_protocol_instance *v8;
  nw_frame **external;
  uint64_t buffer_manager_with_context;
  uint64_t v11;
  _BOOL8 v12;
  void *v13;
  NSObject *v14;
  void *v15;
  _BOOL8 result;
  NWConcrete_nw_protocol_instance *v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  nw_frame **tqh_last;
  void *v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  void *v28;
  os_log_type_t v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  os_log_type_t v36;
  os_log_type_t v37;
  char v38;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  size_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!*(_QWORD *)&v5->protocol_outbound_data_limit)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_protocol_create_outbound_data";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (!__nwlog_fault(v19, &type, &v38))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_protocol_create_outbound_data";
        _os_log_impl(&dword_182FBE000, v20, v24, "%{public}s called with null instance->context", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v38)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_protocol_create_outbound_data";
        _os_log_impl(&dword_182FBE000, v20, v35, "%{public}s called with null instance->context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_protocol_create_outbound_data";
        _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s called with null instance->context, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v41 = "nw_protocol_create_outbound_data";
      v42 = 2082;
      v43 = (size_t)backtrace_string;
      _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s called with null instance->context, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_55;
  }
  data_from_pool = (nw_frame **)nw_protocol_create_data_from_pool(v5, a3);
  if ((a3 & 1) != 0)
  {
    v8 = v6;
    if (data_from_pool)
    {
      nw_frame_reset((uint64_t)data_from_pool, 0, a2, (uint64_t)nw_protocol_outbound_data_finalizer, (uint64_t)v8);
      external = data_from_pool;
LABEL_29:
      external[2] = 0;
      tqh_last = v6->inbound_frames.tqh_last;
      external[3] = (nw_frame *)tqh_last;
      *tqh_last = (nw_frame *)external;
      v6->inbound_frames.tqh_last = external + 2;
LABEL_30:

      return (BOOL)external;
    }
    external = (nw_frame **)nw_frame_create_external(16, a2, (uint64_t)nw_protocol_outbound_data_finalizer, (uint64_t)v8);
    if (!external)
    {
      __nwlog_obj();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v41 = "nw_protocol_create_outbound_data";
      v19 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v38 = 0;
      if (!__nwlog_fault(v19, &type, &v38))
        goto LABEL_75;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v41 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s nw_frame_create_external failed", buf, 0xCu);
        }
      }
      else if (v38)
      {
        v30 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v20, type);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v41 = "nw_protocol_create_outbound_data";
            v42 = 2082;
            v43 = (size_t)v30;
            _os_log_impl(&dword_182FBE000, v20, v31, "%{public}s nw_frame_create_external failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v30);
LABEL_75:
          if (!v19)
          {
LABEL_77:
            external = 0;
            goto LABEL_30;
          }
LABEL_76:
          free(v19);
          goto LABEL_77;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v41 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_182FBE000, v20, v31, "%{public}s nw_frame_create_external failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v41 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_182FBE000, v20, v36, "%{public}s nw_frame_create_external failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_74:

      goto LABEL_75;
    }
LABEL_28:
    external = external;
    goto LABEL_29;
  }
  if (!a2)
    goto LABEL_12;
  buffer_manager_with_context = nw_frame_get_buffer_manager_with_context(*(void **)&v6->protocol_outbound_data_limit, a2);
  if (buffer_manager_with_context)
  {
    v11 = buffer_manager_with_context;
    v12 = nw_mem_buffer_allocate(buffer_manager_with_context);
    if (v12)
    {
      v13 = (void *)v12;
LABEL_14:
      v17 = v6;
      if (data_from_pool)
      {
        nw_frame_reset((uint64_t)data_from_pool, (uint64_t)v13, a2, (uint64_t)nw_protocol_outbound_data_finalizer, (uint64_t)v17);
        external = data_from_pool;
        goto LABEL_23;
      }
      external = (nw_frame **)nw_frame_create(16, (uint64_t)v13, a2, (uint64_t)nw_protocol_outbound_data_finalizer, (uint64_t)v17);
      if (external)
      {
LABEL_23:
        if (v11)
        {
          external[13] = (nw_frame *)v11;
        }
        else if (v13)
        {
          *((_WORD *)external + 102) |= 1u;
        }
        if (data_from_pool)
          goto LABEL_29;
        goto LABEL_28;
      }
      __nwlog_obj();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v41 = "nw_protocol_create_outbound_data";
      v19 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v38 = 0;
      if (!__nwlog_fault(v19, &type, &v38))
        goto LABEL_75;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v41 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s nw_frame_create failed", buf, 0xCu);
        }
        goto LABEL_74;
      }
      if (!v38)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v41 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_182FBE000, v20, v37, "%{public}s nw_frame_create failed, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_74;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      v34 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          v41 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_182FBE000, v20, v33, "%{public}s nw_frame_create failed, no backtrace", buf, 0xCu);
        }
        goto LABEL_74;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446466;
        v41 = "nw_protocol_create_outbound_data";
        v42 = 2082;
        v43 = (size_t)backtrace_string;
        _os_log_impl(&dword_182FBE000, v20, v33, "%{public}s nw_frame_create failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_55:

      free(backtrace_string);
      if (!v19)
        goto LABEL_77;
      goto LABEL_76;
    }
  }
  v13 = malloc_type_malloc(a2, 0xF2B69DE5uLL);
  if (v13)
  {
LABEL_13:
    v11 = 0;
    goto LABEL_14;
  }
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v41 = "strict_malloc";
  v42 = 2048;
  v43 = a2;
  v15 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
LABEL_12:
    v13 = 0;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_1834BE984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_protocol_create_data_from_pool(NWConcrete_nw_protocol_instance *a1, char a2)
{
  nw_frame **tqh_last;
  nw_frame **v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int tqh_first;
  id v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  NSObject *v20;
  uint64_t tqh_first_low;
  _QWORD v22[2];
  BOOL (*v23)(uint64_t, void *);
  void *v24;
  _BYTE *v25;
  char v26;
  char v27;
  os_log_type_t type[4];
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  _BYTE buf[24];
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)&a1->protocol_outbound_data_limit)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_create_data_from_pool";
    v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v13, type, &v27))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type[0];
        if (os_log_type_enabled(v14, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_create_data_from_pool";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null instance->context", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v17 = type[0];
        v18 = os_log_type_enabled(v14, type[0]);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_create_data_from_pool";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null instance->context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_33;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_create_data_from_pool";
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null instance->context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v19 = type[0];
        if (os_log_type_enabled(v14, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_create_data_from_pool";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null instance->context, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_33:
    if (v13)
      free(v13);
    return 0;
  }
  if (!LODWORD(a1->outbound_frames.tqh_first))
    return 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v37 = __Block_byref_object_copy__11692;
  v38 = __Block_byref_object_dispose__11693;
  v39 = 0;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v23 = ___ZL33nw_protocol_create_data_from_poolP31NWConcrete_nw_protocol_instanceb_block_invoke;
  v24 = &unk_1E149BCC0;
  v26 = a2;
  v25 = buf;
  tqh_last = a1->outbound_frames.tqh_last;
  do
  {
    if (!tqh_last)
      break;
    v4 = (nw_frame **)tqh_last[2];
    v5 = ((uint64_t (*)(_QWORD *))v23)(v22);
    tqh_last = v4;
  }
  while ((v5 & 1) != 0);
  v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD **)(v6 + 24);
    if (v7)
    {
      *(_QWORD *)(v7 + 24) = v8;
      v8 = *(_QWORD **)(v6 + 24);
    }
    else
    {
      *(_QWORD *)&a1->empty_frame_pool_count = v8;
    }
    *v8 = v7;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    tqh_first = (int)a1->outbound_frames.tqh_first;
    LODWORD(a1->outbound_frames.tqh_first) = tqh_first - 1;
    if (!tqh_first)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          tqh_first_low = LODWORD(a1->outbound_frames.tqh_first);
          *(_DWORD *)type = 136446978;
          v29 = "nw_protocol_create_data_from_pool";
          v30 = 2082;
          v31 = "instance->empty_frame_pool_count";
          v32 = 2048;
          v33 = 1;
          v34 = 2048;
          v35 = tqh_first_low;
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", (uint8_t *)type, 0x2Au);
        }

      }
      LODWORD(a1->outbound_frames.tqh_first) = 0;
    }
  }
  v10 = *(id *)(*(_QWORD *)&buf[8] + 40);
  _Block_object_dispose(buf, 8);

  return v10;
}

void nw_protocol_outbound_data_finalizer(void *a1, int a2, char *a3)
{
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  const char *v11;
  _QWORD v12[4];
  _DWORD *v13;
  char *v14;
  unsigned int v15;
  char v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  _DWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (a2)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_outbound_data_finalizer";
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s Finalizing outbound frame by copying", buf, 0xCu);
      }

    }
    v6 = nw_frame_unclaimed_length(v5);
    v7 = v6;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = ___ZL35nw_protocol_outbound_data_finalizerPU22objcproto11OS_nw_frame8NSObjectbPv_block_invoke;
    v12[3] = &unk_1E149BCE8;
    v15 = v6;
    v13 = v5;
    v14 = a3;
    v16 = a2;
    nw_protocol_request_outbound_data(v14, 0, v7, v12);

  }
  else
  {
    if ((!a3 || (a3[405] & 0x80000000) == 0) && gLogDatapath)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v10 = a3 + 407;
        if (!a3)
          v10 = "";
        *(_DWORD *)buf = 136446978;
        v18 = "nw_protocol_outbound_data_finalizer";
        v19 = 2082;
        v20 = v10;
        v11 = " ";
        if (!a3)
          v11 = "";
        v21 = 2080;
        v22 = v11;
        v23 = 2048;
        v24 = v5;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing outbound frame %p without copying (drop)", buf, 0x2Au);
      }

    }
    nw_protocol_data_finalizer(a3, v5, 0, (uint64_t)(a3 + 144));
  }

}

void sub_1834BEFE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL35nw_protocol_outbound_data_finalizerPU22objcproto11OS_nw_frame8NSObjectbPv_block_invoke(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  NSObject *v9;
  unsigned int v10;
  void *v11;
  const void *v12;
  void *v13;
  uint64_t departure_time;
  NSObject *v15;
  unsigned int v16;
  NSObject *v17;
  int v18;
  const char *v19;
  __int16 v20;
  unsigned int v21;
  __int16 v22;
  unsigned int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (uint64_t)v3;
  if (v3)
  {
    if (!v3[14]
      || (*((_WORD *)v3 + 102) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(v3, v3[11]))
    {
      v7 = 0;
    }
    else
    {
      v6 = *(_DWORD *)(v4 + 52);
      v5 = *(unsigned int *)(v4 + 56);
      if (v6)
      {
        v7 = v6 - (v5 + *(_DWORD *)(v4 + 60));
        v8 = *(_QWORD *)(v4 + 112);
        if (!v8)
          goto LABEL_17;
      }
      else
      {
        v7 = 0;
        v8 = *(_QWORD *)(v4 + 112);
        if (!v8)
          goto LABEL_17;
      }
      if (v7 == *(_DWORD *)(a1 + 48))
      {
        v11 = (void *)(v8 + v5);
        v12 = (const void *)nw_frame_unclaimed_bytes(*(_QWORD *)(a1 + 32), 0);
        memcpy(v11, v12, v7);
        if (gLogDatapath)
        {
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            v18 = 136446466;
            v19 = "nw_protocol_outbound_data_finalizer_block_invoke";
            v20 = 1024;
            v21 = v7;
            _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s Copying %u bytes for outbound frame", (uint8_t *)&v18, 0x12u);
          }

        }
        v13 = *(void **)(a1 + 40);
        departure_time = nw_frame_get_departure_time(*(_QWORD *)(a1 + 32));
        nw_protocol_instance_add_outbound(v13, (void *)v4, 0, departure_time, 0, 1);
        goto LABEL_20;
      }
    }
LABEL_17:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_DWORD *)(a1 + 48);
      v18 = 136446722;
      v19 = "nw_protocol_outbound_data_finalizer_block_invoke";
      v20 = 1024;
      v21 = v16;
      v22 = 1024;
      v23 = v7;
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_ERROR, "%{public}s Could not get frame for %u bytes (%u bytes)", (uint8_t *)&v18, 0x18u);
    }

    nw_frame_finalize(v4);
    goto LABEL_20;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (id)gLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v10 = *(_DWORD *)(a1 + 48);
    v18 = 136446466;
    v19 = "nw_protocol_outbound_data_finalizer_block_invoke";
    v20 = 1024;
    v21 = v10;
    _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s Could not get frame for %u bytes", (uint8_t *)&v18, 0x12u);
  }

LABEL_20:
  nw_protocol_data_finalizer(*(void **)(a1 + 40), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 52), *(_QWORD *)(a1 + 40) + 144);

}

void sub_1834BF2E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_data_finalizer(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  id v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void (**v17)(_QWORD, _QWORD);
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  os_log_type_t v27;
  void *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  _BOOL4 v37;
  NSObject *v38;
  uint64_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  os_log_type_t v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = (uint64_t)v8;
  if (!v7)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_data_finalizer";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v23, &type, &v43))
      goto LABEL_89;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v46 = "nw_protocol_data_finalizer";
          v47 = 2082;
          v48 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_89:
        if (!v23)
          goto LABEL_35;
LABEL_90:
        free(v23);
        goto LABEL_35;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_182FBE000, v24, v40, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_88:

    goto LABEL_89;
  }
  if (!v8)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_data_finalizer";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v23, &type, &v43))
      goto LABEL_89;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null frame", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (!v43)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_182FBE000, v24, v41, "%{public}s called with null frame, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_88;
    }
    v33 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    v34 = type;
    v35 = os_log_type_enabled(v24, type);
    if (!v33)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_182FBE000, v24, v34, "%{public}s called with null frame, no backtrace", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_data_finalizer";
      v47 = 2082;
      v48 = v33;
      _os_log_impl(&dword_182FBE000, v24, v34, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_65;
  }
  if (!a4)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_data_finalizer";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v23, &type, &v43))
      goto LABEL_89;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null existing_master_array", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (!v43)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_182FBE000, v24, v42, "%{public}s called with null existing_master_array, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_88;
    }
    v33 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    v36 = type;
    v37 = os_log_type_enabled(v24, type);
    if (!v33)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s called with null existing_master_array, no backtrace", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_data_finalizer";
      v47 = 2082;
      v48 = v33;
      _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s called with null existing_master_array, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_65:

    free(v33);
    if (!v23)
      goto LABEL_35;
    goto LABEL_90;
  }
  v10 = *((_WORD *)v8 + 102);
  if ((v10 & 1) != 0)
  {
    if ((*((_WORD *)v8 + 102) & 0x100) == 0
      || !g_channel_check_validity
      || g_channel_check_validity(v8, *((_QWORD *)v8 + 11)))
    {
      v13 = *(void **)(v9 + 112);
      if (v13)
        free(v13);
    }
  }
  else
  {
    v11 = *((_QWORD *)v8 + 13);
    if (v11)
    {
      if ((*((_WORD *)v8 + 102) & 0x100) != 0
        && g_channel_check_validity
        && !g_channel_check_validity(v8, *((_QWORD *)v8 + 11)))
      {
        v12 = 0;
      }
      else
      {
        v12 = *(_QWORD *)(v9 + 112);
      }
      nw_mem_buffer_free(v11, v12);
    }
    else if ((v10 & 2) != 0)
    {
      nw_frame_set_external_data((uint64_t)v8, 0, 0);
    }
  }
  nw_frame_reset(v9, 0, 0, 0, 0);
  *(_WORD *)(v9 + 204) &= ~1u;
  v14 = *(_QWORD **)(v9 + 24);
  v15 = (_QWORD *)(v9 + 16);
  v16 = *(_QWORD *)(v9 + 16);
  if (v16)
  {
    *(_QWORD *)(v16 + 24) = v14;
    v14 = *(_QWORD **)(v9 + 24);
  }
  else
  {
    *(_QWORD *)(a4 + 8) = v14;
  }
  v17 = 0;
  *v14 = v16;
  *v15 = 0;
  *(_QWORD *)(v9 + 24) = 0;
  if ((*(_WORD *)(v9 + 204) & 4) != 0)
  {
    v17 = *(void (***)(_QWORD, _QWORD))(v9 + 216);
    if (v17)
      *(_QWORD *)(v9 + 216) = 0;
  }
  v18 = *((unsigned int *)v7 + 40);
  if (v18 > 0x27)
  {

    if (!v17)
      goto LABEL_34;
  }
  else
  {
    *(_QWORD *)(v9 + 16) = 0;
    v19 = (uint64_t *)v7[22];
    *(_QWORD *)(v9 + 24) = v19;
    *v19 = v9;
    v7[22] = v15;
    v20 = v18 + 1;
    v21 = v20 << 31 >> 31;
    *((_DWORD *)v7 + 40) = v20;
    if (v21 != v20 || v21 < 0)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
          v39 = *((unsigned int *)v7 + 40);
          *(_DWORD *)buf = 136446978;
          v46 = "nw_protocol_data_finalizer";
          v47 = 2082;
          v48 = "instance->empty_frame_pool_count";
          v49 = 2048;
          v50 = 1;
          v51 = 2048;
          v52 = v39;
          _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }

      }
      *((_DWORD *)v7 + 40) = -1;
      if (!v17)
        goto LABEL_34;
    }
    else if (!v17)
    {
      goto LABEL_34;
    }
  }
  v17[2](v17, a3);
LABEL_34:

LABEL_35:
}

