void Listener1.connections.getter()
{
  sub_18329BCF8();
}

uint64_t Listener1.states.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1832BFDF4((uint64_t)sub_18329C97C, v1, a1);
  return swift_retain();
}

void Listener1.makeAsyncIterator()()
{
  type metadata accessor for Connection1();
}

uint64_t sub_18329A6D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[96];

  v0 = sub_183B91A58();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = &v9[-v2];
  v4 = sub_183B91AAC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v9[-v6];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DF07B8], v0);
  sub_183B91AB8();
  sub_183B91A88();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

void Listener1.deinit()
{
  sub_18329C868(&qword_1EDCDDA90);
}

void Listener1.__deallocating_deinit()
{
  sub_18329AC28((void (*)(void))Listener1.deinit);
}

void sub_18329A7D8()
{
  Listener1.makeAsyncIterator()();
}

uint64_t sub_18329A7EC()
{
  return swift_release();
}

uint64_t Listener2.__allocating_init(using:ready:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18329A818(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))Listener2.init(using:ready:));
}

uint64_t sub_18329A818(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = swift_allocObject();
  a4(a1, a2, a3);
  return v8;
}

void Listener2.init(using:ready:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + qword_1EDCDDAB8;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDA98);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + qword_1EDCDDAC0;
  *(_BYTE *)(v3 + 4) = -4;
  *(_DWORD *)v3 = 0;
  type metadata accessor for Connection1();
}

_QWORD *sub_18329A92C()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  nw_parameters_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;

  v5 = sub_183B91A7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = *(_QWORD *)(*v0 + 152);
  swift_checkMetadataState();
  *(_QWORD *)((char *)v0 + v6) = sub_183B91644();
  v7 = nw_parameters_copy(v1);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v8 + 16) = v9;
  v16 = 0;
  type metadata accessor for NWListener();
  swift_allocObject();
  NWListener.init(using:on:)(v8, &v16);
  if (v2)
  {
    swift_release();
    sub_18329A134(v3);
    v11 = sub_183B91CF8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v4, v11);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v0[2] = v10;
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v0;
    v12[3] = v15;
    v12[4] = v17;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_183061488((uint64_t)sub_18329C9E0);
    NWListener.stateUpdateHandler.setter((uint64_t)sub_18329C9E0, (uint64_t)v12);
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_183061488((uint64_t)sub_18329A1A4);
    NWListener.newConnectionHandler.setter((uint64_t)sub_18329A1A4, (uint64_t)v0);
    swift_release();
    swift_release();
    v13 = qword_1EDCDC5C8;
    swift_retain();
    if (v13 != -1)
      swift_once();
    NWListener.start(queue:)((void *)qword_1EDCF2A70);
    swift_release();
    swift_release();
  }
  return v0;
}

uint64_t Listener2.__allocating_init(for:using:)(uint64_t a1, uint64_t a2)
{
  return sub_18329AF8C(a1, a2, (void (*)(uint64_t, uint64_t))Listener2.init(for:using:));
}

void Listener2.init(for:using:)(uint64_t a1, uint64_t a2)
{
  sub_18329B5E4(a1, a2, &qword_1EDCDDAB8, &qword_1EDCDDAC0);
}

void Listener2.connections.getter()
{
  sub_18329BCF8();
}

uint64_t Listener2.states.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1832BFDF4((uint64_t)sub_18329CA64, v1, a1);
  return swift_retain();
}

void Listener2.deinit()
{
  sub_18329C868(&qword_1EDCDDAB8);
}

void Listener2.__deallocating_deinit()
{
  sub_18329AC28((void (*)(void))Listener2.deinit);
}

void sub_18329AC28(void (*a1)(void))
{
  a1();
  JUMPOUT(0x18329AC34);
}

uint64_t Listener3.__allocating_init(for:ready:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18329A818(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))Listener3.init(for:ready:));
}

void Listener3.init(for:ready:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + qword_1EDCDDAC8;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDA98);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + qword_1EDCDDAD0;
  *(_BYTE *)(v3 + 4) = -4;
  *(_DWORD *)v3 = 0;
  type metadata accessor for Connection1();
}

_QWORD *sub_18329AD14()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  nw_parameters_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;

  v5 = sub_183B91A7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = *(_QWORD *)(*v0 + 152);
  swift_checkMetadataState();
  *(_QWORD *)((char *)v0 + v6) = sub_183B91644();
  v7 = nw_parameters_copy(v1);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v8 + 16) = v9;
  v16 = 0;
  type metadata accessor for NWListener();
  swift_allocObject();
  NWListener.init(using:on:)(v8, &v16);
  if (v2)
  {
    swift_release();
    sub_18329A134(v3);
    v11 = sub_183B91CF8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v4, v11);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v0[2] = v10;
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v0;
    v12[3] = v15;
    v12[4] = v17;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_183061488((uint64_t)sub_18329CA98);
    NWListener.stateUpdateHandler.setter((uint64_t)sub_18329CA98, (uint64_t)v12);
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_183061488((uint64_t)sub_18329A1A4);
    NWListener.newConnectionHandler.setter((uint64_t)sub_18329A1A4, (uint64_t)v0);
    swift_release();
    swift_release();
    v13 = qword_1EDCDC5C8;
    swift_retain();
    if (v13 != -1)
      swift_once();
    NWListener.start(queue:)((void *)qword_1EDCF2A70);
    swift_release();
    swift_release();
  }
  return v0;
}

uint64_t Listener3.__allocating_init(on:for:)(uint64_t a1, uint64_t a2)
{
  return sub_18329AF8C(a1, a2, (void (*)(uint64_t, uint64_t))Listener3.init(on:for:));
}

uint64_t sub_18329AF8C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;

  v6 = swift_allocObject();
  a3(a1, a2);
  return v6;
}

void Listener3.init(on:for:)(uint64_t a1, uint64_t a2)
{
  sub_18329B5E4(a1, a2, &qword_1EDCDDAC8, &qword_1EDCDDAD0);
}

void Listener3.connections.getter()
{
  sub_18329BCF8();
}

uint64_t Listener3.states.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1832BFDF4((uint64_t)sub_18329CB1C, v1, a1);
  return swift_retain();
}

void Listener3.deinit()
{
  sub_18329C868(&qword_1EDCDDAC8);
}

void Listener3.__deallocating_deinit()
{
  sub_18329AC28((void (*)(void))Listener3.deinit);
}

uint64_t Listener4.__allocating_init(with:ready:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18329A818(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))Listener4.init(with:ready:));
}

void Listener4.init(with:ready:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + qword_1EDCDDAD8;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDA98);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + qword_1EDCDDAE0;
  *(_BYTE *)(v3 + 4) = -4;
  *(_DWORD *)v3 = 0;
  type metadata accessor for Connection1();
}

_QWORD *sub_18329B138()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  nw_parameters_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;

  v5 = sub_183B91A7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = *(_QWORD *)(*v0 + 152);
  swift_checkMetadataState();
  *(_QWORD *)((char *)v0 + v6) = sub_183B91644();
  v7 = nw_parameters_copy(v1);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v8 + 16) = v9;
  v16 = 0;
  type metadata accessor for NWListener();
  swift_allocObject();
  NWListener.init(using:on:)(v8, &v16);
  if (v2)
  {
    swift_release();
    sub_18329A134(v3);
    v11 = sub_183B91CF8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v4, v11);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v0[2] = v10;
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v0;
    v12[3] = v15;
    v12[4] = v17;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_183061488((uint64_t)sub_18329CB7C);
    NWListener.stateUpdateHandler.setter((uint64_t)sub_18329CB7C, (uint64_t)v12);
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_183061488((uint64_t)sub_18329A1A4);
    NWListener.newConnectionHandler.setter((uint64_t)sub_18329A1A4, (uint64_t)v0);
    swift_release();
    swift_release();
    v13 = qword_1EDCDC5C8;
    swift_retain();
    if (v13 != -1)
      swift_once();
    NWListener.start(queue:)((void *)qword_1EDCF2A70);
    swift_release();
    swift_release();
  }
  return v0;
}

uint64_t sub_18329B394(unsigned int *a1, uint64_t a2, uint64_t (*a3)(int *), uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(int *);
  int v27;
  char v28;

  v23 = a6;
  v25 = a4;
  v26 = a3;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDCF8);
  v9 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDAB0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDA98);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  v20 = a2 + *a5;
  swift_beginAccess();
  sub_18329D1B8(v20, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    result = sub_18329A134((uint64_t)v14);
    v22 = a2 + *v23;
    *(_BYTE *)(v22 + 4) = BYTE4(v19);
    *(_DWORD *)v22 = v19;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    v28 = BYTE4(v19);
    v27 = v19;
    sub_183B91A64();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  if ((v19 & 0xFFFFFFFFFFLL) == 0x8000000001)
  {
    LOWORD(v27) = nw_listener_get_port(*(nw_listener_t *)(*(_QWORD *)(a2 + 16) + 24));
    return v26(&v27);
  }
  return result;
}

uint64_t Listener4.__allocating_init(for:with:)(uint64_t a1, uint64_t a2)
{
  return sub_18329AF8C(a1, a2, (void (*)(uint64_t, uint64_t))Listener4.init(for:with:));
}

void Listener4.init(for:with:)(uint64_t a1, uint64_t a2)
{
  sub_18329B5E4(a1, a2, &qword_1EDCDDAD8, qword_1EDCDDAE0);
}

void sub_18329B5E4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = v4 + *a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDA98);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v4 + *a4;
  *(_BYTE *)(v8 + 4) = -4;
  *(_DWORD *)v8 = 0;
  type metadata accessor for Connection1();
}

_QWORD *sub_18329B694()
{
  _QWORD *v0;
  NSObject *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 host_with_numeric_port;
  nw_parameters_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;

  v5 = sub_183B91A7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = *(_QWORD *)(*v0 + 152);
  swift_checkMetadataState();
  *(_QWORD *)((char *)v0 + v6) = sub_183B91644();
  swift_unknownObjectRetain();
  host_with_numeric_port = nw_endpoint_create_host_with_numeric_port("::", v2);
  nw_parameters_set_local_endpoint(v1, (nw_endpoint_t)host_with_numeric_port);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v8 = nw_parameters_copy(v1);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  v9 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v9 + 16) = v10;
  v17 = 0;
  type metadata accessor for NWListener();
  swift_allocObject();
  NWListener.init(using:on:)(v9, &v17);
  if (v3)
  {
    sub_18329A134(v18);
    v12 = sub_183B91CF8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v4, v12);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v0[2] = v11;
    swift_retain();
    swift_retain();
    sub_183061488(v15);
    NWListener.stateUpdateHandler.setter(v15, (uint64_t)v0);
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_183061488(v16);
    NWListener.newConnectionHandler.setter(v16, (uint64_t)v0);
    swift_release();
    swift_release();
    v13 = qword_1EDCDC5C8;
    swift_retain();
    if (v13 != -1)
      swift_once();
    NWListener.start(queue:)((void *)qword_1EDCF2A70);
    swift_release();
  }
  return v0;
}

uint64_t sub_18329B8DC(unsigned int *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;

  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDCF8);
  v8 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDAB0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDA98);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  v19 = a2 + *a3;
  swift_beginAccess();
  sub_18329D1B8(v19, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    result = sub_18329A134((uint64_t)v13);
    v21 = a2 + *a4;
    *(_BYTE *)(v21 + 4) = BYTE4(v18);
    *(_DWORD *)v21 = v18;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v25 = BYTE4(v18);
    v24 = v18;
    sub_183B91A64();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  return result;
}

void sub_18329BAA0()
{
  type metadata accessor for Connection1();
}

uint64_t sub_18329BAEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[96];

  v2 = sub_183B91A40();
  *(_QWORD *)(v1 - 168) = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v1 - 160) = v2;
  MEMORY[0x1E0C80A78](v2);
  *(_QWORD *)(v1 - 176) = &v18[-v3];
  v4 = sub_183B91A7C();
  v5 = sub_183B91CF8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = &v18[-v8];
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v7);
  v12 = &v18[-v11];
  swift_checkMetadataState();
  v13 = swift_retain();
  v14 = Connection1.__allocating_init(using:)(v13);
  v15 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v9, v15, v5);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    *(_QWORD *)(v1 - 128) = v14;
    swift_beginAccess();
    sub_183B919BC();
    swift_retain();
    sub_183B919A4();
    swift_endAccess();
    return swift_release();
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, v9, v4);
    *(_QWORD *)(v1 - 152) = v14;
    v17 = *(_QWORD *)(v1 - 176);
    sub_183B91A64();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 168) + 8))(v17, *(_QWORD *)(v1 - 160));
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v4);
  }
}

void Listener4.connections.getter()
{
  sub_18329BCF8();
}

void sub_18329BCF8()
{
  type metadata accessor for Connection1();
}

uint64_t sub_18329BD38()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1832BFDF4(v0, v1, v2);
  return swift_retain();
}

void sub_18329BD68(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[18];

  v14[2] = a4;
  v14[3] = a5;
  v14[1] = a3;
  v14[4] = a2;
  v5 = (_QWORD *)*a2;
  v6 = sub_183B915FC();
  v14[9] = *(_QWORD *)(v6 - 8);
  v14[10] = v6;
  MEMORY[0x1E0C80A78](v6);
  v14[8] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_183B91614();
  v14[6] = *(_QWORD *)(v8 - 8);
  v14[7] = v8;
  MEMORY[0x1E0C80A78](v8);
  v14[5] = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v5[11];
  v12 = v5[12];
  v11 = v5[13];
  v13 = v5[14];
  v14[12] = v5[10];
  v14[13] = v10;
  v14[14] = v12;
  v14[15] = v11;
  v14[16] = v13;
  type metadata accessor for Connection1();
}

uint64_t sub_18329BE38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t WitnessTablePack;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v5 = sub_183B91A7C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - v7;
  if (qword_1EDCDC5C8 != -1)
    swift_once();
  *(_QWORD *)(v4 - 224) = qword_1EDCF2A70;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2, v5);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = (char *)swift_allocObject();
  *((_QWORD *)v10 + 2) = v3;
  *((_QWORD *)v10 + 3) = v0;
  *((_QWORD *)v10 + 4) = swift_allocateMetadataPack();
  *((_QWORD *)v10 + 5) = v1;
  WitnessTablePack = swift_allocateWitnessTablePack();
  v12 = *(_QWORD *)(v4 - 192);
  *((_QWORD *)v10 + 6) = WitnessTablePack;
  *((_QWORD *)v10 + 7) = v12;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v10[v9], v8, v5);
  *(_QWORD *)(v4 - 96) = *(_QWORD *)(v4 - 208);
  *(_QWORD *)(v4 - 88) = v10;
  *(_QWORD *)(v4 - 128) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v4 - 120) = 1107296256;
  v13 = *(_QWORD *)(v4 - 200);
  *(_QWORD *)(v4 - 112) = sub_18305665C;
  *(_QWORD *)(v4 - 104) = v13;
  v14 = _Block_copy((const void *)(v4 - 128));
  swift_retain();
  v15 = *(_QWORD *)(v4 - 184);
  sub_183B91608();
  *(_QWORD *)(v4 - 136) = MEMORY[0x1E0DEE9D8];
  sub_18329D170();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD840D0);
  sub_1830622EC();
  v16 = *(_QWORD *)(v4 - 160);
  v17 = *(_QWORD *)(v4 - 144);
  sub_183B91D58();
  MEMORY[0x186DB21BC](0, v15, v16, v14);
  _Block_release(v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 152) + 8))(v16, v17);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 176) + 8))(v15, *(_QWORD *)(v4 - 168));
  return swift_release();
}

void sub_18329C024()
{
  type metadata accessor for Connection1();
}

uint64_t sub_18329C084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[96];

  *(_QWORD *)(v4 - 176) = a1;
  v5 = sub_183B91A7C();
  v6 = sub_183B91CF8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v12 = &v22[-v11];
  v13 = v2 + *(_QWORD *)(v1 + 144);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v12, v13, v6);
  v14 = *(_QWORD *)(v5 - 8);
  v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v5);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
  if (v15 != 1)
    return sub_183B91A70();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v10, v3, v5);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v5);
  swift_beginAccess();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 40))(v13, v10, v6);
  swift_endAccess();
  v16 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 152));
  v17 = swift_beginAccess();
  *(_QWORD *)(v4 - 152) = *v16;
  MEMORY[0x1E0C80A78](v17);
  v18 = *(_QWORD *)(v4 - 192);
  *(_QWORD *)&v22[-48] = *(_QWORD *)(v4 - 184);
  *(_QWORD *)&v22[-40] = v18;
  v19 = *(_QWORD *)(v4 - 208);
  *(_QWORD *)&v22[-32] = *(_QWORD *)(v4 - 200);
  *(_QWORD *)&v22[-24] = v19;
  *(_QWORD *)&v22[-16] = *(_QWORD *)(v4 - 216);
  *(_QWORD *)&v22[-8] = v3;
  v20 = sub_183B919BC();
  swift_bridgeObjectRetain();
  MEMORY[0x186DB5558](MEMORY[0x1E0DEAF38], v20);
  sub_183B918E4();
  swift_bridgeObjectRelease();
  *v16 = sub_183B91974();
  return swift_bridgeObjectRelease();
}

void sub_18329C2B8()
{
  type metadata accessor for Connection1();
}

uint64_t sub_18329C2F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_183B91A40();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - v4;
  *(_QWORD *)(v1 - 104) = *v0;
  sub_183B91A7C();
  swift_retain();
  sub_183B91A64();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Listener4.states.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1832BFDF4((uint64_t)sub_18329CC00, v1, a1);
  return swift_retain();
}

uint64_t sub_18329C3C0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t WitnessTablePack;
  _QWORD *v20;
  void *v21;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v24 = a4;
  v25 = a5;
  v23[1] = a3;
  v26 = a2;
  v6 = (_QWORD *)*a2;
  v7 = sub_183B915FC();
  v29 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_183B91614();
  v27 = *(_QWORD *)(v10 - 8);
  v28 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDA98);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EDCDC5C8 != -1)
    swift_once();
  v23[2] = qword_1EDCF2A70;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = v6[10];
  *((_QWORD *)v18 + 3) = v6[11];
  *((_QWORD *)v18 + 4) = swift_allocateMetadataPack();
  *((_QWORD *)v18 + 5) = v6[13];
  WitnessTablePack = swift_allocateWitnessTablePack();
  v20 = v26;
  *((_QWORD *)v18 + 6) = WitnessTablePack;
  *((_QWORD *)v18 + 7) = v20;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v18[v17], v16, v13);
  aBlock[4] = v24;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_18305665C;
  aBlock[3] = v25;
  v21 = _Block_copy(aBlock);
  swift_retain();
  sub_183B91608();
  v30 = MEMORY[0x1E0DEE9D8];
  sub_18329D170();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD840D0);
  sub_1830622EC();
  sub_183B91D58();
  MEMORY[0x186DB21BC](0, v12, v9, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v28);
  return swift_release();
}

uint64_t sub_18329C65C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  unsigned int *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  char v28;

  v26 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDCF8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDAB0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v25 - v15;
  v17 = *a3;
  v25 = a1;
  v18 = a1 + v17;
  swift_beginAccess();
  sub_18329D1B8(v18, (uint64_t)v16);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDA98);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v16, 1, v19);
  sub_18329A134((uint64_t)v16);
  if (v21 != 1)
    return sub_183B91A70();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v14, a2, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v14, 0, 1, v19);
  swift_beginAccess();
  sub_18329D200((uint64_t)v14, v18);
  result = swift_endAccess();
  v23 = (unsigned int *)(v25 + *v26);
  if (*((unsigned __int8 *)v23 + 4) >> 2 <= 0x3EuLL)
  {
    v24 = *v23 | ((unint64_t)*((unsigned __int8 *)v23 + 4) << 32);
    v27 = v24;
    v28 = BYTE4(v24);
    sub_183B91A64();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return result;
}

void Listener4.deinit()
{
  sub_18329C868(&qword_1EDCDDAD8);
}

void sub_18329C868(_QWORD *a1)
{
  uint64_t v1;

  swift_release();
  sub_18329A134(v1 + *a1);
  type metadata accessor for Connection1();
}

uint64_t sub_18329C8C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_183B91A7C();
  v2 = sub_183B91CF8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0, v2);
  swift_bridgeObjectRelease();
  return v1;
}

void Listener4.__deallocating_deinit()
{
  sub_18329AC28((void (*)(void))Listener4.deinit);
}

uint64_t sub_18329C924(unsigned int *a1)
{
  uint64_t v1;

  return sub_18329B8DC(a1, v1, &qword_1EDCDDA90, &qword_1EDCDDAA0);
}

void sub_18329C94C(uint64_t a1)
{
  _QWORD *v1;

  sub_18329BD68(a1, v1, (uint64_t)&unk_1E1496810, (uint64_t)sub_18329D24C, (uint64_t)&block_descriptor_60_0);
}

uint64_t sub_18329C97C(uint64_t a1)
{
  _QWORD *v1;

  return sub_18329C3C0(a1, v1, (uint64_t)&unk_1E14967C0, (uint64_t)sub_18329D40C, (uint64_t)&block_descriptor_54);
}

void sub_18329C9AC(uint64_t a1)
{
  _QWORD *v1;

  sub_18329BD68(a1, v1, (uint64_t)&unk_1E1496770, (uint64_t)sub_18329D24C, (uint64_t)&block_descriptor_48_0);
}

uint64_t sub_18329C9E0(unsigned int *a1)
{
  uint64_t v1;

  return sub_18329B394(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(int *))(v1 + 24), *(_QWORD *)(v1 + 32), &qword_1EDCDDAB8, &qword_1EDCDDAC0);
}

uint64_t sub_18329CA0C(unsigned int *a1)
{
  uint64_t v1;

  return sub_18329B8DC(a1, v1, &qword_1EDCDDAB8, &qword_1EDCDDAC0);
}

void sub_18329CA34(uint64_t a1)
{
  _QWORD *v1;

  sub_18329BD68(a1, v1, (uint64_t)&unk_1E1496720, (uint64_t)sub_18329D24C, (uint64_t)&block_descriptor_42);
}

uint64_t sub_18329CA64(uint64_t a1)
{
  _QWORD *v1;

  return sub_18329C3C0(a1, v1, (uint64_t)&unk_1E14966D0, (uint64_t)sub_18329D374, (uint64_t)&block_descriptor_36);
}

uint64_t sub_18329CA98(unsigned int *a1)
{
  uint64_t v1;

  return sub_18329B394(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(int *))(v1 + 24), *(_QWORD *)(v1 + 32), &qword_1EDCDDAC8, &qword_1EDCDDAD0);
}

uint64_t sub_18329CAC4(unsigned int *a1)
{
  uint64_t v1;

  return sub_18329B8DC(a1, v1, &qword_1EDCDDAC8, &qword_1EDCDDAD0);
}

void sub_18329CAEC(uint64_t a1)
{
  _QWORD *v1;

  sub_18329BD68(a1, v1, (uint64_t)&unk_1E1496680, (uint64_t)sub_18329D24C, (uint64_t)&block_descriptor_30);
}

uint64_t sub_18329CB1C(uint64_t a1)
{
  _QWORD *v1;

  return sub_18329C3C0(a1, v1, (uint64_t)&unk_1E1496658, (uint64_t)sub_18329D270, (uint64_t)&block_descriptor_24_0);
}

uint64_t objectdestroyTm_1()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18329CB7C(unsigned int *a1)
{
  uint64_t v1;

  return sub_18329B394(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(int *))(v1 + 24), *(_QWORD *)(v1 + 32), &qword_1EDCDDAD8, qword_1EDCDDAE0);
}

uint64_t sub_18329CBA8(unsigned int *a1)
{
  uint64_t v1;

  return sub_18329B8DC(a1, v1, &qword_1EDCDDAD8, qword_1EDCDDAE0);
}

void sub_18329CBD0(uint64_t a1)
{
  _QWORD *v1;

  sub_18329BD68(a1, v1, (uint64_t)&unk_1E1496630, (uint64_t)sub_18329D24C, (uint64_t)&block_descriptor_18_0);
}

uint64_t sub_18329CC00(uint64_t a1)
{
  _QWORD *v1;

  return sub_18329C3C0(a1, v1, (uint64_t)&unk_1E1496608, (uint64_t)sub_18329D15C, (uint64_t)&block_descriptor_8);
}

void sub_18329CC30()
{
  JUMPOUT(0x186DB5558);
}

uint64_t destroy for Service(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for Service(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v8 = a2 + 6;
  v7 = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = a2[7];
    a1[6] = v7;
    a1[7] = v9;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 3) = *v8;
  }
  return a1;
}

_QWORD *assignWithCopy for Service(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[6];
  if (!a1[6])
  {
    if (v4)
    {
      a1[6] = v4;
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      return a1;
    }
LABEL_7:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    return a1;
  }
  if (!v4)
  {
    sub_1832548C0((uint64_t)(a1 + 6));
    goto LABEL_7;
  }
  a1[6] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *assignWithTake for Service(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[6];
  if (!a1[6])
    goto LABEL_5;
  if (!v7)
  {
    sub_1832548C0((uint64_t)(a1 + 6));
LABEL_5:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    return a1;
  }
  a1[6] = v7;
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Service(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Service(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Service()
{
  return &type metadata for Service;
}

void type metadata accessor for Listener1()
{
  JUMPOUT(0x186DB54C8);
}

uint64_t method lookup function for Listener1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Listener1.__allocating_init(using:ready:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of Listener1.__allocating_init(for:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

void sub_18329CFC0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDCDDB68[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDDA98);
    v0 = sub_183B91CF8();
    if (!v1)
      atomic_store(v0, qword_1EDCDDB68);
  }
}

void type metadata accessor for Listener2()
{
  JUMPOUT(0x186DB54C8);
}

uint64_t method lookup function for Listener2()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Listener2.__allocating_init(for:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

void type metadata accessor for Listener3()
{
  JUMPOUT(0x186DB54C8);
}

uint64_t method lookup function for Listener3()
{
  return swift_lookUpClassMethod();
}

void sub_18329D060()
{
  unint64_t v0;

  sub_18329CFC0();
  if (v0 <= 0x3F)
    type metadata accessor for Connection1();
}

void type metadata accessor for Listener4()
{
  JUMPOUT(0x186DB54C8);
}

uint64_t method lookup function for Listener4()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_18329D15C()
{
  return sub_18329D284(&qword_1EDCDDAD8, qword_1EDCDDAE0);
}

unint64_t sub_18329D170()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECD840F0;
  if (!qword_1ECD840F0)
  {
    v1 = sub_183B915FC();
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&qword_1ECD840F0);
  }
  return result;
}

uint64_t sub_18329D1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDAB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18329D200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDAB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_18329D24C()
{
  sub_18329D2E0();
}

void sub_18329D258()
{
  sub_18329D350();
}

uint64_t sub_18329D270()
{
  return sub_18329D284(&qword_1EDCDDAC8, &qword_1EDCDDAD0);
}

uint64_t sub_18329D284(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDA98) - 8) + 80);
  return sub_18329C65C(*(_QWORD *)(v2 + 56), v2 + ((v5 + 64) & ~v5), a1, a2);
}

void sub_18329D2E0()
{
  type metadata accessor for Connection1();
}

void sub_18329D314()
{
  sub_183B91A7C();
  sub_18329C024();
}

void sub_18329D350()
{
  sub_18329C2B8();
}

uint64_t sub_18329D374()
{
  return sub_18329D284(&qword_1EDCDDAB8, &qword_1EDCDDAC0);
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDA98);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_18329D40C()
{
  return sub_18329D284(&qword_1EDCDDA90, &qword_1EDCDDAA0);
}

void objectdestroy_14Tm()
{
  type metadata accessor for Connection1();
}

uint64_t sub_18329D45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_183B91A7C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t dispatch thunk of Listener2.__allocating_init(using:ready:)()
{
  return dispatch thunk of Listener1.__allocating_init(using:ready:)();
}

uint64_t dispatch thunk of Listener3.__allocating_init(for:ready:)()
{
  return dispatch thunk of Listener1.__allocating_init(using:ready:)();
}

uint64_t dispatch thunk of Listener4.__allocating_init(with:ready:)()
{
  return dispatch thunk of Listener1.__allocating_init(using:ready:)();
}

uint64_t dispatch thunk of Listener3.__allocating_init(on:for:)()
{
  return dispatch thunk of Listener2.__allocating_init(for:using:)();
}

uint64_t dispatch thunk of Listener4.__allocating_init(for:with:)()
{
  return dispatch thunk of Listener2.__allocating_init(for:using:)();
}

void static HTTPField.Name.cookie.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x65696B6F6F43;
  a1[1] = 0xE600000000000000;
  a1[2] = 0x65696B6F6F63;
  a1[3] = 0xE600000000000000;
}

uint64_t static HTTPField.Name.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
    return 1;
  else
    return sub_183B920F4();
}

uint64_t sub_18329D5BC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  v4 = a2 >> 14;
  if (a2 >> 14 == a1 >> 14)
    return 0;
  v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = 4 << v9;
  if ((a4 & 0x2000000000000000) != 0)
    v11 = HIBYTE(a4) & 0xF;
  else
    v11 = a3 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  v12 = a1;
  while (2)
  {
    v13 = sub_183B91D04();
    if ((v12 & 0xC) == v10)
    {
      v12 = sub_18329687C(v12, a3, a4);
      if ((a4 & 0x1000000000000000) == 0)
      {
LABEL_11:
        v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_15;
      }
    }
    else if ((a4 & 0x1000000000000000) == 0)
    {
      goto LABEL_11;
    }
    if (v11 <= v12 >> 16)
    {
      __break(1u);
      JUMPOUT(0x18329D73CLL);
    }
    v12 = sub_183B91818();
LABEL_15:
    switch(v13)
    {
      case '!':
      case '#':
      case '$':
      case '%':
      case '&':
      case '\'':
      case '*':
      case '+':
      case '-':
      case '.':
      case '^':
      case '_':
      case '|':
      case '~':
        goto LABEL_16;
      default:
        if ((v13 - 58) > 0xF5u
          || (v13 - 91) > 0xE5u
          || (v13 - 123) >= 0xE6u)
        {
LABEL_16:
          if (v4 == v12 >> 14)
          {
            v5 = 1;
            goto LABEL_22;
          }
          continue;
        }
        v5 = 0;
LABEL_22:
        swift_bridgeObjectRelease();
        return v5;
    }
  }
}

uint64_t sub_18329D8B4(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v15[2];
  uint64_t v16;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v5 = (a1 >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0)
      LOBYTE(v5) = 1;
    v6 = 4 << v5;
    v16 = a2 & 0xFFFFFFFFFFFFFFLL;
    v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v8 = 15;
    while (1)
    {
      v9 = v8 & 0xC;
      v10 = v8;
      if (v9 == v6)
        v10 = sub_18329687C(v8, a1, a2);
      v11 = v10 >> 16;
      if (v10 >> 16 >= v2)
      {
        __break(1u);
LABEL_33:
        __break(1u);
        JUMPOUT(0x18329DAA8);
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v13 = sub_183B91848();
        if (v9 != v6)
          goto LABEL_18;
      }
      else if ((a2 & 0x2000000000000000) != 0)
      {
        v15[0] = a1;
        v15[1] = v16;
        v13 = *((_BYTE *)v15 + v11);
        if (v9 != v6)
          goto LABEL_18;
      }
      else
      {
        v12 = v7;
        if ((a1 & 0x1000000000000000) == 0)
          v12 = sub_183B91E78();
        v13 = *(_BYTE *)(v12 + v11);
        if (v9 != v6)
        {
LABEL_18:
          if ((a2 & 0x1000000000000000) != 0)
            goto LABEL_22;
          goto LABEL_19;
        }
      }
      v8 = sub_18329687C(v8, a1, a2);
      if ((a2 & 0x1000000000000000) != 0)
      {
LABEL_22:
        if (v2 <= v8 >> 16)
          goto LABEL_33;
        v8 = sub_183B91818();
        goto LABEL_24;
      }
LABEL_19:
      v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_24:
      switch(v13)
      {
        case '!':
        case '#':
        case '$':
        case '%':
        case '&':
        case '\'':
        case '*':
        case '+':
        case '-':
        case '.':
        case '^':
        case '_':
        case '|':
        case '~':
          goto LABEL_25;
        default:
          if ((v13 - 58) <= 0xF5u
            && (v13 - 91) <= 0xE5u
            && (v13 - 123) < 0xE6u)
          {
            return 0;
          }
LABEL_25:
          if (4 * v2 == v8 >> 14)
            return 1;
          break;
      }
    }
  }
  return 1;
}

uint64_t HTTPField.Name.rawName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HTTPField.Name.canonicalName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

double HTTPField.Name.init(_:)@<D0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  double result;
  unint64_t v9;

  v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  if (v5 && (sub_18329D8B4(a1, a2) & 1) != 0)
  {
    v7 = sub_183B91740();
    *a3 = a1;
    a3[1] = a2;
    a3[2] = v7;
    a3[3] = v9;
  }
  else
  {
    swift_bridgeObjectRelease();
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

uint64_t HTTPField.Name.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t HTTPField.Name.hashValue.getter()
{
  sub_183B92250();
  sub_183B917C4();
  return sub_183B9228C();
}

uint64_t sub_18329DD84()
{
  sub_183B92250();
  sub_183B917C4();
  return sub_183B9228C();
}

uint64_t sub_18329DDCC()
{
  return sub_183B917C4();
}

uint64_t sub_18329DDD4()
{
  sub_183B92250();
  sub_183B917C4();
  return sub_183B9228C();
}

uint64_t sub_18329DE18(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
    return 1;
  else
    return sub_183B920F4();
}

uint64_t sub_18329DE4C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HTTPField.Name.playgroundDescription.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  v2 = v1[1];
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = v3;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18329DE90@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  v2 = v1[1];
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = v3;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t HTTPField.Name.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183B92304();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_183B92118();
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v2);
}

uint64_t HTTPField.Name.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[4];

  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183B922D4();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_2(v23, v23[3]);
    v5 = sub_183B9210C();
    v7 = v6;
    if ((sub_183B91860() & 1) != 0)
    {
      if (sub_183B91740() == v5 && v8 == v7)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v10 = sub_183B920F4();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0)
          goto LABEL_20;
      }
      swift_bridgeObjectRetain();
      v15 = sub_18329EF50(1uLL, v5, v7);
      v17 = v16;
      v19 = v18;
      v21 = v20;
      swift_bridgeObjectRelease();
      LOBYTE(v15) = sub_18329D5BC(v15, v17, v19, v21);
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
LABEL_20:
        sub_183B91DB8();
        sub_183B917F4();
LABEL_21:
        sub_183B917F4();
        swift_bridgeObjectRelease();
        sub_183B917F4();
        sub_183B91E54();
        swift_allocError();
        sub_183B91E24();
        swift_bridgeObjectRelease();
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v23);
        return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
      }
      swift_bridgeObjectRetain();
      v12 = v5;
      v14 = v7;
    }
    else
    {
      v11 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v11 = v5 & 0xFFFFFFFFFFFFLL;
      if (!v11 || (sub_18329D8B4(v5, v7) & 1) == 0)
      {
        sub_183B91DB8();
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      v12 = sub_183B91740();
      v14 = v13;
    }
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v23);
    *a2 = v5;
    a2[1] = v7;
    a2[2] = v12;
    a2[3] = v14;
  }
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
}

uint64_t sub_18329E218@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return HTTPField.Name.init(from:)(a1, a2);
}

uint64_t sub_18329E22C(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183B92304();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_183B92118();
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v2);
}

void static HTTPField.Name.accept.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x747065636341;
  a1[1] = 0xE600000000000000;
  a1[2] = 0x747065636361;
  a1[3] = 0xE600000000000000;
}

void static HTTPField.Name.acceptEncoding.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x452D747065636341;
  a1[1] = 0xEF676E69646F636ELL;
  a1[2] = 0x652D747065636361;
  a1[3] = 0xEF676E69646F636ELL;
}

void static HTTPField.Name.acceptLanguage.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4C2D747065636341;
  a1[1] = 0xEF65676175676E61;
  a1[2] = 0x6C2D747065636361;
  a1[3] = 0xEF65676175676E61;
}

void static HTTPField.Name.acceptRanges.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "Accept-Ranges");
  *(_WORD *)(a1 + 14) = -4864;
  strcpy((char *)(a1 + 16), "accept-ranges");
  *(_WORD *)(a1 + 30) = -4864;
}

void static HTTPField.Name.accessControlAllowCredentials.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000020;
  a1[1] = 0x8000000183C70B80;
  a1[2] = 0xD000000000000020;
  a1[3] = 0x8000000183C70BB0;
}

void static HTTPField.Name.accessControlAllowHeaders.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x8000000183C70BE0;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x8000000183C70C00;
}

void static HTTPField.Name.accessControlAllowMethods.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x8000000183C70C20;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x8000000183C70C40;
}

void static HTTPField.Name.accessControlAllowOrigin.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001BLL;
  a1[1] = 0x8000000183C70C60;
  a1[2] = 0xD00000000000001BLL;
  a1[3] = 0x8000000183C70C80;
}

void static HTTPField.Name.accessControlExposeHeaders.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x8000000183C70CA0;
  a1[2] = 0xD00000000000001DLL;
  a1[3] = 0x8000000183C70CC0;
}

void static HTTPField.Name.accessControlMaxAge.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x8000000183C70CE0;
  a1[2] = 0xD000000000000016;
  a1[3] = 0x8000000183C70D00;
}

void static HTTPField.Name.accessControlRequestHeaders.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ELL;
  a1[1] = 0x8000000183C70D20;
  a1[2] = 0xD00000000000001ELL;
  a1[3] = 0x8000000183C70D40;
}

void static HTTPField.Name.accessControlRequestMethod.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x8000000183C70D60;
  a1[2] = 0xD00000000000001DLL;
  a1[3] = 0x8000000183C70D80;
}

void static HTTPField.Name.age.getter(_QWORD *a1@<X8>)
{
  *a1 = 6645569;
  a1[1] = 0xE300000000000000;
  a1[2] = 6645601;
  a1[3] = 0xE300000000000000;
}

void static HTTPField.Name.allow.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x776F6C6C41;
  a1[1] = 0xE500000000000000;
  a1[2] = 0x776F6C6C61;
  a1[3] = 0xE500000000000000;
}

void static HTTPField.Name.authenticationInfo.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x8000000183C70DA0;
  a1[2] = 0xD000000000000013;
  a1[3] = 0x8000000183C70DC0;
}

void static HTTPField.Name.authorization.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "Authorization");
  *(_WORD *)(a1 + 14) = -4864;
  strcpy((char *)(a1 + 16), "authorization");
  *(_WORD *)(a1 + 30) = -4864;
}

void static HTTPField.Name.cacheControl.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "Cache-Control");
  *(_WORD *)(a1 + 14) = -4864;
  strcpy((char *)(a1 + 16), "cache-control");
  *(_WORD *)(a1 + 30) = -4864;
}

void static HTTPField.Name.connection.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x697463656E6E6F43;
  a1[1] = 0xEA00000000006E6FLL;
  a1[2] = 0x697463656E6E6F63;
  a1[3] = 0xEA00000000006E6FLL;
}

void static HTTPField.Name.contentDisposition.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x8000000183C70DE0;
  a1[2] = 0xD000000000000013;
  a1[3] = 0x8000000183C70E00;
}

void static HTTPField.Name.contentEncoding.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x8000000183C70E20;
  a1[2] = 0xD000000000000010;
  a1[3] = 0x8000000183C70E40;
}

void static HTTPField.Name.contentLanguage.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x8000000183C70E60;
  a1[2] = 0xD000000000000010;
  a1[3] = 0x8000000183C70E80;
}

void static HTTPField.Name.contentLength.getter(char *a1@<X8>)
{
  strcpy(a1, "Content-Length");
  a1[15] = -18;
  strcpy(a1 + 16, "content-length");
  a1[31] = -18;
}

void static HTTPField.Name.contentLocation.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x8000000183C70EA0;
  a1[2] = 0xD000000000000010;
  a1[3] = 0x8000000183C70EC0;
}

void static HTTPField.Name.contentRange.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "Content-Range");
  *(_WORD *)(a1 + 14) = -4864;
  strcpy((char *)(a1 + 16), "content-range");
  *(_WORD *)(a1 + 30) = -4864;
}

void static HTTPField.Name.contentSecurityPolicy.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x8000000183C70EE0;
  a1[2] = 0xD000000000000017;
  a1[3] = 0x8000000183C70F00;
}

void static HTTPField.Name.contentSecurityPolicyReportOnly.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000023;
  a1[1] = 0x8000000183C70F20;
  a1[2] = 0xD000000000000023;
  a1[3] = 0x8000000183C70F50;
}

void static HTTPField.Name.contentType.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "Content-Type");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  strcpy((char *)(a1 + 16), "content-type");
  *(_BYTE *)(a1 + 29) = 0;
  *(_WORD *)(a1 + 30) = -5120;
}

void static HTTPField.Name.crossOriginResourcePolicy.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x8000000183C70F80;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x8000000183C70FA0;
}

void static HTTPField.Name.date.getter(_QWORD *a1@<X8>)
{
  *a1 = 1702125892;
  a1[1] = 0xE400000000000000;
  a1[2] = 1702125924;
  a1[3] = 0xE400000000000000;
}

void static HTTPField.Name.earlyData.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x61442D796C726145;
  a1[1] = 0xEA00000000006174;
  a1[2] = 0x61642D796C726165;
  a1[3] = 0xEA00000000006174;
}

void static HTTPField.Name.eTag.getter(_QWORD *a1@<X8>)
{
  *a1 = 1734431813;
  a1[1] = 0xE400000000000000;
  a1[2] = 1734440037;
  a1[3] = 0xE400000000000000;
}

void static HTTPField.Name.expect.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x746365707845;
  a1[1] = 0xE600000000000000;
  a1[2] = 0x746365707865;
  a1[3] = 0xE600000000000000;
}

void static HTTPField.Name.expires.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x73657269707845;
  a1[1] = 0xE700000000000000;
  a1[2] = 0x73657269707865;
  a1[3] = 0xE700000000000000;
}

void static HTTPField.Name.from.getter(_QWORD *a1@<X8>)
{
  *a1 = 1836020294;
  a1[1] = 0xE400000000000000;
  a1[2] = 1836020326;
  a1[3] = 0xE400000000000000;
}

void static HTTPField.Name.host.getter(_QWORD *a1@<X8>)
{
  *a1 = 1953722184;
  a1[1] = 0xE400000000000000;
  a1[2] = 1953722216;
  a1[3] = 0xE400000000000000;
}

void static HTTPField.Name.ifMatch.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x686374614D2D6649;
  a1[1] = 0xE800000000000000;
  a1[2] = 0x686374616D2D6669;
  a1[3] = 0xE800000000000000;
}

void static HTTPField.Name.ifModifiedSince.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x8000000183C70FC0;
  a1[2] = 0xD000000000000011;
  a1[3] = 0x8000000183C70FE0;
}

void static HTTPField.Name.ifNoneMatch.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "If-None-Match");
  *(_WORD *)(a1 + 14) = -4864;
  strcpy((char *)(a1 + 16), "if-none-match");
  *(_WORD *)(a1 + 30) = -4864;
}

void static HTTPField.Name.ifRange.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x65676E61522D6649;
  a1[1] = 0xE800000000000000;
  a1[2] = 0x65676E61722D6669;
  a1[3] = 0xE800000000000000;
}

void static HTTPField.Name.ifUnmodifiedSince.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x8000000183C71000;
  a1[2] = 0xD000000000000013;
  a1[3] = 0x8000000183C71020;
}

void static HTTPField.Name.lastModified.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "Last-Modified");
  *(_WORD *)(a1 + 14) = -4864;
  strcpy((char *)(a1 + 16), "last-modified");
  *(_WORD *)(a1 + 30) = -4864;
}

void static HTTPField.Name.location.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F697461636F4CLL;
  a1[1] = 0xE800000000000000;
  a1[2] = 0x6E6F697461636F6CLL;
  a1[3] = 0xE800000000000000;
}

void static HTTPField.Name.maxForwards.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "Max-Forwards");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  strcpy((char *)(a1 + 16), "max-forwards");
  *(_BYTE *)(a1 + 29) = 0;
  *(_WORD *)(a1 + 30) = -5120;
}

void static HTTPField.Name.origin.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6E696769724FLL;
  a1[1] = 0xE600000000000000;
  a1[2] = 0x6E696769726FLL;
  a1[3] = 0xE600000000000000;
}

void static HTTPField.Name.priority.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x797469726F697250;
  a1[1] = 0xE800000000000000;
  a1[2] = 0x797469726F697270;
  a1[3] = 0xE800000000000000;
}

void static HTTPField.Name.proxyAuthenticate.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x8000000183C71040;
  a1[2] = 0xD000000000000012;
  a1[3] = 0x8000000183C71060;
}

void static HTTPField.Name.proxyAuthenticationInfo.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000019;
  a1[1] = 0x8000000183C71080;
  a1[2] = 0xD000000000000019;
  a1[3] = 0x8000000183C710A0;
}

void static HTTPField.Name.proxyAuthorization.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x8000000183C710C0;
  a1[2] = 0xD000000000000013;
  a1[3] = 0x8000000183C710E0;
}

void static HTTPField.Name.range.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x65676E6152;
  a1[1] = 0xE500000000000000;
  a1[2] = 0x65676E6172;
  a1[3] = 0xE500000000000000;
}

void static HTTPField.Name.referer.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x72657265666552;
  a1[1] = 0xE700000000000000;
  a1[2] = 0x72657265666572;
  a1[3] = 0xE700000000000000;
}

void static HTTPField.Name.retryAfter.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x66412D7972746552;
  a1[1] = 0xEB00000000726574;
  a1[2] = 0x66612D7972746572;
  a1[3] = 0xEB00000000726574;
}

void static HTTPField.Name.secPurpose.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x707275502D636553;
  a1[1] = 0xEB0000000065736FLL;
  a1[2] = 0x707275702D636573;
  a1[3] = 0xEB0000000065736FLL;
}

void static HTTPField.Name.secWebSocketAccept.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x8000000183C71100;
  a1[2] = 0xD000000000000014;
  a1[3] = 0x8000000183C71120;
}

void static HTTPField.Name.secWebSocketExtensions.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x8000000183C71140;
  a1[2] = 0xD000000000000018;
  a1[3] = 0x8000000183C71160;
}

void static HTTPField.Name.secWebSocketKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x8000000183C71180;
  a1[2] = 0xD000000000000011;
  a1[3] = 0x8000000183C711A0;
}

void static HTTPField.Name.secWebSocketProtocol.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x8000000183C711C0;
  a1[2] = 0xD000000000000016;
  a1[3] = 0x8000000183C711E0;
}

void static HTTPField.Name.secWebSocketVersion.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x8000000183C71200;
  a1[2] = 0xD000000000000015;
  a1[3] = 0x8000000183C71220;
}

void static HTTPField.Name.server.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x726576726553;
  a1[1] = 0xE600000000000000;
  a1[2] = 0x726576726573;
  a1[3] = 0xE600000000000000;
}

void static HTTPField.Name.setCookie.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6B6F6F432D746553;
  a1[1] = 0xEA00000000006569;
  a1[2] = 0x6B6F6F632D746573;
  a1[3] = 0xEA00000000006569;
}

void static HTTPField.Name.strictTransportSecurity.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000019;
  a1[1] = 0x8000000183C71240;
  a1[2] = 0xD000000000000019;
  a1[3] = 0x8000000183C71260;
}

void static HTTPField.Name.te.getter(_QWORD *a1@<X8>)
{
  *a1 = 17748;
  a1[1] = 0xE200000000000000;
  a1[2] = 25972;
  a1[3] = 0xE200000000000000;
}

void static HTTPField.Name.trailer.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x72656C69617254;
  a1[1] = 0xE700000000000000;
  a1[2] = 0x72656C69617274;
  a1[3] = 0xE700000000000000;
}

void static HTTPField.Name.transferEncoding.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x8000000183C71280;
  a1[2] = 0xD000000000000011;
  a1[3] = 0x8000000183C712A0;
}

void static HTTPField.Name.upgrade.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x65646172677055;
  a1[1] = 0xE700000000000000;
  a1[2] = 0x65646172677075;
  a1[3] = 0xE700000000000000;
}

void static HTTPField.Name.userAgent.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6567412D72657355;
  a1[1] = 0xEA0000000000746ELL;
  a1[2] = 0x6567612D72657375;
  a1[3] = 0xEA0000000000746ELL;
}

void static HTTPField.Name.vary.getter(_QWORD *a1@<X8>)
{
  *a1 = 2037539158;
  a1[1] = 0xE400000000000000;
  a1[2] = 2037539190;
  a1[3] = 0xE400000000000000;
}

void static HTTPField.Name.via.getter(_QWORD *a1@<X8>)
{
  *a1 = 6383958;
  a1[1] = 0xE300000000000000;
  a1[2] = 6383990;
  a1[3] = 0xE300000000000000;
}

void static HTTPField.Name.wwwAuthenticate.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x8000000183C712C0;
  a1[2] = 0xD000000000000010;
  a1[3] = 0x8000000183C712E0;
}

void static HTTPField.Name.xContentTypeOptions.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x8000000183C71300;
  a1[2] = 0xD000000000000016;
  a1[3] = 0x8000000183C71320;
}

unint64_t sub_18329EF50(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = sub_183B917E8();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return sub_183B91884();
  }
  __break(1u);
  return result;
}

unint64_t sub_18329EFF0()
{
  unint64_t result;

  result = qword_1EDCDDD00;
  if (!qword_1EDCDDD00)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPField.Name, &type metadata for HTTPField.Name);
    atomic_store(result, (unint64_t *)&qword_1EDCDDD00);
  }
  return result;
}

unint64_t sub_18329F038()
{
  unint64_t result;

  result = qword_1EDCDDD08;
  if (!qword_1EDCDDD08)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPField.Name, &type metadata for HTTPField.Name);
    atomic_store(result, (unint64_t *)&qword_1EDCDDD08);
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPField.Name()
{
  return &type metadata for HTTPField.Name;
}

uint64_t dispatch thunk of NWActorPeer.addInterruptionHandler(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t destroy for HTTPParsedFields()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeWithCopy for HTTPParsedFields(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for HTTPParsedFields(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for HTTPParsedFields(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPParsedFields(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 96);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPParsedFields(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 96) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPParsedFields()
{
  return &type metadata for HTTPParsedFields;
}

uint64_t getEnumTagSinglePayload for HTTPParsedFields.ParsingError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPParsedFields.ParsingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_18329F4B0 + 4 * byte_183BA2C35[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_18329F4E4 + 4 * asc_183BA2C30[v4]))();
}

uint64_t sub_18329F4E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18329F4EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18329F4F4);
  return result;
}

uint64_t sub_18329F500(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18329F508);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_18329F50C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18329F514(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPParsedFields.ParsingError()
{
  return &type metadata for HTTPParsedFields.ParsingError;
}

unint64_t sub_18329F534()
{
  unint64_t result;

  result = qword_1EDCDDD10;
  if (!qword_1EDCDDD10)
  {
    result = MEMORY[0x186DB5558](&unk_183BA2CA0, &type metadata for HTTPParsedFields.ParsingError);
    atomic_store(result, (unint64_t *)&qword_1EDCDDD10);
  }
  return result;
}

unint64_t sub_18329F578(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  v5 = 4 * v4;
  v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  v7 = 4 << v6;
  v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v8 = 15;
  while (1)
  {
    v9 = v8 >> 14;
    if (v8 >> 14 == v5)
      return v9 == v5;
    v10 = v8 & 0xC;
    result = v8;
    if (v10 == v7)
      result = sub_18329687C(v8, a1, a2);
    v12 = result >> 16;
    if (result >> 16 >= v4)
      break;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = sub_183B91848();
      v13 = result;
      if (v10 != v7)
        goto LABEL_18;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v15[0] = a1;
      v15[1] = v16;
      v13 = *((_BYTE *)v15 + v12);
      if (v10 != v7)
        goto LABEL_18;
    }
    else
    {
      result = v14;
      if ((a1 & 0x1000000000000000) == 0)
        result = sub_183B91E78();
      v13 = *(_BYTE *)(result + v12);
      if (v10 != v7)
      {
LABEL_18:
        if ((a2 & 0x1000000000000000) != 0)
          goto LABEL_22;
        goto LABEL_19;
      }
    }
    result = sub_18329687C(v8, a1, a2);
    v8 = result;
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_22:
      if (v4 <= v8 >> 16)
        goto LABEL_28;
      v8 = sub_183B91818();
      goto LABEL_24;
    }
LABEL_19:
    v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_24:
    if (v13 == 10 || v13 == 13)
      return v9 == v5;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_18329F714(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  char *v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  char v27;
  uint64_t v28;
  uint64_t v29;

  swift_bridgeObjectRetain();
  v9 = sub_18329FBD4(a1, a2);
  v11 = v10;
  swift_bridgeObjectRelease();
  if (!v11)
  {
LABEL_20:
    sub_1832A1EEC();
    swift_allocError();
    v15 = 0;
    goto LABEL_21;
  }
  if (v9 == 58 && v11 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v12 = sub_183B920F4();
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
    v17 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v17 = a1 & 0xFFFFFFFFFFFFLL;
    if (v17 && (sub_18329D8B4(a1, a2) & 1) != 0)
    {
      v18 = sub_183B91740();
      v20 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21 = sub_1832A1D8C(a3, a4);
      v23 = v22;
      v24 = v4[12];
      swift_beginAccess();
      v25 = *(_QWORD *)(*(_QWORD *)(v24 + 16) + 16);
      v26[0] = a1;
      v26[1] = a2;
      v26[2] = v18;
      v26[3] = v20;
      v27 = 0;
      v28 = v21;
      v29 = v23;
      sub_183294730(v25, v25, (uint64_t)v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_20;
  }
LABEL_6:
  v13 = v4[12];
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v13 + 16) + 16))
  {
    if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(a3, a4))
    {
      sub_1832A1EEC();
      swift_allocError();
      v15 = 2;
      goto LABEL_21;
    }
    if (a1 == 0x646F6874656D3ALL && a2 == 0xE700000000000000 || (sub_183B920F4() & 1) != 0)
    {
      if (!v4[1])
      {
        *v4 = a3;
        v4[1] = a4;
        return swift_bridgeObjectRetain();
      }
    }
    else if (a1 == 0x656D656863733ALL && a2 == 0xE700000000000000 || (sub_183B920F4() & 1) != 0)
    {
      if (!v4[3])
      {
        v4[2] = a3;
        v4[3] = a4;
        return swift_bridgeObjectRetain();
      }
    }
    else if (a1 == 0x69726F687475613ALL && a2 == 0xEA00000000007974 || (sub_183B920F4() & 1) != 0)
    {
      if (!v4[5])
      {
        v4[4] = a3;
        v4[5] = a4;
        return swift_bridgeObjectRetain();
      }
    }
    else if (a1 == 0x687461703ALL && a2 == 0xE500000000000000 || (sub_183B920F4() & 1) != 0)
    {
      if (!v4[7])
      {
        v4[6] = a3;
        v4[7] = a4;
        return swift_bridgeObjectRetain();
      }
    }
    else if (a1 == 0x6F636F746F72703ALL && a2 == 0xE90000000000006CLL || (sub_183B920F4() & 1) != 0)
    {
      if (!v4[9])
      {
        v4[8] = a3;
        v4[9] = a4;
        return swift_bridgeObjectRetain();
      }
    }
    else
    {
      if ((a1 != 0x7375746174733ALL || a2 != 0xE700000000000000) && (sub_183B920F4() & 1) == 0)
      {
        sub_1832A1EEC();
        swift_allocError();
        v15 = 1;
        goto LABEL_21;
      }
      if (!v4[11])
      {
        v4[10] = a3;
        v4[11] = a4;
        return swift_bridgeObjectRetain();
      }
    }
    sub_1832A1EEC();
    swift_allocError();
    v15 = 3;
    goto LABEL_21;
  }
  sub_1832A1EEC();
  swift_allocError();
  v15 = 4;
LABEL_21:
  *v14 = v15;
  return swift_willThrow();
}

uint64_t sub_18329FBD4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return sub_183B9186C();
  else
    return 0;
}

uint64_t sub_18329FC14()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  _QWORD *v4;
  char v5;
  _QWORD *v6;
  char v7;
  uint64_t result;
  char v9;
  char *v10;
  _QWORD v11[2];
  _QWORD v12[2];
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 96);
  strcpy((char *)v11, "Content-Length");
  HIBYTE(v11[1]) = -18;
  strcpy((char *)v12, "content-length");
  HIBYTE(v12[1]) = -18;
  v13 = v1;
  v2 = (_QWORD *)HTTPFields.subscript.getter((uint64_t)v11);
  v3 = sub_18329FD80(v2);
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    v11[0] = 0xD000000000000013;
    v11[1] = 0x8000000183C70DE0;
    v12[0] = 0xD000000000000013;
    v12[1] = 0x8000000183C70E00;
    v13 = v1;
    v4 = (_QWORD *)HTTPFields.subscript.getter((uint64_t)v11);
    v5 = sub_18329FD80(v4);
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
    {
      strcpy((char *)v11, "Location");
      BYTE1(v11[1]) = 0;
      WORD1(v11[1]) = 0;
      HIDWORD(v11[1]) = -402653184;
      strcpy((char *)v12, "location");
      BYTE1(v12[1]) = 0;
      WORD1(v12[1]) = 0;
      HIDWORD(v12[1]) = -402653184;
      v13 = v1;
      v6 = (_QWORD *)HTTPFields.subscript.getter((uint64_t)v11);
      v7 = sub_18329FD80(v6);
      result = swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
        return result;
      v9 = 14;
    }
    else
    {
      v9 = 13;
    }
  }
  else
  {
    v9 = 12;
  }
  sub_1832A1EEC();
  swift_allocError();
  *v10 = v9;
  return swift_willThrow();
}

uint64_t sub_18329FD80(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  BOOL v7;

  v1 = a1[2];
  if (!v1)
    return 1;
  v2 = v1 - 1;
  if (v1 == 1)
    return 1;
  v4 = a1[4];
  v5 = a1[5];
  for (i = a1 + 7; ; i += 2)
  {
    v7 = *(i - 1) == v4 && *i == v5;
    if (!v7 && (sub_183B920F4() & 1) == 0)
      break;
    if (!--v2)
      return 1;
  }
  return 0;
}

uint64_t sub_18329FDF8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t result;

  swift_bridgeObjectRelease();
  *v0 = 0;
  v0[1] = 0;
  swift_bridgeObjectRelease();
  v0[2] = 0;
  v0[3] = 0;
  swift_bridgeObjectRelease();
  v0[4] = 0;
  v0[5] = 0;
  swift_bridgeObjectRelease();
  v0[6] = 0;
  v0[7] = 0;
  swift_bridgeObjectRelease();
  v0[8] = 0;
  v0[9] = 0;
  swift_bridgeObjectRelease();
  type metadata accessor for HTTPFields._Storage();
  v0[10] = 0;
  v0[11] = 0;
  v1 = (_QWORD *)swift_allocObject();
  v2 = MEMORY[0x1E0DEE9D8];
  v1[2] = MEMORY[0x1E0DEE9D8];
  v1[3] = sub_1832F2514(v2);
  v3 = (_DWORD *)swift_slowAlloc();
  v1[4] = v3;
  *v3 = 0;
  result = swift_release();
  v0[12] = v1;
  return result;
}

uint64_t sub_18329FEA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(_QWORD *)(v1 + 8);
  if (!v3)
  {
    sub_1832A1EEC();
    swift_allocError();
    v8 = 5;
    goto LABEL_10;
  }
  v5 = *(_QWORD *)v1;
  v6 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v6 = *(_QWORD *)v1 & 0xFFFFFFFFFFFFLL;
  if (!v6 || (sub_18329D8B4(*(_QWORD *)v1, *(_QWORD *)(v1 + 8)) & 1) == 0)
  {
    sub_1832A1EEC();
    swift_allocError();
    v8 = 6;
    goto LABEL_10;
  }
  if (*(_QWORD *)(v1 + 88))
  {
    sub_1832A1EEC();
    swift_allocError();
    v8 = 7;
LABEL_10:
    *v7 = v8;
    swift_willThrow();
    return sub_18329FDF8();
  }
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 32);
  v12 = *(_QWORD *)(v1 + 24);
  v28 = *(_QWORD *)(v1 + 40);
  v29 = *(_QWORD *)(v1 + 56);
  v25 = *(_QWORD *)(v1 + 48);
  v26 = *(_QWORD *)(v1 + 64);
  v27 = *(_OWORD *)(v1 + 72);
  v30 = *(_QWORD *)(v1 + 96);
  swift_bridgeObjectRetain();
  sub_18329FC14();
  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a1 = 0x646F6874656D3ALL;
    *(_QWORD *)(a1 + 8) = 0xE700000000000000;
    v13 = 0x656D656863733ALL;
    if (v12)
    {
      v14 = 0xE700000000000000;
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    if (v12)
      v15 = v10;
    else
      v15 = 0;
    *(_QWORD *)(a1 + 16) = 0x646F6874656D3ALL;
    *(_QWORD *)(a1 + 24) = 0xE700000000000000;
    v16 = 0x69726F687475613ALL;
    *(_BYTE *)(a1 + 32) = 0;
    if (!v28)
      v16 = 0;
    v17 = 0xEA00000000007974;
    if (v28)
    {
      v18 = v11;
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = v3;
    v19 = 0x687461703ALL;
    if (!v29)
      v19 = 0;
    v20 = 0xE500000000000000;
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v14;
    if (!v29)
      v20 = 0;
    v21 = v25;
    if (!v29)
      v21 = 0;
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v14;
    v22 = 0x6F636F746F72703ALL;
    if (!(_QWORD)v27)
      v22 = 0;
    v23 = 0xE90000000000006CLL;
    if (!(_QWORD)v27)
      v23 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = v15;
    v24 = v26;
    if (!(_QWORD)v27)
      v24 = 0;
    *(_QWORD *)(a1 + 104) = v12;
    *(_QWORD *)(a1 + 112) = v16;
    *(_QWORD *)(a1 + 120) = v17;
    *(_QWORD *)(a1 + 128) = v16;
    *(_QWORD *)(a1 + 136) = v17;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = v18;
    *(_QWORD *)(a1 + 160) = v28;
    *(_QWORD *)(a1 + 168) = v19;
    *(_QWORD *)(a1 + 176) = v20;
    *(_QWORD *)(a1 + 184) = v19;
    *(_QWORD *)(a1 + 192) = v20;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = v21;
    *(_QWORD *)(a1 + 216) = v29;
    *(_QWORD *)(a1 + 224) = v22;
    *(_QWORD *)(a1 + 232) = v23;
    *(_QWORD *)(a1 + 240) = v22;
    *(_QWORD *)(a1 + 248) = v23;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = v24;
    *(_QWORD *)(a1 + 272) = v27;
    *(_QWORD *)(a1 + 280) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  return sub_18329FDF8();
}

uint64_t sub_1832A0150@<X0>(uint64_t a1@<X8>)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  char *v6;
  char v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  int *(*v11)@<X0>(int *@<X0>, int *@<X8>);
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *i;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  int *(*v41)@<X0>(int *@<X0>, int *@<X8>);
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;

  v3 = v1;
  v4 = v1[11];
  if (!v4)
  {
    sub_1832A1EEC();
    swift_allocError();
    v7 = 8;
    goto LABEL_9;
  }
  if (v1[1] || v1[3] || v1[5] || v1[7] || v1[9])
  {
    sub_1832A1EEC();
    swift_allocError();
    v7 = 10;
LABEL_9:
    *v6 = v7;
    swift_willThrow();
    return sub_18329FDF8();
  }
  v9 = v1[10];
  v10 = *v3;
  v11 = (int *(*)@<X0>(int *@<X0>, int *@<X8>))v3[2];
  v12 = v3[4];
  v13 = v3[6];
  v51 = v3[8];
  swift_bridgeObjectRetain();
  if (sub_183B917D0() != 3 || (sub_1832D9CC0(v9, v4) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_1832A1EEC();
    swift_allocError();
    v7 = 9;
    goto LABEL_9;
  }
  v14 = v3[12];
  v39 = v10;
  v40 = 0;
  v41 = v11;
  v42 = 0;
  v43 = v12;
  v44 = 0;
  v45 = v13;
  v46 = 0;
  v47 = v51;
  v48 = 0;
  v49 = *((_OWORD *)v3 + 5);
  v50 = v14;
  sub_18329FC14();
  if (v2)
  {
    swift_bridgeObjectRelease();
    return sub_18329FDF8();
  }
  v15 = HIBYTE(v4) & 0xF;
  result = v9;
  v16 = v9 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0)
    v17 = HIBYTE(v4) & 0xF;
  else
    v17 = v9 & 0xFFFFFFFFFFFFLL;
  if (!v17)
  {
    result = swift_bridgeObjectRelease();
    goto LABEL_71;
  }
  if ((v4 & 0x1000000000000000) != 0)
    goto LABEL_72;
  if ((v4 & 0x2000000000000000) == 0)
  {
    if ((v9 & 0x1000000000000000) == 0)
      goto LABEL_74;
    for (i = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32); ; i = (unsigned __int8 *)sub_183B91E78())
    {
      v19 = (uint64_t)sub_1832A136C(i, v16, 10);
      LOBYTE(v9) = v20 & 1;
LABEL_59:
      while (1)
      {
        result = swift_bridgeObjectRelease();
        if ((v9 & 1) == 0)
          break;
LABEL_71:
        __break(1u);
LABEL_72:
        v19 = sub_1832A07A0(result, v4, 10, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_1832A136C);
        LOBYTE(v9) = v38;
      }
      if ((unint64_t)v19 <= 0x3E7)
        break;
      __break(1u);
LABEL_74:
      ;
    }
    v30 = sub_1832D9E5C(0, 0xE000000000000000);
    if ((v30 & 1) == 0)
    {
      v39 = 0;
      v40 = 0xE000000000000000;
      v41 = sub_1832DA498;
      v42 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDD20);
      sub_1832A1F30();
      v30 = sub_183B91794();
    }
    v31 = v3[12];
    MEMORY[0x1E0C80A78](v30);
    swift_retain();
    swift_bridgeObjectRetain();
    v32 = sub_183B917B8();
    v34 = v33;
    swift_bridgeObjectRelease();
    *(_QWORD *)a1 = 0x7375746174733ALL;
    *(_QWORD *)(a1 + 8) = 0xE700000000000000;
    *(_QWORD *)(a1 + 16) = 0x7375746174733ALL;
    *(_QWORD *)(a1 + 24) = 0xE700000000000000;
    *(_BYTE *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v32;
    *(_QWORD *)(a1 + 48) = v34;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0xE000000000000000;
    *(_QWORD *)(a1 + 72) = v31;
    return sub_18329FDF8();
  }
  v39 = v9;
  v40 = v4 & 0xFFFFFFFFFFFFFFLL;
  if (v9 == 43)
  {
    if (!v15)
      goto LABEL_76;
    if (v15 == 1 || (BYTE1(v9) - 48) > 9u)
      goto LABEL_46;
    v19 = (BYTE1(v9) - 48);
    if (v15 != 2)
    {
      if ((BYTE2(v9) - 48) > 9u)
        goto LABEL_46;
      v19 = 10 * (BYTE1(v9) - 48) + (BYTE2(v9) - 48);
      v21 = v15 - 3;
      if (v21)
      {
        v22 = (unsigned __int8 *)&v39 + 3;
        while (1)
        {
          v23 = *v22 - 48;
          if (v23 > 9)
            goto LABEL_46;
          v24 = 10 * v19;
          if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63)
            goto LABEL_46;
          v19 = v24 + v23;
          if (__OFADD__(v24, v23))
            goto LABEL_46;
          LOBYTE(v9) = 0;
          ++v22;
          if (!--v21)
            goto LABEL_59;
        }
      }
    }
LABEL_58:
    LOBYTE(v9) = 0;
    goto LABEL_59;
  }
  if (v9 != 45)
  {
    if (!v15 || (v9 - 48) > 9u)
      goto LABEL_46;
    v19 = (v9 - 48);
    if (v15 != 1)
    {
      if ((BYTE1(v9) - 48) > 9u)
        goto LABEL_46;
      v19 = 10 * (v9 - 48) + (BYTE1(v9) - 48);
      v25 = v15 - 2;
      if (v25)
      {
        v26 = (unsigned __int8 *)&v39 + 2;
        while (1)
        {
          v27 = *v26 - 48;
          if (v27 > 9)
            goto LABEL_46;
          v28 = 10 * v19;
          if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63)
            goto LABEL_46;
          v19 = v28 + v27;
          if (__OFADD__(v28, v27))
            goto LABEL_46;
          LOBYTE(v9) = 0;
          ++v26;
          if (!--v25)
            goto LABEL_59;
        }
      }
    }
    goto LABEL_58;
  }
  if (v15)
  {
    if (v15 != 1 && (BYTE1(v9) - 48) <= 9u)
    {
      if (v15 == 2)
      {
        LOBYTE(v9) = 0;
        v19 = -(uint64_t)(BYTE1(v9) - 48);
        goto LABEL_59;
      }
      if ((BYTE2(v9) - 48) <= 9u)
      {
        v19 = -10 * (BYTE1(v9) - 48) - (BYTE2(v9) - 48);
        v29 = v15 - 3;
        if (!v29)
          goto LABEL_58;
        v35 = (unsigned __int8 *)&v39 + 3;
        while (1)
        {
          v36 = *v35 - 48;
          if (v36 > 9)
            break;
          v37 = 10 * v19;
          if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63)
            break;
          v19 = v37 - v36;
          if (__OFSUB__(v37, v36))
            break;
          LOBYTE(v9) = 0;
          ++v35;
          if (!--v29)
            goto LABEL_59;
        }
      }
    }
LABEL_46:
    v19 = 0;
    LOBYTE(v9) = 1;
    goto LABEL_59;
  }
  __break(1u);
LABEL_76:
  __break(1u);
  return result;
}

unsigned __int8 *sub_1832A06B4@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v2;

  v2 = *result;
  if (v2 == 10 || v2 == 13)
    LOBYTE(v2) = 32;
  *a2 = v2;
  return result;
}

unsigned __int8 *sub_1832A06D0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A136C(a1, a2, a3);
}

unsigned __int8 *sub_1832A06E4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A0B84(a1, a2, a3);
}

unsigned __int8 *sub_1832A06F8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A0E38(a1, a2, a3);
}

unsigned __int8 *sub_1832A070C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A10EC(a1, a2, a3);
}

unsigned __int8 *sub_1832A0720(unsigned __int8 *a1, uint64_t a2, int64_t a3)
{
  return sub_1832A1B10(a1, a2, a3);
}

unsigned __int8 *sub_1832A0734(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_18328BACC(a1, a2, a3);
}

unsigned __int8 *sub_1832A0748(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A15E8(a1, a2, a3);
}

unsigned __int8 *sub_1832A075C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A1890(a1, a2, a3);
}

uint64_t sub_1832A0770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A07A0(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_1832A136C);
}

uint64_t sub_1832A077C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A08A8(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_1832A0B84);
}

uint64_t sub_1832A0788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A09A0(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_1832A0E38);
}

uint64_t sub_1832A0794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A0A94(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_1832A10EC);
}

uint64_t sub_1832A07A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  swift_bridgeObjectRetain();
  v7 = sub_183B91878();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = &v15;
    goto LABEL_7;
  }
  v7 = sub_1832F5B78();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (_QWORD *)sub_183B91E78();
  }
LABEL_7:
  v13 = a4(v9, v10, a3);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1832A0890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A07A0(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_1832A1B10);
}

uint64_t sub_1832A089C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A08A8(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_18328BACC);
}

uint64_t sub_1832A08A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  swift_bridgeObjectRetain();
  v7 = sub_183B91878();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = &v15;
    goto LABEL_7;
  }
  v7 = sub_1832F5B78();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (_QWORD *)sub_183B91E78();
  }
LABEL_7:
  v13 = a4(v9, v10, a3);
  swift_bridgeObjectRelease();
  return v13 & 0x1FF;
}

uint64_t sub_1832A0994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A09A0(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_1832A15E8);
}

uint64_t sub_1832A09A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  swift_bridgeObjectRetain();
  v7 = sub_183B91878();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = &v15;
    goto LABEL_7;
  }
  v7 = sub_1832F5B78();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (_QWORD *)sub_183B91E78();
  }
LABEL_7:
  v13 = a4(v9, v10, a3);
  swift_bridgeObjectRelease();
  return v13 & 0x1FFFF;
}

uint64_t sub_1832A0A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A0A94(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_1832A1890);
}

uint64_t sub_1832A0A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  swift_bridgeObjectRetain();
  v7 = sub_183B91878();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = &v15;
    goto LABEL_7;
  }
  v7 = sub_1832F5B78();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (_QWORD *)sub_183B91E78();
  }
LABEL_7:
  v13 = a4(v9, v10, a3);
  swift_bridgeObjectRelease();
  return v13 | ((HIDWORD(v13) & 1) << 32);
}

unsigned __int8 *sub_1832A0B84(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int8 v12;
  int v13;
  int v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  int v28;
  unsigned int v29;
  char v30;
  int v31;
  char v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = (char)v8 * (char)a3;
            v24 = v23;
            if ((char)v23 != v23)
              goto LABEL_72;
            v8 = (char)v23 + (char)(v21 + v22);
            if ((char)(v24 + v21 + v22) != v8)
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          LOBYTE(v28) = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = (char)v28 * (char)a3;
            v32 = v31;
            if ((char)v31 != v31)
              goto LABEL_72;
            v28 = (char)v31 + (char)(v29 + v30);
            if ((char)(v32 + v29 + v30) != v28)
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = (char)v8 * (char)a3;
            v15 = v14;
            if ((char)v14 != v14)
              goto LABEL_72;
            v8 = (char)v14 - (char)(v10 + v11);
            if ((char)(v15 - (v10 + v11)) != v8)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_1832A0E38(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int16 v12;
  int v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  int v23;
  __int16 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  int v28;
  unsigned int v29;
  char v30;
  int v31;
  __int16 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          LOWORD(v8) = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = (__int16)v8 * (__int16)a3;
            v24 = v23;
            if ((__int16)v23 != v23)
              goto LABEL_72;
            v8 = (__int16)v23 + (v21 + v22);
            if ((__int16)(v24 + (v21 + v22)) != v8)
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          LOWORD(v28) = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = (__int16)v28 * (__int16)a3;
            v32 = v31;
            if ((__int16)v31 != v31)
              goto LABEL_72;
            v28 = (__int16)v31 + (v29 + v30);
            if ((__int16)(v32 + (v29 + v30)) != v28)
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          LOWORD(v8) = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = (__int16)v8 * (__int16)a3;
            v15 = v14;
            if ((__int16)v14 != v14)
              goto LABEL_72;
            v8 = (__int16)v14 - (v10 + v11);
            if ((__int16)(v15 - (v10 + v11)) != v8)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_1832A10EC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = (int)v8 * (uint64_t)(int)a3;
            if (v23 != (int)v23)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__OFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = (int)v28 * (uint64_t)(int)a3;
            if (v31 != (int)v31)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__OFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = (int)v8 * (uint64_t)(int)a3;
            if (v14 != (int)v14)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (__OFSUB__((_DWORD)v14, v15))
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_1832A136C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_1832A15E8(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int16 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  int v24;
  unsigned int v25;
  char v26;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v14 = a2 - 1;
      if (a2 != 1)
      {
        v15 = a3 + 87;
        if (a3 > 10)
        {
          v16 = a3 + 55;
        }
        else
        {
          v15 = 97;
          v16 = 65;
        }
        if (a3 <= 10)
          v17 = a3 + 48;
        else
          v17 = 58;
        if (result)
        {
          LOWORD(v8) = 0;
          v18 = result + 1;
          do
          {
            v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                v12 = 0;
                v13 = 1;
                if (v19 < 0x61 || v19 >= v15)
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                v20 = -87;
              }
              else
              {
                v20 = -55;
              }
            }
            else
            {
              v20 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0)
              goto LABEL_72;
            v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0)
              goto LABEL_72;
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v21 = a3 + 87;
        if (a3 > 10)
        {
          v22 = a3 + 55;
        }
        else
        {
          v21 = 97;
          v22 = 65;
        }
        if (a3 <= 10)
          v23 = a3 + 48;
        else
          v23 = 58;
        if (result)
        {
          LOWORD(v24) = 0;
          do
          {
            v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                v12 = 0;
                v13 = 1;
                if (v25 < 0x61 || v25 >= v21)
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                v26 = -87;
              }
              else
              {
                v26 = -55;
              }
            }
            else
            {
              v26 = -48;
            }
            if ((((unsigned __int16)v24 * (unsigned __int16)a3) & 0xFFFF0000) != 0)
              goto LABEL_72;
            v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0)
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          LOWORD(v8) = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0)
              goto LABEL_72;
            v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_1832A1890(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (v14 < v15)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_1832A1B10(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v13 = v9 * a3;
              v14 = v11 + v12;
              v15 = v13 >= v14;
              v9 = v13 - v14;
              if (!v15)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v25 = a3 + 48;
      v26 = a3 + 55;
      v27 = a3 + 87;
      if (a3 > 10)
      {
        v25 = 58;
      }
      else
      {
        v27 = 97;
        v26 = 65;
      }
      if (result)
      {
        v28 = 0;
        do
        {
          v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27)
                return 0;
              v30 = -87;
            }
            else
            {
              v30 = -55;
            }
          }
          else
          {
            v30 = -48;
          }
          if (!is_mul_ok(v28, a3))
            return 0;
          v31 = v28 * a3;
          v32 = v29 + v30;
          v15 = __CFADD__(v31, v32);
          v28 = v31 + v32;
          if (v15)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v16 = a2 - 1;
  if (a2 == 1)
    return 0;
  v17 = a3 + 48;
  v18 = a3 + 55;
  v19 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v19 = 97;
    v18 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v20 = result + 1;
  do
  {
    v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19)
          return 0;
        v22 = -87;
      }
      else
      {
        v22 = -55;
      }
    }
    else
    {
      v22 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v23 = v9 * a3;
    v24 = v21 + v22;
    v15 = __CFADD__(v23, v24);
    v9 = v23 + v24;
    if (v15)
      return 0;
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1832A1D8C(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  __int128 v5[2];
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *(*v9)@<X0>(unsigned __int8 *@<X0>, _BYTE *@<X8>);
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;

  v3 = a1;
  if ((sub_18329F578(a1, a2) & 1) == 0)
  {
    v7 = v3;
    v8 = a2;
    v9 = sub_1832A06B4;
    v10 = 0;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDD18);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE6F0);
    if (swift_dynamicCast())
    {
      sub_183262D80(v5, (uint64_t)v11);
      __swift_project_boxed_opaque_existential_2(v11, v12);
      if ((sub_183B91FB0() & 1) != 0)
      {
        __swift_project_boxed_opaque_existential_2(v11, v12);
        sub_183B91FA4();
        v3 = *(_QWORD *)&v5[0];
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v11);
LABEL_8:
        swift_bridgeObjectRelease();
        return v3;
      }
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v11);
    }
    else
    {
      v6 = 0;
      memset(v5, 0, sizeof(v5));
      sub_18327DFFC((uint64_t)v5);
    }
    v3 = sub_1832A9E78(v3, a2);
    goto LABEL_8;
  }
  return v3;
}

unint64_t sub_1832A1EEC()
{
  unint64_t result;

  result = qword_1EDCD75B0;
  if (!qword_1EDCD75B0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA2CC8, &type metadata for HTTPParsedFields.ParsingError);
    atomic_store(result, (unint64_t *)&qword_1EDCD75B0);
  }
  return result;
}

unint64_t sub_1832A1F30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDCDDD28;
  if (!qword_1EDCDDD28)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDDD20);
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DEC858], v1);
    atomic_store(result, (unint64_t *)&qword_1EDCDDD28);
  }
  return result;
}

uint64_t sub_1832A1F7C(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1832DA360(a1, a2, *(_QWORD *)(v2 + 16));
}

BOOL static NWActivity.ReportingStrategy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWActivity.ReportingStrategy.hash(into:)()
{
  return sub_183B9225C();
}

uint64_t NWActivity.ReportingStrategy.hashValue.getter()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

uint64_t NWActivity.CompletionReason.description.getter()
{
  uint64_t v0;
  int v1;

  if (*(_BYTE *)(v0 + 16) == 1)
    v1 = *(_DWORD *)v0 + 1;
  else
    v1 = 3;
  nw_activity_completion_reason_to_string(v1);
  return sub_183B91800();
}

uint64_t sub_1832A2050()
{
  uint64_t v0;
  int v1;

  if (*(_BYTE *)(v0 + 16) == 1)
    v1 = *(_DWORD *)v0 + 1;
  else
    v1 = 3;
  nw_activity_completion_reason_to_string(v1);
  return sub_183B91800();
}

uint64_t NWActivity.reportingStrategy.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  result = nw_activity_get_reporting_strategy(*(void **)(v1 + 16));
  if (result >= 4)
    v4 = 0;
  else
    v4 = result;
  *a1 = v4;
  return result;
}

void sub_1832A20B0(unsigned __int8 *a1, uint64_t a2)
{
  nw_activity_set_reporting_strategy(*(void **)(*(_QWORD *)a2 + 16), *a1);
}

void NWActivity.reportingStrategy.setter(unsigned __int8 *a1)
{
  uint64_t v1;

  nw_activity_set_reporting_strategy(*(void **)(v1 + 16), *a1);
}

void (*NWActivity.reportingStrategy.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  unsigned int reporting_strategy;
  char v5;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  reporting_strategy = nw_activity_get_reporting_strategy(v3);
  if (reporting_strategy >= 4)
    v5 = 0;
  else
    v5 = reporting_strategy;
  *(_BYTE *)(a1 + 8) = v5;
  return sub_1832A2110;
}

void sub_1832A2110(uint64_t a1)
{
  nw_activity_set_reporting_strategy(*(void **)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1832A211C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[4];

  result = (uint64_t)nw_activity_copy_parent_activity(*(void **)(*(_QWORD *)a1 + 16));
  v4 = result;
  if (result)
  {
    v5[3] = swift_getObjectType();
    v5[0] = v4;
    type metadata accessor for NWActivity();
    v4 = swift_allocObject();
    result = NWActivity.init(_:)((uint64_t)v5);
  }
  *a2 = v4;
  return result;
}

uint64_t NWActivity.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  NWActivity.init(_:)(a1);
  return v2;
}

void (*NWActivity.parentActivity.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];

  v3 = *(void **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  v4 = nw_activity_copy_parent_activity(v3);
  if (v4)
  {
    v5 = v4;
    v8[3] = swift_getObjectType();
    v8[0] = v5;
    v6 = swift_allocObject();
    NWActivity.init(_:)((uint64_t)v8);
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  return sub_1832A2244;
}

void sub_1832A2244(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    if (v2)
      v3 = *(void **)(v2 + 16);
    else
      v3 = 0;
    v4 = (void *)a1[1];
    goto LABEL_8;
  }
  v4 = (void *)a1[1];
  if (v2)
  {
    v3 = *(void **)(v2 + 16);
LABEL_8:
    nw_activity_set_parent_activity(v4, v3);
    swift_release();
    return;
  }
  nw_activity_set_parent_activity(v4, 0);
}

uint64_t NWActivity.isRetry.getter()
{
  uint64_t v0;

  return nw_activity_get_is_retry(*(void **)(v0 + 16));
}

uint64_t NWActivity.isActivated.getter()
{
  uint64_t v0;

  return nw_activity_is_activated(*(void **)(v0 + 16));
}

uint64_t NWActivity.isReported.getter()
{
  uint64_t v0;

  return nw_activity_is_selected_for_reporting(*(void **)(v0 + 16));
}

uint64_t NWActivity.isComplete.getter()
{
  uint64_t v0;

  return nw_activity_is_complete(*(void **)(v0 + 16));
}

uint64_t NWActivity.completionReason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = nw_activity_get_completion_reason(*(void **)(v1 + 16));
  v4 = (result - 2);
  if (v4 < 3)
    v5 = v4 + 1;
  else
    v5 = 0;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t NWActivity.duration.getter()
{
  uint64_t v0;

  return 1000000000000000 * nw_activity_get_duration(*(void **)(v0 + 16));
}

uint64_t NWActivity.activationTime.getter()
{
  uint64_t v0;

  return nw_activity_get_activation_time(*(void **)(v0 + 16));
}

uint64_t NWActivity.__allocating_init(retryOf:)(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = nw_activity_create_retry(*(void **)(a1 + 16));
  v4 = *(_OWORD *)(a1 + 24);
  swift_release();
  *(_OWORD *)(v2 + 24) = v4;
  return v2;
}

_QWORD *NWActivity.init(retryOf:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v1[2] = nw_activity_create_retry(*(void **)(a1 + 16));
  v1[3] = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  swift_release();
  v1[4] = v3;
  return v1;
}

uint64_t NWActivity.__allocating_init(token:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  NWActivity.init(token:)(a1);
  return v2;
}

xpc_object_t sub_1832A245C(uint64_t a1)
{
  xpc_object_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  uint64_t v7;
  int64_t value;
  _BYTE v10[32];
  _BYTE v11[32];

  v2 = xpc_array_create(0, 0);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_18321887C(v4, (uint64_t)v11);
      sub_18321887C((uint64_t)v11, (uint64_t)v10);
      if (swift_dynamicCast())
      {
        v5 = sub_183B91758();
        swift_bridgeObjectRelease();
        v6 = xpc_string_create((const char *)(v5 + 32));
        swift_release();
        if (!v6)
          goto LABEL_3;
        goto LABEL_25;
      }
      sub_18321887C((uint64_t)v11, (uint64_t)v10);
      if (swift_dynamicCast())
        goto LABEL_8;
      sub_18321887C((uint64_t)v11, (uint64_t)v10);
      if (swift_dynamicCast())
      {
        v6 = xpc_uint64_create(value);
        if (!v6)
          goto LABEL_3;
        goto LABEL_25;
      }
      sub_18321887C((uint64_t)v11, (uint64_t)v10);
      if (swift_dynamicCast())
      {
LABEL_8:
        v6 = xpc_int64_create(value);
        if (!v6)
          goto LABEL_3;
        goto LABEL_25;
      }
      sub_18321887C((uint64_t)v11, (uint64_t)v10);
      if (swift_dynamicCast())
      {
        v6 = xpc_double_create(*(double *)&value);
        if (!v6)
          goto LABEL_3;
        goto LABEL_25;
      }
      sub_18321887C((uint64_t)v11, (uint64_t)v10);
      if (swift_dynamicCast())
      {
        v6 = xpc_BOOL_create(value);
        if (!v6)
          goto LABEL_3;
LABEL_25:
        xpc_array_append_value(v2, v6);
        swift_unknownObjectRelease();
        goto LABEL_3;
      }
      sub_18321887C((uint64_t)v11, (uint64_t)v10);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDD50);
      if (swift_dynamicCast())
      {
        v7 = ((uint64_t (*)())sub_1832A245C)();
      }
      else
      {
        sub_18321887C((uint64_t)v11, (uint64_t)v10);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDD58);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_3;
        v7 = ((uint64_t (*)())sub_1832A2750)();
      }
      v6 = (xpc_object_t)v7;
      swift_bridgeObjectRelease();
      if (v6)
        goto LABEL_25;
LABEL_3:
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v11);
      v4 += 32;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
  }
  return v2;
}

xpc_object_t sub_1832A2750(uint64_t a1)
{
  xpc_object_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  xpc_object_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  xpc_object_t xdict;
  uint64_t value;
  _BYTE v25[32];
  __int128 v26;
  _OWORD v27[2];
  _QWORD v28[2];
  __int128 v29;

  v2 = xpc_dictionary_create(0, 0, 0);
  v21 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  xdict = v2;
  v22 = (unint64_t)(v3 + 63) >> 6;
  result = (xpc_object_t)swift_bridgeObjectRetain();
  v7 = 0;
  if (!v5)
    goto LABEL_8;
LABEL_6:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v9 = v8 | (v7 << 6);
  while (2)
  {
    v10 = *(_QWORD *)(a1 + 56);
    v11 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v12 = v11[1];
    *(_QWORD *)&v26 = *v11;
    *((_QWORD *)&v26 + 1) = v12;
    sub_18321887C(v10 + 32 * v9, (uint64_t)v27);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1832A3430((uint64_t)&v26, (uint64_t)v28);
      if (!v28[1])
      {
        swift_release();
        return xdict;
      }
      sub_1832A3478(&v29, &v26);
      sub_18321887C((uint64_t)&v26, (uint64_t)v25);
      if (swift_dynamicCast())
      {
        v16 = sub_183B91758();
        swift_bridgeObjectRelease();
        v17 = xpc_string_create((const char *)(v16 + 32));
        swift_release();
        if (v17)
          goto LABEL_36;
        goto LABEL_5;
      }
      sub_18321887C((uint64_t)&v26, (uint64_t)v25);
      if (swift_dynamicCast())
      {
LABEL_34:
        v18 = xpc_int64_create(value);
        goto LABEL_35;
      }
      sub_18321887C((uint64_t)&v26, (uint64_t)v25);
      if (swift_dynamicCast())
      {
        v18 = xpc_uint64_create(value);
        goto LABEL_35;
      }
      sub_18321887C((uint64_t)&v26, (uint64_t)v25);
      if (swift_dynamicCast())
        goto LABEL_34;
      sub_18321887C((uint64_t)&v26, (uint64_t)v25);
      if (swift_dynamicCast())
      {
        v18 = xpc_double_create(*(double *)&value);
        goto LABEL_35;
      }
      sub_18321887C((uint64_t)&v26, (uint64_t)v25);
      if (swift_dynamicCast())
      {
        v18 = xpc_BOOL_create(value);
LABEL_35:
        v17 = v18;
        if (v18)
          goto LABEL_36;
        goto LABEL_5;
      }
      sub_18321887C((uint64_t)&v26, (uint64_t)v25);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDD50);
      if (swift_dynamicCast())
      {
        v20 = (uint64_t)sub_1832A245C(value);
      }
      else
      {
        sub_18321887C((uint64_t)&v26, (uint64_t)v25);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDD58);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_5;
        v20 = sub_1832A2750();
      }
      v17 = (xpc_object_t)v20;
      swift_bridgeObjectRelease();
      if (v17)
      {
LABEL_36:
        v19 = sub_183B91758();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_value(xdict, (const char *)(v19 + 32), v17);
        swift_unknownObjectRelease_n();
        __swift_destroy_boxed_opaque_existential_2((uint64_t)&v26);
        result = (xpc_object_t)swift_release();
        if (v5)
          goto LABEL_6;
        goto LABEL_8;
      }
LABEL_5:
      swift_bridgeObjectRelease();
      result = (xpc_object_t)__swift_destroy_boxed_opaque_existential_2((uint64_t)&v26);
      if (v5)
        goto LABEL_6;
LABEL_8:
      v13 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v13 < v22)
      {
        v14 = *(_QWORD *)(v21 + 8 * v13);
        if (v14)
          goto LABEL_11;
        v15 = v7 + 2;
        ++v7;
        if (v13 + 1 < v22)
        {
          v14 = *(_QWORD *)(v21 + 8 * v15);
          if (v14)
            goto LABEL_14;
          v7 = v13 + 1;
          if (v13 + 2 < v22)
          {
            v14 = *(_QWORD *)(v21 + 8 * (v13 + 2));
            if (v14)
            {
              v13 += 2;
              goto LABEL_11;
            }
            v15 = v13 + 3;
            v7 = v13 + 2;
            if (v13 + 3 < v22)
              break;
          }
        }
      }
LABEL_25:
      v5 = 0;
      memset(v27, 0, sizeof(v27));
      v26 = 0u;
    }
    v14 = *(_QWORD *)(v21 + 8 * v15);
    if (v14)
    {
LABEL_14:
      v13 = v15;
LABEL_11:
      v5 = (v14 - 1) & v14;
      v9 = __clz(__rbit64(v14)) + (v13 << 6);
      v7 = v13;
      continue;
    }
    break;
  }
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v22)
    {
      v7 = v22 - 1;
      goto LABEL_25;
    }
    v14 = *(_QWORD *)(v21 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_11;
  }
LABEL_50:
  __break(1u);
  return result;
}

Swift::Void __swiftcall NWActivity.submitMetrics(_:name:)(Swift::OpaquePointer _, Swift::String name)
{
  uint64_t v2;
  uint64_t v3;

  if (sub_1832A2750((uint64_t)_._rawValue))
  {
    v3 = *(_QWORD *)(v2 + 16);
    sub_183B91758();
    nw_activity_submit_metrics(v3);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_183B91F5C();
    __break(1u);
  }
}

uint64_t NWActivity.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_1832A2CEC(uint64_t *a1, uint64_t *a2)
{
  return _s7Network10NWActivityC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t NWActivity.description.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_description);
  v2 = sub_183B916E0();

  return v2;
}

uint64_t NWActivity.debugDescription.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_description);
  v2 = sub_183B916E0();

  return v2;
}

void NWActivity.playgroundDescription.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*(id *)(v1 + 16), sel_description);
  v4 = sub_183B916E0();
  v6 = v5;

  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = v4;
  a1[1] = v6;
}

void sub_1832A2E00(uint64_t *a1@<X8>)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_description);
  v4 = sub_183B916E0();
  v6 = v5;

  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = v4;
  a1[1] = v6;
}

uint64_t NWConnection.startActivity(_:)(uint64_t a1)
{
  return sub_1832A2E7C(a1, (void (*)(uint64_t))nw_connection_start_activity);
}

uint64_t NWConnection.endActivity(_:)(uint64_t a1)
{
  return sub_1832A2E7C(a1, (void (*)(uint64_t))nw_connection_end_activity);
}

uint64_t sub_1832A2E7C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 16);
  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(qword_1EDCDB9D0);
  swift_dynamicCast();
  a2(v4);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t NSURLSessionTask._nwActivity.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  _QWORD v5[4];

  v1 = objc_msgSend(v0, sel__nw_activity);
  if (!v1)
    return 0;
  v2 = v1;
  v5[3] = swift_getObjectType();
  v5[0] = v2;
  type metadata accessor for NWActivity();
  v3 = swift_allocObject();
  NWActivity.init(_:)((uint64_t)v5);
  return v3;
}

id sub_1832A2F90@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id result;
  uint64_t v4;
  _QWORD v5[4];

  result = objc_msgSend(*a1, sel__nw_activity);
  v4 = (uint64_t)result;
  if (result)
  {
    v5[3] = swift_getObjectType();
    v5[0] = v4;
    type metadata accessor for NWActivity();
    v4 = swift_allocObject();
    result = (id)NWActivity.init(_:)((uint64_t)v5);
  }
  *a2 = v4;
  return result;
}

uint64_t (*NSURLSessionTask._nwActivity.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  void *v1;
  id v3;
  _QWORD v5[4];

  a1[1] = v1;
  v3 = objc_msgSend(v1, sel__nw_activity);
  if (v3)
  {
    v5[3] = swift_getObjectType();
    v5[0] = v3;
    type metadata accessor for NWActivity();
    v3 = (id)swift_allocObject();
    NWActivity.init(_:)((uint64_t)v5);
  }
  *a1 = v3;
  return sub_1832A3088;
}

uint64_t sub_1832A3088(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return NSURLSessionTask._nwActivity.setter(*a1);
  v2 = swift_retain();
  NSURLSessionTask._nwActivity.setter(v2);
  return swift_release();
}

uint64_t _s7Network10NWActivityC16CompletionReasonO2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  if (*((_BYTE *)a1 + 16) == 1)
    return ((uint64_t (*)(void))((char *)&loc_1832A30FC + 4 * byte_183BA2D10[v2]))();
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    return 0;
  return v2 == *(_QWORD *)a2 && a1[1] == *(_QWORD *)(a2 + 8);
}

void sub_1832A3144()
{
  unint64_t v0;
  int v1;

  if (v1)
  {
    if (v0 > 2)
      JUMPOUT(0x1832A3158);
  }
  JUMPOUT(0x1832A313CLL);
}

uint64_t _s7Network10NWActivityC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v4 = sub_183B914AC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v14 - v9;
  if (nw_activity_is_activated(*(void **)(a1 + 16))
    && nw_activity_is_activated(*(void **)(a2 + 16)))
  {
    NWActivity.token.getter();
    NWActivity.token.getter();
    v11 = sub_183B9147C();
    v12 = *(void (**)(char *, uint64_t))(v5 + 8);
    v12(v8, v4);
    v12(v10, v4);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

unint64_t sub_1832A3250()
{
  unint64_t result;

  result = qword_1EDCDDD38;
  if (!qword_1EDCDDD38)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWActivity.ReportingStrategy, &type metadata for NWActivity.ReportingStrategy);
    atomic_store(result, (unint64_t *)&qword_1EDCDDD38);
  }
  return result;
}

uint64_t sub_1832A3294@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = NWActivity.reportingStrategy.getter(&v3);
  *a1 = v3;
  return result;
}

void sub_1832A32D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;

  v2 = *a2;
  if (*(_QWORD *)a1)
    v3 = *(void **)(*(_QWORD *)a1 + 16);
  else
    v3 = 0;
  nw_activity_set_parent_activity(*(void **)(v2 + 16), v3);
}

uint64_t sub_1832A32FC()
{
  uint64_t v0;

  v0 = swift_retain();
  return NSURLSessionTask._nwActivity.setter(v0);
}

uint64_t method lookup function for NWActivity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWActivity.__allocating_init(retryOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWActivity.__allocating_init(token:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of NWActivity.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t storeEnumTagSinglePayload for NWActivity.ReportingStrategy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1832A3394 + 4 * byte_183BA2D19[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1832A33C8 + 4 * byte_183BA2D14[v4]))();
}

uint64_t sub_1832A33C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832A33D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832A33D8);
  return result;
}

uint64_t sub_1832A33E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1832A33ECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1832A33F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832A33F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWActivity.ReportingStrategy()
{
  return &type metadata for NWActivity.ReportingStrategy;
}

uint64_t sub_1832A3414(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1832A3430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDD48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1832A3478(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t NWProtocolOptions.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWProtocol.deinit()
{
  uint64_t v0;

  return v0;
}

BOOL static NWProtocolDefinition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return nw_protocol_definition_is_equal(*(nw_protocol_definition_t *)(a1 + 32), *(nw_protocol_definition_t *)(a2 + 32));
}

uint64_t _s7Network20NWProtocolDefinitionC4nameSSvg_0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWProtocolDefinition.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWProtocolDefinition.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

BOOL sub_1832A3544(uint64_t a1, uint64_t a2)
{
  return nw_protocol_definition_is_equal(*(nw_protocol_definition_t *)(*(_QWORD *)a1 + 32), *(nw_protocol_definition_t *)(*(_QWORD *)a2 + 32));
}

uint64_t sub_1832A3568()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWProtocolOptions.nw.getter()
{
  return swift_unknownObjectRetain();
}

_QWORD *sub_1832A35A0()
{
  _QWORD *result;

  result = sub_1832A35BC();
  off_1EDCD7B50 = result;
  return result;
}

_QWORD *sub_1832A35BC()
{
  uint64_t inited;
  uint64_t v1;
  _QWORD *result;

  sub_1832A3988();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183BA2F30;
  *(_QWORD *)(inited + 32) = type metadata accessor for NWProtocolIP.Options();
  *(_QWORD *)(inited + 40) = type metadata accessor for NWProtocolQUIC.Options();
  *(_QWORD *)(inited + 48) = type metadata accessor for NWProtocolTCP.Options();
  *(_QWORD *)(inited + 56) = type metadata accessor for NWProtocolTLS.Options();
  *(_QWORD *)(inited + 64) = type metadata accessor for NWProtocolUDP.Options();
  *(_QWORD *)(inited + 72) = type metadata accessor for NWProtocolWebSocket.Options();
  *(_QWORD *)(inited + 80) = type metadata accessor for NWProtocolFramer.Options();
  v1 = type metadata accessor for NWProtocolHTTP.Options();
  result = sub_183242C18((_QWORD *)1, 8, 1, (_QWORD *)inited);
  result[2] = 8;
  result[11] = v1;
  return result;
}

void sub_1832A36AC()
{
  sub_183B91F5C();
  __break(1u);
}

_QWORD *sub_1832A3708()
{
  _QWORD *result;

  result = sub_1832A3724();
  qword_1EDCD7B68 = (uint64_t)result;
  return result;
}

_QWORD *sub_1832A3724()
{
  uint64_t inited;
  uint64_t v1;
  _QWORD *result;

  sub_1832A393C();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183BA2F30;
  *(_QWORD *)(inited + 32) = type metadata accessor for NWProtocolIP.Metadata();
  *(_QWORD *)(inited + 40) = type metadata accessor for NWProtocolQUIC.Metadata();
  *(_QWORD *)(inited + 48) = type metadata accessor for NWProtocolTCP.Metadata();
  *(_QWORD *)(inited + 56) = type metadata accessor for NWProtocolTLS.Metadata();
  *(_QWORD *)(inited + 64) = type metadata accessor for NWProtocolUDP.Metadata();
  *(_QWORD *)(inited + 72) = type metadata accessor for NWProtocolWebSocket.Metadata();
  *(_QWORD *)(inited + 80) = type metadata accessor for NWProtocolFramer.Message();
  v1 = type metadata accessor for NWProtocolHTTP.Metadata();
  result = sub_1832429F4((_QWORD *)1, 8, 1, (_QWORD *)inited);
  result[2] = 8;
  result[11] = v1;
  return result;
}

void sub_1832A3814()
{
  sub_183B91F5C();
  __break(1u);
}

uint64_t NWProtocol.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NWProtocolDefinition()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolDefinition.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t type metadata accessor for NWProtocolOptions()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolOptions()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for NWProtocolMetadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolMetadata()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for NWProtocol()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocol()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1832A393C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7B80);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = &qword_1EDCDB270;
  else
    v2 = (uint64_t *)&unk_1EDCD7B88;
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t sub_1832A3988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7B58);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = &qword_1EDCDB270;
  else
    v2 = (uint64_t *)&unk_1EDCD7B10;
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

_QWORD *sub_1832A39D4(uint64_t a1)
{
  return sub_1832A3A0C(a1, &qword_1EDCD7B78, &qword_1EDCD7B68);
}

_QWORD *sub_1832A39F0(uint64_t a1)
{
  return sub_1832A3A0C(a1, &qword_1EDCD7AE0, &off_1EDCD7B50);
}

_QWORD *sub_1832A3A0C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (*a2 != -1)
    goto LABEL_13;
  while (1)
  {
    v5 = *a3;
    v6 = *(_QWORD *)(*a3 + 16);
    if (!v6)
      return 0;
    a3 = *(_QWORD **)(v5 + 32);
    v7 = (uint64_t (*)(uint64_t))a3[11];
    swift_bridgeObjectRetain();
    if ((v7(a1) & 1) != 0)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      return a3;
    }
    v8 = 0;
    v9 = v6 - 1;
    while (1)
    {
      if (v9 == v8)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      if ((unint64_t)(v8 + 1) >= *(_QWORD *)(v5 + 16))
        break;
      a3 = *(_QWORD **)(v5 + 8 * v8++ + 40);
      if ((((uint64_t (*)(uint64_t))a3[11])(a1) & 1) != 0)
        goto LABEL_8;
    }
    __break(1u);
LABEL_13:
    swift_once();
  }
}

uint64_t NWProtocolFramer.Options.__allocating_init(definition:)(uint64_t a1)
{
  return sub_1832A43C0(a1, (uint64_t (*)(uint64_t))nw_framer_create_options);
}

uint64_t NWProtocolFramer.Definition.__allocating_init(implementation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  NWProtocolFramer.Definition.init(implementation:)(a1, a2);
  return v4;
}

_QWORD *NWProtocolFramer.Definition.init(implementation:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  nw_protocol_definition_t definition;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[6];

  (*(void (**)(void))(a2 + 8))();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v14[4] = sub_1832A4228;
  v14[5] = v5;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = sub_1832A3FE0;
  v14[3] = &block_descriptor_9;
  v6 = _Block_copy(v14);
  swift_retain();
  swift_release();
  v7 = sub_183B91758();
  swift_bridgeObjectRelease();
  definition = nw_framer_create_definition((const char *)(v7 + 32), 0, v6);
  swift_release();
  _Block_release(v6);
  v2[4] = definition;
  v9 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  v10 = sub_183B916E0();
  v12 = v11;

  swift_unknownObjectRelease();
  v2[2] = v10;
  v2[3] = v12;
  swift_release();
  return v2;
}

uint64_t sub_1832A3C8C(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD *v27;

  type metadata accessor for NWProtocolFramer.Instance();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16);
  swift_unknownObjectRetain();
  v8 = swift_retain();
  v9 = v7(v8, a2, a3);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v9;
  v10[3] = a3;
  v10[4] = v6;
  v26 = sub_1832A5BD4;
  v27 = v10;
  v11 = MEMORY[0x1E0C809B0];
  v22 = MEMORY[0x1E0C809B0];
  v23 = 1107296256;
  v24 = sub_1832A3FE0;
  v25 = &block_descriptor_32;
  v12 = _Block_copy(&v22);
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  nw_framer_set_input_handler(a1, v12);
  _Block_release(v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v9;
  v13[3] = a3;
  v13[4] = v6;
  v26 = sub_1832A5C20;
  v27 = v13;
  v22 = v11;
  v23 = 1107296256;
  v24 = sub_1832A40D4;
  v25 = &block_descriptor_38;
  v14 = _Block_copy(&v22);
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  nw_framer_set_output_handler(a1, v14);
  _Block_release(v14);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v9;
  v15[3] = a3;
  v15[4] = v6;
  v26 = sub_1832A5C30;
  v27 = v15;
  v22 = v11;
  v23 = 1107296256;
  v24 = sub_183056AB0;
  v25 = &block_descriptor_44_0;
  v16 = _Block_copy(&v22);
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  nw_framer_set_wakeup_handler(a1, v16);
  _Block_release(v16);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v9;
  v17[3] = a3;
  v17[4] = v6;
  v26 = sub_1832A5C7C;
  v27 = v17;
  v22 = v11;
  v23 = 1107296256;
  v24 = sub_1832A4154;
  v25 = &block_descriptor_50;
  v18 = _Block_copy(&v22);
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  nw_framer_set_stop_handler(a1, v18);
  _Block_release(v18);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v9;
  v19[3] = a3;
  v19[4] = v6;
  v26 = sub_1832A5CCC;
  v27 = v19;
  v22 = v11;
  v23 = 1107296256;
  v24 = sub_183056AB0;
  v25 = &block_descriptor_56;
  v20 = _Block_copy(&v22);
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  nw_framer_set_cleanup_handler(a1, v20);
  _Block_release(v20);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a3 + 24))(&v22, v6, a2, a3);
  swift_unknownObjectRelease();
  swift_release();
  if ((_BYTE)v22)
    return 2;
  else
    return 1;
}

uint64_t sub_1832A3FE0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v3 = v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  return v3;
}

uint64_t sub_1832A4034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t ObjectType;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  ObjectType = swift_getObjectType();
  type metadata accessor for NWProtocolFramer.Message();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a2;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 40);
  swift_unknownObjectRetain();
  v14(a7, v13, a3, a4, ObjectType, a6);
  return swift_release();
}

uint64_t sub_1832A40D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v9(a2, a3, a4, a5);
  swift_release();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832A4154(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  return v1 & 1;
}

uint64_t NWProtocolFramer.Definition.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWProtocolFramer.Definition.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1832A41F8(void *a1)
{
  return nw_protocol_options_is_framer(a1);
}

uint64_t NWProtocolFramer.Options.init(definition:)(uint64_t a1)
{
  return sub_1832A4434(a1, (uint64_t (*)(uint64_t))nw_framer_create_options);
}

uint64_t sub_1832A4218()
{
  return swift_deallocObject();
}

uint64_t sub_1832A4228(NSObject *a1)
{
  uint64_t v1;

  return sub_1832A3C8C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_1832A4230@<D0>(_OWORD *a1@<X8>)
{
  return sub_1832A4620((uint64_t (*)(uint64_t, uint64_t))nw_framer_options_copy_object_value, a1);
}

uint64_t sub_1832A423C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A46A4(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))nw_framer_options_set_object_value);
}

uint64_t sub_1832A4248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7B90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void (*sub_1832A4290(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;
  char *v7;
  _OWORD *v8;
  NSObject *v9;
  uint64_t v10;
  id v11;

  v7 = (char *)malloc(0x58uLL);
  *a1 = v7;
  v8 = v7 + 32;
  *((_QWORD *)v7 + 9) = a3;
  *((_QWORD *)v7 + 10) = v3;
  *((_QWORD *)v7 + 8) = a2;
  v9 = *(NSObject **)(v3 + 16);
  v10 = sub_183B91758();
  v11 = nw_framer_options_copy_object_value(v9, (const char *)(v10 + 32));
  swift_release();
  if (v11)
  {
    sub_183B91D40();
    swift_unknownObjectRelease();
  }
  else
  {
    *v8 = 0u;
    *((_OWORD *)v7 + 3) = 0u;
  }
  sub_1832A4354((uint64_t)v8, (uint64_t)v7);
  return sub_1832A4348;
}

void sub_1832A4348(uint64_t *a1, char a2)
{
  sub_1832A4898(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))sub_1832A423C);
}

uint64_t sub_1832A4354(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7B90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL sub_1832A43A0(NSObject *a1)
{
  return nw_protocol_metadata_is_framer_message(a1);
}

uint64_t NWProtocolFramer.Message.__allocating_init(definition:)(uint64_t a1)
{
  return sub_1832A43C0(a1, (uint64_t (*)(uint64_t))nw_framer_protocol_create_message);
}

uint64_t sub_1832A43C0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = swift_allocObject();
  v4 = swift_unknownObjectRetain();
  v5 = a2(v4);
  swift_unknownObjectRelease();
  swift_release();
  *(_QWORD *)(v3 + 16) = v5;
  return v3;
}

uint64_t NWProtocolFramer.Message.init(definition:)(uint64_t a1)
{
  return sub_1832A4434(a1, (uint64_t (*)(uint64_t))nw_framer_protocol_create_message);
}

uint64_t sub_1832A4434(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = swift_unknownObjectRetain();
  v5 = a2(v4);
  swift_unknownObjectRelease();
  swift_release();
  *(_QWORD *)(v2 + 16) = v5;
  return v2;
}

uint64_t NWProtocolFramer.Message.__allocating_init(instance:)()
{
  uint64_t v0;
  NSObject *v1;
  nw_framer_message_t v2;

  v0 = swift_allocObject();
  v1 = swift_unknownObjectRetain();
  v2 = nw_framer_message_create(v1);
  swift_unknownObjectRelease();
  swift_release();
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

uint64_t NWProtocolFramer.Message.init(instance:)()
{
  uint64_t v0;
  NSObject *v1;
  nw_framer_message_t v2;

  v1 = swift_unknownObjectRetain();
  v2 = nw_framer_message_create(v1);
  swift_unknownObjectRelease();
  swift_release();
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

double sub_1832A453C@<D0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v6 = sub_183B91758();
  v7 = a2(v5, v6 + 32);
  swift_release();
  if (v7)
  {
    sub_183B91D40();
    swift_unknownObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1832A45BC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(_BYTE *, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[32];

  v6 = *a3;
  v7 = a3[1];
  sub_1832A4248(a1, (uint64_t)v9);
  swift_bridgeObjectRetain();
  return a5(v9, v6, v7);
}

double sub_1832A4614@<D0>(_OWORD *a1@<X8>)
{
  return sub_1832A4620((uint64_t (*)(uint64_t, uint64_t))nw_framer_message_copy_object_value, a1);
}

double sub_1832A4620@<D0>(uint64_t (*a1)(uint64_t, uint64_t)@<X2>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = sub_183B91758();
  v7 = a1(v5, v6 + 32);
  swift_release();
  if (v7)
  {
    sub_183B91D40();
    swift_unknownObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1832A4698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832A46A4(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))nw_framer_message_set_object_value);
}

uint64_t sub_1832A46A4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;

  v7 = *(_QWORD *)(v4 + 16);
  sub_1832A4248(a1, (uint64_t)v16);
  v8 = v17;
  if (v17)
  {
    v9 = __swift_project_boxed_opaque_existential_2(v16, v17);
    v10 = *(_QWORD *)(v8 - 8);
    MEMORY[0x1E0C80A78](v9);
    v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v10 + 16))(v12);
    v13 = sub_183B920E8();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v16);
  }
  else
  {
    v13 = 0;
  }
  v14 = sub_183B91758();
  swift_bridgeObjectRelease();
  a4(v7, v14 + 32, v13);
  swift_unknownObjectRelease();
  sub_1830620D4(a1, (uint64_t *)&unk_1EDCD7B90);
  return swift_release();
}

void (*sub_1832A47D4(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;
  char *v7;
  _OWORD *v8;
  NSObject *v9;
  uint64_t v10;
  id v11;

  v7 = (char *)malloc(0x58uLL);
  *a1 = v7;
  v8 = v7 + 32;
  *((_QWORD *)v7 + 9) = a3;
  *((_QWORD *)v7 + 10) = v3;
  *((_QWORD *)v7 + 8) = a2;
  v9 = *(NSObject **)(v3 + 16);
  v10 = sub_183B91758();
  v11 = nw_framer_message_copy_object_value(v9, (const char *)(v10 + 32));
  swift_release();
  if (v11)
  {
    sub_183B91D40();
    swift_unknownObjectRelease();
  }
  else
  {
    *v8 = 0u;
    *((_OWORD *)v7 + 3) = 0u;
  }
  sub_1832A4354((uint64_t)v8, (uint64_t)v7);
  return sub_1832A488C;
}

void sub_1832A488C(uint64_t *a1, char a2)
{
  sub_1832A4898(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))sub_1832A4698);
}

void sub_1832A4898(uint64_t *a1, char a2, void (*a3)(_QWORD *, uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v5 = v4[9];
    v6 = v4[8];
    sub_1832A4248(*a1, (uint64_t)(v4 + 4));
    swift_bridgeObjectRetain();
    a3(v4 + 4, v6, v5);
    sub_1830620D4((uint64_t)v4, (uint64_t *)&unk_1EDCD7B90);
  }
  else
  {
    v7 = v4[9];
    v8 = v4[8];
    swift_bridgeObjectRetain();
    a3(v4, v8, v7);
  }
  free(v4);
}

uint64_t NWProtocolFramer.Message.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWProtocolFramer.Instance.debugDescription.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_description);
  v2 = sub_183B916E0();

  return v2;
}

Swift::Void __swiftcall NWProtocolFramer.Instance.markReady()()
{
  uint64_t v0;

  nw_framer_mark_ready(*(nw_framer_t *)(v0 + 16));
}

void NWProtocolFramer.Instance.markFailed(error:)(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  int v4;
  NSObject *v5;
  int v6;

  if (*(unsigned __int8 *)(a1 + 4) == 255)
  {
    v2 = *(NSObject **)(v1 + 16);
    v3 = 0;
LABEL_5:
    nw_framer_mark_failed_with_error(v2, v3);
    return;
  }
  v4 = *(_DWORD *)a1;
  if (*(_BYTE *)(a1 + 4))
  {
    v2 = *(NSObject **)(v1 + 16);
    v3 = v4;
    goto LABEL_5;
  }
  v5 = *(NSObject **)(v1 + 16);
  swift_unknownObjectRetain();
  v6 = sub_183B915F0();
  nw_framer_mark_failed_with_error(v5, v6);
  swift_unknownObjectRelease();
}

uint64_t NWProtocolFramer.Instance.parseInput(minimumIncompleteLength:maximumLength:parse:)(size_t a1, size_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _BOOL8 v13;
  uint64_t result;
  _QWORD v15[6];

  v9 = *(NSObject **)(v4 + 16);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_1832A4BD0;
  *(_QWORD *)(v11 + 24) = v10;
  v15[4] = sub_182FEDAC0;
  v15[5] = v11;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = sub_1832A4C04;
  v15[3] = &block_descriptor_9;
  v12 = _Block_copy(v15);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  v13 = nw_framer_parse_input(v9, a1, a2, 0, v12);
  swift_unknownObjectRelease();
  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v9 & 1) == 0)
    return v13;
  __break(1u);
  return result;
}

uint64_t sub_1832A4B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v4;

  if (a1)
    v4 = a1 + a2;
  else
    v4 = 0;
  return a4(a1, v4, 0, a3);
}

uint64_t sub_1832A4BC0()
{
  return swift_deallocObject();
}

uint64_t sub_1832A4BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1832A4BF4()
{
  return swift_deallocObject();
}

uint64_t sub_1832A4C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4);
}

void NWProtocolFramer.Instance.deliverInput(data:message:isComplete:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1832A4C88()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v9 = v3;
  v10 = v4;
  v11 = BYTE2(v4);
  v12 = BYTE3(v4);
  v13 = BYTE4(v4);
  v5 = BYTE6(v4);
  v14 = BYTE5(v4);
  v6 = *(NSObject **)(v1 + 16);
  v7 = *(NSObject **)(v0 + 16);
  swift_retain();
  swift_retain();
  nw_framer_deliver_input(v6, (const uint8_t *)&v9, v5, v7, v2 & 1);
  swift_release();
  return swift_release();
}

BOOL NWProtocolFramer.Instance.deliverInputNoCopy(length:message:isComplete:)(size_t input_length, uint64_t a2, char a3)
{
  uint64_t v3;

  return nw_framer_deliver_input_no_copy(*(nw_framer_t *)(v3 + 16), input_length, *(nw_framer_message_t *)(a2 + 16), a3 & 1);
}

Swift::Void __swiftcall NWProtocolFramer.Instance.passThroughInput()()
{
  uint64_t v0;

  nw_framer_pass_through_input(*(nw_framer_t *)(v0 + 16));
}

uint64_t NWProtocolFramer.Instance.parseOutput(minimumIncompleteLength:maximumLength:parse:)(size_t a1, size_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _BOOL8 v13;
  uint64_t result;
  _QWORD v15[6];

  v9 = *(NSObject **)(v4 + 16);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_1832A4BD0;
  *(_QWORD *)(v11 + 24) = v10;
  v15[4] = sub_1832576D8;
  v15[5] = v11;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = sub_1832A4C04;
  v15[3] = &block_descriptor_19;
  v12 = _Block_copy(v15);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  v13 = nw_framer_parse_output(v9, a1, a2, 0, v12);
  swift_unknownObjectRelease();
  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v9 & 1) == 0)
    return v13;
  __break(1u);
  return result;
}

void NWProtocolFramer.Instance.writeOutput(data:)()
{
  uint64_t v0;
  NSObject *v1;
  void *v2;
  const char *v3;
  NSObject *output_data;

  v1 = *(NSObject **)(v0 + 16);
  swift_unknownObjectRetain();
  v2 = (void *)sub_183B9141C();
  output_data = NWCreateDispatchDataFromNSData(v2, v3);

  if (output_data)
  {
    nw_framer_write_output_data(v1, output_data);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

void NWProtocolFramer.Instance.writeOutput(discontiguousData:)()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;

  v1 = *(NSObject **)(v0 + 16);
  swift_unknownObjectRetain();
  v2 = sub_183B91620();
  nw_framer_write_output_data(v1, v2);
  swift_unknownObjectRelease();

}

void NWProtocolFramer.Instance.writeOutput<A>(data:)(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, NSObject *, uint64_t);
  int v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  unint64_t v28;
  const char *v29;
  unint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v33 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDD1F0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x1E0C80A78](v6);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v33 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v33 - v16;
  v18 = sub_183B91638();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(void (**)(char *, NSObject *, uint64_t))(v9 + 16);
  v22(v17, a1, a2);
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  if (v23)
  {
    v24(v8, 0, 1, v18);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v8, v18);
    v25 = *(NSObject **)(v34 + 16);
    swift_unknownObjectRetain();
    v26 = sub_183B91620();
    nw_framer_write_output_data(v25, v26);
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    return;
  }
  v27 = v34;
  v24(v8, 1, 1, v18);
  sub_1830620D4((uint64_t)v8, (uint64_t *)&unk_1EDCDD1F0);
  v22(v15, a1, a2);
  if (swift_dynamicCast())
  {
    a2 = v35;
    v28 = v36;
    a1 = *(NSObject **)(v27 + 16);
    swift_unknownObjectRetain();
    v12 = (char *)sub_183B9141C();
    v22 = (void (*)(char *, NSObject *, uint64_t))NWCreateDispatchDataFromNSData(v12, v29);

    if (v22)
      goto LABEL_7;
    __break(1u);
  }
  v22(v12, a1, a2);
  a2 = sub_183B91458();
  v28 = v30;
  a1 = *(NSObject **)(v27 + 16);
  swift_unknownObjectRetain();
  v31 = (void *)sub_183B9141C();
  v22 = (void (*)(char *, NSObject *, uint64_t))NWCreateDispatchDataFromNSData(v31, v32);

  if (!v22)
  {
    __break(1u);
    return;
  }
LABEL_7:
  nw_framer_write_output_data(a1, (dispatch_data_t)v22);
  swift_unknownObjectRelease();

  sub_18308485C(a2, v28);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NWProtocolFramer.Instance.writeOutputNoCopy(length:)(Swift::Int length)
{
  uint64_t v1;
  uint64_t v2;

  if (!nw_framer_write_output_no_copy(*(nw_framer_t *)(v1 + 16), length))
  {
    sub_18323C200();
    swift_allocError();
    *(_DWORD *)v2 = 22;
    *(_BYTE *)(v2 + 4) = 0;
    swift_willThrow();
  }
}

Swift::Void __swiftcall NWProtocolFramer.Instance.passThroughOutput()()
{
  uint64_t v0;

  nw_framer_pass_through_output(*(nw_framer_t *)(v0 + 16));
}

void NWProtocolFramer.Instance.scheduleWakeup(wakeupTime:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    v2 = -1;
  else
    v2 = *(_QWORD *)a1;
  nw_framer_schedule_wakeup(*(nw_framer_t *)(v1 + 16), v2);
}

uint64_t NWProtocolFramer.Instance.async(execute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  _QWORD v6[6];

  v3 = *(NSObject **)(v2 + 16);
  v6[4] = a1;
  v6[5] = a2;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1107296256;
  v6[2] = sub_18305665C;
  v6[3] = &block_descriptor_22;
  v4 = _Block_copy(v6);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_framer_async(v3, v4);
  _Block_release(v4);
  return swift_unknownObjectRelease();
}

uint64_t NWProtocolFramer.Instance.remote.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1832A555C((uint64_t (*)(_QWORD))nw_framer_copy_remote_endpoint, a1);
}

uint64_t NWProtocolFramer.Instance.local.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1832A555C((uint64_t (*)(_QWORD))nw_framer_copy_local_endpoint, a1);
}

uint64_t sub_1832A555C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  NSObject *v4;

  v4 = a1(*(_QWORD *)(v2 + 16));
  return sub_183056F9C(v4, a2);
}

uint64_t NWProtocolFramer.Instance.parameters.getter()
{
  uint64_t v0;
  nw_parameters_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = nw_framer_copy_parameters(*(nw_framer_t *)(v0 + 16));
  type metadata accessor for NWParameters();
  v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  return v2;
}

uint64_t NWProtocolFramer.Instance.options.getter()
{
  uint64_t v0;
  nw_protocol_options_t v1;
  uint64_t result;

  v1 = nw_framer_copy_options(*(nw_framer_t *)(v0 + 16));
  type metadata accessor for NWProtocolFramer.Options();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v1;
  return result;
}

uint64_t NWProtocolFramer.Instance.prependApplicationProtocol(options:)(uint64_t a1)
{
  return sub_1832A565C(a1, (uint64_t (*)(_QWORD, _QWORD))nw_framer_prepend_application_protocol);
}

uint64_t NWProtocolFramer.Instance.prependApplicationProtocolUnsafe(options:)(uint64_t a1)
{
  return sub_1832A565C(a1, (uint64_t (*)(_QWORD, _QWORD))nw_framer_prepend_application_protocol_unsafe);
}

uint64_t sub_1832A565C(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = a2(*(_QWORD *)(v2 + 16), *(_QWORD *)(a1 + 16));
  if (!(_DWORD)result)
  {
    sub_18323C200();
    swift_allocError();
    *(_DWORD *)v4 = 22;
    *(_BYTE *)(v4 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t NWProtocolFramer.Instance.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWProtocolFramer.Instance.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

BOOL static NWProtocolFramer.StartResult.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWProtocolFramer.StartResult.hash(into:)()
{
  return sub_183B9225C();
}

uint64_t NWProtocolFramer.StartResult.hashValue.getter()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

uint64_t NWProtocolFramer.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t NWProtocolFramer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1832A57A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;
  const uint8_t *v12;
  BOOL v13;
  int64_t v14;
  size_t v15;

  result = sub_183B912D8();
  v12 = (const uint8_t *)result;
  if (result)
  {
    result = sub_183B912FC();
    if (__OFSUB__(a1, result))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
    v12 += a1 - result;
  }
  v13 = __OFSUB__(a2, a1);
  v14 = a2 - a1;
  if (v13)
  {
    __break(1u);
    goto LABEL_11;
  }
  result = sub_183B912F0();
  if (!v12)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result >= v14)
    v15 = v14;
  else
    v15 = result;
  nw_framer_deliver_input(*(nw_framer_t *)(a4 + 16), v12, v15, *(nw_framer_message_t *)(a5 + 16), a6 & 1);
  swift_release();
  return swift_release();
}

uint64_t sub_1832A5858()
{
  return swift_deallocObject();
}

uint64_t sub_1832A5868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
    v4 = a1 + a2;
  else
    v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v3 + 16))(a1, v4, 0, a3);
}

uint64_t sub_1832A589C()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for NWProtocolFramer.Options()
{
  return objc_opt_self();
}

unint64_t sub_1832A58D0()
{
  unint64_t result;

  result = qword_1EDCDDE20;
  if (!qword_1EDCDDE20)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWProtocolFramer.StartResult, &type metadata for NWProtocolFramer.StartResult);
    atomic_store(result, (unint64_t *)&qword_1EDCDDE20);
  }
  return result;
}

double sub_1832A5914@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1832A453C(a1, (uint64_t (*)(uint64_t, uint64_t))nw_framer_options_copy_object_value, a2);
}

uint64_t sub_1832A5930(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_1832A45BC(a1, a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))sub_1832A423C);
}

uint64_t sub_1832A594C()
{
  return 0;
}

double sub_1832A595C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1832A453C(a1, (uint64_t (*)(uint64_t, uint64_t))nw_framer_message_copy_object_value, a2);
}

uint64_t sub_1832A5978(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_1832A45BC(a1, a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))sub_1832A4698);
}

uint64_t sub_1832A5994()
{
  return 0;
}

uint64_t type metadata accessor for NWProtocolFramer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolFramer.Definition()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolFramer.Definition()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolFramer.Definition.__allocating_init(implementation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for NWProtocolFramer.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolFramer.Options.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of NWProtocolFramer.Options.subscript.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of NWProtocolFramer.Options.subscript.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t type metadata accessor for NWProtocolFramer.Message()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolFramer.Message()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NWProtocolFramer.Message.__allocating_init(instance:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWProtocolFramer.Message.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of NWProtocolFramer.Message.subscript.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NWProtocolFramer.Message.subscript.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t type metadata accessor for NWProtocolFramer.Instance()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolFramer.Instance()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for NWProtocolFramer.Instance.WakeupTime()
{
  return &type metadata for NWProtocolFramer.Instance.WakeupTime;
}

uint64_t storeEnumTagSinglePayload for NWProtocolFramer.StartResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1832A5B10 + 4 * byte_183BA3085[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1832A5B44 + 4 * byte_183BA3080[v4]))();
}

uint64_t sub_1832A5B44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832A5B4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832A5B54);
  return result;
}

uint64_t sub_1832A5B60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1832A5B68);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1832A5B6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832A5B74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolFramer.StartResult()
{
  return &type metadata for NWProtocolFramer.StartResult;
}

uint64_t dispatch thunk of static NWProtocolFramerImplementation.label.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.init(framer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.start(framer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.handleInput(framer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.handleOutput(framer:message:messageLength:isComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.wakeup(framer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.stop(framer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.cleanup(framer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t sub_1832A5BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2, ObjectType, v1);
}

uint64_t sub_1832A5C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1832A4034(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t sub_1832A5C30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, ObjectType, v1);
}

uint64_t sub_1832A5C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 56))(v2, ObjectType, v1) & 1;
}

uint64_t sub_1832A5CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 64))(v2, ObjectType, v1);
}

uint64_t sub_1832A5D5C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1832A3478((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v2;
    *v2 = 0x8000000000000000;
    sub_1832FA050(v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = sub_183B91F44();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_1830620D4(a1, (uint64_t *)&unk_1EDCD7B90);
    sub_1832F7144(a2, v9);
    v7 = sub_183B91F44();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    return sub_1830620D4((uint64_t)v9, (uint64_t *)&unk_1EDCD7B90);
  }
}

uint64_t sub_1832A5E40(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3F0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NWActorDiscoveryMechanism(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_1830620D4(a1, &qword_1EDCDD3F0);
    sub_1832F7430(a2, (uint64_t)v8);
    sub_183058AE0((uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    return sub_1830620D4((uint64_t)v8, &qword_1EDCDD3F0);
  }
  else
  {
    sub_183058EC4(a1, (uint64_t)v11, type metadata accessor for NWActorDiscoveryMechanism);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *v3;
    *v3 = 0x8000000000000000;
    sub_1832FA4B0((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v16;
    swift_bridgeObjectRelease();
    return sub_183058AE0((uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  }
}

uint64_t sub_1832A5FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD418);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NWActorSystem.ServerRole();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_1830620D4(a1, &qword_1EDCDD418);
    sub_1832F7564(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_1830620D4((uint64_t)v10, &qword_1EDCDD418);
  }
  else
  {
    sub_183058EC4(a1, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v4;
    *v4 = 0x8000000000000000;
    sub_1832FA620((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1832A6110(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1EDCD75D0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_1830620D4(a1, qword_1EDCD75D0);
    v13 = sub_1832F6914(a2);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = *v3;
      v22 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1832FC060();
        v17 = v22;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(_QWORD *)(v17 + 56) + *(_QWORD *)(v10 + 72) * v15, v9);
      sub_1832B97E0(v15, v17);
      *v3 = v17;
      swift_bridgeObjectRelease();
      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v18, 1, v9);
    return sub_1830620D4((uint64_t)v8, qword_1EDCD75D0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v3;
    *v3 = 0x8000000000000000;
    sub_1832FA770((uint64_t)v12, a2, v19);
    *v3 = v22;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1832A62EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDED0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_1830620D4(a1, &qword_1EDCDDED0);
    sub_1832F769C(a2, (uint64_t)v8);
    v13 = sub_183B914AC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_1830620D4((uint64_t)v8, &qword_1EDCDDED0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_1832FA898((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = sub_183B914AC();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t NWActorSystemResultHandler.onReturn<A>(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[11] = a2;
  v3[12] = v2;
  v3[10] = a1;
  swift_conformsToProtocol();
  v3[13] = swift_conformsToProtocol();
  v3[14] = type metadata accessor for ReplyEnvelope();
  v3[15] = swift_task_alloc();
  v4 = sub_183B91F44();
  v3[16] = v4;
  v3[17] = *(_QWORD *)(v4 - 8);
  v3[18] = swift_task_alloc();
  v3[19] = type metadata accessor for NWFileSerializationContext(0);
  v3[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1832A6550()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_0;
  void (*v12)(uint64_t *, _QWORD);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;

  v1 = v0[19];
  v2 = v0[20];
  v3 = v0[12];
  v4 = type metadata accessor for NWActorSystemResultHandler();
  sub_18324A894(v3 + *(int *)(v4 + 28), v2);
  v25 = v4;
  sub_183058C44(v3 + *(int *)(v4 + 24), v2 + *(int *)(v1 + 20), (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  sub_183B912A8();
  swift_allocObject();
  v0[21] = sub_183B9129C();
  if (qword_1EDCDC618 != -1)
    swift_once();
  v5 = v0[19];
  v6 = v0[20];
  v7 = v0[17];
  v8 = v0[18];
  v9 = v0[16];
  v10 = __swift_project_value_buffer(v9, (uint64_t)qword_1EDCF2A78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v10, v9);
  v0[5] = v5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 2);
  sub_183058C44(v6, (uint64_t)boxed_opaque_existential_0, type metadata accessor for NWFileSerializationContext);
  v12 = (void (*)(uint64_t *, _QWORD))sub_183B91290();
  sub_1832A5D5C((uint64_t)(v0 + 2), v8);
  v12(v0 + 6, 0);
  sub_183058AE0(v6, type metadata accessor for NWFileSerializationContext);
  v13 = sub_183B91284();
  v0[22] = v13;
  v0[23] = v14;
  v15 = v13;
  v16 = v14;
  v18 = v0[14];
  v17 = v0[15];
  v19 = v0[12];
  v20 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v19, v20);
  v21 = (uint64_t *)(v17 + *(int *)(v18 + 20));
  *v21 = v15;
  v21[1] = v16;
  v22 = v17 + *(int *)(v18 + 24);
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_BYTE *)(v22 + 16) = -1;
  __swift_project_boxed_opaque_existential_2((_QWORD *)(v19 + *(int *)(v25 + 20)), *(_QWORD *)(v19 + *(int *)(v25 + 20) + 24));
  sub_18324A994(v15, v16);
  v23 = (_QWORD *)swift_task_alloc();
  v0[24] = (uint64_t)v23;
  *v23 = v0;
  v23[1] = sub_1832A67CC;
  return sub_1832B676C(v0[15]);
}

uint64_t sub_1832A67CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832A6830()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 120);
  swift_release();
  sub_18308485C(v1, v2);
  sub_183058AE0(v3, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832A68B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 120);
  swift_release();
  sub_18308485C(v1, v2);
  sub_183058AE0(v3, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for NWActorSystemResultHandler()
{
  uint64_t result;

  result = qword_1EDCDDEC0;
  if (!qword_1EDCDDEC0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t NWActorSystemResultHandler.onReturnVoid()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[2] = v0;
  v1[3] = type metadata accessor for ReplyEnvelope();
  v1[4] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1832A69CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v0[2];
  v4 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v1, v3, v4);
  *(_OWORD *)(v1 + *(int *)(v2 + 20)) = xmmword_183B9FD60;
  v5 = v1 + *(int *)(v2 + 24);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 16) = -1;
  v6 = type metadata accessor for NWActorSystemResultHandler();
  __swift_project_boxed_opaque_existential_2((_QWORD *)(v3 + *(int *)(v6 + 20)), *(_QWORD *)(v3 + *(int *)(v6 + 20) + 24));
  v7 = (_QWORD *)swift_task_alloc();
  v0[5] = v7;
  *v7 = v0;
  v7[1] = sub_1832A6A88;
  return sub_1832B676C(v0[4]);
}

uint64_t sub_1832A6A88()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832A6AEC()
{
  uint64_t v0;

  sub_183058AE0(*(_QWORD *)(v0 + 32), (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832A6B34()
{
  uint64_t v0;

  sub_183058AE0(*(_QWORD *)(v0 + 32), (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NWActorSystemResultHandler.onThrow<A>(error:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(_QWORD *)(a2 - 8);
  v3[6] = swift_task_alloc();
  v3[7] = type metadata accessor for ReplyEnvelope();
  v3[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1832A6BF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = v0[7];
  v1 = v0[8];
  v4 = v0[5];
  v3 = v0[6];
  v6 = v0[3];
  v5 = v0[4];
  v7 = v0[2];
  v8 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v1, v5, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v6);
  v9 = sub_183B91734();
  *(_OWORD *)(v1 + *(int *)(v2 + 20)) = xmmword_183B9FD60;
  v10 = v1 + *(int *)(v2 + 24);
  *(_QWORD *)v10 = v9;
  *(_QWORD *)(v10 + 8) = v11;
  *(_BYTE *)(v10 + 16) = 1;
  v12 = type metadata accessor for NWActorSystemResultHandler();
  __swift_project_boxed_opaque_existential_2((_QWORD *)(v5 + *(int *)(v12 + 20)), *(_QWORD *)(v5 + *(int *)(v12 + 20) + 24));
  v13 = (_QWORD *)swift_task_alloc();
  v0[9] = v13;
  *v13 = v0;
  v13[1] = sub_1832A6CEC;
  return sub_1832B676C(v0[8]);
}

uint64_t sub_1832A6CEC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832A6D50()
{
  uint64_t v0;

  sub_183058AE0(*(_QWORD *)(v0 + 64), (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832A6DA4()
{
  uint64_t v0;

  sub_183058AE0(*(_QWORD *)(v0 + 64), (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832A6DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  swift_conformsToProtocol();
  swift_conformsToProtocol();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_183246848;
  return NWActorSystemResultHandler.onReturn<A>(value:)(a1, a2);
}

uint64_t sub_1832A6E74(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[2] = v1;
  v2[3] = a1;
  v2[4] = type metadata accessor for ReplyEnvelope();
  v2[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1832A6ED0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[2];
  v4 = v0[3];
  v5 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v1, v3, v5);
  *(_OWORD *)(v1 + *(int *)(v2 + 20)) = xmmword_183B9FD60;
  v6 = v1 + *(int *)(v2 + 24);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) = -1;
  __swift_project_boxed_opaque_existential_2((_QWORD *)(v3 + *(int *)(v4 + 20)), *(_QWORD *)(v3 + *(int *)(v4 + 20) + 24));
  v7 = (_QWORD *)swift_task_alloc();
  v0[6] = v7;
  *v7 = v0;
  v7[1] = sub_1832A6F84;
  return sub_1832B676C(v0[5]);
}

uint64_t sub_1832A6F84()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832A6FE8()
{
  uint64_t v0;

  sub_183058AE0(*(_QWORD *)(v0 + 40), (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832A7030()
{
  uint64_t v0;

  sub_183058AE0(*(_QWORD *)(v0 + 40), (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832A7078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_183243DAC;
  return NWActorSystemResultHandler.onThrow<A>(error:)(a1, a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for NWActorSystemResultHandler(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_183B914AC();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = *(_OWORD *)((char *)a2 + v9 + 24);
    *(_OWORD *)((char *)a1 + v9 + 24) = v10;
    (**(void (***)(void))(v10 - 8))();
    v11 = a3[6];
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (char *)a2 + v11;
    v14 = *(uint64_t *)((char *)a2 + v11 + 8);
    *v12 = *(uint64_t *)((char *)a2 + v11);
    v12[1] = v14;
    v15 = *(int *)(type metadata accessor for NWActorID() + 20);
    v16 = (char *)v12 + v15;
    v17 = &v13[v15];
    swift_bridgeObjectRetain();
    v8((uint64_t *)v16, (uint64_t *)v17, v7);
    v18 = a3[7];
    v19 = *(_OWORD *)((char *)a2 + v18 + 24);
    *(_OWORD *)((char *)a1 + v18 + 24) = v19;
    (**(void (***)(void))(v19 - 8))();
  }
  return a1;
}

uint64_t destroy for NWActorSystemResultHandler(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v4 = sub_183B914AC();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  __swift_destroy_boxed_opaque_existential_2(a1 + a2[5]);
  v6 = a1 + a2[6];
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for NWActorID();
  v5(v6 + *(int *)(v7 + 20), v4);
  return __swift_destroy_boxed_opaque_existential_2(a1 + a2[7]);
}

uint64_t initializeWithCopy for NWActorSystemResultHandler(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v6 = sub_183B914AC();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = *(_OWORD *)(a2 + v8 + 24);
  *(_OWORD *)(a1 + v8 + 24) = v9;
  (**(void (***)(void))(v9 - 8))();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a2 + v10 + 8);
  *v11 = *(_QWORD *)(a2 + v10);
  v11[1] = v13;
  v14 = *(int *)(type metadata accessor for NWActorID() + 20);
  v15 = (char *)v11 + v14;
  v16 = v12 + v14;
  swift_bridgeObjectRetain();
  v7((uint64_t)v15, v16, v6);
  v17 = a3[7];
  v18 = *(_OWORD *)(a2 + v17 + 24);
  *(_OWORD *)(a1 + v17 + 24) = v18;
  (**(void (***)(void))(v18 - 8))();
  return a1;
}

char *assignWithCopy for NWActorSystemResultHandler(char *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_183B914AC();
  v7 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)&a1[a3[5]], (uint64_t *)(a2 + a3[5]));
  v8 = a3[6];
  v9 = &a1[v8];
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)(a2 + v8);
  *((_QWORD *)v9 + 1) = *(_QWORD *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = type metadata accessor for NWActorID();
  v7(&v9[*(int *)(v11 + 20)], v10 + *(int *)(v11 + 20), v6);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)&a1[a3[7]], (uint64_t *)(a2 + a3[7]));
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for NWActorSystemResultHandler(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v6 = sub_183B914AC();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
  v13 = a1 + v9;
  v14 = a2 + v9;
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v15 = type metadata accessor for NWActorID();
  v7(v13 + *(int *)(v15 + 20), v14 + *(int *)(v15 + 20), v6);
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
  return a1;
}

char *assignWithTake for NWActorSystemResultHandler(char *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;

  v6 = sub_183B914AC();
  v7 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = a2 + v8;
  __swift_destroy_boxed_opaque_existential_2((uint64_t)&a1[v8]);
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  *((_QWORD *)v9 + 4) = *(_QWORD *)(v10 + 32);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a2 + v12 + 8);
  *(_QWORD *)v13 = *(_QWORD *)(a2 + v12);
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v16 = type metadata accessor for NWActorID();
  v7(&v13[*(int *)(v16 + 20)], v14 + *(int *)(v16 + 20), v6);
  v17 = a3[7];
  v18 = &a1[v17];
  v19 = a2 + v17;
  __swift_destroy_boxed_opaque_existential_2((uint64_t)&a1[v17]);
  v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  *((_QWORD *)v18 + 4) = *(_QWORD *)(v19 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorSystemResultHandler()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832A7750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_183B914AC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for NWActorID();
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for NWActorSystemResultHandler()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832A7808(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_183B914AC();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for NWActorID();
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1832A78B0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_183B914AC();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for NWActorID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

id sub_1832A793C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a36 < 0)
    return a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_18324C148(a8, a9);
  sub_18324C148(a15, a16);
  sub_18324C148(a22, a23);
  sub_18324C148(a29, a30);
  return (id)swift_retain();
}

void _s11RequestTypeOwxx(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;

  v2 = *(_OWORD *)(a1 + 240);
  v3 = *(_OWORD *)(a1 + 256);
  v1 = *(_OWORD *)(a1 + 208);
  sub_1832A7B44(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v1,
    *((uint64_t *)&v1 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v2,
    *((uint64_t *)&v2 + 1),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280));
}

void sub_1832A7B44(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a36 < 0)
  {

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18324C184(a8, a9);
    sub_18324C184(a15, a16);
    sub_18324C184(a22, a23);
    sub_18324C184(a29, a30);
    swift_release();
  }
}

_QWORD *_s11RequestTypeOwcp(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a2 + 168);
  v26 = *(_QWORD *)(a2 + 176);
  v27 = *(_QWORD *)(a2 + 184);
  v28 = *(_QWORD *)(a2 + 192);
  v29 = *(_QWORD *)(a2 + 200);
  v30 = *(_QWORD *)(a2 + 208);
  v31 = *(_QWORD *)(a2 + 216);
  v32 = *(_QWORD *)(a2 + 224);
  v33 = *(_QWORD *)(a2 + 232);
  v34 = *(_QWORD *)(a2 + 240);
  v35 = *(_QWORD *)(a2 + 248);
  v36 = *(_QWORD *)(a2 + 256);
  v37 = *(_QWORD *)(a2 + 264);
  v38 = *(_QWORD *)(a2 + 272);
  v39 = *(_QWORD *)(a2 + 280);
  v3 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 48);
  sub_1832A793C(*(void **)a2, v5, v6, v7, v8, v9, v10, v11, v3, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v3;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  a1[24] = v28;
  a1[25] = v29;
  a1[26] = v30;
  a1[27] = v31;
  a1[28] = v32;
  a1[29] = v33;
  a1[30] = v34;
  a1[31] = v35;
  a1[32] = v36;
  a1[33] = v37;
  a1[34] = v38;
  a1[35] = v39;
  return a1;
}

uint64_t _s11RequestTypeOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;

  v61 = *(void **)a2;
  v62 = *(_QWORD *)(a2 + 8);
  v59 = *(_QWORD *)(a2 + 24);
  v60 = *(_QWORD *)(a2 + 16);
  v57 = *(_QWORD *)(a2 + 40);
  v58 = *(_QWORD *)(a2 + 32);
  v55 = *(_QWORD *)(a2 + 56);
  v56 = *(_QWORD *)(a2 + 48);
  v36 = *(_QWORD *)(a2 + 72);
  v37 = *(_QWORD *)(a2 + 80);
  v38 = *(_QWORD *)(a2 + 88);
  v39 = *(_QWORD *)(a2 + 96);
  v40 = *(_QWORD *)(a2 + 104);
  v41 = *(_QWORD *)(a2 + 112);
  v42 = *(_QWORD *)(a2 + 120);
  v43 = *(_QWORD *)(a2 + 128);
  v3 = *(_QWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 152);
  v5 = *(_QWORD *)(a2 + 160);
  v6 = *(_QWORD *)(a2 + 168);
  v7 = *(_QWORD *)(a2 + 176);
  v8 = *(_QWORD *)(a2 + 184);
  v9 = *(_QWORD *)(a2 + 192);
  v10 = *(_QWORD *)(a2 + 200);
  v44 = *(_QWORD *)(a2 + 136);
  v45 = *(_QWORD *)(a2 + 208);
  v46 = *(_QWORD *)(a2 + 216);
  v47 = *(_QWORD *)(a2 + 224);
  v48 = *(_QWORD *)(a2 + 232);
  v49 = *(_QWORD *)(a2 + 240);
  v50 = *(_QWORD *)(a2 + 248);
  v51 = *(_QWORD *)(a2 + 256);
  v52 = *(_QWORD *)(a2 + 264);
  v53 = *(_QWORD *)(a2 + 272);
  v54 = *(_QWORD *)(a2 + 280);
  v11 = *(_QWORD *)(a2 + 64);
  sub_1832A793C(*(void **)a2, v62, v60, v59, v58, v57, v56, v55, v11, v36, v37, v38, v39, v40, v41, v42, v43, v44, v3,
    v4,
    v5,
    v6,
    v7,
    v8,
    v9,
    v10,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54);
  v12 = *(void **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v61;
  *(_QWORD *)(a1 + 8) = v62;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v60;
  *(_QWORD *)(a1 + 24) = v59;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v58;
  *(_QWORD *)(a1 + 40) = v57;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v56;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 56) = v55;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v36;
  *(_QWORD *)(a1 + 80) = v37;
  *(_QWORD *)(a1 + 88) = v38;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v39;
  *(_QWORD *)(a1 + 104) = v40;
  *(_QWORD *)(a1 + 112) = v41;
  *(_QWORD *)(a1 + 120) = v42;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v43;
  *(_QWORD *)(a1 + 136) = v44;
  *(_QWORD *)(a1 + 144) = v3;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 152) = v4;
  *(_QWORD *)(a1 + 160) = v5;
  *(_QWORD *)(a1 + 168) = v6;
  *(_QWORD *)(a1 + 176) = v7;
  v28 = *(_OWORD *)(a1 + 192);
  v29 = *(_OWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 184) = v8;
  *(_QWORD *)(a1 + 192) = v9;
  *(_QWORD *)(a1 + 200) = v10;
  *(_QWORD *)(a1 + 208) = v45;
  *(_QWORD *)(a1 + 216) = v46;
  v30 = *(_OWORD *)(a1 + 224);
  v31 = *(_OWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v47;
  *(_QWORD *)(a1 + 232) = v48;
  *(_QWORD *)(a1 + 240) = v49;
  *(_QWORD *)(a1 + 248) = v50;
  v32 = *(_OWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v51;
  *(_QWORD *)(a1 + 264) = v52;
  v33 = *(_QWORD *)(a1 + 272);
  v34 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = v53;
  *(_QWORD *)(a1 + 280) = v54;
  sub_1832A7B44(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    v34);
  return a1;
}

void *__swift_memcpy288_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t _s11RequestTypeOwta(uint64_t a1, _OWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a1 + 128);
  v17 = *(_OWORD *)(a1 + 144);
  v18 = *(_OWORD *)(a1 + 160);
  v19 = *(_OWORD *)(a1 + 176);
  v20 = *(_OWORD *)(a1 + 192);
  v21 = *(_OWORD *)(a1 + 208);
  v22 = *(_OWORD *)(a1 + 224);
  v23 = *(_OWORD *)(a1 + 240);
  v24 = *(_OWORD *)(a1 + 256);
  v25 = *(_QWORD *)(a1 + 272);
  v26 = *(_QWORD *)(a1 + 280);
  v27 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v27;
  v28 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v28;
  v29 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v29;
  v30 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v30;
  v31 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v31;
  v32 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v32;
  v33 = a2[13];
  *(_OWORD *)(a1 + 192) = a2[12];
  *(_OWORD *)(a1 + 208) = v33;
  v34 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v34;
  v35 = a2[17];
  *(_OWORD *)(a1 + 256) = a2[16];
  *(_OWORD *)(a1 + 272) = v35;
  sub_1832A7B44(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    v26);
  return a1;
}

uint64_t _s11RequestTypeOwet(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 288))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 33);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t _s11RequestTypeOwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 288) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 32) = (unint64_t)-a2 << 8;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 104) = 0u;
      *(_OWORD *)(result + 120) = 0u;
      *(_OWORD *)(result + 136) = 0u;
      *(_OWORD *)(result + 152) = 0u;
      *(_OWORD *)(result + 168) = 0u;
      *(_OWORD *)(result + 184) = 0u;
      *(_OWORD *)(result + 200) = 0u;
      *(_OWORD *)(result + 216) = 0u;
      *(_OWORD *)(result + 232) = 0u;
      *(_OWORD *)(result + 248) = 0u;
      *(_QWORD *)(result + 280) = 0;
      *(_OWORD *)(result + 40) = 0u;
      result += 40;
      *(_OWORD *)(result + 224) = 0u;
      return result;
    }
    *(_BYTE *)(result + 288) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1832A8370(uint64_t a1)
{
  return *(_QWORD *)(a1 + 280) >> 63;
}

uint64_t sub_1832A837C(uint64_t result)
{
  *(_QWORD *)(result + 280) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_1832A838C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 280) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *(_QWORD *)(result + 32) = *(unsigned __int8 *)(result + 32);
  *(_QWORD *)(result + 280) = v2;
  return result;
}

ValueMetadata *_s11RequestTypeOMa()
{
  return &_s11RequestTypeON;
}

uint64_t sub_1832A83B8@<X0>(char *a1@<X0>, uint64_t isEscapingClosureAtFileLocation@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  void *v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t result;
  _QWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43[3];
  _QWORD v44[36];
  uint64_t v45;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_183B913A4();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v41 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v36 - v11;
  v13 = objc_msgSend(a1, sel_HTTPMethod);
  if (!v13)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v14 = v13;
  v15 = sub_183B916E0();
  v17 = v16;

  if ((v17 & 0x1000000000000000) != 0)
  {
    v15 = sub_1832F5B78();
    v19 = v18;
    swift_bridgeObjectRelease();
    v17 = v19;
    if ((v19 & 0x2000000000000000) == 0)
      goto LABEL_4;
LABEL_7:
    v44[0] = v15;
    v44[1] = v17 & 0xFFFFFFFFFFFFFFLL;
    goto LABEL_8;
  }
  if ((v17 & 0x2000000000000000) != 0)
    goto LABEL_7;
LABEL_4:
  if ((v15 & 0x1000000000000000) == 0)
    goto LABEL_17;
LABEL_8:
  while (1)
  {
    v39 = sub_183B917A0();
    v21 = v20;
    v22 = objc_msgSend(a1, sel_URL);
    if (!v22)
      break;
    v23 = v22;
    v40 = a1;
    v38 = (void *)isEscapingClosureAtFileLocation;
    v24 = v41;
    sub_183B91374();

    v25 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v25(v6, v24, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
    if ((_DWORD)result == 1)
      goto LABEL_21;
    v37 = v12;
    v25(v12, v6, v7);
    type metadata accessor for HTTPFields._Storage();
    v27 = (_QWORD *)swift_allocObject();
    v28 = MEMORY[0x1E0DEE9D8];
    v27[2] = MEMORY[0x1E0DEE9D8];
    v27[3] = sub_1832F2514(v28);
    v29 = (_DWORD *)swift_slowAlloc();
    v27[4] = v29;
    *v29 = 0;
    v45 = (uint64_t)v27;
    v30 = (void *)objc_opt_self();
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = &v45;
    v6 = (char *)swift_allocObject();
    *((_QWORD *)v6 + 2) = sub_1832AA29C;
    *((_QWORD *)v6 + 3) = v31;
    v44[4] = sub_182FEDAC0;
    v44[5] = v6;
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 1107296256;
    v44[2] = sub_1832A8CD0;
    v44[3] = &block_descriptor_10;
    a1 = (char *)_Block_copy(v44);
    swift_retain();
    swift_release();
    v12 = v40;
    objc_msgSend(v30, sel__enumerateHTTPHeaderFieldsWithRequest_usingBlock_, v40, a1);
    _Block_release(a1);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      v32 = HIBYTE(v21) & 0xF;
      v33 = v39;
      if ((v21 & 0x2000000000000000) == 0)
        v32 = v39 & 0xFFFFFFFFFFFFLL;
      if (v32)
      {
        v6 = 0;
        if ((sub_18329D8B4(v39, v21) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v43[0] = v33;
          v43[1] = v21;
          v34 = (uint64_t)v41;
          v35 = v37;
          (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v41, v37, v7);
          v42 = v45;
          swift_retain();
          HTTPRequest.init(method:url:headerFields:)(v43, v34, &v42, v44);

          (*(void (**)(char *, uint64_t))(v8 + 8))(v35, v7);
          memcpy(v38, v44, 0x120uLL);
          swift_release();
          return swift_release();
        }
      }
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_19;
    }
    __break(1u);
LABEL_17:
    sub_183B91E78();
  }
LABEL_20:
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1832A87EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *i;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL (*v38)(unsigned __int8 *);
  BOOL (*v39)(unsigned __int8 *);
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  unint64_t v43;
  char *(*v45)@<X0>(char *@<X0>, _BYTE *@<X8>);
  __int128 v46[2];
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[3];
  uint64_t v53;
  _QWORD v54[4];
  char v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  char *(*v59)@<X0>(char *@<X0>, _BYTE *@<X8>);
  uint64_t v60;
  BOOL (*v61)(unsigned __int8 *);
  uint64_t v62;
  BOOL (*v63)(unsigned __int8 *);
  uint64_t v64;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    *(_QWORD *)&v58 = a1;
    *((_QWORD *)&v58 + 1) = a2 & 0xFFFFFFFFFFFFFFLL;
    goto LABEL_7;
  }
  a1 = sub_1832F5B78();
  v10 = v9;
  swift_bridgeObjectRelease();
  a2 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((a1 & 0x1000000000000000) == 0)
    sub_183B91E78();
LABEL_7:
  v11 = sub_183B917A0();
  v13 = v12;
  if ((a4 & 0x1000000000000000) == 0)
  {
    if ((a4 & 0x2000000000000000) == 0)
      goto LABEL_9;
LABEL_12:
    *(_QWORD *)&v58 = a3;
    *((_QWORD *)&v58 + 1) = a4 & 0xFFFFFFFFFFFFFFLL;
    goto LABEL_13;
  }
  a3 = sub_1832F5B78();
  v15 = v14;
  swift_bridgeObjectRelease();
  a4 = v15;
  if ((v15 & 0x2000000000000000) != 0)
    goto LABEL_12;
LABEL_9:
  if ((a3 & 0x1000000000000000) == 0)
    sub_183B91E78();
LABEL_13:
  v16 = sub_183B917A0();
  v18 = v17;
  v19 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0)
    v19 = v11 & 0xFFFFFFFFFFFFLL;
  if (v19 && (sub_18329D8B4(v11, v13) & 1) != 0)
  {
    v20 = sub_183B91740();
    v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = (char *(*)@<X0>(char *@<X0>, _BYTE *@<X8>))v20;
    if (v20 == 0x65696B6F6F63 && v22 == 0xE600000000000000 || (sub_183B920F4() & 1) != 0)
    {
      *(_QWORD *)&v58 = v16;
      *((_QWORD *)&v58 + 1) = v18;
      *(_QWORD *)&v48 = 8251;
      *((_QWORD *)&v48 + 1) = 0xE200000000000000;
      sub_1832984EC();
      v23 = sub_183B91BFC();
      swift_bridgeObjectRelease();
      v24 = *(_QWORD *)(v23 + 16);
      if (v24)
      {
        v43 = v11;
        for (i = (uint64_t *)(v23 + 56); ; i += 4)
        {
          v32 = *(i - 3);
          v33 = *(i - 2);
          v34 = *(i - 1);
          v35 = *i;
          swift_bridgeObjectRetain();
          v26 = MEMORY[0x186DB1C70](v32, v33, v34, v35);
          v29 = v36;
          swift_bridgeObjectRelease();
          if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v26, v29))
            goto LABEL_25;
          *(_QWORD *)&v58 = v26;
          *((_QWORD *)&v58 + 1) = v29;
          v59 = sub_18327C868;
          v60 = 0;
          v61 = sub_18327C8A4;
          v62 = 0;
          v63 = sub_18327E03C;
          v64 = 0;
          v48 = v58;
          v49 = (unint64_t)sub_18327C868;
          v50 = (unint64_t)sub_18327C8A4;
          v51 = (unint64_t)sub_18327E03C;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD578);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE6F0);
          if ((swift_dynamicCast() & 1) != 0)
          {
            sub_183262D80(v46, (uint64_t)v52);
            __swift_project_boxed_opaque_existential_2(v52, v53);
            if ((sub_183B91FB0() & 1) != 0)
            {
              __swift_project_boxed_opaque_existential_2(v52, v53);
              sub_183B91FA4();
              v28 = *((_QWORD *)&v48 + 1);
              v26 = v48;
              __swift_destroy_boxed_opaque_existential_2((uint64_t)v52);
              goto LABEL_24;
            }
            __swift_destroy_boxed_opaque_existential_2((uint64_t)v52);
          }
          else
          {
            v47 = 0;
            memset(v46, 0, sizeof(v46));
            sub_18327DFFC((uint64_t)v46);
          }
          v26 = sub_1832A9DC0(&v58);
          v28 = v27;
LABEL_24:
          swift_bridgeObjectRelease();
          v29 = v28;
LABEL_25:
          v30 = *a5;
          swift_beginAccess();
          v31 = *(_QWORD *)(*(_QWORD *)(v30 + 16) + 16);
          v54[0] = v43;
          v54[1] = v13;
          v54[2] = v45;
          v54[3] = v22;
          v55 = 0;
          v56 = v26;
          v57 = v29;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_183294730(v31, v31, (uint64_t)v54);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!--v24)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v37 = sub_1832A1D8C(v16, v18);
      v39 = v38;
      v40 = *a5;
      swift_beginAccess();
      v41 = *(_QWORD *)(*(_QWORD *)(v40 + 16) + 16);
      *(_QWORD *)&v58 = v11;
      *((_QWORD *)&v58 + 1) = v13;
      v59 = v45;
      v60 = v22;
      LOBYTE(v61) = 0;
      v62 = v37;
      v63 = v39;
      sub_183294730(v41, v41, (uint64_t)&v58);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_1832A8CD0(uint64_t a1)
{
  void (*v1)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v2 = sub_183B916E0();
  v4 = v3;
  v5 = sub_183B916E0();
  v1(v2, v4, v5, v6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1832A8D3C(uint64_t a1, uint64_t a2, const __CFURL *a3)
{
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const __CFURL *v19;
  const __CFURL *v20;
  const __CFURL *v21;
  const __CFAllocator *v22;
  __CFString *v23;
  __CFString *v24;
  CFHTTPMessageRef Request;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __CFHTTPMessage *v30;
  __CFHTTPMessage *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  __CFHTTPMessage *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unsigned __int16 v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  CFURLRef v60;
  _QWORD v61[3];
  __CFHTTPMessage *v62;
  uint64_t v63;
  const __CFAllocator *v64;
  uint64_t v65;
  CFURLRef v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  _BYTE v74[7];
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *((_QWORD *)v3 + 5);
  v8 = *((_QWORD *)v3 + 6);
  v10 = *((_QWORD *)v3 + 35);
  v66 = a3;
  v67 = v10;
  if (!a3)
  {
    v11 = *((_BYTE *)v3 + 32);
    v13 = *((_QWORD *)v3 + 2);
    v12 = *((_QWORD *)v3 + 3);
    v70 = *v3;
    v71 = v13;
    v72 = v12;
    v73 = v11;
    *(_DWORD *)v74 = *(_DWORD *)((char *)v3 + 33);
    *(_DWORD *)&v74[3] = *((_DWORD *)v3 + 9);
    v75 = v9;
    v76 = v8;
    v90 = *(__int128 *)((char *)v3 + 264);
    v87 = *(__int128 *)((char *)v3 + 216);
    v88 = *(__int128 *)((char *)v3 + 232);
    v89 = *(__int128 *)((char *)v3 + 248);
    v83 = *(__int128 *)((char *)v3 + 152);
    v84 = *(__int128 *)((char *)v3 + 168);
    v85 = *(__int128 *)((char *)v3 + 184);
    v86 = *(__int128 *)((char *)v3 + 200);
    v14 = *(__int128 *)((char *)v3 + 104);
    v79 = *(__int128 *)((char *)v3 + 88);
    v80 = v14;
    v81 = *(__int128 *)((char *)v3 + 120);
    v82 = *(__int128 *)((char *)v3 + 136);
    v15 = *(__int128 *)((char *)v3 + 72);
    v77 = *(__int128 *)((char *)v3 + 56);
    v78 = v15;
    v91 = v67;
    HTTPRequest.url.getter((uint64_t)v7);
    v16 = sub_183B913A4();
    v17 = *(_QWORD *)(v16 - 8);
    v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v7, 1, v16);
    v66 = 0;
    if (v18 == 1)
      goto LABEL_5;
    v19 = (const __CFURL *)sub_183B9135C();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v16);
    v66 = v19;
    v20 = v19;
  }
  v21 = a3;
LABEL_5:
  v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  swift_bridgeObjectRetain();
  v23 = (__CFString *)sub_183B916D4();
  swift_bridgeObjectRelease();
  v24 = (__CFString *)sub_183B916D4();
  v64 = v22;
  Request = CFHTTPMessageCreateRequest(v22, v23, v66, v24);

  v26 = v67;
  swift_retain();
  v68 = (uint64_t *)(v26 + 16);
  swift_beginAccess();
  v27 = *(_QWORD *)(v26 + 16);
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v29 = 0;
    LODWORD(v65) = 1;
    do
    {
      v34 = v29++ << 6;
      v35 = v34 + 80;
      while (1)
      {
        if (v29 - 1 >= v28)
        {
          __break(1u);
          goto LABEL_33;
        }
        v36 = (uint64_t *)(v27 + v35);
        v37 = *(v36 - 6);
        v38 = *(v36 - 5);
        v39 = *v36;
        v40 = *(v36 - 4) == 0x65696B6F6F63 && *(v36 - 3) == 0xE600000000000000;
        if (v40 || (sub_183B920F4() & 1) != 0)
          break;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v41 = Request;
        v42 = v29;
        v43 = (void *)sub_183B916D4();
        v44 = (void *)sub_183B916D4();
        _CFHTTPMessageAddHeaderFieldValue();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v27 = *v68;
        v28 = *(_QWORD *)(*v68 + 16);
        v29 = v42 + 1;
        v35 += 64;
        if (v42 == v28)
          goto LABEL_30;
      }
      if ((v65 & 1) != 0)
      {
        v65 = v37;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v45 = sub_183290BA0();
        v46 = *(_QWORD *)(v45 + 16);
        v63 = v29;
        if (v46 && (v47 = sub_1832F67A0(0x65696B6F6F63, 0xE600000000000000), (v48 & 1) != 0))
          v49 = *(_WORD *)(*(_QWORD *)(v45 + 56) + 4 * v47);
        else
          v49 = -1;
        swift_bridgeObjectRelease();
        v50 = swift_bridgeObjectRetain();
        v51 = sub_183296AA0(v50, v49);
        swift_release();
        swift_bridgeObjectRelease();
        v52 = *(_QWORD *)(v51 + 16);
        if (v52)
        {
          v61[1] = v39;
          v61[2] = v38;
          v62 = Request;
          v69 = MEMORY[0x1E0DEE9D8];
          sub_183306BDC(0, v52, 0);
          v53 = v69;
          v61[0] = v51;
          v54 = (uint64_t *)(v51 + 80);
          do
          {
            v56 = *(v54 - 1);
            v55 = *v54;
            v69 = v53;
            v58 = *(_QWORD *)(v53 + 16);
            v57 = *(_QWORD *)(v53 + 24);
            swift_bridgeObjectRetain();
            if (v58 >= v57 >> 1)
            {
              sub_183306BDC(v57 > 1, v58 + 1, 1);
              v53 = v69;
            }
            *(_QWORD *)(v53 + 16) = v58 + 1;
            v59 = v53 + 16 * v58;
            *(_QWORD *)(v59 + 32) = v56;
            *(_QWORD *)(v59 + 40) = v55;
            v54 += 7;
            --v52;
          }
          while (v52);
          swift_release();
          Request = v62;
        }
        else
        {
          swift_release();
          v53 = MEMORY[0x1E0DEE9D8];
        }
        v69 = v53;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC378);
        sub_18327DAB4((unint64_t *)&qword_1EDCDC380, &qword_1EDCDC378, MEMORY[0x1E0DEAF20]);
        sub_183B9168C();
        swift_bridgeObjectRelease();
        v30 = Request;
        v31 = Request;
        v32 = (void *)sub_183B916D4();
        v33 = (void *)sub_183B916D4();
        swift_bridgeObjectRelease();
        _CFHTTPMessageAddHeaderFieldValue();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        Request = v31;
        v29 = v63;
      }
      LODWORD(v65) = 0;
      v27 = *v68;
      v28 = *(_QWORD *)(*v68 + 16);
    }
    while (v28 != v29);
  }
LABEL_30:
  swift_release();
  if (CFURLRequestCreateHTTPRequest())
  {

    v60 = v66;
  }
  else
  {
LABEL_33:
    __break(1u);
  }
}

uint64_t sub_1832A9318(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  _BYTE v9[32];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  sub_183306BF8(0, v2, 0);
  v3 = v10;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_18321887C(i, (uint64_t)v9);
      if (!swift_dynamicCast())
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_183306BF8(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v10;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_183306BF8(v5 > 1, v6 + 1, 1);
        v3 = v10;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      *(_QWORD *)(v3 + 8 * v6 + 32) = v8;
      if (!--v2)
        return v3;
    }
    swift_release();
    return 0;
  }
  return v3;
}

uint64_t sub_1832A9454(void *a1)
{
  __int128 *v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;
  const __CFAllocator *v14;
  __CFString *v15;
  __CFString *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  __CFHTTPMessage *v29;
  void *v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  const void *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61[2];
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  CFHTTPMessageRef Response;
  uint64_t v73;
  _BYTE v74[288];
  _BYTE v75[320];
  CFIndex v76;
  unint64_t v77;
  _QWORD v78[4];
  char v79;
  unint64_t v80;
  unint64_t v81;
  _BYTE v82[288];
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  MEMORY[0x1E0C80A78](v4);
  v61[0] = (uint64_t)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1832A9D28(a1, v82);
  v6 = *((_QWORD *)v1 + 2);
  v7 = *((_QWORD *)v1 + 3);
  v8 = *((_BYTE *)v1 + 32);
  v9 = *(__int128 *)((char *)v1 + 40);
  v10 = *((_QWORD *)v1 + 7);
  v11 = *((_QWORD *)v1 + 8);
  v12 = *((_QWORD *)v1 + 9);
  v83 = *v1;
  v84 = v6;
  v85 = v7;
  v86 = v8;
  v87 = v9;
  v88 = v10;
  v89 = v11;
  v62 = v12;
  v90 = v12;
  HTTPResponse.status.getter(&v76);
  v13 = v76;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  swift_bridgeObjectRetain();
  v15 = (__CFString *)sub_183B916D4();
  swift_bridgeObjectRelease();
  v16 = (__CFString *)sub_183B916D4();
  v61[1] = (uint64_t)v14;
  Response = CFHTTPMessageCreateResponse(v14, v13, v15, v16);

  swift_bridgeObjectRelease();
  sub_1832A9D28(v82, &v83);
  if (sub_1832A8370((uint64_t)&v83) == 1)
  {
    v17 = *(void **)sub_1832A837C((uint64_t)&v83);
    sub_1832A9D28(v82, &v76);
    v18 = *(void **)sub_1832A837C((uint64_t)&v76);
    sub_1832A9D3C((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1832A793C);
    v19 = v18;
    v20 = objc_msgSend(v17, sel_contentDispositionEncodingFallbackArray);
    if (v20)
    {
      v21 = v20;
      v22 = sub_183B9192C();

      v23 = sub_1832A9318(v22);
      sub_1832A9D3C((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1832A7B44);
      v24 = v23;
      swift_bridgeObjectRelease();
      sub_1832A9D3C((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1832A7B44);
      goto LABEL_7;
    }
    sub_1832A9D3C((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1832A7B44);
    sub_1832A9D3C((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1832A7B44);
  }
  else
  {
    sub_1832A837C((uint64_t)&v83);
  }
  v24 = 0;
LABEL_7:
  v25 = v62;
  swift_retain();
  swift_beginAccess();
  v26 = *(_QWORD *)(v25 + 16);
  v27 = *(void **)(v26 + 16);
  if (!v27)
  {
LABEL_49:
    swift_bridgeObjectRelease();
    swift_release();
    sub_1832A9D28(v82, &v76);
    if (sub_1832A8370((uint64_t)&v76) == 1)
    {
      v53 = objc_msgSend(*(id *)sub_1832A837C((uint64_t)&v76), sel_URL);
      if (v53)
      {
LABEL_54:
        v59 = CFURLResponseCreateWithHTTPResponse();

        if (!v59)
          goto LABEL_59;

        objc_opt_self();
        return swift_dynamicCastObjCClassUnconditional();
      }
      __break(1u);
    }
    v54 = (const void *)sub_1832A837C((uint64_t)&v76);
    memcpy(v74, v54, sizeof(v74));
    sub_1832A9D28(v82, v75);
    v55 = (_QWORD *)sub_1832A837C((uint64_t)v75);
    sub_18328212C(v55);
    v56 = v61[0];
    HTTPRequest.url.getter(v61[0]);
    v57 = sub_183B913A4();
    v58 = *(_QWORD *)(v57 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57) == 1)
      goto LABEL_60;
    v53 = (id)sub_183B9135C();
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
    sub_1832A9D3C((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1832A7B44);
    goto LABEL_54;
  }
  v2 = 0;
  v70 = 0;
  v71 = (uint64_t *)(v25 + 16);
  v63 = "Content-Disposition";
  v64 = v24;
  v65 = 0x8000000183C70E00;
  while (v2 < (unint64_t)v27)
  {
    v33 = v26 + (v2 << 6);
    v35 = *(_QWORD *)(v33 + 32);
    v34 = *(_QWORD *)(v33 + 40);
    v36 = *(_QWORD *)(v33 + 48);
    v37 = *(_QWORD *)(v33 + 56);
    v38 = *(_BYTE *)(v33 + 64);
    v40 = *(_QWORD *)(v33 + 72);
    v39 = *(_QWORD *)(v33 + 80);
    v78[0] = v35;
    v78[1] = v34;
    v78[2] = v36;
    v78[3] = v37;
    v79 = v38;
    v80 = v40;
    v81 = v39;
    if (!v24 || (v36 != 0xD000000000000013 || v37 != v65) && (sub_183B920F4() & 1) == 0)
    {
      v28 = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    v66 = v35;
    v67 = v37;
    v68 = v34;
    v69 = v2;
    if ((v39 & 0x2000000000000000) != 0)
      v41 = HIBYTE(v39) & 0xF;
    else
      v41 = v40 & 0xFFFFFFFFFFFFLL;
    v42 = (v40 >> 59) & 1;
    if ((v39 & 0x1000000000000000) == 0)
      LOBYTE(v42) = 1;
    v43 = 4 << v42;
    v73 = v39 & 0xFFFFFFFFFFFFFFLL;
    v44 = 15;
    do
    {
      while (1)
      {
        if (4 * v41 == v44 >> 14)
        {
          v76 = v40;
          v77 = v39;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          v48 = v64;
          swift_bridgeObjectRetain_n();
          v2 = Response;
          v49 = v70;
          v50 = sub_1832A9FB8(&v76, v48);
          swift_bridgeObjectRelease();
          v70 = v49;
          if (v49)
            goto LABEL_61;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          goto LABEL_46;
        }
        v45 = v44 & 0xC;
        v46 = v44;
        if (v45 == v43)
          v46 = sub_18329687C(v44, v40, v39);
        v2 = v46 >> 16;
        if (v46 >> 16 >= v41)
        {
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        if ((v39 & 0x1000000000000000) == 0)
          break;
        v2 = sub_183B91848();
        if (v45 == v43)
          goto LABEL_33;
LABEL_36:
        if ((v39 & 0x1000000000000000) != 0)
          goto LABEL_37;
LABEL_23:
        v44 = (v44 & 0xFFFFFFFFFFFF0000) + 65540;
        if ((v2 & 0x80) != 0)
          goto LABEL_44;
      }
      if ((v39 & 0x2000000000000000) != 0)
      {
        v76 = v40;
        v77 = v73;
        v2 = *((unsigned __int8 *)&v76 + v2);
        if (v45 == v43)
          goto LABEL_33;
        goto LABEL_36;
      }
      v47 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v40 & 0x1000000000000000) == 0)
        v47 = sub_183B91E78();
      v2 = *(unsigned __int8 *)(v47 + v2);
      if (v45 != v43)
        goto LABEL_36;
LABEL_33:
      v44 = sub_18329687C(v44, v40, v39);
      if ((v39 & 0x1000000000000000) == 0)
        goto LABEL_23;
LABEL_37:
      if (v41 <= v44 >> 16)
        goto LABEL_57;
      v44 = sub_183B91818();
    }
    while ((v2 & 0x80) == 0);
LABEL_44:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v51 = v64;
    swift_bridgeObjectRetain_n();
    v2 = Response;
    v52 = v70;
    v50 = sub_1833003E0(v40, v39, v51, (void *)v2, (uint64_t)v78);
    v48 = v51;
    swift_bridgeObjectRelease_n();

    v70 = v52;
    if (v52)
      goto LABEL_62;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
LABEL_46:
    v24 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v32 = v71;
    v2 = v69;
    if ((v50 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    v28 = v24;
LABEL_10:
    v29 = Response;
    v30 = (void *)sub_183B916D4();
    v31 = (void *)sub_183B916D4();
    _CFHTTPMessageAddHeaderFieldValue();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v24 = v28;
    v32 = v71;
LABEL_11:
    ++v2;
    swift_beginAccess();
    v26 = *v32;
    v27 = *(void **)(*v32 + 16);
    if ((void *)v2 == v27)
      goto LABEL_49;
  }
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  sub_1832A9D3C((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1832A7B44);
  __break(1u);
LABEL_61:
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_62:

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  result = swift_bridgeObjectRelease_n();
  __break(1u);
  return result;
}

void *sub_1832A9D28(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x120uLL);
}

uint64_t sub_1832A9D3C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v5 = *(_OWORD *)(a1 + 240);
  v6 = *(_OWORD *)(a1 + 256);
  v4 = *(_OWORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280));
  return a1;
}

uint64_t sub_1832A9DC0(__int128 *a1)
{
  uint64_t v1;
  __int128 v3;

  v3 = *a1;
  sub_1832AA2B4((uint64_t)&v3);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_183296CE8();
  sub_1832AA2DC((uint64_t)&v3);
  swift_release();
  swift_release();
  swift_release();
  v1 = sub_183B917A0();
  swift_release();
  return v1;
}

uint64_t sub_1832A9E78(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRetain();
  swift_retain();
  sub_183296EB4(a1, a2);
  swift_release();
  swift_bridgeObjectRelease();
  v4 = sub_183B917A0();
  swift_release();
  return v4;
}

uint64_t sub_1832A9F0C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  sub_18324A994(a1, a2);
  sub_18328BE04(a1, a2);
  sub_18308485C(a1, a2);
  v4 = sub_183B917A0();
  swift_release();
  return v4;
}

uint64_t sub_1832A9F80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_183B917A0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1832A9FB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  void *v19;

  v4 = sub_183B91728();
  MEMORY[0x1E0C80A78](v4);
  v6 = *a1;
  v5 = a1[1];
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_11:
    v14 = *(_QWORD *)(a2 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      v15 = 0;
      while (1)
      {
        sub_183B9171C();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDED8);
        sub_18327DAB4((unint64_t *)&qword_1EDCDDEE0, &qword_1EDCDDED8, MEMORY[0x1E0DEA5D8]);
        sub_183B916F8();
        if (v16)
          break;
        if (v14 == ++v15)
        {
LABEL_15:
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      swift_bridgeObjectRelease();
      v18 = (void *)sub_183B916D4();
      v19 = (void *)sub_183B916D4();
      swift_bridgeObjectRelease();
      _CFHTTPMessageAddHeaderFieldValue();

      return 1;
    }
    return 0;
  }
  v6 = sub_1832F5B78();
  v13 = v12;
  swift_bridgeObjectRelease();
  *a1 = v6;
  a1[1] = v13;
  if ((v13 & 0x2000000000000000) != 0)
    goto LABEL_11;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v7 = *(_QWORD *)(a2 + 16);
    if (v7)
      goto LABEL_5;
  }
  else
  {
    sub_183B91E78();
    v7 = *(_QWORD *)(a2 + 16);
    if (v7)
    {
LABEL_5:
      swift_bridgeObjectRetain();
      v8 = 0;
      while (1)
      {
        sub_183B9171C();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDED8);
        sub_18327DAB4((unint64_t *)&qword_1EDCDDEE0, &qword_1EDCDDED8, MEMORY[0x1E0DEA5D8]);
        sub_183B916F8();
        if (v9)
          break;
        if (v7 == ++v8)
          goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      v10 = (void *)sub_183B916D4();
      v11 = (void *)sub_183B916D4();
      swift_bridgeObjectRelease();
      _CFHTTPMessageAddHeaderFieldValue();

      return 1;
    }
  }
  return 0;
}

uint64_t sub_1832AA28C()
{
  return swift_deallocObject();
}

uint64_t sub_1832AA29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1832A87EC(a1, a2, a3, a4, *(uint64_t **)(v4 + 16));
}

uint64_t sub_1832AA2A4()
{
  return swift_deallocObject();
}

uint64_t sub_1832AA2B4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1832AA2DC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1832AA304()
{
  int64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  os_unfair_lock_s *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  os_unfair_lock_t v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  __int128 v49;
  uint64_t id;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDF20);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (unint64_t)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v44 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v44 - v13;
  if (qword_1EDCDC590 != -1)
LABEL_36:
    swift_once();
  v15 = sub_183B915CC();
  __swift_project_value_buffer(v15, (uint64_t)qword_1EDCDDEE8);
  swift_retain();
  v16 = sub_183B915B4();
  v17 = sub_183B91C80();
  v18 = os_log_type_enabled(v16, v17);
  v47 = v7;
  v48 = v5;
  if (v18)
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v19 = 134217984;
    id = nw_connection_get_id(*(void **)(*(_QWORD *)(v1 + 16) + 16));
    sub_183B91D1C();
    swift_release();
    _os_log_impl(&dword_182FBE000, v16, v17, "Invalidating connection %llu", v19, 0xCu);
    MEMORY[0x186DB563C](v19, -1, -1);

  }
  else
  {

    swift_release();
  }
  v20 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 72) + 16);
  os_unfair_lock_lock(v20);
  sub_1832BB5E8(&id);
  v21 = id;
  os_unfair_lock_unlock(v20);
  nw_connection_cancel(*(nw_connection_t *)(v21 + 16));
  swift_release();
  os_unfair_lock_lock(v20);
  sub_1832BB5F4(&id);
  v22 = id;
  os_unfair_lock_unlock(v20);
  v23 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession);
  if (v23)
    objc_msgSend(*(id *)(v23 + 32), sel_invalidate);
  v44[1] = 0;
  v45 = v20;
  v46 = v1;
  v24 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession);
  if (v24)
    objc_msgSend(*(id *)(v24 + 32), sel_invalidate);
  v25 = 0;
  v7 = (char *)(v22 + 64);
  v26 = 1 << *(_BYTE *)(v22 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v5 = v27 & *(_QWORD *)(v22 + 64);
  v1 = (unint64_t)(v26 + 63) >> 6;
  v49 = xmmword_183BA32D0;
  while (1)
  {
    if (v5)
    {
      v28 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v29 = v28 | (v25 << 6);
      goto LABEL_13;
    }
    v32 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v32 >= v1)
      goto LABEL_31;
    v33 = *(_QWORD *)&v7[8 * v32];
    ++v25;
    if (!v33)
    {
      v25 = v32 + 1;
      if (v32 + 1 >= v1)
        goto LABEL_31;
      v33 = *(_QWORD *)&v7[8 * v25];
      if (!v33)
      {
        v25 = v32 + 2;
        if (v32 + 2 >= v1)
          goto LABEL_31;
        v33 = *(_QWORD *)&v7[8 * v25];
        if (!v33)
        {
          v25 = v32 + 3;
          if (v32 + 3 >= v1)
            goto LABEL_31;
          v33 = *(_QWORD *)&v7[8 * v25];
          if (!v33)
            break;
        }
      }
    }
LABEL_30:
    v5 = (v33 - 1) & v33;
    v29 = __clz(__rbit64(v33)) + (v25 << 6);
LABEL_13:
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v14, *(_QWORD *)(v22 + 56) + *(_QWORD *)(v9 + 72) * v29, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v14, v8);
    sub_183274368();
    v30 = swift_allocError();
    *(_OWORD *)v31 = v49;
    *(_QWORD *)(v31 + 16) = 0xB000000000000000;
    id = v30;
    sub_183B919E0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  v34 = v32 + 4;
  if (v34 < v1)
  {
    v33 = *(_QWORD *)&v7[8 * v34];
    if (!v33)
    {
      while (1)
      {
        v25 = v34 + 1;
        if (__OFADD__(v34, 1))
          goto LABEL_35;
        if (v25 >= v1)
          goto LABEL_31;
        v33 = *(_QWORD *)&v7[8 * v25];
        ++v34;
        if (v33)
          goto LABEL_30;
      }
    }
    v25 = v34;
    goto LABEL_30;
  }
LABEL_31:
  swift_release();
  v35 = v45;
  os_unfair_lock_lock(v45);
  v36 = (uint64_t)v47;
  sub_183273D38(v37, (uint64_t (*)(void))sub_1832BAFF0);
  os_unfair_lock_unlock(v35);
  v38 = v48;
  sub_183062090(v36, v48, &qword_1EDCDDF20);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7A98);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39) == 1)
  {
    sub_1830620D4(v36, &qword_1EDCDDF20);
    return sub_1830620D4(v38, &qword_1EDCDDF20);
  }
  else
  {
    sub_183274368();
    v42 = swift_allocError();
    *(_OWORD *)v43 = v49;
    *(_QWORD *)(v43 + 16) = 0xB000000000000000;
    id = v42;
    sub_183B919E0();
    sub_1830620D4(v36, &qword_1EDCDDF20);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
  }
}

uint64_t sub_1832AA85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;

  *(_QWORD *)(v9 + 64) = v13;
  *(_QWORD *)(v9 + 72) = v8;
  *(_QWORD *)(v9 + 48) = a7;
  *(_QWORD *)(v9 + 56) = a8;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v11 = sub_183B914AC();
  *(_QWORD *)(v9 + 80) = v11;
  *(_QWORD *)(v9 + 88) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v9 + 96) = swift_task_alloc();
  *(_OWORD *)(v9 + 104) = *a5;
  return swift_task_switch();
}

uint64_t sub_1832AA8DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 24);
  v11 = *(_OWORD *)(v0 + 96);
  v9 = *(_OWORD *)(v0 + 48);
  v10 = *(_OWORD *)(v0 + 32);
  sub_183B914A0();
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v5;
  *(_OWORD *)(v5 + 16) = v9;
  *(_QWORD *)(v5 + 32) = v3;
  *(_QWORD *)(v5 + 40) = v2;
  *(_OWORD *)(v5 + 48) = v11;
  *(_QWORD *)(v5 + 64) = v1;
  *(_OWORD *)(v5 + 72) = v10;
  *(_QWORD *)(v5 + 88) = v4;
  v6 = swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v6;
  *(_QWORD *)(v6 + 16) = v11;
  *(_QWORD *)(v6 + 24) = v2;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v7;
  *v7 = v0;
  v7[1] = sub_1832AA9D8;
  return sub_183B92100();
}

uint64_t sub_1832AA9D8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832AAA58()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832AAAA0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832AAAE8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 48) = a2;
  *(_QWORD *)(v4 + 56) = v3;
  *(_QWORD *)(v4 + 40) = a1;
  v6 = sub_183B914F4();
  *(_QWORD *)(v4 + 64) = v6;
  *(_QWORD *)(v4 + 72) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 80) = swift_task_alloc();
  v7 = sub_183B914AC();
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 104) = swift_task_alloc();
  *(_OWORD *)(v4 + 112) = *a3;
  return swift_task_switch();
}

uint64_t sub_1832AAB80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 56);
  v8 = *(_OWORD *)(v0 + 104);
  v7 = *(_OWORD *)(v0 + 40);
  sub_183B914A0();
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v8;
  *(_QWORD *)(v3 + 40) = v1;
  *(_OWORD *)(v3 + 48) = v7;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v4;
  *(_QWORD *)(v4 + 16) = v8;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v5;
  *v5 = v0;
  v5[1] = sub_1832AAC70;
  return sub_183B92100();
}

uint64_t sub_1832AAC70()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc();
  if (!v0)
    sub_18308485C(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832AAD08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  if (qword_1EDCDC590 != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = sub_183B915CC();
  __swift_project_value_buffer(v5, (uint64_t)qword_1EDCDDEE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v6 = sub_183B915B4();
  v7 = sub_183B91C80();
  v8 = os_log_type_enabled(v6, v7);
  v10 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 64);
  if (v8)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v17 = v13;
    *(_DWORD *)v12 = 136315138;
    sub_183064644(&qword_1EDCDD368, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEFB40], MEMORY[0x1E0DEFB48]);
    v14 = sub_183B92088();
    *(_QWORD *)(v0 + 32) = sub_183273D70(v14, v15, &v17);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_182FBE000, v6, v7, "Completed call: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v13, -1, -1);
    MEMORY[0x186DB563C](v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  }

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832AAF20()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832AAF70(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1);
}

uint64_t sub_1832AAF94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return swift_task_switch();
}

uint64_t sub_1832AAFAC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[4];
  v2 = v0[5];
  v3 = *(os_unfair_lock_s **)(v2 + 72);
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = swift_task_alloc();
  *(_QWORD *)(v5 + 16) = sub_1832BAC94;
  *(_QWORD *)(v5 + 24) = v4;
  os_unfair_lock_lock(v3 + 4);
  sub_183273D38(v6, *(uint64_t (**)(void))(v5 + 16));
  os_unfair_lock_unlock(v3 + 4);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1832ABA3C();
  v7 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v7;
  *v7 = v0;
  v7[1] = sub_1832AB098;
  return sub_1832ABB4C(v0[4]);
}

uint64_t sub_1832AB098()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1832AB104()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (qword_1EDCDC590 != -1)
    swift_once();
  v1 = *(void **)(v0 + 56);
  v2 = sub_183B915CC();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EDCDDEE8);
  v3 = v1;
  v4 = v1;
  v5 = sub_183B915B4();
  v6 = sub_183B91C80();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 56);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 16) = v8;
    v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
    v12 = sub_183B9174C();
    *(_QWORD *)(v0 + 24) = sub_183273D70(v12, v13, &v15);
    sub_183B91D1C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_182FBE000, v5, v6, "Failed to perform handshake, canceling connection: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v10, -1, -1);
    MEMORY[0x186DB563C](v9, -1, -1);
  }
  else
  {

  }
  sub_1832AA304();
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832AB2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_183B91A34();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_183B91A28();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1830620D4(a1, &qword_1EDCDD468);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_183B919D4();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1832AB440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_183B915CC();
  __swift_allocate_value_buffer(v0, qword_1EDCDDEE8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EDCDDEE8);
  if (qword_1EDCDC620 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_1EDCF2A90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1832AB4D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_183B915CC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_183B9156C();
  __swift_allocate_value_buffer(v4, qword_1EDCDDF00);
  __swift_project_value_buffer(v4, (uint64_t)qword_1EDCDDF00);
  if (qword_1EDCDC590 != -1)
    swift_once();
  v5 = __swift_project_value_buffer(v0, (uint64_t)qword_1EDCDDEE8);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return sub_183B91554();
}

uint64_t sub_1832AB5B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection__associatedActorIDs);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1832AB618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v0 = sub_183B91C98();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_183B91C8C();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = sub_183B91614();
  MEMORY[0x1E0C80A78](v6);
  sub_1832467E0();
  sub_183B91608();
  v8[1] = MEMORY[0x1E0DEE9D8];
  sub_183064644(&qword_1EDCDD300, v5, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE770);
  sub_18326807C();
  sub_183B91D58();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v0);
  result = sub_183B91CBC();
  qword_1EDCDDF18 = result;
  return result;
}

uint64_t sub_1832AB7C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDB1F0);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  v4 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v1 + 72) = v3;
  *(_QWORD *)(v1 + 80) = v4;
  *(_QWORD *)(v1 + 88) = v4;
  v5 = v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_handshakeCallID;
  v6 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_resolvedActorIDContinuation;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7A98);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection__associatedActorIDs) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_incomingFiles) = v9;
  *(_BYTE *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_isDisconnected) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_interruptionHandlers) = v9;
  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

void sub_1832AB8E0(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = (os_unfair_lock_s *)(*(_QWORD *)(a2 + 72) + 16);
  os_unfair_lock_lock(v2);
  sub_183273D38(v3, sub_1832BB60C);
  os_unfair_lock_unlock(v2);
  sub_1832ABA3C();
}

uint64_t sub_1832AB940(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDF20);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7A98);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a2, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  v9 = a1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_resolvedActorIDContinuation;
  swift_beginAccess();
  sub_183290498((uint64_t)v6, v9, &qword_1EDCDDF20);
  return swift_endAccess();
}

void sub_1832ABA3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  swift_weakInit();
  v1 = swift_allocObject();
  swift_weakInit();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v1;
  swift_retain();
  swift_retain();
  sub_183061488((uint64_t)sub_1832BAFE0);
  NWConnection.stateUpdateHandler.setter((uint64_t)sub_1832BAFE0, v2);
  swift_release();
  swift_release();
  swift_release();
  if (qword_1EDCDC5A0 != -1)
    swift_once();
  NWConnection.start(queue:)((void *)qword_1EDCDDF18);
}

uint64_t sub_1832ABB4C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  v3 = sub_183B91578();
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v4 = sub_183B914AC();
  v2[14] = v4;
  v2[15] = *(_QWORD *)(v4 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = type metadata accessor for NWActorID();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v5 = sub_183B91548();
  v2[20] = v5;
  v2[21] = *(_QWORD *)(v5 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1832ABCA0()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_signpost_type_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint8_t *v13;
  os_signpost_id_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[3];

  if (qword_1EDCDC590 != -1)
    swift_once();
  v1 = sub_183B915CC();
  v0[28] = __swift_project_value_buffer(v1, (uint64_t)qword_1EDCDDEE8);
  v2 = sub_183B915B4();
  v3 = sub_183B91C80();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_182FBE000, v2, v3, "Sending handshake", v4, 2u);
    MEMORY[0x186DB563C](v4, -1, -1);
  }

  if (qword_1EDCDC598 != -1)
    swift_once();
  v5 = v0[5];
  v6 = v0[19];
  v7 = sub_183B9156C();
  v0[29] = __swift_project_value_buffer(v7, (uint64_t)qword_1EDCDDF00);
  sub_183B91560();
  sub_183B91524();
  sub_183058C44(v5, v6, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  v8 = sub_183B91560();
  v9 = sub_183B91CD4();
  if ((sub_183B91CEC() & 1) != 0)
  {
    v25 = v0[26];
    v27 = v0[20];
    v28 = v0[21];
    v10 = v0[18];
    v11 = v0[19];
    v12 = *(void (**)(uint64_t))(v28 + 16);
    v12(v25);
    v13 = (uint8_t *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    v29[0] = v26;
    *(_DWORD *)v13 = 136315138;
    sub_183058C44(v11, v10, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    sub_183B91DB8();
    swift_bridgeObjectRelease();
    v29[1] = 0x49726F746341574ELL;
    v29[2] = 0xEA00000000002844;
    swift_bridgeObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183064644(&qword_1EDCDD338, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    sub_183B92088();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183058AE0(v10, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v0[4] = sub_183273D70(0x49726F746341574ELL, 0xEA00000000002844, v29);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    sub_183058AE0(v11, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v14 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v8, v9, v14, "performHandshake", "Actor: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v26, -1, -1);
    MEMORY[0x186DB563C](v13, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v25, v27);
  }
  else
  {
    v15 = v0[21];
    v16 = v0[19];

    sub_183058AE0(v16, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v12 = *(void (**)(uint64_t))(v15 + 16);
  }
  v0[30] = v12;
  v17 = v0[16];
  v19 = v0[6];
  v18 = v0[7];
  v20 = v0[5];
  ((void (*)(_QWORD, _QWORD, _QWORD))v12)(v0[26], v0[27], v0[20]);
  sub_183B9159C();
  swift_allocObject();
  v0[31] = sub_183B91590();
  v21 = (_QWORD *)swift_task_alloc();
  v0[32] = v21;
  v21[2] = v19;
  v21[3] = v20;
  v21[4] = v18;
  sub_183B914A0();
  v22 = (_QWORD *)swift_task_alloc();
  v0[33] = v22;
  v22[2] = v19;
  v22[3] = v17;
  v22[4] = sub_1832BACAC;
  v22[5] = v21;
  v23 = (_QWORD *)swift_task_alloc();
  v0[34] = v23;
  *v23 = v0;
  v23[1] = sub_1832AC164;
  return sub_183B9219C();
}

uint64_t sub_1832AC164()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832AC1D0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t *v7;
  NSObject *v8;
  os_signpost_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_signpost_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  os_signpost_id_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  os_signpost_id_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
  swift_task_dealloc();
  v3 = sub_183B915B4();
  v4 = sub_183B91C80();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_182FBE000, v3, v4, "Received handshake response", v5, 2u);
    MEMORY[0x186DB563C](v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 280);

  sub_183B91278();
  swift_allocObject();
  sub_183B9126C();
  sub_1832BACC8();
  sub_183B91254();
  if (v6)
  {
    v7 = (uint64_t *)(v0 + 176);
    swift_release();
    sub_18308485C(v2, v1);
    v8 = sub_183B91560();
    sub_183B91584();
    v9 = sub_183B91CC8();
    if ((sub_183B91CEC() & 1) != 0)
    {
      v10 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 80);
      v12 = *(_QWORD *)(v0 + 64);
      swift_retain();
      sub_183B915A8();
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 88))(v11, v12) == *MEMORY[0x1E0DF2190])
      {
        v13 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
        v13 = "";
      }
      v7 = (uint64_t *)(v0 + 208);
      v30 = *(_QWORD *)(v0 + 208);
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
      v32 = *(_QWORD *)(v0 + 176);
LABEL_23:
      v44 = *(v7 - 6);
      v43 = *(v7 - 5);
      v31(v30, v32, v44);
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      v46 = sub_183B91530();
      _os_signpost_emit_with_name_impl(&dword_182FBE000, v8, v9, v46, "performHandshake", v13, v45, 2u);
      MEMORY[0x186DB563C](v45, -1, -1);

      v29 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v29(v32, v44);
      goto LABEL_24;
    }
    goto LABEL_14;
  }
  v14 = *(_DWORD *)(v0 + 288);
  if (v14 != 1)
  {
    v7 = (uint64_t *)(v0 + 192);
    sub_183B91DB8();
    swift_bridgeObjectRelease();
    *(_DWORD *)(v0 + 292) = v14;
    sub_183B92088();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    *(_DWORD *)(v0 + 296) = 1;
    sub_183B92088();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183274368();
    swift_allocError();
    *v24 = 0x6465766965636552;
    v24[1] = 0xE900000000000020;
    v24[2] = 0x7000000000000000;
    swift_willThrow();
    swift_release();
    sub_18308485C(v2, v1);
    v8 = sub_183B91560();
    sub_183B91584();
    v9 = sub_183B91CC8();
    if ((sub_183B91CEC() & 1) != 0)
    {
      v25 = *(_QWORD *)(v0 + 96);
      v27 = *(_QWORD *)(v0 + 64);
      v26 = *(_QWORD *)(v0 + 72);
      swift_retain();
      sub_183B915A8();
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v26 + 88))(v25, v27) == *MEMORY[0x1E0DF2190])
      {
        v13 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 64));
        v13 = "";
      }
      v7 = (uint64_t *)(v0 + 208);
      v30 = *(_QWORD *)(v0 + 208);
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
      v32 = *(_QWORD *)(v0 + 192);
      goto LABEL_23;
    }
LABEL_14:
    v28 = *(_QWORD *)(v0 + 168);

    v29 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
LABEL_24:
    v47 = *(_QWORD *)(v0 + 216);
    v48 = *(_QWORD *)(v0 + 160);
    v29(*v7, v48);
    swift_release();
    v29(v47, v48);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v42 = *(uint64_t (**)(void))(v0 + 8);
    return v42();
  }
  v15 = (uint64_t *)(v0 + 184);
  v16 = sub_183B91470();
  sub_1832AE790(v16, v17);
  swift_bridgeObjectRelease();
  swift_release();
  sub_18308485C(v2, v1);
  v18 = sub_183B91560();
  sub_183B91584();
  v19 = sub_183B91CC8();
  if ((sub_183B91CEC() & 1) != 0)
  {
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 64);
    v22 = *(_QWORD *)(v0 + 72);
    swift_retain();
    sub_183B915A8();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v22 + 88))(v20, v21) == *MEMORY[0x1E0DF2190])
    {
      v23 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
      v23 = "";
    }
    v15 = (uint64_t *)(v0 + 208);
    v35 = *(_QWORD *)(v0 + 184);
    v36 = *(_QWORD *)(v0 + 160);
    v37 = *(_QWORD *)(v0 + 168);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 240))(*(_QWORD *)(v0 + 208), v35, v36);
    v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v38 = 0;
    v39 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v18, v19, v39, "performHandshake", v23, v38, 2u);
    MEMORY[0x186DB563C](v38, -1, -1);

    v34 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v34(v35, v36);
  }
  else
  {
    v33 = *(_QWORD *)(v0 + 168);

    v34 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  }
  v40 = *(_QWORD *)(v0 + 216);
  v41 = *(_QWORD *)(v0 + 160);
  v34(*v15, v41);
  swift_release();
  v34(v40, v41);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v42 = *(uint64_t (**)(void))(v0 + 8);
  return v42();
}

uint64_t sub_1832AC94C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_signpost_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  os_signpost_id_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = (uint64_t *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  v5 = sub_183B91560();
  sub_183B91584();
  v6 = sub_183B91CC8();
  if ((sub_183B91CEC() & 1) != 0)
  {
    v7 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 64);
    v9 = *(_QWORD *)(v0 + 72);
    swift_retain();
    sub_183B915A8();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v9 + 88))(v7, v8) == *MEMORY[0x1E0DF2190])
    {
      v10 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 64));
      v10 = "";
    }
    v1 = (uint64_t *)(v0 + 208);
    v13 = *(_QWORD *)(v0 + 200);
    v14 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 168);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 240))(*(_QWORD *)(v0 + 208), v13, v14);
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    v17 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v5, v6, v17, "performHandshake", v10, v16, 2u);
    MEMORY[0x186DB563C](v16, -1, -1);

    v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 168);

    v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  }
  v18 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 160);
  v12(*v1, v19);
  swift_release();
  v12(v18, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832ACBCC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 80);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 80) = sub_1832F2A14(MEMORY[0x1E0DEE9D8]);
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1832ACC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v8[13] = v11;
  v8[14] = v12;
  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[7] = a3;
  v8[8] = a4;
  v8[5] = a1;
  v8[6] = a2;
  v8[15] = type metadata accessor for NWFileSerializationContext(0);
  v8[16] = swift_task_alloc();
  v9 = sub_183B914F4();
  v8[17] = v9;
  v8[18] = *(_QWORD *)(v9 - 8);
  v8[19] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1832ACCDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v5;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = v2;
  *(_QWORD *)(v5 + 48) = v3;
  *(_QWORD *)(v5 + 56) = v1;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v6;
  v6[2] = v4;
  v6[3] = v3;
  v6[4] = sub_1832BAB6C;
  v6[5] = v5;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v7;
  *v7 = v0;
  v7[1] = sub_1832ACDBC;
  return sub_183B9219C();
}

uint64_t sub_1832ACDBC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832ACE28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v24 = *(_QWORD *)(v0 + 16);
  v25 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc();
  if (qword_1EDCDC590 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = sub_183B915CC();
  __swift_project_value_buffer(v5, (uint64_t)qword_1EDCDDEE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
  v6 = sub_183B915B4();
  v7 = sub_183B91C80();
  v8 = os_log_type_enabled(v6, v7);
  v10 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 136);
  if (v8)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v26 = v13;
    *(_DWORD *)v12 = 136315138;
    sub_183064644(&qword_1EDCDD368, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEFB40], MEMORY[0x1E0DEFB48]);
    v14 = sub_183B92088();
    *(_QWORD *)(v0 + 32) = sub_183273D70(v14, v15, &v26);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_182FBE000, v6, v7, "Completed call: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v13, -1, -1);
    MEMORY[0x186DB563C](v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
  }

  v16 = *(_QWORD *)(v0 + 184);
  v18 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD **)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 96);
  v20 = *(_QWORD *)(v0 + 80);
  v21 = *(_QWORD *)(v0 + 48);
  v17[3] = _s15ActorConnectionCMa();
  v17[4] = &off_1E148CF40;
  *v17 = v21;
  sub_183058C44(v20, (uint64_t)v17 + *(int *)(v18 + 20), (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  swift_retain();
  sub_18324A9F0(v19, (uint64_t)v17);
  sub_183058AE0((uint64_t)v17, type metadata accessor for NWFileSerializationContext);
  sub_183B91254();
  swift_release();
  if (v16)
  {
    sub_183274368();
    swift_allocError();
    *(_QWORD *)v22 = v16;
    *(_OWORD *)(v22 + 8) = xmmword_183BA32E0;
    swift_willThrow();
  }
  sub_18308485C(v24, v25);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832AD154()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832AD1A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for CancelRemoteCall(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_183B914AC();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, 1, 1, v9);
  sub_1832BA344((uint64_t)v8, (uint64_t)v5, 7, v1, type metadata accessor for CancelRemoteCall, (uint64_t)&off_1E148D2D8, (uint64_t)&unk_1E1496DF0, (uint64_t)&unk_1EDCDDF68);
  sub_1830620D4((uint64_t)v5, &qword_1EDCDD200);
  v11 = *(os_unfair_lock_s **)(v1 + 72);
  v16 = v1;
  v17 = a1;
  v12 = v11 + 4;
  os_unfair_lock_lock(v11 + 4);
  sub_183273D38(v13, sub_1832BAA0C);
  os_unfair_lock_unlock(v12);
  return sub_183058AE0((uint64_t)v8, type metadata accessor for CancelRemoteCall);
}

uint64_t sub_1832AD30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  return swift_task_switch();
}

uint64_t sub_1832AD330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v5;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = v2;
  *(_QWORD *)(v5 + 48) = v3;
  *(_QWORD *)(v5 + 56) = v1;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v6;
  v6[2] = v4;
  v6[3] = v3;
  v6[4] = sub_1832BAB6C;
  v6[5] = v5;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v7;
  *v7 = v0;
  v7[1] = sub_1832AD410;
  return sub_183B9219C();
}

uint64_t sub_1832AD410()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832AD47C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD **)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc();
  *v1 = v3;
  v1[1] = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832AD4C4()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832AD500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[9];

  v32[8] = a7;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for RemoteCallEnvelope(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[5] = a2;
  v32[6] = a3;
  v32[3] = _s15ActorConnectionCMa();
  v32[4] = &off_1E148CF40;
  v32[0] = a4;
  swift_retain();
  v19 = sub_18324A464((uint64_t)v32, a5);
  result = __swift_destroy_boxed_opaque_existential_2((uint64_t)v32);
  if (!v7)
  {
    v21 = sub_183B914AC();
    v29 = a6;
    v30 = a2;
    v22 = v21;
    v31 = *(_QWORD *)(v21 - 8);
    v23 = a6;
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
    v24(v18, v23, v21);
    sub_183058C44(a5, (uint64_t)&v18[v16[5]], (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v25 = sub_183B914E8();
    v26 = (uint64_t *)&v18[v16[6]];
    *v26 = v25;
    v26[1] = v27;
    v28 = v29;
    *(_QWORD *)&v18[v16[7]] = v30;
    *(_QWORD *)&v18[v16[8]] = v19;
    v24(v15, v28, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v15, 0, 1, v22);
    swift_bridgeObjectRetain();
    sub_1832BA344((uint64_t)v18, (uint64_t)v15, 1, a4, type metadata accessor for RemoteCallEnvelope, (uint64_t)&off_1E1490BF0, (uint64_t)&unk_1E1496E40, (uint64_t)&unk_1EDCDDF80);
    sub_1830620D4((uint64_t)v15, &qword_1EDCDD200);
    return sub_183058AE0((uint64_t)v18, type metadata accessor for RemoteCallEnvelope);
  }
  return result;
}

uint64_t sub_1832AD710(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint8_t *v16;
  _QWORD v18[3];
  uint64_t v19;

  v4 = sub_183B914AC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EDCDC590 != -1)
    swift_once();
  v8 = sub_183B915CC();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EDCDDEE8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v9 = sub_183B915B4();
  v10 = sub_183B91C80();
  if (os_log_type_enabled(v9, v10))
  {
    v18[1] = a2;
    v11 = swift_slowAlloc();
    v18[0] = a1;
    v12 = (uint8_t *)v11;
    v13 = swift_slowAlloc();
    v19 = v13;
    *(_DWORD *)v12 = 136315138;
    sub_183064644(&qword_1EDCDD338, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v14 = sub_183B92088();
    v18[2] = sub_183273D70(v14, v15, &v19);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl(&dword_182FBE000, v9, v10, "Task was cancelled for callID: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v13, -1, -1);
    v16 = v12;
    a1 = v18[0];
    MEMORY[0x186DB563C](v16, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  return sub_1832AD1A4(a1);
}

uint64_t sub_1832AD93C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  unint64_t *v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v4 = type metadata accessor for NWActorID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_183058C44(a2, (uint64_t)v7, v8);
  v9 = (unint64_t *)(a1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection__associatedActorIDs);
  swift_beginAccess();
  v10 = *v9;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v9 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = sub_183242D34(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
    *v9 = v10;
  }
  v13 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    v10 = sub_183242D34(v12 > 1, v13 + 1, 1, v10);
    *v9 = v10;
  }
  *(_QWORD *)(v10 + 16) = v13 + 1;
  sub_183058EC4((uint64_t)v7, v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v13, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  return swift_endAccess();
}

void sub_1832ADA8C(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *((unsigned __int8 *)a1 + 4);
  v2 = *a1;
  swift_beginAccess();
  if (!swift_weakLoadStrong())
    return;
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    swift_release();
    return;
  }
  v3 = v2 | (v1 << 32);
  if (qword_1EDCDC590 != -1)
    swift_once();
  v4 = sub_183B915CC();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EDCDDEE8);
  swift_retain_n();
  v5 = sub_183B915B4();
  v6 = sub_183B91C80();
  if (!os_log_type_enabled(v5, v6))
  {

    swift_release_n();
    v13 = (v3 >> 38) & 3;
    if ((_DWORD)v13)
      goto LABEL_7;
LABEL_11:
    swift_retain_n();
    v24 = sub_183B915B4();
    v25 = sub_183B91C74();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc();
      v27 = swift_slowAlloc();
      v34 = v27;
      *(_DWORD *)v26 = 136315394;
      type metadata accessor for NWConnection(0);
      swift_retain();
      v28 = sub_183B9174C();
      sub_183273D70(v28, v29, &v34);
      sub_183B91D1C();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      v30 = sub_183B9174C();
      sub_183273D70(v30, v31, &v34);
      sub_183B91D1C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_182FBE000, v24, v25, "%s moved to waiting state with error: %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v27, -1, -1);
      MEMORY[0x186DB563C](v26, -1, -1);
      swift_release();

      swift_release();
    }
    else
    {

      swift_release();
      swift_release_n();
    }
    return;
  }
  v7 = swift_slowAlloc();
  v8 = swift_slowAlloc();
  v34 = v8;
  *(_DWORD *)v7 = 136315394;
  v9 = sub_183B9174C();
  sub_183273D70(v9, v10, &v34);
  sub_183B91D1C();
  swift_bridgeObjectRelease();
  *(_WORD *)(v7 + 12) = 2080;
  type metadata accessor for NWConnection(0);
  swift_retain();
  v11 = sub_183B9174C();
  sub_183273D70(v11, v12, &v34);
  sub_183B91D1C();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_182FBE000, v5, v6, "State changed to %s for %s", (uint8_t *)v7, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x186DB563C](v8, -1, -1);
  MEMORY[0x186DB563C](v7, -1, -1);

  v13 = (v3 >> 38) & 3;
  if (!(_DWORD)v13)
    goto LABEL_11;
LABEL_7:
  if ((_DWORD)v13 != 1)
    __asm { BR              X10 }
  v14 = HIDWORD(v3) & 0x3F;
  swift_retain_n();
  v15 = sub_183B915B4();
  v16 = sub_183B91C74();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v34 = v18;
    *(_DWORD *)v17 = 136315394;
    type metadata accessor for NWConnection(0);
    swift_retain();
    v19 = sub_183B9174C();
    sub_183273D70(v19, v20, &v34);
    sub_183B91D1C();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    v21 = sub_183B9174C();
    sub_183273D70(v21, v22, &v34);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_182FBE000, v15, v16, "%s moved to failed state with error: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    v23 = v18;
    v14 = HIDWORD(v3) & 0x3F;
    MEMORY[0x186DB563C](v23, -1, -1);
    MEMORY[0x186DB563C](v17, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  sub_18323C200();
  v32 = (void *)swift_allocError();
  *(_DWORD *)v33 = v3;
  *(_BYTE *)(v33 + 4) = v14;
  sub_1832AE3C0((uint64_t)v32);
  swift_release();
  swift_release();

}

uint64_t sub_1832AE128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  uint64_t aBlock[6];

  v1 = v0;
  if (qword_1EDCDC590 != -1)
    swift_once();
  v2 = sub_183B915CC();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EDCDDEE8);
  swift_retain_n();
  v3 = sub_183B915B4();
  v4 = sub_183B91C68();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    aBlock[0] = v6;
    type metadata accessor for NWConnection(0);
    swift_retain();
    v7 = sub_183B9174C();
    sub_183273D70(v7, v8, aBlock);
    sub_183B91D1C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_182FBE000, v3, v4, "Receiving message from %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v6, -1, -1);
    MEMORY[0x186DB563C](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v9 = *(_QWORD *)(v1 + 16);
  v10 = swift_allocObject();
  swift_weakInit();
  v11 = *(NSObject **)(v9 + 16);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_1832BAFE8;
  *(_QWORD *)(v12 + 24) = v10;
  aBlock[4] = (uint64_t)sub_183083FD4;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_183083F3C;
  aBlock[3] = (uint64_t)&block_descriptor_11;
  v13 = _Block_copy(aBlock);
  swift_retain_n();
  swift_unknownObjectRetain();
  swift_release();
  nw_connection_receive_message(v11, v13);
  _Block_release(v13);
  swift_release_n();
  return swift_unknownObjectRelease();
}

void sub_1832AE3C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *);
  void (*v10)(uint64_t);
  uint64_t v11;

  v2 = v1;
  v4 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 72) + 16);
  os_unfair_lock_lock(v4);
  sub_1832BB5BC(&v11);
  v5 = v11;
  os_unfair_lock_unlock(v4);
  if ((v5 & 1) == 0)
  {
    os_unfair_lock_lock(v4);
    sub_1832BB5D0(&v11);
    v6 = v11;
    os_unfair_lock_unlock(v4);
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = v6 + 40;
      do
      {
        v9 = *(void (**)(uint64_t *))(v8 - 8);
        v11 = a1;
        swift_retain();
        v9(&v11);
        swift_release();
        v8 += 16;
        --v7;
      }
      while (v7);
    }
    swift_bridgeObjectRelease();
    v10 = *(void (**)(uint64_t))(v2 + 40);
    if (v10)
    {
      swift_retain();
      v10(a1);
      sub_1830630AC((uint64_t)v10);
    }
    sub_1832AA304();
  }
}

void sub_1832AE4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = _s9HandshakeVMa();
  MEMORY[0x1E0C80A78](v10);
  v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(os_unfair_lock_s **)(a2 + 72);
  v19 = a2;
  v20 = a1;
  v14 = v13 + 4;
  os_unfair_lock_lock(v13 + 4);
  sub_183273D38(v15, sub_1832BAF98);
  os_unfair_lock_unlock(v14);
  if (v3)
  {
    __break(1u);
  }
  else
  {
    sub_183058C44(a3, (uint64_t)v12 + *(int *)(v10 + 24), (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    *v12 = 0x100000001;
    v16 = sub_183B914AC();
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v17 + 16))(v9, a1, v16);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v9, 0, 1, v16);
    sub_1832BA344((uint64_t)v12, (uint64_t)v9, 3, a2, (uint64_t (*)(_QWORD))_s9HandshakeVMa, (uint64_t)&off_1E148FB50, (uint64_t)&unk_1E1496EE0, (uint64_t)&unk_1EDCDDFC0);
    sub_1830620D4((uint64_t)v9, &qword_1EDCDD200);
    sub_183058AE0((uint64_t)v12, (uint64_t (*)(_QWORD))_s9HandshakeVMa);
  }
}

uint64_t sub_1832AE698(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_183B914AC();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a2, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  v9 = a1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_handshakeCallID;
  swift_beginAccess();
  sub_183290498((uint64_t)v6, v9, &qword_1EDCDD200);
  return swift_endAccess();
}

void sub_1832AE790(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  v42 = a2;
  swift_bridgeObjectRetain();
  sub_183B917F4();
  v9 = *(os_unfair_lock_s **)(v2 + 72);
  v36 = 1;
  v37 = v2;
  v38 = v41;
  v39 = v42;
  v30 = xmmword_183B9FD50;
  v40 = xmmword_183B9FD50;
  v10 = v9 + 4;
  os_unfair_lock_lock(v9 + 4);
  sub_183273D38(v11, sub_1832BAD0C);
  os_unfair_lock_unlock(v10);
  swift_bridgeObjectRelease();
  v31 = 0;
  v32 = v2;
  v33 = a1;
  v34 = a2;
  v35 = v30;
  os_unfair_lock_lock(v10);
  sub_183273D38(v12, sub_1832BAD0C);
  os_unfair_lock_unlock(v10);
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession);
  if (v13)
  {
    v14 = *(void **)(v13 + 32);
    swift_retain();
    v15 = objc_msgSend(v14, sel_selfPublicKey);
    if (!v15)
    {
      swift_release();
      return;
    }
    v16 = v15;
    v17 = sub_183B91428();
    v19 = v18;
    swift_release();

    v20 = *(_QWORD *)(v3 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession);
    if (v20)
    {
      v21 = *(void **)(v20 + 32);
      swift_retain();
      v22 = objc_msgSend(v21, sel_selfPublicKey);
      if (v22)
      {
        v23 = v22;
        v24 = sub_183B91428();
        v26 = v25;
        swift_release();

        v41 = a1;
        v42 = a2;
        v43 = v17;
        v44 = v19;
        v45 = v24;
        v46 = v26;
        v27 = sub_183B914AC();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v8, 1, 1, v27);
        swift_bridgeObjectRetain();
        sub_18324A994(v17, v19);
        sub_18324A994(v24, v26);
        swift_bridgeObjectRetain();
        sub_18324A994(v17, v19);
        sub_18324A994(v24, v26);
        sub_1832BA16C((uint64_t)&v41, (uint64_t)v8, 5);
        swift_bridgeObjectRelease();
        sub_18308485C(v17, v19);
        sub_18308485C(v24, v26);
        sub_18308485C(v24, v26);
        sub_18308485C(v17, v19);
        sub_1830620D4((uint64_t)v8, &qword_1EDCDD200);
        swift_bridgeObjectRelease();
        sub_18308485C(v17, v19);
        v28 = v24;
        v29 = v26;
LABEL_9:
        sub_18308485C(v28, v29);
        return;
      }
      swift_release();
    }
    v28 = v17;
    v29 = v19;
    goto LABEL_9;
  }
}

uint64_t sub_1832AEA84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;

  v4 = (uint64_t *)(a1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_interruptionHandlers);
  swift_beginAccess();
  v5 = *v4;
  *(_BYTE *)(a1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_isDisconnected) = 1;
  *v4 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t sub_1832AEB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDED0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_183B914AC();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v9 + 16))(v8, a2);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
  swift_beginAccess();
  sub_1832A62EC((uint64_t)v5, (uint64_t)v8);
  return swift_endAccess();
}

uint64_t sub_1832AEC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  os_unfair_lock_s *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t result;
  void *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  char *v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_unfair_lock_s *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  os_unfair_lock_s *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[3];

  v67 = a5;
  v68 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDED0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v58 - v12;
  v14 = sub_183B914AC();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v69 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v58 - v18;
  v20 = *(os_unfair_lock_s **)(a2 + 72);
  v61 = a2;
  v70 = a2;
  v71 = a3;
  v72 = a1;
  v21 = v20 + 4;
  os_unfair_lock_lock(v20 + 4);
  sub_183273D38(v22, sub_1832BAB8C);
  v66 = 0;
  v60 = v21;
  os_unfair_lock_unlock(v21);
  if (qword_1EDCDC590 != -1)
    swift_once();
  v23 = sub_183B915CC();
  v24 = __swift_project_value_buffer(v23, (uint64_t)qword_1EDCDDEE8);
  v64 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v64(v19, a3, v14);
  v65 = v24;
  v25 = sub_183B915B4();
  v26 = v14;
  v27 = sub_183B91C80();
  v28 = os_log_type_enabled(v25, v27);
  v62 = v13;
  v63 = v11;
  if (v28)
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v59 = a3;
    v31 = v30;
    v74[0] = v30;
    *(_DWORD *)v29 = 136315138;
    sub_183064644(&qword_1EDCDD338, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v32 = sub_183B92088();
    v73 = sub_183273D70(v32, v33, v74);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    v34 = *(void (**)(char *, uint64_t))(v15 + 8);
    v34(v19, v26);
    _os_log_impl(&dword_182FBE000, v25, v27, "Stored callID (%s)", v29, 0xCu);
    swift_arrayDestroy();
    v35 = v31;
    a3 = v59;
    MEMORY[0x186DB563C](v35, -1, -1);
    MEMORY[0x186DB563C](v29, -1, -1);
  }
  else
  {
    v34 = *(void (**)(char *, uint64_t))(v15 + 8);
    v34(v19, v26);
  }

  v36 = v26;
  v37 = v69;
  v38 = v66;
  result = v68(a3);
  if (v38)
  {
    v40 = v38;
    v64(v37, a3, v36);
    v41 = sub_183B915B4();
    v42 = sub_183B91C74();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc();
      v69 = (char *)v34;
      v44 = v37;
      v45 = (uint8_t *)v43;
      v46 = swift_slowAlloc();
      v74[0] = v46;
      *(_DWORD *)v45 = 136315138;
      v59 = a3;
      sub_183064644(&qword_1EDCDD338, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v47 = sub_183B92088();
      v73 = sub_183273D70(v47, v48, v74);
      a3 = v59;
      sub_183B91D1C();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v69)(v44, v36);
      _os_log_impl(&dword_182FBE000, v41, v42, "callID (%s) failed", v45, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v46, -1, -1);
      MEMORY[0x186DB563C](v45, -1, -1);
    }
    else
    {
      v34(v37, v36);
    }

    v50 = (uint64_t)v62;
    v49 = (uint64_t)v63;
    v51 = v60;
    MEMORY[0x1E0C80A78](v52);
    *(&v58 - 2) = v53;
    *(&v58 - 1) = a3;
    os_unfair_lock_lock(v51);
    sub_183273D38(v54, (uint64_t (*)(void))sub_1832BB638);
    os_unfair_lock_unlock(v51);
    sub_183062090(v50, v49, &qword_1EDCDDED0);
    v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v49, 1, v55) == 1)
    {
      sub_1830620D4(v50, &qword_1EDCDDED0);

      return sub_1830620D4(v49, &qword_1EDCDDED0);
    }
    else
    {
      v74[0] = (uint64_t)v40;
      v57 = v40;
      sub_183B919E0();

      sub_1830620D4(v50, &qword_1EDCDDED0);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8))(v49, v55);
    }
  }
  return result;
}

uint64_t sub_1832AF19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDED0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_183B914AC();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, a2);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v7, a3, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v7, 0, 1, v12);
  swift_beginAccess();
  sub_1832A62EC((uint64_t)v7, (uint64_t)v10);
  return swift_endAccess();
}

uint64_t *sub_1832AF2D4()
{
  uint64_t *v0;

  swift_release();
  sub_1830630AC(v0[3]);
  sub_1830630AC(v0[5]);
  sub_1830630AC(v0[7]);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1830620D4((uint64_t)v0 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_handshakeCallID, &qword_1EDCDD200);
  sub_1830620D4((uint64_t)v0 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_resolvedActorIDContinuation, &qword_1EDCDDF20);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1832AF3A0()
{
  sub_1832AF2D4();
  return swift_deallocClassInstance();
}

uint64_t sub_1832AF3C4()
{
  return _s15ActorConnectionCMa();
}

uint64_t _s15ActorConnectionCMa()
{
  uint64_t result;

  result = qword_1EDCD7A38;
  if (!qword_1EDCD7A38)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1832AF408()
{
  unint64_t v0;
  unint64_t v1;

  sub_1832AF4DC();
  if (v0 <= 0x3F)
  {
    sub_1832AF530();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void sub_1832AF4DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDCD79F0)
  {
    sub_183B914AC();
    v0 = sub_183B91CF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDCD79F0);
  }
}

void sub_1832AF530()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDCD7AA0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCD7A98);
    v0 = sub_183B91CF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDCD7AA0);
  }
}

uint64_t sub_1832AF588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 56) = a5;
  *(_QWORD *)(v7 + 64) = a7;
  *(_BYTE *)(v7 + 160) = a6;
  *(_QWORD *)(v7 + 48) = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDED0);
  *(_QWORD *)(v7 + 72) = swift_task_alloc();
  *(_QWORD *)(v7 + 80) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  *(_QWORD *)(v7 + 88) = swift_task_alloc();
  v8 = sub_183B914AC();
  *(_QWORD *)(v7 + 96) = v8;
  *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 112) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1832AF648()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 120) = Strong;
  if (Strong)
  {
    v2 = *(_QWORD **)(v0 + 56);
    v3 = v2[3];
    v4 = v2[4];
    __swift_project_boxed_opaque_existential_2(v2, v3);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
    *(_QWORD *)(v0 + 128) = v5;
    *(_QWORD *)(v0 + 136) = v6;
    v7 = v5;
    v8 = v6;
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v9;
    *v9 = v0;
    v9[1] = sub_1832AF97C;
    return sub_1832AFCCC(v7, v8, *(_BYTE *)(v0 + 160));
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1832AF97C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc();
  if (!v0)
    sub_18308485C(*(_QWORD *)(v2 + 128), *(_QWORD *)(v2 + 136));
  return swift_task_switch();
}

uint64_t sub_1832AF9E8()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832AFA48()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;

  sub_18308485C(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  v1 = *(void **)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  sub_183062090(*(_QWORD *)(v0 + 64), v4, &qword_1EDCDD200);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  v6 = *(_QWORD *)(v0 + 120);
  if (v5 == 1)
  {
    v7 = *(_QWORD *)(v0 + 88);

    swift_release();
    v8 = &qword_1EDCDD200;
    v9 = v7;
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(v11, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
    v12 = *(os_unfair_lock_s **)(v6 + 72);
    v13 = swift_task_alloc();
    *(_QWORD *)(v13 + 16) = v6;
    *(_QWORD *)(v13 + 24) = v11;
    v14 = swift_task_alloc();
    *(_QWORD *)(v14 + 16) = sub_1832BB638;
    *(_QWORD *)(v14 + 24) = v13;
    swift_retain();
    os_unfair_lock_lock(v12 + 4);
    sub_183273D38(v15, *(uint64_t (**)(void))(v14 + 16));
    os_unfair_lock_unlock(v12 + 4);
    v17 = *(_QWORD *)(v0 + 72);
    v16 = *(_QWORD *)(v0 + 80);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_183062090(v16, v17, &qword_1EDCDDED0);
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18);
    v21 = *(_QWORD *)(v0 + 112);
    v23 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 104);
    v24 = *(_QWORD *)(v0 + 72);
    v25 = *(_QWORD *)(v0 + 80);
    if (v20 != 1)
    {
      v27 = *(_QWORD *)(v0 + 112);
      *(_QWORD *)(v0 + 40) = v1;
      v26 = v1;
      sub_183B919E0();
      swift_release();

      sub_1830620D4(v25, &qword_1EDCDDED0);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v27, v23);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v24, v18);
      goto LABEL_4;
    }
    sub_1830620D4(*(_QWORD *)(v0 + 80), &qword_1EDCDDED0);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    v9 = v24;
    v8 = &qword_1EDCDDED0;
  }
  sub_1830620D4(v9, v8);
LABEL_4:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832AFCCC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 184) = a2;
  *(_QWORD *)(v4 + 192) = v3;
  *(_BYTE *)(v4 + 81) = a3;
  *(_QWORD *)(v4 + 176) = a1;
  v5 = sub_183B91548();
  *(_QWORD *)(v4 + 200) = v5;
  *(_QWORD *)(v4 + 208) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 216) = swift_task_alloc();
  *(_QWORD *)(v4 + 224) = swift_task_alloc();
  *(_QWORD *)(v4 + 232) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1832AFD50()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v29[4];

  if (qword_1EDCDC590 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = sub_183B915CC();
  __swift_project_value_buffer(v3, (uint64_t)qword_1EDCDDEE8);
  sub_18324A994(v1, v2);
  swift_retain();
  sub_18324A994(v1, v2);
  swift_retain();
  v4 = sub_183B915B4();
  v5 = sub_183B91C80();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(unsigned __int8 *)(v0 + 81);
    v7 = (_DWORD *)swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *v7 = 136315650;
    __asm { BR              X9 }
  }
  v8 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 176);
  sub_18308485C(v9, v8);
  sub_18308485C(v9, v8);
  swift_release_n();

  if (qword_1EDCDC598 != -1)
    swift_once();
  v10 = sub_183B9156C();
  __swift_project_value_buffer(v10, (uint64_t)qword_1EDCDDF00);
  sub_183B91560();
  sub_183B91524();
  swift_retain_n();
  v11 = (void *)sub_183B91560();
  sub_183B91CD4();
  if ((sub_183B91CEC() & 1) != 0)
  {
    v12 = *(unsigned __int8 *)(v0 + 81);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 16))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 200));
    v13 = (_DWORD *)swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *v13 = 136315394;
    __asm { BR              X9 }
  }
  v14 = *(_QWORD *)(v0 + 208);
  swift_release_n();

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v14 + 16))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 200));
  sub_183B9159C();
  swift_allocObject();
  v15 = sub_183B91590();
  *(_QWORD *)(v0 + 240) = v15;
  if (qword_1EDCDC5B0 != -1)
    swift_once();
  v17 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 192);
  v18 = *(_BYTE *)(v0 + 81);
  v19 = *(_QWORD *)(v0 + 176);
  v20 = qword_1EDCF2A58;
  type metadata accessor for NWProtocolFramer.Message();
  v21 = swift_allocObject();
  *(_QWORD *)(v0 + 248) = v21;
  *(_QWORD *)(v21 + 16) = nw_framer_protocol_create_message(*(nw_protocol_definition_t *)(v20 + 32));
  v29[3] = &type metadata for WireMessageType;
  LOBYTE(v29[0]) = v18;
  swift_retain();
  sub_1832A4698((uint64_t)v29, 0x7373654D65726957, 0xEF65707954656761);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDB270);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 256) = inited;
  *(_OWORD *)(inited + 16) = xmmword_183BA1510;
  *(_QWORD *)(inited + 32) = v21;
  v29[0] = inited;
  sub_183B91944();
  v23 = v29[0];
  type metadata accessor for NWConnection.ContentContext();
  *(_QWORD *)(v0 + 264) = swift_initStackObject();
  swift_retain();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(0x614365746F6D6552, 0xEA00000000006C6CLL, 0, 0, 0, v23, 0.5);
  v25 = v24;
  *(_QWORD *)(v0 + 272) = v24;
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 280) = v26;
  v26[2] = v16;
  v26[3] = v19;
  v26[4] = v17;
  v26[5] = v25;
  v26[6] = v15;
  v27 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 288) = v27;
  *v27 = v0;
  v27[1] = sub_1832B0624;
  return sub_183B9219C();
}

uint64_t sub_1832B0624()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832B0690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 200);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832B0724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 200);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832B07B8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18[2];

  v16 = a4;
  v17 = a5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a6;
  *(_QWORD *)(v14 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v14 + v13, (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v18[0] = (uint64_t)sub_1832BA954;
  v18[1] = v14;
  swift_retain();
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(a3, v16, v17, 1, v18);
  return swift_release();
}

uint64_t sub_1832B08D4(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_signpost_type_t v19;
  const char *v20;
  uint64_t v21;
  uint8_t *v22;
  os_signpost_id_t v23;
  void (*v24)(char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v49 = a3;
  v50 = a4;
  v5 = sub_183B91578();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_183B91548();
  v48 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v48 - v13;
  v15 = *((unsigned __int8 *)a1 + 4);
  v16 = *a1;
  if (qword_1EDCDC598 != -1)
    swift_once();
  v51 = v16 | (v15 << 32);
  v17 = sub_183B9156C();
  __swift_project_value_buffer(v17, (uint64_t)qword_1EDCDDF00);
  v18 = sub_183B91560();
  sub_183B91584();
  v19 = sub_183B91CC8();
  if ((sub_183B91CEC() & 1) != 0)
  {
    swift_retain();
    sub_183B915A8();
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t))(v6 + 88))(v8, v5) == *MEMORY[0x1E0DF2190])
    {
      v20 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v20 = "";
    }
    v21 = v48;
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v12, v14, v9);
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    v23 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v18, v19, v23, "sendData", v20, v22, 2u);
    MEMORY[0x186DB563C](v22, -1, -1);

    v24 = *(void (**)(char *, uint64_t))(v21 + 8);
    v24(v14, v9);
    v24(v12, v9);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v9);
  }
  v25 = v51;
  v26 = HIDWORD(v51);
  v27 = v49;
  if (HIDWORD(v51) <= 0xFE)
  {
    if (qword_1EDCDC590 != -1)
      swift_once();
    v35 = sub_183B915CC();
    __swift_project_value_buffer(v35, (uint64_t)qword_1EDCDDEE8);
    swift_retain_n();
    v36 = sub_183B915B4();
    v37 = sub_183B91C74();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc();
      v39 = (_QWORD *)swift_slowAlloc();
      v40 = swift_slowAlloc();
      v53 = v40;
      *(_DWORD *)v38 = 138412546;
      sub_18323C200();
      swift_allocError();
      *(_DWORD *)v41 = v25;
      *(_BYTE *)(v41 + 4) = v26;
      v42 = _swift_stdlib_bridgeErrorToNSError();
      v52 = v42;
      sub_183B91D1C();
      *v39 = v42;
      *(_WORD *)(v38 + 12) = 2080;
      v52 = *(_QWORD *)(v27 + 16);
      type metadata accessor for NWConnection(0);
      swift_retain();
      v43 = sub_183B9174C();
      v52 = sub_183273D70(v43, v44, &v53);
      v25 = v51;
      sub_183B91D1C();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_182FBE000, v36, v37, "Connection failed to send: %@, connection: %s", (uint8_t *)v38, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7640);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v39, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v40, -1, -1);
      MEMORY[0x186DB563C](v38, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    sub_183274368();
    v46 = swift_allocError();
    *(_QWORD *)v47 = v25;
    *(_OWORD *)(v47 + 8) = xmmword_183BA32F0;
    v53 = v46;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
    return sub_183B919E0();
  }
  else
  {
    if (qword_1EDCDC590 != -1)
      swift_once();
    v28 = sub_183B915CC();
    __swift_project_value_buffer(v28, (uint64_t)qword_1EDCDDEE8);
    swift_retain_n();
    v29 = sub_183B915B4();
    v30 = sub_183B91C80();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      *(_DWORD *)v31 = 136315138;
      v52 = *(_QWORD *)(v27 + 16);
      v53 = v32;
      type metadata accessor for NWConnection(0);
      swift_retain();
      v33 = sub_183B9174C();
      v52 = sub_183273D70(v33, v34, &v53);
      sub_183B91D1C();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_182FBE000, v29, v30, "Connection successfully sent, connection: %s", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v32, -1, -1);
      MEMORY[0x186DB563C](v31, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
    return sub_183B919EC();
  }
}

void sub_1832B0F3C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_signpost_type_t v29;
  unint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint8_t *v33;
  os_signpost_id_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  BOOL v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL4 is_final;
  nw_protocol_metadata_t v48;
  nw_protocol_metadata_t v49;
  _QWORD *v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  _BOOL4 v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  char *v81;
  void *v82;
  int v83;
  char v84;
  void (*v85)(char *, char *, uint64_t);
  _DWORD *v86;
  NSObject *v87;
  os_log_type_t v88;
  _BOOL4 v89;
  _DWORD *v90;
  _DWORD v91[2];
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t Strong;
  uint64_t v109;
  uint64_t id;

  v105 = a2;
  v106 = a3;
  v7 = sub_183B91578();
  v103 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v102 = (char *)v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_183B91548();
  v107 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v104 = (char *)v91 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)v91 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)v91 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)v91 - v21;
  v23 = *((unsigned __int8 *)a5 + 4);
  v24 = *a5;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v95 = v7;
    v96 = v12;
    v101 = v20;
    v98 = a1;
    v99 = v17;
    if (qword_1EDCDC598 != -1)
      swift_once();
    v25 = v24 | (v23 << 32);
    v26 = sub_183B9156C();
    v27 = __swift_project_value_buffer(v26, (uint64_t)qword_1EDCDDF00);
    swift_retain();
    sub_183B9153C();
    v97 = v27;
    v28 = sub_183B91560();
    v29 = sub_183B91CE0();
    if ((sub_183B91CEC() & 1) != 0)
    {
      v30 = v107;
      v31 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
      v100 = v25;
      v32 = v101;
      v31(v101, v22, v9);
      v33 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v33 = 134217984;
      id = nw_connection_get_id(*(void **)(*(_QWORD *)(Strong + 16) + 16));
      sub_183B91D1C();
      swift_release();
      v34 = sub_183B91530();
      _os_signpost_emit_with_name_impl(&dword_182FBE000, v28, v29, v34, "receiveNextMessage", "Receive message from %llu", v33, 0xCu);
      MEMORY[0x186DB563C](v33, -1, -1);

      v35 = *(void (**)(char *, uint64_t))(v30 + 8);
      v35(v22, v9);
      v36 = v32;
      v25 = v100;
    }
    else
    {
      swift_release();

      v35 = *(void (**)(char *, uint64_t))(v107 + 8);
      v36 = v22;
    }
    v35(v36, v9);
    if (HIDWORD(v25) > 0xFE)
    {
      if (qword_1EDCDC590 != -1)
        swift_once();
      v37 = sub_183B915CC();
      v38 = __swift_project_value_buffer(v37, (uint64_t)qword_1EDCDDEE8);
      swift_retain_n();
      v100 = v38;
      v39 = sub_183B915B4();
      v40 = sub_183B91C68();
      v41 = os_log_type_enabled(v39, v40);
      v94 = v9;
      if (v41)
      {
        v42 = (uint8_t *)swift_slowAlloc();
        v43 = swift_slowAlloc();
        id = v43;
        *(_DWORD *)v42 = 136315138;
        v109 = nw_connection_get_id(*(void **)(*(_QWORD *)(Strong + 16) + 16));
        v44 = sub_183B9174C();
        v109 = sub_183273D70(v44, v45, &id);
        sub_183B91D1C();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_182FBE000, v39, v40, "Received message from %s", v42, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x186DB563C](v43, -1, -1);
        MEMORY[0x186DB563C](v42, -1, -1);

        v46 = v106;
        if (v106)
          goto LABEL_12;
      }
      else
      {

        swift_release_n();
        v46 = v106;
        if (v106)
        {
LABEL_12:
          is_final = nw_content_context_get_is_final(*(nw_content_context_t *)(v46 + 16));
          if (qword_1EDCDC5B0 != -1)
            swift_once();
          v48 = nw_content_context_copy_protocol_metadata(*(nw_content_context_t *)(v46 + 16), *(nw_protocol_definition_t *)(qword_1EDCF2A58 + 32));
          if (v48)
          {
            v49 = v48;
            v50 = sub_1832A39D4((uint64_t)v48);
            if (v50)
            {
              v51 = ((uint64_t (*)(nw_protocol_metadata_t))v50[12])(v49);
              type metadata accessor for NWProtocolFramer.Message();
              if (swift_dynamicCastClass())
              {
                if (v105 >> 60 != 15)
                {
                  sub_18324A994(v98, v105);
                  v80 = sub_1832BD988();
                  sub_183B91560();
                  v81 = v99;
                  sub_183B91524();
                  swift_retain_n();
                  v82 = (void *)sub_183B91560();
                  v83 = sub_183B91CD4();
                  v84 = sub_183B91CEC();
                  v93 = v51;
                  v106 = v80;
                  if ((v84 & 1) != 0)
                  {
                    v91[1] = v83;
                    v92 = v82;
                    v85 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
                    v85(v104, v81, v94);
                    v86 = (_DWORD *)swift_slowAlloc();
                    id = swift_slowAlloc();
                    *v86 = 136315394;
                    v107 = (unint64_t)v85;
                    __asm { BR              X10 }
                  }

                  swift_release_n();
                  (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v101, v99, v94);
                  sub_183B9159C();
                  swift_allocObject();
                  sub_183B91590();
                  v87 = sub_183B915B4();
                  v88 = sub_183B91C80();
                  v89 = os_log_type_enabled(v87, v88);
                  v107 = (unint64_t)v35;
                  if (v89)
                  {
                    v90 = (_DWORD *)swift_slowAlloc();
                    id = swift_slowAlloc();
                    *v90 = 136315138;
                    __asm { BR              X10 }
                  }

                  __asm { BR              X10 }
                }
                swift_retain_n();
                v52 = sub_183B915B4();
                v53 = sub_183B91C74();
                if (os_log_type_enabled(v52, v53))
                {
                  LODWORD(v107) = is_final;
                  v54 = Strong;
                  v55 = (uint8_t *)swift_slowAlloc();
                  v56 = swift_slowAlloc();
                  id = v56;
                  *(_DWORD *)v55 = 136315138;
                  v109 = nw_connection_get_id(*(void **)(*(_QWORD *)(v54 + 16) + 16));
                  v57 = sub_183B9174C();
                  v109 = sub_183273D70(v57, v58, &id);
                  sub_183B91D1C();
                  is_final = v107;
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_182FBE000, v52, v53, "%s; No content in message", v55, 0xCu);
                  swift_arrayDestroy();
                  MEMORY[0x186DB563C](v56, -1, -1);
                  MEMORY[0x186DB563C](v55, -1, -1);

                  swift_release();
                }
                else
                {

                  swift_release();
                  swift_release_n();
                }
                if (!is_final)
                  goto LABEL_36;
                goto LABEL_33;
              }
              swift_release();
            }
            else
            {
              swift_unknownObjectRelease();
            }
          }
LABEL_29:
          swift_retain_n();
          v69 = sub_183B915B4();
          v70 = sub_183B91C74();
          if (os_log_type_enabled(v69, v70))
          {
            v71 = is_final;
            v72 = Strong;
            v73 = (uint8_t *)swift_slowAlloc();
            v74 = swift_slowAlloc();
            id = v74;
            *(_DWORD *)v73 = 136315138;
            v109 = nw_connection_get_id(*(void **)(*(_QWORD *)(v72 + 16) + 16));
            v75 = sub_183B9174C();
            v109 = sub_183273D70(v75, v76, &id);
            sub_183B91D1C();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_182FBE000, v69, v70, "%s; Failed to determine message type", v73, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x186DB563C](v74, -1, -1);
            MEMORY[0x186DB563C](v73, -1, -1);

            if (!v71)
            {
LABEL_36:
              swift_release();
              return;
            }
          }
          else
          {

            swift_release_n();
            if (!is_final)
              goto LABEL_36;
          }
LABEL_33:
          v77 = sub_183B915B4();
          v78 = sub_183B91C80();
          if (os_log_type_enabled(v77, v78))
          {
            v79 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v79 = 0;
            _os_log_impl(&dword_182FBE000, v77, v78, "Message is final, connection has ended", v79, 2u);
            MEMORY[0x186DB563C](v79, -1, -1);
          }

          sub_1832AE3C0(0);
          goto LABEL_36;
        }
      }
      is_final = 0;
      goto LABEL_29;
    }
    if (qword_1EDCDC590 != -1)
      swift_once();
    v59 = sub_183B915CC();
    __swift_project_value_buffer(v59, (uint64_t)qword_1EDCDDEE8);
    swift_retain_n();
    v60 = sub_183B915B4();
    v61 = sub_183B91C74();
    if (os_log_type_enabled(v60, v61))
    {
      v107 = v25;
      v62 = swift_slowAlloc();
      v63 = (_QWORD *)swift_slowAlloc();
      v64 = swift_slowAlloc();
      id = v64;
      *(_DWORD *)v62 = 136315394;
      v109 = nw_connection_get_id(*(void **)(*(_QWORD *)(Strong + 16) + 16));
      v65 = sub_183B9174C();
      v109 = sub_183273D70(v65, v66, &id);
      sub_183B91D1C();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v62 + 12) = 2112;
      sub_18323C200();
      swift_allocError();
      *(_DWORD *)v67 = v107;
      *(_BYTE *)(v67 + 4) = BYTE4(v25);
      v68 = _swift_stdlib_bridgeErrorToNSError();
      v109 = v68;
      sub_183B91D1C();
      *v63 = v68;
      _os_log_impl(&dword_182FBE000, v60, v61, "%s; Failed to receive message: %@", (uint8_t *)v62, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7640);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v63, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v64, -1, -1);
      MEMORY[0x186DB563C](v62, -1, -1);
      swift_release();

    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t sub_1832B21CC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t result;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  v3 = v2;
  v6 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v6);
  v47 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  MEMORY[0x1E0C80A78](v8);
  v49 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _s9HandshakeVMa();
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (unsigned int *)((char *)&v47 - v14);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDF20);
  v17 = MEMORY[0x1E0C80A78](v16);
  v48 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v47 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v47 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v47 - v25;
  v27 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 72) + 16);
  os_unfair_lock_lock(v27);
  v50 = v3;
  v51 = v26;
  sub_183273D38(v28, (uint64_t (*)(void))sub_1832BAFF0);
  os_unfair_lock_unlock(v27);
  sub_183B91278();
  swift_allocObject();
  sub_18324A994(a1, a2);
  sub_183B9126C();
  sub_183064644(&qword_1EDCDDFC8, (uint64_t (*)(uint64_t))_s9HandshakeVMa, (uint64_t)&unk_183BA1DB4);
  sub_183B91254();
  v48 = v24;
  sub_18308485C(a1, a2);
  swift_release();
  result = sub_183058EC4((uint64_t)v13, (uint64_t)v15, (uint64_t (*)(_QWORD))_s9HandshakeVMa);
  v30 = v15[1];
  if (v30 < *v15)
  {
    __break(1u);
  }
  else if (*v15 <= 1 && v30)
  {
    v31 = (uint64_t)v15 + *(int *)(v10 + 24);
    MEMORY[0x1E0C80A78](result);
    *(&v47 - 2) = v50;
    *(&v47 - 1) = v31;
    os_unfair_lock_lock(v27);
    sub_183273D38(v32, sub_1832BB64C);
    os_unfair_lock_unlock(v27);
    v33 = sub_183B914AC();
    v34 = (uint64_t)v49;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v49, 1, 1, v33);
    sub_1832BA50C(1, v34, 4);
    sub_1830620D4(v34, &qword_1EDCDD200);
    v35 = (uint64_t)v51;
    v36 = (uint64_t)v48;
    sub_183062090((uint64_t)v51, (uint64_t)v48, &qword_1EDCDDF20);
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7A98);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37) == 1)
    {
      sub_183058AE0((uint64_t)v15, (uint64_t (*)(_QWORD))_s9HandshakeVMa);
      sub_1830620D4(v35, &qword_1EDCDDF20);
      v39 = v36;
      return sub_1830620D4(v39, &qword_1EDCDDF20);
    }
    sub_183058C44(v31, v47, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    sub_183B919EC();
    sub_183058AE0((uint64_t)v15, (uint64_t (*)(_QWORD))_s9HandshakeVMa);
    sub_1830620D4(v35, &qword_1EDCDDF20);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
  }
  else
  {
    v40 = sub_183B914AC();
    v41 = (uint64_t)v49;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v49, 1, 1, v40);
    sub_1832BA50C(0, v41, 4);
    sub_1830620D4(v41, &qword_1EDCDD200);
    v42 = (uint64_t)v51;
    sub_183062090((uint64_t)v51, (uint64_t)v21, &qword_1EDCDDF20);
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7A98);
    v44 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v21, 1, v43) == 1)
    {
      sub_183058AE0((uint64_t)v15, (uint64_t (*)(_QWORD))_s9HandshakeVMa);
      sub_1830620D4(v42, &qword_1EDCDDF20);
      v39 = (uint64_t)v21;
      return sub_1830620D4(v39, &qword_1EDCDDF20);
    }
    sub_183274368();
    v45 = swift_allocError();
    *v46 = 0xD000000000000016;
    v46[1] = 0x8000000183C71AB0;
    v46[2] = 0x7000000000000000;
    v52 = v45;
    sub_183B919E0();
    sub_183058AE0((uint64_t)v15, (uint64_t (*)(_QWORD))_s9HandshakeVMa);
    sub_1830620D4(v42, &qword_1EDCDDF20);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v21, v43);
  }
  return result;
}

void sub_1832B29C8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t id;
  unint64_t v32;

  v3 = v2;
  v30 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDED0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v28 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_183B914AC();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 72) + 16);
  os_unfair_lock_lock(v18);
  sub_183273D38(v19, (uint64_t (*)(void))sub_1832BB00C);
  os_unfair_lock_unlock(v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1830620D4((uint64_t)v13, &qword_1EDCDD200);
    if (qword_1EDCDC590 != -1)
      swift_once();
    v20 = sub_183B915CC();
    __swift_project_value_buffer(v20, (uint64_t)qword_1EDCDDEE8);
    swift_retain();
    v21 = sub_183B915B4();
    v22 = sub_183B91C74();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v23 = 134217984;
      id = nw_connection_get_id(*(void **)(*(_QWORD *)(v3 + 16) + 16));
      sub_183B91D1C();
      swift_release();
      _os_log_impl(&dword_182FBE000, v21, v22, "Could not find callID for connection identifier: %llu", v23, 0xCu);
      MEMORY[0x186DB563C](v23, -1, -1);

    }
    else
    {

      swift_release();
    }
  }
  else
  {
    v29 = a2;
    v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    MEMORY[0x1E0C80A78](v24);
    *(&v28 - 2) = v3;
    *(&v28 - 1) = (uint64_t)v17;
    os_unfair_lock_lock(v18);
    sub_183273D38(v25, (uint64_t (*)(void))sub_1832BB638);
    os_unfair_lock_unlock(v18);
    sub_183062090((uint64_t)v10, (uint64_t)v8, &qword_1EDCDDED0);
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v8, 1, v26) == 1)
    {
      sub_1830620D4((uint64_t)v10, &qword_1EDCDDED0);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      sub_1830620D4((uint64_t)v8, &qword_1EDCDDED0);
    }
    else
    {
      id = v30;
      v32 = v29;
      sub_18324A994(v30, v29);
      sub_183B919EC();
      sub_1830620D4((uint64_t)v10, &qword_1EDCDDED0);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v26);
    }
  }
}

uint64_t sub_1832B2D64(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  os_signpost_type_t v26;
  os_signpost_id_t v27;
  uint64_t v28;
  uint64_t v29;
  os_signpost_type_t v30;
  os_signpost_id_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_unfair_lock_s *v38;
  os_unfair_lock_s *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = sub_183B91548();
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_183B9156C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RemoteCallEnvelope(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v42 = (uint64_t)&v42 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v43 = (uint64_t)&v42 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v44 = (uint64_t)&v42 - v20;
  MEMORY[0x1E0C80A78](v19);
  v45 = (uint64_t)&v42 - v21;
  if (qword_1EDCDC598 != -1)
    swift_once();
  v22 = __swift_project_value_buffer(v7, (uint64_t)qword_1EDCDDF00);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v22, v7);
  sub_183B9153C();
  v23 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v23 = 0;
  v46 = v8;
  v24 = sub_183B91560();
  v47 = v7;
  v25 = v24;
  v26 = sub_183B91CD4();
  v27 = sub_183B91530();
  _os_signpost_emit_with_name_impl(&dword_182FBE000, v25, v26, v27, "decodeRemoteCallEnvelope", "", v23, 2u);
  sub_183B91278();
  swift_allocObject();
  sub_18324A994(a1, a2);
  sub_183B9126C();
  sub_183064644(&qword_1EDCDDFD8, type metadata accessor for RemoteCallEnvelope, (uint64_t)&unk_183BA6368);
  sub_183B91254();
  sub_18308485C(a1, a2);
  swift_release();
  v28 = (uint64_t)v14;
  v29 = v42;
  sub_183058EC4(v28, v42, type metadata accessor for RemoteCallEnvelope);
  v30 = sub_183B91CC8();
  v31 = sub_183B91530();
  _os_signpost_emit_with_name_impl(&dword_182FBE000, v25, v30, v31, "decodeRemoteCallEnvelope", "", v23, 2u);

  v32 = v43;
  sub_183058EC4(v29, v43, type metadata accessor for RemoteCallEnvelope);
  MEMORY[0x186DB563C](v23, -1, -1);
  v33 = v32;
  v34 = v44;
  sub_183058EC4(v33, v44, type metadata accessor for RemoteCallEnvelope);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v49);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v47);
  v35 = v45;
  v36 = sub_183058EC4(v34, v45, type metadata accessor for RemoteCallEnvelope);
  MEMORY[0x1E0C80A78](v36);
  *(&v42 - 2) = v37;
  *(&v42 - 1) = v35;
  v39 = v38 + 4;
  os_unfair_lock_lock(v38 + 4);
  sub_183273D38(v40, sub_1832BB074);
  os_unfair_lock_unlock(v39);
  return sub_183058AE0(v35, type metadata accessor for RemoteCallEnvelope);
}

uint64_t sub_1832B3308(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  __int128 v61;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDED0);
  MEMORY[0x1E0C80A78](v4);
  v67 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
  v68 = *(_QWORD *)(v6 - 8);
  v69 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReplyEnvelope();
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v63 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v63 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v63 - v19;
  sub_183B91278();
  swift_allocObject();
  sub_18324A994(a1, a2);
  sub_183B9126C();
  sub_183064644(&qword_1EDCDE018, (uint64_t (*)(uint64_t))type metadata accessor for ReplyEnvelope, (uint64_t)&unk_183BA6A68);
  sub_183B91254();
  v63 = v15;
  v64 = v12;
  v65 = v8;
  sub_18308485C(a1, a2);
  swift_release();
  v21 = sub_183058EC4((uint64_t)v18, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  MEMORY[0x1E0C80A78](v21);
  *(&v63 - 2) = (char *)v22;
  *(&v63 - 1) = v20;
  v24 = v23 + 4;
  os_unfair_lock_lock(v23 + 4);
  v25 = (uint64_t)v67;
  sub_183273D38(v26, (uint64_t (*)(void))sub_1832BB2F4);
  os_unfair_lock_unlock(v24);
  v28 = v68;
  v27 = v69;
  v29 = (uint64_t)v20;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v25, 1, v69) != 1)
  {
    v39 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v65, v25, v27);
    v40 = v29 + *(int *)(v9 + 24);
    v41 = *(unsigned __int8 *)(v40 + 16);
    if (v41 == 255)
    {
      v59 = (uint64_t *)(v29 + *(int *)(v9 + 20));
      v60 = v59[1];
      v70 = *v59;
      v71 = v60;
      sub_18324A994(v70, v60);
      sub_183B919EC();
LABEL_23:
      (*(void (**)(char *, uint64_t))(v28 + 8))(v39, v27);
      return sub_183058AE0(v29, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
    }
    v42 = *(_QWORD *)v40;
    v43 = *(_QWORD *)(v40 + 8);
    sub_1832BB30C(*(_QWORD *)v40, v43, *(_BYTE *)(v40 + 16));
    if (qword_1EDCDC590 != -1)
      swift_once();
    v44 = sub_183B915CC();
    __swift_project_value_buffer(v44, (uint64_t)qword_1EDCDDEE8);
    v45 = (uint64_t)v63;
    sub_183058C44(v29, (uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
    sub_1832BB324(v42, v43, v41);
    sub_1832BB30C(v42, v43, v41);
    v46 = sub_183B915B4();
    v47 = sub_183B91C74();
    v48 = v47;
    if (os_log_type_enabled(v46, v47))
    {
      v49 = swift_slowAlloc();
      v67 = (char *)swift_slowAlloc();
      v73[0] = (uint64_t)v67;
      *(_DWORD *)v49 = 136315394;
      sub_183B914AC();
      sub_183064644(&qword_1EDCDD338, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      LODWORD(v66) = v48;
      v50 = sub_183B92088();
      v70 = sub_183273D70(v50, v51, v73);
      sub_183B91D1C();
      swift_bridgeObjectRelease();
      sub_183058AE0(v45, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
      *(_WORD *)(v49 + 12) = 2080;
      v70 = v42;
      v71 = v43;
      v72 = v41;
      sub_1832BB30C(v42, v43, v41);
      v52 = sub_183B9174C();
      v70 = sub_183273D70(v52, v53, v73);
      v39 = v65;
      sub_183B91D1C();
      v27 = v69;
      swift_bridgeObjectRelease();
      sub_1832BB270(v42, v43, v41);
      sub_1832BB270(v42, v43, v41);
      _os_log_impl(&dword_182FBE000, v46, (os_log_type_t)v66, "Reply %s failed: %s", (uint8_t *)v49, 0x16u);
      v54 = v67;
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v54, -1, -1);
      v55 = v49;
      v28 = v68;
      MEMORY[0x186DB563C](v55, -1, -1);

      if (v41)
        goto LABEL_11;
    }
    else
    {
      sub_183058AE0(v45, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
      sub_1832BB270(v42, v43, v41);
      sub_1832BB270(v42, v43, v41);

      if (v41)
      {
LABEL_11:
        if (v41 == 1)
        {
          sub_183274368();
          v56 = swift_allocError();
          *v57 = v42;
          v57[1] = v43;
          v58 = 0xA000000000000000;
        }
        else
        {
          sub_183274368();
          v56 = swift_allocError();
          if (v42 | v43)
            v61 = xmmword_183BA3300;
          else
            v61 = xmmword_183BA0830;
          *(_OWORD *)v57 = v61;
          v58 = 0xB000000000000000;
        }
        goto LABEL_22;
      }
    }
    sub_183274368();
    v56 = swift_allocError();
    *v57 = v42;
    v57[1] = v43;
    v58 = 0x8000000000000000;
LABEL_22:
    v57[2] = v58;
    v70 = v56;
    sub_183B919E0();
    goto LABEL_23;
  }
  sub_1830620D4(v25, &qword_1EDCDDED0);
  if (qword_1EDCDC590 != -1)
    swift_once();
  v30 = sub_183B915CC();
  __swift_project_value_buffer(v30, (uint64_t)qword_1EDCDDEE8);
  v31 = (uint64_t)v64;
  sub_183058C44((uint64_t)v20, (uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  v32 = sub_183B915B4();
  v33 = sub_183B91C74();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v70 = v35;
    *(_DWORD *)v34 = 136315138;
    sub_183B914AC();
    sub_183064644(&qword_1EDCDD338, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v36 = sub_183B92088();
    v73[0] = sub_183273D70(v36, v37, &v70);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    sub_183058AE0(v31, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
    _os_log_impl(&dword_182FBE000, v32, v33, "No continuation for reply with call ID: %s", v34, 0xCu);
    swift_arrayDestroy();
    v38 = v35;
    v29 = (uint64_t)v20;
    MEMORY[0x186DB563C](v38, -1, -1);
    MEMORY[0x186DB563C](v34, -1, -1);
  }
  else
  {
    sub_183058AE0(v31, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  }

  return sub_183058AE0(v29, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
}

void sub_1832B3C9C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  os_log_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  os_unfair_lock_s *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  _QWORD v61[2];
  os_log_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_183B91278();
  swift_allocObject();
  sub_18324A994(a1, a2);
  sub_183B9126C();
  sub_1832BB338();
  sub_183B91254();
  v67 = v2;
  v64 = v7;
  sub_18308485C(a1, a2);
  swift_release();
  v8 = v71;
  v9 = v72;
  v10 = v73;
  v11 = v76;
  v68 = v74;
  v69 = v75;
  if (qword_1EDCDC590 != -1)
    swift_once();
  v66 = v8;
  v12 = sub_183B915CC();
  v13 = __swift_project_value_buffer(v12, (uint64_t)qword_1EDCDDEE8);
  swift_bridgeObjectRetain();
  v14 = v68;
  sub_18324A994(v10, v68);
  v15 = v69;
  sub_18324A994(v69, v11);
  swift_bridgeObjectRetain();
  sub_18324A994(v10, v14);
  sub_18324A994(v15, v11);
  v65 = v13;
  v16 = sub_183B915B4();
  v17 = sub_183B91C80();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v63 = swift_slowAlloc();
    v70 = v63;
    v62 = v16;
    v19 = v10;
    v21 = v68;
    v20 = v69;
    *(_DWORD *)v18 = 136315138;
    v61[1] = v18 + 4;
    v71 = v66;
    v72 = v9;
    v73 = v19;
    v74 = v21;
    v75 = v20;
    v76 = v11;
    swift_bridgeObjectRetain();
    sub_18324A994(v19, v21);
    sub_18324A994(v20, v11);
    v22 = sub_183B9174C();
    v71 = sub_183273D70(v22, v23, &v70);
    v24 = v20;
    v25 = v21;
    v10 = v19;
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18308485C(v19, v25);
    sub_18308485C(v24, v11);
    swift_bridgeObjectRelease();
    sub_18308485C(v19, v25);
    sub_18308485C(v24, v11);
    v26 = v62;
    _os_log_impl(&dword_182FBE000, v62, v17, "Got file transfer request: %s", v18, 0xCu);
    v27 = v63;
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v27, -1, -1);
    MEMORY[0x186DB563C](v18, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();
    v29 = v68;
    sub_18308485C(v10, v68);
    v30 = v69;
    sub_18308485C(v69, v11);
    swift_bridgeObjectRelease();
    sub_18308485C(v10, v29);
    sub_18308485C(v30, v11);

  }
  v31 = v67;
  MEMORY[0x1E0C80A78](v28);
  LOBYTE(v61[-6]) = 1;
  v32 = v66;
  v61[-5] = v31;
  v61[-4] = v32;
  v33 = v69;
  v61[-3] = v9;
  v61[-2] = v33;
  v35 = v34 + 4;
  v61[-1] = v11;
  swift_bridgeObjectRetain();
  sub_18324A994(v33, v11);
  os_unfair_lock_lock(v35);
  sub_183273D38(v36, sub_1832BAD0C);
  os_unfair_lock_unlock(v35);
  sub_18308485C(v33, v11);
  swift_bridgeObjectRelease();
  v71 = v32;
  v72 = v9;
  swift_bridgeObjectRetain();
  v37 = sub_183B917F4();
  v38 = v72;
  MEMORY[0x1E0C80A78](v37);
  LOBYTE(v61[-6]) = 0;
  v61[-5] = v31;
  v61[-4] = v39;
  v61[-3] = v38;
  v61[-2] = v10;
  v40 = v68;
  v61[-1] = v68;
  sub_18324A994(v10, v40);
  os_unfair_lock_lock(v35);
  sub_183273D38(v41, sub_1832BAD0C);
  os_unfair_lock_unlock(v35);
  sub_18308485C(v10, v40);
  swift_bridgeObjectRelease();
  v42 = *(_QWORD *)(v31 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession);
  if (v42)
  {
    v43 = *(void **)(v42 + 32);
    swift_retain();
    v44 = objc_msgSend(v43, sel_selfPublicKey);
    if (v44)
    {
      v45 = v44;
      v66 = v11;
      v46 = sub_183B91428();
      v48 = v47;
      swift_release();

      v49 = *(_QWORD *)(v67 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession);
      if (v49)
      {
        v50 = *(void **)(v49 + 32);
        swift_retain();
        v51 = objc_msgSend(v50, sel_selfPublicKey);
        if (v51)
        {
          v52 = v51;
          v53 = sub_183B91428();
          v55 = v54;
          swift_release();

          v56 = sub_183B914AC();
          v57 = (uint64_t)v64;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v64, 1, 1, v56);
          sub_18324A994(v46, v48);
          sub_18324A994(v53, v55);
          sub_18324A994(v46, v48);
          sub_18324A994(v53, v55);
          sub_1832BA6B8(v46, v48, v53, v55, v57, 6);
          sub_18308485C(v46, v48);
          sub_18308485C(v53, v55);
          sub_18308485C(v53, v55);
          sub_18308485C(v46, v48);
          swift_bridgeObjectRelease();
          sub_18308485C(v10, v68);
          sub_18308485C(v69, v66);
          sub_1830620D4(v57, &qword_1EDCDD200);
          sub_18308485C(v46, v48);
          sub_18308485C(v53, v55);
          return;
        }
        swift_release();
      }
      sub_18308485C(v46, v48);
      v11 = v66;
    }
    else
    {
      swift_release();
    }
  }
  v58 = sub_183B915B4();
  v59 = sub_183B91C74();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v60 = 0;
    _os_log_impl(&dword_182FBE000, v58, v59, "Missing public key for file transfer", v60, 2u);
    MEMORY[0x186DB563C](v60, -1, -1);
    swift_bridgeObjectRelease();

    sub_18308485C(v10, v68);
    sub_18308485C(v69, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_18308485C(v10, v68);
    sub_18308485C(v69, v11);

  }
}

uint64_t sub_1832B455C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  sub_183B91278();
  swift_allocObject();
  sub_18324A994(a1, a2);
  sub_183B9126C();
  sub_1832BB530();
  sub_183B91254();
  sub_18308485C(a1, a2);
  swift_release();
  v4 = v17;
  v5 = v18;
  v6 = v19;
  v7 = v20;
  if (qword_1EDCDC590 != -1)
    swift_once();
  v8 = sub_183B915CC();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EDCDDEE8);
  sub_18324A994(v17, v18);
  sub_18324A994(v19, v20);
  sub_18324A994(v17, v18);
  sub_18324A994(v19, v20);
  v9 = sub_183B915B4();
  v10 = sub_183B91C80();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    *(_DWORD *)v11 = 136315138;
    v16 = v12;
    v17 = v4;
    v18 = v5;
    v19 = v6;
    v20 = v7;
    sub_18324A994(v4, v5);
    sub_18324A994(v6, v7);
    v13 = sub_183B9174C();
    v17 = sub_183273D70(v13, v14, &v16);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    sub_18308485C(v4, v5);
    sub_18308485C(v6, v7);
    sub_18308485C(v4, v5);
    sub_18308485C(v6, v7);
    _os_log_impl(&dword_182FBE000, v9, v10, "Got file transfer response: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v12, -1, -1);
    MEMORY[0x186DB563C](v11, -1, -1);
  }
  else
  {
    sub_18308485C(v17, v18);
    sub_18308485C(v19, v20);
    sub_18308485C(v17, v18);
    sub_18308485C(v19, v20);
  }

  sub_18324A994(v6, v7);
  sub_1832B66D0(1, 0, 0, v6, v7);
  sub_18308485C(v6, v7);
  sub_18324A994(v4, v5);
  sub_1832B66D0(0, 0, 0, v4, v5);
  sub_18308485C(v4, v5);
  sub_18308485C(v4, v5);
  return sub_18308485C(v6, v7);
}

uint64_t sub_1832B4A1C(uint64_t a1, unint64_t a2)
{
  uint8_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37[2];

  v5 = type metadata accessor for CancelRemoteCall(0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v35 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v35 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (uint8_t *)&v35 - v15;
  sub_183B91278();
  swift_allocObject();
  sub_18324A994(a1, a2);
  sub_183B9126C();
  sub_183064644(&qword_1EDCDE038, type metadata accessor for CancelRemoteCall, (uint64_t)&unk_183BA648C);
  sub_183B91254();
  sub_18308485C(a1, a2);
  swift_release();
  v17 = sub_183058EC4((uint64_t)v14, (uint64_t)v16, type metadata accessor for CancelRemoteCall);
  MEMORY[0x1E0C80A78](v17);
  *(&v35 - 2) = v2;
  *(&v35 - 1) = v16;
  v19 = v18 + 4;
  os_unfair_lock_lock(v18 + 4);
  sub_18327FA4C((_QWORD *(*)(uint64_t *__return_ptr))sub_1832BB5A4, v37);
  os_unfair_lock_unlock(v19);
  if (v37[0])
  {
    if (qword_1EDCDC590 != -1)
      swift_once();
    v20 = sub_183B915CC();
    __swift_project_value_buffer(v20, (uint64_t)qword_1EDCDDEE8);
    sub_183058C44((uint64_t)v16, (uint64_t)v11, type metadata accessor for CancelRemoteCall);
    v21 = sub_183B915B4();
    v22 = sub_183B91C80();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v37[0] = v24;
      *(_DWORD *)v23 = 136315138;
      v35 = v23 + 4;
      sub_183B914AC();
      sub_183064644(&qword_1EDCDD338, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v25 = sub_183B92088();
      v36 = sub_183273D70(v25, v26, v37);
      sub_183B91D1C();
      swift_bridgeObjectRelease();
      sub_183058AE0((uint64_t)v11, type metadata accessor for CancelRemoteCall);
      _os_log_impl(&dword_182FBE000, v21, v22, "Cancelling call ID: %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v24, -1, -1);
      MEMORY[0x186DB563C](v23, -1, -1);
    }
    else
    {
      sub_183058AE0((uint64_t)v11, type metadata accessor for CancelRemoteCall);
    }

    sub_183B91AD0();
    swift_release();
  }
  else
  {
    if (qword_1EDCDC590 != -1)
      swift_once();
    v27 = sub_183B915CC();
    __swift_project_value_buffer(v27, (uint64_t)qword_1EDCDDEE8);
    sub_183058C44((uint64_t)v16, (uint64_t)v8, type metadata accessor for CancelRemoteCall);
    v28 = sub_183B915B4();
    v29 = sub_183B91C74();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v37[0] = v31;
      *(_DWORD *)v30 = 136315138;
      sub_183B914AC();
      sub_183064644(&qword_1EDCDD338, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v32 = sub_183B92088();
      v36 = sub_183273D70(v32, v33, v37);
      sub_183B91D1C();
      swift_bridgeObjectRelease();
      sub_183058AE0((uint64_t)v8, type metadata accessor for CancelRemoteCall);
      _os_log_impl(&dword_182FBE000, v28, v29, "Could not find task for call ID: %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v31, -1, -1);
      MEMORY[0x186DB563C](v30, -1, -1);
    }
    else
    {
      sub_183058AE0((uint64_t)v8, type metadata accessor for CancelRemoteCall);
    }

  }
  return sub_183058AE0((uint64_t)v16, type metadata accessor for CancelRemoteCall);
}

uint64_t sub_1832B50E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for RemoteCallEnvelope(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD468);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_183B914AC();
  v11 = *(_QWORD *)(v10 - 8);
  v21 = v10;
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v13, a2);
  v14 = sub_183B91A34();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  sub_183058C44(a2, (uint64_t)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for RemoteCallEnvelope);
  v15 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = a1;
  sub_183058EC4((uint64_t)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v16 + v15, type metadata accessor for RemoteCallEnvelope);
  swift_retain();
  v17 = sub_1832AB2F4((uint64_t)v9, (uint64_t)&unk_1EDCDDFE8, (uint64_t)v16);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0x8000000000000000;
  sub_1832FAA24(v17, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 88) = v22;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v21);
  return swift_endAccess();
}

uint64_t sub_1832B52F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[17] = a4;
  v5[18] = a5;
  v6 = sub_183B914C4();
  v5[19] = v6;
  v5[20] = *(_QWORD *)(v6 - 8);
  v5[21] = swift_task_alloc();
  v5[22] = type metadata accessor for NWActorID();
  v5[23] = swift_task_alloc();
  v5[24] = type metadata accessor for RemoteCallEnvelope(0);
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  v5[28] = type metadata accessor for ReplyEnvelope();
  v5[29] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1832B53D8()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;

  if (qword_1EDCDC5B8 != -1)
    swift_once();
  *(_QWORD *)(v0 + 40) = _s15ActorConnectionCMa();
  *(_QWORD *)(v0 + 48) = &off_1E148CF30;
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 240) = v1;
  v2 = *(_OWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 136);
  *(_OWORD *)(v1 + 16) = v2;
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE000);
  *v3 = v0;
  v3[1] = sub_1832B54F0;
  return sub_183B92364();
}

uint64_t sub_1832B54F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (!v0)
    sub_1830620D4(v2 + 16, &qword_1EDCDE008);
  return swift_task_switch();
}

uint64_t sub_1832B5574()
{
  uint64_t v0;

  if ((sub_183B91ADC() & 1) == 0)
    sub_1832BB270(0, 0, 0xFFu);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832B5604()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832B5658()
{
  uint64_t v0;

  sub_183058AE0(*(_QWORD *)(v0 + 232), (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832B56E0()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  void *v37;
  uint8_t *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v54;
  os_log_type_t type;
  uint64_t v56;
  uint64_t v57[2];

  v1 = *(void **)(v0 + 256);
  sub_1830620D4(v0 + 16, &qword_1EDCDE008);
  *(_QWORD *)(v0 + 80) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    v16 = *(void **)(v0 + 256);

    *(_QWORD *)(v0 + 96) = v16;
    v17 = v16;
    if (swift_dynamicCast())
    {

      if (qword_1EDCDC590 != -1)
        swift_once();
      v18 = *(_QWORD *)(v0 + 208);
      v19 = *(_QWORD *)(v0 + 144);
      v20 = sub_183B915CC();
      __swift_project_value_buffer(v20, (uint64_t)qword_1EDCDDEE8);
      sub_183058C44(v19, v18, type metadata accessor for RemoteCallEnvelope);
      v21 = sub_183B915B4();
      v22 = sub_183B91C74();
      v23 = os_log_type_enabled(v21, v22);
      v24 = *(_QWORD *)(v0 + 208);
      if (v23)
      {
        v25 = *(_QWORD *)(v0 + 200);
        v26 = (uint8_t *)swift_slowAlloc();
        v27 = swift_slowAlloc();
        v57[0] = v27;
        *(_DWORD *)v26 = 136315138;
        sub_183058C44(v24, v25, type metadata accessor for RemoteCallEnvelope);
        v28 = sub_183B9174C();
        *(_QWORD *)(v0 + 128) = sub_183273D70(v28, v29, v57);
        sub_183B91D1C();
        swift_bridgeObjectRelease();
        sub_183058AE0(v24, type metadata accessor for RemoteCallEnvelope);
        _os_log_impl(&dword_182FBE000, v21, v22, "Failed to execute distributed target: %s", v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x186DB563C](v27, -1, -1);
        MEMORY[0x186DB563C](v26, -1, -1);
      }
      else
      {
        sub_183058AE0(*(_QWORD *)(v0 + 208), type metadata accessor for RemoteCallEnvelope);
      }

      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
      v43 = 0;
      v44 = 2;
      v45 = 1;
      if ((sub_183B91ADC() & 1) == 0)
        goto LABEL_28;
    }
    else
    {

      if (qword_1EDCDC590 != -1)
        swift_once();
      v30 = *(void **)(v0 + 256);
      v31 = sub_183B915CC();
      __swift_project_value_buffer(v31, (uint64_t)qword_1EDCDDEE8);
      v32 = v30;
      v33 = v30;
      v34 = sub_183B915B4();
      v35 = sub_183B91C74();
      v36 = os_log_type_enabled(v34, v35);
      v37 = *(void **)(v0 + 256);
      if (v36)
      {
        v38 = (uint8_t *)swift_slowAlloc();
        v39 = swift_slowAlloc();
        v57[0] = v39;
        *(_DWORD *)v38 = 136315138;
        *(_QWORD *)(v0 + 112) = v37;
        v40 = v37;
        v41 = sub_183B9174C();
        *(_QWORD *)(v0 + 120) = sub_183273D70(v41, v42, v57);
        sub_183B91D1C();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_182FBE000, v34, v35, "Failed to execute distributed target, underlying error: %s", v38, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x186DB563C](v39, -1, -1);
        MEMORY[0x186DB563C](v38, -1, -1);
      }
      else
      {

      }
      *(_QWORD *)(v0 + 88) = *(_QWORD *)(v0 + 256);
      v45 = sub_183B91734();
      v43 = v46;
      v44 = 0;
      if ((sub_183B91ADC() & 1) == 0)
        goto LABEL_28;
    }
LABEL_25:
    v48 = *(_QWORD *)(v0 + 224);
    v47 = *(_QWORD *)(v0 + 232);
    v49 = *(_QWORD *)(v0 + 144);
    v50 = sub_183B914AC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v47, v49, v50);
    *(_OWORD *)(v47 + *(int *)(v48 + 20)) = xmmword_183B9FD60;
    v51 = v47 + *(int *)(v48 + 24);
    *(_QWORD *)v51 = v45;
    *(_QWORD *)(v51 + 8) = v43;
    *(_BYTE *)(v51 + 16) = v44;
    v52 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 264) = v52;
    *v52 = v0;
    v52[1] = sub_1832B5604;
    return sub_1832B60AC(*(_QWORD *)(v0 + 232));
  }
  v3 = *(void **)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  if (v5 >> 60 != 11 || v3 != (void *)4 || v4 || v5 != 0xB000000000000000)
  {
    sub_1832BB29C(v3, v4, v5);
    goto LABEL_11;
  }

  if (qword_1EDCDC590 != -1)
    swift_once();
  v6 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = sub_183B915CC();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EDCDDEE8);
  sub_183058C44(v7, v6, type metadata accessor for RemoteCallEnvelope);
  v9 = sub_183B915B4();
  v10 = sub_183B91C80();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 216);
  if (v11)
  {
    type = v10;
    v14 = *(_QWORD *)(v0 + 184);
    v13 = *(_QWORD *)(v0 + 192);
    v15 = (uint8_t *)swift_slowAlloc();
    v54 = swift_slowAlloc();
    v56 = v54;
    *(_DWORD *)v15 = 136315138;
    sub_183058C44(v12 + *(int *)(v13 + 20), v14, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    sub_183B91DB8();
    swift_bridgeObjectRelease();
    v57[0] = 0x49726F746341574ELL;
    v57[1] = 0xEA00000000002844;
    swift_bridgeObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183B914AC();
    sub_183064644(&qword_1EDCDD338, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    sub_183B92088();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183058AE0(v14, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    *(_QWORD *)(v0 + 104) = sub_183273D70(0x49726F746341574ELL, 0xEA00000000002844, &v56);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    sub_183058AE0(v12, type metadata accessor for RemoteCallEnvelope);
    _os_log_impl(&dword_182FBE000, v9, type, "Failed to resolve actor with ID %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v54, -1, -1);
    MEMORY[0x186DB563C](v15, -1, -1);
  }
  else
  {
    sub_183058AE0(*(_QWORD *)(v0 + 216), type metadata accessor for RemoteCallEnvelope);
  }

  v45 = 0;
  v43 = 0;
  v44 = 2;
  if ((sub_183B91ADC() & 1) != 0)
    goto LABEL_25;
LABEL_28:
  sub_1832BB270(v45, v43, v44);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832B5F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1832B5F44()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(_QWORD);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(int **)(v1 + 24);
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v1 + 32);
  if (v2)
  {
    v5 = (uint64_t (*)(_QWORD))((char *)v2 + *v2);
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v3;
    *v3 = v0;
    v3[1] = sub_1832B5FEC;
    return v5(*(_QWORD *)(v0 + 32));
  }
  else
  {
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1832B5FEC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    sub_1830630AC(*(_QWORD *)(v2 + 40));
  return swift_task_switch();
}

uint64_t sub_1832B6058()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 40) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832B6078()
{
  uint64_t v0;

  sub_1830630AC(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832B60AC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;

  v1[4] = a1;
  type metadata accessor for ReplyEnvelope();
  v1[5] = swift_task_alloc();
  v3 = (_QWORD *)swift_task_alloc();
  v1[6] = v3;
  *v3 = v1;
  v3[1] = sub_1832B611C;
  return sub_1832B676C(a1);
}

uint64_t sub_1832B611C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1832B6190()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  NSObject *log;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1EDCDC590 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(void **)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = sub_183B915CC();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EDCDDEE8);
  sub_183058C44(v1, v3, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  v5 = v2;
  v6 = v2;
  v7 = sub_183B915B4();
  v8 = sub_183B91C74();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(void **)(v0 + 56);
  v11 = *(_QWORD *)(v0 + 40);
  if (v9)
  {
    v12 = swift_slowAlloc();
    v19 = (_QWORD *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v21 = v20;
    *(_DWORD *)v12 = 136315394;
    sub_183B914AC();
    log = v7;
    sub_183064644(&qword_1EDCDD338, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v13 = sub_183B92088();
    *(_QWORD *)(v0 + 16) = sub_183273D70(v13, v14, &v21);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    sub_183058AE0(v11, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
    *(_WORD *)(v12 + 12) = 2112;
    v15 = v10;
    v16 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 24) = v16;
    sub_183B91D1C();
    *v19 = v16;

    _os_log_impl(&dword_182FBE000, log, v8, "Failed to send reply to %s: %@", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7640);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v19, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v20, -1, -1);
    MEMORY[0x186DB563C](v12, -1, -1);

  }
  else
  {

    sub_183058AE0(v11, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832B645C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDF20);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_resolvedActorIDContinuation;
  swift_beginAccess();
  sub_183062090(v7, a2, &qword_1EDCDDF20);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7A98);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
  swift_beginAccess();
  sub_183290498((uint64_t)v6, v7, &qword_1EDCDDF20);
  return swift_endAccess();
}

uint64_t sub_1832B655C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  unint64_t v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = (uint64_t *)(a1 + 80);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v6 = sub_1832F6944(a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v5;
    v17 = *v5;
    *v5 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1832FC288();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_183B914AC();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    v12 = *(_QWORD *)(v17 + 56);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a3, v12 + *(_QWORD *)(v14 + 72) * v6, v13);
    sub_1832B99AC(v6, v17);
    *v5 = v17;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a3, 1, 1, v15);
  }
  return swift_endAccess();
}

void sub_1832B66D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;

  v10 = (os_unfair_lock_s *)(*(_QWORD *)(v5 + 72) + 16);
  os_unfair_lock_lock(v10);
  sub_1832BB574(&v12);
  v11 = v12;
  os_unfair_lock_unlock(v10);
  if (v11)
  {
    swift_retain();
    sub_18327ECC8(a2, a3, a4, a5);
    swift_release_n();
  }
}

uint64_t sub_1832B676C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[7] = a1;
  v2[8] = v1;
  sub_183B91728();
  v2[9] = swift_task_alloc();
  v2[10] = type metadata accessor for ReplyEnvelope();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1832B6810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33[2];

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(os_unfair_lock_s **)(v2 + 72);
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = swift_task_alloc();
  *(_QWORD *)(v5 + 16) = sub_1832BB660;
  *(_QWORD *)(v5 + 24) = v4;
  v3 += 4;
  os_unfair_lock_lock(v3);
  sub_18327FA4C(*(_QWORD *(**)(uint64_t *__return_ptr))(v5 + 16), v33);
  os_unfair_lock_unlock(v3);
  v6 = v33[0];
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  if (v6)
  {
    if (qword_1EDCDC590 != -1)
      swift_once();
    v8 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 96);
    v10 = *(_QWORD *)(v0 + 56);
    v11 = sub_183B915CC();
    __swift_project_value_buffer(v11, (uint64_t)qword_1EDCDDEE8);
    sub_183058C44(v10, v7, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
    sub_183058C44(v10, v8, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
    sub_183058C44(v10, v9, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
    v12 = sub_183B915B4();
    v13 = sub_183B91C80();
    v14 = os_log_type_enabled(v12, v13);
    v16 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 96);
    if (v14)
    {
      v18 = *(_QWORD *)(v0 + 88);
      v19 = swift_slowAlloc();
      v32 = swift_slowAlloc();
      v33[0] = v32;
      *(_DWORD *)v19 = 136315650;
      sub_183B914AC();
      sub_183064644(&qword_1EDCDD338, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v20 = sub_183B92088();
      *(_QWORD *)(v0 + 32) = sub_183273D70(v20, v21, v33);
      sub_183B91D1C();
      swift_bridgeObjectRelease();
      sub_183058AE0(v15, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
      *(_WORD *)(v19 + 12) = 2080;
      sub_183058C44(v16, v18, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
      v22 = sub_183B9174C();
      *(_QWORD *)(v0 + 40) = sub_183273D70(v22, v23, v33);
      sub_183B91D1C();
      swift_bridgeObjectRelease();
      sub_183058AE0(v16, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
      *(_WORD *)(v19 + 22) = 2080;
      sub_183B91710();
      *(_QWORD *)(v0 + 16) = sub_183B916EC();
      *(_QWORD *)(v0 + 24) = v24;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7AB8);
      v25 = sub_183B9174C();
      *(_QWORD *)(v0 + 48) = sub_183273D70(v25, v26, v33);
      sub_183B91D1C();
      swift_bridgeObjectRelease();
      sub_183058AE0(v17, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
      _os_log_impl(&dword_182FBE000, v12, v13, "Sending reply to [%s]: envelope: %s, data: %s", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v32, -1, -1);
      MEMORY[0x186DB563C](v19, -1, -1);
    }
    else
    {
      sub_183058AE0(*(_QWORD *)(v0 + 112), (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
      sub_183058AE0(v16, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
      sub_183058AE0(v17, (uint64_t (*)(_QWORD))type metadata accessor for ReplyEnvelope);
    }

    sub_183B912A8();
    swift_allocObject();
    sub_183B9129C();
    sub_183064644(&qword_1EDCDCFF0, (uint64_t (*)(uint64_t))type metadata accessor for ReplyEnvelope, (uint64_t)&unk_183BA6A40);
    v27 = sub_183B91284();
    v29 = v28;
    *(_QWORD *)(v0 + 120) = v27;
    *(_QWORD *)(v0 + 128) = v28;
    swift_release();
    v31 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v31;
    *v31 = v0;
    v31[1] = sub_1832B6D34;
    return sub_1832AFCCC(v27, v29, 2);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1832B6D34()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 144) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  sub_18308485C(*(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1832B6DE8()
{
  uint64_t v0;

  sub_18308485C(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832B6E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = (uint64_t *)(a1 + 88);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v6 = sub_1832F6944(a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  v8 = 0;
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v5;
    v14 = *v5;
    *v5 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1832FC56C();
      v10 = v14;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = sub_183B914AC();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v6, v12);
    v8 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v6);
    sub_1832B9C84(v6, v14);
    *v5 = v14;
    swift_bridgeObjectRelease();
  }
  *a3 = v8;
  return swift_endAccess();
}

uint64_t sub_1832B6F68(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession;
  if ((a1 & 1) != 0)
    v7 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession;
  else
    v7 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession;
  if (*(_QWORD *)(a2 + *v7))
  {
    v8 = qword_1EDCDC590;
    swift_retain();
    if (v8 != -1)
      swift_once();
    v9 = sub_183B915CC();
    __swift_project_value_buffer(v9, (uint64_t)qword_1EDCDDEE8);
    v10 = sub_183B915B4();
    v11 = sub_183B91C74();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_182FBE000, v10, v11, "Attempting to start file transfer when an active one exists", v12, 2u);
      MEMORY[0x186DB563C](v12, -1, -1);
    }

    return swift_release();
  }
  else
  {
    if (qword_1EDCDC590 != -1)
      swift_once();
    v18 = sub_183B915CC();
    __swift_project_value_buffer(v18, (uint64_t)qword_1EDCDDEE8);
    v19 = sub_183B915B4();
    v20 = sub_183B91C80();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v21 = 67109120;
      sub_183B91D1C();
      _os_log_impl(&dword_182FBE000, v19, v20, "Creating file transfer session, receiving: %{BOOL}d", v21, 8u);
      MEMORY[0x186DB563C](v21, -1, -1);
    }

    v22 = swift_allocObject();
    swift_weakInit();
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v22;
    *(_BYTE *)(v23 + 24) = a1 & 1;
    if ((a1 & 1) == 0)
      v6 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession;
    _s19FileTransferSessionCMa();
    swift_allocObject();
    v24 = sub_18327E818(a1 & 1, (uint64_t)sub_1832BADD4, v23);
    *(_QWORD *)(a2 + *v6) = v24;
    swift_retain();
    swift_release();
    v25 = *(_QWORD *)(v24 + 64);
    *(_QWORD *)(v24 + 64) = sub_1832BADE0;
    *(_QWORD *)(v24 + 72) = a2;
    swift_retain();
    sub_1830630AC(v25);
    objc_msgSend(*(id *)(v24 + 32), sel_prepare);
    sub_18327ECC8(a3, a4, a5, a6);
    return swift_release();
  }
}

uint64_t sub_1832B7284()
{
  uint64_t result;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    MEMORY[0x1E0C80A78](result);
    v2 = v1 + 4;
    os_unfair_lock_lock(v1 + 4);
    sub_183273D38(v3, sub_1832BAF48);
    os_unfair_lock_unlock(v2);
    return swift_release();
  }
  return result;
}

uint64_t sub_1832B733C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  uint64_t result;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1832BADE8(v4, a1, a2);
  v7 = v6;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
    swift_beginAccess();
    sub_1832B740C(v5);
    swift_endAccess();
    sub_18330B0BC(0);
    return swift_release();
  }
  return result;
}

uint64_t sub_1832B740C(unint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    sub_18328BD9C(v3);
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      sub_183B91944();
      return v10;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_1832B74EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  _QWORD *v50;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t (*v57)(char *);
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  id v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, _QWORD, uint64_t);
  char *v93;
  uint64_t v94;
  char *v95;
  void (*v96)(char *, uint64_t);
  void (*v97)(char *, uint64_t);
  _QWORD *v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  _QWORD v104[2];
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t (*v119)(char *, uint64_t, uint64_t);
  void (*v120)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v121;
  uint64_t v122;
  id v123[3];
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v7 = v6;
  v116 = a3;
  v110 = a2;
  v109 = a1;
  v112 = a5;
  v133 = *MEMORY[0x1E0C80C00];
  v113 = sub_183B91344();
  v107 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113);
  v111 = (char *)v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_183B913A4();
  v122 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v108 = (char *)v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v104 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)v104 - v20;
  MEMORY[0x1E0C80A78](v19);
  v117 = (char *)v104 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  v24 = MEMORY[0x1E0C80A78](v23);
  v25 = MEMORY[0x1E0C80A78](v24);
  v26 = MEMORY[0x1E0C80A78](v25);
  v28 = (char *)v104 - v27;
  v29 = MEMORY[0x1E0C80A78](v26);
  v30 = MEMORY[0x1E0C80A78](v29);
  v32 = (char *)v104 - v31;
  MEMORY[0x1E0C80A78](v30);
  v37 = (char *)v104 - v36;
  v38 = *(_QWORD *)(v5 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession);
  if (!v38)
  {
    if (qword_1EDCDC590 != -1)
      swift_once();
    v46 = sub_183B915CC();
    __swift_project_value_buffer(v46, (uint64_t)qword_1EDCDDEE8);
    v47 = sub_183B915B4();
    v48 = sub_183B91C74();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v49 = 0;
      _os_log_impl(&dword_182FBE000, v47, v48, "No receiving file transfer session", v49, 2u);
      MEMORY[0x186DB563C](v49, -1, -1);
    }

    sub_183274368();
    swift_allocError();
    *v50 = 0xD000000000000025;
    v50[1] = 0x8000000183C71860;
    v50[2] = 0x9000000000000000;
    return swift_willThrow();
  }
  v105 = v28;
  v106 = v35;
  v114 = v34;
  v115 = v33;
  v121 = v18;
  v104[1] = v7;
  v39 = *(void **)(v38 + 32);
  v118 = v38;
  swift_retain();
  v40 = objc_msgSend(v39, sel_temporaryDirectoryURL);
  if (v40)
  {
    v41 = v40;
    sub_183B91374();

    v42 = v122;
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v122 + 56);
    v44 = v32;
    v45 = 0;
  }
  else
  {
    v42 = v122;
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v122 + 56);
    v44 = v32;
    v45 = 1;
  }
  v120 = v43;
  v43((uint64_t)v44, v45, 1, v13);
  sub_1830630BC((uint64_t)v32, (uint64_t)v37, &qword_1EDCDC358);
  v119 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  v52 = v119(v37, 1, v13);
  sub_1830620D4((uint64_t)v37, &qword_1EDCDC358);
  v53 = v121;
  v54 = v118;
  if (v52 == 1)
  {
    sub_183062090(a4, (uint64_t)&v124, &qword_1EDCDDF28);
    sub_183058C44((uint64_t)v116, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    if (v125)
    {
      sub_183058AE0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      sub_183262D80(&v124, (uint64_t)&v126);
      v55 = v122;
      v56 = v117;
      goto LABEL_20;
    }
    swift_beginAccess();
    v57 = *(uint64_t (**)(char *))(v5 + 56);
    v55 = v122;
    if (v57)
    {
      swift_endAccess();
      swift_retain();
      v58 = (void *)v57(v12);
      v60 = v59;
      v61 = v118;
      sub_1830630AC((uint64_t)v57);
      sub_183058AE0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      if (v58)
      {
        v123[0] = v58;
        v123[1] = v60;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD420);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDF30);
        v62 = swift_dynamicCast();
        v56 = v117;
        if ((v62 & 1) == 0)
        {
          v128 = 0;
          v126 = 0u;
          v127 = 0u;
        }
LABEL_19:
        v54 = v61;
        sub_1830620D4((uint64_t)&v124, &qword_1EDCDDF28);
        v53 = v121;
        if (!*((_QWORD *)&v127 + 1))
        {
          sub_1830620D4((uint64_t)&v126, &qword_1EDCDDF28);
          v99 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
          v123[0] = 0;
          v100 = objc_msgSend(v99, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 13, 1, 0, 1, v123);

          v101 = v123[0];
          if (!v100)
          {
            v103 = v123[0];
            sub_183B91320();

            goto LABEL_35;
          }
          sub_183B91374();
          v102 = v101;

          goto LABEL_21;
        }
LABEL_20:
        sub_183262D80(&v126, (uint64_t)&v129);
        v63 = v131;
        v64 = v132;
        __swift_project_boxed_opaque_existential_2(&v129, v131);
        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v64);
        __swift_destroy_boxed_opaque_existential_2((uint64_t)&v129);
LABEL_21:
        v65 = v54;
        if (qword_1EDCDC590 != -1)
          swift_once();
        v66 = sub_183B915CC();
        __swift_project_value_buffer(v66, (uint64_t)qword_1EDCDDEE8);
        v116 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
        v116(v21, v56, v13);
        v67 = sub_183B915B4();
        v68 = sub_183B91C80();
        if (os_log_type_enabled(v67, v68))
        {
          v69 = (uint8_t *)swift_slowAlloc();
          v70 = swift_slowAlloc();
          v129 = v70;
          *(_DWORD *)v69 = 136315138;
          v104[0] = v69 + 4;
          sub_183064644(&qword_1EDCDD210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
          v71 = sub_183B92088();
          *(_QWORD *)&v126 = sub_183273D70(v71, v72, &v129);
          sub_183B91D1C();
          swift_bridgeObjectRelease();
          v73 = *(void (**)(char *, uint64_t))(v55 + 8);
          v53 = v121;
          v73(v21, v13);
          _os_log_impl(&dword_182FBE000, v67, v68, "Setting receive file transfer directory to %s", v69, 0xCu);
          swift_arrayDestroy();
          v74 = v70;
          v56 = v117;
          v54 = v118;
          MEMORY[0x186DB563C](v74, -1, -1);
          MEMORY[0x186DB563C](v69, -1, -1);

        }
        else
        {
          v73 = *(void (**)(char *, uint64_t))(v55 + 8);
          v73(v21, v13);

          v54 = v65;
        }
        v75 = v106;
        v116((char *)v106, v56, v13);
        v120(v75, 0, 1, v13);
        v76 = *(void **)(v54 + 32);
        v77 = (uint64_t)v105;
        sub_183062090(v75, (uint64_t)v105, &qword_1EDCDC358);
        if (v119((char *)v77, 1, v13) == 1)
        {
          v78 = 0;
        }
        else
        {
          v78 = (void *)sub_183B9135C();
          v73((char *)v77, v13);
        }
        objc_msgSend(v76, sel_setTemporaryDirectoryURL_, v78);

        sub_1830620D4(v75, &qword_1EDCDC358);
        sub_18327EE6C();
        v73(v56, v13);
        goto LABEL_30;
      }
    }
    else
    {
      v61 = v54;
      sub_183058AE0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      swift_endAccess();
    }
    v128 = 0;
    v126 = 0u;
    v127 = 0u;
    v56 = v117;
    goto LABEL_19;
  }
LABEL_30:
  v79 = objc_msgSend(*(id *)(v54 + 32), sel_temporaryDirectoryURL);
  if (v79)
  {
    v80 = v79;
    v81 = v114;
    sub_183B91374();

    v82 = 0;
    v83 = v122;
    v84 = v115;
  }
  else
  {
    v82 = 1;
    v83 = v122;
    v84 = v115;
    v81 = v114;
  }
  v120(v81, v82, 1, v13);
  sub_1830630BC(v81, v84, &qword_1EDCDC358);
  if (v119((char *)v84, 1, v13) == 1)
  {
    sub_1830620D4(v84, &qword_1EDCDC358);
    sub_183274368();
    swift_allocError();
    *v85 = 0xD00000000000002BLL;
    v85[1] = 0x8000000183C71890;
    v85[2] = 0x9000000000000000;
LABEL_35:
    swift_willThrow();
    return swift_release();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v53, v84, v13);
  v86 = objc_msgSend(*(id *)(v54 + 32), sel_targetID);
  if (v86)
  {
    v87 = v86;
    v88 = sub_183B916E0();
    v90 = v89;

    v129 = v88;
    v130 = v90;
    sub_183B917F4();
    v91 = v107;
    v92 = *(void (**)(char *, _QWORD, uint64_t))(v107 + 104);
    v93 = v111;
    v94 = v113;
    v92(v111, *MEMORY[0x1E0CAFD60], v113);
    sub_1832616B0();
    v95 = v108;
    sub_183B91398();
    v96 = *(void (**)(char *, uint64_t))(v91 + 8);
    v96(v93, v94);
    swift_bridgeObjectRelease();
    v129 = v109;
    v130 = v110;
    v92(v93, *MEMORY[0x1E0CAFD78], v94);
    sub_183B91398();
    swift_release();
    v96(v93, v94);
    v97 = *(void (**)(char *, uint64_t))(v122 + 8);
    v97(v95, v13);
    return ((uint64_t (*)(char *, uint64_t))v97)(v121, v13);
  }
  else
  {
    sub_183274368();
    swift_allocError();
    *v98 = 0xD00000000000001FLL;
    v98[1] = 0x8000000183C718C0;
    v98[2] = 0x9000000000000000;
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v53, v13);
  }
}

void sub_1832B815C()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1EDCDC590 != -1)
    swift_once();
  v0 = sub_183B915CC();
  __swift_project_value_buffer(v0, (uint64_t)qword_1EDCDDEE8);
  swift_retain_n();
  v1 = sub_183B915B4();
  v2 = sub_183B91C80();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v11 = v4;
    *(_DWORD *)v3 = 136315138;
    type metadata accessor for NWFile1(0);
    swift_retain();
    v5 = sub_183B9174C();
    sub_183273D70(v5, v6, &v11);
    sub_183B91D1C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_182FBE000, v1, v2, "Incoming file reported: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v4, -1, -1);
    MEMORY[0x186DB563C](v3, -1, -1);

  }
  else
  {

    v7 = swift_release_n();
  }
  MEMORY[0x1E0C80A78](v7);
  v9 = v8 + 4;
  os_unfair_lock_lock(v8 + 4);
  sub_183273D38(v10, sub_1832BA8AC);
  os_unfair_lock_unlock(v9);
}

uint64_t sub_1832B8368(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)(a1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_incomingFiles);
  swift_beginAccess();
  v2 = swift_retain();
  MEMORY[0x186DB1E20](v2);
  if (*(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_183B91968();
  sub_183B91998();
  sub_183B91944();
  return swift_endAccess();
}

void sub_1832B840C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  if (qword_1EDCDC590 != -1)
    swift_once();
  v4 = sub_183B915CC();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EDCDDEE8);
  swift_retain_n();
  v5 = sub_183B915B4();
  v6 = sub_183B91C80();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    type metadata accessor for NWFile1(0);
    swift_retain();
    v9 = sub_183B9174C();
    sub_183273D70(v9, v10, &v13);
    sub_183B91D1C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_182FBE000, v5, v6, "Outgoing file reported: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v8, -1, -1);
    MEMORY[0x186DB563C](v7, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v11 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 72) + 16);
  os_unfair_lock_lock(v11);
  sub_1832BA158(&v13);
  v12 = v13;
  os_unfair_lock_unlock(v11);
  if (v12)
  {
    swift_retain();
    sub_18327EE6C();
    swift_release();
    swift_retain();
    sub_18327EEF0(a1);
    swift_release_n();
  }
}

void sub_1832B8630(void (*a1)(_QWORD))
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  char v4;
  char v5;

  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 72) + 16);
  os_unfair_lock_lock(v3);
  sub_1832B8820(&v5);
  v4 = v5;
  os_unfair_lock_unlock(v3);
  if ((v4 & 1) != 0)
    a1(0);
}

uint64_t sub_1832B86BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v5 = OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_isDisconnected;
  if ((*(_BYTE *)(result + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_isDisconnected) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v9 = result;
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = a2;
    *(_QWORD *)(v10 + 24) = a3;
    v11 = (_QWORD **)(v9 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_interruptionHandlers);
    swift_beginAccess();
    v12 = *v11;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v11 = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v12 = sub_183242D48(0, v12[2] + 1, 1, v12);
      *v11 = v12;
    }
    v15 = v12[2];
    v14 = v12[3];
    if (v15 >= v14 >> 1)
    {
      v12 = sub_183242D48((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
      *v11 = v12;
    }
    v12[2] = v15 + 1;
    v16 = &v12[2 * v15];
    v16[4] = sub_18327BC84;
    v16[5] = v10;
    result = swift_endAccess();
    v6 = *(_BYTE *)(v9 + v5);
  }
  *a4 = v6;
  return result;
}

void sub_1832B8800(void (*a1)(_QWORD))
{
  sub_1832B8630(a1);
}

uint64_t sub_1832B8820@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_1832B86BC(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1832B883C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_18328467C;
  return v6(a1);
}

unint64_t sub_1832B88A0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_183B91D64();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_183B92250();
        sub_183B91740();
        swift_bridgeObjectRetain();
        sub_183B917C4();
        swift_bridgeObjectRelease();
        v10 = sub_183B9228C();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = v15 + 24 * v3;
          v17 = (__int128 *)(v15 + 24 * v6);
          if (24 * v3 < (uint64_t)(24 * v6) || v16 >= (unint64_t)v17 + 24 || (v18 = v3 == v6, v3 = v6, !v18))
          {
            v9 = *v17;
            *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)v16 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1832B8AB8(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;

  v4 = sub_183B91F44();
  v36 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_183B91D64();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v35 = (result + 1) & v11;
      v12 = *(_QWORD *)(v36 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v34(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = sub_183B91674();
        result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v35)
        {
          if (v19 >= v35 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v12 = v15;
              v13 = v17;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 32 * a1);
            v25 = (_OWORD *)(v23 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 2))
            {
              v26 = v25[1];
              *v24 = *v25;
              v24[1] = v26;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v35 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v27;
    v29 = (-1 << a1) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1832B8D40(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = type metadata accessor for NWActorID();
  v4 = *(_QWORD *)(v30 - 8);
  result = MEMORY[0x1E0C80A78](v30);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_183B91D64();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v28 = (result + 1) & v11;
      v29 = v11;
      v12 = *(_QWORD *)(v4 + 72);
      do
      {
        v13 = v12;
        v14 = v12 * v10;
        sub_183058C44(*(_QWORD *)(a2 + 48) + v12 * v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        sub_183B92250();
        sub_183B917C4();
        sub_183B914AC();
        sub_183064644((unint64_t *)&qword_1EDCDEC30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        sub_183B91680();
        v15 = sub_183B9228C();
        result = sub_183058AE0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        v16 = v29;
        v17 = v15 & v29;
        if (a1 >= (uint64_t)v28)
        {
          if (v17 < v28)
          {
            v12 = v13;
          }
          else
          {
            v12 = v13;
            if (a1 >= (uint64_t)v17)
              goto LABEL_12;
          }
        }
        else
        {
          v12 = v13;
          if (v17 >= v28 || a1 >= (uint64_t)v17)
          {
LABEL_12:
            v18 = *(_QWORD *)(a2 + 48);
            result = v18 + v12 * a1;
            if (v12 * a1 < v14 || result >= v18 + v14 + v12)
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_17:
              v16 = v29;
            }
            else if (v12 * a1 != v14)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_17;
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_QWORD *)(v19 + 8 * a1);
            v21 = (_QWORD *)(v19 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v20 >= v21 + 1))
            {
              *v20 = *v21;
              a1 = v10;
            }
          }
        }
        v10 = (v10 + 1) & v16;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v22 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v23 = *v22;
    v24 = (-1 << a1) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1832B900C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = type metadata accessor for NWActorID();
  v4 = *(_QWORD *)(v30 - 8);
  result = MEMORY[0x1E0C80A78](v30);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_183B91D64();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v28 = (result + 1) & v11;
      v29 = v11;
      v12 = *(_QWORD *)(v4 + 72);
      do
      {
        v13 = v12;
        v14 = v12 * v10;
        sub_183058C44(*(_QWORD *)(a2 + 48) + v12 * v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        sub_183B92250();
        sub_183B917C4();
        sub_183B914AC();
        sub_183064644((unint64_t *)&qword_1EDCDEC30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        sub_183B91680();
        v15 = sub_183B9228C();
        result = sub_183058AE0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        v16 = v29;
        v17 = v15 & v29;
        if (a1 >= (uint64_t)v28)
        {
          if (v17 < v28)
          {
            v12 = v13;
          }
          else
          {
            v12 = v13;
            if (a1 >= (uint64_t)v17)
              goto LABEL_12;
          }
        }
        else
        {
          v12 = v13;
          if (v17 >= v28 || a1 >= (uint64_t)v17)
          {
LABEL_12:
            v18 = *(_QWORD *)(a2 + 48);
            result = v18 + v12 * a1;
            if (v12 * a1 < v14 || result >= v18 + v14 + v12)
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_17:
              v16 = v29;
            }
            else if (v12 * a1 != v14)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_17;
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 16 * a1);
            v21 = (_OWORD *)(v19 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v20 >= v21 + 1))
            {
              *v20 = *v21;
              a1 = v10;
            }
          }
        }
        v10 = (v10 + 1) & v16;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v22 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v23 = *v22;
    v24 = (-1 << a1) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1832B92D8(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = type metadata accessor for NWActorID();
  v4 = *(_QWORD *)(v29 - 8);
  result = MEMORY[0x1E0C80A78](v29);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_183B91D64();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v28 = (result + 1) & v11;
      v12 = *(_QWORD *)(v4 + 72);
      v30 = v12;
      do
      {
        v13 = v12 * v10;
        sub_183058C44(*(_QWORD *)(a2 + 48) + v12 * v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        sub_183B92250();
        sub_183B917C4();
        sub_183B914AC();
        sub_183064644((unint64_t *)&qword_1EDCDEC30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        sub_183B91680();
        v14 = sub_183B9228C();
        result = sub_183058AE0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        v15 = v14 & v11;
        if (a1 >= (uint64_t)v28)
        {
          if (v15 < v28)
          {
            v12 = v30;
          }
          else
          {
            v12 = v30;
            if (a1 >= (uint64_t)v15)
              goto LABEL_12;
          }
        }
        else
        {
          v12 = v30;
          if (v15 >= v28 || a1 >= (uint64_t)v15)
          {
LABEL_12:
            if (v12 * a1 < v13
              || *(_QWORD *)(a2 + 48) + v12 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v13 + v12))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v12 * a1 != v13)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v16 = *(_QWORD *)(a2 + 56);
            v17 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for NWActorDiscoveryMechanism(0) - 8) + 72);
            v18 = v17 * a1;
            result = v16 + v17 * a1;
            v19 = v17 * v10;
            v20 = v16 + v17 * v10 + v17;
            if (v18 < v19 || result >= v20)
            {
              result = swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              v12 = v30;
            }
            else
            {
              a1 = v10;
              v12 = v30;
              if (v18 != v19)
              {
                result = swift_arrayInitWithTakeBackToFront();
                a1 = v10;
              }
            }
          }
        }
        v10 = (v10 + 1) & v11;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v22 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v23 = *v22;
    v24 = (-1 << a1) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1832B95E4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_183B91D64();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_183B92250();
        swift_bridgeObjectRetain();
        sub_183B917C4();
        v9 = sub_183B9228C();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for NWActorSystem.ServerRole() - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1832B97E0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_183B91D64();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = sub_183B92244();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11)
            goto LABEL_6;
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        v14 = (_QWORD *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1)
          *v14 = *v10;
        v15 = *(_QWORD *)(a2 + 56);
        v16 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110) - 8) + 72);
        v17 = v16 * v3;
        result = v15 + v16 * v3;
        v18 = v16 * v6;
        v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1832B99AC(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;

  v4 = sub_183B914AC();
  v37 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_183B91D64();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v36 = (result + 1) & v11;
      v12 = *(_QWORD *)(v37 + 72);
      v35 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v35(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_183064644((unint64_t *)&qword_1EDCDEC30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = sub_183B91674();
        result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v8 = v14;
            if (v15 * a1 < v16
              || *(_QWORD *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v22 = *(_QWORD *)(a2 + 56);
            v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0) - 8) + 72);
            v24 = v23 * a1;
            result = v22 + v23 * a1;
            v25 = v23 * v10;
            v26 = v22 + v23 * v10 + v23;
            if (v24 < v25 || result >= v26)
            {
              result = swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              v13 = v17;
            }
            else
            {
              a1 = v10;
              v13 = v17;
              if (v24 != v25)
              {
                result = swift_arrayInitWithTakeBackToFront();
                v13 = v17;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
        v12 = v15;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v28;
    v30 = (-1 << a1) - 1;
  }
  else
  {
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v28;
    v29 = (-1 << a1) - 1;
  }
  *v28 = v30 & v29;
  v31 = *(_QWORD *)(a2 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1832B9C84(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = sub_183B914AC();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_183B91D64();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_183064644((unint64_t *)&qword_1EDCDEC30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = sub_183B91674();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1832B9F24(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_183B91D64();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_183B92250();
        swift_bridgeObjectRetain();
        sub_183B917C4();
        v9 = sub_183B9228C();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_QWORD *sub_1832BA0F8@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1832BA134()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832BA158@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession);
  return swift_retain();
}

uint64_t sub_1832BA16C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[5];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD468);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[3] = &_s19FileTransferRequestVN;
  v20[4] = &off_1E148CFF0;
  v12 = (_OWORD *)swift_allocObject();
  v20[0] = v12;
  v13 = *(_OWORD *)(a1 + 16);
  v12[1] = *(_OWORD *)a1;
  v12[2] = v13;
  v12[3] = *(_OWORD *)(a1 + 32);
  v14 = sub_183B91A34();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v11, 1, 1, v14);
  v15 = swift_allocObject();
  swift_weakInit();
  sub_18324A894((uint64_t)v20, (uint64_t)v19);
  sub_183062090(a2, (uint64_t)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1EDCDD200);
  v16 = (*(unsigned __int8 *)(v7 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = v15;
  sub_183262D80(v19, v17 + 40);
  *(_BYTE *)(v17 + 80) = a3;
  sub_1830630BC((uint64_t)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, &qword_1EDCDD200);
  sub_1832BAD58((_QWORD *)a1);
  sub_1832AB2F4((uint64_t)v11, (uint64_t)&unk_1EDCDDFB8, v17);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v20);
}

uint64_t sub_1832BA344(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE v24[4];
  int v25;
  uint64_t v26;
  __int128 v27[2];
  uint64_t v28[5];

  v26 = a8;
  v25 = a3;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v12);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD468);
  MEMORY[0x1E0C80A78](v15);
  v17 = &v24[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v28[3] = a5(0);
  v28[4] = a6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v28);
  sub_183058C44(a1, (uint64_t)boxed_opaque_existential_0, a5);
  v19 = sub_183B91A34();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
  v20 = swift_allocObject();
  swift_weakInit();
  sub_18324A894((uint64_t)v28, (uint64_t)v27);
  sub_183062090(a2, (uint64_t)&v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], &qword_1EDCDD200);
  v21 = (*(unsigned __int8 *)(v13 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = v20;
  sub_183262D80(v27, v22 + 40);
  *(_BYTE *)(v22 + 80) = v25;
  sub_1830630BC((uint64_t)&v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v22 + v21, &qword_1EDCDD200);
  sub_1832AB2F4((uint64_t)v17, v26, v22);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v28);
}

uint64_t sub_1832BA50C(int a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v17[2];
  _DWORD v18[6];
  ValueMetadata *v19;
  _UNKNOWN **v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD468);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &_s17HandshakeResponseVN;
  v20 = &off_1E148F9F0;
  v18[0] = a1;
  v12 = sub_183B91A34();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = swift_allocObject();
  swift_weakInit();
  sub_18324A894((uint64_t)v18, (uint64_t)v17);
  sub_183062090(a2, (uint64_t)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1EDCDD200);
  v14 = (*(unsigned __int8 *)(v7 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = v13;
  sub_183262D80(v17, v15 + 40);
  *(_BYTE *)(v15 + 80) = a3;
  sub_1830630BC((uint64_t)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, &qword_1EDCDD200);
  sub_1832AB2F4((uint64_t)v11, (uint64_t)&unk_1EDCDDFD0, v15);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v18);
}

uint64_t sub_1832BA6B8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26[2];
  _QWORD v27[5];

  v25 = a6;
  v23 = a3;
  v24 = a5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD468);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[3] = &_s20FileTransferResponseVN;
  v27[4] = &off_1E148D120;
  v16 = (_QWORD *)swift_allocObject();
  v27[0] = v16;
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a4;
  v17 = sub_183B91A34();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 1, 1, v17);
  v18 = swift_allocObject();
  swift_weakInit();
  sub_18324A894((uint64_t)v27, (uint64_t)v26);
  sub_183062090(v24, (uint64_t)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1EDCDD200);
  v19 = (*(unsigned __int8 *)(v11 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 32) = v18;
  sub_183262D80(v26, v20 + 40);
  *(_BYTE *)(v20 + 80) = v25;
  sub_1830630BC((uint64_t)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, &qword_1EDCDD200);
  sub_18324A994(a1, a2);
  sub_18324A994(v23, a4);
  sub_1832AB2F4((uint64_t)v15, (uint64_t)&unk_1EDCDE028, v20);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v27);
}

uint64_t sub_1832BA8AC()
{
  uint64_t v0;

  return sub_1832B8368(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1832BA8C4(uint64_t a1)
{
  uint64_t v1;

  return sub_1832B07B8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1832BA8D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1832BA954(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630) - 8) + 80);
  return sub_1832B08D4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_1832BA998(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = swift_task_alloc();
  v5 = v1[1];
  v6 = v1[2];
  v7 = v1[3];
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_183246848;
  *(_OWORD *)(v4 + 72) = v7;
  *(_OWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch();
}

uint64_t sub_1832BAA0C()
{
  uint64_t v0;

  return sub_1832AEB1C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1832BAA24()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1832BAA4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = v1 + 40;
  v9 = v1 + ((v4 + 81) & ~v4);
  v10 = *(_BYTE *)(v1 + 80);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_183246848;
  return sub_1832AF588(a1, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1832BAAFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_183246848;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EDCDDF70 + dword_1EDCDDF70))(a1, v4);
}

uint64_t sub_1832BAB6C(uint64_t a1)
{
  return sub_1832BAC74(a1);
}

uint64_t sub_1832BAB80(uint64_t a1)
{
  uint64_t v1;

  return sub_1832AEC30(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1832BAB8C()
{
  uint64_t *v0;

  return sub_1832AF19C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1832BABAC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[5];
  v5 = v1[6];
  v6 = v1[7];
  v7 = v1[8];
  v8 = v1[9];
  v10 = v1[10];
  v9 = v1[11];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_183246848;
  return sub_1832ACC44(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1832BAC5C()
{
  uint64_t v0;

  return sub_1832AD710(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1832BAC74(uint64_t a1)
{
  uint64_t *v1;

  return sub_1832AD500(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1832BAC94()
{
  uint64_t v0;

  return sub_1832AD93C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1832BACAC(uint64_t a1)
{
  uint64_t v1;

  sub_1832AE4E8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_1832BACC8()
{
  unint64_t result;

  result = qword_1EDCDDFB0;
  if (!qword_1EDCDDFB0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1DEC, &_s17HandshakeResponseVN);
    atomic_store(result, (unint64_t *)&qword_1EDCDDFB0);
  }
  return result;
}

uint64_t sub_1832BAD0C()
{
  return sub_1832BB37C();
}

uint64_t sub_1832BAD20()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_18308485C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_18308485C(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return swift_deallocObject();
}

_QWORD *sub_1832BAD58(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  swift_bridgeObjectRetain();
  sub_18324A994(v2, v3);
  sub_18324A994(v4, v5);
  return a1;
}

uint64_t sub_1832BADB0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832BADD4()
{
  return sub_1832B7284();
}

uint64_t sub_1832BADE0(uint64_t a1, uint64_t a2)
{
  return sub_1832B733C(a1, a2);
}

uint64_t sub_1832BADE8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  char v10;
  uint64_t v11;

  if (a1 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v6)
  {
    for (i = 0; ; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x186DB230C](i, a1);
      else
        swift_retain();
      if (sub_183B91350() == a2 && v8 == a3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return i;
      }
      v10 = sub_183B920F4();
      swift_release();
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0)
        return i;
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if (v11 == v6)
        return 0;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v6 = sub_183B91F68();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_1832BAF48()
{
  uint64_t v0;
  uint64_t *v1;

  if (*(_BYTE *)(v0 + 16))
    v1 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession;
  else
    v1 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession;
  *(_QWORD *)(*(_QWORD *)(v0 + 24) + *v1) = 0;
  return swift_release();
}

uint64_t sub_1832BAF98()
{
  uint64_t v0;

  return sub_1832AE698(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1832BAFB4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1832BAFE0(unsigned int *a1)
{
  sub_1832ADA8C(a1);
}

void sub_1832BAFE8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  sub_1832B0F3C(a1, a2, a3, a4, a5);
}

uint64_t sub_1832BAFF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1832B645C(v1, a1);
}

uint64_t sub_1832BB00C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_handshakeCallID;
  swift_beginAccess();
  return sub_183062090(v3, a1, &qword_1EDCDD200);
}

uint64_t sub_1832BB074()
{
  uint64_t v0;

  return sub_1832B50E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1832BB08C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for RemoteCallEnvelope(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 40) & ~v2;
  swift_unknownObjectRelease();
  swift_release();
  v4 = v0 + v3;
  v5 = sub_183B914AC();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = v4 + *(int *)(v1 + 20);
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for NWActorID();
  v6(v7 + *(int *)(v8 + 20), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1832BB174(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RemoteCallEnvelope(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_183246848;
  return sub_1832B52F0(a1, v5, v6, v7, v8);
}

uint64_t sub_1832BB208(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_183243DAC;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_1832BB270(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_1832BB284(a1, a2, a3);
  return a1;
}

uint64_t sub_1832BB284(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_1832BB29C(void *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;

  switch(a3 >> 60)
  {
    case 2uLL:
      v3 = a3 & 0xFFFFFFFFFFFFFFFLL;
      sub_18308485C((uint64_t)a1, a2);
      a1 = (void *)v3;
      goto LABEL_4;
    case 3uLL:
LABEL_4:

      break;
    case 4uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t sub_1832BB2F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1832B655C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1832BB30C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1832BB324(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_1832BB30C(a1, a2, a3);
  return a1;
}

unint64_t sub_1832BB338()
{
  unint64_t result;

  result = qword_1EDCDE020;
  if (!qword_1EDCDE020)
  {
    result = MEMORY[0x186DB5558](&unk_183BA12BC, &_s19FileTransferRequestVN);
    atomic_store(result, (unint64_t *)&qword_1EDCDE020);
  }
  return result;
}

uint64_t sub_1832BB37C()
{
  uint64_t v0;

  return sub_1832B6F68(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1832BB3A0()
{
  uint64_t v0;

  sub_18308485C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_18308485C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t objectdestroy_16Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200) - 8) + 80);
  v2 = (v1 + 81) & ~v1;
  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_2(v0 + 40);
  v3 = sub_183B914AC();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  return swift_deallocObject();
}

uint64_t sub_1832BB480(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = v1 + 40;
  v9 = v1 + ((v4 + 81) & ~v4);
  v10 = *(_BYTE *)(v1 + 80);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_183243DAC;
  return sub_1832AF588(a1, v5, v6, v7, v8, v10, v9);
}

unint64_t sub_1832BB530()
{
  unint64_t result;

  result = qword_1EDCDE030;
  if (!qword_1EDCDE030)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1284, &_s20FileTransferResponseVN);
    atomic_store(result, (unint64_t *)&qword_1EDCDE030);
  }
  return result;
}

uint64_t sub_1832BB574@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;

  if (*(_BYTE *)(v1 + 16))
    v2 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession;
  else
    v2 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession;
  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + *v2);
  return swift_retain();
}

uint64_t sub_1832BB5A4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1832B6E5C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_1832BB5BC(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_isDisconnected);
}

uint64_t sub_1832BB5D0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1832AEA84(v1, a1);
}

uint64_t sub_1832BB5E8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_retain();
}

uint64_t sub_1832BB5F4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1832ACBCC(v1, a1);
}

uint64_t sub_1832BB60C()
{
  uint64_t v0;

  return sub_1832AB940(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1832BB638@<X0>(uint64_t a1@<X8>)
{
  return sub_1832BB2F4(a1);
}

uint64_t sub_1832BB64C()
{
  return sub_1832BAC94();
}

uint64_t sub_1832BB660@<X0>(_QWORD *a1@<X8>)
{
  return sub_1832BB5A4(a1);
}

uint64_t sub_1832BB674()
{
  nw_protocol_definition_t v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v0 = nw_protocol_copy_udp_definition();
  type metadata accessor for NWProtocolDefinition();
  v1 = (_QWORD *)swift_allocObject();
  v1[4] = v0;
  v2 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  v3 = sub_183B916E0();
  v5 = v4;

  result = swift_unknownObjectRelease();
  v1[2] = v3;
  v1[3] = v5;
  qword_1EDCDE040 = (uint64_t)v1;
  return result;
}

uint64_t static NWProtocolUDP.definition.getter()
{
  if (qword_1EDCDC5A8 != -1)
    swift_once();
  return swift_retain();
}

void sub_1832BB744(char a1)
{
  uint64_t v1;

  nw_udp_options_set_prefer_no_checksum(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_1832BB754()
{
  uint64_t v0;

  return nw_udp_options_get_prefer_no_checksum(*(void **)(v0 + 16));
}

void (*sub_1832BB76C(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_udp_options_get_prefer_no_checksum(v3);
  return sub_1832BB7A4;
}

void sub_1832BB7A4(uint64_t a1)
{
  nw_udp_options_set_prefer_no_checksum(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

BOOL sub_1832BB7B4(NSObject *a1)
{
  NSObject *v1;
  NSObject *v2;
  _BOOL8 is_equal;

  v1 = nw_protocol_options_copy_definition(a1);
  v2 = nw_protocol_copy_udp_definition();
  is_equal = nw_protocol_definition_is_equal(v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return is_equal;
}

uint64_t NWProtocolUDP.Options.__allocating_init()()
{
  return sub_1832BB870((uint64_t (*)(void))nw_udp_create_options);
}

uint64_t NWProtocolUDP.Options.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = nw_udp_create_options();
  return v0;
}

uint64_t NWProtocolUDP.Options.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

BOOL sub_1832BB850(NSObject *a1)
{
  return nw_protocol_metadata_is_udp(a1);
}

uint64_t NWProtocolUDP.Metadata.__allocating_init()()
{
  return sub_1832BB870((uint64_t (*)(void))nw_udp_create_metadata);
}

uint64_t sub_1832BB870(uint64_t (*a1)(void))
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1();
  return v2;
}

uint64_t NWProtocolUDP.Metadata.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = nw_udp_create_metadata();
  return v0;
}

uint64_t NWProtocolUDP.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t NWProtocolUDP.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL sub_1832BB8E4@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_udp_options_get_prefer_no_checksum(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_1832BB910(BOOL *a1, uint64_t a2)
{
  nw_udp_options_set_prefer_no_checksum(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

uint64_t type metadata accessor for NWProtocolUDP()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolUDP.Options()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolUDP.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolUDP.Options.preferNoChecksum.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of NWProtocolUDP.Options.preferNoChecksum.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of NWProtocolUDP.Options.preferNoChecksum.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of NWProtocolUDP.Options.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t type metadata accessor for NWProtocolUDP.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolUDP.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolUDP.Metadata.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1832BB9D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t sub_1832BB9EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1832BB9D4(a1, *(_QWORD *)(a2 + 16), a3);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 0, 1, a2);
}

uint64_t sub_1832BBA2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t NWDomainSequence.ScopedDomain.domain.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWDomainSequence.ScopedDomain.interface.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = v2;
  return sub_183058E80(v2);
}

uint64_t NWDomainSequence.ScopedDomain.hash(into:)()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v3;

  v1 = *(NSObject **)(v0 + 16);
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  if (v1 == 1)
    return sub_183B92268();
  sub_183B92268();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_183B9225C();
    v3 = swift_unknownObjectRetain();
    nw_interface_get_name(v3);
    sub_183B91800();
  }
  else
  {
    sub_183B9225C();
  }
  sub_183058B1C((uint64_t)v1);
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t NWDomainSequence.ScopedDomain.hashValue.getter()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;

  v1 = *(NSObject **)(v0 + 16);
  sub_183B92250();
  sub_183B917C4();
  if (v1 == 1)
  {
    sub_183B92268();
  }
  else
  {
    sub_183B92268();
    if (v1)
    {
      nw_interface_get_index(v1);
      sub_183B9225C();
      v2 = swift_unknownObjectRetain();
      nw_interface_get_name(v2);
      sub_183B91800();
    }
    else
    {
      sub_183B9225C();
    }
    sub_183058B1C((uint64_t)v1);
    sub_183B917C4();
    swift_bridgeObjectRelease();
  }
  return sub_183B9228C();
}

uint64_t sub_1832BBC64()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v3;

  v1 = *(NSObject **)(v0 + 16);
  sub_183B917C4();
  if (v1 == 1)
    return sub_183B92268();
  sub_183B92268();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_183B9225C();
    v3 = swift_unknownObjectRetain();
    nw_interface_get_name(v3);
    sub_183B91800();
  }
  else
  {
    sub_183B9225C();
  }
  sub_183058B1C((uint64_t)v1);
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832BBD40()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;

  v1 = *(NSObject **)(v0 + 16);
  sub_183B92250();
  sub_183B917C4();
  if (v1 == 1)
  {
    sub_183B92268();
  }
  else
  {
    sub_183B92268();
    if (v1)
    {
      nw_interface_get_index(v1);
      sub_183B9225C();
      v2 = swift_unknownObjectRetain();
      nw_interface_get_name(v2);
      sub_183B91800();
    }
    else
    {
      sub_183B9225C();
    }
    sub_183058B1C((uint64_t)v1);
    sub_183B917C4();
    swift_bridgeObjectRelease();
  }
  return sub_183B9228C();
}

uint64_t NWDomainSequence.Event.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return sub_1832BC770(v2, v3, v4);
}

uint64_t NWDomainSequence.Event.primary.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t NWDomainSequence.Event.moreComing.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 26);
}

void sub_1832BBE54(uint64_t a1, DNSServiceFlags a2, NSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint32_t index;
  DNSServiceErrorType v11;
  _DNSServiceRef_t *v12;
  id v13;
  _BOOL8 v14;
  NSObject *v15;
  _QWORD *v16;
  DNSServiceErrorType v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  DNSServiceRef sdRef[2];

  sdRef[1] = *(DNSServiceRef *)MEMORY[0x1E0C80C00];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE0B0);
  MEMORY[0x1E0C80A78](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v9 = (void *)sub_183B921B4();
  sdRef[0] = 0;
  if (a3 == 1)
  {
    index = 0;
  }
  else
  {
    if (!a3)
    {
      sub_183058B1C(0);
      sub_183B91F50();
      __break(1u);
      return;
    }
    index = nw_interface_get_index(a3);
  }
  v11 = DNSServiceEnumerateDomains(sdRef, a2, index, (DNSServiceDomainEnumReply)sub_1832BC060, v9);
  v12 = sdRef[0];
  if (sdRef[0])
  {
    v13 = nw_context_copy_implicit_context();
    v14 = nw_context_copy_workloop(v13);
    swift_unknownObjectRelease();
    v15 = (id)v14;
    DNSServiceSetDispatchQueue(v12, v15);
    v16 = (_QWORD *)swift_allocObject();
    v16[2] = v15;
    v16[3] = v12;
    v16[4] = v9;
    sub_183B91B24();

  }
  else
  {
    v17 = v11;
    swift_unknownObjectRelease();
    sub_18323C200();
    v18 = swift_allocError();
    *(_DWORD *)v19 = v17;
    *(_BYTE *)(v19 + 4) = 1;
    v20[1] = v18;
    sub_183B91B48();
  }
}

uint64_t sub_1832BC060(uint64_t a1, int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6)
{
  return sub_1832BD79C(a2, a3, a4, a5, a6);
}

uint64_t sub_1832BC078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  v6 = sub_183B915FC();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_183B91614();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a4;
  aBlock[4] = sub_1832BD778;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_18305665C;
  aBlock[3] = &block_descriptor_12;
  v16 = _Block_copy(aBlock);
  sub_183B91608();
  v18[1] = MEMORY[0x1E0DEE9D8];
  sub_183064644((unint64_t *)&qword_1ECD840F0, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD840D0);
  sub_1830622EC();
  sub_183B91D58();
  MEMORY[0x186DB21BC](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t NWDomainSequence.DomainIterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE050);
  *v1 = v0;
  v1[1] = sub_183243DAC;
  return sub_183B91B78();
}

uint64_t sub_1832BC2B0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE050);
  *v1 = v0;
  v1[1] = sub_183246848;
  return sub_183B91B78();
}

uint64_t sub_1832BC31C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v4[6] = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE050);
  *v5 = v4;
  v5[1] = sub_1832BC390;
  return sub_183B91B78();
}

uint64_t sub_1832BC390()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  if (*(_QWORD *)(v2 + 24))
  {
    swift_getObjectType();
    sub_183B919D4();
  }
  return swift_task_switch();
}

uint64_t sub_1832BC428()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD **)(v0 + 40);
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
  swift_willThrowTypedImpl();
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NWDomainSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE050);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE058);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v2, v8);
  sub_183B91A88();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, v4);
  return sub_1832BC798(v2);
}

uint64_t sub_1832BC590@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE050);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE058);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v2, v8);
  sub_183B91A88();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, v4);
  return sub_1832BC798(v2);
}

BOOL _s7Network16NWDomainSequenceV12ScopedDomainV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  NSObject *v2;
  NSObject *v3;
  BOOL v4;
  char v5;
  _BOOL8 result;
  char v7;
  nw_interface_t v8;
  nw_interface_t v9;

  v2 = a1[2];
  v3 = a2[2];
  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_183B920F4(), result = 0, (v5 & 1) != 0))
  {
    if (v2 == 1)
    {
      if (v3 == 1)
        return 1;
    }
    else
    {
      v9 = v2;
      if (v3 != 1)
      {
        v8 = v3;
        sub_183058E80((uint64_t)v2);
        swift_unknownObjectRetain();
        v7 = _s7Network11NWInterfaceV2eeoiySbAC_ACtFZ_0(&v9, &v8);
        swift_unknownObjectRelease();
        sub_183058B1C((uint64_t)v2);
        return (v7 & 1) != 0;
      }
      swift_unknownObjectRetain();
    }
    sub_183058E80((uint64_t)v3);
    sub_183058B1C((uint64_t)v2);
    sub_183058B1C((uint64_t)v3);
    return 0;
  }
  return result;
}

uint64_t sub_1832BC770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  return sub_183058E80(a3);
}

uint64_t sub_1832BC798(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NWDomainSequence(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for NWDomainSequence(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1EDCDE080);
}

unint64_t sub_1832BC7EC()
{
  unint64_t result;

  result = qword_1EDCDE060[0];
  if (!qword_1EDCDE060[0])
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWDomainSequence.ScopedDomain, &type metadata for NWDomainSequence.ScopedDomain);
    atomic_store(result, qword_1EDCDE060);
  }
  return result;
}

uint64_t sub_1832BC830()
{
  return MEMORY[0x1E0DEDB38];
}

uint64_t sub_1832BC83C()
{
  return sub_183064644(&qword_1EDCDE078, type metadata accessor for NWDomainSequence.DomainIterator, (uint64_t)&protocol conformance descriptor for NWDomainSequence.DomainIterator);
}

uint64_t type metadata accessor for NWDomainSequence.DomainIterator(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1EDCDE098);
}

uint64_t initializeBufferWithCopyOfBuffer for NWDomainSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE058);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for NWDomainSequence(uint64_t a1, uint64_t a2)
{
  return sub_1832BCFC0(a1, a2, &qword_1EDCDE058);
}

uint64_t initializeWithCopy for NWDomainSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832BD000(a1, a2, a3, &qword_1EDCDE058);
}

uint64_t assignWithCopy for NWDomainSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832BD050(a1, a2, a3, &qword_1EDCDE058);
}

uint64_t initializeWithTake for NWDomainSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832BD0A0(a1, a2, a3, &qword_1EDCDE058);
}

uint64_t assignWithTake for NWDomainSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832BD0F0(a1, a2, a3, &qword_1EDCDE058);
}

uint64_t getEnumTagSinglePayload for NWDomainSequence()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832BC904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_1EDCDE058);
}

uint64_t storeEnumTagSinglePayload for NWDomainSequence()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832BC91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_1EDCDE058);
}

void sub_1832BC928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1832BD1F4(a1, a2, a3, &qword_1EDCDE090, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t destroy for NWDomainSequence.ScopedDomain(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 16);
  if (result != 1)
    return swift_unknownObjectRelease();
  return result;
}

_QWORD *_s7Network16NWDomainSequenceV12ScopedDomainVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  swift_bridgeObjectRetain();
  if (v4 != 1)
    swift_unknownObjectRetain();
  a1[2] = v4;
  return a1;
}

_QWORD *assignWithCopy for NWDomainSequence.ScopedDomain(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a1 + 2;
  v5 = a2[2];
  if (a1[2] == 1)
  {
    if (v5 != 1)
    {
      *v4 = v5;
      swift_unknownObjectRetain();
      return a1;
    }
    v6 = 1;
  }
  else
  {
    if (v5 != 1)
    {
      *v4 = v5;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      return a1;
    }
    sub_18326212C((uint64_t)(a1 + 2));
    v6 = a2[2];
  }
  *v4 = v6;
  return a1;
}

_QWORD *assignWithTake for NWDomainSequence.ScopedDomain(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a1 + 2;
  v6 = a2[2];
  if (a1[2] != 1)
  {
    if (v6 != 1)
    {
      *v5 = v6;
      swift_unknownObjectRelease();
      return a1;
    }
    sub_18326212C((uint64_t)(a1 + 2));
    v6 = 1;
  }
  *v5 = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for NWDomainSequence.ScopedDomain(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWDomainSequence.ScopedDomain(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWDomainSequence.ScopedDomain()
{
  return &type metadata for NWDomainSequence.ScopedDomain;
}

uint64_t sub_1832BCB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRelease();
  return sub_183058B1C(a3);
}

uint64_t initializeWithCopy for NWDomainSequence.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1832BC770(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  return a1;
}

uint64_t assignWithCopy for NWDomainSequence.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1832BC770(*(_QWORD *)a2, v5, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  sub_1832BCB7C(v8, v9, v10);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

__n128 __swift_memcpy27_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NWDomainSequence.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  sub_1832BCB7C(v6, v7, v8);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWDomainSequence.Event(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 27))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWDomainSequence.Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 27) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 27) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWDomainSequence.Event()
{
  return &type metadata for NWDomainSequence.Event;
}

uint64_t destroy for NWDomainSequence.Event.EventType(uint64_t *a1)
{
  return sub_1832BCB7C(*a1, a1[1], a1[2]);
}

uint64_t initializeWithCopy for NWDomainSequence.Event.EventType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1832BC770(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for NWDomainSequence.Event.EventType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1832BC770(*(_QWORD *)a2, v4, v5);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  sub_1832BCB7C(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for NWDomainSequence.Event.EventType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  sub_1832BCB7C(v5, v7, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWDomainSequence.Event.EventType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWDomainSequence.Event.EventType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_1832BCF58(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NWDomainSequence.Event.EventType()
{
  return &type metadata for NWDomainSequence.Event.EventType;
}

uint64_t initializeBufferWithCopyOfBuffer for NWDomainSequence.DomainIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE050);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for NWDomainSequence.DomainIterator(uint64_t a1, uint64_t a2)
{
  return sub_1832BCFC0(a1, a2, &qword_1EDCDE050);
}

uint64_t sub_1832BCFC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t initializeWithCopy for NWDomainSequence.DomainIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832BD000(a1, a2, a3, &qword_1EDCDE050);
}

uint64_t sub_1832BD000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for NWDomainSequence.DomainIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832BD050(a1, a2, a3, &qword_1EDCDE050);
}

uint64_t sub_1832BD050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for NWDomainSequence.DomainIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832BD0A0(a1, a2, a3, &qword_1EDCDE050);
}

uint64_t sub_1832BD0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for NWDomainSequence.DomainIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832BD0F0(a1, a2, a3, &qword_1EDCDE050);
}

uint64_t sub_1832BD0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWDomainSequence.DomainIterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832BD140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_1EDCDE050);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for NWDomainSequence.DomainIterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832BD194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_1EDCDE050);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

void sub_1832BD1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1832BD1F4(a1, a2, a3, &qword_1EDCDE0A8, MEMORY[0x1E0DF0AB0]);
}

void sub_1832BD1F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, uint64_t, _QWORD))
{
  unint64_t v5;

  sub_1832BD264(319, a4, a5);
  if (v5 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1832BD264(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
    v7 = a3(a1, &type metadata for NWDomainSequence.Event, v6, MEMORY[0x1E0DEDB38]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1832BD2D0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1832BD33C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1832BD3AC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1832BD3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1832BD3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_1832BD41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_1832BD44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_1832BD47C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1832BD52C + 4 * byte_183BA3460[(v7 - 1)]))();
}

void sub_1832BD57C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for UncheckedSendable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UncheckedSendable);
}

uint64_t sub_1832BD738()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1832BD75C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1832BC078(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1832BD768()
{
  return swift_deallocObject();
}

uint64_t sub_1832BD778()
{
  uint64_t v0;

  DNSServiceRefDeallocate(*(DNSServiceRef *)(v0 + 16));
  return swift_unknownObjectRelease();
}

uint64_t sub_1832BD79C(int a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NWConcrete_nw_interface *v23;
  uint64_t v24;
  _BYTE v25[12];
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  char v32;

  v26 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE0B8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE0B0);
  v14 = *(_QWORD *)(v13 - 8);
  result = MEMORY[0x1E0C80A78](v13);
  v17 = &v25[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a5)
  {
    v27 = a5;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    if (a3)
    {
      sub_18323C200();
      v18 = swift_allocError();
      *(_DWORD *)v19 = a3;
      *(_BYTE *)(v19 + 4) = 1;
      v27 = v18;
      sub_183B91B48();
    }
    else if (a4)
    {
      v20 = sub_183B91800();
      v22 = v21;
      if (a2)
      {
        v23 = nw_interface_create_with_index(a2);
        if (v23)
          v24 = (uint64_t)v23;
        else
          v24 = 1;
      }
      else
      {
        v24 = 1;
      }
      v27 = v20;
      v28 = v22;
      v29 = v24;
      v30 = (v26 & 2) == 0;
      v31 = (v26 & 4) != 0;
      v32 = v26 & 1;
      swift_bridgeObjectRetain();
      sub_183058E80(v24);
      sub_183B91B3C();
      swift_bridgeObjectRelease();
      sub_183058B1C(v24);
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    }
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v14 + 8))(v17, v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1832BD988()
{
  uint64_t v0;
  uint64_t result;
  _OWORD v2[2];
  _BYTE v3[24];
  uint64_t v4;

  if (nw_framer_message_copy_object_value(*(nw_framer_message_t *)(v0 + 16), "WireMessageType"))
  {
    sub_183B91D40();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v2, 0, sizeof(v2));
  }
  sub_1832A4354((uint64_t)v2, (uint64_t)v3);
  if (v4)
  {
    result = swift_dynamicCast();
    if ((_DWORD)result)
      return LOBYTE(v2[0]);
  }
  else
  {
    sub_1832BE424((uint64_t)v3);
    return 0;
  }
  return result;
}

uint64_t sub_1832BDA2C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1832BDA60 + 4 * byte_183BA3630[a1]))(0x64696C61766E69, 0xE700000000000000);
}

uint64_t sub_1832BDA60()
{
  return 0x614365746F6D6572;
}

uint64_t sub_1832BDA7C()
{
  return 0x796C706572;
}

uint64_t sub_1832BDA90()
{
  return 0x6B616873646E6168;
}

unint64_t sub_1832BDAAC()
{
  return 0xD000000000000011;
}

unint64_t sub_1832BDAFC()
{
  return 0xD000000000000010;
}

uint64_t sub_1832BDB18()
{
  sub_183B92250();
  sub_183B92280();
  return sub_183B9228C();
}

uint64_t sub_1832BDB5C()
{
  return sub_183B92280();
}

uint64_t sub_1832BDB84()
{
  sub_183B92250();
  sub_183B92280();
  return sub_183B9228C();
}

uint64_t sub_1832BDBC4@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1832BE4E4(*a1);
  *a2 = result;
  return result;
}

void sub_1832BDBEC(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_1832BDBF8()
{
  unsigned __int8 *v0;

  return sub_1832BDA2C(*v0);
}

_QWORD *sub_1832BDC00()
{
  uint64_t v0;
  _QWORD *result;

  v0 = type metadata accessor for WireProtocol();
  type metadata accessor for NWProtocolFramer.Definition();
  swift_allocObject();
  result = NWProtocolFramer.Definition.init(implementation:)(v0, (uint64_t)&off_1E148F858);
  qword_1EDCF2A58 = (uint64_t)result;
  return result;
}

uint64_t _s7Network9TLVFramerCfD_0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WireProtocol()
{
  return objc_opt_self();
}

unint64_t sub_1832BDC80()
{
  return 0xD000000000000017;
}

uint64_t sub_1832BDC9C()
{
  swift_release();
  return swift_allocObject();
}

uint64_t sub_1832BDCC4(_BYTE *__src, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return sub_1832614E4(__src, &__src[a2]);
  sub_183B91308();
  swift_allocObject();
  sub_183B912CC();
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  sub_183B913EC();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_1832BDD70(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  void *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _BOOL4 v8;
  uint64_t result;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t inited;
  NSObject *message;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  _QWORD v21[4];
  _QWORD v23[3];
  uint64_t v24;
  _QWORD aBlock[3];
  ValueMetadata *v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  unint64_t v29;
  char v30;

  v1 = *(NSObject **)(a1 + 16);
  v2 = 8;
  while (1)
  {
    v29 = 0;
    v30 = 1;
    MEMORY[0x1E0C80A78](a1);
    v21[2] = 8;
    v21[3] = &v29;
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = sub_1832BE464;
    *(_QWORD *)(v5 + 24) = v21;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = sub_1832BE4C4;
    *(_QWORD *)(v6 + 24) = v5;
    v27 = sub_1832BE4DC;
    v28 = v6;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1832A4C04;
    v26 = (ValueMetadata *)&block_descriptor_13;
    v7 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    v8 = nw_framer_parse_input(v1, 8uLL, 8uLL, 0, v7);
    swift_unknownObjectRelease();
    _Block_release(v7);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((v7 & 1) != 0)
      break;
    if (!v8 || (v30 & 1) != 0)
      return v2;
    v10 = v29;
    if ((v29 & 0xFFFFFFF8) != 0)
      v11 = 0;
    else
      v11 = v29;
    if (qword_1EDCDC5B0 != -1)
      swift_once();
    v12 = qword_1EDCF2A58;
    type metadata accessor for NWProtocolFramer.Message();
    inited = swift_initStackObject();
    message = nw_framer_protocol_create_message(*(nw_protocol_definition_t *)(v12 + 32));
    *(_QWORD *)(inited + 16) = message;
    v26 = &type metadata for WireMessageType;
    LOBYTE(aBlock[0]) = v11;
    sub_1832A4248((uint64_t)aBlock, (uint64_t)v23);
    v15 = v24;
    if (v24)
    {
      v16 = __swift_project_boxed_opaque_existential_2(v23, v24);
      v17 = *(_QWORD *)(v15 - 8);
      MEMORY[0x1E0C80A78](v16);
      v19 = (char *)&v23[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v17 + 16))(v19);
      v3 = (void *)sub_183B920E8();
      v20 = *(void (**)(char *, uint64_t))(v17 + 8);
      swift_retain();
      v20(v19, v15);
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v23);
    }
    else
    {
      swift_retain();
      v3 = 0;
    }
    nw_framer_message_set_object_value(message, "WireMessageType", v3);
    swift_unknownObjectRelease();
    sub_1832BE424((uint64_t)aBlock);
    swift_release();
    v4 = nw_framer_deliver_input_no_copy(v1, HIDWORD(v10), *(nw_framer_message_t *)(inited + 16), 1);
    a1 = swift_unknownObjectRelease();
    if (!v4)
      return 0;
  }
  __break(1u);
  return result;
}

void sub_1832BE090(uint64_t a1, uint64_t a2, size_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD __src[2];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = sub_1832BD988();
  if ((a3 & 0x8000000000000000) != 0 || HIDWORD(a3))
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    LODWORD(__src[0]) = v5;
    v29 = a3;
    v30 = sub_1832614E4(__src, (_BYTE *)__src + 4);
    v31 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = sub_1832614E4(&v29, &v30);
    v9 = v8 & 0xFFFFFFFFFFFFFFLL;
    sub_183B91440();
    sub_18308485C(v7, v9);
    v10 = v30;
    v11 = v31;
    v12 = *(NSObject **)(a1 + 16);
    swift_unknownObjectRetain();
    v13 = (void *)sub_183B9141C();
    v15 = NWCreateDispatchDataFromNSData(v13, v14);

    if (!v15)
      __break(1u);
    nw_framer_write_output_data(v12, v15);
    swift_unknownObjectRelease();

    sub_18308485C(v10, v11);
    if (!nw_framer_write_output_no_copy(v12, a3))
    {
      sub_18323C200();
      v16 = (void *)swift_allocError();
      *(_DWORD *)v17 = 22;
      *(_BYTE *)(v17 + 4) = 0;
      swift_willThrow();
      if (qword_1EDCDC620 != -1)
        swift_once();
      v18 = sub_183B915CC();
      __swift_project_value_buffer(v18, (uint64_t)qword_1EDCF2A90);
      v19 = v16;
      v20 = v16;
      v21 = sub_183B915B4();
      v22 = sub_183B91C74();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        v24 = swift_slowAlloc();
        v30 = v24;
        *(_DWORD *)v23 = 136315138;
        __src[0] = v16;
        v25 = v16;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
        v26 = sub_183B9174C();
        __src[0] = sub_183273D70(v26, v27, &v30);
        sub_183B91D1C();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_182FBE000, v21, v22, "Hit error writing: %s", v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x186DB563C](v24, -1, -1);
        MEMORY[0x186DB563C](v23, -1, -1);

      }
      else
      {

      }
    }
  }
}

uint64_t sub_1832BE424(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7B90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1832BE464(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((a3 & 1) != 0)
    return 0;
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (v4 <= 0)
      goto LABEL_4;
    return 0;
  }
  if (a2 - a1 < v4)
    return 0;
LABEL_4:
  *(_QWORD *)v5 = sub_1832BE4F4(a1);
  *(_BYTE *)(v5 + 8) = 0;
  return v4;
}

uint64_t sub_1832BE4B4()
{
  return swift_deallocObject();
}

uint64_t sub_1832BE4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1832A4B88(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v3 + 16));
}

uint64_t sub_1832BE4CC()
{
  return swift_deallocObject();
}

uint64_t sub_1832BE4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1832A4BD4(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1832BE4E4(uint64_t result)
{
  if (result >= 8)
    return 8;
  else
    return result;
}

uint64_t sub_1832BE4F4(uint64_t a1)
{
  if (!a1)
    __break(1u);
  sub_183B91D1C();
  sub_183B91D1C();
  return 0;
}

uint64_t getEnumTagSinglePayload for WireMessageType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WireMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1832BE664 + 4 * byte_183BA363D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1832BE698 + 4 * byte_183BA3638[v4]))();
}

uint64_t sub_1832BE698(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832BE6A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832BE6A8);
  return result;
}

uint64_t sub_1832BE6B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1832BE6BCLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1832BE6C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832BE6C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WireMessageType()
{
  return &type metadata for WireMessageType;
}

unint64_t sub_1832BE6E8()
{
  unint64_t result;

  result = qword_1EDCDE0C0;
  if (!qword_1EDCDE0C0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA3710, &type metadata for WireMessageType);
    atomic_store(result, (unint64_t *)&qword_1EDCDE0C0);
  }
  return result;
}

uint64_t sub_1832BE72C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_getMetatypeMetadata();
  *a2 = sub_183B91734();
  a2[1] = v4;
  v5 = (char *)a2 + *(int *)(type metadata accessor for NWActorID() + 20);
  v6 = sub_183B914AC();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a1, v6);
}

uint64_t sub_1832BE7A0()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE110);
  swift_allocObject();
  result = sub_183B9234C();
  qword_1EDCF2A60 = result;
  return result;
}

uint64_t NWActorID.description.getter()
{
  sub_183B91DB8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  sub_183B917F4();
  type metadata accessor for NWActorID();
  sub_183B914AC();
  sub_183064644(&qword_1EDCDD338, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  sub_183B92088();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  sub_183B917F4();
  return 0x49726F746341574ELL;
}

uint64_t type metadata accessor for NWActorID()
{
  uint64_t result;

  result = qword_1EDCD7A88;
  if (!qword_1EDCD7A88)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t NWActorID.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  type metadata accessor for NWActorID();
  sub_183B914AC();
  sub_183064644((unint64_t *)&qword_1EDCDEC30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  return sub_183B91680();
}

uint64_t static NWActorID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (!v2 && (sub_183B920F4() & 1) == 0)
    return 0;
  type metadata accessor for NWActorID();
  return sub_183B9147C();
}

uint64_t sub_1832BEA30()
{
  _BYTE *v0;

  if (*v0)
    return 0x696669746E656469;
  else
    return 0x656D614E65707974;
}

uint64_t sub_1832BEA70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1832BF7C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1832BEA94()
{
  sub_1832BEC38();
  return sub_183B92334();
}

uint64_t sub_1832BEABC()
{
  sub_1832BEC38();
  return sub_183B92340();
}

uint64_t NWActorID.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE0C8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1832BEC38();
  sub_183B9231C();
  v8[15] = 0;
  sub_183B92058();
  if (!v1)
  {
    type metadata accessor for NWActorID();
    v8[14] = 1;
    sub_183B914AC();
    sub_183064644(&qword_1EDCDE0D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    sub_183B92064();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1832BEC38()
{
  unint64_t result;

  result = qword_1EDCDE0D0;
  if (!qword_1EDCDE0D0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA3914, &type metadata for NWActorID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDE0D0);
  }
  return result;
}

uint64_t NWActorID.hashValue.getter()
{
  sub_183B92250();
  sub_183B917C4();
  type metadata accessor for NWActorID();
  sub_183B914AC();
  sub_183064644((unint64_t *)&qword_1EDCDEC30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_183B91680();
  return sub_183B9228C();
}

uint64_t NWActorID.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v22 = a2;
  v4 = sub_183B914AC();
  v24 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  MEMORY[0x1E0C80A78](v4);
  v23 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE0E0);
  v6 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v9);
  v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1832BEC38();
  sub_183B922EC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  v20 = a1;
  v21 = v6;
  v12 = v11;
  v14 = v23;
  v13 = v24;
  v15 = v25;
  v16 = v26;
  v28 = 0;
  *v12 = sub_183B92004();
  v12[1] = v17;
  v27 = 1;
  sub_183064644(&qword_1EDCDE0E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  sub_183B92010();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v16);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))((char *)v12 + *(int *)(v9 + 20), v14, v15);
  sub_1832BF0E8((uint64_t)v12, v22);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v20);
  return sub_1832BF12C((uint64_t)v12);
}

uint64_t sub_1832BEF4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NWActorID.init(from:)(a1, a2);
}

uint64_t sub_1832BEF60(_QWORD *a1)
{
  return NWActorID.encode(to:)(a1);
}

uint64_t sub_1832BEF74()
{
  sub_183B92250();
  sub_183B917C4();
  sub_183B914AC();
  sub_183064644((unint64_t *)&qword_1EDCDEC30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_183B91680();
  return sub_183B9228C();
}

uint64_t sub_1832BEFF8()
{
  sub_183B917C4();
  sub_183B914AC();
  sub_183064644((unint64_t *)&qword_1EDCDEC30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  return sub_183B91680();
}

uint64_t sub_1832BF068()
{
  sub_183B92250();
  sub_183B917C4();
  sub_183B914AC();
  sub_183064644((unint64_t *)&qword_1EDCDEC30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_183B91680();
  return sub_183B9228C();
}

uint64_t sub_1832BF0E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NWActorID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1832BF12C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NWActorID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1832BF168()
{
  return sub_183064644(&qword_1EDCDE0F0, (uint64_t (*)(uint64_t))type metadata accessor for NWActorID, (uint64_t)&protocol conformance descriptor for NWActorID);
}

uint64_t sub_1832BF198(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (sub_183B920F4() & 1) != 0)
    return sub_183B9147C();
  else
    return 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for NWActorID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_183B914AC();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for NWActorID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_183B914AC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for NWActorID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_183B914AC();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for NWActorID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_183B914AC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for NWActorID(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_183B914AC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for NWActorID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_183B914AC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832BF4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_183B914AC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NWActorID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832BF534(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_183B914AC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1832BF5A8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_183B914AC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NWActorID.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1832BF668 + 4 * byte_183BA373D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1832BF69C + 4 * byte_183BA3738[v4]))();
}

uint64_t sub_1832BF69C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832BF6A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832BF6ACLL);
  return result;
}

uint64_t sub_1832BF6B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1832BF6C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1832BF6C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832BF6CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWActorID.CodingKeys()
{
  return &type metadata for NWActorID.CodingKeys;
}

unint64_t sub_1832BF6EC()
{
  unint64_t result;

  result = qword_1EDCDE0F8;
  if (!qword_1EDCDE0F8)
  {
    result = MEMORY[0x186DB5558](&unk_183BA38EC, &type metadata for NWActorID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDE0F8);
  }
  return result;
}

unint64_t sub_1832BF734()
{
  unint64_t result;

  result = qword_1EDCDE100;
  if (!qword_1EDCDE100)
  {
    result = MEMORY[0x186DB5558](&unk_183BA385C, &type metadata for NWActorID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDE100);
  }
  return result;
}

unint64_t sub_1832BF77C()
{
  unint64_t result;

  result = qword_1EDCDE108;
  if (!qword_1EDCDE108)
  {
    result = MEMORY[0x186DB5558](&unk_183BA3884, &type metadata for NWActorID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDE108);
  }
  return result;
}

uint64_t sub_1832BF7C0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D614E65707974 && a2 == 0xE800000000000000;
  if (v2 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_183B920F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

char *sub_1832BF8BC(char *result, char *a2)
{
  char **v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;
  char *v7;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  int64_t v19;
  char v20;
  unint64_t v21;
  int64_t v22;
  char *v23;
  char *v24;
  __int128 *v25;
  int64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  char v31;
  char *v32;
  char *v33;
  char *v34;

  v3 = *v2;
  v4 = *((_QWORD *)*v2 + 2);
  v5 = (int64_t)&a2[v4];
  if (__OFADD__(v4, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    if (result)
      v18 = result == a2;
    else
      v18 = 1;
    if (v18)
      goto LABEL_13;
    v19 = *((_QWORD *)v3 + 2);
    v20 = *result++;
    LOBYTE(v12) = v20;
    v6 = 16;
    while (1)
    {
      v21 = *((_QWORD *)v3 + 3);
      v14 = v21 >> 1;
      v22 = v19 + 1;
      if ((uint64_t)(v21 >> 1) < v19 + 1)
      {
        v34 = result;
        v32 = a2;
        v33 = sub_1832428E0((char *)(v21 > 1), v19 + 1, 1, v3);
        v22 = v19 + 1;
        a2 = v32;
        v3 = v33;
        result = v34;
        v14 = *((_QWORD *)v3 + 3) >> 1;
        if (v19 >= v14)
          goto LABEL_23;
      }
      else if (v19 >= v14)
      {
        goto LABEL_23;
      }
      v3[v19 + 32] = v12;
      if (result == a2)
      {
LABEL_41:
        *((_QWORD *)v3 + 2) = v22;
        goto LABEL_13;
      }
      v23 = (char *)(v14 + ~v19);
      if (v23 >= &a2[~(unint64_t)result])
        v23 = &a2[~(unint64_t)result];
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) > 0x10 && (unint64_t)(&v3[v19] - result + 33) >= 0x10)
      {
        v25 = (__int128 *)result;
        v26 = v24 & 0xF;
        if ((v24 & 0xF) == 0)
          v26 = v6;
        v27 = &v24[-v26];
        v22 += (int64_t)v27;
        result = &v27[(_QWORD)result];
        v28 = &v3[v19 + 33];
        do
        {
          v29 = *v25++;
          *(_OWORD *)v28 = v29;
          v28 += 16;
          v27 -= 16;
        }
        while (v27);
      }
      v30 = result++;
      while (1)
      {
        v31 = *v30++;
        LOBYTE(v12) = v31;
        if (v14 == v22)
          break;
        v3[v22++ + 32] = v12;
        ++result;
        if (v30 == a2)
          goto LABEL_41;
      }
LABEL_22:
      v19 = v14;
LABEL_23:
      *((_QWORD *)v3 + 2) = v19;
    }
  }
  v6 = (int64_t)a2;
  v7 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = *((_QWORD *)v3 + 3) >> 1, v9 < v5))
  {
    if (v4 <= v5)
      v10 = v5;
    else
      v10 = v4;
    v3 = sub_1832428E0(isUniquelyReferenced_nonNull_native, v10, 1, v3);
    v9 = *((_QWORD *)v3 + 3) >> 1;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = v9 - v11;
  result = sub_1832CE0E0(&v3[v11 + 32], v9 - v11, v7, v6);
  if (v13 < v6)
    goto LABEL_15;
  if (v13 >= 1)
  {
    v15 = *((_QWORD *)v3 + 2);
    v16 = __OFADD__(v15, v13);
    v17 = v15 + v13;
    if (v16)
    {
      __break(1u);
      goto LABEL_22;
    }
    *((_QWORD *)v3 + 2) = v17;
  }
  if (v13 == v12)
    goto LABEL_16;
LABEL_13:
  *v2 = v3;
  return result;
}

uint64_t sub_1832BFAD0(uint64_t result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if ((a2 & 0x1000000000000000) != 0)
  {
    result = sub_183B9180C();
    v3 = result;
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v3 = HIBYTE(a2) & 0xF;
  }
  else
  {
    v3 = result & 0xFFFFFFFFFFFFLL;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    *v2 = v4;
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || *((_QWORD *)v4 + 3) >> 1 < v6)
    {
      if (v5 <= v6)
        v8 = v5 + v3;
      else
        v8 = v5;
      v4 = sub_1832428E0(isUniquelyReferenced_nonNull_native, v8, 1, v4);
      *v2 = v4;
    }
    swift_bridgeObjectRetain();
    result = sub_183B91DC4();
    if ((v9 & 1) != 0)
      goto LABEL_22;
    v10 = result;
    result = swift_bridgeObjectRelease_n();
    if (v10 >= v3)
    {
      if (v10 < 1)
      {
LABEL_17:
        *v2 = v4;
        return result;
      }
      v11 = *((_QWORD *)v4 + 2);
      v12 = __OFADD__(v11, v10);
      v13 = v11 + v10;
      if (!v12)
      {
        *((_QWORD *)v4 + 2) = v13;
        goto LABEL_17;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1832BFBF8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_183242E54(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE120);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_183B91F98();
  __break(1u);
  return result;
}

_QWORD *sub_1832BFD6C(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = a3(&v6, a1, v4);
  if (!v3)
    return (_QWORD *)v6;
  return result;
}

uint64_t Connection1.__allocating_init(using:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  Connection1.init(using:)(a1);
  return v2;
}

uint64_t sub_1832BFDF4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

_QWORD *sub_1832BFDFC()
{
  uint64_t v0;
  _QWORD *result;

  v0 = type metadata accessor for TLVFramer();
  type metadata accessor for NWProtocolFramer.Definition();
  swift_allocObject();
  result = NWProtocolFramer.Definition.init(implementation:)(v0, (uint64_t)&protocol witness table for TLVFramer);
  qword_1EDCF2A68 = (uint64_t)result;
  return result;
}

uint64_t static TLVFramer.label.getter()
{
  return 5655636;
}

uint64_t TLVFramer.__allocating_init(framer:)()
{
  swift_release();
  return swift_allocObject();
}

uint64_t TLVFramer.init(framer:)()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t sub_1832BFE98(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = 0;
  if ((a3 & 1) == 0 && a1 && a2 - a1 >= 8)
  {
    sub_183B91D1C();
    *(_QWORD *)a5 = 0;
    *(_BYTE *)(a5 + 8) = 0;
    return 8;
  }
  return result;
}

uint64_t sub_1832BFF34()
{
  uint64_t v0;
  uint64_t result;
  _OWORD v2[2];
  _BYTE v3[24];
  uint64_t v4;

  if (nw_framer_message_copy_object_value(*(nw_framer_message_t *)(v0 + 16), "Type"))
  {
    sub_183B91D40();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v2, 0, sizeof(v2));
  }
  sub_1830630BC((uint64_t)v2, (uint64_t)v3, (uint64_t *)&unk_1EDCD7B90);
  if (v4)
  {
    result = swift_dynamicCast();
    if ((_DWORD)result)
      return LODWORD(v2[0]);
  }
  else
  {
    sub_1830620D4((uint64_t)v3, (uint64_t *)&unk_1EDCD7B90);
    return 0;
  }
  return result;
}

uint64_t TLVFramer.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1832BFFF0()
{
  return 5655636;
}

uint64_t sub_1832C0000()
{
  swift_release();
  type metadata accessor for TLVFramer();
  return swift_allocObject();
}

uint64_t static ProtocolStackBuilder.buildBlock(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16))(a1, a3, a6);
  if (a5)
  {
    v12 = (uint64_t *)(a7 & 0xFFFFFFFFFFFFFFFELL);
    do
    {
      v14 = *v12++;
      v13 = v14;
      v16 = *a2++;
      v15 = v16;
      v17 = *a4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v15, v17);
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t Configuration.init(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, nw_parameters_t *a8@<X8>)
{
  uint64_t v13;
  uint64_t TupleTypeMetadata;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  nw_parameters_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  int v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *boxed_opaque_existential_0;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t result;
  _OWORD *v57;
  __int128 *v58;
  unint64_t v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *);
  char **v65;
  char **v66;
  char **v67;
  uint64_t v68;
  char **v69;
  uint64_t v70;
  nw_parameters_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77[2];
  __int128 v78[3];
  uint64_t v79[4];
  char v80[8];
  _QWORD *v81;
  nw_parameters_t v82;

  v63 = a2;
  v64 = a1;
  v71 = a8;
  v62 = sub_183B922B0();
  v13 = *(_QWORD *)(v62 - 8);
  TupleTypeMetadata = MEMORY[0x1E0C80A78](v62);
  v61 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
    goto LABEL_8;
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v18 = (uint64_t *)((char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v18 = a4;
  if (a3 >= 6 && (unint64_t)v18 - v16 + 8 >= 0x20)
  {
    v19 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    v57 = v18 + 3;
    v58 = (__int128 *)(v16 + 16);
    v59 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v60 = *v58;
      *(v57 - 1) = *(v58 - 1);
      *v57 = v60;
      v57 += 2;
      v58 += 2;
      v59 -= 4;
    }
    while (v59);
    if (v19 == a3)
      goto LABEL_7;
  }
  else
  {
    v19 = 0;
  }
  v20 = a3 - v19;
  v21 = 8 * v19;
  v22 = &v18[v19 + 1];
  v23 = (uint64_t *)(v16 + v21);
  do
  {
    v24 = *v23++;
    *v22++ = v24;
    --v20;
  }
  while (v20);
LABEL_7:
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  a4 = TupleTypeMetadata;
LABEL_8:
  v72 = a5;
  v73 = a6;
  v69 = &v61;
  v74 = *(_QWORD *)(a4 - 8);
  v25 = MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v27 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = &v61;
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v61 - v29;
  v66 = &v61;
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v61 - v31;
  v33 = nw_parameters_create();
  v65 = &v61;
  v82 = v33;
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v61 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = a7;
  if (a3)
  {
    v36 = (int *)(a4 + 48);
    v37 = a3;
    v38 = v35;
    do
    {
      v39 = *v36;
      v36 += 4;
      *v38++ = &v32[v39];
      --v37;
    }
    while (v37);
    v40 = *(int *)(a4 + 32);
  }
  else
  {
    v40 = 0;
  }
  v64(&v32[v40]);
  v81 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v41 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
  v41(v30, v32, a4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE120);
  v42 = swift_dynamicCast();
  v68 = a4;
  if (!v42)
  {
    v79[3] = a4;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v79);
    v41((char *)boxed_opaque_existential_0, v32, a4);
    v49 = v61;
    sub_183B92298();
    sub_183B922A4();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v49, v62);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE128);
    v50 = sub_183B91F08();
    swift_release();
    v51 = *(_QWORD *)(v50 + 16);
    if (v51)
    {
      v52 = v50 + 32;
      v64 = (void (*)(char *))v50;
      swift_bridgeObjectRetain();
      v53 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        sub_183062090(v52, (uint64_t)v78, &qword_1EDCDE128);
        sub_1830630BC((uint64_t)v78, (uint64_t)&v75, &qword_1EDCDE128);
        if (v76)
        {
          sub_183262D80(&v75, (uint64_t)v77);
          sub_183262D80(v77, (uint64_t)&v75);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v53 = sub_183242E54(0, v53[2] + 1, 1, v53);
          v55 = v53[2];
          v54 = v53[3];
          if (v55 >= v54 >> 1)
            v53 = sub_183242E54((_QWORD *)(v54 > 1), v55 + 1, 1, v53);
          v53[2] = v55 + 1;
          sub_183262D80(&v75, (uint64_t)&v53[5 * v55 + 4]);
        }
        else
        {
          sub_1830620D4((uint64_t)&v75, &qword_1EDCDE128);
        }
        v52 += 40;
        --v51;
      }
      while (v51);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      v53 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    sub_1832BFBF8((uint64_t)v53);
    v43 = v81;
    v46 = v81[2];
    if (v46)
      goto LABEL_19;
LABEL_35:
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v80);
  v41(v27, v32, a4);
  swift_dynamicCast();
  v43 = v81;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v43 = sub_183242E54(0, v43[2] + 1, 1, v43);
  v45 = v43[2];
  v44 = v43[3];
  if (v45 >= v44 >> 1)
    v43 = sub_183242E54((_QWORD *)(v44 > 1), v45 + 1, 1, v43);
  v43[2] = v45 + 1;
  sub_183262D80(v78, (uint64_t)&v43[5 * v45 + 4]);
  v81 = v43;
  v46 = v43[2];
  if (!v46)
    goto LABEL_35;
LABEL_19:
  v47 = v43 + 4;
  swift_bridgeObjectRetain();
  do
  {
    sub_1832C0748(v47);
    v47 += 5;
    --v46;
  }
  while (v46);
  swift_bridgeObjectRelease_n();
LABEL_36:
  result = (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v32, v68);
  *v71 = v82;
  return result;
}

uint64_t sub_1832C0748(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  v1 = a1[3];
  v2 = a1[4];
  __swift_project_boxed_opaque_existential_2(a1, v1);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 8);
  v4 = swift_unknownObjectRetain();
  v3(v4, v1, v2);
  return swift_unknownObjectRelease();
}

uint64_t Configuration.requiredInterface(_:)@<X0>(NSObject **a1@<X0>, NSObject **a2@<X8>)
{
  NSObject **v2;
  NSObject *v4;
  NSObject *v5;

  v4 = *a1;
  v5 = *v2;
  if ((unint64_t)*a1 >= 2)
    swift_unknownObjectRetain();
  else
    v4 = 0;
  nw_parameters_require_interface(v5, v4);
  swift_unknownObjectRelease();
  *a2 = v5;
  return swift_unknownObjectRetain();
}

uint64_t Configuration.requiredInterfaceType(_:)@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1832C0BEC(a1, (void (*)(uint64_t, _QWORD))nw_parameters_set_required_interface_type, a2);
}

uint64_t Configuration.requiredInterfaceSubtype(_:)@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  void **v2;
  void *v4;

  v4 = *v2;
  nw_parameters_set_required_interface_subtype(v4, dword_183BA40F8[*a1]);
  *a2 = v4;
  return swift_unknownObjectRetain();
}

void Configuration.prohibitedInterfaces(_:)(uint64_t a1@<X0>, NSObject **a2@<X8>)
{
  nw_parameters_t *v2;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;

  v5 = *v2;
  nw_parameters_clear_prohibited_interfaces(*v2);
  if (!a1 || (v6 = *(_QWORD *)(a1 + 16)) == 0)
  {
LABEL_9:
    *a2 = v5;
    swift_unknownObjectRetain();
    return;
  }
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    v8 = *(NSObject **)(a1 + 8 * v7 + 32);
    if (v8 != 1)
      break;
LABEL_4:
    if (v6 == ++v7)
    {
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
  }
  if (v8)
  {
    nw_parameters_prohibit_interface(v5, v8);
    goto LABEL_4;
  }
  __break(1u);
}

uint64_t Configuration.prohibitedInterfaceTypes(_:)@<X0>(uint64_t a1@<X0>, NSObject **a2@<X8>)
{
  nw_parameters_t *v2;
  NSObject *v5;
  uint64_t v6;
  uint64_t i;
  nw_interface_type_t v8;

  v5 = *v2;
  nw_parameters_clear_prohibited_interface_types(*v2);
  if (a1)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v6; ++i)
      {
        v8 = *(unsigned __int8 *)(a1 + i + 32);
        nw_parameters_prohibit_interface_type(v5, v8);
      }
      swift_bridgeObjectRelease();
    }
  }
  *a2 = v5;
  return swift_unknownObjectRetain();
}

uint64_t Configuration.prohibitedInterfaceSubtypes(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void **v2;
  void *v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;

  v5 = *v2;
  v6 = xpc_array_create(0, 0);
  if (a1)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      swift_bridgeObjectRetain();
      v8 = 0;
      do
      {
        v9 = *(char *)(a1 + v8++ + 32);
        v10 = xpc_uint64_create(qword_183BA4110[v9]);
        xpc_array_append_value(v6, v10);
        swift_unknownObjectRelease();
      }
      while (v7 != v8);
      swift_bridgeObjectRelease();
    }
  }
  nw_parameters_set_prohibited_interface_subtypes(v5, v6);
  swift_unknownObjectRelease();
  *a2 = v5;
  return swift_unknownObjectRetain();
}

uint64_t Configuration.prohibitExpensivePaths(_:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1832C0BAC(a1, (void (*)(uint64_t, _QWORD))nw_parameters_set_prohibit_expensive, a2);
}

uint64_t Configuration.prohibitConstrainedPaths(_:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1832C0BAC(a1, (void (*)(uint64_t, _QWORD))nw_parameters_set_prohibit_constrained, a2);
}

uint64_t Configuration.preferNoProxies(_:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1832C0BAC(a1, (void (*)(uint64_t, _QWORD))nw_parameters_set_prefer_no_proxy, a2);
}

uint64_t Configuration.localEndpoint(_:)@<X0>(uint64_t a1@<X0>, NSObject **a2@<X8>)
{
  NSObject **v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  sub_183062090(a1, (uint64_t)v7, qword_1ECD84160);
  v9 = type metadata accessor for NWEndpoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) == 1)
  {
    sub_1830620D4((uint64_t)v7, qword_1ECD84160);
    v10 = 0;
  }
  else
  {
    NWEndpoint.nw.getter();
    v10 = v11;
    sub_183261738((uint64_t)v7);
  }
  nw_parameters_set_local_endpoint(v8, v10);
  swift_unknownObjectRelease();
  *a2 = v8;
  return swift_unknownObjectRetain();
}

uint64_t Configuration.allowLocalEndpointReuse(_:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1832C0BAC(a1, (void (*)(uint64_t, _QWORD))nw_parameters_set_reuse_local_address, a2);
}

uint64_t Configuration.localOnly(_:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1832C0BAC(a1, (void (*)(uint64_t, _QWORD))nw_parameters_set_local_only, a2);
}

uint64_t Configuration.includePeerToPeer(_:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1832C0BAC(a1, (void (*)(uint64_t, _QWORD))nw_parameters_set_include_peer_to_peer, a2);
}

uint64_t Configuration.requiresDNSSECValidation(_:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1832C0BAC(a1, (void (*)(uint64_t, _QWORD))nw_parameters_set_requires_dnssec_validation, a2);
}

uint64_t Configuration.serviceClass(_:)@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1832C0BEC(a1, (void (*)(uint64_t, _QWORD))nw_parameters_set_service_class, a2);
}

uint64_t Configuration.multipathServiceType(_:)@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1832C0BEC(a1, (void (*)(uint64_t, _QWORD))nw_parameters_set_multipath_service, a2);
}

uint64_t Configuration.allowFastOpen(_:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1832C0BAC(a1, (void (*)(uint64_t, _QWORD))nw_parameters_set_fast_open_enabled, a2);
}

uint64_t sub_1832C0BAC@<X0>(char a1@<W0>, void (*a2)(uint64_t, _QWORD)@<X2>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  a2(v5, a1 & 1);
  *a3 = v5;
  return swift_unknownObjectRetain();
}

uint64_t Configuration.expiredDNSBehavior(_:)@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1832C0BEC(a1, (void (*)(uint64_t, _QWORD))nw_parameters_set_expired_dns_behavior, a2);
}

uint64_t sub_1832C0BEC@<X0>(unsigned __int8 *a1@<X0>, void (*a2)(uint64_t, _QWORD)@<X2>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  a2(v5, *a1);
  *a3 = v5;
  return swift_unknownObjectRetain();
}

uint64_t sub_1832C0C20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = sub_183B91AA0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - v6;
  v8 = sub_183B91AAC();
  sub_183B91A88();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

uint64_t AsyncProperty.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  sub_183B91AA0();
  *v1 = v0;
  v1[1] = sub_183243DAC;
  return sub_183B91A94();
}

uint64_t sub_1832C0D3C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18328467C;
  return AsyncProperty.Iterator.next()();
}

uint64_t sub_1832C0D9C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1832C0E20;
  return sub_183B91A1C();
}

uint64_t sub_1832C0E20()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t AsyncProperty.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v2 = sub_183B91A58();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v10 - v4);
  v6 = sub_183B91AAC();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v10 - v7;
  *v5 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DF07A8], v2);
  sub_183B91AB8();
  swift_release();
  return sub_1832C0C20((uint64_t)v8, a1);
}

uint64_t sub_1832C0F78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v0 = sub_183B91C98();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_183B91C8C();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = sub_183B91614();
  MEMORY[0x1E0C80A78](v6);
  sub_1832467E0();
  sub_183B91608();
  v8[1] = MEMORY[0x1E0DEE9D8];
  sub_183064644(&qword_1EDCDD300, v5, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE770);
  sub_1832D133C((unint64_t *)&qword_1EDCDD308, &qword_1EDCDE770);
  sub_183B91D58();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v0);
  result = sub_183B91CBC();
  qword_1EDCF2A70 = result;
  return result;
}

uint64_t Connection1.__allocating_init(to:using:)(uint64_t a1, NSObject **a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  Connection1.init(to:using:)(a1, a2);
  return v4;
}

uint64_t Connection1.init(to:using:)(uint64_t a1, NSObject **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  nw_parameters_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = v2;
  v6 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a2;
  *(_QWORD *)(v3 + 24) = MEMORY[0x1E0DEE9E8];
  NWEndpoint.nw.getter();
  if (v10)
  {
    v11 = v10;
    if (nw_endpoint_get_type(v10) == nw_endpoint_type_url)
    {
      v12 = (void *)swift_unknownObjectRetain();
      nw_parameters_set_url_endpoint(v12, v11);
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
  }
  sub_1832616F4(a1, (uint64_t)v8);
  v13 = nw_parameters_copy(v9);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  v14 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v15 = swift_allocObject();
  *(_DWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v14 + 16) = v15;
  type metadata accessor for NWConnection(0);
  swift_allocObject();
  sub_1832D6584((uint64_t)v8, v14);
  v17 = v16;
  swift_release();
  *(_QWORD *)(v3 + 16) = v17;
  swift_retain();
  swift_retain();
  sub_183061488((uint64_t)sub_1832CEF2C);
  NWConnection.stateUpdateHandler.setter((uint64_t)sub_1832CEF2C, v3);
  swift_release();
  swift_release();
  if (qword_1EDCDC5C8 != -1)
    swift_once();
  NWConnection.start(queue:)((void *)qword_1EDCF2A70);
  sub_183261738(a1);
  return v3;
}

uint64_t Connection1.init(using:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = v2;
  swift_retain_n();
  swift_retain();
  sub_183061488((uint64_t)sub_1832CEF2C);
  NWConnection.stateUpdateHandler.setter((uint64_t)sub_1832CEF2C, v1);
  swift_release();
  swift_release();
  v3 = qword_1EDCDC5C8;
  swift_retain();
  if (v3 != -1)
    swift_once();
  NWConnection.start(queue:)((void *)qword_1EDCF2A70);
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1832C1410(unsigned int *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  __int128 v21[2];
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[40];

  v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  swift_beginAccess();
  v4 = *(_QWORD *)(a2 + 24);
  v18 = v4 + 56;
  v5 = 1 << *(_BYTE *)(v4 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v4 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  if (v7)
    goto LABEL_6;
LABEL_7:
  v13 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v13 < v8)
    {
      v14 = *(_QWORD *)(v18 + 8 * v13);
      ++v10;
      if (v14)
        goto LABEL_20;
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        return swift_release();
      v14 = *(_QWORD *)(v18 + 8 * v10);
      if (v14)
        goto LABEL_20;
      v10 = v13 + 2;
      if (v13 + 2 >= v8)
        return swift_release();
      v14 = *(_QWORD *)(v18 + 8 * v10);
      if (v14)
      {
LABEL_20:
        v7 = (v14 - 1) & v14;
        for (i = __clz(__rbit64(v14)) + (v10 << 6); ; i = v11 | (v10 << 6))
        {
          sub_1832D12D4(*(_QWORD *)(v4 + 48) + 40 * i, (uint64_t)v26);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE748);
          if ((swift_dynamicCast() & 1) != 0)
          {
            sub_183262D80(v21, (uint64_t)v23);
            v16 = v24;
            v17 = v25;
            __swift_project_boxed_opaque_existential_2(v23, v24);
            v20 = BYTE4(v3);
            v19 = v3;
            (*(void (**)(int *, uint64_t, uint64_t))(v17 + 8))(&v19, v16, v17);
            result = __swift_destroy_boxed_opaque_existential_2((uint64_t)v23);
            if (!v7)
              goto LABEL_7;
          }
          else
          {
            v22 = 0;
            memset(v21, 0, sizeof(v21));
            result = sub_1830620D4((uint64_t)v21, (uint64_t *)&unk_1EDCDE750);
            if (!v7)
              goto LABEL_7;
          }
LABEL_6:
          v11 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      v15 = v13 + 3;
      if (v15 < v8)
      {
        v14 = *(_QWORD *)(v18 + 8 * v15);
        if (v14)
        {
          v10 = v15;
          goto LABEL_20;
        }
        while (1)
        {
          v10 = v15 + 1;
          if (__OFADD__(v15, 1))
            goto LABEL_26;
          if (v10 >= v8)
            return swift_release();
          v14 = *(_QWORD *)(v18 + 8 * v10);
          ++v15;
          if (v14)
            goto LABEL_20;
        }
      }
    }
    return swift_release();
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t Connection1.deinit()
{
  uint64_t v0;

  nw_connection_cancel(*(nw_connection_t *)(*(_QWORD *)(v0 + 16) + 16));
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Connection1.__deallocating_deinit()
{
  Connection1.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1832C16A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v11 - v8;
  (*(void (**)(char *))(v4 + 16))(v7);
  swift_beginAccess();
  sub_183B91BA8();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, a3);
}

uint64_t sub_1832C177C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t WitnessTablePack;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[6];

  v32 = a6;
  v33 = a7;
  v28[1] = a5;
  v29 = a3;
  v30 = a4;
  v10 = (_QWORD *)*v7;
  v11 = sub_183B915FC();
  v36 = *(_QWORD *)(v11 - 8);
  v37 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_183B91614();
  v34 = *(_QWORD *)(v14 - 8);
  v35 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a2 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x1E0C80A78](v15);
  v20 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EDCDC5C8 != -1)
    swift_once();
  v31 = qword_1EDCF2A70;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  v21 = (*(unsigned __int8 *)(v18 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v22 = (char *)swift_allocObject();
  *((_QWORD *)v22 + 2) = v10[10];
  *((_QWORD *)v22 + 3) = v10[11];
  *((_QWORD *)v22 + 4) = swift_allocateMetadataPack();
  *((_QWORD *)v22 + 5) = a2;
  *((_QWORD *)v22 + 6) = v10[13];
  WitnessTablePack = swift_allocateWitnessTablePack();
  v24 = v29;
  *((_QWORD *)v22 + 7) = WitnessTablePack;
  *((_QWORD *)v22 + 8) = v24;
  *((_QWORD *)v22 + 9) = v30;
  *((_QWORD *)v22 + 10) = v7;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v22[v21], v20, a2);
  aBlock[4] = v32;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_18305665C;
  aBlock[3] = v33;
  v25 = _Block_copy(aBlock);
  swift_retain();
  sub_183B91608();
  v38 = MEMORY[0x1E0DEE9D8];
  sub_183064644((unint64_t *)&qword_1ECD840F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD840D0);
  sub_1832D133C((unint64_t *)&qword_1ECD840E0, (uint64_t *)&unk_1ECD840D0);
  v26 = v37;
  sub_183B91D58();
  MEMORY[0x186DB21BC](0, v17, v13, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v26);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v35);
  return swift_release();
}

uint64_t sub_1832C1A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = sub_183B91CF8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - v2;
  swift_beginAccess();
  sub_183B91BB4();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

BOOL static SendProgress.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_1832C1B18()
{
  return sub_183B9225C();
}

uint64_t sub_1832C1B40@<X0>(uint64_t a1@<X8>)
{
  return sub_1832C53E4(&qword_1EDCDE150, &qword_1EDCDE158, a1);
}

uint64_t sub_1832C1B54(uint64_t a1)
{
  return sub_1832C5454(a1, &qword_1EDCDE150, &qword_1EDCDE158);
}

uint64_t sub_1832C1B68@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (uint64_t *)(v1 + qword_1EDCDE160);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v9 = v3[4];
  v8 = v3[5];
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v9;
  a1[5] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_1832C1C00(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + qword_1EDCDE498);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(v1 + qword_1EDCDE498 + 4);
  *(_DWORD *)a1 = v2;
}

int *sub_1832C1C20(int *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v2 = *result;
  v3 = v1 + qword_1EDCDE498;
  *(_BYTE *)(v3 + 4) = *((_BYTE *)result + 4);
  *(_DWORD *)v3 = v2;
  return result;
}

void SendProgress.deinit()
{
  type metadata accessor for SendProgress();
}

uint64_t sub_1832C1C8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v3 = MEMORY[0x186DB5558](&protocol conformance descriptor for SendProgress<A, Pack{repeat B}>, a1);
  sub_1832C177C((uint64_t)&v5, a1, (uint64_t)&protocol witness table for SendProgress<A, Pack{repeat B}>, v3, (uint64_t)&unk_1E1498008, (uint64_t)sub_1832D12A0, (uint64_t)&block_descriptor_316);
  swift_release();
  sub_1830620D4(v1 + qword_1EDCDE150, &qword_1EDCDE158);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

void SendProgress.__deallocating_deinit()
{
  sub_18329AC28((void (*)(void))SendProgress.deinit);
}

unsigned int *sub_1832C1D5C(unsigned int *result)
{
  unint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  char v5;

  v1 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32);
  v2 = *((unsigned __int8 *)result + 4) >> 6;
  if (v2)
  {
    if (v2 == 1)
    {
      v4 = *result;
      v5 = (v1 & 0x3FFFFFFFFFLL | 0x4000000000) >> 32;
    }
    else
    {
      if (v2 != 2)
        return result;
      if (v1 == 0x8000000001)
      {
        v5 = 0x80;
        v3 = 1;
      }
      else
      {
        if (v1 != 0x8000000002)
          return result;
        v5 = 0x80;
        v3 = 2;
      }
      v4 = v3;
    }
  }
  else
  {
    v4 = *result;
    v5 = BYTE4(v1);
  }
  return (unsigned int *)sub_1832C1E08(&v4);
}

uint64_t sub_1832C1E08(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[2];
  _QWORD aBlock[6];

  v3 = sub_183B915FC();
  v14[0] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_183B91614();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  if (qword_1EDCDC5C8 != -1)
    swift_once();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v1;
  *(_BYTE *)(v11 + 28) = BYTE4(v10);
  *(_DWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_1832D121C;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_18305665C;
  aBlock[3] = &block_descriptor_310;
  v12 = _Block_copy(aBlock);
  swift_retain();
  sub_183B91608();
  v14[1] = MEMORY[0x1E0DEE9D8];
  sub_183064644((unint64_t *)&qword_1ECD840F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD840D0);
  sub_1832D133C((unint64_t *)&qword_1ECD840E0, (uint64_t *)&unk_1ECD840D0);
  sub_183B91D58();
  MEMORY[0x186DB21BC](0, v9, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v14[0] + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_1832C2030(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t result;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(char *, unint64_t, uint64_t);
  char v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char v61;
  int v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  char *v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  int v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  char v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[6];
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unsigned int v120;
  char v121;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  v113 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v103[4] = (char *)v103 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v112 = (char *)v103 - v11;
  MEMORY[0x1E0C80A78](v10);
  v111 = (char *)v103 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE738);
  v104 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v114 = (char *)v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v103 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE740);
  v106 = *(_QWORD *)(v18 - 8);
  v107 = v18;
  MEMORY[0x1E0C80A78](v18);
  v105 = (char *)v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE158);
  v21 = MEMORY[0x1E0C80A78](v20);
  v103[5] = (char *)v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)v103 - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(qword_1EDCDE530);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = MEMORY[0x1E0C80A78](v25);
  v103[3] = (char *)v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)v103 - v29;
  v31 = *(_DWORD *)(a1 + qword_1EDCDE498);
  BYTE4(v115) = *(_BYTE *)(a1 + qword_1EDCDE498 + 4);
  LODWORD(v115) = v31;
  v108 = HIDWORD(a2);
  v121 = BYTE4(a2);
  v110 = a2;
  v120 = a2;
  result = _s7Network9SendStateO2eeoiySbAC_ACtFZ_0((unsigned int *)&v115, &v120);
  if ((result & 1) == 0)
  {
    v109 = a1;
    v33 = a1 + qword_1EDCDE150;
    swift_beginAccess();
    sub_183062090(v33, (uint64_t)v24, &qword_1EDCDE158);
    v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
    v35 = v34(v24, 1, v25);
    v103[2] = v25;
    v103[1] = v26;
    if (v35 == 1)
    {
      sub_1830620D4((uint64_t)v24, &qword_1EDCDE158);
      v36 = v110;
      v37 = (v110 >> 38) & 3;
      if ((_DWORD)v37)
      {
LABEL_4:
        if ((_DWORD)v37 != 1)
          __asm { BR              X10 }
        v38 = HIDWORD(v36) & 0x3F;
        v39 = v109;
        sub_1832C1B68(&v115);
        v40 = v116;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v41 = (uint64_t)v40;
        v42 = *((_QWORD *)v40 + 2);
        v112 = (char *)v38;
        if (v42)
        {
          v111 = (char *)v4;
          v43 = v104;
          v44 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
          v107 = v41;
          v45 = v41 + v44;
          v46 = *(_QWORD *)(v104 + 72);
          v47 = *(void (**)(char *, unint64_t, uint64_t))(v104 + 16);
          v48 = v38;
          v49 = v110;
          v50 = v114;
          do
          {
            v47(v50, v45, v13);
            sub_18323C200();
            v51 = swift_allocError();
            *(_DWORD *)v52 = v49;
            *(_BYTE *)(v52 + 4) = v48;
            v115 = v51;
            sub_183B919E0();
            v50 = v114;
            (*(void (**)(char *, uint64_t))(v43 + 8))(v114, v13);
            v45 += v46;
            --v42;
          }
          while (v42);
          swift_bridgeObjectRelease();
          v39 = v109;
          v4 = (uint64_t)v111;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v63 = (char *)(v39 + qword_1EDCDE160);
        swift_beginAccess();
        v64 = MEMORY[0x1E0DEE9D8];
        *((_QWORD *)v63 + 1) = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRelease();
        sub_1832C1B68(&v115);
        v65 = v117;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v66 = *((_QWORD *)v65 + 2);
        v114 = v63;
        if (v66)
        {
          v67 = (char)v112;
          v68 = v113;
          v69 = (*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
          v111 = v65;
          v70 = &v65[v69];
          v71 = *(_QWORD *)(v113 + 72);
          v72 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
          v73 = v110;
          do
          {
            v72(v7, v70, v4);
            sub_18323C200();
            v74 = swift_allocError();
            *(_DWORD *)v75 = v73;
            *(_BYTE *)(v75 + 4) = v67;
            v115 = v74;
            sub_183B919E0();
            (*(void (**)(char *, uint64_t))(v68 + 8))(v7, v4);
            v70 += v71;
            --v66;
          }
          while (v66);
          swift_bridgeObjectRelease();
          v63 = v114;
          v64 = MEMORY[0x1E0DEE9D8];
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        *((_QWORD *)v63 + 2) = v64;
        swift_bridgeObjectRelease();
        sub_1832C1B68(&v115);
        v80 = v118;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v81 = *((_QWORD *)v80 + 2);
        if (v81)
        {
          v82 = (char)v112;
          v83 = v113;
          v84 = (*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
          v111 = v80;
          v85 = &v80[v84];
          v86 = *(_QWORD *)(v113 + 72);
          v87 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
          v88 = v110;
          do
          {
            v87(v7, v85, v4);
            sub_18323C200();
            v89 = swift_allocError();
            *(_DWORD *)v90 = v88;
            *(_BYTE *)(v90 + 4) = v82;
            v115 = v89;
            sub_183B919E0();
            (*(void (**)(char *, uint64_t))(v83 + 8))(v7, v4);
            v85 += v86;
            --v81;
          }
          while (v81);
          swift_bridgeObjectRelease();
          v91 = v82;
          v63 = v114;
          v64 = MEMORY[0x1E0DEE9D8];
        }
        else
        {
          swift_bridgeObjectRelease();
          v91 = (char)v112;
        }
        *((_QWORD *)v63 + 3) = v64;
        swift_bridgeObjectRelease();
        sub_1832C1B68(&v115);
        v92 = v119;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v93 = *((_QWORD *)v92 + 2);
        if (v93)
        {
          v94 = (*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
          v111 = v92;
          v95 = &v92[v94];
          v96 = *(_QWORD *)(v113 + 72);
          v97 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
          v98 = v91;
          v99 = v110;
          do
          {
            v97(v7, v95, v4);
            sub_18323C200();
            v100 = swift_allocError();
            *(_DWORD *)v101 = v99;
            *(_BYTE *)(v101 + 4) = v98;
            v115 = v100;
            sub_183B919E0();
            (*(void (**)(char *, uint64_t))(v113 + 8))(v7, v4);
            v95 += v96;
            --v93;
          }
          while (v93);
          swift_bridgeObjectRelease();
          v63 = v114;
          v64 = MEMORY[0x1E0DEE9D8];
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        *((_QWORD *)v63 + 4) = v64;
        result = swift_bridgeObjectRelease();
        v76 = v109;
        v79 = v110;
        v78 = &qword_1EDCDE000;
        v61 = v108;
        goto LABEL_34;
      }
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v30, v24, v25);
      BYTE4(v115) = v108;
      v36 = v110;
      LODWORD(v115) = v110;
      v103[0] = v34;
      v53 = v105;
      sub_183B91A64();
      (*(void (**)(char *, uint64_t))(v106 + 8))(v53, v107);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v30, v25);
      v37 = (v36 >> 38) & 3;
      if ((_DWORD)v37)
        goto LABEL_4;
    }
    sub_1832C1B68(&v115);
    v54 = v116;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v55 = *((_QWORD *)v54 + 2);
    if (v55)
    {
      v56 = v104;
      v57 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
      v114 = v54;
      v58 = &v54[v57];
      v59 = *(_QWORD *)(v104 + 72);
      v60 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
      v61 = v108;
      v62 = v110;
      do
      {
        v60(v17, v58, v13);
        LODWORD(v115) = v62;
        BYTE4(v115) = v61;
        sub_183B919EC();
        (*(void (**)(char *, uint64_t))(v56 + 8))(v17, v13);
        v58 += v59;
        --v55;
      }
      while (v55);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v61 = v108;
    }
    v76 = v109;
    v77 = v109 + qword_1EDCDE160;
    swift_beginAccess();
    *(_QWORD *)(v77 + 8) = MEMORY[0x1E0DEE9D8];
    result = swift_bridgeObjectRelease();
    v78 = &qword_1EDCDE000;
    v79 = v110;
LABEL_34:
    v102 = v76 + v78[147];
    *(_BYTE *)(v102 + 4) = v61;
    *(_DWORD *)v102 = v79;
  }
  return result;
}

uint64_t sub_1832C2CB4@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t (*v1)(uint64_t);

  *a1 = sub_1832CEF50;
  a1[1] = v1;
  return swift_retain();
}

uint64_t sub_1832C2CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;

  v21 = a2;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE740);
  v3 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE158);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v20 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1EDCDE530);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1 + qword_1EDCDE150;
  swift_beginAccess();
  sub_183062090(v16, (uint64_t)v11, &qword_1EDCDE158);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1830620D4((uint64_t)v11, &qword_1EDCDE158);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    sub_183B91A70();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v12);
    sub_1832C1B54((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  v17 = *(_DWORD *)(a1 + qword_1EDCDE498);
  v23 = *(_BYTE *)(a1 + qword_1EDCDE498 + 4);
  v22 = v17;
  v18 = v21;
  sub_183B91A64();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v20);
  if ((*(unsigned int *)(a1 + qword_1EDCDE498) | ((unint64_t)*(unsigned __int8 *)(a1 + qword_1EDCDE498 + 4) << 32)) == 0x8000000003)
    return sub_183B91A70();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v9, v18, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  sub_1832C1B54((uint64_t)v9);
  swift_retain();
  return sub_183B91A4C();
}

uint64_t sub_1832C2F64()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_1832C2F7C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_1832C2FF0;
  return sub_183B9219C();
}

uint64_t sub_1832C2FF0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832C3054()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832C3060(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[6];

  v26 = a5;
  v27 = a6;
  v25[1] = a4;
  v9 = (_QWORD *)*a2;
  v10 = sub_183B915FC();
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_183B91614();
  v28 = *(_QWORD *)(v13 - 8);
  v29 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EDCDC5C8 != -1)
    swift_once();
  v25[2] = qword_1EDCF2A70;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v16);
  v20 = (*(unsigned __int8 *)(v17 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v21 = (char *)swift_allocObject();
  *((_QWORD *)v21 + 2) = v9[10];
  *((_QWORD *)v21 + 3) = v9[11];
  *((_QWORD *)v21 + 4) = swift_allocateMetadataPack();
  *((_QWORD *)v21 + 5) = v9[13];
  *((_QWORD *)v21 + 6) = swift_allocateWitnessTablePack();
  *((_QWORD *)v21 + 7) = a2;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v21[v20], v19, v16);
  aBlock[4] = v26;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_18305665C;
  aBlock[3] = v27;
  v22 = _Block_copy(aBlock);
  swift_retain();
  sub_183B91608();
  v32 = MEMORY[0x1E0DEE9D8];
  sub_183064644((unint64_t *)&qword_1ECD840F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD840D0);
  sub_1832D133C((unint64_t *)&qword_1ECD840E0, (uint64_t *)&unk_1ECD840D0);
  v23 = v31;
  sub_183B91D58();
  MEMORY[0x186DB21BC](0, v15, v12, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v23);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v29);
  return swift_release();
}

uint64_t sub_1832C3320(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[4];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(char *)(a1 + qword_1EDCDE498 + 4);
  if (!(v8 >> 6))
    goto LABEL_5;
  v9 = *(unsigned int *)(a1 + qword_1EDCDE498) | (unint64_t)(v8 << 32);
  if (v8 >> 6 == 1)
  {
    sub_18323C200();
    v10 = swift_allocError();
    *(_DWORD *)v11 = v9;
    *(_BYTE *)(v11 + 4) = BYTE4(v9) & 0x3F;
    v18[1] = v10;
    return sub_183B919E0();
  }
  if (v9 >= (uint64_t)0xFFFFFF8000000003)
    return sub_183B919EC();
LABEL_5:
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v13 = a1 + qword_1EDCDE160;
  swift_beginAccess();
  v14 = *(_QWORD *)(v13 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v13 + 32) = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = sub_183242F74(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
    *(_QWORD *)(v13 + 32) = v14;
  }
  v17 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    v14 = sub_183242F74(v16 > 1, v17 + 1, 1, v14);
    *(_QWORD *)(v13 + 32) = v14;
  }
  *(_QWORD *)(v14 + 16) = v17 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v14+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v17, v7, v4);
  return swift_endAccess();
}

uint64_t sub_1832C34F8()
{
  return sub_1832C34F4();
}

uint64_t sub_1832C3518()
{
  return sub_1832C1B18();
}

uint64_t sub_1832C3538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832C7204(a1, a2, a3, (void (*)(_BYTE *))sub_1832C1B18);
}

unsigned int *sub_1832C3544(unsigned int *a1)
{
  return sub_1832C1D5C(a1);
}

BOOL sub_1832C3564(uint64_t *a1, uint64_t *a2)
{
  return static SendProgress.== infix(_:_:)(*a1, *a2);
}

nw_protocol_options_t TLS.init()@<X0>(nw_protocol_options_t *a1@<X8>)
{
  nw_protocol_options_t result;

  result = nw_tls_create_options();
  *a1 = result;
  return result;
}

uint64_t TLS.configure(parameters:)(NSObject *a1)
{
  return sub_1832C3B0C(a1, (void (*)(void))nw_protocol_stack_append_application_protocol);
}

uint64_t sub_1832C35B4(NSObject *a1, uint64_t a2, uint64_t a3)
{
  return sub_1832C3B48(a1, a2, a3, (void (*)(void))nw_protocol_stack_append_application_protocol);
}

uint64_t TCP.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = nw_tcp_create_options();
  return v0;
}

uint64_t TCP.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = nw_tcp_create_options();
  return v0;
}

uint64_t TCP.noDelay(_:)(char a1)
{
  return sub_1832C36D4(a1, (void (*)(_QWORD, _QWORD))nw_tcp_options_set_no_delay);
}

uint64_t TCP.noPush(_:)(char a1)
{
  return sub_1832C36D4(a1, (void (*)(_QWORD, _QWORD))nw_tcp_options_set_no_push);
}

uint64_t TCP.noOptions(_:)(char a1)
{
  return sub_1832C36D4(a1, (void (*)(_QWORD, _QWORD))nw_tcp_options_set_no_options);
}

uint64_t TCP.enableKeepalive(_:)(char a1)
{
  return sub_1832C36D4(a1, (void (*)(_QWORD, _QWORD))nw_tcp_options_set_enable_keepalive);
}

uint64_t TCP.keepaliveCount(_:)(uint64_t a1)
{
  return sub_1832C3698(a1, (void (*)(_QWORD, uint64_t))nw_tcp_options_set_keepalive_count);
}

uint64_t TCP.keepaliveIdle(_:)(uint64_t a1)
{
  return sub_1832C3698(a1, (void (*)(_QWORD, uint64_t))nw_tcp_options_set_keepalive_idle_time);
}

uint64_t TCP.keepaliveInterval(_:)(uint64_t a1)
{
  return sub_1832C3698(a1, (void (*)(_QWORD, uint64_t))nw_tcp_options_set_keepalive_interval);
}

uint64_t TCP.maximumSegmentSize(_:)(uint64_t a1)
{
  return sub_1832C3698(a1, (void (*)(_QWORD, uint64_t))nw_tcp_options_set_maximum_segment_size);
}

uint64_t TCP.connectionTimeout(_:)(uint64_t a1)
{
  return sub_1832C3698(a1, (void (*)(_QWORD, uint64_t))nw_tcp_options_set_connection_timeout);
}

uint64_t TCP.persistTimeout(_:)(uint64_t a1)
{
  return sub_1832C3698(a1, (void (*)(_QWORD, uint64_t))nw_tcp_options_set_persist_timeout);
}

uint64_t TCP.retransmitConnectionDropTime(_:)(uint64_t a1)
{
  return sub_1832C3698(a1, (void (*)(_QWORD, uint64_t))nw_tcp_options_set_retransmit_connection_drop_time);
}

uint64_t sub_1832C3698(uint64_t a1, void (*a2)(_QWORD, uint64_t))
{
  uint64_t v2;

  a2(*(_QWORD *)(v2 + 16), a1);
  return swift_retain();
}

uint64_t TCP.retransmitFinDrop(_:)(char a1)
{
  return sub_1832C36D4(a1, (void (*)(_QWORD, _QWORD))nw_tcp_options_set_retransmit_fin_drop);
}

uint64_t TCP.enableFastOpen(_:)(char a1)
{
  return sub_1832C36D4(a1, (void (*)(_QWORD, _QWORD))nw_tcp_options_set_enable_fast_open);
}

uint64_t sub_1832C36D4(char a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;

  a2(*(_QWORD *)(v2 + 16), a1 & 1);
  return swift_retain();
}

uint64_t TCP.configure(parameters:)(NSObject *a1)
{
  uint64_t v1;
  NSObject *v2;

  v2 = nw_parameters_copy_default_protocol_stack(a1);
  nw_protocol_stack_set_transport_protocol(v2, *(nw_protocol_options_t *)(v1 + 16));
  return swift_unknownObjectRelease();
}

uint64_t TCP.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t TCP.__deallocating_deinit()
{
  return sub_183266A68();
}

uint64_t sub_1832C374C(NSObject *a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;

  v2 = *v1;
  v3 = nw_parameters_copy_default_protocol_stack(a1);
  nw_protocol_stack_set_transport_protocol(v3, *(nw_protocol_options_t *)(v2 + 16));
  return swift_unknownObjectRelease();
}

nw_protocol_options_t QUIC.init()@<X0>(nw_protocol_options_t *a1@<X8>)
{
  nw_protocol_options_t result;

  result = nw_quic_create_options();
  *a1 = result;
  return result;
}

uint64_t QUIC.configure(parameters:)(NSObject *a1)
{
  return sub_1832C3B0C(a1, (void (*)(void))nw_protocol_stack_set_transport_protocol);
}

uint64_t sub_1832C37AC(NSObject *a1, uint64_t a2, uint64_t a3)
{
  return sub_1832C3B48(a1, a2, a3, (void (*)(void))nw_protocol_stack_set_transport_protocol);
}

nw_protocol_options_t UDP.init()@<X0>(nw_protocol_options_t *a1@<X8>)
{
  nw_protocol_options_t result;

  result = nw_udp_create_options();
  *a1 = result;
  return result;
}

uint64_t UDP.preferNoChecksum(_:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1832C38F0(a1, (void (*)(uint64_t, _QWORD))nw_udp_options_set_prefer_no_checksum, a2);
}

uint64_t UDP.configure(parameters:)(NSObject *a1)
{
  return sub_1832C3B0C(a1, (void (*)(void))nw_protocol_stack_set_transport_protocol);
}

NWConcrete_nw_protocol_options *IP.init()@<X0>(NWConcrete_nw_protocol_options **a1@<X8>)
{
  NWConcrete_nw_protocol_options *result;

  result = nw_ip_create_options();
  *a1 = result;
  return result;
}

uint64_t IP.version(_:)@<X0>(char *a1@<X0>, NSObject **a2@<X8>)
{
  NSObject **v2;
  NSObject *v4;

  v4 = *v2;
  nw_ip_options_set_version(v4, dword_183BA4138[*a1]);
  *a2 = v4;
  return swift_unknownObjectRetain();
}

uint64_t IP.hopLimit(_:)@<X0>(uint8_t a1@<W0>, NSObject **a2@<X8>)
{
  NSObject **v2;
  NSObject *v4;

  v4 = *v2;
  nw_ip_options_set_hop_limit(v4, a1);
  *a2 = v4;
  return swift_unknownObjectRetain();
}

uint64_t IP.useMinimumMTU(_:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1832C38F0(a1, (void (*)(uint64_t, _QWORD))nw_ip_options_set_use_minimum_mtu, a2);
}

uint64_t IP.disableFragmentation(_:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1832C38F0(a1, (void (*)(uint64_t, _QWORD))nw_ip_options_set_disable_fragmentation, a2);
}

uint64_t IP.calculateReceiveTime(_:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1832C38F0(a1, (void (*)(uint64_t, _QWORD))nw_ip_options_set_calculate_receive_time, a2);
}

uint64_t IP.localAddressPreference(_:)@<X0>(unsigned __int8 *a1@<X0>, NSObject **a2@<X8>)
{
  NSObject **v2;
  NSObject *v4;

  v4 = *v2;
  nw_ip_options_set_local_address_preference(v4, (nw_ip_local_address_preference_t)*a1);
  *a2 = v4;
  return swift_unknownObjectRetain();
}

uint64_t IP.disableMulticastLoopback(_:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1832C38F0(a1, (void (*)(uint64_t, _QWORD))nw_ip_options_set_disable_multicast_loopback, a2);
}

uint64_t sub_1832C38F0@<X0>(char a1@<W0>, void (*a2)(uint64_t, _QWORD)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  a2(v5, a1 & 1);
  *a3 = v5;
  return swift_unknownObjectRetain();
}

uint64_t IP.configure(parameters:)(NSObject *a1)
{
  return sub_1832C3B0C(a1, (void (*)(void))nw_protocol_stack_set_internet_protocol);
}

uint64_t sub_1832C3934(NSObject *a1, uint64_t a2, uint64_t a3)
{
  return sub_1832C3B48(a1, a2, a3, (void (*)(void))nw_protocol_stack_set_internet_protocol);
}

nw_protocol_options_t TLV.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  nw_protocol_options_t result;

  if (qword_1EDCDC5C0 != -1)
    swift_once();
  v2 = qword_1EDCF2A68;
  type metadata accessor for NWProtocolFramer.Options();
  v3 = swift_allocObject();
  result = nw_framer_create_options(*(nw_protocol_definition_t *)(v2 + 32));
  *(_QWORD *)(v3 + 16) = result;
  *a1 = v3;
  return result;
}

uint64_t TLV.configure(parameters:)(NSObject *a1)
{
  uint64_t *v1;
  uint64_t v2;
  nw_protocol_stack_t v3;

  v2 = *v1;
  v3 = nw_parameters_copy_default_protocol_stack(a1);
  nw_protocol_stack_append_application_protocol(v3, *(void **)(v2 + 16));
  return swift_unknownObjectRelease();
}

uint64_t sub_1832C39EC(NSObject *a1)
{
  uint64_t *v1;
  uint64_t v2;
  nw_protocol_stack_t v3;

  v2 = *v1;
  v3 = nw_parameters_copy_default_protocol_stack(a1);
  nw_protocol_stack_append_application_protocol(v3, *(void **)(v2 + 16));
  return swift_unknownObjectRelease();
}

nw_protocol_options_t JSON.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  nw_protocol_options_t result;

  if (qword_1EDCDC5C0 != -1)
    swift_once();
  v2 = qword_1EDCF2A68;
  type metadata accessor for NWProtocolFramer.Options();
  v3 = swift_allocObject();
  result = nw_framer_create_options(*(nw_protocol_definition_t *)(v2 + 32));
  *(_QWORD *)(v3 + 16) = result;
  *a1 = v3;
  return result;
}

uint64_t JSON.options.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t JSON.configure(parameters:)(NSObject *a1)
{
  uint64_t *v1;
  uint64_t v2;
  nw_protocol_stack_t v3;

  v2 = *v1;
  v3 = nw_parameters_copy_default_protocol_stack(a1);
  nw_protocol_stack_append_application_protocol(v3, *(void **)(v2 + 16));
  return swift_unknownObjectRelease();
}

nw_protocol_options_t WebSocket.init()@<X0>(nw_protocol_options_t *a1@<X8>)
{
  nw_protocol_options_t result;

  result = nw_ws_create_options(nw_ws_version_13);
  *a1 = result;
  return result;
}

uint64_t WebSocket.configure(parameters:)(NSObject *a1)
{
  return sub_1832C3B0C(a1, (void (*)(void))nw_protocol_stack_append_application_protocol);
}

uint64_t sub_1832C3B0C(NSObject *a1, void (*a2)(void))
{
  nw_parameters_copy_default_protocol_stack(a1);
  a2();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832C3B48(NSObject *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  nw_parameters_copy_default_protocol_stack(a1);
  a4();
  return swift_unknownObjectRelease();
}

uint64_t HTTP1.__allocating_init(enabled:)(char a1)
{
  return sub_1832C3C34(a1, (uint64_t (*)(void))nw_http1_create_options);
}

uint64_t HTTP1.init(enabled:)(char a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = nw_http1_create_options();
  *(_BYTE *)(v1 + 24) = a1;
  return v1;
}

uint64_t HTTP1.__deallocating_deinit()
{
  return sub_183266A68();
}

uint64_t sub_1832C3BC8@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1832C3D08(a1, (uint64_t (*)(void))nw_http1_create_options, a2);
}

uint64_t HTTP2.__allocating_init(enabled:)(char a1)
{
  return sub_1832C3C34(a1, (uint64_t (*)(void))nw_http2_create_options);
}

uint64_t HTTP2.init(enabled:)(char a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = nw_http2_create_options();
  *(_BYTE *)(v1 + 24) = a1;
  return v1;
}

uint64_t HTTP2.__deallocating_deinit()
{
  return sub_183266A68();
}

uint64_t sub_1832C3C1C@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1832C3D08(a1, (uint64_t (*)(void))nw_http2_create_options, a2);
}

uint64_t HTTP3.__allocating_init(enabled:)(char a1)
{
  return sub_1832C3C34(a1, (uint64_t (*)(void))nw_http3_create_options);
}

uint64_t sub_1832C3C34(char a1, uint64_t (*a2)(void))
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2();
  *(_BYTE *)(v4 + 24) = a1;
  return v4;
}

uint64_t HTTP3.init(enabled:)(char a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = nw_http3_create_options();
  *(_BYTE *)(v1 + 24) = a1;
  return v1;
}

NSObject *_s7Network5HTTP1C9configure10parametersySo06OS_nw_D0_p_tF_0(NSObject *result)
{
  uint64_t v1;
  nw_protocol_stack_t v2;

  if (*(_BYTE *)(v1 + 24) == 1)
  {
    v2 = nw_parameters_copy_default_protocol_stack(result);
    nw_protocol_stack_append_application_protocol(v2, *(void **)(v1 + 16));
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t HTTP3.__deallocating_deinit()
{
  return sub_183266A68();
}

uint64_t sub_1832C3CFC@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1832C3D08(a1, (uint64_t (*)(void))nw_http3_create_options, a2);
}

uint64_t sub_1832C3D08@<X0>(char a1@<W0>, uint64_t (*a2)(void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = swift_allocObject();
  result = a2();
  *(_QWORD *)(v6 + 16) = result;
  *(_BYTE *)(v6 + 24) = a1;
  *a3 = v6;
  return result;
}

NSObject *sub_1832C3D58(NSObject *result)
{
  uint64_t *v1;
  uint64_t v2;
  nw_protocol_stack_t v3;

  v2 = *v1;
  if (*(_BYTE *)(v2 + 24) == 1)
  {
    v3 = nw_parameters_copy_default_protocol_stack(result);
    nw_protocol_stack_append_application_protocol(v3, *(void **)(v2 + 16));
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t DefaultHTTP1()(nw_protocol_options_t *a1)
{
  return sub_1832C3DC8(a1, (void (*)(void))type metadata accessor for HTTP1, (uint64_t (*)(void))nw_http1_create_options);
}

uint64_t DefaultHTTP2()(nw_protocol_options_t *a1)
{
  return sub_1832C3DC8(a1, (void (*)(void))type metadata accessor for HTTP2, (uint64_t (*)(void))nw_http2_create_options);
}

uint64_t sub_1832C3DC8(nw_protocol_options_t *a1, void (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;

  a2();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a3();
  *(_BYTE *)(v5 + 24) = 1;
  *a1 = nw_tls_create_options();
  type metadata accessor for TCP();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = nw_tcp_create_options();
  return v5;
}

uint64_t DefaultHTTP3()(nw_protocol_options_t *a1)
{
  uint64_t v2;

  type metadata accessor for HTTP3();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = nw_http3_create_options();
  *(_BYTE *)(v2 + 24) = 1;
  *a1 = nw_quic_create_options();
  return v2;
}

uint64_t HTTP.__allocating_init(insecure:)(uint64_t (*a1)(void))
{
  uint64_t v2;
  NWConcrete_nw_protocol_options *options;
  uint64_t v4;

  v2 = swift_allocObject();
  options = nw_http_messaging_create_options();
  *(_QWORD *)(v2 + 16) = options;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  v4 = a1();
  nw_http_messaging_options_set_http1_options(options, *(void **)(v4 + 16));
  swift_release();
  swift_release();
  return v2;
}

uint64_t HTTP.init(insecure:)(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)(v1 + 16) = nw_http_messaging_create_options();
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  v3 = a1();
  nw_http_messaging_options_set_http1_options(*(void **)(v1 + 16), *(void **)(v3 + 16));
  swift_release();
  swift_release();
  return v1;
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t (*a3)(uint64_t *), uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;

  v10 = swift_allocObject();
  HTTP.init(h1:h2:h3:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t sub_1832C4008(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t (*a3)(uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  void *v21;
  uint64_t inited;
  nw_protocol_options_t options;
  int v24;
  void *v25;
  void *v26;
  uint64_t v28;

  *(_QWORD *)(a5 + 16) = nw_http_messaging_create_options();
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_QWORD *)(a5 + 56) = 0;
  v8 = a1(&v28);
  v10 = v9;
  v11 = v28;
  v12 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v12 == 1)
  {
    v13 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v14 = *(void **)(v8 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http1_options(v13, v14);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    *(_QWORD *)(a5 + 24) = v11;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    *(_QWORD *)(a5 + 32) = v10;
    swift_release();
  }
  v15 = a3(&v28);
  v17 = v16;
  v18 = v28;
  swift_retain();
  v19 = *(unsigned __int8 *)(v15 + 24);
  swift_release();
  if (v19 == 1)
  {
    v20 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v21 = *(void **)(v15 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http2_options(v20, v21);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    *(_QWORD *)(a5 + 40) = v18;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    *(_QWORD *)(a5 + 48) = v17;
    swift_release();
  }
  type metadata accessor for HTTP3();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = nw_http3_create_options();
  *(_BYTE *)(inited + 24) = 0;
  options = nw_quic_create_options();
  swift_retain();
  v24 = *(unsigned __int8 *)(inited + 24);
  swift_release();
  if (v24 == 1)
  {
    v25 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    v26 = *(void **)(inited + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http3_options(v25, v26);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    *(_QWORD *)(a5 + 56) = options;
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
  }
  return a5;
}

uint64_t sub_1832C4318(uint64_t (*a1)(nw_protocol_options_t *), uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  nw_protocol_options_t v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  nw_protocol_options_t v18;
  int v19;
  void *v20;
  uint64_t (*v21)(_QWORD);
  void *v22;
  uint64_t v23;
  nw_protocol_options_t v24;
  int v25;
  void *v26;
  void *v27;
  nw_protocol_options_t v29;

  *(_QWORD *)(a5 + 16) = nw_http_messaging_create_options();
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_QWORD *)(a5 + 56) = 0;
  v8 = a1(&v29);
  v10 = v9;
  v11 = v29;
  v12 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v12 == 1)
  {
    v13 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v14 = *(void **)(v8 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http1_options(v13, v14);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    *(_QWORD *)(a5 + 24) = v11;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    *(_QWORD *)(a5 + 32) = v10;
    swift_release();
  }
  v15 = sub_1832C4EDC(&v29, (void (*)(void))type metadata accessor for HTTP2, (uint64_t (*)(void))nw_http2_create_options);
  v17 = v16;
  v18 = v29;
  v19 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v19 == 1)
  {
    v20 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v21 = a3;
    v22 = *(void **)(v15 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http2_options(v20, v22);
    swift_unknownObjectRelease();
    a3 = v21;
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    *(_QWORD *)(a5 + 40) = v18;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    *(_QWORD *)(a5 + 48) = v17;
    swift_release();
  }
  v23 = a3(&v29);
  v24 = v29;
  v25 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v25 == 1)
  {
    v26 = *(void **)(a5 + 16);
    swift_retain();
    v27 = *(void **)(v23 + 16);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http3_options(v26, v27);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    *(_QWORD *)(a5 + 56) = v24;
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
  }
  return a5;
}

uint64_t sub_1832C4620(uint64_t (*a1)(nw_protocol_options_t *), uint64_t a2, uint64_t (*a3)(nw_protocol_options_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  nw_protocol_options_t v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  nw_protocol_options_t v17;
  int v18;
  void *v19;
  void *v20;
  uint64_t v21;
  nw_protocol_options_t v22;
  int v23;
  void *v24;
  void *v25;
  nw_protocol_options_t v28;

  *(_QWORD *)(a5 + 16) = nw_http_messaging_create_options();
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_QWORD *)(a5 + 56) = 0;
  v7 = sub_1832C4EDC(&v28, (void (*)(void))type metadata accessor for HTTP1, (uint64_t (*)(void))nw_http1_create_options);
  v9 = v8;
  v10 = v28;
  v11 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v11 == 1)
  {
    v12 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v13 = *(void **)(v7 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http1_options(v12, v13);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    *(_QWORD *)(a5 + 24) = v10;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    *(_QWORD *)(a5 + 32) = v9;
    swift_release();
  }
  v14 = a1(&v28);
  v16 = v15;
  v17 = v28;
  v18 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v18 == 1)
  {
    v19 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v20 = *(void **)(v14 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http2_options(v19, v20);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    *(_QWORD *)(a5 + 40) = v17;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    *(_QWORD *)(a5 + 48) = v16;
    swift_release();
  }
  v21 = a3(&v28);
  v22 = v28;
  v23 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v23 == 1)
  {
    v24 = *(void **)(a5 + 16);
    swift_retain();
    v25 = *(void **)(v21 + 16);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http3_options(v24, v25);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    *(_QWORD *)(a5 + 56) = v22;
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
  }
  return a5;
}

_QWORD *HTTP.init(h1:h2:h3:)(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t (*a3)(uint64_t *), uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t (*v23)(_QWORD);
  void *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *v28;
  void *v29;
  uint64_t v31;

  v6 = (_QWORD *)v5;
  *(_QWORD *)(v5 + 16) = nw_http_messaging_create_options();
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_QWORD *)(v5 + 56) = 0;
  v10 = a1(&v31);
  v12 = v11;
  v13 = v31;
  v14 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v14 == 1)
  {
    v15 = (void *)v6[2];
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v16 = *(void **)(v10 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http1_options(v15, v16);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    v6[3] = v13;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    v6[4] = v12;
    swift_release();
  }
  v17 = a3(&v31);
  v19 = v18;
  v20 = v31;
  v21 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v21 == 1)
  {
    v22 = (void *)v6[2];
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v23 = a5;
    v24 = *(void **)(v17 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http2_options(v22, v24);
    swift_unknownObjectRelease();
    a5 = v23;
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    v6[5] = v20;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    v6[6] = v19;
    swift_release();
  }
  v25 = a5(&v31);
  v26 = v31;
  v27 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v27 == 1)
  {
    v28 = (void *)v6[2];
    swift_retain();
    v29 = *(void **)(v25 + 16);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http3_options(v28, v29);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    v6[7] = v26;
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
  }
  return v6;
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  return sub_1832C4008(a1, a2, a3, a4, v8);
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)(uint64_t (*a1)(nw_protocol_options_t *), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;

  v9 = swift_allocObject();
  return sub_1832C4318(a1, a2, a4, a5, v9);
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)(uint64_t a1, uint64_t (*a2)(nw_protocol_options_t *), uint64_t a3, uint64_t (*a4)(nw_protocol_options_t *), uint64_t a5)
{
  uint64_t v9;

  v9 = swift_allocObject();
  return sub_1832C4620(a2, a3, a4, a5, v9);
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  HTTP.init(h1:h2:h3:)(a1, a2, (uint64_t (*)(uint64_t *))sub_1832C4D98, 0, (uint64_t (*)(_QWORD))sub_1832C4DAC);
  return v4;
}

uint64_t sub_1832C4D98(nw_protocol_options_t *a1)
{
  return sub_1832C4EDC(a1, (void (*)(void))type metadata accessor for HTTP2, (uint64_t (*)(void))nw_http2_create_options);
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v5;

  v5 = swift_allocObject();
  HTTP.init(h1:h2:h3:)((uint64_t (*)(uint64_t *))sub_1832C4E18, 0, a2, a3, (uint64_t (*)(_QWORD))sub_1832C4DAC);
  return v5;
}

uint64_t sub_1832C4E18(nw_protocol_options_t *a1)
{
  return sub_1832C4EDC(a1, (void (*)(void))type metadata accessor for HTTP1, (uint64_t (*)(void))nw_http1_create_options);
}

uint64_t sub_1832C4E2C(nw_protocol_options_t *a1)
{
  uint64_t v2;

  type metadata accessor for HTTP3();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = nw_http3_create_options();
  *(_BYTE *)(v2 + 24) = 0;
  *a1 = nw_quic_create_options();
  return v2;
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;

  v4 = swift_allocObject();
  HTTP.init(h1:h2:h3:)((uint64_t (*)(uint64_t *))sub_1832C4E18, 0, (uint64_t (*)(uint64_t *))sub_1832C4D98, 0, a3);
  return v4;
}

uint64_t sub_1832C4EDC(nw_protocol_options_t *a1, void (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v5;
  nw_protocol_options_t options;
  uint64_t v7;

  a2();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a3();
  *(_BYTE *)(v5 + 24) = 0;
  options = nw_tls_create_options();
  type metadata accessor for TCP();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = nw_tcp_create_options();
  *a1 = options;
  return v5;
}

uint64_t HTTP.configure(parameters:)(NSObject *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  _BOOL8 v11;
  void *v12;
  NWConcrete_nw_protocol_transform *v13;
  void *v14;
  uint64_t v15;
  NWConcrete_nw_protocol_transform *v16;
  NWConcrete_nw_protocol_options *v17;
  uint64_t v18;
  NWConcrete_nw_protocol_transform *v19;

  v3 = nw_http_messaging_options_copy_http1_options(*(void **)(v1 + 16));
  swift_unknownObjectRelease();
  v4 = nw_http_messaging_options_copy_http2_options(*(void **)(v1 + 16));
  swift_unknownObjectRelease();
  v5 = nw_http_messaging_options_copy_http3_options(*(void **)(v1 + 16));
  swift_unknownObjectRelease();
  v6 = nw_parameters_copy_default_protocol_stack(a1);
  v7 = *(void **)(v1 + 40);
  if (v7)
  {
    swift_unknownObjectRetain();
    if (v5)
      nw_tls_options_add_transport_specific_application_protocol(v7, (uint64_t)"h3");
    if (v4)
      nw_tls_options_add_transport_specific_application_protocol(v7, (uint64_t)"h2");
    if (v3)
      nw_tls_options_add_transport_specific_application_protocol(v7, (uint64_t)"http/1.1");
    swift_unknownObjectRelease();
  }
  v8 = *(void **)(v1 + 24);
  if (v8)
  {
    swift_unknownObjectRetain();
    if (v5)
      nw_tls_options_add_transport_specific_application_protocol(v8, (uint64_t)"h3");
    if (v4)
      nw_tls_options_add_transport_specific_application_protocol(v8, (uint64_t)"h2");
    if (v3)
      nw_tls_options_add_transport_specific_application_protocol(v8, (uint64_t)"http/1.1");
    swift_unknownObjectRelease();
  }
  v9 = *(NSObject **)(v1 + 56);
  if (v9)
    goto LABEL_21;
  v10 = *(_QWORD *)(v1 + 48);
  if (v10 || (v10 = *(_QWORD *)(v1 + 32)) != 0)
  {
    v9 = *(NSObject **)(v10 + 16);
LABEL_21:
    nw_protocol_stack_set_transport_protocol(v6, v9);
  }
  nw_protocol_stack_append_application_protocol(v6, *(void **)(v1 + 16));
  v11 = nw_array_create();
  v12 = *(void **)(v1 + 56);
  if (v12)
  {
    swift_unknownObjectRetain();
    v13 = nw_protocol_transform_create();
    nw_protocol_transform_clear_protocols_at_level(v13, 3);
    nw_protocol_transform_append_protocol(v13, 3, v12);
    nw_protocol_transform_set_fallback_mode(v13, 2);
    nw_protocol_transform_add_match_url_scheme(v13, "https");
    nw_protocol_transform_add_match_url_scheme(v13, "wss");
    nw_protocol_transform_set_prohibit_direct(v13, 1);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    nw_array_append(v11, v13);
    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  v14 = *(void **)(v1 + 40);
  if (v14 && (v15 = *(_QWORD *)(v1 + 48)) != 0
    || (v14 = *(void **)(v1 + 24)) != 0 && (v15 = *(_QWORD *)(v1 + 32)) != 0)
  {
    swift_unknownObjectRetain();
    swift_retain();
    v16 = nw_protocol_transform_create();
    nw_protocol_transform_clear_protocols_at_level(v16, 3);
    v17 = nw_protocol_options_copy(v14);
    nw_protocol_transform_append_protocol(v16, 4, v17);
    swift_unknownObjectRelease();
    nw_protocol_transform_append_protocol(v16, 3, *(void **)(v15 + 16));
    nw_protocol_transform_add_match_url_scheme(v16, "https");
    nw_protocol_transform_add_match_url_scheme(v16, "wss");
    nw_protocol_transform_set_prohibit_direct(v16, 1);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    nw_array_append(v11, v16);
    swift_release();
    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  v18 = *(_QWORD *)(v1 + 32);
  if (v18)
  {
    swift_retain();
    v19 = nw_protocol_transform_create();
    nw_protocol_transform_clear_protocols_at_level(v19, 3);
    nw_protocol_transform_append_protocol(v19, 3, *(void **)(v18 + 16));
    nw_protocol_transform_add_match_url_scheme(v19, "http");
    nw_protocol_transform_add_match_url_scheme(v19, "ws");
    nw_protocol_transform_set_prohibit_direct(v19, 1);
    nw_array_append(v11, v19);
    swift_unknownObjectRelease();
    swift_release();
  }
  if (nw_array_get_count(v11) >= 1)
    nw_parameters_set_transform_array(a1, (void *)v11);
  nw_parameters_set_data_mode(a1, 2u);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t HTTP.Response.httpResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = *((_BYTE *)v1 + 32);
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = v1[9];
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t HTTP.Response.content.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  sub_183261798(v1, *(_QWORD *)(v0 + 88));
  return v1;
}

__n128 HTTP.Response.init(httpResponse:content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_BYTE *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = v4;
  *(_QWORD *)(a4 + 24) = v5;
  *(_BYTE *)(a4 + 32) = v6;
  *(_OWORD *)(a4 + 40) = v7;
  *(_QWORD *)(a4 + 56) = v8;
  result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a4 + 64) = result;
  *(_QWORD *)(a4 + 80) = a2;
  *(_QWORD *)(a4 + 88) = a3;
  return result;
}

uint64_t sub_1832C53D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1832C53E4(&qword_1EDCDE170, &qword_1EDCDE178, a1);
}

uint64_t sub_1832C53E4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a1;
  swift_beginAccess();
  return sub_183062090(v6, a3, a2);
}

uint64_t sub_1832C5440(uint64_t a1)
{
  return sub_1832C5454(a1, &qword_1EDCDE170, &qword_1EDCDE178);
}

uint64_t sub_1832C5454(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a2;
  swift_beginAccess();
  sub_183290498(a1, v6, a3);
  return swift_endAccess();
}

uint64_t sub_1832C54B8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (uint64_t *)(v1 + qword_1EDCDE180);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = v3[6];
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1832C5568@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(v1 + qword_1EDCDE188);
  v3 = *(_QWORD *)(v1 + qword_1EDCDE188 + 8);
  v4 = *(_QWORD *)(v1 + qword_1EDCDE188 + 16);
  v5 = *(_QWORD *)(v1 + qword_1EDCDE188 + 24);
  v6 = *(_QWORD *)(v1 + qword_1EDCDE188 + 32);
  v7 = *(_QWORD *)(v1 + qword_1EDCDE188 + 40);
  v8 = *(_QWORD *)(v1 + qword_1EDCDE188 + 48);
  v9 = *(_QWORD *)(v1 + qword_1EDCDE188 + 56);
  v10 = *(_QWORD *)(v1 + qword_1EDCDE188 + 64);
  v11 = *(_QWORD *)(v1 + qword_1EDCDE188 + 72);
  v13 = *(_QWORD *)(v1 + qword_1EDCDE188 + 80);
  v12 = *(_QWORD *)(v1 + qword_1EDCDE188 + 88);
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v13;
  a1[11] = v12;
  return sub_1832CFF80(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v13, v12);
}

uint64_t sub_1832C55C8(_OWORD *a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v2 = (_OWORD *)(v1 + qword_1EDCDE188);
  v4 = *(_QWORD *)(v1 + qword_1EDCDE188);
  v3 = *(_QWORD *)(v1 + qword_1EDCDE188 + 8);
  v5 = *(_QWORD *)(v1 + qword_1EDCDE188 + 16);
  v6 = *(_QWORD *)(v1 + qword_1EDCDE188 + 24);
  v7 = *(_QWORD *)(v1 + qword_1EDCDE188 + 32);
  v8 = *(_QWORD *)(v1 + qword_1EDCDE188 + 40);
  v9 = *(_QWORD *)(v1 + qword_1EDCDE188 + 48);
  v10 = *(_QWORD *)(v1 + qword_1EDCDE188 + 56);
  v11 = *(_OWORD *)(v1 + qword_1EDCDE188 + 64);
  v12 = *(_QWORD *)(v1 + qword_1EDCDE188 + 80);
  v13 = *(_QWORD *)(v1 + qword_1EDCDE188 + 88);
  v14 = a1[1];
  *v2 = *a1;
  v2[1] = v14;
  v15 = a1[3];
  v2[2] = a1[2];
  v2[3] = v15;
  v16 = a1[5];
  v2[4] = a1[4];
  v2[5] = v16;
  return sub_1832CF04C(v4, v3, v5, v6, v7, v8, v9, v10, v11, *((unint64_t *)&v11 + 1), v12, v13);
}

void HTTP.Progress.deinit()
{
  type metadata accessor for HTTP.Progress();
}

uint64_t sub_1832C567C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v3 = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTP.Progress<A, Pack{repeat B}>, a1);
  sub_1832C177C((uint64_t)&v5, a1, (uint64_t)&protocol witness table for HTTP.Progress<A, Pack{repeat B}>, v3, (uint64_t)&unk_1E1498008, (uint64_t)sub_1832D12A0, (uint64_t)&block_descriptor_316);
  swift_release();
  sub_1830620D4(v1 + qword_1EDCDE170, &qword_1EDCDE178);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1832CF04C(*(_QWORD *)(v1 + qword_1EDCDE188), *(_QWORD *)(v1 + qword_1EDCDE188 + 8), *(_QWORD *)(v1 + qword_1EDCDE188 + 16), *(_QWORD *)(v1 + qword_1EDCDE188 + 24), *(_QWORD *)(v1 + qword_1EDCDE188 + 32), *(_QWORD *)(v1 + qword_1EDCDE188 + 40), *(_QWORD *)(v1 + qword_1EDCDE188 + 48), *(_QWORD *)(v1 + qword_1EDCDE188 + 56), *(_QWORD *)(v1 + qword_1EDCDE188 + 64), *(_QWORD *)(v1 + qword_1EDCDE188 + 72), *(_QWORD *)(v1 + qword_1EDCDE188 + 80), *(_QWORD *)(v1 + qword_1EDCDE188 + 88));
  return v1;
}

void HTTP.Progress.__deallocating_deinit()
{
  sub_18329AC28((void (*)(void))HTTP.Progress.deinit);
}

unsigned int *sub_1832C578C(unsigned int *result)
{
  unint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v1 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32);
  v2 = *((unsigned __int8 *)result + 4) >> 6;
  if (v2)
  {
    if (v2 == 1)
    {
      v5 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32) & 0x3FFFFFFFFFLL;
      v6 = 0u;
      v7 = 0u;
      v8 = 0u;
      v9 = 0u;
      v4 = 0x8000000000000000;
    }
    else
    {
      if (v2 != 2)
        return result;
      if (v1 == 0x8000000001)
      {
        v3 = 1;
      }
      else
      {
        if (v1 != 0x8000000002)
          return result;
        v3 = 2;
      }
      v5 = v3;
      v6 = 0u;
      v7 = 0u;
      v8 = 0u;
      v9 = 0u;
      v4 = 0xC000000000000000;
    }
    v11 = 0;
    v10 = v4;
  }
  else
  {
    v5 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32);
    v6 = 0u;
    v7 = 0u;
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    v11 = 0;
  }
  return (unsigned int *)sub_1832C5868(&v5);
}

uint64_t sub_1832C5868(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD aBlock[6];
  _OWORD v17[6];

  v3 = sub_183B915FC();
  v14 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_183B91614();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1832D0F10(a1, v17);
  if (qword_1EDCDC5C8 != -1)
    swift_once();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v1;
  sub_1832D0F10(v17, (_OWORD *)(v10 + 24));
  aBlock[4] = sub_1832D0F80;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_18305665C;
  aBlock[3] = &block_descriptor_292;
  v11 = _Block_copy(aBlock);
  swift_retain();
  sub_1832D0FC8(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1832CFF80);
  sub_183B91608();
  v15 = MEMORY[0x1E0DEE9D8];
  sub_183064644((unint64_t *)&qword_1ECD840F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD840D0);
  sub_1832D133C((unint64_t *)&qword_1ECD840E0, (uint64_t *)&unk_1ECD840D0);
  sub_183B91D58();
  MEMORY[0x186DB21BC](0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_1832C5AA4(uint64_t a1, _OWORD *a2)
{
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t result;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  _QWORD v45[14];
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  _OWORD *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD v87[4];
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;

  v2 = a2;
  sub_1832D0F10(a2, &v80);
  v45[2] = *((_QWORD *)&v80 + 1);
  v45[3] = v81;
  v45[4] = v82;
  v45[5] = v83;
  v45[1] = v84;
  v45[6] = v86;
  v45[7] = v85;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE720);
  v45[12] = *(_QWORD *)(v4 - 8);
  v45[13] = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v67 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v66 = (char *)v45 - v7;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  v45[10] = *(_QWORD *)(v46 - 8);
  v8 = MEMORY[0x1E0C80A78](v46);
  v68 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v58 = (char *)v45 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v57 = (char *)v45 - v13;
  MEMORY[0x1E0C80A78](v12);
  v65 = (char *)v45 - v14;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE738);
  v45[11] = *(_QWORD *)(v54 - 8);
  v15 = MEMORY[0x1E0C80A78](v54);
  v53 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v51 = (char *)v45 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE728);
  v48 = *(_QWORD *)(v18 - 8);
  v49 = v18;
  MEMORY[0x1E0C80A78](v18);
  v47 = (char *)v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE178);
  v21 = MEMORY[0x1E0C80A78](v20);
  v45[9] = (char *)v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v52 = (uint64_t)v45 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(qword_1EDCDE650);
  v55 = *(_QWORD *)(v24 - 8);
  v56 = v24;
  v25 = MEMORY[0x1E0C80A78](v24);
  v45[8] = (char *)v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v50 = (char *)v45 - v27;
  v64 = a1;
  sub_1832C5568((uint64_t *)&v69);
  v28 = *((_QWORD *)&v69 + 1);
  v29 = v70;
  v61 = v71;
  v62 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v69;
  v30 = v72;
  v31 = v74;
  v59 = v75;
  v60 = v73;
  v32 = v76;
  v33 = v77;
  v34 = v78;
  v35 = v79;
  v89 = v69;
  v90 = v70;
  v91 = v71;
  v92 = v72;
  v93 = v73;
  v94 = v74;
  v95 = v75;
  v96 = v76;
  v97 = v77;
  v98 = v78;
  v99 = v79;
  v63 = v2;
  sub_1832D0F10(v2, v87);
  _s7Network4HTTPC5StateO2eeoiySbAE_AEtFZ_0((uint64_t)&v89);
  LOBYTE(v2) = v36;
  result = sub_1832CF04C((uint64_t)v62, v28, v29, v61, v30, v60, v31, v59, v32, v33, v34, v35);
  if ((v2 & 1) == 0)
  {
    v38 = v50;
    v39 = v64 + qword_1EDCDE170;
    swift_beginAccess();
    v40 = v52;
    sub_183062090(v39, v52, &qword_1EDCDE178);
    v42 = v55;
    v41 = v56;
    v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
    if (v62(v40, 1, v56) == 1)
    {
      sub_1830620D4(v40, &qword_1EDCDE178);
      v43 = v63;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v38, v40, v41);
      v43 = v63;
      sub_1832D0F10(v63, &v89);
      sub_1832D0FC8(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1832CFF80);
      v44 = v47;
      sub_183B91A64();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v44, v49);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v38, v41);
    }
    sub_1832D0F10(v43, v87);
    __asm { BR              X14 }
  }
  return result;
}

uint64_t sub_1832C6AE8@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t (*v1)(uint64_t);

  *a1 = sub_1832CF0DC;
  a1[1] = v1;
  return swift_retain();
}

void sub_1832C6AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _OWORD v19[4];
  __int128 v20;
  __int128 v21;
  _OWORD v22[6];

  v18[1] = a2;
  v18[0] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE728);
  v3 = *(_QWORD *)(v18[0] - 8);
  MEMORY[0x1E0C80A78](v18[0]);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE178);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v18 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1EDCDE650);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1 + qword_1EDCDE170;
  swift_beginAccess();
  sub_183062090(v16, (uint64_t)v11, &qword_1EDCDE178);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1830620D4((uint64_t)v11, &qword_1EDCDE178);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    sub_183B91A70();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v12);
    sub_1832C5440((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  v17 = v18[0];
  sub_1832C5568((uint64_t *)v22);
  v19[0] = v22[0];
  v19[1] = v22[1];
  v19[2] = v22[2];
  v19[3] = v22[3];
  v20 = v22[4];
  v21 = v22[5];
  sub_183B91A64();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v17);
  sub_1832C5568((uint64_t *)v19);
  __asm { BR              X14 }
}

uint64_t sub_1832C6D80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  sub_1832CF04C(a1, a2, a3, a4, a5, a6, a7, a8, v9, a9, v10, v11);
  sub_183B91A70();
  swift_retain();
  return sub_183B91A4C();
}

uint64_t sub_1832C6E58(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t (*a5)(char *))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return a5(v9);
}

uint64_t sub_1832C6EEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_1832C6F04()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_18328F590;
  return sub_183B9219C();
}

void sub_1832C6F78()
{
  uint64_t v0;
  uint64_t v1[10];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE720);
  MEMORY[0x1E0C80A78](v0);
  sub_1832C5568(v1);
  __asm { BR              X3 }
}

uint64_t sub_1832C7014@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v12 - 256) = v11;
  *(_QWORD *)(v12 - 248) = v3;
  *(_QWORD *)(v12 - 240) = v4;
  *(_QWORD *)(v12 - 232) = v8;
  *(_BYTE *)(v12 - 224) = a2;
  *(_QWORD *)(v12 - 216) = v5;
  *(_QWORD *)(v12 - 208) = v6;
  *(_QWORD *)(v12 - 200) = v2;
  *(_QWORD *)(v12 - 192) = v7;
  *(_QWORD *)(v12 - 184) = a1 & 0x3FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v12 - 176) = v10;
  *(_QWORD *)(v12 - 168) = v9;
  return sub_183B919EC();
}

uint64_t sub_1832C71B4()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

uint64_t sub_1832C71F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832C7204(a1, a2, a3, (void (*)(_BYTE *))sub_1832D1558);
}

uint64_t sub_1832C7204(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v6[72];

  sub_183B92250();
  a4(v6);
  return sub_183B9228C();
}

unsigned int *sub_1832C7244(unsigned int *a1)
{
  return sub_1832C578C(a1);
}

uint64_t HTTP.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t HTTP.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1832C72F4(NSObject *a1)
{
  return HTTP.configure(parameters:)(a1);
}

uint64_t sub_1832C7314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = swift_allocObject();
  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 128);
  v6 = sub_183B91A7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (_QWORD *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 136));
  *v7 = a1;
  v7[1] = a2;
  return v4;
}

uint64_t sub_1832C7398()
{
  uint64_t v0;
  void (*v1)(uint64_t (*)(uint64_t, uint64_t), uint64_t);

  v1 = *(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_retain();
  v1(sub_1832D0DEC, v0);
  return swift_release();
}

uint64_t sub_1832C73E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;

  v40 = a3;
  v41 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)a3 + 88);
  v4 = sub_183B91A7C();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x1E0C80A78](v4);
  v35 = (char *)&v34 - v5;
  v36 = sub_183B91A40();
  v6 = sub_183B91CF8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v37 = (char *)&v34 - v8;
  v9 = sub_183B91CF8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v34 - v12;
  v14 = *(_QWORD *)(v3 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v42 = (char *)&v34 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v41, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v3) == 1)
  {
    v20 = v38;
    v19 = v39;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v21 = v40 + *(_QWORD *)(*(_QWORD *)v40 + 128);
    swift_beginAccess();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19);
    if (!(_DWORD)result)
    {
      v23 = v35;
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v35, v21, v19);
      sub_183B91A70();
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    }
  }
  else
  {
    v34 = v17;
    v24 = v7;
    v41 = v6;
    v25 = v36;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v42, v13, v3);
    v26 = v40 + *(_QWORD *)(*(_QWORD *)v40 + 128);
    swift_beginAccess();
    v28 = v38;
    v27 = v39;
    v29 = 1;
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v26, 1, v39);
    v31 = v37;
    if (!v30)
    {
      v32 = v35;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v35, v26, v27);
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v34, v42, v3);
      sub_183B91A64();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v27);
      v29 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v31, v29, 1, v25);
    v33 = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v31, v41);
    sub_1832C7398(v33);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v42, v3);
  }
  return result;
}

uint64_t AsyncSequenceReceive.makeAsyncIterator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v0 = sub_183B91A58();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v9 - v2;
  v4 = sub_183B91AAC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v9 - v6;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DF07B8], v0);
  sub_183B91AB8();
  sub_1832C7398();
  sub_183B91A88();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1832C7828(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t WitnessTablePack;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD v22[2];
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];

  v23 = a2;
  v3 = (_QWORD *)*a2;
  v4 = sub_183B915FC();
  v26 = *(_QWORD *)(v4 - 8);
  v27 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_183B91614();
  v24 = *(_QWORD *)(v7 - 8);
  v25 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v3[11];
  v11 = sub_183B91A7C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v22 - v13;
  if (qword_1EDCDC5C8 != -1)
    swift_once();
  v22[1] = qword_1EDCF2A70;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = v3[10];
  *((_QWORD *)v16 + 3) = v10;
  *((_QWORD *)v16 + 4) = v3[12];
  *((_QWORD *)v16 + 5) = swift_allocateMetadataPack();
  *((_QWORD *)v16 + 6) = v3[14];
  WitnessTablePack = swift_allocateWitnessTablePack();
  v18 = v23;
  *((_QWORD *)v16 + 7) = WitnessTablePack;
  *((_QWORD *)v16 + 8) = v18;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v16[v15], v14, v11);
  aBlock[4] = sub_1832D0E6C;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_18305665C;
  aBlock[3] = &block_descriptor_274;
  v19 = _Block_copy(aBlock);
  swift_retain();
  sub_183B91608();
  v28 = MEMORY[0x1E0DEE9D8];
  sub_183064644((unint64_t *)&qword_1ECD840F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD840D0);
  sub_1832D133C((unint64_t *)&qword_1ECD840E0, (uint64_t *)&unk_1ECD840D0);
  v20 = v27;
  sub_183B91D58();
  MEMORY[0x186DB21BC](0, v9, v6, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);
  return swift_release();
}

uint64_t sub_1832C7AF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  _BYTE v16[24];

  v4 = *a1;
  v5 = sub_183B91A7C();
  v6 = sub_183B91CF8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v12 = &v16[-v11];
  v13 = (char *)a1 + *(_QWORD *)(v4 + 128);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v7 + 16))(v12, v13, v6);
  v14 = *(_QWORD *)(v5 - 8);
  LODWORD(v4) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v5);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
  if ((_DWORD)v4 != 1)
    return sub_183B91A70();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v10, a2, v5);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v5);
  swift_beginAccess();
  (*(void (**)(char *, _BYTE *, uint64_t))(v7 + 40))(v13, v10, v6);
  return swift_endAccess();
}

uint64_t AsyncSequenceReceive.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 128);
  sub_183B91A7C();
  v2 = sub_183B91CF8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

void AsyncSequenceReceive.__deallocating_deinit()
{
  sub_18329AC28((void (*)(void))AsyncSequenceReceive.deinit);
}

uint64_t sub_1832C7CE8()
{
  AsyncSequenceReceive.makeAsyncIterator()();
  return swift_release();
}

void Connection1<>.send(_:metadata:isComplete:)()
{
  type metadata accessor for SendProgress();
}

uint64_t sub_1832C7D6C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[15];

  v5 = swift_retain();
  v6 = sub_1832D0690(v5, (void (*)(_QWORD, uint64_t *))type metadata accessor for SendProgress, (uint64_t (*)(uint64_t))sub_1832CF154);
  swift_release();
  type metadata accessor for NWConnection.ContentContext();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(0x746E6F43646E6573, 0xEB00000000747865, 0, v4, 0, v3, 0.5);
  v8 = v7;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v2;
  *(_QWORD *)(v9 + 24) = v6;
  v11[0] = (uint64_t)sub_1832CF294;
  v11[1] = v9;
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(v1, v0, v8, 1, v11);
  swift_release();
  swift_release();
  return v6;
}

void Connection1<>.send(_:metadata:isComplete:)(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  sub_183257F24(a1, a2);
  Connection1<>.send(_:metadata:isComplete:)();
}

uint64_t sub_1832C7EC0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  sub_18308485C(v1, v2);
  return a1;
}

uint64_t Connection1<>.receive(minimumLength:maximumLength:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  return swift_task_switch();
}

uint64_t sub_1832C7F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE1A0);
  *v4 = v0;
  v4[1] = sub_1832C7FBC;
  return sub_183B9219C();
}

uint64_t sub_1832C7FBC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832C8020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(unsigned __int8 *)(v0 + 40);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v2, v1, v3, v4);
}

uint64_t sub_1832C8078()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832C80B0(uint64_t a1, uint64_t a2, uint32_t a3, uint32_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE718);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = *(_QWORD *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v14 = *(NSObject **)(v11 + 16);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_1832D0DAC;
  *(_QWORD *)(v15 + 24) = v13;
  aBlock[4] = sub_1832D1390;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_183083F3C;
  aBlock[3] = &block_descriptor_258;
  v16 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive(v14, a3, a4, v16);
  swift_unknownObjectRelease();
  _Block_release(v16);
  return swift_release();
}

uint64_t Connection1<>.receive(exactly:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  return swift_task_switch();
}

uint64_t sub_1832C8258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE1A0);
  *v3 = v0;
  v3[1] = sub_1832C8310;
  return sub_183B9219C();
}

uint64_t sub_1832C8310()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832C8374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(unsigned __int8 *)(v0 + 40);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v2, v1, v3, v4);
}

uint64_t sub_1832C83CC()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832C8404(uint64_t a1, uint64_t a2, uint32_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE718);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = *(_QWORD *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v12 = *(NSObject **)(v9 + 16);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = sub_1832D0C5C;
  *(_QWORD *)(v13 + 24) = v11;
  aBlock[4] = sub_1832D1390;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_183083F3C;
  aBlock[3] = &block_descriptor_238;
  v14 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive(v12, a3, a3, v14);
  swift_unknownObjectRelease();
  _Block_release(v14);
  return swift_release();
}

uint64_t sub_1832C8584(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t (**v13)(uint64_t, uint64_t, uint64_t);
  NSObject *v14;
  void *v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t (**v22)(uint64_t, uint64_t, uint64_t);
  NSObject *v23;
  void *v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  uint64_t v28;
  __int128 aBlock;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a2 >> 60 == 15)
  {
    if (a3)
    {
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = MEMORY[0x1E0DEE9D8];
      v13 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
      v14 = *(NSObject **)(a3 + 16);
      v32 = a9;
      v33 = v12;
      *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v30 = sub_1832D405C;
      v31 = a10;
      v15 = _Block_copy(&aBlock);
      swift_retain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_release();
      nw_content_context_foreach_protocol_metadata(v14, v15);
      _Block_release(v15);
      swift_unknownObjectRelease();
      swift_beginAccess();
      v16 = *v13;
      swift_bridgeObjectRetain();
      swift_release();
      aBlock = xmmword_183B9FD60;
      v30 = v16;
      LOBYTE(v31) = a4 & 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE718);
      sub_183B919EC();
      return swift_release();
    }
  }
  else if (a3)
  {
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = MEMORY[0x1E0DEE9D8];
    v22 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
    v23 = *(NSObject **)(a3 + 16);
    v32 = a7;
    v33 = v21;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v30 = sub_1832D405C;
    v31 = a8;
    v24 = _Block_copy(&aBlock);
    sub_183261798(a1, a2);
    sub_183261798(a1, a2);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_content_context_foreach_protocol_metadata(v23, v24);
    _Block_release(v24);
    swift_unknownObjectRelease();
    swift_beginAccess();
    v25 = *v22;
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&aBlock = a1;
    *((_QWORD *)&aBlock + 1) = a2;
    v30 = v25;
    LOBYTE(v31) = a4 & 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE718);
    sub_183B919EC();
    sub_183084848(a1, a2);
    return swift_release();
  }
  v27 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
  sub_18323C200();
  swift_allocError();
  if (HIDWORD(v27) <= 0xFE)
  {
    *(_DWORD *)v28 = v27;
    *(_BYTE *)(v28 + 4) = BYTE4(v27);
  }
  else
  {
    *(_DWORD *)v28 = 54;
    *(_BYTE *)(v28 + 4) = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE718);
  return sub_183B919E0();
}

void Connection1<>.receive()(uint64_t a1)
{
  sub_1832C99D0(a1, &qword_1EDCDE1A0);
}

{
  sub_1832C99D0(a1, &qword_1EDCDE1B8);
}

uint64_t sub_1832C88B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_1832D0C0C;
  *(_QWORD *)(v8 + 24) = v6;
  v9 = *(NSObject **)(v7 + 16);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_1832D0C48;
  *(_QWORD *)(v10 + 24) = v8;
  v13[4] = sub_183083FD4;
  v13[5] = v10;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = sub_183083F3C;
  v13[3] = &block_descriptor_218;
  v11 = _Block_copy(v13);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive(v9, 1u, 0xFFFFFFFF, v11);
  swift_unknownObjectRelease();
  _Block_release(v11);
  return swift_release();
}

uint64_t sub_1832C89EC(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5, void (*a6)(uint64_t, unint64_t, uint64_t, _QWORD, int *))
{
  uint64_t v9;
  uint64_t *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v18;
  uint64_t *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  unint64_t v24;
  void (*v25)(uint64_t, unint64_t, uint64_t, _QWORD, int *);
  int v26;
  char v27;
  uint64_t aBlock;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  void *v31;
  _QWORD *(*v32)(uint64_t, uint64_t);
  uint64_t v33;

  if (a2 >> 60 == 15)
  {
    if (a3)
    {
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = MEMORY[0x1E0DEE9D8];
      v10 = (uint64_t *)(v9 + 16);
      v11 = *(NSObject **)(a3 + 16);
      v32 = sub_1832D0738;
      v33 = v9;
      aBlock = MEMORY[0x1E0C809B0];
      v29 = 1107296256;
      v30 = sub_1832D405C;
      v31 = &block_descriptor_223;
      v12 = _Block_copy(&aBlock);
      swift_retain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_release();
      nw_content_context_foreach_protocol_metadata(v11, v12);
      _Block_release(v12);
      swift_unknownObjectRelease();
      swift_beginAccess();
      v13 = *v10;
      swift_bridgeObjectRetain();
      swift_release();
      v27 = -1;
      v26 = 0;
      a6(0, 0xC000000000000000, v13, a4 & 1, &v26);
      v14 = 0;
      v15 = 0xC000000000000000;
LABEL_6:
      sub_18308485C(v14, v15);
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  else if (a3)
  {
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = MEMORY[0x1E0DEE9D8];
    v19 = (uint64_t *)(v18 + 16);
    v25 = a6;
    v20 = *(NSObject **)(a3 + 16);
    v32 = sub_1832D0738;
    v33 = v18;
    aBlock = MEMORY[0x1E0C809B0];
    v29 = 1107296256;
    v30 = sub_1832D405C;
    v31 = &block_descriptor_228;
    v21 = _Block_copy(&aBlock);
    sub_183261798(a1, a2);
    sub_183261798(a1, a2);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_content_context_foreach_protocol_metadata(v20, v21);
    _Block_release(v21);
    swift_unknownObjectRelease();
    swift_beginAccess();
    v22 = *v19;
    swift_bridgeObjectRetain();
    swift_release();
    v27 = -1;
    v26 = 0;
    v25(a1, a2, v22, a4 & 1, &v26);
    sub_183084848(a1, a2);
    v14 = a1;
    v15 = a2;
    goto LABEL_6;
  }
  v24 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
  if (BYTE4(v24) == 255)
  {
    BYTE4(aBlock) = 0;
    LODWORD(aBlock) = 54;
  }
  else
  {
    LODWORD(aBlock) = *a5;
    BYTE4(aBlock) = BYTE4(v24);
  }
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t *))a6)(0, 0, 1, 0, &aBlock);
}

uint64_t sub_1832C8CF4(_BYTE *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _BYTE v8[40];

  sub_18324A894((uint64_t)a2, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE708);
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    sub_18324A894((uint64_t)a2, (uint64_t)v8);
    swift_dynamicCast();
    *a1 = 1;
    return sub_183257F24(v6, v7);
  }
  else
  {
    sub_18324A894((uint64_t)a2, (uint64_t)v8);
    if (swift_dynamicCast())
    {
      sub_18308485C(v6, v7);
      *a1 = 2;
      sub_18324A894((uint64_t)a2, (uint64_t)v8);
      swift_dynamicCast();
      return v6;
    }
    else
    {
      *a1 = 2;
      __swift_project_boxed_opaque_existential_2(a2, a2[3]);
      sub_183B912A8();
      swift_allocObject();
      sub_183B9129C();
      v4 = sub_183B91284();
      swift_release();
    }
  }
  return v4;
}

uint64_t sub_1832C8E9C(uint64_t a1, unint64_t a2)
{
  if (swift_dynamicCastMetatype())
    __asm { BR              X10 }
  if (swift_dynamicCastMetatype())
  {
    sub_18324A994(a1, a2);
    return swift_dynamicCast();
  }
  else
  {
    sub_183B91278();
    swift_allocObject();
    sub_183B9126C();
    sub_183B91254();
    return swift_release();
  }
}

void Connection1<>.send(_:metadata:)()
{
  type metadata accessor for SendProgress();
}

uint64_t sub_1832C92C8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[15];

  v4 = swift_retain();
  v5 = sub_1832D0690(v4, (void (*)(_QWORD, uint64_t *))type metadata accessor for SendProgress, (uint64_t (*)(uint64_t))sub_1832CF154);
  swift_release();
  type metadata accessor for NWConnection.ContentContext();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(0x746E6F43646E6573, 0xEB00000000747865, 0, 0, 0, v3, 0.5);
  v7 = v6;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v5;
  v10[0] = (uint64_t)sub_1832D155C;
  v10[1] = v8;
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(v1, v0, v7, 1, v10);
  swift_release();
  swift_release();
  return v5;
}

uint64_t sub_1832C93C8(unsigned int *a1)
{
  unsigned int *v1;
  unint64_t v2;
  int v4;
  char v5;
  int v6;
  char v7;

  if (*((unsigned __int8 *)a1 + 4) == 255)
  {
    v7 = 0x80;
    v6 = 3;
    v1 = (unsigned int *)&v6;
  }
  else
  {
    v2 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
    v4 = *a1;
    v5 = (v2 | 0x4000000000) >> 32;
    v1 = (unsigned int *)&v4;
  }
  return sub_1832C1E08(v1);
}

void Connection1<>.send(_:metadata:)(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  sub_183257F24(a1, a2);
  Connection1<>.send(_:metadata:)();
}

uint64_t sub_1832C9480(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  sub_18308485C(v1, v2);
  return a1;
}

uint64_t Connection1<>.receiveOnce()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch();
}

uint64_t sub_1832C94C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE1B8);
  *v2 = v0;
  v2[1] = sub_1832C9578;
  return sub_183B9219C();
}

uint64_t sub_1832C9578()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832C95DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v2, v1, v3);
}

uint64_t sub_1832C962C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832C9660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE710);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = *(_QWORD *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v10 = *(NSObject **)(v7 + 16);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_1832D0BF8;
  *(_QWORD *)(v11 + 24) = v9;
  aBlock[4] = sub_1832D1390;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_183083F3C;
  aBlock[3] = &block_descriptor_201;
  v12 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832C97D4(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  _QWORD aBlock[6];

  if (a2 >> 60 == 15 || a3 == 0)
  {
    v6 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
    if (HIDWORD(v6) <= 0xFE)
    {
      sub_18323C200();
      swift_allocError();
      *(_DWORD *)v7 = v6;
      *(_BYTE *)(v7 + 4) = BYTE4(v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE710);
      return sub_183B919E0();
    }
  }
  else
  {
    v10 = result;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = MEMORY[0x1E0DEE9D8];
    v12 = *(NSObject **)(a3 + 16);
    aBlock[4] = sub_1832D0738;
    aBlock[5] = v11;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1832D405C;
    aBlock[3] = &block_descriptor_206;
    v13 = _Block_copy(aBlock);
    sub_183261798(v10, a2);
    sub_183261798(v10, a2);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_content_context_foreach_protocol_metadata(v12, v13);
    _Block_release(v13);
    swift_unknownObjectRelease();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE710);
    sub_183B919EC();
    sub_183084848(v10, a2);
    return swift_release();
  }
  return result;
}

void sub_1832C99D0(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
  type metadata accessor for AsyncSequenceReceive();
}

uint64_t sub_1832C9A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = sub_1832C7314(v0, v3);
  swift_retain();
  return v4;
}

uint64_t sub_1832C9A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_1832D0BAC;
  *(_QWORD *)(v8 + 24) = v6;
  v9 = *(NSObject **)(v7 + 16);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_1832D0BE4;
  *(_QWORD *)(v10 + 24) = v8;
  v13[4] = sub_1832D1390;
  v13[5] = v10;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = sub_183083F3C;
  v13[3] = &block_descriptor_186;
  v11 = _Block_copy(v13);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v9, v11);
  _Block_release(v11);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832C9BAC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t (*a6)(uint64_t, unint64_t, uint64_t, int *))
{
  unint64_t v8;
  uint64_t v12;
  uint64_t *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  int v18;
  char v19;
  _QWORD aBlock[6];

  if (a2 >> 60 == 15 || a3 == 0)
  {
    v8 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
    if (BYTE4(v8) == 255)
    {
      BYTE4(aBlock[0]) = 0;
      LODWORD(aBlock[0]) = 22;
    }
    else
    {
      LODWORD(aBlock[0]) = *a5;
      BYTE4(aBlock[0]) = BYTE4(v8);
    }
    return a6(0, 0, 1, (int *)aBlock);
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = MEMORY[0x1E0DEE9D8];
    v13 = (uint64_t *)(v12 + 16);
    v14 = *(NSObject **)(a3 + 16);
    aBlock[4] = sub_1832D0738;
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1832D405C;
    aBlock[3] = &block_descriptor_191;
    v15 = _Block_copy(aBlock);
    sub_183261798(a1, a2);
    sub_183261798(a1, a2);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_content_context_foreach_protocol_metadata(v14, v15);
    _Block_release(v15);
    swift_unknownObjectRelease();
    swift_beginAccess();
    v16 = *v13;
    swift_bridgeObjectRetain();
    swift_release();
    v19 = -1;
    v18 = 0;
    a6(a1, a2, v16, &v18);
    sub_183084848(a1, a2);
    sub_18308485C(a1, a2);
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

void Connection1<>.send(type:_:metadata:isFinal:)()
{
  sub_1832C9FC8();
}

uint64_t sub_1832C9DCC(uint64_t a1)
{
  int v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19[15];

  v7 = MEMORY[0x1E0DEE9D8];
  if (v4)
    v7 = v4;
  *(_QWORD *)(v5 - 72) = v7;
  v8 = qword_1EDCDC5C0;
  swift_bridgeObjectRetain();
  if (v8 != -1)
    swift_once();
  v9 = qword_1EDCF2A68;
  type metadata accessor for NWProtocolFramer.Message();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = nw_framer_protocol_create_message(*(nw_protocol_definition_t *)(v9 + 32));
  v19[3] = MEMORY[0x1E0DEE0F8];
  LODWORD(v19[0]) = v1;
  swift_retain();
  sub_1832A4698((uint64_t)v19, 1701869908, 0xE400000000000000);
  v11 = swift_release();
  MEMORY[0x186DB1E20](v11);
  if (*(_QWORD *)((*(_QWORD *)(v5 - 72) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v5 - 72) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    sub_183B91968();
  sub_183B91998();
  sub_183B91944();
  v12 = *(_QWORD *)(v5 - 72);
  type metadata accessor for NWConnection.ContentContext();
  swift_initStackObject();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(5655636, 0xE300000000000000, 0, v3 & 1, 0, v12, 0.5);
  v14 = v13;
  v15 = sub_1832C8CF4(v19, v2);
  v17 = v16;
  v19[0] = (uint64_t)sub_1832CF2E8;
  v19[1] = a1;
  sub_18324A994(v15, v16);
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(v15, v17, v14, 1, v19);
  sub_18308485C(v15, v17);
  swift_release();
  sub_18308485C(v15, v17);
  swift_release();
  return a1;
}

void sub_1832C9FC8()
{
  type metadata accessor for SendProgress();
}

uint64_t sub_1832CA018()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_retain();
  v1 = sub_1832D0690(v0, (void (*)(_QWORD, uint64_t *))type metadata accessor for SendProgress, (uint64_t (*)(uint64_t))sub_1832CF154);
  swift_release();
  return v1;
}

uint64_t Connection1<>.receiveOnce<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a1;
  v5[8] = a3;
  return swift_task_switch();
}

uint64_t sub_1832CA07C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE1C8);
  *v3 = v0;
  v3[1] = sub_1832CA13C;
  return sub_183B9219C();
}

uint64_t sub_1832CA13C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832CA1A0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  char v4;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_DWORD *)(v0 + 16);
  v6 = *(_OWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_BYTE *)(v0 + 48);
  swift_task_dealloc();
  *(_DWORD *)v1 = v2;
  *(_OWORD *)(v1 + 8) = v6;
  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832CA210()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832CA244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE700);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = *(_QWORD *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v10 = *(NSObject **)(v7 + 16);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_1832D0B1C;
  *(_QWORD *)(v11 + 24) = v9;
  aBlock[4] = sub_1832D1390;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_183083F3C;
  aBlock[3] = &block_descriptor_168;
  v12 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832CA3B8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  NSObject *v11;
  nw_protocol_metadata_t v12;
  nw_protocol_metadata_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  void *v19;
  void *v20;
  char v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  int v27;
  uint64_t aBlock;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  void *v31;
  _QWORD *(*v32)(uint64_t, uint64_t);
  uint64_t v33;

  v5 = *((unsigned __int8 *)a5 + 4);
  v6 = *a5;
  if (a3)
  {
    v10 = qword_1EDCDC5C0;
    swift_retain();
    if (v10 != -1)
      swift_once();
    v11 = *(NSObject **)(a3 + 16);
    v12 = nw_content_context_copy_protocol_metadata(v11, *(nw_protocol_definition_t *)(qword_1EDCF2A68 + 32));
    if (!v12)
    {
LABEL_15:
      swift_release();
      goto LABEL_16;
    }
    v13 = v12;
    v14 = sub_1832A39D4((uint64_t)v12);
    if (v14)
    {
      ((void (*)(nw_protocol_metadata_t))v14[12])(v13);
      type metadata accessor for NWProtocolFramer.Message();
      if (swift_dynamicCastClass())
      {
        v27 = sub_1832BFF34();
        if (a2 >> 60 == 15)
          v15 = 0;
        else
          v15 = a1;
        v16 = 0xC000000000000000;
        if (a2 >> 60 != 15)
          v16 = a2;
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
        v26 = v15;
        v17 = swift_allocObject();
        *(_QWORD *)(v17 + 16) = MEMORY[0x1E0DEE9D8];
        v18 = (void **)(v17 + 16);
        v32 = sub_1832D0738;
        v33 = v17;
        aBlock = MEMORY[0x1E0C809B0];
        v29 = 1107296256;
        v30 = sub_1832D405C;
        v31 = &block_descriptor_173;
        v19 = _Block_copy(&aBlock);
        sub_183261798(a1, a2);
        swift_unknownObjectRetain();
        swift_retain();
        swift_release();
        nw_content_context_foreach_protocol_metadata(v11, v19);
        _Block_release(v19);
        swift_unknownObjectRelease();
        swift_beginAccess();
        v20 = *v18;
        swift_bridgeObjectRetain();
        swift_release();
        v21 = *(_BYTE *)(a3 + 64);
        LODWORD(aBlock) = v27;
        v29 = v26;
        v30 = v25;
        v31 = v20;
        LOBYTE(v32) = v21;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE700);
        sub_183B919EC();
        swift_release();
        return swift_release();
      }
      swift_release();
      goto LABEL_15;
    }
    swift_release();
    swift_unknownObjectRelease();
  }
LABEL_16:
  v23 = v6 | (v5 << 32);
  sub_18323C200();
  swift_allocError();
  if (HIDWORD(v23) <= 0xFE)
  {
    *(_DWORD *)v24 = v6;
    *(_BYTE *)(v24 + 4) = BYTE4(v23);
  }
  else
  {
    *(_DWORD *)v24 = 22;
    *(_BYTE *)(v24 + 4) = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE700);
  return sub_183B919E0();
}

void Connection1<>.receive()()
{
  sub_1832CCFC0(&qword_1EDCDE1C8);
}

{
  sub_1832CCFC0(qword_1EDCDE1F0);
}

uint64_t sub_1832CA6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_1832D0ABC;
  *(_QWORD *)(v8 + 24) = v6;
  v9 = *(NSObject **)(v7 + 16);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_1832D0B08;
  *(_QWORD *)(v10 + 24) = v8;
  v13[4] = sub_1832D1390;
  v13[5] = v10;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = sub_183083F3C;
  v13[3] = &block_descriptor_153;
  v11 = _Block_copy(v13);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v9, v11);
  _Block_release(v11);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832CA7E0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void (*a6)(uint64_t *, int *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  NSObject *v13;
  nw_protocol_metadata_t v14;
  nw_protocol_metadata_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  char v30;
  int v31;
  char v32;
  uint64_t aBlock;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  _QWORD *(*v37)(uint64_t, uint64_t);
  uint64_t v38;

  v7 = *((unsigned __int8 *)a5 + 4);
  v8 = *a5;
  if (a3)
  {
    v12 = qword_1EDCDC5C0;
    swift_retain();
    if (v12 != -1)
      swift_once();
    v13 = *(NSObject **)(a3 + 16);
    v14 = nw_content_context_copy_protocol_metadata(v13, *(nw_protocol_definition_t *)(qword_1EDCF2A68 + 32));
    if (!v14)
    {
LABEL_15:
      swift_release();
      goto LABEL_16;
    }
    v15 = v14;
    v16 = sub_1832A39D4((uint64_t)v14);
    if (v16)
    {
      ((void (*)(nw_protocol_metadata_t))v16[12])(v15);
      type metadata accessor for NWProtocolFramer.Message();
      if (swift_dynamicCastClass())
      {
        v28 = sub_1832BFF34();
        if (a2 >> 60 == 15)
          v17 = 0;
        else
          v17 = a1;
        v18 = 0xC000000000000000;
        if (a2 >> 60 != 15)
          v18 = a2;
        v26 = v18;
        v27 = v17;
        v19 = swift_allocObject();
        *(_QWORD *)(v19 + 16) = MEMORY[0x1E0DEE9D8];
        v20 = (uint64_t *)(v19 + 16);
        v37 = sub_1832D0738;
        v38 = v19;
        aBlock = MEMORY[0x1E0C809B0];
        v34 = 1107296256;
        v35 = sub_1832D405C;
        v36 = (uint64_t)&block_descriptor_158;
        v21 = _Block_copy(&aBlock);
        sub_183261798(a1, a2);
        swift_unknownObjectRetain();
        swift_retain();
        swift_release();
        nw_content_context_foreach_protocol_metadata(v13, v21);
        _Block_release(v21);
        swift_unknownObjectRelease();
        swift_beginAccess();
        v22 = *v20;
        swift_bridgeObjectRetain();
        swift_release();
        v23 = *(_BYTE *)(a3 + 64);
        aBlock = v28;
        v34 = v27;
        v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v26;
        v36 = v22;
        LOBYTE(v37) = v23;
        v30 = -1;
        v29 = 0;
        a6(&aBlock, &v29);
        sub_18308485C(v27, v26);
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      swift_release();
      goto LABEL_15;
    }
    swift_release();
    swift_unknownObjectRelease();
  }
LABEL_16:
  v25 = v8 | (v7 << 32);
  aBlock = 0;
  v34 = 0;
  v35 = 0;
  v36 = 1;
  LOBYTE(v37) = 0;
  if (BYTE4(v25) == 255)
  {
    v32 = 0;
    LODWORD(v25) = 22;
  }
  else
  {
    v32 = (v8 | (unint64_t)(v7 << 32)) >> 32;
  }
  v31 = v25;
  return ((uint64_t (*)(uint64_t *, int *))a6)(&aBlock, &v31);
}

void Connection1.send<A>(_:metadata:isFinal:)()
{
  type metadata accessor for SendProgress();
}

uint64_t sub_1832CAB00()
{
  _QWORD *v0;
  char v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v16;
  unint64_t v17;
  uint64_t v18[15];

  v3 = swift_retain();
  v4 = sub_1832D0690(v3, (void (*)(_QWORD, uint64_t *))type metadata accessor for SendProgress, (uint64_t (*)(uint64_t))sub_1832CF154);
  swift_release();
  v5 = MEMORY[0x1E0DEE9D8];
  if (v2)
    v5 = v2;
  v17 = v5;
  v6 = qword_1EDCDC5C0;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  v7 = qword_1EDCF2A68;
  type metadata accessor for NWProtocolFramer.Message();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = nw_framer_protocol_create_message(*(nw_protocol_definition_t *)(v7 + 32));
  v18[3] = MEMORY[0x1E0DEE0F8];
  LODWORD(v18[0]) = 0;
  swift_retain();
  sub_1832A4698((uint64_t)v18, 1701869908, 0xE400000000000000);
  v9 = swift_release();
  MEMORY[0x186DB1E20](v9);
  if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_183B91968();
  sub_183B91998();
  sub_183B91944();
  type metadata accessor for NWConnection.ContentContext();
  swift_initStackObject();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(1313821514, 0xE400000000000000, 0, v1 & 1, 0, v17, 0.5);
  v11 = v10;
  v12 = sub_1832C8CF4(&v16, v0);
  v14 = v13;
  v18[0] = (uint64_t)sub_1832CF2E8;
  v18[1] = v4;
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(v12, v14, v11, 1, v18);
  sub_18308485C(v12, v14);
  swift_release();
  swift_release();
  return v4;
}

uint64_t Connection1.receiveOnce<A>()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  return swift_task_switch();
}

uint64_t sub_1832CAD48()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = sub_1832CADF0;
  return sub_183B9219C();
}

uint64_t sub_1832CADF0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1832CAE64()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832CAE98(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t WitnessTablePack;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v21 = a3;
  v5 = *a2;
  v6 = *(_QWORD *)(*(_QWORD *)(*a2 + 88) + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  v7 = sub_183B919F8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v20 - v9;
  v11 = a2[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v20 - v9, a1, v7);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = *(_QWORD *)(v5 + 80);
  *((_QWORD *)v13 + 3) = swift_allocateMetadataPack();
  *((_QWORD *)v13 + 4) = v6;
  WitnessTablePack = swift_allocateWitnessTablePack();
  v15 = v21;
  *((_QWORD *)v13 + 5) = WitnessTablePack;
  *((_QWORD *)v13 + 6) = v15;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v13[v12], v10, v7);
  v16 = *(NSObject **)(v11 + 16);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1832D09FC;
  *(_QWORD *)(v17 + 24) = v13;
  aBlock[4] = sub_1832D1390;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_183083F3C;
  aBlock[3] = &block_descriptor_140;
  v18 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v16, v18);
  _Block_release(v18);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832CB068(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  nw_protocol_metadata_t v11;
  nw_protocol_metadata_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  MEMORY[0x1E0C80A78](a1);
  v7 = *((unsigned __int8 *)v6 + 4);
  v8 = *v6;
  if (v9)
  {
    v10 = qword_1EDCDC5C0;
    swift_retain();
    if (v10 != -1)
      swift_once();
    v11 = nw_content_context_copy_protocol_metadata(*(nw_content_context_t *)(a3 + 16), *(nw_protocol_definition_t *)(qword_1EDCF2A68 + 32));
    if (v11)
    {
      v12 = v11;
      v13 = sub_1832A39D4((uint64_t)v11);
      if (!v13)
      {
        swift_release();
        swift_unknownObjectRelease();
        goto LABEL_16;
      }
      ((void (*)(nw_protocol_metadata_t))v13[12])(v12);
      type metadata accessor for NWProtocolFramer.Message();
      v14 = swift_dynamicCastClass();
      swift_release();
      if (v14)
      {
        if (a2 >> 60 == 15)
          v15 = 0;
        else
          v15 = a1;
        if (a2 >> 60 == 15)
          v16 = 0xC000000000000000;
        else
          v16 = a2;
        sub_183261798(a1, a2);
        sub_1832C8E9C(v15, v16);
        sub_18308485C(v15, v16);
        __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
        sub_183B919F8();
        sub_183B919EC();
        return swift_release();
      }
    }
    swift_release();
  }
LABEL_16:
  v17 = v8 | (v7 << 32);
  sub_18323C200();
  swift_allocError();
  if (HIDWORD(v17) <= 0xFE)
  {
    *(_DWORD *)v18 = v8;
    *(_BYTE *)(v18 + 4) = BYTE4(v17);
  }
  else
  {
    *(_DWORD *)v18 = 22;
    *(_BYTE *)(v18 + 4) = 0;
  }
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  sub_183B919F8();
  return sub_183B919E0();
}

uint64_t Connection1.receiveMessageOnce<A>()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 88) + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDE1E0);
  v3[6] = swift_getTupleTypeMetadata3();
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1832CB3D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v2;
  *v2 = v0;
  v2[1] = sub_1832CB468;
  return sub_183B9219C();
}

uint64_t sub_1832CB468()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832CB4CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v1 + *(int *)(v2 + 48));
  v4 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 64));
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 40) - 8) + 32))(*(_QWORD *)(v0 + 16), v1);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v4);
}

uint64_t sub_1832CB544()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832CB584(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t WitnessTablePack;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v21 = a3;
  v5 = *a2;
  v6 = *(_QWORD *)(*(_QWORD *)(*a2 + 88) + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDE1E0);
  swift_getTupleTypeMetadata3();
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  v7 = sub_183B919F8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v20 - v9;
  v11 = a2[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v20 - v9, a1, v7);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = *(_QWORD *)(v5 + 80);
  *((_QWORD *)v13 + 3) = swift_allocateMetadataPack();
  *((_QWORD *)v13 + 4) = v6;
  WitnessTablePack = swift_allocateWitnessTablePack();
  v15 = v21;
  *((_QWORD *)v13 + 5) = WitnessTablePack;
  *((_QWORD *)v13 + 6) = v15;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v13[v12], v10, v7);
  v16 = *(NSObject **)(v11 + 16);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1832D0888;
  *(_QWORD *)(v17 + 24) = v13;
  aBlock[4] = sub_1832D1390;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_183083F3C;
  aBlock[3] = &block_descriptor_125;
  v18 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v16, v18);
  _Block_release(v18);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832CB788(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  nw_protocol_metadata_t v23;
  nw_protocol_metadata_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t TupleTypeMetadata3;
  uint64_t v45;
  _QWORD aBlock[7];

  v45 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDE1E0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v13 = MEMORY[0x1E0C80A78](TupleTypeMetadata3);
  v15 = (char *)&v41 - v14;
  v16 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *((unsigned __int8 *)a5 + 4);
  v20 = *a5;
  if (a3)
  {
    v43 = a1;
    v21 = qword_1EDCDC5C0;
    swift_retain();
    if (v21 != -1)
      swift_once();
    v22 = *(NSObject **)(a3 + 16);
    v23 = nw_content_context_copy_protocol_metadata(v22, *(nw_protocol_definition_t *)(qword_1EDCF2A68 + 32));
    if (v23)
    {
      v24 = v23;
      v42 = v22;
      v25 = sub_1832A39D4((uint64_t)v23);
      if (!v25)
      {
        swift_release();
        swift_unknownObjectRelease();
        goto LABEL_16;
      }
      ((void (*)(nw_protocol_metadata_t))v25[12])(v24);
      type metadata accessor for NWProtocolFramer.Message();
      v26 = swift_dynamicCastClass();
      swift_release();
      if (v26)
      {
        if (a2 >> 60 == 15)
          v27 = 0;
        else
          v27 = v43;
        if (a2 >> 60 == 15)
          v28 = 0xC000000000000000;
        else
          v28 = a2;
        sub_183261798(v43, a2);
        sub_1832C8E9C(v27, v28);
        sub_18308485C(v27, v28);
        v32 = swift_allocObject();
        *(_QWORD *)(v32 + 16) = MEMORY[0x1E0DEE9D8];
        v33 = (uint64_t *)(v32 + 16);
        aBlock[4] = sub_1832D0738;
        aBlock[5] = v32;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1832D405C;
        aBlock[3] = &block_descriptor_130;
        v34 = _Block_copy(aBlock);
        v35 = v42;
        swift_unknownObjectRetain();
        swift_retain();
        swift_release();
        nw_content_context_foreach_protocol_metadata(v35, v34);
        _Block_release(v34);
        swift_unknownObjectRelease();
        swift_beginAccess();
        v36 = *v33;
        swift_bridgeObjectRetain();
        swift_release();
        v37 = *(_BYTE *)(a3 + 64);
        v38 = *(int *)(TupleTypeMetadata3 + 48);
        v39 = *(int *)(TupleTypeMetadata3 + 64);
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v15, v18, a9);
        *(_QWORD *)&v15[v38] = v36;
        v15[v39] = v37;
        __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
        sub_183B919F8();
        sub_183B919EC();
        return swift_release();
      }
    }
    swift_release();
  }
LABEL_16:
  v29 = v20 | (v19 << 32);
  sub_18323C200();
  v30 = swift_allocError();
  if (HIDWORD(v29) <= 0xFE)
  {
    *(_DWORD *)v31 = v20;
    *(_BYTE *)(v31 + 4) = BYTE4(v29);
  }
  else
  {
    *(_DWORD *)v31 = 22;
    *(_BYTE *)(v31 + 4) = 0;
  }
  aBlock[0] = v30;
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  sub_183B919F8();
  return sub_183B919E0();
}

void Connection1.receive<A>()()
{
  type metadata accessor for AsyncSequenceReceive();
}

uint64_t sub_1832CBC14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = sub_1832C7314((uint64_t)sub_1832CF324, v2);
  swift_retain();
  return v3;
}

uint64_t sub_1832CBC68(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[6];

  v7 = *a3;
  v8 = a3[2];
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = *(_QWORD *)(v7 + 80);
  v9[3] = swift_allocateMetadataPack();
  v9[4] = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 16);
  v9[5] = swift_allocateWitnessTablePack();
  v9[6] = a4;
  v9[7] = a1;
  v9[8] = a2;
  v10 = *(NSObject **)(v8 + 16);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_1832D0790;
  *(_QWORD *)(v11 + 24) = v9;
  v14[4] = sub_1832D1390;
  v14[5] = v11;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = sub_183083F3C;
  v14[3] = &block_descriptor_115;
  v12 = _Block_copy(v14);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832CBDB4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void (*a6)(char *, int *), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  nw_protocol_metadata_t v23;
  nw_protocol_metadata_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, int *);
  int v35;
  char v36;

  v33 = a7;
  v34 = a6;
  v32 = a1;
  v13 = sub_183B91CF8();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v31 - v18;
  v20 = *((unsigned __int8 *)a5 + 4);
  v21 = *a5;
  if (a3)
  {
    v22 = qword_1EDCDC5C0;
    swift_retain();
    if (v22 != -1)
      swift_once();
    v23 = nw_content_context_copy_protocol_metadata(*(nw_content_context_t *)(a3 + 16), *(nw_protocol_definition_t *)(qword_1EDCF2A68 + 32));
    if (v23)
    {
      v24 = v23;
      v25 = sub_1832A39D4((uint64_t)v23);
      if (v25)
      {
        v31 = v13;
        ((void (*)(nw_protocol_metadata_t))v25[12])(v24);
        type metadata accessor for NWProtocolFramer.Message();
        v26 = swift_dynamicCastClass();
        swift_release();
        if (v26)
        {
          if (a2 >> 60 == 15)
            v27 = 0;
          else
            v27 = v32;
          if (a2 >> 60 == 15)
            v28 = 0xC000000000000000;
          else
            v28 = a2;
          sub_183261798(v32, a2);
          sub_1832C8E9C(v27, v28);
          sub_18308485C(v27, v28);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 56))(v19, 0, 1, a10);
          v36 = -1;
          v35 = 0;
          v34(v19, &v35);
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v31);
        }
        swift_release();
        v13 = v31;
      }
      else
      {
        swift_release();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      swift_release();
    }
  }
  v29 = v21 | (v20 << 32);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 56))(v17, 1, 1, a10);
  if (BYTE4(v29) == 255)
  {
    v36 = 0;
    v35 = 22;
  }
  else
  {
    v35 = v29;
    v36 = BYTE4(v29);
  }
  v34(v17, &v35);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

void Connection1.receiveMessage<A>()()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDE1E0);
  swift_getTupleTypeMetadata3();
  type metadata accessor for AsyncSequenceReceive();
}

uint64_t sub_1832CC124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = sub_1832C7314((uint64_t)sub_1832CF32C, v2);
  swift_retain();
  return v3;
}

uint64_t sub_1832CC17C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[6];

  v7 = *a3;
  v8 = a3[2];
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = *(_QWORD *)(v7 + 80);
  v9[3] = swift_allocateMetadataPack();
  v9[4] = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 16);
  v9[5] = swift_allocateWitnessTablePack();
  v9[6] = a4;
  v9[7] = a1;
  v9[8] = a2;
  v10 = *(NSObject **)(v8 + 16);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_1832D0760;
  *(_QWORD *)(v11 + 24) = v9;
  v14[4] = sub_1832D1390;
  v14[5] = v11;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = sub_183083F3C;
  v14[3] = &block_descriptor_100;
  v12 = _Block_copy(v14);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832CC2C8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void (*a6)(char *, int *), uint64_t a7)
{
  uint64_t TupleTypeMetadata3;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  nw_protocol_metadata_t v21;
  nw_protocol_metadata_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  NSObject *v32;
  uint64_t v33;
  void (*v35)(char *, int *);
  nw_content_context_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  _QWORD aBlock[7];

  v39 = a7;
  v37 = a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDE1E0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v40 = sub_183B91CF8();
  v38 = *(_QWORD *)(v40 - 8);
  v12 = MEMORY[0x1E0C80A78](v40);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v35 - v15;
  v17 = *((unsigned __int8 *)a5 + 4);
  v18 = *a5;
  if (a3)
  {
    v19 = qword_1EDCDC5C0;
    swift_retain();
    if (v19 != -1)
      swift_once();
    v20 = *(NSObject **)(qword_1EDCF2A68 + 32);
    v36 = *(nw_content_context_t *)(a3 + 16);
    v21 = nw_content_context_copy_protocol_metadata(v36, v20);
    if (v21)
    {
      v22 = v21;
      v23 = sub_1832A39D4((uint64_t)v21);
      if (v23)
      {
        v35 = a6;
        ((void (*)(nw_protocol_metadata_t))v23[12])(v22);
        type metadata accessor for NWProtocolFramer.Message();
        v24 = swift_dynamicCastClass();
        swift_release();
        if (v24)
        {
          if (a2 >> 60 == 15)
            v25 = 0;
          else
            v25 = v37;
          if (a2 >> 60 == 15)
            v26 = 0xC000000000000000;
          else
            v26 = a2;
          sub_183261798(v37, a2);
          sub_1832C8E9C(v25, v26);
          sub_18308485C(v25, v26);
          v27 = *(int *)(TupleTypeMetadata3 + 48);
          v28 = *(int *)(TupleTypeMetadata3 + 64);
          v29 = swift_allocObject();
          *(_QWORD *)(v29 + 16) = MEMORY[0x1E0DEE9D8];
          v30 = (uint64_t *)(v29 + 16);
          aBlock[4] = sub_1832D0738;
          aBlock[5] = v29;
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1832D405C;
          aBlock[3] = &block_descriptor_105;
          v31 = _Block_copy(aBlock);
          v32 = v36;
          swift_unknownObjectRetain();
          swift_retain();
          swift_release();
          nw_content_context_foreach_protocol_metadata(v32, v31);
          _Block_release(v31);
          swift_unknownObjectRelease();
          swift_beginAccess();
          v33 = *v30;
          swift_bridgeObjectRetain();
          swift_release();
          *(_QWORD *)&v16[v27] = v33;
          v16[v28] = *(_BYTE *)(a3 + 64);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata3 - 8) + 56))(v16, 0, 1, TupleTypeMetadata3);
          v42 = -1;
          v41 = 0;
          v35(v16, &v41);
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v16, v40);
        }
        swift_release();
        a6 = v35;
      }
      else
      {
        swift_release();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      swift_release();
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata3 - 8) + 56))(v14, 1, 1, TupleTypeMetadata3);
  if (((v18 | (unint64_t)(v17 << 32)) >> 32) == 255)
  {
    BYTE4(aBlock[0]) = 0;
    LODWORD(aBlock[0]) = 22;
  }
  else
  {
    LODWORD(aBlock[0]) = v18;
    BYTE4(aBlock[0]) = (v18 | (unint64_t)(v17 << 32)) >> 32;
  }
  a6(v14, (int *)aBlock);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v14, v40);
}

void sub_1832CC6D0()
{
  type metadata accessor for SendProgress();
}

uint64_t sub_1832CC738()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11[15];

  v4 = swift_retain();
  v5 = sub_1832D0690(v4, (void (*)(_QWORD, uint64_t *))type metadata accessor for SendProgress, (uint64_t (*)(uint64_t))sub_1832CF154);
  swift_release();
  v6 = MEMORY[0x1E0DEE9D8];
  if (v2)
    v6 = v2;
  v10 = v6;
  LOBYTE(v11[0]) = v3;
  type metadata accessor for NWProtocolWebSocket.Metadata();
  swift_allocObject();
  swift_bridgeObjectRetain();
  NWProtocolWebSocket.Metadata.init(opcode:)((char *)v11);
  MEMORY[0x186DB1E20]();
  if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_183B91968();
  sub_183B91998();
  sub_183B91944();
  type metadata accessor for NWConnection.ContentContext();
  swift_initStackObject();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(0x746E6F43646E6573, 0xEB00000000747865, 0, 0, 0, v10, 0.5);
  v8 = v7;
  v11[0] = (uint64_t)sub_1832CF2E8;
  v11[1] = v5;
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(v1, v0, v8, 1, v11);
  swift_release();
  swift_release();
  return v5;
}

void Connection1<>.send(_:metadata:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = sub_1832C8CF4(&v3, a1);
  sub_18324A994(v1, v2);
  sub_1832CC6D0();
}

void sub_1832CC99C()
{
  uint64_t v0;
  unint64_t v1;

  sub_18308485C(v0, v1);
  sub_18308485C(v0, v1);
  JUMPOUT(0x1832CC9B8);
}

uint64_t sub_1832CC9EC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EDCDE1F0);
  *v1 = v0;
  v1[1] = sub_1832CCA84;
  return sub_183B9219C();
}

uint64_t sub_1832CCA84()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1832CCAE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(unsigned __int8 *)(v0 + 48);
  **(_BYTE **)(v0 + 56) = *(_BYTE *)(v0 + 16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v1, v2, v3, v4);
}

uint64_t sub_1832CCB0C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832CCB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE6E0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = *(_QWORD *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v10 = *(NSObject **)(v7 + 16);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_1832D074C;
  *(_QWORD *)(v11 + 24) = v9;
  aBlock[4] = sub_1832D1390;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_183083F3C;
  aBlock[3] = &block_descriptor_85;
  v12 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832CCC90(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  nw_protocol_metadata_t v11;
  nw_protocol_metadata_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  uint64_t aBlock;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  void *v32;
  _QWORD *(*v33)(uint64_t, uint64_t);
  uint64_t v34;

  v5 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
  if (a3)
  {
    v8 = result;
    v9 = qword_1EDCDC4B0;
    swift_retain();
    if (v9 != -1)
      swift_once();
    v10 = *(NSObject **)(a3 + 16);
    v11 = nw_content_context_copy_protocol_metadata(v10, *((nw_protocol_definition_t *)off_1EDCDC4B8 + 4));
    if (v11)
    {
      v12 = v11;
      v13 = sub_1832A39D4((uint64_t)v11);
      if (v13)
      {
        ((void (*)(nw_protocol_metadata_t))v13[12])(v12);
        type metadata accessor for NWProtocolWebSocket.Metadata();
        v14 = swift_dynamicCastClass();
        if (v14)
        {
          v28 = *(_BYTE *)(v14 + 24);
          if (a2 >> 60 == 15)
            v15 = 0;
          else
            v15 = v8;
          v16 = 0xC000000000000000;
          if (a2 >> 60 != 15)
            v16 = a2;
          v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
          v27 = v15;
          v17 = swift_allocObject();
          *(_QWORD *)(v17 + 16) = MEMORY[0x1E0DEE9D8];
          v18 = (void **)(v17 + 16);
          v33 = sub_1832D0738;
          v34 = v17;
          aBlock = MEMORY[0x1E0C809B0];
          v30 = 1107296256;
          v31 = sub_1832D405C;
          v32 = &block_descriptor_90;
          v19 = _Block_copy(&aBlock);
          sub_183261798(v8, a2);
          swift_unknownObjectRetain();
          swift_retain();
          swift_release();
          nw_content_context_foreach_protocol_metadata(v10, v19);
          _Block_release(v19);
          swift_unknownObjectRelease();
          swift_beginAccess();
          v20 = *v18;
          swift_bridgeObjectRetain();
          swift_release();
          v21 = *(_BYTE *)(a3 + 64);
          LOBYTE(aBlock) = v28;
          v30 = v27;
          v31 = v26;
          v32 = v20;
          LOBYTE(v33) = v21;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE6E0);
          sub_183B919EC();
          swift_release();
          return swift_release();
        }
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    if (HIDWORD(v5) > 0xFE)
      return swift_release();
    sub_18323C200();
    v24 = swift_allocError();
    *(_DWORD *)v25 = v5;
    *(_BYTE *)(v25 + 4) = BYTE4(v5);
    aBlock = v24;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE6E0);
    sub_183B919E0();
    return swift_release();
  }
  if (HIDWORD(v5) <= 0xFE)
  {
    sub_18323C200();
    v22 = swift_allocError();
    *(_DWORD *)v23 = v5;
    *(_BYTE *)(v23 + 4) = BYTE4(v5);
    aBlock = v22;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE6E0);
    return sub_183B919E0();
  }
  return result;
}

void sub_1832CCFC0(uint64_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(a1);
  type metadata accessor for AsyncSequenceReceive();
}

uint64_t sub_1832CD014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1832C7314(v0, v1);
  swift_retain();
  return v2;
}

uint64_t sub_1832CD04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[6];

  v5 = *(_QWORD *)(a3 + 16);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = *(NSObject **)(v5 + 16);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_1832D070C;
  *(_QWORD *)(v8 + 24) = v6;
  v11[4] = sub_1832D1390;
  v11[5] = v8;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_183083F3C;
  v11[3] = &block_descriptor_69;
  v9 = _Block_copy(v11);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v7, v9);
  _Block_release(v9);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832CD154(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void (*a6)(uint64_t *, int *))
{
  unint64_t v7;
  uint64_t v11;
  NSObject *v12;
  nw_protocol_metadata_t v13;
  nw_protocol_metadata_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  char v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  char v31;
  uint64_t aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  _QWORD *(*v36)(uint64_t, uint64_t);
  uint64_t v37;

  v7 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
  if (a3)
  {
    v11 = qword_1EDCDC4B0;
    swift_retain();
    if (v11 != -1)
      swift_once();
    v12 = *(NSObject **)(a3 + 16);
    v13 = nw_content_context_copy_protocol_metadata(v12, *((nw_protocol_definition_t *)off_1EDCDC4B8 + 4));
    if (v13)
    {
      v14 = v13;
      v15 = sub_1832A39D4((uint64_t)v13);
      if (v15)
      {
        ((void (*)(nw_protocol_metadata_t))v15[12])(v14);
        type metadata accessor for NWProtocolWebSocket.Metadata();
        v16 = swift_dynamicCastClass();
        if (v16)
        {
          v27 = *(unsigned __int8 *)(v16 + 24);
          if (a2 >> 60 == 15)
            v17 = 0;
          else
            v17 = a1;
          v18 = 0xC000000000000000;
          if (a2 >> 60 != 15)
            v18 = a2;
          v25 = v18;
          v26 = v17;
          v19 = swift_allocObject();
          *(_QWORD *)(v19 + 16) = MEMORY[0x1E0DEE9D8];
          v20 = (uint64_t *)(v19 + 16);
          v36 = sub_1832D0738;
          v37 = v19;
          aBlock = MEMORY[0x1E0C809B0];
          v33 = 1107296256;
          v34 = sub_1832D405C;
          v35 = (uint64_t)&block_descriptor_75;
          v21 = _Block_copy(&aBlock);
          sub_183261798(a1, a2);
          swift_unknownObjectRetain();
          swift_retain();
          swift_release();
          nw_content_context_foreach_protocol_metadata(v12, v21);
          _Block_release(v21);
          swift_unknownObjectRelease();
          swift_beginAccess();
          v22 = *v20;
          swift_bridgeObjectRetain();
          swift_release();
          v23 = *(_BYTE *)(a3 + 64);
          aBlock = v27;
          v33 = v26;
          v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25;
          v35 = v22;
          LOBYTE(v36) = v23;
          v29 = -1;
          v28 = 0;
          a6(&aBlock, &v28);
          swift_release();
          swift_release();
          sub_18308485C(v26, v25);
          return swift_bridgeObjectRelease();
        }
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    aBlock = 0;
    v33 = 0;
    v34 = 0;
    v35 = 1;
    LOBYTE(v36) = 0;
    if (HIDWORD(v7) <= 0xFE)
    {
      v31 = BYTE4(v7);
      v30 = v7;
    }
    else
    {
      v31 = 0;
      v30 = 22;
    }
    a6(&aBlock, &v30);
    return swift_release();
  }
  else
  {
    aBlock = 0;
    v33 = 0;
    v34 = 0;
    v35 = 1;
    LOBYTE(v36) = 0;
    if (HIDWORD(v7) <= 0xFE)
    {
      v31 = BYTE4(v7);
      v30 = v7;
    }
    else
    {
      v31 = 0;
      v30 = 22;
    }
    return ((uint64_t (*)(uint64_t *, int *))a6)(&aBlock, &v30);
  }
}

void Connection1<>.ping(_:metadata:)()
{
  sub_1832CC6D0();
}

void Connection1<>.pong(_:metadata:)()
{
  sub_1832CC6D0();
}

void Connection1<>.close(code:reason:metadata:)()
{
  type metadata accessor for SendProgress();
}

uint64_t sub_1832CD538()
{
  uint64_t v0;
  uint64_t v1;
  nw_ws_close_code_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *metadata;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[11];
  unint64_t v17;

  v5 = swift_retain();
  v6 = sub_1832D0690(v5, (void (*)(_QWORD, uint64_t *))type metadata accessor for SendProgress, (uint64_t (*)(uint64_t))sub_1832CF154);
  swift_release();
  v7 = MEMORY[0x1E0DEE9D8];
  if (v3)
    v7 = v3;
  v17 = v7;
  type metadata accessor for NWProtocolWebSocket.Metadata();
  v8 = swift_allocObject();
  *(_BYTE *)(v8 + 24) = 3;
  *(_WORD *)(v8 + 40) = 4;
  *(_BYTE *)(v8 + 42) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  swift_bridgeObjectRetain();
  metadata = nw_ws_create_metadata(nw_ws_opcode_close);
  *(_QWORD *)(v8 + 16) = metadata;
  swift_beginAccess();
  *(_WORD *)(v8 + 40) = v2;
  *(_BYTE *)(v8 + 42) = v4;
  if (!v4)
    v2 = word_183BA4144[(char)v2];
  nw_ws_metadata_set_close_code(metadata, v2);
  v10 = swift_retain();
  MEMORY[0x186DB1E20](v10);
  if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_183B91968();
  sub_183B91998();
  sub_183B91944();
  if (v0)
  {
    swift_bridgeObjectRetain();
    v0 = sub_183257F24(v1, v0);
    v12 = v11;
  }
  else
  {
    v12 = 0xF000000000000000;
  }
  type metadata accessor for NWConnection.ContentContext();
  swift_initStackObject();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(0x746E6F43646E6573, 0xEB00000000747865, 0, 0, 0, v17, 0.5);
  v14 = v13;
  v16[0] = (uint64_t)sub_1832CF2E8;
  v16[1] = v6;
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(v0, v12, v14, 1, v16);
  swift_release();
  swift_release();
  sub_183084848(v0, v12);
  swift_release();
  return v6;
}

void Connection1<>.get()()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  MEMORY[0x1E0C80A78](v0);
  sub_1832CDB38();
}

uint64_t sub_1832CD7B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  os_unfair_lock_s *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  id *metadata_for_request;
  uint64_t v16;
  uint64_t inited;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + OBJC_IVAR____TtC7Network13_NWConnection_parameters) + 16);
  v8 = (_QWORD *)(v7 + 16);
  v9 = (os_unfair_lock_s *)(v7 + 24);
  swift_retain();
  os_unfair_lock_lock(v9);
  sub_183226978(v8, (_QWORD *)(v1 + 176));
  os_unfair_lock_unlock(v9);
  v10 = *(void **)(v1 + 176);
  swift_release();
  v11 = nw_parameters_copy_url_endpoint(v10);
  swift_unknownObjectRelease();
  if (!v11)
  {
    *(_OWORD *)(v1 + 184) = 0u;
    *(_OWORD *)(v1 + 200) = 0u;
    *(_OWORD *)(v1 + 216) = 0u;
    *(_OWORD *)(v1 + 232) = 0u;
    *(_QWORD *)(v1 + 176) = 22;
    *(_QWORD *)(v1 + 248) = 0x8000000000000000;
    *(_QWORD *)(v1 + 256) = 0;
    *(_QWORD *)(v1 + 264) = 0;
    sub_1832C5868((_OWORD *)(v1 + 176));
    return a1;
  }
  *(_QWORD *)v1 = v11;
  nw_endpoint_get_url(v11);
  sub_183B91800();
  sub_183B9138C();
  swift_bridgeObjectRelease();
  v12 = sub_183B913A4();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v4, 1, v12);
  if ((_DWORD)result != 1)
  {
    *(_QWORD *)(v1 + 8) = 5522759;
    *(_QWORD *)(v1 + 16) = 0xE300000000000000;
    HTTPFields.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8], (_QWORD *)(v1 + 168));
    HTTPRequest.init(method:url:headerFields:)((uint64_t *)(v1 + 8), v4, (uint64_t *)(v1 + 168), (void *)(v1 + 176));
    type metadata accessor for __NWHTTPRequest();
    v14 = swift_allocObject();
    memcpy((void *)(v14 + 16), (const void *)(v1 + 176), 0x120uLL);
    sub_18328212C((_QWORD *)(v1 + 176));
    metadata_for_request = nw_http_create_metadata_for_request((void *)v14);
    swift_release();
    type metadata accessor for NWProtocolHTTP.Metadata();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = metadata_for_request;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDB270);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183BA1510;
    *(_QWORD *)(inited + 32) = v16;
    *(_QWORD *)(v1 + 8) = inited;
    sub_183B91944();
    v18 = *(_QWORD *)(v1 + 8);
    type metadata accessor for NWConnection.ContentContext();
    swift_initStackObject();
    swift_retain();
    NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(0x746E6F43646E6573, 0xEB00000000747865, 0, 1, 0, v18, 0.5);
    v20 = v19;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a1;
    *(_QWORD *)(v21 + 24) = v3;
    v22 = *(NSObject **)(v6 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    v24 = a1;
    v25 = NWCreateDispatchDataFromNSData(0, v23);
    v26 = *(NSObject **)(v20 + 16);
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = sub_1832CF370;
    *(_QWORD *)(v27 + 24) = v21;
    *(_QWORD *)(v1 + 40) = sub_183083F30;
    *(_QWORD *)(v1 + 48) = v27;
    *(_QWORD *)(v1 + 8) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v1 + 16) = 1107296256;
    *(_QWORD *)(v1 + 24) = sub_183056AB0;
    *(_QWORD *)(v1 + 32) = &block_descriptor_14;
    v28 = _Block_copy((const void *)(v1 + 8));
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_send(v22, v25, v26, 1, v28);
    _Block_release(v28);
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();

    a1 = v24;
    swift_unknownObjectRelease();
    sub_1832CF378((_QWORD *)(v1 + 176));
    swift_release();
    return a1;
  }
  __break(1u);
  return result;
}

void sub_1832CDB38()
{
  type metadata accessor for HTTP();
  type metadata accessor for HTTP.Progress();
}

uint64_t sub_1832CDB84()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_retain();
  v1 = sub_1832D0690(v0, (void (*)(_QWORD, uint64_t *))type metadata accessor for HTTP.Progress, (uint64_t (*)(uint64_t))sub_1832D0564);
  swift_release();
  return v1;
}

uint64_t sub_1832CDBCC(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[6];
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*((unsigned __int8 *)a1 + 4) == 255)
  {
    v10 = 3;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v16 = 0;
    v17 = 0;
    v15 = 0xC000000000000000;
    sub_1832C5868(&v10);
    v5 = *(NSObject **)(*(_QWORD *)(a3 + 16) + 16);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = sub_1832D055C;
    *(_QWORD *)(v6 + 24) = a2;
    v9[4] = sub_183083FD4;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 1107296256;
    v9[2] = sub_183083F3C;
    v9[3] = &block_descriptor_53;
    v7 = _Block_copy(v9);
    swift_retain_n();
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_receive_message(v5, v7);
    _Block_release(v7);
    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {
    v10 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v16 = 0;
    v17 = 0;
    v15 = 0x8000000000000000;
    return sub_1832C5868(&v10);
  }
}

uint64_t sub_1832CDD24(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  nw_protocol_metadata_t v7;
  nw_protocol_metadata_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  if (a3)
  {
    v5 = result;
    v6 = qword_1EDCDC578;
    swift_retain();
    if (v6 != -1)
      swift_once();
    v7 = nw_content_context_copy_protocol_metadata(*(nw_content_context_t *)(a3 + 16), *((nw_protocol_definition_t *)off_1EDCDD630 + 4));
    if (v7)
    {
      v8 = v7;
      v9 = sub_1832A39D4((uint64_t)v7);
      if (!v9)
      {
        swift_release();
        return swift_unknownObjectRelease();
      }
      ((void (*)(nw_protocol_metadata_t))v9[12])(v8);
      type metadata accessor for NWProtocolHTTP.Metadata();
      v10 = swift_dynamicCastClass();
      if (v10)
      {
        v11 = nw_http_metadata_copy_response(*(void **)(v10 + 16));
        if (v11)
        {
          v12 = v11;
          swift_beginAccess();
          v13 = v12[3];
          v21 = v12[4];
          v22 = v12[2];
          v14 = v12[5];
          v20 = *((unsigned __int8 *)v12 + 48);
          v15 = v12[8];
          v16 = v12[10];
          v18 = v12[9];
          v19 = v12[7];
          v17 = v12[11];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_unknownObjectRelease();
          *(_QWORD *)&v23 = v22;
          *((_QWORD *)&v23 + 1) = v13;
          v24 = v21;
          v25 = v14;
          v26 = v20;
          v27 = v19;
          v28 = v15;
          v29 = v18;
          v30 = v16;
          v31 = v17 | 0x4000000000000000;
          v32 = v5;
          v33 = a2;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          sub_183261798(v5, a2);
          sub_1832C5868(&v23);
          swift_release_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_release();
          swift_release();
          return sub_183084848(v5, a2);
        }
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

double sub_1832CDFAC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v4;

  sub_18321887C(a1 + 16, (uint64_t)&v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE120);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1832CE034(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_183B912D8();
  v9 = result;
  if (result)
  {
    result = sub_183B912FC();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  v12 = sub_183B912F0();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  result = (uint64_t)sub_1832BFD6C(v9, v15, a4);
  if (v4)
    return v16;
  return result;
}

char *sub_1832CE0E0(char *a1, int64_t a2, char *__src, int64_t a4)
{
  char *v4;
  size_t v5;
  char *result;

  v4 = __src;
  if (!a4 || !a2)
    return v4;
  if (a4 >= a2)
    v5 = a2;
  else
    v5 = a4;
  if ((v5 & 0x8000000000000000) == 0 && (&a1[v5] <= __src || &__src[v5] <= a1))
  {
    memcpy(a1, __src, v5);
    v4 += v5;
    return v4;
  }
  result = (char *)sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_1832CE1F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_183B917A0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL _s7Network4HTTPC8ResponseV2eeoiySbAE_AEtFZ_0(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 3);
  v4 = *((_BYTE *)a1 + 32);
  v5 = *(__int128 *)((char *)a1 + 40);
  v6 = *((_QWORD *)a1 + 7);
  v8 = *((_QWORD *)a1 + 10);
  v7 = *((_QWORD *)a1 + 11);
  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v11 = *((_QWORD *)a2 + 3);
  v12 = *((_BYTE *)a2 + 32);
  v13 = *(__int128 *)((char *)a2 + 40);
  v14 = *((_QWORD *)a2 + 7);
  v16 = *((_QWORD *)a2 + 10);
  v15 = *((_QWORD *)a2 + 11);
  v28 = *((_QWORD *)a1 + 2);
  v29 = v3;
  v30 = v4;
  v31 = v5;
  v32 = v6;
  v33 = a1[4];
  v20 = v9;
  v21 = v10;
  v22 = v11;
  v23 = v12;
  v24 = v13;
  v25 = v14;
  v26 = a2[4];
  v27 = v2;
  if ((_s7Network12HTTPResponseV2eeoiySbAC_ACtFZ_0((uint64_t)&v27, (uint64_t)&v20) & 1) == 0)
    return 0;
  if (v7 >> 60 == 15)
  {
    if (v15 >> 60 == 15)
      return 1;
    goto LABEL_6;
  }
  if (v15 >> 60 == 15)
  {
LABEL_6:
    sub_183261798(v8, v7);
    sub_183261798(v16, v15);
    sub_183084848(v8, v7);
    sub_183084848(v16, v15);
    return 0;
  }
  sub_183261798(v8, v7);
  sub_183261798(v16, v15);
  sub_1832FCBCC(v8, v7);
  v18 = v17;
  sub_183084848(v16, v15);
  sub_183084848(v8, v7);
  return (v18 & 1) != 0;
}

void _s7Network4HTTPC5StateO2eeoiySbAE_AEtFZ_0(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1832CE424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  char v18;
  _BYTE v20[296];

  if (v10 >> 62)
  {
    sub_1832CFF80(v14, v8, a3, a4, a5, a6, a7, a8, v9, v10, v11, v12);
    goto LABEL_13;
  }
  if (BYTE4(v13))
  {
    v15 = v13;
    if (BYTE4(v13) == 1)
    {
      sub_1832D101C((uint64_t)v20);
      if (BYTE4(v14) != 1)
        goto LABEL_14;
    }
    else
    {
      sub_1832D101C((uint64_t)v20);
      if (BYTE4(v14) != 2)
        goto LABEL_14;
    }
    if (v15 == (_DWORD)v14)
      goto LABEL_11;
LABEL_14:
    v18 = 0;
    return v18 & 1;
  }
  if (BYTE4(v14))
  {
LABEL_13:
    sub_1832D101C((uint64_t)v20);
    goto LABEL_14;
  }
  v16 = sub_183B915F0();
  v17 = sub_183B915F0();
  sub_1832D101C((uint64_t)v20);
  if (v16 != v17)
    goto LABEL_14;
LABEL_11:
  v18 = 1;
  return v18 & 1;
}

uint64_t _s7Network9SendStateO2eeoiySbAC_ACtFZ_0(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v10;

  v2 = *((unsigned __int8 *)a1 + 4);
  v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  v4 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  v5 = v2 >> 6;
  if (v5)
  {
    if (v5 != 1)
      __asm { BR              X10 }
    if (((v4 >> 38) & 3) != 1)
      return 0;
    v6 = HIDWORD(v3) & 0x3F;
    v7 = HIDWORD(v4) & 0x3F;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 == 1)
        return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
      return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
    }
    goto LABEL_20;
  }
  if (((v4 >> 38) & 3) != 0)
    return 0;
  LODWORD(v7) = BYTE4(v4);
  if (!HIDWORD(v3))
  {
LABEL_20:
    if (!(_DWORD)v7)
    {
      v10 = sub_183B915F0();
      if (v10 == sub_183B915F0())
        return 1;
    }
    return 0;
  }
  if (HIDWORD(v3) != 1)
    return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
  return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
}

uint64_t sub_1832CE970(uint64_t a1)
{
  NSObject *v1;
  void *v2;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _BOOL4 v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t inited;
  NSObject *message;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  _QWORD v20[4];
  _QWORD v22[3];
  uint64_t v23;
  _QWORD aBlock[3];
  void *v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;

  v1 = *(NSObject **)(a1 + 16);
  while (1)
  {
    v28 = 0;
    v29 = 1;
    MEMORY[0x1E0C80A78](a1);
    v20[2] = &v28;
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = sub_1832D1310;
    *(_QWORD *)(v4 + 24) = v20;
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = sub_1832BE4C4;
    *(_QWORD *)(v5 + 24) = v4;
    v26 = sub_1832BE4DC;
    v27 = v5;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1832A4C04;
    v25 = &block_descriptor_325;
    v6 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    v7 = nw_framer_parse_input(v1, 8uLL, 8uLL, 0, v6);
    swift_unknownObjectRelease();
    _Block_release(v6);
    LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((v6 & 1) != 0)
      break;
    if (!v7)
      return 8;
    if ((v29 & 1) == 0)
    {
      v9 = v28;
      v10 = HIDWORD(v28);
      if (qword_1EDCDC5C0 != -1)
        swift_once();
      v11 = qword_1EDCF2A68;
      type metadata accessor for NWProtocolFramer.Message();
      inited = swift_initStackObject();
      message = nw_framer_protocol_create_message(*(nw_protocol_definition_t *)(v11 + 32));
      *(_QWORD *)(inited + 16) = message;
      v25 = (void *)MEMORY[0x1E0DEE0F8];
      LODWORD(aBlock[0]) = v9;
      sub_183062090((uint64_t)aBlock, (uint64_t)v22, (uint64_t *)&unk_1EDCD7B90);
      v14 = v23;
      if (v23)
      {
        v15 = __swift_project_boxed_opaque_existential_2(v22, v23);
        v16 = *(_QWORD *)(v14 - 8);
        MEMORY[0x1E0C80A78](v15);
        v18 = (char *)&v22[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v16 + 16))(v18);
        v2 = (void *)sub_183B920E8();
        v19 = *(void (**)(char *, uint64_t))(v16 + 8);
        swift_retain();
        v19(v18, v14);
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v22);
      }
      else
      {
        swift_retain();
        v2 = 0;
      }
      nw_framer_message_set_object_value(message, "Type", v2);
      swift_unknownObjectRelease();
      sub_1830620D4((uint64_t)aBlock, (uint64_t *)&unk_1EDCD7B90);
      swift_release();
      v3 = nw_framer_deliver_input_no_copy(v1, bswap32(v10), *(nw_framer_message_t *)(inited + 16), 1);
      a1 = swift_unknownObjectRelease();
      if (v3)
        continue;
    }
    return 0;
  }
  __break(1u);
  return result;
}

void sub_1832CEC94(uint64_t a1, uint64_t a2, size_t a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD __src[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = sub_1832BFF34();
  if ((a3 & 0x8000000000000000) != 0 || HIDWORD(a3))
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    __src[0] = v5;
    __src[1] = bswap32(a3);
    v6 = sub_1832BDCC4(__src, 8);
    v8 = v7;
    v9 = *(NSObject **)(a1 + 16);
    swift_unknownObjectRetain();
    v10 = (void *)sub_183B9141C();
    v12 = NWCreateDispatchDataFromNSData(v10, v11);

    if (!v12)
      __break(1u);
    nw_framer_write_output_data(v9, v12);
    swift_unknownObjectRelease();

    if (nw_framer_write_output_no_copy(v9, a3))
    {
      sub_18308485C(v6, v8);
    }
    else
    {
      sub_18323C200();
      v13 = (void *)swift_allocError();
      *(_DWORD *)v14 = 22;
      *(_BYTE *)(v14 + 4) = 0;
      swift_willThrow();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCF30);
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_183B9EA20;
      sub_183B91DB8();
      sub_183B917F4();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
      sub_183B91F14();
      *(_QWORD *)(v15 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v15 + 32) = 0;
      *(_QWORD *)(v15 + 40) = 0xE000000000000000;
      sub_183B92238();
      sub_18308485C(v6, v8);
      swift_bridgeObjectRelease();

    }
  }
}

uint64_t sub_1832CEF2C(unsigned int *a1)
{
  uint64_t v1;

  return sub_1832C1410(a1, v1);
}

void type metadata accessor for SendProgress()
{
  JUMPOUT(0x186DB54C8);
}

uint64_t sub_1832CEF50(uint64_t a1)
{
  _QWORD *v1;

  return sub_1832C3060(a1, v1, qword_1EDCDE530, (uint64_t)&unk_1E1497F90, (uint64_t)sub_1832D1178, (uint64_t)&block_descriptor_304);
}

uint64_t sub_1832CEF88(uint64_t a1)
{
  _QWORD *v1;

  return sub_1832C3060(a1, v1, &qword_1EDCD7630, (uint64_t)&unk_1E1497F40, (uint64_t)sub_1832D10E8, (uint64_t)&block_descriptor_298);
}

uint64_t type metadata accessor for HTTP1()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for TCP()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for HTTP2()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for HTTP3()
{
  return objc_opt_self();
}

void type metadata accessor for HTTP.Progress()
{
  JUMPOUT(0x186DB54C8);
}

uint64_t sub_1832CF04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  uint64_t result;

  if (a10 >> 62 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return sub_183084848(a11, a12);
  }
  return result;
}

uint64_t sub_1832CF0DC(uint64_t a1)
{
  _QWORD *v1;

  return sub_1832C3060(a1, v1, qword_1EDCDE650, (uint64_t)&unk_1E1497EA0, (uint64_t)sub_1832D0ECC, (uint64_t)&block_descriptor_286);
}

uint64_t sub_1832CF114(uint64_t a1)
{
  _QWORD *v1;

  return sub_1832C3060(a1, v1, &qword_1EDCDE720, (uint64_t)&unk_1E1497E50, (uint64_t)sub_1832D0EAC, (uint64_t)&block_descriptor_280);
}

uint64_t sub_1832CF14C(uint64_t a1)
{
  _QWORD *v1;

  return sub_1832C7828(a1, v1);
}

void sub_1832CF154(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v4 = v2 + qword_1EDCDE150;
  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_1EDCDE530);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (_QWORD *)(v2 + qword_1EDCDE160);
  v7 = MEMORY[0x1E0DEE9D8];
  *v6 = MEMORY[0x1E0DEE9D8];
  v6[1] = v7;
  v6[2] = v7;
  v6[3] = v7;
  v6[4] = v7;
  v6[5] = v7;
  v8 = v2 + qword_1EDCDE498;
  *(_BYTE *)(v8 + 4) = 0x80;
  *(_DWORD *)v8 = 0;
  *(_QWORD *)(v2 + 16) = a1;
  swift_retain();
  type metadata accessor for SendProgress();
}

uint64_t sub_1832CF214(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v3 = MEMORY[0x186DB5558](&protocol conformance descriptor for SendProgress<A, Pack{repeat B}>, a1);
  sub_1832C177C((uint64_t)&v5, a1, (uint64_t)&protocol witness table for SendProgress<A, Pack{repeat B}>, v3, (uint64_t)&unk_1E1497540, (uint64_t)sub_1832D0700, (uint64_t)&block_descriptor_59);
  return v1;
}

uint64_t sub_1832CF270()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832CF294(unsigned int *a1)
{
  return sub_1832C93C8(a1);
}

uint64_t sub_1832CF2AC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1832C80B0(a1, v1[3], v1[4], v1[5]);
}

uint64_t sub_1832CF2B8(uint64_t a1)
{
  uint64_t v1;

  return sub_1832C8404(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void type metadata accessor for AsyncSequenceReceive()
{
  JUMPOUT(0x186DB54C8);
}

uint64_t sub_1832CF2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1832C88B4(a1, a2, *(_QWORD *)(v2 + 24));
}

uint64_t sub_1832CF2D8(uint64_t a1)
{
  uint64_t v1;

  return sub_1832C9660(a1, *(_QWORD *)(v1 + 24));
}

uint64_t sub_1832CF2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1832C9A7C(a1, a2, *(_QWORD *)(v2 + 24));
}

uint64_t sub_1832CF2E8(unsigned int *a1)
{
  return sub_1832C93C8(a1);
}

uint64_t sub_1832CF300(uint64_t a1)
{
  uint64_t v1;

  return sub_1832CA244(a1, *(_QWORD *)(v1 + 32));
}

uint64_t sub_1832CF30C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1832CA6B0(a1, a2, v2);
}

uint64_t sub_1832CF314(uint64_t a1)
{
  uint64_t v1;

  return sub_1832CAE98(a1, *(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1832CF31C(uint64_t a1)
{
  uint64_t v1;

  return sub_1832CB584(a1, *(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1832CF324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1832CBC68(a1, a2, *(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 16));
}

uint64_t sub_1832CF32C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1832CC17C(a1, a2, *(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 16));
}

uint64_t sub_1832CF334(uint64_t a1)
{
  uint64_t v1;

  return sub_1832CCB1C(a1, v1);
}

uint64_t sub_1832CF33C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1832CD04C(a1, a2, v2);
}

uint64_t sub_1832CF344()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832CF370(unsigned int *a1)
{
  uint64_t v1;

  return sub_1832CDBCC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

_QWORD *sub_1832CF378(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[7];
  v3 = a1[8];
  v5 = a1[15];
  v6 = a1[14];
  v7 = a1[22];
  v8 = a1[21];
  v9 = a1[29];
  v10 = a1[28];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18324C184(v2, v3);
  sub_18324C184(v6, v5);
  sub_18324C184(v8, v7);
  sub_18324C184(v10, v9);
  swift_release();
  return a1;
}

void sub_1832CF4DC()
{
  JUMPOUT(0x186DB5558);
}

void sub_1832CF4EC()
{
  JUMPOUT(0x186DB5558);
}

void sub_1832CF4FC()
{
  JUMPOUT(0x186DB5558);
}

uint64_t type metadata accessor for TLVFramer()
{
  return objc_opt_self();
}

uint64_t method lookup function for TLVFramer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TLVFramer.__allocating_init(framer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of TLVFramer.start(framer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of TLVFramer.wakeup(framer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of TLVFramer.stop(framer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of TLVFramer.cleanup(framer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of TLVFramer.handleInput(framer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of TLVFramer.handleOutput(framer:message:messageLength:isComplete:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of StateChangedHandler.handleNewState(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of Protocol.configure(parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of OptionalProtocol.init(enabled:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_1832CF5A0()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for ProtocolStackBuilder()
{
  JUMPOUT(0x186DB54C8);
}

ValueMetadata *type metadata accessor for DisableProtocol()
{
  return &type metadata for DisableProtocol;
}

uint64_t sub_1832CF5C4()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for Configuration()
{
  JUMPOUT(0x186DB54C8);
}

_QWORD *sub_1832CF5D8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_1832CF604()
{
  return swift_release();
}

_QWORD *sub_1832CF60C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1832CF644(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for AsyncProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncProperty);
}

uint64_t sub_1832CF680()
{
  uint64_t result;
  unint64_t v1;

  result = sub_183B91AA0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1832CF6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B91AA0();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1832CF72C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_183B91AA0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1832CF764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B91AA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1832CF7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B91AA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1832CF7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B91AA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1832CF83C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B91AA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1832CF884()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832CF890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B91AA0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1832CF8D0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832CF8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B91AA0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AsyncProperty.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncProperty.Iterator);
}

uint64_t type metadata accessor for Internal()
{
  return objc_opt_self();
}

uint64_t sub_1832CF94C()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for Connection1()
{
  JUMPOUT(0x186DB54C8);
}

uint64_t method lookup function for Connection1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Connection1.__allocating_init(to:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of Connection1.__allocating_init(using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

ValueMetadata *type metadata accessor for SendState()
{
  return &type metadata for SendState;
}

void sub_1832CF9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1832D03BC(a1, a2, a3, &qword_1EDCDE528, qword_1EDCDE530);
}

uint64_t method lookup function for SendProgress()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SendProgress.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SendProgress.handleNewState(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of SendProgress.states.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of SendProgress.done.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 264) + *(_QWORD *)(*(_QWORD *)v0 + 264));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_183243DAC;
  return v4();
}

uint64_t dispatch thunk of SendProgress.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

ValueMetadata *type metadata accessor for TLS()
{
  return &type metadata for TLS;
}

uint64_t method lookup function for TCP()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TCP.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

ValueMetadata *type metadata accessor for QUIC()
{
  return &type metadata for QUIC;
}

ValueMetadata *type metadata accessor for UDP()
{
  return &type metadata for UDP;
}

ValueMetadata *type metadata accessor for IP()
{
  return &type metadata for IP;
}

ValueMetadata *type metadata accessor for TLV()
{
  return &type metadata for TLV;
}

uint64_t type metadata accessor for JSON(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JSON);
}

ValueMetadata *type metadata accessor for WebSocket()
{
  return &type metadata for WebSocket;
}

uint64_t method lookup function for HTTP1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HTTP1.__allocating_init(enabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t method lookup function for HTTP2()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for HTTP3()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for HTTP()
{
  return objc_opt_self();
}

uint64_t method lookup function for HTTP()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HTTP.__allocating_init(insecure:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of HTTP.__allocating_init(h1:h2:h3:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t destroy for HTTP.Response(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_release();
  v3 = *(_QWORD *)(a1 + 88);
  if (v3 >> 60 != 15)
    return sub_18308485C(*(_QWORD *)(a1 + 80), v3);
  return result;
}

uint64_t initializeWithCopy for HTTP.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v7 = (uint64_t *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v7;
  }
  else
  {
    v9 = *v7;
    sub_18324A994(*v7, v8);
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 88) = v8;
  }
  return a1;
}

uint64_t assignWithCopy for HTTP.Response(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  v4 = (uint64_t *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_18324A994(*v4, v5);
      v8 = *(_QWORD *)(a1 + 80);
      v9 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = v7;
      *(_QWORD *)(a1 + 88) = v5;
      sub_18308485C(v8, v9);
      return a1;
    }
    sub_183275214(a1 + 80);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v4;
    return a1;
  }
  v6 = *v4;
  sub_18324A994(*v4, v5);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v5;
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for HTTP.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  v8 = (_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  if (v9 >> 60 != 15)
  {
    v10 = *(_QWORD *)(a2 + 88);
    if (v10 >> 60 != 15)
    {
      v11 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = *v8;
      *(_QWORD *)(a1 + 88) = v10;
      sub_18308485C(v11, v9);
      return a1;
    }
    sub_183275214(a1 + 80);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTP.Response(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTP.Response(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTP.Response()
{
  return &type metadata for HTTP.Response;
}

uint64_t sub_1832CFF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  uint64_t result;

  if (a10 >> 62 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    return sub_183261798(a11, a12);
  }
  return result;
}

uint64_t destroy for HTTP.State(uint64_t a1)
{
  return sub_1832CF04C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
}

uint64_t *initializeWithCopy for HTTP.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  sub_1832CFF80(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  return a1;
}

uint64_t assignWithCopy for HTTP.State(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v24 = a2[9];
  v25 = a2[10];
  v26 = a2[11];
  sub_1832CFF80(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 80) = v25;
  *(_QWORD *)(a1 + 88) = v26;
  sub_1832CF04C(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((unint64_t *)&v20 + 1), v21, v22);
  return a1;
}

uint64_t assignWithTake for HTTP.State(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v14;
  v15 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v15;
  v16 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v16;
  sub_1832CF04C(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((unint64_t *)&v11 + 1), v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTP.State(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 33);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for HTTP.State(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 88) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = (unint64_t)-a2 << 8;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_QWORD *)(a1 + 88) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1832D0310(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 72) >> 62;
  if ((_DWORD)v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t sub_1832D032C(uint64_t result)
{
  *(_QWORD *)(result + 72) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1832D033C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (a2 < 3)
  {
    v2 = *(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
    *(_QWORD *)(result + 32) = *(unsigned __int8 *)(result + 32);
    *(_QWORD *)(result + 72) = v2;
  }
  else
  {
    *(_QWORD *)result = (a2 - 3);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 72) = 0xC000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTP.State()
{
  return &type metadata for HTTP.State;
}

void sub_1832D0398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1832D03BC(a1, a2, a3, &qword_1EDCDE648, qword_1EDCDE650);
}

void sub_1832D03BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  unint64_t v5;

  sub_18328FD50(319, a4, a5);
  if (v5 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t method lookup function for HTTP.Progress()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HTTP.Progress.done.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 264) + *(_QWORD *)(*(_QWORD *)v1 + 264));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_183246848;
  return v6(a1);
}

uint64_t sub_1832D04C8()
{
  uint64_t result;
  unint64_t v1;

  sub_183B91A7C();
  result = sub_183B91CF8();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AsyncSequenceReceive()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1832D055C(uint64_t result, unint64_t a2, uint64_t a3)
{
  return sub_1832CDD24(result, a2, a3);
}

void sub_1832D0564(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = v1;
  v4 = v2 + qword_1EDCDE170;
  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_1EDCDE650);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = MEMORY[0x1E0DEE9D8];
  v7 = (_QWORD *)(v2 + qword_1EDCDE180);
  *v7 = MEMORY[0x1E0DEE9D8];
  v7[1] = v6;
  v7[2] = v6;
  v7[3] = v6;
  v7[4] = v6;
  v7[5] = v6;
  v7[6] = v6;
  v8 = v2 + qword_1EDCDE188;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0xC000000000000000;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  swift_retain();
  type metadata accessor for HTTP.Progress();
}

uint64_t sub_1832D0634(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v3 = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTP.Progress<A, Pack{repeat B}>, a1);
  sub_1832C177C((uint64_t)&v5, a1, (uint64_t)&protocol witness table for HTTP.Progress<A, Pack{repeat B}>, v3, (uint64_t)&unk_1E1497540, (uint64_t)sub_1832D0700, (uint64_t)&block_descriptor_59);
  return v1;
}

uint64_t sub_1832D0690(uint64_t a1, void (*a2)(_QWORD, uint64_t *), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v8 = *(_QWORD *)(v3 + 80);
  v6 = *(_OWORD *)(v3 + 104);
  v9 = *(_OWORD *)(v3 + 88);
  v10 = v6;
  a2(0, &v8);
  swift_allocObject();
  return a3(a1);
}

uint64_t sub_1832D0700()
{
  return sub_1832D12AC((uint64_t (*)(_QWORD, uint64_t))sub_1832C16A8);
}

uint64_t sub_1832D070C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5;

  return sub_1832CD154(a1, a2, a3, a4, a5, *(void (**)(uint64_t *, int *))(v5 + 16));
}

uint64_t sub_1832D0714()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_QWORD *sub_1832D0738(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1832D3F88(a1, a2, v2);
}

uint64_t sub_1832D0740()
{
  return objectdestroy_77Tm((uint64_t *)&unk_1EDCDE6E0);
}

uint64_t sub_1832D074C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1832D0B30(a1, a2, a3, a4, a5, (uint64_t *)&unk_1EDCDE6E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1832CCC90);
}

uint64_t sub_1832D0760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1832D079C(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1832CC2C8);
}

uint64_t sub_1832D076C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832D0790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1832D079C(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1832CBDB4);
}

uint64_t sub_1832D079C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v6;

  return a6(a1, a2, a3, a4, a5, v6[7], v6[8], v6[2], v6[3], v6[4], v6[5], v6[6]);
}

uint64_t sub_1832D07D4()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDE1E0);
  swift_getTupleTypeMetadata3();
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  v1 = sub_183B919F8();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1832D0888(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, unsigned int *a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = v5[2];
  v10 = v5[3];
  v11 = v5[4];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDE1E0);
  swift_getTupleTypeMetadata3();
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(sub_183B919F8() - 8) + 80);
  return sub_1832CB788(a1, a2, a3, a4, a5, (uint64_t)v5 + ((v12 + 56) & ~v12), v9, v10, v11);
}

uint64_t sub_1832D097C()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  v1 = sub_183B919F8();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1832D09FC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  sub_183B919F8();
  return sub_1832CB068(a1, a2, a3);
}

uint64_t sub_1832D0ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v4)(_BYTE *, uint64_t);
  _BYTE v6[40];

  v4 = *(uint64_t (**)(_BYTE *, uint64_t))(v2 + 16);
  sub_1830630BC(a1, (uint64_t)v6, &qword_1EDCDE6F8);
  return v4(v6, a2);
}

uint64_t sub_1832D0B08(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5;

  return sub_1832CA7E0(a1, a2, a3, a4, a5, *(void (**)(uint64_t *, int *))(v5 + 16));
}

uint64_t sub_1832D0B10()
{
  return objectdestroy_77Tm(&qword_1EDCDE700);
}

uint64_t sub_1832D0B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1832D0B30(a1, a2, a3, a4, a5, &qword_1EDCDE700, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1832CA3B8);
}

uint64_t sub_1832D0B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v13;

  v13 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8) + 80);
  return a7(a1, a2, a3, a4, a5, v7 + ((v13 + 16) & ~v13));
}

uint64_t sub_1832D0BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, uint64_t);
  _QWORD v7[3];

  v5 = *(uint64_t (**)(_QWORD *, uint64_t))(v4 + 16);
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  return v5(v7, a4);
}

uint64_t sub_1832D0BE4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5;

  return sub_1832C9BAC(a1, a2, a3, a4, a5, *(uint64_t (**)(uint64_t, unint64_t, uint64_t, int *))(v5 + 16));
}

uint64_t sub_1832D0BEC()
{
  return objectdestroy_77Tm(&qword_1EDCDE710);
}

uint64_t sub_1832D0BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1832D0B30(a1, a2, a3, a4, a5, &qword_1EDCDE710, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1832C97D4);
}

uint64_t sub_1832D0C0C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t);
  _QWORD v8[3];
  char v9;

  v6 = *(uint64_t (**)(_QWORD *, uint64_t))(v5 + 16);
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  v9 = a4;
  return v6(v8, a5);
}

uint64_t sub_1832D0C48(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5)
{
  uint64_t v5;

  return sub_1832C89EC(a1, a2, a3, a4, a5, *(void (**)(uint64_t, unint64_t, uint64_t, _QWORD, int *))(v5 + 16));
}

uint64_t sub_1832D0C50()
{
  return objectdestroy_77Tm(&qword_1EDCDE718);
}

uint64_t sub_1832D0C5C(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5)
{
  return sub_1832D0C9C(a1, a2, a3, a4, a5, (uint64_t)sub_1832D0738, (uint64_t)&block_descriptor_248, (uint64_t)sub_1832D0738, (uint64_t)&block_descriptor_243);
}

uint64_t sub_1832D0C9C(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v18;

  v18 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE718) - 8) + 80);
  return sub_1832C8584(a1, a2, a3, a4, a5, v9 + ((v18 + 16) & ~v18), a6, a7, a8, a9);
}

uint64_t sub_1832D0D44()
{
  return objectdestroy_77Tm(&qword_1EDCDE718);
}

uint64_t objectdestroy_77Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t sub_1832D0DAC(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5)
{
  return sub_1832D0C9C(a1, a2, a3, a4, a5, (uint64_t)sub_1832D0738, (uint64_t)&block_descriptor_268, (uint64_t)sub_1832D0738, (uint64_t)&block_descriptor_263);
}

uint64_t sub_1832D0DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1832C73E8(a1, a2, v2);
}

uint64_t sub_1832D0DF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_183B91A7C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1832D0E6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_183B91A7C() - 8) + 80);
  return sub_1832C7AF4(*(uint64_t **)(v0 + 64), v0 + ((v1 + 72) & ~v1));
}

uint64_t sub_1832D0EA0()
{
  return objectdestroy_276Tm(&qword_1EDCDE720);
}

uint64_t sub_1832D0EAC()
{
  return sub_1832D118C(&qword_1EDCDE720, (uint64_t (*)(_QWORD, uint64_t))sub_1832C6F78);
}

uint64_t sub_1832D0EC0()
{
  return objectdestroy_276Tm(qword_1EDCDE650);
}

uint64_t sub_1832D0ECC()
{
  return sub_1832D118C(qword_1EDCDE650, (uint64_t (*)(_QWORD, uint64_t))sub_1832C6AFC);
}

uint64_t sub_1832D0EE0(uint64_t a1)
{
  uint64_t v1;

  return sub_1832C6E58(a1, v1, &qword_1EDCDE178, qword_1EDCDE650, (uint64_t (*)(char *))sub_1832C5440);
}

_OWORD *sub_1832D0F10(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[5];
  a2[4] = a1[4];
  a2[5] = v5;
  a2[2] = v3;
  a2[3] = v4;
  return a2;
}

uint64_t sub_1832D0F30()
{
  uint64_t v0;

  swift_release();
  sub_1832CF04C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  return swift_deallocObject();
}

uint64_t sub_1832D0F80()
{
  uint64_t v0;

  return sub_1832C5AA4(*(_QWORD *)(v0 + 16), (_OWORD *)(v0 + 24));
}

uint64_t sub_1832D0F8C(int *a1, uint64_t a2)
{
  __swift_memcpy5_4(a2, a1);
  return a2;
}

_QWORD *sub_1832D0FC8(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return a1;
}

uint64_t sub_1832D101C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v12 = *(_OWORD *)(a1 + 160);
  v10 = *(_QWORD *)(a1 + 176);
  v9 = *(_QWORD *)(a1 + 184);
  sub_1832CF04C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  sub_1832CF04C(v13, v2, v3, v4, v5, v6, v7, v8, v12, *((unint64_t *)&v12 + 1), v10, v9);
  return a1;
}

uint64_t sub_1832D10DC()
{
  return objectdestroy_276Tm(&qword_1EDCD7630);
}

uint64_t sub_1832D10E8()
{
  return sub_1832D118C(&qword_1EDCD7630, sub_1832C3320);
}

uint64_t sub_1832D10FC()
{
  return objectdestroy_276Tm(qword_1EDCDE530);
}

uint64_t objectdestroy_276Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v1 + v4, v2);
  return swift_deallocObject();
}

uint64_t sub_1832D1178()
{
  return sub_1832D118C(qword_1EDCDE530, sub_1832C2CC8);
}

uint64_t sub_1832D118C(uint64_t *a1, uint64_t (*a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8) + 80);
  return a2(*(_QWORD *)(v2 + 56), v2 + ((v3 + 64) & ~v3));
}

uint64_t sub_1832D11C8(uint64_t a1)
{
  uint64_t v1;

  return sub_1832C6E58(a1, v1, &qword_1EDCDE158, qword_1EDCDE530, (uint64_t (*)(char *))sub_1832C1B54);
}

uint64_t sub_1832D11F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832D121C()
{
  uint64_t v0;

  return sub_1832C2030(*(_QWORD *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32));
}

uint64_t objectdestroy_55Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1832D12A0()
{
  return sub_1832D12AC((uint64_t (*)(_QWORD, uint64_t))sub_1832C1A3C);
}

uint64_t sub_1832D12AC(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) - 8) + 80);
  return a1(*(_QWORD *)(v1 + 80), v1 + ((v2 + 88) & ~v2));
}

uint64_t sub_1832D12D4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1832D1310(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1832BFE98(a1, a2, a3 & 1, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_1832D131C()
{
  return swift_deallocObject();
}

uint64_t sub_1832D132C()
{
  return swift_deallocObject();
}

uint64_t sub_1832D133C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

void static DistributedActor<>.discover(_:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v5);
  v7 = (uint64_t *)&v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  NWActorSystem.assignID<A>(_:)(v7);
  v8 = *(os_unfair_lock_s **)(a2 + 120);
  v12 = a2;
  v13 = v7;
  v9 = v8 + 4;
  v15 = 0;
  v16 = 0;
  v14 = a1;
  os_unfair_lock_lock(v8 + 4);
  sub_183273D38(v10, sub_1832D1688);
  os_unfair_lock_unlock(v9);
  if (v2)
  {
    __break(1u);
  }
  else
  {
    v17 = a2;
    sub_183B914DC();
    sub_183058AE0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  }
}

uint64_t sub_1832D1688()
{
  return sub_1832D18C0();
}

void static DistributedActor<>.discover(_:connectionParameters:using:invalidationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  os_unfair_lock_s *v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[12];

  v20[0] = a5;
  v9 = (int *)type metadata accessor for NWActorDiscoveryMechanism(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v12);
  v14 = (_QWORD *)((char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  NWActorSystem.assignID<A>(_:)(v14);
  sub_1832616F4(a1, (uint64_t)v11);
  type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)&v11[v9[7]] = a2;
  v15 = &v11[v9[5]];
  *(_OWORD *)v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  v15[32] = -2;
  *(_QWORD *)&v11[v9[6]] = 0;
  v16 = *(os_unfair_lock_s **)(a3 + 120);
  v20[4] = a3;
  v20[5] = v14;
  v20[6] = v11;
  v20[7] = a4;
  v20[8] = v20[0];
  v17 = v16 + 4;
  swift_retain();
  os_unfair_lock_lock(v17);
  v18 = v20[1];
  sub_183273D38(v19, sub_1832D1688);
  os_unfair_lock_unlock(v17);
  if (v18)
  {
    __break(1u);
  }
  else
  {
    v20[11] = a3;
    sub_183B914DC();
    sub_183058AE0((uint64_t)v11, type metadata accessor for NWActorDiscoveryMechanism);
    sub_183058AE0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  }
}

uint64_t DistributedActor<>.peer.getter()
{
  if (qword_1EDCDC5B8 != -1)
    swift_once();
  return sub_183B92358();
}

uint64_t sub_1832D18C0()
{
  uint64_t *v0;

  return sub_18326F5FC(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1832D18E0()
{
  nw_protocol_definition_t v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v0 = nw_protocol_copy_tcp_definition();
  type metadata accessor for NWProtocolDefinition();
  v1 = (_QWORD *)swift_allocObject();
  v1[4] = v0;
  v2 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  v3 = sub_183B916E0();
  v5 = v4;

  result = swift_unknownObjectRelease();
  v1[2] = v3;
  v1[3] = v5;
  qword_1EDCDE778 = (uint64_t)v1;
  return result;
}

uint64_t static NWProtocolTCP.definition.getter()
{
  if (qword_1EDCDC5D0 != -1)
    swift_once();
  return swift_retain();
}

void sub_1832D19B0(char a1)
{
  uint64_t v1;

  nw_tcp_options_set_no_delay(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_1832D19C0()
{
  uint64_t v0;

  return nw_tcp_options_get_no_delay(*(void **)(v0 + 16));
}

void (*sub_1832D19D8(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_no_delay(v3);
  return sub_1832D1A10;
}

void sub_1832D1A10(uint64_t a1)
{
  nw_tcp_options_set_no_delay(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

void sub_1832D1A20(char a1)
{
  uint64_t v1;

  nw_tcp_options_set_no_push(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_1832D1A30()
{
  uint64_t v0;

  return nw_tcp_options_get_no_push(*(void **)(v0 + 16));
}

void (*sub_1832D1A48(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_no_push(v3);
  return sub_1832D1A80;
}

void sub_1832D1A80(uint64_t a1)
{
  nw_tcp_options_set_no_push(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

void sub_1832D1A90(char a1)
{
  uint64_t v1;

  nw_tcp_options_set_no_options(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_1832D1AA0()
{
  uint64_t v0;

  return nw_tcp_options_get_no_options(*(void **)(v0 + 16));
}

void (*sub_1832D1AB8(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_no_options(v3);
  return sub_1832D1AF0;
}

void sub_1832D1AF0(uint64_t a1)
{
  nw_tcp_options_set_no_options(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

void sub_1832D1B00(char a1)
{
  uint64_t v1;

  nw_tcp_options_set_enable_keepalive(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_1832D1B10()
{
  uint64_t v0;

  return nw_tcp_options_get_enable_keepalive(*(void **)(v0 + 16));
}

void (*sub_1832D1B28(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_enable_keepalive(v3);
  return sub_1832D1B60;
}

void sub_1832D1B60(uint64_t a1)
{
  nw_tcp_options_set_enable_keepalive(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_1832D1B70(unint64_t a1)
{
  return sub_1832D1ED4(a1, (uint64_t (*)(_QWORD, unint64_t))nw_tcp_options_set_keepalive_count);
}

uint64_t sub_1832D1B7C()
{
  uint64_t v0;

  return nw_tcp_options_get_keepalive_count(*(void **)(v0 + 16));
}

uint64_t (*sub_1832D1B98(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_keepalive_count(v3);
  return sub_1832D1BD4;
}

uint64_t sub_1832D1BD4(_QWORD *a1, uint64_t a2)
{
  return sub_1832D1FEC(a1, a2, (uint64_t (*)(_QWORD))nw_tcp_options_set_keepalive_count);
}

uint64_t sub_1832D1BE0(unint64_t a1)
{
  return sub_1832D1ED4(a1, (uint64_t (*)(_QWORD, unint64_t))nw_tcp_options_set_keepalive_idle_time);
}

uint64_t sub_1832D1BEC()
{
  uint64_t v0;

  return nw_tcp_options_get_keepalive_idle_time(*(void **)(v0 + 16));
}

uint64_t (*sub_1832D1C08(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_keepalive_idle_time(v3);
  return sub_1832D1C44;
}

uint64_t sub_1832D1C44(_QWORD *a1, uint64_t a2)
{
  return sub_1832D1FEC(a1, a2, (uint64_t (*)(_QWORD))nw_tcp_options_set_keepalive_idle_time);
}

uint64_t sub_1832D1C50(unint64_t a1)
{
  return sub_1832D1ED4(a1, (uint64_t (*)(_QWORD, unint64_t))nw_tcp_options_set_keepalive_interval);
}

uint64_t sub_1832D1C5C()
{
  uint64_t v0;

  return nw_tcp_options_get_keepalive_interval(*(void **)(v0 + 16));
}

uint64_t (*sub_1832D1C78(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_keepalive_interval(v3);
  return sub_1832D1CB4;
}

uint64_t sub_1832D1CB4(_QWORD *a1, uint64_t a2)
{
  return sub_1832D1FEC(a1, a2, (uint64_t (*)(_QWORD))nw_tcp_options_set_keepalive_interval);
}

uint64_t sub_1832D1CC0(unint64_t a1)
{
  return sub_1832D1ED4(a1, (uint64_t (*)(_QWORD, unint64_t))nw_tcp_options_set_maximum_segment_size);
}

uint64_t sub_1832D1CCC()
{
  uint64_t v0;

  return nw_tcp_options_get_maximum_segment_size(*(void **)(v0 + 16));
}

uint64_t (*sub_1832D1CE8(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_maximum_segment_size(v3);
  return sub_1832D1D24;
}

uint64_t sub_1832D1D24(_QWORD *a1, uint64_t a2)
{
  return sub_1832D1FEC(a1, a2, (uint64_t (*)(_QWORD))nw_tcp_options_set_maximum_segment_size);
}

uint64_t sub_1832D1D30(unint64_t a1)
{
  return sub_1832D1ED4(a1, (uint64_t (*)(_QWORD, unint64_t))nw_tcp_options_set_connection_timeout);
}

uint64_t sub_1832D1D3C()
{
  uint64_t v0;

  return nw_tcp_options_get_connection_timeout(*(void **)(v0 + 16));
}

uint64_t (*sub_1832D1D58(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_connection_timeout(v3);
  return sub_1832D1D94;
}

uint64_t sub_1832D1D94(_QWORD *a1, uint64_t a2)
{
  return sub_1832D1FEC(a1, a2, (uint64_t (*)(_QWORD))nw_tcp_options_set_connection_timeout);
}

uint64_t sub_1832D1DA0(unint64_t a1)
{
  return sub_1832D1ED4(a1, (uint64_t (*)(_QWORD, unint64_t))nw_tcp_options_set_persist_timeout);
}

uint64_t sub_1832D1DAC()
{
  uint64_t v0;

  return nw_tcp_options_get_persist_timeout(*(void **)(v0 + 16));
}

uint64_t (*sub_1832D1DC8(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_persist_timeout(v3);
  return sub_1832D1E04;
}

uint64_t sub_1832D1E04(_QWORD *a1, uint64_t a2)
{
  return sub_1832D1FEC(a1, a2, (uint64_t (*)(_QWORD))nw_tcp_options_set_persist_timeout);
}

uint64_t sub_1832D1E10(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  if ((*a1 & 0x8000000000000000) == 0 && !HIDWORD(*a1))
    return a5(*(_QWORD *)(*(_QWORD *)a2 + 16));
  result = sub_183B91F50();
  __break(1u);
  return result;
}

uint64_t sub_1832D1EC8(unint64_t a1)
{
  return sub_1832D1ED4(a1, (uint64_t (*)(_QWORD, unint64_t))nw_tcp_options_set_retransmit_connection_drop_time);
}

uint64_t sub_1832D1ED4(unint64_t a1, uint64_t (*a2)(_QWORD, unint64_t))
{
  uint64_t v2;
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0 && !HIDWORD(a1))
    return a2(*(_QWORD *)(v2 + 16), a1);
  result = sub_183B91F50();
  __break(1u);
  return result;
}

uint64_t sub_1832D1F88()
{
  uint64_t v0;

  return nw_tcp_options_get_retransmit_connection_drop_time(*(void **)(v0 + 16));
}

uint64_t (*sub_1832D1FA4(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_retransmit_connection_drop_time(v3);
  return sub_1832D1FE0;
}

uint64_t sub_1832D1FE0(_QWORD *a1, uint64_t a2)
{
  return sub_1832D1FEC(a1, a2, (uint64_t (*)(_QWORD))nw_tcp_options_set_retransmit_connection_drop_time);
}

uint64_t sub_1832D1FEC(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t result;

  if ((*a1 & 0x8000000000000000) == 0 && !HIDWORD(*a1))
    return a3(a1[1]);
  result = sub_183B91F50();
  __break(1u);
  return result;
}

void sub_1832D20A0(char a1)
{
  uint64_t v1;

  nw_tcp_options_set_retransmit_fin_drop(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_1832D20B0()
{
  uint64_t v0;

  return nw_tcp_options_get_retransmit_fin_drop(*(void **)(v0 + 16));
}

void (*sub_1832D20C8(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_retransmit_fin_drop(v3);
  return sub_1832D2100;
}

void sub_1832D2100(uint64_t a1)
{
  nw_tcp_options_set_retransmit_fin_drop(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

void sub_1832D2110(char a1)
{
  uint64_t v1;

  nw_tcp_options_set_disable_ack_stretching(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_1832D2120()
{
  uint64_t v0;

  return nw_tcp_options_get_disable_ack_stretching(*(void **)(v0 + 16));
}

void (*sub_1832D2138(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_disable_ack_stretching(v3);
  return sub_1832D2170;
}

void sub_1832D2170(uint64_t a1)
{
  nw_tcp_options_set_disable_ack_stretching(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

void sub_1832D2180(char a1)
{
  uint64_t v1;

  nw_tcp_options_set_enable_fast_open(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_1832D2190()
{
  uint64_t v0;

  return nw_tcp_options_get_enable_fast_open(*(void **)(v0 + 16));
}

void (*sub_1832D21A8(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_enable_fast_open(v3);
  return sub_1832D21E0;
}

void sub_1832D21E0(uint64_t a1)
{
  nw_tcp_options_set_enable_fast_open(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

void sub_1832D21F0(char a1)
{
  uint64_t v1;

  nw_tcp_options_set_disable_ecn(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_1832D2200()
{
  uint64_t v0;

  return nw_tcp_options_get_disable_ecn(*(void **)(v0 + 16));
}

void (*sub_1832D2218(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_disable_ecn(v3);
  return sub_1832D2250;
}

void sub_1832D2250(uint64_t a1)
{
  nw_tcp_options_set_disable_ecn(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

BOOL sub_1832D2260(NSObject *a1)
{
  NSObject *v1;
  NSObject *v2;
  _BOOL8 is_equal;

  v1 = nw_protocol_options_copy_definition(a1);
  v2 = nw_protocol_copy_tcp_definition();
  is_equal = nw_protocol_definition_is_equal(v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return is_equal;
}

uint64_t NWProtocolTCP.Options.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = nw_tcp_create_options();
  return v0;
}

uint64_t NWProtocolTCP.Options.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

BOOL sub_1832D2308(NSObject *a1)
{
  return nw_protocol_metadata_is_tcp(a1);
}

uint64_t sub_1832D231C()
{
  uint64_t v0;

  return nw_tcp_get_available_receive_buffer(*(nw_protocol_metadata_t *)(v0 + 16));
}

uint64_t sub_1832D2324()
{
  uint64_t v0;

  return nw_tcp_get_available_send_buffer(*(nw_protocol_metadata_t *)(v0 + 16));
}

uint64_t NWProtocolTCP.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t NWProtocolTCP.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL sub_1832D2348@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_tcp_options_get_no_delay(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_1832D2374(BOOL *a1, uint64_t a2)
{
  nw_tcp_options_set_no_delay(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

BOOL sub_1832D2388@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_tcp_options_get_no_push(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_1832D23B4(BOOL *a1, uint64_t a2)
{
  nw_tcp_options_set_no_push(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

BOOL sub_1832D23C8@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_tcp_options_get_no_options(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_1832D23F4(BOOL *a1, uint64_t a2)
{
  nw_tcp_options_set_no_options(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

BOOL sub_1832D2408@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_tcp_options_get_enable_keepalive(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_1832D2434(BOOL *a1, uint64_t a2)
{
  nw_tcp_options_set_enable_keepalive(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

uint64_t sub_1832D2448@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = nw_tcp_options_get_keepalive_count(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_1832D2478(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1832D1E10(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_tcp_options_set_keepalive_count);
}

uint64_t sub_1832D2494@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = nw_tcp_options_get_keepalive_idle_time(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_1832D24C4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1832D1E10(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_tcp_options_set_keepalive_idle_time);
}

uint64_t sub_1832D24E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = nw_tcp_options_get_keepalive_interval(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_1832D2510(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1832D1E10(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_tcp_options_set_keepalive_interval);
}

uint64_t sub_1832D252C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = nw_tcp_options_get_maximum_segment_size(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_1832D255C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1832D1E10(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_tcp_options_set_maximum_segment_size);
}

uint64_t sub_1832D2578@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = nw_tcp_options_get_connection_timeout(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_1832D25A8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1832D1E10(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_tcp_options_set_connection_timeout);
}

uint64_t sub_1832D25C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = nw_tcp_options_get_persist_timeout(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_1832D25F4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1832D1E10(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_tcp_options_set_persist_timeout);
}

uint64_t sub_1832D2610@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = nw_tcp_options_get_retransmit_connection_drop_time(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_1832D2640(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1832D1E10(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_tcp_options_set_retransmit_connection_drop_time);
}

BOOL sub_1832D265C@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_tcp_options_get_retransmit_fin_drop(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_1832D2688(BOOL *a1, uint64_t a2)
{
  nw_tcp_options_set_retransmit_fin_drop(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

BOOL sub_1832D269C@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_tcp_options_get_disable_ack_stretching(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_1832D26C8(BOOL *a1, uint64_t a2)
{
  nw_tcp_options_set_disable_ack_stretching(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

BOOL sub_1832D26DC@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_tcp_options_get_enable_fast_open(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_1832D2708(BOOL *a1, uint64_t a2)
{
  nw_tcp_options_set_enable_fast_open(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

BOOL sub_1832D271C@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_tcp_options_get_disable_ecn(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_1832D2748(BOOL *a1, uint64_t a2)
{
  nw_tcp_options_set_disable_ecn(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

uint64_t type metadata accessor for NWProtocolTCP()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolTCP.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noDelay.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noDelay.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noDelay.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noPush.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noPush.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noPush.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noOptions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noOptions.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noOptions.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableKeepalive.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableKeepalive.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableKeepalive.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveCount.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveCount.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.maximumSegmentSize.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.maximumSegmentSize.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.maximumSegmentSize.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionTimeout.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionTimeout.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionTimeout.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.persistTimeout.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.persistTimeout.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.persistTimeout.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionDropTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionDropTime.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionDropTime.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.retransmitFinDrop.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.retransmitFinDrop.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.retransmitFinDrop.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableAckStretching.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableAckStretching.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableAckStretching.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableFastOpen.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableFastOpen.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableFastOpen.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableECN.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableECN.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableECN.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 464))();
}

uint64_t type metadata accessor for NWProtocolTCP.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolTCP.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolTCP.Metadata.availableReceiveBuffer.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of NWProtocolTCP.Metadata.availableSendBuffer.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t NWConnection.__allocating_init(to:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_allocObject();
  sub_1832D6584(a1, a2);
  v5 = v4;
  swift_release();
  return v5;
}

uint64_t NWConnection.identifier.getter()
{
  uint64_t v0;

  return nw_connection_get_id(*(void **)(v0 + 16));
}

uint64_t NWConnection.ContentContext.__allocating_init(identifier:expiration:priority:isFinal:antecedent:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, double a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t NWConnection.receiveMessage(completion:)(uint64_t a1, uint64_t a2)
{
  return sub_1832D43BC(a1, a2, (uint64_t)&unk_1E1498330, (uint64_t)sub_183083FE0, (uint64_t)&block_descriptor_15_1);
}

uint64_t NWConnection.debugDescription.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_description);
  v2 = sub_183B916E0();

  return v2;
}

void NWConnection.state.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 88);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(v3 + 92);
  *(_DWORD *)a1 = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 96));
}

uint64_t (*NWConnection.stateUpdateHandler.getter())()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 24);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 24;
  os_unfair_lock_lock(v1 + 24);
  sub_183080854(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_1832576D8;
}

uint64_t sub_1832D2C3C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_1832576D8;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183061488(v1);
  return NWConnection.stateUpdateHandler.setter((uint64_t)v4, v3);
}

uint64_t (*NWConnection.stateUpdateHandler.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t *v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)();
  uint64_t v7;
  __int128 v9;
  uint64_t (*v10[4])();

  a1[2] = (uint64_t (*)())v1;
  v3 = *(os_unfair_lock_s **)(v1 + 24);
  v4 = (uint64_t *)&v3[4];
  v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_183080854(v4, v10);
  os_unfair_lock_unlock(v5);
  v6 = v10[0];
  if (v10[0])
  {
    v9 = *(_OWORD *)v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_1832576D8;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v7;
  return sub_1832D2D68;
}

uint64_t sub_1832D2D68(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, NWConnection.stateUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_183061488, (uint64_t (*)(uint64_t, uint64_t))sub_182FEDBA4);
}

uint64_t NWConnection.maximumDatagramSize.getter()
{
  uint64_t v0;

  return nw_connection_get_maximum_datagram_size(*(nw_connection_t *)(v0 + 16));
}

uint64_t NWConnection.currentPath.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v3 = nw_connection_copy_current_path(*(nw_connection_t *)(v1 + 16));
  if (v3)
  {
    sub_183062C08(v3, a1);
    v4 = type metadata accessor for NWPath(0);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a1;
    v7 = 0;
  }
  else
  {
    v4 = type metadata accessor for NWPath(0);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a1;
    v7 = 1;
  }
  return v5(v6, v7, 1, v4);
}

uint64_t (*NWConnection.pathUpdateHandler.getter())(uint64_t a1)
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 24);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 24;
  os_unfair_lock_lock(v1 + 24);
  sub_1832D3120(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_183288404;
}

void sub_1832D2EA8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_1832D998C;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183061488(v1);
  NWConnection.pathUpdateHandler.setter((uint64_t)v4, v3);
}

void NWConnection.pathUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v5 = *(_QWORD *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 96));
  v6 = *(_QWORD *)(v5 + 32);
  sub_183061488(a1);
  sub_1830630AC(v6);
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 96));
  if (a1)
  {
    v7 = *(NSObject **)(v2 + 16);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    v10[4] = sub_1832D66EC;
    v10[5] = v8;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = sub_182FC77FC;
    v10[3] = &block_descriptor_38_0;
    v9 = _Block_copy(v10);
    sub_183061488(a1);
    sub_183061488(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_set_path_changed_handler(v7, v9);
    sub_1830630AC(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_1830630AC(a1);
  }
  else
  {
    nw_connection_set_path_changed_handler(*(nw_connection_t *)(v2 + 16), 0);
  }
}

uint64_t sub_1832D3088(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  uint64_t v8;

  v3 = type metadata accessor for NWPath(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = swift_unknownObjectRetain();
  sub_183062C08(v6, (uint64_t)v5);
  a2(v5);
  return sub_183058AE0((uint64_t)v5, type metadata accessor for NWPath);
}

uint64_t sub_1832D3120@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_182FEDAC0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_183061488(v3);
}

uint64_t (*NWConnection.pathUpdateHandler.modify(uint64_t (**a1)(uint64_t)))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  __int128 v9;
  uint64_t (*v10[4])();

  a1[2] = (uint64_t (*)(uint64_t))v1;
  v3 = *(os_unfair_lock_s **)(v1 + 24);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_1832D3120(v4, v10);
  os_unfair_lock_unlock(v5);
  v6 = (uint64_t (*)(uint64_t))v10[0];
  if (v10[0])
  {
    v9 = *(_OWORD *)v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_1832D998C;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))v7;
  return sub_1832D323C;
}

uint64_t sub_1832D323C(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))NWConnection.pathUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_183061488, (uint64_t (*)(uint64_t, uint64_t))sub_1830630AC);
}

uint64_t (*NWConnection.viabilityUpdateHandler.getter())(char)
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 24);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 24;
  os_unfair_lock_lock(v1 + 24);
  sub_1832D3510(v2, (uint64_t (**)(unsigned __int8 *))&v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_1832D66F4;
}

void sub_1832D32F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_1832D66F4;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183061488(v1);
  NWConnection.viabilityUpdateHandler.setter((uint64_t)v4, v3);
}

void NWConnection.viabilityUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v5 = *(_QWORD *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 96));
  v6 = *(_QWORD *)(v5 + 48);
  sub_183061488(a1);
  sub_1830630AC(v6);
  *(_QWORD *)(v5 + 48) = a1;
  *(_QWORD *)(v5 + 56) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 96));
  if (a1)
  {
    v7 = *(NSObject **)(v2 + 16);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    v10[4] = sub_182FEDAC0;
    v10[5] = v8;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = sub_1832D34D4;
    v10[3] = &block_descriptor_51_0;
    v9 = _Block_copy(v10);
    sub_183061488(a1);
    sub_183061488(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_set_viability_changed_handler(v7, v9);
    sub_1830630AC(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_1830630AC(a1);
  }
  else
  {
    nw_connection_set_viability_changed_handler(*(nw_connection_t *)(v2 + 16), 0);
  }
}

uint64_t sub_1832D34D4(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t sub_1832D3510@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(unsigned __int8 *)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(unsigned __int8 *);

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1832D9884;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v5;
  return sub_183061488(v3);
}

uint64_t (*NWConnection.viabilityUpdateHandler.modify(uint64_t (**a1)(char)))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)(char);
  uint64_t v7;
  __int128 v9;
  uint64_t (*v10[4])(unsigned __int8 *);

  a1[2] = (uint64_t (*)(char))v1;
  v3 = *(os_unfair_lock_s **)(v1 + 24);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_1832D3510(v4, v10);
  os_unfair_lock_unlock(v5);
  v6 = (uint64_t (*)(char))v10[0];
  if (v10[0])
  {
    v9 = *(_OWORD *)v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_1832D66F4;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(char))v7;
  return sub_1832D362C;
}

uint64_t sub_1832D362C(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))NWConnection.viabilityUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_183257670, (uint64_t (*)(uint64_t, uint64_t))sub_182FEDBA4);
}

uint64_t (*NWConnection.betterPathUpdateHandler.getter())(char)
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 24);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 24;
  os_unfair_lock_lock(v1 + 24);
  sub_1832D3938(v2, (uint64_t (**)(unsigned __int8 *))&v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_1832D66F4;
}

double sub_1832D36E4@<D0>(uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, os_unfair_lock_s *)@<X3>, _OWORD *a3@<X8>)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  double result;
  __int128 v9;

  v5 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 24);
  v6 = v5 + 4;
  v7 = v5 + 24;
  os_unfair_lock_lock(v5 + 24);
  a2(&v9, v6);
  os_unfair_lock_unlock(v7);
  result = *(double *)&v9;
  *a3 = v9;
  return result;
}

void sub_1832D3758(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_1832D66F4;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183061488(v1);
  NWConnection.betterPathUpdateHandler.setter((uint64_t)v4, v3);
}

void NWConnection.betterPathUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v5 = *(_QWORD *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 96));
  v6 = *(_QWORD *)(v5 + 64);
  sub_183061488(a1);
  sub_1830630AC(v6);
  *(_QWORD *)(v5 + 64) = a1;
  *(_QWORD *)(v5 + 72) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 96));
  if (a1)
  {
    v7 = *(NSObject **)(v2 + 16);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    v10[4] = sub_1832576D8;
    v10[5] = v8;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = sub_1832D34D4;
    v10[3] = &block_descriptor_65;
    v9 = _Block_copy(v10);
    sub_183061488(a1);
    sub_183061488(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_set_better_path_available_handler(v7, v9);
    sub_1830630AC(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_1830630AC(a1);
  }
  else
  {
    nw_connection_set_better_path_available_handler(*(nw_connection_t *)(v2 + 16), 0);
  }
}

uint64_t sub_1832D3938@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(unsigned __int8 *);

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1832D9850;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v5;
  return sub_183061488(v3);
}

uint64_t (*NWConnection.betterPathUpdateHandler.modify(uint64_t (**a1)(char)))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)(char);
  uint64_t v7;
  __int128 v9;
  uint64_t (*v10[4])(unsigned __int8 *);

  a1[2] = (uint64_t (*)(char))v1;
  v3 = *(os_unfair_lock_s **)(v1 + 24);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_1832D3938(v4, v10);
  os_unfair_lock_unlock(v5);
  v6 = (uint64_t (*)(char))v10[0];
  if (v10[0])
  {
    v9 = *(_OWORD *)v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_1832D66F4;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(char))v7;
  return sub_1832D3A54;
}

uint64_t sub_1832D3A54(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))NWConnection.betterPathUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_183257670, (uint64_t (*)(uint64_t, uint64_t))sub_182FEDBA4);
}

uint64_t NWConnection.endpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_183058C44(v1 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint, a1, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
}

uint64_t NWConnection.parameters.getter()
{
  return swift_retain();
}

uint64_t NWConnection.init(to:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_1832D6584(a1, a2);
  v3 = v2;
  swift_release();
  return v3;
}

uint64_t NWConnection.__allocating_init(host:port:using:)(uint64_t a1, __int16 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  v11 = *a2;
  *(_OWORD *)v8 = *(_OWORD *)a1;
  *((_QWORD *)v8 + 2) = v9;
  v8[24] = v10;
  *((_WORD *)v8 + 13) = v11;
  swift_storeEnumTagMultiPayload();
  swift_allocObject();
  sub_1832D6584((uint64_t)v8, a3);
  v13 = v12;
  swift_release();
  return v13;
}

uint64_t NWConnection.__allocating_init(connection:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  os_unfair_lock_s *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NWEndpoint();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v22 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v22 - v11;
  v13 = *(void **)(a1 + 16);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = (_QWORD *)(v14 + 16);
  v16 = (os_unfair_lock_s *)(v14 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v16);
  sub_183226978(v15, &v23);
  os_unfair_lock_unlock(v16);
  v17 = nw_connection_create_with_connection(v13, v23);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v17)
  {
    v18 = nw_connection_copy_endpoint(v17);
    sub_183056F9C(v18, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      sub_1830620D4((uint64_t)v6, qword_1ECD84160);
      return 0;
    }
    else
    {
      sub_183058EC4((uint64_t)v6, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      v20 = v22;
      sub_183058C44((uint64_t)v12, v22, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      swift_allocObject();
      v19 = sub_183058A08(v20, a2, (uint64_t)v17);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      sub_183058AE0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    }
  }
  else
  {
    swift_release();
    swift_release();
    return 0;
  }
  return v19;
}

void *NWConnection.queue.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (os_unfair_lock_s *)(v1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 96));
  v3 = *(void **)(v1 + 80);
  v4 = v3;
  os_unfair_lock_unlock(v2);
  return v3;
}

Swift::Void __swiftcall NWConnection.forceCancel()()
{
  uint64_t v0;

  nw_connection_force_cancel(*(nw_connection_t *)(v0 + 16));
}

Swift::Void __swiftcall NWConnection.cancelCurrentEndpoint()()
{
  uint64_t v0;

  nw_connection_cancel_current_endpoint(*(nw_connection_t *)(v0 + 16));
}

Swift::Void __swiftcall NWConnection.restart()()
{
  uint64_t v0;

  nw_connection_restart(*(nw_connection_t *)(v0 + 16));
}

uint64_t _s7Network12NWConnectionC2nwSo03OS_C11_connection_pvg_0()
{
  return swift_unknownObjectRetain();
}

uint64_t NWConnection.ContentContext.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWConnection.ContentContext.expirationMilliseconds.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

double NWConnection.ContentContext.relativePriority.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

uint64_t NWConnection.ContentContext.antecedent.getter()
{
  return swift_retain();
}

uint64_t NWConnection.ContentContext.isFinal.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t sub_1832D3E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[6];

  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9D8];
  v2 = (uint64_t *)(v1 + 16);
  v3 = *(NSObject **)(v0 + 16);
  v7[4] = sub_1832D0738;
  v7[5] = v1;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = sub_1832D405C;
  v7[3] = &block_descriptor_75_0;
  v4 = _Block_copy(v7);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_content_context_foreach_protocol_metadata(v3, v4);
  _Block_release(v4);
  swift_unknownObjectRelease();
  swift_beginAccess();
  v5 = *v2;
  swift_bridgeObjectRetain();
  swift_release();
  return v5;
}

_QWORD *sub_1832D3F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;

  result = sub_1832A39D4(a2);
  if (result)
  {
    v5 = (void (*)(uint64_t))result[12];
    v6 = swift_unknownObjectRetain();
    v5(v6);
    swift_beginAccess();
    v7 = swift_retain();
    MEMORY[0x186DB1E20](v7);
    if (*(_QWORD *)((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      sub_183B91968();
    sub_183B91998();
    sub_183B91944();
    swift_endAccess();
    return (_QWORD *)swift_release();
  }
  return result;
}

uint64_t sub_1832D405C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v5(a2, a3);
  swift_release();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832D40C0(uint64_t a1)
{
  return sub_1832D50A8(a1, (uint64_t (*)(_QWORD, _QWORD))nw_content_context_copy_protocol_metadata);
}

void NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t *v21;
  NSObject *v22;
  uint64_t v23;

  v15 = sub_183B91758();
  v16 = nw_content_context_create((const char *)(v15 + 32));
  swift_release();
  *(_QWORD *)(v7 + 16) = v16;
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = a2;
  *(_QWORD *)(v7 + 40) = a3;
  nw_content_context_set_expiration_milliseconds(v16, a3);
  *(double *)(v7 + 48) = a7;
  nw_content_context_set_relative_priority(v16, a7);
  *(_BYTE *)(v7 + 64) = a4;
  nw_content_context_set_is_final(v16, a4 & 1);
  *(_QWORD *)(v7 + 56) = a5;
  if (a5)
  {
    v17 = *(NSObject **)(a5 + 16);
    swift_retain();
    nw_content_context_set_antecedent(v16, v17);
  }
  if (!a6)
    goto LABEL_14;
  if (!(a6 >> 62))
  {
    v18 = *(_QWORD *)((a6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v18)
      goto LABEL_6;
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    swift_release();
    return;
  }
  swift_bridgeObjectRetain();
  v18 = sub_183B91F68();
  swift_bridgeObjectRelease();
  if (!v18)
    goto LABEL_13;
LABEL_6:
  if (v18 >= 1)
  {
    if ((a6 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v18; ++i)
      {
        v20 = MEMORY[0x186DB230C](i, a6);
        nw_content_context_set_metadata_for_protocol(*(nw_content_context_t *)(v7 + 16), *(nw_protocol_metadata_t *)(v20 + 16));
        swift_unknownObjectRelease();
      }
    }
    else
    {
      v21 = (uint64_t *)(a6 + 32);
      v22 = *(NSObject **)(v7 + 16);
      do
      {
        v23 = *v21++;
        nw_content_context_set_metadata_for_protocol(v22, *(nw_protocol_metadata_t *)(v23 + 16));
        --v18;
      }
      while (v18);
    }
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t sub_1832D425C(uint64_t a1)
{
  return sub_183083E70(a1, (NSObject **)&_nw_content_context_final_send, &qword_1EDCDE788);
}

uint64_t static NWConnection.ContentContext.finalMessage.getter()
{
  return sub_18303BFDC(&qword_1EDCDC5E0);
}

uint64_t sub_1832D428C(uint64_t a1)
{
  return sub_183083E70(a1, (NSObject **)&_nw_content_context_default_stream, &qword_1EDCDE790);
}

uint64_t static NWConnection.ContentContext.defaultStream.getter()
{
  return sub_18303BFDC(&qword_1EDCDC5E8);
}

uint64_t NWConnection.ContentContext.__allocating_init(nw:)(NSObject *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  v3 = swift_unknownObjectRetain();
  *(_QWORD *)(v2 + 40) = nw_content_context_get_expiration_milliseconds(v3);
  *(double *)(v2 + 48) = nw_content_context_get_relative_priority(a1);
  *(_BYTE *)(v2 + 64) = nw_content_context_get_is_final(a1);
  nw_content_context_get_identifier(a1);
  *(_QWORD *)(v2 + 24) = sub_183B91800();
  *(_QWORD *)(v2 + 32) = v4;
  v5 = nw_content_context_copy_antecedent(a1);
  v6 = sub_1830841B8(v5);
  swift_unknownObjectRelease();
  *(_QWORD *)(v2 + 56) = v6;
  return v2;
}

uint64_t NWConnection.ContentContext.init(nw:)(NSObject *a1)
{
  uint64_t v1;

  v1 = sub_1832D6914(a1);
  swift_unknownObjectRelease();
  return v1;
}

void NWConnection.receiveDiscontiguous(minimumIncompleteLength:maximumLength:completion:)(uint32_t a1, uint32_t a2, uint64_t a3, uint64_t a4)
{
  sub_182FD5AA8(a1, a2, a3, a4, (uint64_t)&unk_1E1498588, (uint64_t)sub_1832D697C, (uint64_t)&block_descriptor_81);
}

uint64_t NWConnection.receiveMessageDiscontiguous(completion:)(uint64_t a1, uint64_t a2)
{
  return sub_1832D43BC(a1, a2, (uint64_t)&unk_1E14985D8, (uint64_t)sub_1832D987C, (uint64_t)&block_descriptor_87);
}

uint64_t sub_1832D43BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[6];

  v10 = *(NSObject **)(v5 + 16);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  v14[4] = a4;
  v14[5] = v11;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = sub_183083F3C;
  v14[3] = a5;
  v12 = _Block_copy(v14);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  return swift_unknownObjectRelease();
}

uint64_t sub_1832D4480(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(char *, _QWORD *, _QWORD, _BYTE *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD *v14;
  NSObject *v15;
  _BYTE v18[8];

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDD1F0);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a1)
  {
    sub_183B9162C();
    v11 = sub_183B91638();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
  }
  else
  {
    v12 = sub_183B91638();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  }
  v13 = swift_unknownObjectRetain();
  v14 = sub_1830841B8(v13);
  v15 = swift_unknownObjectRetain();
  sub_1830840B4(v15, (uint64_t)v18);
  a5(v10, v14, a3 & 1, v18);
  swift_release();
  return sub_1830620D4((uint64_t)v10, (uint64_t *)&unk_1EDCDD1F0);
}

uint64_t NWConnection.receiveFile(at:maximumLength:handler:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[6];

  v8 = *(void **)(v4 + 16);
  swift_unknownObjectRetain();
  sub_183B91380();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  v13[4] = sub_1832D6994;
  v13[5] = v9;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = sub_1832D4750;
  v13[3] = &block_descriptor_93;
  v10 = _Block_copy(v13);
  swift_retain();
  swift_release();
  v11 = sub_183B91758();
  swift_bridgeObjectRelease();
  nw_connection_receive_file_at_path_with_progress(v8, (const char *)(v11 + 32), a2, v10);
  swift_release();
  _Block_release(v10);
  return swift_unknownObjectRelease();
}

uint64_t sub_1832D46C0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD *, uint64_t, _BYTE *))
{
  _QWORD *v9;
  NSObject *v10;
  _BYTE v12[8];

  swift_unknownObjectRetain();
  v9 = sub_1830841B8(a2);
  v10 = swift_unknownObjectRetain();
  sub_1830840B4(v10, (uint64_t)v12);
  LOBYTE(a5) = a5(a1, v9, a3, v12);
  swift_release();
  return a5 & 1;
}

uint64_t sub_1832D4750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  LOBYTE(a4) = v9(a2, a3, a4, a5);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a4 & 1;
}

uint64_t sub_1832D47DC(uint64_t a1, uint64_t (*a2)(_BYTE *))
{
  NSObject *v3;
  _BYTE v5[8];

  v3 = swift_unknownObjectRetain();
  sub_1830840B4(v3, (uint64_t)v5);
  return a2(v5);
}

void NWConnection.send(discontiguousContent:contentContext:isComplete:completion:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  _QWORD aBlock[6];

  v7 = *a4;
  if (*a4)
  {
    v8 = a4[1];
    v9 = *(NSObject **)(v4 + 16);
    sub_183061488(*a4);
    swift_unknownObjectRetain();
    v10 = sub_183B91620();
    v11 = *(NSObject **)(a2 + 16);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v7;
    *(_QWORD *)(v12 + 24) = v8;
    aBlock[4] = sub_183083F38;
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_183056AB0;
    aBlock[3] = &block_descriptor_99;
    v13 = _Block_copy(aBlock);
    sub_183061488(v7);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_send(v9, v10, v11, a3 & 1, v13);
    _Block_release(v13);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    sub_1830630AC(v7);
  }
  else
  {
    v14 = *(NSObject **)(v4 + 16);
    swift_unknownObjectRetain();
    v15 = sub_183B91620();
    nw_connection_send_idempotent(v14, v15, *(NSObject **)(a2 + 16), a3 & 1);
    swift_unknownObjectRelease();

  }
}

uint64_t NWConnection.sendFile(at:contentContext:maximumLength:is_complete:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v18[6];

  v12 = *(void **)(v6 + 16);
  swift_unknownObjectRetain();
  sub_183B91380();
  v13 = *(void **)(a2 + 16);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a5;
  *(_QWORD *)(v14 + 24) = a6;
  v18[4] = sub_1832D69C0;
  v18[5] = v14;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1107296256;
  v18[2] = sub_1832D4AE4;
  v18[3] = &block_descriptor_105_0;
  v15 = _Block_copy(v18);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  v16 = sub_183B91758();
  swift_bridgeObjectRelease();
  nw_connection_send_file_at_path_with_progress(v12, (const char *)(v16 + 32), v13, a3, a4 & 1, v15);
  swift_release();
  _Block_release(v15);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832D4AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  LOBYTE(a3) = v7(a2, a3, a4);
  swift_release();
  swift_unknownObjectRelease();
  return a3 & 1;
}

void NWConnection.send<A>(content:contentContext:isComplete:completion:)(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  int v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v41[2];
  char *v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;

  v50 = a4;
  v41[1] = a6;
  v48 = a3;
  v49 = a2;
  v8 = *(_QWORD *)(a5 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v41[0] = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v42 = (char *)v41 - v11;
  v12 = sub_183B91CF8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v44 = (char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v46 = (char *)v41 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v41 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDD1F0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_183B91638();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)v41 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v47 = a1;
  v45 = v27;
  v27(v19, a1, v12);
  v43 = v8;
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v28(v19, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v22, 1, 1, v23);
  }
  else
  {
    v29 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v22, v29 ^ 1u, 1, v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v22, v23);
      NWConnection.send(discontiguousContent:contentContext:isComplete:completion:)((uint64_t)v26, v49, v48 & 1, v50);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
      return;
    }
  }
  sub_1830620D4((uint64_t)v22, (uint64_t *)&unk_1EDCDD1F0);
  v30 = v46;
  v31 = v47;
  v32 = v45;
  v45(v46, v47, v12);
  if (v28(v30, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v30, v12);
  }
  else if ((swift_dynamicCast() & 1) != 0)
  {
    v33 = v51;
    v34 = v52;
    sub_18324A994(v51, v52);
    NWConnection.send(content:contentContext:isComplete:completion:)(v33, v34, v49, v48 & 1, v50);
    sub_18308485C(v33, v34);
    sub_18308485C(v33, v34);
    return;
  }
  v35 = v44;
  v32(v44, v31, v12);
  if (v28(v35, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v35, v12);
    NWConnection.send(content:contentContext:isComplete:completion:)(0, 0xF000000000000000, v49, v48 & 1, v50);
  }
  else
  {
    v37 = v42;
    v36 = v43;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v42, v35, a5);
    (*(void (**)(_QWORD, char *, uint64_t))(v36 + 16))(v41[0], v37, a5);
    v38 = sub_183B91458();
    v40 = v39;
    NWConnection.send(content:contentContext:isComplete:completion:)(v38, v39, v49, v48 & 1, v50);
    sub_18308485C(v38, v40);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, a5);
  }
}

uint64_t NWConnection.batch(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  _QWORD v9[6];

  v5 = *(NSObject **)(v2 + 16);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v9[4] = sub_182FEDAC0;
  v9[5] = v6;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_1832D507C;
  v9[3] = &block_descriptor_111;
  v7 = _Block_copy(v9);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_batch(v5, v7);
  swift_unknownObjectRelease();
  _Block_release(v7);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v5 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1832D507C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t NWConnection.metadata(definition:)(uint64_t a1)
{
  return sub_1832D50A8(a1, (uint64_t (*)(_QWORD, _QWORD))nw_connection_copy_protocol_metadata);
}

uint64_t sub_1832D50A8(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  result = a2(*(_QWORD *)(v2 + 16), *(_QWORD *)(a1 + 32));
  if (result)
  {
    v4 = result;
    v5 = sub_1832A39D4(result);
    if (v5)
    {
      return ((uint64_t (*)(uint64_t))v5[12])(v4);
    }
    else
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t NWConnection.EstablishmentReport.debugDescription.getter()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_description);
  v2 = sub_183B916E0();

  return v2;
}

double NWConnection.EstablishmentReport.attemptStartedAfterInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t NWConnection.EstablishmentReport.previousAttemptCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t NWConnection.EstablishmentReport.usedProxy.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t NWConnection.EstablishmentReport.proxyConfigured.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t NWConnection.EstablishmentReport.proxyEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for NWConnection.EstablishmentReport(0) + 40);
  return sub_1832D6A4C(v3, a1);
}

void NWConnection.EstablishmentReport.Resolution.source.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

double NWConnection.EstablishmentReport.Resolution.duration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t NWConnection.EstablishmentReport.Resolution.endpointCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t NWConnection.EstablishmentReport.Resolution.successfulEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NWConnection.EstablishmentReport.Resolution(0);
  return sub_183058C44(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
}

uint64_t NWConnection.EstablishmentReport.Resolution.preferredEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NWConnection.EstablishmentReport.Resolution(0);
  return sub_183058C44(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
}

BOOL static NWConnection.EstablishmentReport.Resolution.DNSProtocol.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWConnection.EstablishmentReport.Resolution.DNSProtocol.hash(into:)()
{
  return sub_183B9225C();
}

uint64_t NWConnection.EstablishmentReport.Resolution.dnsProtocol.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  unsigned int v4;

  result = type metadata accessor for NWConnection.EstablishmentReport.Resolution(0);
  v4 = *(_DWORD *)(v1 + *(int *)(result + 36));
  if (v4 >= 5)
    LOBYTE(v4) = 0;
  *a1 = v4;
  return result;
}

uint64_t NWConnection.EstablishmentReport.resolutions.getter()
{
  type metadata accessor for NWConnection.EstablishmentReport(0);
  return swift_bridgeObjectRetain();
}

uint64_t NWConnection.EstablishmentReport.Handshake.definition.getter()
{
  return swift_retain();
}

double NWConnection.EstablishmentReport.Handshake.handshakeDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double NWConnection.EstablishmentReport.Handshake.handshakeRTT.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t NWConnection.EstablishmentReport.handshakes.getter()
{
  type metadata accessor for NWConnection.EstablishmentReport(0);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1832D5310@<X0>(NSObject *a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  uint64_t duration_milliseconds;
  uint64_t attempt_started_after_milliseconds;
  uint64x2_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char isEscapingClosureAtFileLocation;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t aBlock;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;
  uint64_t v34;

  v4 = (int *)type metadata accessor for NWConnection.EstablishmentReport(0);
  v5 = *((_QWORD *)v4 - 1);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v5 + 56))(a2, 1, 1, v4);
  v26 = a2;
  *(_QWORD *)v7 = a1;
  v8 = swift_unknownObjectRetain_n();
  duration_milliseconds = nw_establishment_report_get_duration_milliseconds(v8);
  attempt_started_after_milliseconds = nw_establishment_report_get_attempt_started_after_milliseconds(a1);
  v11.i64[0] = duration_milliseconds;
  v11.i64[1] = attempt_started_after_milliseconds;
  *(float64x2_t *)(v7 + 8) = vdivq_f64(vcvtq_f64_u64(v11), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL));
  *((_QWORD *)v7 + 3) = nw_establishment_report_get_previous_attempt_count(a1);
  v7[32] = nw_establishment_report_get_used_proxy(a1);
  v7[33] = nw_establishment_report_get_proxy_configured(a1);
  v12 = nw_establishment_report_copy_proxy_endpoint(a1);
  sub_183056F9C(v12, (uint64_t)&v7[v4[10]]);
  v13 = MEMORY[0x1E0DEE9D8];
  v34 = MEMORY[0x1E0DEE9D8];
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = &v34;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_1832D9810;
  *(_QWORD *)(v15 + 24) = v14;
  v32 = sub_18306433C;
  v33 = v15;
  v16 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v29 = 1107296256;
  v30 = sub_1830642F4;
  v31 = &block_descriptor_157;
  v17 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  nw_establishment_report_enumerate_resolution_reports(a1, v17);
  _Block_release(v17);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v17 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v7[v4[11]] = v34;
    v27 = v13;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = &v27;
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = sub_1832D9838;
    *(_QWORD *)(v20 + 24) = v19;
    v32 = sub_18306433C;
    v33 = v20;
    aBlock = v16;
    v29 = 1107296256;
    v30 = sub_1832D5AD0;
    v31 = &block_descriptor_166;
    v21 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    nw_establishment_report_enumerate_protocols(a1, v21);
    swift_unknownObjectRelease_n();
    _Block_release(v21);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      *(_QWORD *)&v7[v4[12]] = v27;
      swift_bridgeObjectRelease();
      v23 = (uint64_t)v7;
      v24 = v26;
      sub_183058EC4(v23, v26, type metadata accessor for NWConnection.EstablishmentReport);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v5 + 56))(v24, 0, 1, v4);
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1832D5690(NSObject *a1, unint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  nw_report_resolution_source_t source;
  int v15;
  uint64_t milliseconds;
  uint32_t endpoint_count;
  NSObject *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t result;
  NSObject *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  nw_report_resolution_protocol_t protocol;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;

  v33 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&protocol - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&protocol - v7;
  v9 = (int *)type metadata accessor for NWConnection.EstablishmentReport.Resolution(0);
  v32 = *((_QWORD *)v9 - 1);
  v10 = MEMORY[0x1E0C80A78](v9);
  v31 = (uint64_t)&protocol - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (double *)((char *)&protocol - v12);
  source = nw_resolution_report_get_source(a1);
  v15 = source == nw_report_resolution_source_cache;
  if (source == nw_report_resolution_source_expired_cache)
    v15 = 2;
  v30 = v15;
  milliseconds = nw_resolution_report_get_milliseconds(a1);
  endpoint_count = nw_resolution_report_get_endpoint_count(a1);
  nw_resolution_report_copy_successful_endpoint(a1);
  nw_resolution_report_copy_preferred_endpoint(a1);
  protocol = nw_resolution_report_get_protocol(a1);
  v18 = swift_unknownObjectRetain();
  sub_183056F9C(v18, (uint64_t)v8);
  v19 = type metadata accessor for NWEndpoint();
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48);
  result = v20(v8, 1, v19);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v22 = swift_unknownObjectRetain();
  sub_183056F9C(v22, (uint64_t)v6);
  result = v20(v6, 1, v19);
  if ((_DWORD)result == 1)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  *(_BYTE *)v13 = v30;
  v13[1] = (double)milliseconds / 1000.0;
  *((_QWORD *)v13 + 2) = endpoint_count;
  sub_183058EC4((uint64_t)v8, (uint64_t)v13 + v9[7], (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  sub_183058EC4((uint64_t)v6, (uint64_t)v13 + v9[8], (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  *(_DWORD *)((char *)v13 + v9[9]) = protocol;
  v23 = v31;
  sub_183058C44((uint64_t)v13, v31, type metadata accessor for NWConnection.EstablishmentReport.Resolution);
  v24 = v33;
  v25 = *v33;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v24 = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v25 = sub_1832431A8(0, *(_QWORD *)(v25 + 16) + 1, 1, v25);
    *v24 = v25;
  }
  v28 = *(_QWORD *)(v25 + 16);
  v27 = *(_QWORD *)(v25 + 24);
  if (v28 >= v27 >> 1)
  {
    v25 = sub_1832431A8(v27 > 1, v28 + 1, 1, v25);
    *v24 = v25;
  }
  *(_QWORD *)(v25 + 16) = v28 + 1;
  sub_183058EC4(v23, v25+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v28, type metadata accessor for NWConnection.EstablishmentReport.Resolution);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_183058AE0((uint64_t)v13, type metadata accessor for NWConnection.EstablishmentReport.Resolution);
  return 1;
}

uint64_t sub_1832D5990(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  _QWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  uint64x2_t v17;
  _QWORD *v18;

  type metadata accessor for NWProtocolDefinition();
  v8 = (_QWORD *)swift_allocObject();
  v8[4] = a1;
  v9 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  v10 = sub_183B916E0();
  v12 = v11;

  v8[2] = v10;
  v8[3] = v12;
  v13 = *a4;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = sub_1832431BC(0, v13[2] + 1, 1, v13);
    *a4 = v13;
  }
  v16 = v13[2];
  v15 = v13[3];
  if (v16 >= v15 >> 1)
    v13 = sub_1832431BC((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
  v17.i64[0] = a2;
  v17.i64[1] = a3;
  v13[2] = v16 + 1;
  v18 = &v13[3 * v16];
  v18[4] = v8;
  *(float64x2_t *)(v18 + 5) = vdivq_f64(vcvtq_f64_u64(v17), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL));
  *a4 = v13;
  swift_release();
  return 1;
}

uint64_t sub_1832D5AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  LOBYTE(a4) = v7(a2, a3, a4);
  swift_unknownObjectRelease();
  return a4 & 1;
}

uint64_t _s7Network18ProxyConfigurationV16debugDescriptionSSvg_0()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_description);
  v2 = sub_183B916E0();

  return v2;
}

uint64_t NWConnection.requestEstablishmentReport(queue:completion:)(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[6];

  v7 = *(NSObject **)(v3 + 16);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  v11[4] = sub_1832D6AA8;
  v11[5] = v8;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_183056AB0;
  v11[3] = &block_descriptor_117;
  v9 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_access_establishment_report(v7, a1, v9);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

uint64_t sub_1832D5C5C(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  uint64_t v8;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE8A8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = swift_unknownObjectRetain();
  sub_1832D5310(v6, (uint64_t)v5);
  a2(v5);
  return sub_1830620D4((uint64_t)v5, &qword_1EDCDE8A8);
}

uint64_t NWConnection.DataTransferReport.debugDescription.getter()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_description);
  v2 = sub_183B916E0();

  return v2;
}

double NWConnection.DataTransferReport.duration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t NWConnection.DataTransferReport.PathReport.interface.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_unknownObjectRetain();
}

void NWConnection.DataTransferReport.PathReport.radioType.getter(char *a1@<X8>)
{
  _QWORD *v1;
  void *v3;
  uint64_t radio_type;

  if (*v1)
  {
    v3 = (void *)swift_unknownObjectRetain();
    radio_type = nw_interface_get_radio_type(v3);
    sub_18328287C(radio_type, a1);
    swift_unknownObjectRelease();
  }
  else
  {
    *a1 = 24;
  }
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedIPPacketCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t NWConnection.DataTransferReport.PathReport.sentIPPacketCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedTransportByteCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedTransportDuplicateByteCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedTransportOutOfOrderByteCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t NWConnection.DataTransferReport.PathReport.sentTransportByteCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t NWConnection.DataTransferReport.PathReport.retransmittedTransportByteCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

double NWConnection.DataTransferReport.PathReport.transportSmoothedRTT.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

double NWConnection.DataTransferReport.PathReport.transportMinimumRTT.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

double NWConnection.DataTransferReport.PathReport.transportRTTVariance.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedApplicationByteCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t NWConnection.DataTransferReport.PathReport.sentApplicationByteCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t NWConnection.DataTransferReport.aggregatePathReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 96);
  v3 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 80);
  *(_QWORD *)(a1 + 80) = v2;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 104);
  return swift_unknownObjectRetain();
}

uint64_t NWConnection.DataTransferReport.pathReports.getter()
{
  return swift_bridgeObjectRetain();
}

double sub_1832D5E50@<D0>(NSObject *a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v3;
  uint32_t v4;
  _QWORD *v5;
  nw_interface_t v6;
  uint64_t transport_smoothed_rtt_milliseconds;
  uint64_t transport_minimum_rtt_milliseconds;
  uint64_t transport_rtt_variance;
  uint64_t received_application_byte_count;
  uint64_t sent_application_byte_count;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t duration_milliseconds;
  uint32_t path_count;
  uint64_t sent_transport_retransmitted_byte_count;
  uint64_t sent_transport_byte_count;
  uint64_t received_transport_out_of_order_byte_count;
  uint64_t received_transport_duplicate_byte_count;
  uint64_t received_transport_byte_count;
  uint64_t sent_ip_packet_count;
  uint64_t v37;
  uint64_t received_ip_packet_count;
  nw_interface_t v39;

  v3 = swift_unknownObjectRetain();
  duration_milliseconds = nw_data_transfer_report_get_duration_milliseconds(v3);
  path_count = nw_data_transfer_report_get_path_count(a1);
  if (path_count)
  {
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v6 = nw_data_transfer_report_copy_path_interface(a1, v4);
      received_ip_packet_count = nw_data_transfer_report_get_received_ip_packet_count(a1, v4);
      sent_ip_packet_count = nw_data_transfer_report_get_sent_ip_packet_count(a1, v4);
      received_transport_byte_count = nw_data_transfer_report_get_received_transport_byte_count(a1, v4);
      received_transport_duplicate_byte_count = nw_data_transfer_report_get_received_transport_duplicate_byte_count(a1, v4);
      received_transport_out_of_order_byte_count = nw_data_transfer_report_get_received_transport_out_of_order_byte_count(a1, v4);
      sent_transport_byte_count = nw_data_transfer_report_get_sent_transport_byte_count(a1, v4);
      sent_transport_retransmitted_byte_count = nw_data_transfer_report_get_sent_transport_retransmitted_byte_count(a1, v4);
      transport_smoothed_rtt_milliseconds = nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds(a1, v4);
      transport_minimum_rtt_milliseconds = nw_data_transfer_report_get_transport_minimum_rtt_milliseconds(a1, v4);
      transport_rtt_variance = nw_data_transfer_report_get_transport_rtt_variance(a1, v4);
      received_application_byte_count = nw_data_transfer_report_get_received_application_byte_count(a1, v4);
      sent_application_byte_count = nw_data_transfer_report_get_sent_application_byte_count(a1, v4);
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_1832432E0(0, v5[2] + 1, 1, v5);
      v13 = v5[2];
      v12 = v5[3];
      v14 = v5;
      if (v13 >= v12 >> 1)
        v14 = sub_1832432E0((_QWORD *)(v12 > 1), v13 + 1, 1, v5);
      v14[2] = v13 + 1;
      v5 = v14;
      v15 = (double *)&v14[13 * v13];
      *((_QWORD *)v15 + 4) = v6;
      *((_QWORD *)v15 + 5) = received_ip_packet_count;
      *((_QWORD *)v15 + 6) = sent_ip_packet_count;
      *((_QWORD *)v15 + 7) = received_transport_byte_count;
      *((_QWORD *)v15 + 8) = received_transport_duplicate_byte_count;
      *((_QWORD *)v15 + 9) = received_transport_out_of_order_byte_count;
      *((_QWORD *)v15 + 10) = sent_transport_byte_count;
      *((_QWORD *)v15 + 11) = sent_transport_retransmitted_byte_count;
      v15[12] = (double)transport_smoothed_rtt_milliseconds / 1000.0;
      v15[13] = (double)transport_minimum_rtt_milliseconds / 1000.0;
      v15[14] = (double)transport_rtt_variance / 1000.0;
      ++v4;
      *((_QWORD *)v15 + 15) = received_application_byte_count;
      *((_QWORD *)v15 + 16) = sent_application_byte_count;
      swift_unknownObjectRelease();
    }
    while (path_count != v4);
    v39 = nw_data_transfer_report_copy_path_interface(a1, 0xFFFFFFFF);
    v37 = nw_data_transfer_report_get_received_ip_packet_count(a1, 0xFFFFFFFF);
    v16 = nw_data_transfer_report_get_sent_ip_packet_count(a1, 0xFFFFFFFF);
    v17 = nw_data_transfer_report_get_received_transport_byte_count(a1, 0xFFFFFFFF);
    v18 = nw_data_transfer_report_get_received_transport_duplicate_byte_count(a1, 0xFFFFFFFF);
    v19 = nw_data_transfer_report_get_received_transport_out_of_order_byte_count(a1, 0xFFFFFFFF);
    v20 = nw_data_transfer_report_get_sent_transport_byte_count(a1, 0xFFFFFFFF);
    v21 = nw_data_transfer_report_get_sent_transport_retransmitted_byte_count(a1, 0xFFFFFFFF);
    v22 = (double)nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds(a1, 0xFFFFFFFF) / 1000.0;
    v23 = (double)nw_data_transfer_report_get_transport_minimum_rtt_milliseconds(a1, 0xFFFFFFFF) / 1000.0;
    v24 = (double)nw_data_transfer_report_get_transport_rtt_variance(a1, 0xFFFFFFFF) / 1000.0;
    v25 = nw_data_transfer_report_get_received_application_byte_count(a1, 0xFFFFFFFF);
    v26 = nw_data_transfer_report_get_sent_application_byte_count(a1, 0xFFFFFFFF);
  }
  else
  {
    v37 = 0;
    v39 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v25 = 0;
    v26 = 0;
    v22 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_unknownObjectRelease();
  *(_QWORD *)a2 = a1;
  result = (double)duration_milliseconds / 1000.0;
  *(double *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v39;
  *(_QWORD *)(a2 + 24) = v37;
  *(_QWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 40) = v17;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v19;
  *(_QWORD *)(a2 + 64) = v20;
  *(_QWORD *)(a2 + 72) = v21;
  *(double *)(a2 + 80) = v22;
  *(double *)(a2 + 88) = v23;
  *(double *)(a2 + 96) = v24;
  *(_QWORD *)(a2 + 104) = v25;
  *(_QWORD *)(a2 + 112) = v26;
  *(_QWORD *)(a2 + 120) = v5;
  return result;
}

void sub_1832D6210(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v7 = *(NSObject **)(v3 + 16);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  v10[4] = sub_1832D6AB0;
  v10[5] = v8;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_182FC77FC;
  v10[3] = &block_descriptor_123;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  nw_data_transfer_report_collect(v7, a1, v9);
  _Block_release(v9);
}

uint64_t sub_1832D62D8(uint64_t a1, void (*a2)(_OWORD *))
{
  NSObject *v3;
  _OWORD v5[8];
  _OWORD v6[8];

  v3 = swift_unknownObjectRetain();
  sub_1832D5E50(v3, (uint64_t)v6);
  v5[4] = v6[4];
  v5[5] = v6[5];
  v5[6] = v6[6];
  v5[7] = v6[7];
  v5[0] = v6[0];
  v5[1] = v6[1];
  v5[2] = v6[2];
  v5[3] = v6[3];
  a2(v5);
  return sub_1832D97B8((uint64_t)v6);
}

uint64_t NWConnection.PendingDataTransferReport.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWConnection.PendingDataTransferReport.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t NWConnection.startDataTransferReport()()
{
  uint64_t v0;
  nw_data_transfer_report_t new_data_transfer_report;
  uint64_t result;

  new_data_transfer_report = nw_connection_create_new_data_transfer_report(*(nw_connection_t *)(v0 + 16));
  type metadata accessor for NWConnection.PendingDataTransferReport();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = new_data_transfer_report;
  return result;
}

uint64_t NWConnection.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  sub_183058AE0(v0 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  swift_release();
  return v0;
}

uint64_t NWConnection.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  sub_183058AE0(v0 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t _s7Network12NWConnectionC5StateO2eeoiySbAE_AEtFZ_0(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v10;

  v2 = *((unsigned __int8 *)a1 + 4);
  v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  v4 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  v5 = v2 >> 6;
  if (v5)
  {
    if (v5 != 1)
      __asm { BR              X10 }
    if (((v4 >> 38) & 3) != 1)
      return 0;
    v6 = HIDWORD(v3) & 0x3F;
    v7 = HIDWORD(v4) & 0x3F;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 == 1)
        return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
      return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
    }
    goto LABEL_20;
  }
  if (((v4 >> 38) & 3) != 0)
    return 0;
  LODWORD(v7) = BYTE4(v4);
  if (!HIDWORD(v3))
  {
LABEL_20:
    if (!(_DWORD)v7)
    {
      v10 = sub_183B915F0();
      if (v10 == sub_183B915F0())
        return 1;
    }
    return 0;
  }
  if (HIDWORD(v3) != 1)
    return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
  return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
}

void sub_1832D6584(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;
  nw_connection_t v12;
  nw_parameters_t parameters;

  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDB628);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 96) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_DWORD *)(v6 + 88) = 0;
  *(_WORD *)(v6 + 92) = 128;
  *(_QWORD *)(v2 + 24) = v6;
  sub_183058C44(a1, v2 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC7Network13_NWConnection_parameters) = a2;
  swift_retain();
  NWEndpoint.nw.getter();
  if (v7)
  {
    v8 = v7;
    v9 = *(os_unfair_lock_s **)(a2 + 16);
    v10 = v9 + 4;
    v11 = v9 + 6;
    os_unfair_lock_lock(v9 + 6);
    sub_183226978(v10, &parameters);
    os_unfair_lock_unlock(v11);
    v12 = nw_connection_create(v8, parameters);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_183058AE0(a1, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    *(_QWORD *)(v3 + 16) = v12;
  }
  else
  {
    __break(1u);
    os_unfair_lock_unlock(0);
    __break(1u);
  }
}

uint64_t sub_1832D66B8()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832D66EC(uint64_t a1)
{
  uint64_t v1;

  return sub_1832D3088(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t _s7Network12NWConnectionCyACSgSo16OS_nw_connection_pcfC_0(NSObject *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  nw_parameters_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NWEndpoint();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v21 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v21 - v13;
  v15 = nw_connection_copy_endpoint(a1);
  sub_183056F9C(v15, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
  {
    sub_1830620D4((uint64_t)v4, qword_1ECD84160);
    swift_unknownObjectRelease();
    return 0;
  }
  else
  {
    sub_183058EC4((uint64_t)v4, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    sub_183058EC4((uint64_t)v12, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    v17 = nw_connection_copy_parameters(a1);
    type metadata accessor for NWParameters();
    v18 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
    v19 = swift_allocObject();
    *(_DWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 16) = v17;
    *(_QWORD *)(v18 + 16) = v19;
    sub_183058C44((uint64_t)v14, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    type metadata accessor for NWConnection(0);
    swift_allocObject();
    v16 = sub_183058A08((uint64_t)v9, v18, (uint64_t)a1);
    swift_release();
    swift_unknownObjectRelease();
    sub_183058AE0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  }
  return v16;
}

uint64_t sub_1832D68F0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1832D6914(NSObject *a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;

  *(_QWORD *)(v1 + 16) = a1;
  v3 = swift_unknownObjectRetain();
  *(_QWORD *)(v1 + 40) = nw_content_context_get_expiration_milliseconds(v3);
  *(double *)(v1 + 48) = nw_content_context_get_relative_priority(a1);
  *(_BYTE *)(v1 + 64) = nw_content_context_get_is_final(a1);
  nw_content_context_get_identifier(a1);
  *(_QWORD *)(v1 + 24) = sub_183B91800();
  *(_QWORD *)(v1 + 32) = v4;
  v5 = nw_content_context_copy_antecedent(a1);
  *(_QWORD *)(v1 + 56) = sub_1830841B8(v5);
  return v1;
}

uint64_t sub_1832D697C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1832D4480(a1, a2, a3, a4, *(void (**)(char *, _QWORD *, _QWORD, _BYTE *))(v4 + 16));
}

uint64_t sub_1832D6994(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1832D46C0(a1, a2, a3, a4, *(uint64_t (**)(uint64_t, _QWORD *, uint64_t, _BYTE *))(v4 + 16));
}

uint64_t sub_1832D699C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832D69C0(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  uint64_t (*v7)(uint64_t, uint64_t, _BYTE *);
  _BYTE v9[8];

  v7 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(v3 + 16);
  swift_unknownObjectRetain();
  sub_1830840B4(a3, (uint64_t)v9);
  return v7(a1, a2, v9) & 1;
}

uint64_t sub_1832D6A28()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for NWConnection.EstablishmentReport(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1EDCDE7B0);
}

uint64_t sub_1832D6A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NWConnection.EstablishmentReport.Resolution(uint64_t a1)
{
  return sub_183058E90(a1, qword_1EDCDE828);
}

uint64_t sub_1832D6AA8(uint64_t a1)
{
  uint64_t v1;

  return sub_1832D5C5C(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_1832D6AB0(uint64_t a1)
{
  uint64_t v1;

  return sub_1832D62D8(a1, *(void (**)(_OWORD *))(v1 + 16));
}

uint64_t type metadata accessor for NWConnection.PendingDataTransferReport()
{
  return objc_opt_self();
}

unint64_t sub_1832D6ADC()
{
  unint64_t result;

  result = qword_1EDCDE798;
  if (!qword_1EDCDE798)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWConnection.EstablishmentReport.Resolution.Source, &type metadata for NWConnection.EstablishmentReport.Resolution.Source);
    atomic_store(result, (unint64_t *)&qword_1EDCDE798);
  }
  return result;
}

unint64_t sub_1832D6B24()
{
  unint64_t result;

  result = qword_1EDCDE7A0;
  if (!qword_1EDCDE7A0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWConnection.EstablishmentReport.Resolution.DNSProtocol, &type metadata for NWConnection.EstablishmentReport.Resolution.DNSProtocol);
    atomic_store(result, (unint64_t *)&qword_1EDCDE7A0);
  }
  return result;
}

double sub_1832D6B68@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1832D36E4(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_183080854, a2);
}

double sub_1832D6B88@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1832D36E4(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_1832D3120, a2);
}

double sub_1832D6BA8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1832D36E4(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_1832D3510, a2);
}

double sub_1832D6BC8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1832D36E4(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_1832D3938, a2);
}

uint64_t sub_1832D6BE8()
{
  return type metadata accessor for NWConnection(0);
}

uint64_t method lookup function for NWConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWConnection.__allocating_init(to:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t method lookup function for NWConnection.ContentContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWConnection.ContentContext.nw.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NWConnection.ContentContext.protocolMetadata.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NWConnection.ContentContext.protocolMetadata(definition:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NWConnection.ContentContext.__allocating_init(identifier:expiration:priority:isFinal:antecedent:metadata:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of NWConnection.ContentContext.__allocating_init(nw:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t sub_1832D6C48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for NWConnection.SendCompletion(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *assignWithTake for NWConnection.SendCompletion(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for NWConnection.EstablishmentReport(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    v8 = a3[10];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for NWEndpoint();
    v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
    swift_unknownObjectRetain();
    if (!v12(v10, 1, v11))
    {
      v14 = (char *)&loc_1832D6E9C + 4 * byte_183BA41C9[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v13 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    v15 = a3[12];
    *(_QWORD *)(v7 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(_QWORD *)(v7 + v15) = *(uint64_t *)((char *)a2 + v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_unknownObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for NWEndpoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_183058BF0(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v4 + 48) != 1)
          goto LABEL_9;
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        v7 = sub_183B913A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
        break;
      case 4u:
LABEL_9:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  unsigned int (*v10)(const void *, uint64_t, uint64_t);
  uint64_t v11;
  char *v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v6 = a3[10];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for NWEndpoint();
  v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  swift_unknownObjectRetain();
  if (!v10(v8, 1, v9))
  {
    v12 = (char *)&loc_1832D71C0 + 4 * byte_183BA41D3[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  v13 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = a3[10];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for NWEndpoint();
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  v11 = v10(v7, 1, v9);
  v12 = v10(v8, 1, v9);
  if (v11)
  {
    if (!v12)
    {
      v13 = (char *)&loc_1832D73D8 + 4 * byte_183BA41D8[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    goto LABEL_6;
  }
  if (v12)
  {
    sub_183058AE0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    sub_183058AE0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    v15 = (char *)&loc_1832D7490 + 4 * byte_183BA41DD[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_9:
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1832D7604()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1832D75A8);
}

void sub_1832D762C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1832D75A8);
}

void sub_1832D7660()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1832D75A8);
}

void sub_1832D7680()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  *v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  v0[3] = v1[3];
  v0[4] = v1[4];
  v0[5] = v1[5];
  v2 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v2 != 1)
    swift_unknownObjectRetain();
  v0[6] = v2;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1832D75A8);
}

uint64_t initializeWithTake for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v7 = a3[10];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for NWEndpoint();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v13 = sub_183B913A4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(v11 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  return a1;
}

uint64_t assignWithTake for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = a3[10];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for NWEndpoint();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 == a2)
        goto LABEL_14;
      sub_183058AE0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v16 = sub_183B913A4();
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v7, v8, v16);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      v15 = *(_QWORD *)(v10 + 64);
      goto LABEL_8;
    }
    sub_183058AE0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
LABEL_7:
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160) - 8) + 64);
LABEL_8:
    memcpy(v7, v8, v15);
    goto LABEL_14;
  }
  if (v13)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v14 = sub_183B913A4();
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v7, v8, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(v10 + 64));
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_14:
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.EstablishmentReport()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832D7A24(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 40)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NWConnection.EstablishmentReport()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1832D7AB0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 40)], a2, a2, v7);
  }
  return result;
}

void sub_1832D7B28()
{
  unint64_t v0;

  sub_18328FD9C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    type metadata accessor for NWEndpoint();
    v5 = (char *)&loc_1832D7C54 + 4 * byte_183BA41E2[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = a1 + *(int *)(a2 + 28);
  type metadata accessor for NWEndpoint();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      sub_183058BF0(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24));
      break;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v4 + 48) != 1)
        goto LABEL_7;
      break;
    case 2u:
      swift_bridgeObjectRelease();
      break;
    case 3u:
      v5 = sub_183B913A4();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
      break;
    case 4u:
LABEL_7:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }
  v6 = a1 + *(int *)(a2 + 32);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      result = sub_183058BF0(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_BYTE *)(v6 + 24));
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = *(_QWORD *)(v6 + 48);
      if (result != 1)
        goto LABEL_14;
      break;
    case 2:
      result = swift_bridgeObjectRelease();
      break;
    case 3:
      v8 = sub_183B913A4();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
      break;
    case 4:
LABEL_14:
      result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2)
{
  char *v2;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  type metadata accessor for NWEndpoint();
  v2 = (char *)sub_1832D80A8 + 4 * byte_183BA41F6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1832D80A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  sub_183058E2C(*(_QWORD *)v1, v3, v4, v5);
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_QWORD *)(v0 + 16) = v4;
  *(_BYTE *)(v0 + 24) = v5;
  *(_WORD *)(v0 + 26) = *(_WORD *)(v1 + 26);
  swift_storeEnumTagMultiPayload();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)sub_1832D81B8
                                                   + 4 * byte_183BA41FB[EnumCaseMultiPayload]))(EnumCaseMultiPayload, v7);
}

uint64_t sub_1832D81B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v5 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(v3 + 8);
  v10 = v4;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_BYTE *)(v3 + 24);
  sub_183058E2C(*(_QWORD *)v3, v6, v7, v8);
  *(_QWORD *)v2 = v5;
  *(_QWORD *)(v2 + 8) = v6;
  *(_QWORD *)(v2 + 16) = v7;
  *(_BYTE *)(v2 + 24) = v8;
  *(_WORD *)(v2 + 26) = *(_WORD *)(v3 + 26);
  swift_storeEnumTagMultiPayload();
  *(_DWORD *)(v0 + *(int *)(v10 + 36)) = *(_DWORD *)(v1 + *(int *)(v10 + 36));
  return v0;
}

uint64_t assignWithCopy for NWConnection.EstablishmentReport.Resolution(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v3;

  *(_BYTE *)result = *(_BYTE *)a2;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  if (result != a2)
  {
    sub_183058AE0(result + *(int *)(a3 + 28), (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    type metadata accessor for NWEndpoint();
    v3 = (char *)&loc_1832D8360 + 4 * byte_183BA4200[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  *(_DWORD *)(result + *(int *)(a3 + 36)) = *(_DWORD *)(a2 + *(int *)(a3 + 36));
  return result;
}

uint64_t initializeWithTake for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[7];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for NWEndpoint();
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v10 = sub_183B913A4();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[8];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v14 = sub_183B913A4();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  if (a1 != a2)
  {
    v6 = a3[7];
    v7 = (void *)(a1 + v6);
    v8 = (const void *)(a2 + v6);
    sub_183058AE0(a1 + v6, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    v9 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v10 = sub_183B913A4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    v11 = a3[8];
    v12 = (void *)(a1 + v11);
    v13 = (const void *)(a2 + v11);
    sub_183058AE0(a1 + v11, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v14 = sub_183B913A4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.EstablishmentReport.Resolution()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832D885C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *a1;
    if (v4 >= 3)
      return v4 - 2;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for NWEndpoint();
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NWConnection.EstablishmentReport.Resolution()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_1832D88DC(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *result = a2 + 2;
  }
  else
  {
    v7 = type metadata accessor for NWEndpoint();
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1832D894C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NWConnection.EstablishmentReport.Resolution.Source(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1832D8A2C + 4 * byte_183BA420F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1832D8A60 + 4 * byte_183BA420A[v4]))();
}

uint64_t sub_1832D8A60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832D8A68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832D8A70);
  return result;
}

uint64_t sub_1832D8A7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1832D8A84);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1832D8A88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832D8A90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWConnection.EstablishmentReport.Resolution.Source()
{
  return &type metadata for NWConnection.EstablishmentReport.Resolution.Source;
}

uint64_t storeEnumTagSinglePayload for NWConnection.EstablishmentReport.Resolution.DNSProtocol(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1832D8AF8 + 4 * byte_183BA4219[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1832D8B2C + 4 * byte_183BA4214[v4]))();
}

uint64_t sub_1832D8B2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832D8B34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832D8B3CLL);
  return result;
}

uint64_t sub_1832D8B48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1832D8B50);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1832D8B54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832D8B5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWConnection.EstablishmentReport.Resolution.DNSProtocol()
{
  return &type metadata for NWConnection.EstablishmentReport.Resolution.DNSProtocol;
}

uint64_t initializeBufferWithCopyOfBuffer for NWConnection.EstablishmentReport.Handshake(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for NWConnection.EstablishmentReport.Handshake()
{
  return swift_release();
}

_QWORD *assignWithCopy for NWConnection.EstablishmentReport.Handshake(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for NWConnection.EstablishmentReport.Handshake(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.EstablishmentReport.Handshake(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnection.EstablishmentReport.Handshake(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWConnection.EstablishmentReport.Handshake()
{
  return &type metadata for NWConnection.EstablishmentReport.Handshake;
}

uint64_t destroy for NWConnection.DataTransferReport()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NWConnection.DataTransferReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NWConnection.DataTransferReport(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for NWConnection.DataTransferReport(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.DataTransferReport(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnection.DataTransferReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWConnection.DataTransferReport()
{
  return &type metadata for NWConnection.DataTransferReport;
}

uint64_t initializeWithCopy for NWConnection.DataTransferReport.PathReport(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NWConnection.DataTransferReport.PathReport(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  return a1;
}

uint64_t assignWithTake for NWConnection.DataTransferReport.PathReport(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.DataTransferReport.PathReport(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 104))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnection.DataTransferReport.PathReport(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWConnection.DataTransferReport.PathReport()
{
  return &type metadata for NWConnection.DataTransferReport.PathReport;
}

uint64_t method lookup function for NWConnection.PendingDataTransferReport()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWConnection.PendingDataTransferReport.collect(queue:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

void destroy for NWConnection.LockedState(uint64_t a1)
{
  if (*(_QWORD *)a1)
    swift_release();
  if (*(_QWORD *)(a1 + 16))
    swift_release();
  if (*(_QWORD *)(a1 + 32))
    swift_release();
  if (*(_QWORD *)(a1 + 48))
    swift_release();

}

uint64_t initializeWithCopy for NWConnection.LockedState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v7 = *(_QWORD *)(a2 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  v9 = *(_QWORD *)(a2 + 48);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  v11 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
  v12 = v11;
  return a1;
}

uint64_t assignWithCopy for NWConnection.LockedState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  int v19;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (*(_QWORD *)(a1 + 16))
  {
    if (v7)
    {
      v8 = a2[3];
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v10)
    {
      v11 = a2[5];
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v11;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v12;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v13)
    {
      v15 = a2[7];
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v15;
      swift_retain();
      goto LABEL_29;
    }
LABEL_28:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    goto LABEL_29;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_28;
  }
  v14 = a2[7];
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v14;
  swift_retain();
  swift_release();
LABEL_29:
  v16 = *(void **)(a1 + 64);
  v17 = (void *)a2[8];
  *(_QWORD *)(a1 + 64) = v17;
  v18 = v17;

  v19 = *((_DWORD *)a2 + 18);
  *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
  *(_DWORD *)(a1 + 72) = v19;
  *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
  return a1;
}

__n128 __swift_memcpy78_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 + 62);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for NWConnection.LockedState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (*(_QWORD *)(a1 + 16))
  {
    if (v7)
    {
      v8 = a2[3];
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v10)
    {
      v11 = a2[5];
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v11;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v12;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v13)
    {
      v15 = a2[7];
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v15;
      goto LABEL_29;
    }
LABEL_28:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    goto LABEL_29;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_28;
  }
  v14 = a2[7];
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v14;
  swift_release();
LABEL_29:
  v16 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = a2[8];

  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
  *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.LockedState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 78))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnection.LockedState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 76) = 0;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 78) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 78) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_1832D9788(char a1)
{
  uint64_t v1;
  uint64_t (*v2)(char *);
  char v4;

  v2 = *(uint64_t (**)(char *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_1832D97B8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1832D9800()
{
  return swift_deallocObject();
}

uint64_t sub_1832D9810(NSObject *a1)
{
  uint64_t v1;

  return sub_1832D5690(a1, *(unint64_t **)(v1 + 16));
}

uint64_t sub_1832D9818()
{
  return swift_deallocObject();
}

uint64_t sub_1832D9828()
{
  return swift_deallocObject();
}

uint64_t sub_1832D9838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1832D5990(a1, a2, a3, *(_QWORD ***)(v3 + 16));
}

uint64_t sub_1832D9840()
{
  return swift_deallocObject();
}

uint64_t sub_1832D9850(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t HTTPResponse.status.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  if ((v6 & 0x2000000000000000) != 0)
    v7 = HIBYTE(v6) & 0xF;
  else
    v7 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    __break(1u);
LABEL_51:
    v8 = sub_183B91848();
    v9 = sub_183B91818();
    goto LABEL_14;
  }
  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  if ((v6 & 0x1000000000000000) != 0)
    v1 = (v5 >> 59) & 1;
  else
    v1 = 1;
  if ((v6 & 0x1000000000000000) != 0)
    goto LABEL_51;
  if ((v6 & 0x2000000000000000) != 0)
  {
    v8 = v5;
  }
  else
  {
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_61;
    v8 = *(_BYTE *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
  }
LABEL_13:
  v9 = 65540;
LABEL_14:
  v10 = v8 - 48;
  if ((v10 & 0xFFFFFF00) != 0)
  {
    __break(1u);
  }
  else
  {
    v18 = v2;
    v2 = 4 * v7;
    if (4 * v7 != v9 >> 14)
    {
      v19 = v3;
      v3 = 4 << v1;
      v1 = v9 & 0xC;
      v11 = v9;
      if (v1 != v3)
        goto LABEL_17;
      goto LABEL_54;
    }
  }
  __break(1u);
LABEL_54:
  v11 = sub_18329687C(v9, v5, v6);
LABEL_17:
  v12 = v11 >> 16;
  if (v11 >> 16 < v7)
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      v12 = sub_183B91848();
      if (v1 != v3)
        goto LABEL_25;
    }
    else
    {
      if ((v6 & 0x2000000000000000) == 0)
      {
        if ((v5 & 0x1000000000000000) != 0)
        {
          v13 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
          goto LABEL_22;
        }
        goto LABEL_64;
      }
      v20 = v5;
      v21 = v6 & 0xFFFFFFFFFFFFFFLL;
      v12 = *((unsigned __int8 *)&v20 + v12);
      if (v1 != v3)
        goto LABEL_25;
    }
LABEL_28:
    v9 = sub_18329687C(v9, v5, v6);
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_26;
LABEL_29:
    if (v7 > v9 >> 16)
    {
      v9 = sub_183B91818();
      goto LABEL_31;
    }
    __break(1u);
    goto LABEL_63;
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  v14 = sub_18329687C(v9, v5, v6);
  while (1)
  {
    v15 = v14 >> 16;
    if (v14 >> 16 >= v7)
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      v8 = *(_BYTE *)sub_183B91E78();
      goto LABEL_13;
    }
    if ((v6 & 0x1000000000000000) != 0)
    {
      v12 = sub_183B91848();
      if (v2 != v3)
        goto LABEL_42;
    }
    else if ((v6 & 0x2000000000000000) != 0)
    {
      v20 = v5;
      v21 = v6 & 0xFFFFFFFFFFFFFFLL;
      v12 = *((unsigned __int8 *)&v20 + v15);
      if (v2 != v3)
        goto LABEL_42;
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
        v16 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      else
        v16 = sub_183B91E78();
      v12 = *(unsigned __int8 *)(v16 + v15);
      if (v2 != v3)
      {
LABEL_42:
        v2 = v19;
        if ((v6 & 0x1000000000000000) == 0)
          goto LABEL_45;
        goto LABEL_43;
      }
    }
    v9 = sub_18329687C(v9, v5, v6);
    v2 = v19;
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_45;
LABEL_43:
    if (v7 > v9 >> 16)
      break;
LABEL_63:
    __break(1u);
LABEL_64:
    v13 = sub_183B91E78();
LABEL_22:
    LOBYTE(v12) = *(_BYTE *)(v13 + v12);
    if (v1 == v3)
      goto LABEL_28;
LABEL_25:
    if ((v6 & 0x1000000000000000) != 0)
      goto LABEL_29;
LABEL_26:
    v9 = (v9 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_31:
    v1 = v12 - 48;
    if ((v1 & 0xFFFFFF00) != 0)
      goto LABEL_56;
    if (v2 == v9 >> 14)
      goto LABEL_57;
    v2 = v9 & 0xC;
    v14 = v9;
    if (v2 == v3)
      goto LABEL_58;
  }
  sub_183B91818();
LABEL_45:
  if (((v12 - 48) & 0xFFFFFF00) != 0)
    goto LABEL_60;
  *a1 = 100 * v10 + 10 * v1 + (v12 - 48);
  a1[1] = v18;
  a1[2] = v2;
  return swift_bridgeObjectRetain();
}

unint64_t sub_1832D9CC0(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  v5 = 4 * v4;
  v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  v7 = 4 << v6;
  v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v8 = 15;
  while (1)
  {
    v9 = v8 >> 14;
    if (v8 >> 14 == v5)
      return v9 == v5;
    v10 = v8 & 0xC;
    result = v8;
    if (v10 == v7)
      result = sub_18329687C(v8, a1, a2);
    v12 = result >> 16;
    if (result >> 16 >= v4)
      break;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = sub_183B91848();
      v13 = result;
      if (v10 != v7)
        goto LABEL_20;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v15[0] = a1;
      v15[1] = v16;
      v13 = *((_BYTE *)v15 + v12);
      if (v10 != v7)
        goto LABEL_20;
    }
    else
    {
      result = v14;
      if ((a1 & 0x1000000000000000) == 0)
        result = sub_183B91E78();
      v13 = *(_BYTE *)(result + v12);
      if (v10 != v7)
      {
LABEL_20:
        if ((a2 & 0x1000000000000000) == 0)
          goto LABEL_7;
        goto LABEL_21;
      }
    }
    result = sub_18329687C(v8, a1, a2);
    v8 = result;
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_7:
      v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_8;
    }
LABEL_21:
    if (v4 <= v8 >> 16)
      goto LABEL_28;
    v8 = sub_183B91818();
LABEL_8:
    if ((v13 - 58) < 0xF6u)
      return v9 == v5;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1832D9E5C(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t result;
  unint64_t v11;
  char v12;
  _QWORD v13[2];
  uint64_t v14;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 1;
  v5 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  v6 = 4 << v5;
  v14 = a2 & 0xFFFFFFFFFFFFFFLL;
  v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v8 = 15;
  while (1)
  {
    v9 = v8 & 0xC;
    result = v8;
    if (v9 == v6)
      result = sub_18329687C(v8, a1, a2);
    v11 = result >> 16;
    if (result >> 16 >= v2)
      break;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = sub_183B91848();
      v12 = result;
      if (v9 == v6)
        goto LABEL_17;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v13[0] = a1;
      v13[1] = v14;
      v12 = *((_BYTE *)v13 + v11);
      if (v9 == v6)
        goto LABEL_17;
    }
    else
    {
      result = v7;
      if ((a1 & 0x1000000000000000) == 0)
        result = sub_183B91E78();
      v12 = *(_BYTE *)(result + v11);
      if (v9 == v6)
      {
LABEL_17:
        result = sub_18329687C(v8, a1, a2);
        v8 = result;
        if ((a2 & 0x1000000000000000) == 0)
          goto LABEL_22;
        goto LABEL_18;
      }
    }
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_22:
      v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_23;
    }
LABEL_18:
    if (v2 <= v8 >> 16)
      goto LABEL_33;
    v8 = sub_183B91818();
LABEL_23:
    if (v12 != 32 && v12 != 9 && (v12 & 0x80) == 0 && (v12 - 127) < 0xA2u)
      return 0;
    if (4 * v2 == v8 >> 14)
      return 1;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

Network::HTTPResponse::Status __swiftcall HTTPResponse.Status.init(code:reasonPhrase:)(Swift::Int code, Swift::String reasonPhrase)
{
  Swift::Int *v2;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::Int v5;
  Swift::Int *v6;
  Network::HTTPResponse::Status result;

  if ((unint64_t)code > 0x3E7)
  {
    __break(1u);
  }
  else
  {
    object = reasonPhrase._object;
    countAndFlagsBits = reasonPhrase._countAndFlagsBits;
    v5 = code;
    v6 = v2;
    code = sub_1832D9E5C(reasonPhrase._countAndFlagsBits, (unint64_t)reasonPhrase._object);
    if ((code & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDD20);
      sub_1832A1F30();
      sub_183B91794();
      code = swift_bridgeObjectRelease();
      countAndFlagsBits = 0;
      object = (void *)0xE000000000000000;
    }
    *v6 = v5;
    v6[1] = countAndFlagsBits;
    v6[2] = (Swift::Int)object;
  }
  result.reasonPhrase = reasonPhrase;
  result.code = code;
  return result;
}

uint64_t HTTPResponse.init(status:headerFields:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a2;
  swift_bridgeObjectRetain();
  v7 = sub_183B917B8();
  v9 = v8;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = 0x7375746174733ALL;
  *(_QWORD *)(a3 + 8) = 0xE700000000000000;
  *(_QWORD *)(a3 + 16) = 0x7375746174733ALL;
  *(_QWORD *)(a3 + 24) = 0xE700000000000000;
  *(_BYTE *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = v7;
  *(_QWORD *)(a3 + 48) = v9;
  *(_QWORD *)(a3 + 56) = v4;
  *(_QWORD *)(a3 + 64) = v5;
  *(_QWORD *)(a3 + 72) = v6;
  return result;
}

uint64_t HTTPResponse.Status.code.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t HTTPResponse.Status.reasonPhrase.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

Network::HTTPResponse::Status __swiftcall HTTPResponse.Status.init(integerLiteral:)(Swift::Int integerLiteral)
{
  Swift::Int *v1;
  Network::HTTPResponse::Status result;

  if ((unint64_t)integerLiteral > 0x3E7)
  {
    __break(1u);
  }
  else
  {
    *v1 = integerLiteral;
    v1[1] = 0;
    v1[2] = 0xE000000000000000;
  }
  result.code = integerLiteral;
  return result;
}

BOOL static HTTPResponse.Status.Kind.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t HTTPResponse.Status.Kind.hash(into:)()
{
  return sub_183B9225C();
}

uint64_t HTTPResponse.Status.Kind.hashValue.getter()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

uint64_t HTTPResponse.Status.kind.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;

  v1 = *v0;
  if ((unint64_t)(*v0 - 200) > 0xFFFFFFFFFFFFFF9BLL)
    return 1;
  if ((unint64_t)(v1 - 300) > 0xFFFFFFFFFFFFFF9BLL)
    return 2;
  v2 = v1 - 400;
  v3 = v1 - 500;
  if ((unint64_t)(v1 - 600) >= 0xFFFFFFFFFFFFFF9CLL)
    v4 = 5;
  else
    v4 = 0;
  if (v3 > 0xFFFFFFFFFFFFFF9BLL)
    v4 = 4;
  if (v2 <= 0xFFFFFFFFFFFFFF9BLL)
    return v4;
  else
    return 3;
}

uint64_t HTTPResponse.Status.hash(into:)()
{
  return sub_183B9225C();
}

BOOL static HTTPResponse.Status.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t HTTPResponse.Status.description.getter()
{
  uint64_t v1;

  v1 = sub_183B92088();
  sub_183B917F4();
  swift_bridgeObjectRetain();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1832DA360(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t result;

  if (a3 > -100 && a3 < 25600)
  {
    v3 = ((char)a3 / 100) + 48;
    if (((v3 >> 8) & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      *a1 = v3;
      if ((((__int16)a3 / 10 % 10) & 0x8000) == 0)
      {
        v4 = ((26215 * (__int16)a3) >> 18) + ((26215 * (__int16)a3) >> 31);
        a1[1] = v4 - 10 * (((int)(26215 * v4) >> 18) + (((26215 * v4) & 0x80000000) != 0)) + 48;
        if ((((__int16)a3 % 10) & 0x8000) == 0)
        {
          a1[2] = (__int16)a3 % 10 + 48;
          return 3;
        }
      }
    }
  }
  result = sub_183B91F50();
  __break(1u);
  return result;
}

int *sub_1832DA498@<X0>(int *result@<X0>, int *a2@<X8>)
{
  int v2;
  int v4;
  int v5;

  v2 = *result;
  if ((*result & 0xFFFFFF80) != 0x80 && (*result - 33) >= 0x5E)
    v4 = 32;
  else
    v4 = *result;
  if (v2 == 32)
    v4 = 32;
  if (v2 == 9)
    v5 = 9;
  else
    v5 = v4;
  *a2 = v5;
  return result;
}

uint64_t HTTPResponse.Status.hashValue.getter()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

uint64_t sub_1832DA514()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

uint64_t sub_1832DA558()
{
  return sub_183B9225C();
}

uint64_t sub_1832DA580()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

_QWORD *sub_1832DA5C0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (*result > 0x3E7uLL)
  {
    __break(1u);
  }
  else
  {
    *a2 = *result;
    a2[1] = 0;
    a2[2] = 0xE000000000000000;
  }
  return result;
}

uint64_t sub_1832DA5E0()
{
  uint64_t v1;

  v1 = sub_183B92088();
  sub_183B917F4();
  swift_bridgeObjectRetain();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  return v1;
}

BOOL sub_1832DA664(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

double sub_1832DA678@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  uint64_t v5;

  HTTPResponse.status.getter(&v4);
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t HTTPResponse.status.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v4 = sub_183B917B8();
  v6 = v5;
  swift_bridgeObjectRelease();
  v7 = v1[1];
  v13 = *v1;
  v8 = v1[2];
  v9 = v1[3];
  v12 = *((_BYTE *)v1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 == 0x7375746174733ALL && v9 == 0xE700000000000000 || (result = sub_183B920F4(), (result & 1) != 0))
  {
    result = sub_183B917D0();
    if (result == 3)
    {
      v11 = sub_1832D9CC0(v4, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
      {
        *v1 = v13;
        v1[1] = v7;
        v1[2] = v8;
        v1[3] = v9;
        *((_BYTE *)v1 + 32) = v12;
        v1[5] = v4;
        v1[6] = v6;
        result = swift_bridgeObjectRelease();
        v1[7] = v2;
        v1[8] = v3;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t HTTPResponse.PseudoHeaderFields.status.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = *((_BYTE *)a1 + 32);
  v7 = a1[5];
  v8 = a1[6];
  v9 = v4 == 0x7375746174733ALL && v5 == 0xE700000000000000;
  if (v9 || (result = sub_183B920F4(), (result & 1) != 0))
  {
    result = sub_183B917D0();
    if (result == 3)
    {
      result = sub_1832D9CC0(v7, v8);
      if ((result & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        *(_QWORD *)v1 = v2;
        *(_QWORD *)(v1 + 8) = v3;
        *(_QWORD *)(v1 + 16) = v4;
        *(_QWORD *)(v1 + 24) = v5;
        *(_BYTE *)(v1 + 32) = v6;
        *(_QWORD *)(v1 + 40) = v7;
        *(_QWORD *)(v1 + 48) = v8;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*HTTPResponse.status.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;

  a1[3] = v1;
  HTTPResponse.status.getter(a1);
  return sub_1832DA9B8;
}

uint64_t sub_1832DA9B8(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];

  v2 = a1[1];
  v3 = a1[2];
  v5[0] = *a1;
  v5[1] = v2;
  v5[2] = v3;
  if ((a2 & 1) == 0)
    return HTTPResponse.status.setter((uint64_t)v5);
  swift_bridgeObjectRetain();
  HTTPResponse.status.setter((uint64_t)v5);
  return swift_bridgeObjectRelease();
}

uint64_t HTTPResponse.PseudoHeaderFields.status.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = *((_BYTE *)v1 + 32);
  v7 = v1[5];
  v8 = v1[6];
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1832DAA68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  *(_BYTE *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_1832DAAB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8[0] = *(_QWORD *)a1;
  v8[1] = v1;
  v8[2] = v2;
  v8[3] = v3;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return HTTPResponse.PseudoHeaderFields.status.setter(v8);
}

void (*HTTPResponse.PseudoHeaderFields.status.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  v5 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v7 = v1[3];
  v8 = *((_BYTE *)v1 + 32);
  v9 = v1[5];
  v10 = v1[6];
  *v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  *((_BYTE *)v3 + 32) = v8;
  v3[5] = v9;
  v3[6] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1832DAB9C;
}

void sub_1832DAB9C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[3];
  v6 = *((_BYTE *)*a1 + 32);
  v8 = (*a1)[5];
  v7 = (*a1)[6];
  v10 = (*a1)[2] == 0x7375746174733ALL && v5 == 0xE700000000000000;
  v17 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    if (!v10 && (sub_183B920F4() & 1) == 0)
      goto LABEL_23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_183B917D0() == 3)
    {
      if ((sub_1832D9CC0(v8, v7) & 1) != 0)
      {
        v11 = v3;
        v12 = v4;
        v13 = v2[7];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)v13 = v12;
        *(_QWORD *)(v13 + 8) = v11;
        *(_QWORD *)(v13 + 16) = v17;
        *(_QWORD *)(v13 + 24) = v5;
        *(_BYTE *)(v13 + 32) = v6;
        *(_QWORD *)(v13 + 40) = v8;
        *(_QWORD *)(v13 + 48) = v7;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_18:
        free(v2);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    if (!v10 && (sub_183B920F4() & 1) == 0)
      goto LABEL_24;
    if (sub_183B917D0() == 3)
    {
      if ((sub_1832D9CC0(v8, v7) & 1) != 0)
      {
        v14 = v3;
        v15 = v4;
        v16 = v2[7];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)v16 = v15;
        *(_QWORD *)(v16 + 8) = v14;
        *(_QWORD *)(v16 + 16) = v17;
        *(_QWORD *)(v16 + 24) = v5;
        *(_BYTE *)(v16 + 32) = v6;
        *(_QWORD *)(v16 + 40) = v8;
        *(_QWORD *)(v16 + 48) = v7;
        goto LABEL_18;
      }
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

uint64_t HTTPResponse.PseudoHeaderFields.hash(into:)()
{
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183B92268();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t HTTPResponse.PseudoHeaderFields.hashValue.getter()
{
  sub_183B92250();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183B92268();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t HTTPResponse.pseudoHeaderFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = *((_BYTE *)v1 + 32);
  v7 = v1[5];
  v8 = v1[6];
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 HTTPResponse.pseudoHeaderFields.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  __n128 v8;

  v8 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  v4 = a1[2].n128_u8[0];
  v5 = a1[2].n128_u64[1];
  v6 = a1[3].n128_u64[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v8;
  *v1 = v8;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  v1[2].n128_u8[0] = v4;
  v1[2].n128_u64[1] = v5;
  v1[3].n128_u64[0] = v6;
  return result;
}

uint64_t (*HTTPResponse.pseudoHeaderFields.modify())()
{
  return nullsub_1;
}

uint64_t HTTPResponse.headerFields.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 72);
  return swift_retain();
}

uint64_t HTTPResponse.headerFields.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 72) = v2;
  return result;
}

uint64_t (*HTTPResponse.headerFields.modify())()
{
  return nullsub_1;
}

uint64_t HTTPResponse.hash(into:)()
{
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183B92268();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_retain();
  sub_1832911D4();
  return swift_release();
}

uint64_t HTTPResponse.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 72);
  sub_183B92250();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183B92268();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = v2 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183B92268();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 += 64;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  return sub_183B9228C();
}

uint64_t sub_1832DB2B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183B92268();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  result = swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = v3 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183B92268();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v5 += 64;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1832DB434()
{
  sub_183B92250();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183B92268();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  sub_1832911D4();
  return sub_183B9228C();
}

uint64_t HTTPResponse.debugDescription.getter()
{
  uint64_t v1;
  uint64_t v2;

  HTTPResponse.status.getter(&v2);
  v1 = sub_183B92088();
  sub_183B917F4();
  swift_bridgeObjectRetain();
  sub_183B917F4();
  swift_bridgeObjectRelease_n();
  return v1;
}

uint64_t sub_1832DB5C0()
{
  uint64_t v1;
  uint64_t v2;

  HTTPResponse.status.getter(&v2);
  v1 = sub_183B92088();
  sub_183B917F4();
  swift_bridgeObjectRetain();
  sub_183B917F4();
  swift_bridgeObjectRelease_n();
  return v1;
}

uint64_t HTTPResponse.PseudoHeaderFields.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183B922F8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_1832985C4();
  sub_183B920C4();
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v2);
}

uint64_t HTTPResponse.PseudoHeaderFields.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;

  v3 = a1;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183B922C8();
  if (!v2)
  {
    v24 = a2;
    v41 = (uint64_t)v3;
    __swift_project_boxed_opaque_existential_2(v39, v40);
    if ((sub_183B920AC() & 1) != 0)
    {
LABEL_3:
      sub_18324A894((uint64_t)v39, (uint64_t)&v32);
      sub_183B91E54();
      swift_allocError();
      sub_183B91E30();
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v31 = 0;
      v10 = 0;
      while (2)
      {
        v25 = v10;
        v26 = v9;
        v27 = v8;
        v28 = v7;
        v29 = v6;
        v30 = v5;
        while (1)
        {
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
          sub_183298608();
          sub_183B920A0();
          v12 = v32;
          v11 = v33;
          v14 = v34;
          v13 = v35;
          v15 = v36;
          v17 = v37;
          v16 = v38;
          if (v34 == 0x7375746174733ALL && v35 == 0xE700000000000000)
            break;
          if ((sub_183B920F4() & 1) != 0)
            goto LABEL_16;
          swift_bridgeObjectRetain();
          v19 = sub_183B91860();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            sub_18324C184(v25, v31);
            sub_18324A894((uint64_t)v39, (uint64_t)&v32);
            sub_183B91DB8();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            sub_183B917F4();
            if ((sub_18324BC90(v17, v16) & 1) != 0)
            {
              swift_bridgeObjectRetain();
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_1832FE3D0(v17, v16);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_183B917F4();
            swift_bridgeObjectRelease();
            sub_183B917F4();
            swift_bridgeObjectRelease();
            sub_183B917F4();
            sub_183B91E54();
            swift_allocError();
            sub_183B91E30();
            swift_bridgeObjectRelease();
            goto LABEL_27;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_project_boxed_opaque_existential_2(v39, v40);
          if ((sub_183B920AC() & 1) != 0)
          {
            v12 = v25;
            v14 = v26;
            v16 = v30;
            v11 = v31;
            v13 = v27;
            v15 = v28;
            v17 = v29;
            goto LABEL_21;
          }
        }
        v13 = 0xE700000000000000;
LABEL_16:
        sub_18324C184(v25, v31);
        if (v31)
        {
          sub_18324A894((uint64_t)v39, (uint64_t)&v32);
          sub_183B91E54();
          swift_allocError();
          sub_183B91E30();
LABEL_27:
          __swift_destroy_boxed_opaque_existential_2((uint64_t)&v32);
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_28;
        }
        __swift_project_boxed_opaque_existential_2(v39, v40);
        v20 = sub_183B920AC();
        v5 = v38;
        v6 = v37;
        v7 = v36;
        v8 = v13;
        v9 = v34;
        v31 = v33;
        v10 = v32;
        if ((v20 & 1) == 0)
          continue;
        break;
      }
LABEL_21:
      if (!v11)
        goto LABEL_3;
      swift_bridgeObjectRetain();
      if (sub_183B917D0() == 3)
      {
        v21 = sub_1832D9CC0(v17, v16);
        swift_bridgeObjectRelease();
        if ((v21 & 1) != 0)
        {
          __swift_destroy_boxed_opaque_existential_2((uint64_t)v39);
          *(_QWORD *)v24 = v12;
          *(_QWORD *)(v24 + 8) = v11;
          *(_QWORD *)(v24 + 16) = v14;
          *(_QWORD *)(v24 + 24) = v13;
          *(_BYTE *)(v24 + 32) = v15;
          *(_QWORD *)(v24 + 40) = v17;
          *(_QWORD *)(v24 + 48) = v16;
          v22 = v41;
          return __swift_destroy_boxed_opaque_existential_2(v22);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_18324A894((uint64_t)v39, (uint64_t)&v32);
      sub_183B91DB8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_183B917F4();
      sub_18324C184(v12, v11);
      swift_bridgeObjectRelease();
      sub_183B917F4();
      sub_183B91E54();
      swift_allocError();
      sub_183B91E30();
      swift_bridgeObjectRelease();
    }
    __swift_destroy_boxed_opaque_existential_2((uint64_t)&v32);
    swift_willThrow();
LABEL_28:
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v39);
    v3 = (_QWORD *)v41;
  }
  v22 = (uint64_t)v3;
  return __swift_destroy_boxed_opaque_existential_2(v22);
}

uint64_t sub_1832DBD64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return HTTPResponse.PseudoHeaderFields.init(from:)(a1, a2);
}

uint64_t sub_1832DBD78(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183B922F8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_1832985C4();
  sub_183B920C4();
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v2);
}

uint64_t sub_1832DBE4C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_183310E94(*a1, *a2);
}

uint64_t sub_1832DBE58()
{
  sub_183B92250();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_1832DBF0C()
{
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832DBF9C()
{
  sub_183B92250();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_1832DC04C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1832DD82C();
  *a1 = result;
  return result;
}

void sub_1832DC078(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = *v1;
  v3 = 0x8000000183C6F5C0;
  v4 = 0xEC00000073646C65;
  v5 = 0x6946726564616568;
  if (v2 != 1)
  {
    v5 = 0x68506E6F73616572;
    v4 = 0xEC00000065736172;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0xD000000000000012;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_1832DC0EC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6946726564616568;
  if (*v0 != 1)
    v1 = 0x68506E6F73616572;
  if (*v0)
    return v1;
  else
    return 0xD000000000000012;
}

uint64_t sub_1832DC15C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1832DD82C();
  *a1 = result;
  return result;
}

uint64_t sub_1832DC180()
{
  sub_1832DCF1C();
  return sub_183B92334();
}

uint64_t sub_1832DC1A8()
{
  sub_1832DCF1C();
  return sub_183B92340();
}

uint64_t HTTPResponse.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE910);
  v22 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *v1;
  v7 = *((_QWORD *)v1 + 2);
  v6 = *((_QWORD *)v1 + 3);
  v8 = *((_BYTE *)v1 + 32);
  v9 = *((_QWORD *)v1 + 5);
  v19 = *((_QWORD *)v1 + 6);
  v20 = v9;
  v10 = *((_QWORD *)v1 + 7);
  v17 = *((_QWORD *)v1 + 8);
  v18 = v10;
  v16 = *((_QWORD *)v1 + 9);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1832DCF1C();
  sub_183B9231C();
  v24 = v21;
  v25 = v7;
  v26 = v6;
  v27 = v8;
  v28 = v20;
  v29 = v19;
  v30 = 0;
  sub_1832DCF60();
  v11 = v23;
  sub_183B92064();
  if (v11)
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v5, v3);
  v13 = v16;
  v14 = v22;
  LOBYTE(v24) = 2;
  sub_183B92058();
  *(_QWORD *)&v24 = v13;
  v30 = 1;
  sub_1832DCFA4();
  sub_183B92064();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v5, v3);
}

uint64_t HTTPResponse.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE930);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1832DCF1C();
  sub_183B922EC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  v36 = 0;
  sub_1832DCFE8();
  sub_183B92010();
  v25 = v28;
  v26 = a2;
  v10 = v29;
  v11 = v31;
  v35 = v32;
  v12 = v34;
  v23 = v33;
  v24 = v30;
  LOBYTE(v28) = 2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_183B92004();
  v27 = v14;
  v15 = v14;
  v22 = v11;
  v16 = v13;
  if ((sub_1832D9E5C(v13, v14) & 1) != 0)
  {
    v36 = 1;
    sub_1832DD070();
    swift_bridgeObjectRetain();
    sub_183B92010();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v18 = v28;
    swift_bridgeObjectRetain();
    v19 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = v26;
    *v26 = v25;
    v20[1] = v10;
    v20[2] = v24;
    v20[3] = v19;
    *((_BYTE *)v20 + 32) = v35;
    v20[5] = v23;
    v20[6] = v12;
    v20[7] = v16;
    v20[8] = v27;
    v20[9] = v18;
    __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1832DD02C();
    swift_allocError();
    *v17 = v16;
    v17[1] = v15;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832DC71C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return HTTPResponse.init(from:)(a1, a2);
}

uint64_t sub_1832DC730(_QWORD *a1)
{
  return HTTPResponse.encode(to:)(a1);
}

double static HTTPResponse.Status.continue.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 100;
  *(_OWORD *)a1 = xmmword_183BA4660;
  *(_QWORD *)(a1 + 16) = 0xE800000000000000;
  return result;
}

double static HTTPResponse.Status.switchingProtocols.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 101;
  *(_OWORD *)a1 = xmmword_183BA4670;
  *(_QWORD *)(a1 + 16) = 0x8000000183C721E0;
  return result;
}

double static HTTPResponse.Status.earlyHints.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 103;
  *(_OWORD *)a1 = xmmword_183BA4680;
  *(_QWORD *)(a1 + 16) = 0xEB0000000073746ELL;
  return result;
}

double static HTTPResponse.Status.ok.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 200;
  *(_OWORD *)a1 = xmmword_183BA4690;
  *(_QWORD *)(a1 + 16) = 0xE200000000000000;
  return result;
}

double static HTTPResponse.Status.created.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 201;
  *(_OWORD *)a1 = xmmword_183BA46A0;
  *(_QWORD *)(a1 + 16) = 0xE700000000000000;
  return result;
}

double static HTTPResponse.Status.accepted.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 202;
  *(_OWORD *)a1 = xmmword_183BA46B0;
  *(_QWORD *)(a1 + 16) = 0xE800000000000000;
  return result;
}

double static HTTPResponse.Status.nonAuthoritativeInformation.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 203;
  *(_OWORD *)a1 = xmmword_183BA46C0;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72200;
  return result;
}

double static HTTPResponse.Status.noContent.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 204;
  *(_OWORD *)a1 = xmmword_183BA46D0;
  *(_QWORD *)(a1 + 16) = 0xEA0000000000746ELL;
  return result;
}

double static HTTPResponse.Status.resetContent.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 205;
  *(_OWORD *)a1 = xmmword_183BA46E0;
  *(_QWORD *)(a1 + 16) = 0xED0000746E65746ELL;
  return result;
}

double static HTTPResponse.Status.partialContent.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 206;
  *(_OWORD *)a1 = xmmword_183BA46F0;
  *(_QWORD *)(a1 + 16) = 0xEF746E65746E6F43;
  return result;
}

double static HTTPResponse.Status.multipleChoices.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 300;
  *(_OWORD *)a1 = xmmword_183BA4700;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72220;
  return result;
}

double static HTTPResponse.Status.movedPermanently.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 301;
  *(_OWORD *)a1 = xmmword_183BA4710;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72240;
  return result;
}

double static HTTPResponse.Status.found.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 302;
  *(_OWORD *)a1 = xmmword_183BA4720;
  *(_QWORD *)(a1 + 16) = 0xE500000000000000;
  return result;
}

double static HTTPResponse.Status.seeOther.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 303;
  *(_OWORD *)a1 = xmmword_183BA4730;
  *(_QWORD *)(a1 + 16) = 0xE900000000000072;
  return result;
}

double static HTTPResponse.Status.notModified.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 304;
  *(_OWORD *)a1 = xmmword_183BA4740;
  *(_QWORD *)(a1 + 16) = 0xEC00000064656966;
  return result;
}

double static HTTPResponse.Status.temporaryRedirect.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 307;
  *(_OWORD *)a1 = xmmword_183BA4750;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72260;
  return result;
}

double static HTTPResponse.Status.permanentRedirect.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 308;
  *(_OWORD *)a1 = xmmword_183BA4760;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72280;
  return result;
}

double static HTTPResponse.Status.badRequest.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 400;
  *(_OWORD *)a1 = xmmword_183BA4770;
  *(_QWORD *)(a1 + 16) = 0xEB00000000747365;
  return result;
}

double static HTTPResponse.Status.unauthorized.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 401;
  *(_OWORD *)a1 = xmmword_183BA4780;
  *(_QWORD *)(a1 + 16) = 0xEC00000064657A69;
  return result;
}

double static HTTPResponse.Status.forbidden.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 403;
  *(_OWORD *)a1 = xmmword_183BA4790;
  *(_QWORD *)(a1 + 16) = 0xE90000000000006ELL;
  return result;
}

double static HTTPResponse.Status.notFound.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 404;
  *(_OWORD *)a1 = xmmword_183BA47A0;
  *(_QWORD *)(a1 + 16) = 0xE900000000000064;
  return result;
}

double static HTTPResponse.Status.methodNotAllowed.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 405;
  *(_OWORD *)a1 = xmmword_183BA47B0;
  *(_QWORD *)(a1 + 16) = 0x8000000183C722A0;
  return result;
}

double static HTTPResponse.Status.notAcceptable.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 406;
  *(_OWORD *)a1 = xmmword_183BA47C0;
  *(_QWORD *)(a1 + 16) = 0xEE00656C62617470;
  return result;
}

double static HTTPResponse.Status.proxyAuthenticationRequired.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 407;
  *(_OWORD *)a1 = xmmword_183BA47D0;
  *(_QWORD *)(a1 + 16) = 0x8000000183C722C0;
  return result;
}

double static HTTPResponse.Status.requestTimeout.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 408;
  *(_OWORD *)a1 = xmmword_183BA47E0;
  *(_QWORD *)(a1 + 16) = 0xEF74756F656D6954;
  return result;
}

double static HTTPResponse.Status.conflict.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 409;
  *(_OWORD *)a1 = xmmword_183BA47F0;
  *(_QWORD *)(a1 + 16) = 0xE800000000000000;
  return result;
}

double static HTTPResponse.Status.gone.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 410;
  *(_OWORD *)a1 = xmmword_183BA4800;
  *(_QWORD *)(a1 + 16) = 0xE400000000000000;
  return result;
}

double static HTTPResponse.Status.lengthRequired.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 411;
  *(_OWORD *)a1 = xmmword_183BA4810;
  *(_QWORD *)(a1 + 16) = 0xEF64657269757165;
  return result;
}

double static HTTPResponse.Status.preconditionFailed.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 412;
  *(_OWORD *)a1 = xmmword_183BA4820;
  *(_QWORD *)(a1 + 16) = 0x8000000183C722E0;
  return result;
}

double static HTTPResponse.Status.contentTooLarge.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 413;
  *(_OWORD *)a1 = xmmword_183BA4830;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72300;
  return result;
}

double static HTTPResponse.Status.uriTooLong.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 414;
  *(_OWORD *)a1 = xmmword_183BA4840;
  *(_QWORD *)(a1 + 16) = 0xEC000000676E6F4CLL;
  return result;
}

double static HTTPResponse.Status.unsupportedMediaType.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 415;
  *(_OWORD *)a1 = xmmword_183BA4850;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72320;
  return result;
}

double static HTTPResponse.Status.rangeNotSatisfiable.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 416;
  *(_OWORD *)a1 = xmmword_183BA4860;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72340;
  return result;
}

double static HTTPResponse.Status.expectationFailed.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 417;
  *(_OWORD *)a1 = xmmword_183BA4870;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72360;
  return result;
}

double static HTTPResponse.Status.misdirectedRequest.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 421;
  *(_OWORD *)a1 = xmmword_183BA4880;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72380;
  return result;
}

double static HTTPResponse.Status.unprocessableContent.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 422;
  *(_OWORD *)a1 = xmmword_183BA4890;
  *(_QWORD *)(a1 + 16) = 0x8000000183C723A0;
  return result;
}

double static HTTPResponse.Status.tooEarly.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 425;
  *(_OWORD *)a1 = xmmword_183BA48A0;
  *(_QWORD *)(a1 + 16) = 0xE900000000000079;
  return result;
}

double static HTTPResponse.Status.upgradeRequired.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 426;
  *(_OWORD *)a1 = xmmword_183BA48B0;
  *(_QWORD *)(a1 + 16) = 0x8000000183C723C0;
  return result;
}

double static HTTPResponse.Status.preconditionRequired.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 428;
  *(_OWORD *)a1 = xmmword_183BA48C0;
  *(_QWORD *)(a1 + 16) = 0x8000000183C723E0;
  return result;
}

double static HTTPResponse.Status.tooManyRequests.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 429;
  *(_OWORD *)a1 = xmmword_183BA48D0;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72400;
  return result;
}

double static HTTPResponse.Status.requestHeaderFieldsTooLarge.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 431;
  *(_OWORD *)a1 = xmmword_183BA48E0;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72420;
  return result;
}

double static HTTPResponse.Status.unavailableForLegalReasons.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 451;
  *(_OWORD *)a1 = xmmword_183BA48F0;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72440;
  return result;
}

double static HTTPResponse.Status.internalServerError.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 500;
  *(_OWORD *)a1 = xmmword_183BA4900;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72460;
  return result;
}

double static HTTPResponse.Status.notImplemented.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 501;
  *(_OWORD *)a1 = xmmword_183BA4910;
  *(_QWORD *)(a1 + 16) = 0xEF6465746E656D65;
  return result;
}

double static HTTPResponse.Status.badGateway.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 502;
  *(_OWORD *)a1 = xmmword_183BA4920;
  *(_QWORD *)(a1 + 16) = 0xEB00000000796177;
  return result;
}

double static HTTPResponse.Status.serviceUnavailable.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 503;
  *(_OWORD *)a1 = xmmword_183BA4930;
  *(_QWORD *)(a1 + 16) = 0x8000000183C72480;
  return result;
}

double static HTTPResponse.Status.gatewayTimeout.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 504;
  *(_OWORD *)a1 = xmmword_183BA4940;
  *(_QWORD *)(a1 + 16) = 0xEF74756F656D6954;
  return result;
}

double static HTTPResponse.Status.httpVersionNotSupported.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 505;
  *(_OWORD *)a1 = xmmword_183BA4950;
  *(_QWORD *)(a1 + 16) = 0x8000000183C724A0;
  return result;
}

double static HTTPResponse.Status.networkAuthenticationRequired.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 511;
  *(_OWORD *)a1 = xmmword_183BA4960;
  *(_QWORD *)(a1 + 16) = 0x8000000183C724C0;
  return result;
}

BOOL _s7Network12HTTPResponseV18PseudoHeaderFieldsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  _BOOL8 result;

  v2 = *(unsigned __int8 *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(unsigned __int8 *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  result = 0;
  if ((v8 || (sub_183B920F4() & 1) != 0) && v2 == v5)
  {
    v9 = v3 == v6 && v4 == v7;
    if (v9 || (sub_183B920F4() & 1) != 0)
      return 1;
  }
  return result;
}

uint64_t _s7Network12HTTPResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(unsigned __int8 *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(unsigned __int8 *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 72);
  if ((*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16) || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
    && (sub_183B920F4() & 1) == 0
    || v2 != v6
    || (v3 != v7 || v4 != v8) && (sub_183B920F4() & 1) == 0)
  {
    return 0;
  }
  swift_retain();
  swift_retain();
  v10 = sub_183297E78(v5, v9);
  swift_release();
  swift_release();
  return v10 & 1;
}

unint64_t sub_1832DCF1C()
{
  unint64_t result;

  result = qword_1EDCDE918;
  if (!qword_1EDCDE918)
  {
    result = MEMORY[0x186DB5558](&unk_183BA4DEC, &type metadata for HTTPResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDE918);
  }
  return result;
}

unint64_t sub_1832DCF60()
{
  unint64_t result;

  result = qword_1EDCDE920;
  if (!qword_1EDCDE920)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPResponse.PseudoHeaderFields, &type metadata for HTTPResponse.PseudoHeaderFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDE920);
  }
  return result;
}

unint64_t sub_1832DCFA4()
{
  unint64_t result;

  result = qword_1EDCDE928;
  if (!qword_1EDCDE928)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDE928);
  }
  return result;
}

unint64_t sub_1832DCFE8()
{
  unint64_t result;

  result = qword_1EDCDE938;
  if (!qword_1EDCDE938)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPResponse.PseudoHeaderFields, &type metadata for HTTPResponse.PseudoHeaderFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDE938);
  }
  return result;
}

unint64_t sub_1832DD02C()
{
  unint64_t result;

  result = qword_1EDCDE940;
  if (!qword_1EDCDE940)
  {
    result = MEMORY[0x186DB5558](&unk_183BA4DAC, &type metadata for HTTPResponse.DecodingError);
    atomic_store(result, (unint64_t *)&qword_1EDCDE940);
  }
  return result;
}

unint64_t sub_1832DD070()
{
  unint64_t result;

  result = qword_1EDCDE948;
  if (!qword_1EDCDE948)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDE948);
  }
  return result;
}

unint64_t sub_1832DD0B8()
{
  unint64_t result;

  result = qword_1EDCDE950;
  if (!qword_1EDCDE950)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPResponse.Status.Kind, &type metadata for HTTPResponse.Status.Kind);
    atomic_store(result, (unint64_t *)&qword_1EDCDE950);
  }
  return result;
}

unint64_t sub_1832DD100()
{
  unint64_t result;

  result = qword_1EDCDE958;
  if (!qword_1EDCDE958)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPResponse.Status, &type metadata for HTTPResponse.Status);
    atomic_store(result, (unint64_t *)&qword_1EDCDE958);
  }
  return result;
}

uint64_t sub_1832DD144()
{
  return MEMORY[0x1E0DEB488];
}

unint64_t sub_1832DD154()
{
  unint64_t result;

  result = qword_1EDCDE960;
  if (!qword_1EDCDE960)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPResponse.PseudoHeaderFields, &type metadata for HTTPResponse.PseudoHeaderFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDE960);
  }
  return result;
}

unint64_t sub_1832DD19C()
{
  unint64_t result;

  result = qword_1EDCDE968;
  if (!qword_1EDCDE968)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPResponse, &type metadata for HTTPResponse);
    atomic_store(result, (unint64_t *)&qword_1EDCDE968);
  }
  return result;
}

uint64_t sub_1832DD1E4(__int128 *a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;

  v1 = *((_QWORD *)a1 + 2);
  v3 = *a1;
  v4 = v1;
  swift_bridgeObjectRetain();
  return HTTPResponse.status.setter((uint64_t)&v3);
}

uint64_t destroy for HTTPResponse()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for HTTPResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HTTPResponse(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for HTTPResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPResponse(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPResponse()
{
  return &type metadata for HTTPResponse;
}

uint64_t getEnumTagSinglePayload for HTTPResponse.Status(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPResponse.Status(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPResponse.Status()
{
  return &type metadata for HTTPResponse.Status;
}

uint64_t storeEnumTagSinglePayload for HTTPResponse.Status.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1832DD5E8 + 4 * byte_183BA4975[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1832DD61C + 4 * byte_183BA4970[v4]))();
}

uint64_t sub_1832DD61C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832DD624(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832DD62CLL);
  return result;
}

uint64_t sub_1832DD638(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1832DD640);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1832DD644(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832DD64C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPResponse.Status.Kind()
{
  return &type metadata for HTTPResponse.Status.Kind;
}

ValueMetadata *type metadata accessor for HTTPResponse.PseudoHeaderFields()
{
  return &type metadata for HTTPResponse.PseudoHeaderFields;
}

ValueMetadata *type metadata accessor for HTTPResponse.DecodingError()
{
  return &type metadata for HTTPResponse.DecodingError;
}

uint64_t storeEnumTagSinglePayload for HTTPResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1832DD6D4 + 4 * byte_183BA497F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1832DD708 + 4 * byte_183BA497A[v4]))();
}

uint64_t sub_1832DD708(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832DD710(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832DD718);
  return result;
}

uint64_t sub_1832DD724(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1832DD72CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1832DD730(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832DD738(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPResponse.CodingKeys()
{
  return &type metadata for HTTPResponse.CodingKeys;
}

unint64_t sub_1832DD758()
{
  unint64_t result;

  result = qword_1EDCDE970;
  if (!qword_1EDCDE970)
  {
    result = MEMORY[0x186DB5558](&unk_183BA4D84, &type metadata for HTTPResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDE970);
  }
  return result;
}

unint64_t sub_1832DD7A0()
{
  unint64_t result;

  result = qword_1EDCDE978;
  if (!qword_1EDCDE978)
  {
    result = MEMORY[0x186DB5558](&unk_183BA4CBC, &type metadata for HTTPResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDE978);
  }
  return result;
}

unint64_t sub_1832DD7E8()
{
  unint64_t result;

  result = qword_1EDCDE980;
  if (!qword_1EDCDE980)
  {
    result = MEMORY[0x186DB5558](&unk_183BA4CE4, &type metadata for HTTPResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDE980);
  }
  return result;
}

uint64_t sub_1832DD82C()
{
  unint64_t v0;

  v0 = sub_183B91FC8();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1832DD874(_BYTE *a1, uint64_t a2)
{
  return sub_1832A1F7C(a1, a2);
}

uint64_t NWMulticastGroup.sourceFilter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1832D6A4C(v1 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter, a1);
}

uint64_t NWMulticastGroup.isUnicastDisabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Network16NWMulticastGroup_isUnicastDisabled);
}

uint64_t sub_1832DD8AC(NSObject *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  NSObject *specific_source;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  _QWORD aBlock[6];
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC7Network16NWMulticastGroup__nw) = a1;
  v6 = (void *)swift_unknownObjectRetain();
  specific_source = nw_multicast_group_descriptor_get_specific_source(v6);
  sub_183056F9C(specific_source, (uint64_t)v5);
  sub_183290450((uint64_t)v5, v1 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7Network16NWMulticastGroup_isUnicastDisabled) = nw_multicast_group_descriptor_get_disable_unicast_traffic(a1);
  v14 = MEMORY[0x1E0DEE9D8];
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = &v14;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = sub_1832E1C7C;
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = sub_18323E7E8;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1830642F4;
  aBlock[3] = &block_descriptor_72;
  v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_group_descriptor_enumerate_endpoints(a1, v10);
  swift_unknownObjectRelease();
  _Block_release(v10);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 16) = v14;
    swift_release();
    return v1;
  }
  return result;
}

uint64_t sub_1832DDA6C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  uint64_t v12;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3E8);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NWEndpoint();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_unknownObjectRetain();
  sub_183056F9C(v10, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1830620D4((uint64_t)v5, qword_1ECD84160);
  }
  else
  {
    sub_1830589B0((uint64_t)v5, (uint64_t)v9);
    sub_1832616F4((uint64_t)v9, (uint64_t)v2);
    sub_183273A54(0, 0, (uint64_t)v2);
    sub_183261738((uint64_t)v9);
  }
  return 1;
}

uint64_t NWMulticastGroup.__allocating_init(_:)(void *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = nw_group_descriptor_copy(a1);
  type metadata accessor for NWMulticastGroup(0);
  v2 = swift_allocObject();
  sub_1832DD8AC(v1);
  swift_unknownObjectRelease();
  return v2;
}

uint64_t type metadata accessor for NWMulticastGroup(uint64_t a1)
{
  return sub_183058E90(a1, qword_1EDCDB460);
}

uint64_t NWMulticastGroup.__allocating_init(for:from:disableUnicast:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  NWMulticastGroup.init(for:from:disableUnicast:)(a1, a2, a3);
  return v6;
}

uint64_t NWMulticastGroup.init(for:from:disableUnicast:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = v3;
  type metadata accessor for NWEndpoint();
  v9 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC7Network16NWMulticastGroup__nw) = 0;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    HIDWORD(v28) = a3;
    v29 = v4;
    v30 = v9;
    v31 = a2;
    v32 = v5;
    v14 = v9 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v15 = *(_QWORD *)(v10 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1832616F4(v14, (uint64_t)v12);
      if (swift_getEnumCaseMultiPayload())
        break;
      v17 = *(_QWORD *)v12;
      v16 = *((_QWORD *)v12 + 1);
      v18 = *((_QWORD *)v12 + 2);
      v19 = v12[24];
      if (v19 == 1)
      {
        if ((*(_QWORD *)v12 & 0xF0) != 0xE0)
          goto LABEL_11;
      }
      else if (v19 != 2 || ~*v12 != 0)
      {
LABEL_11:
        swift_bridgeObjectRelease_n();
        sub_18323C200();
        swift_allocError();
        *(_DWORD *)v21 = 22;
        *(_BYTE *)(v21 + 4) = 0;
        swift_willThrow();
        sub_183058BF0(v17, v16, v18, v19);
        goto LABEL_15;
      }
      sub_183058BF0(*(_QWORD *)v12, *((_QWORD *)v12 + 1), *((_QWORD *)v12 + 2), v12[24]);
      v14 += v15;
      if (!--v13)
      {
        v23 = v30;
        swift_bridgeObjectRelease();
        v5 = v32;
        *(_QWORD *)(v32 + 16) = v23;
        v24 = v31;
        sub_1832D6A4C(v31, v5 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter);
        *(_BYTE *)(v5 + OBJC_IVAR____TtC7Network16NWMulticastGroup_isUnicastDisabled) = BYTE4(v28) & 1;
        v25 = sub_1832DDF8C();
        sub_1830620D4(v24, qword_1ECD84160);
        *(_QWORD *)(v5 + OBJC_IVAR____TtC7Network16NWMulticastGroup__nw) = v25;
        swift_unknownObjectRelease();
        return v5;
      }
    }
    swift_bridgeObjectRelease_n();
    sub_183261738((uint64_t)v12);
    sub_18323C200();
    swift_allocError();
    *(_DWORD *)v26 = 22;
    *(_BYTE *)(v26 + 4) = 0;
    swift_willThrow();
LABEL_15:
    v5 = v32;
    a2 = v31;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_18323C200();
    swift_allocError();
    *(_DWORD *)v22 = 22;
    *(_BYTE *)(v22 + 4) = 0;
    swift_willThrow();
  }
  sub_1830620D4(a2, qword_1ECD84160);
  swift_unknownObjectRelease();
  type metadata accessor for NWMulticastGroup(0);
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t sub_1832DDF7C()
{
  return swift_unknownObjectRetain();
}

NSObject *sub_1832DDF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *multicast;
  uint64_t v16;
  char v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;

  v1 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for NWEndpoint();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v23 - v9;
  v11 = *(_QWORD *)(v0 + 16);
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    return 0;
  v13 = v11 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  sub_1832616F4(v13, (uint64_t)v23 - v9);
  swift_bridgeObjectRetain();
  NWEndpoint.nw.getter();
  if (!v14)
  {
    sub_183261738((uint64_t)v10);
    swift_bridgeObjectRelease();
    return 0;
  }
  v24 = v4;
  v25 = v0;
  v23[1] = v14;
  multicast = nw_group_descriptor_create_multicast(v14);
  v16 = *(_QWORD *)(v5 + 72);
  do
  {
    sub_1832616F4(v13, (uint64_t)v8);
    _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0((uint64_t)v8, (uint64_t)v10);
    if ((v17 & 1) == 0)
    {
      NWEndpoint.nw.getter();
      if (v18)
      {
        nw_group_descriptor_add_endpoint(multicast, v18);
        swift_unknownObjectRelease();
      }
    }
    sub_183261738((uint64_t)v8);
    v13 += v16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  v19 = v25;
  sub_1832D6A4C(v25 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v24) == 1)
  {
    sub_1830620D4((uint64_t)v3, qword_1ECD84160);
  }
  else
  {
    NWEndpoint.nw.getter();
    v21 = v20;
    sub_183261738((uint64_t)v3);
    if (v21)
    {
      nw_multicast_group_descriptor_set_specific_source(multicast, v21);
      swift_unknownObjectRelease();
    }
  }
  nw_multicast_group_descriptor_set_disable_unicast_traffic(multicast, *(_BYTE *)(v19 + OBJC_IVAR____TtC7Network16NWMulticastGroup_isUnicastDisabled));
  swift_unknownObjectRelease();
  sub_183261738((uint64_t)v10);
  return multicast;
}

uint64_t NWMulticastGroup.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1830620D4(v0 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter, qword_1ECD84160);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWMulticastGroup.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1830620D4(v0 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter, qword_1ECD84160);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1832DE260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD84138);
  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NWEndpoint() - 8) + 80);
  v2 = (v1 + 32) & ~v1;
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_183B9EA20;
  sub_1832616F4(v0 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint, v3 + v2);
  return v3;
}

uint64_t NWMultiplexGroup.__allocating_init(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = nw_group_descriptor_copy(a1);
  type metadata accessor for NWMultiplexGroup(0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw) = v5;
  v7 = (void *)swift_unknownObjectRetain();
  nw_group_descriptor_copy_member(v7);
  v8 = swift_unknownObjectRetain();
  sub_183056F9C(v8, (uint64_t)v4);
  v9 = type metadata accessor for NWEndpoint();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1830589B0((uint64_t)v4, v6 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
    swift_unknownObjectRelease();
    return v6;
  }
  return result;
}

uint64_t type metadata accessor for NWMultiplexGroup(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1EDCDB478);
}

uint64_t NWMultiplexGroup.__allocating_init(to:)(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  nw_group_descriptor_t multiplex;

  v2 = swift_allocObject();
  sub_1832616F4(a1, v2 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
  NWEndpoint.nw.getter();
  if (v3)
  {
    multiplex = nw_group_descriptor_create_multiplex(v3);
    swift_unknownObjectRelease();
    sub_183261738(a1);
  }
  else
  {
    sub_183261738(a1);
    multiplex = 0;
  }
  *(_QWORD *)(v2 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw) = multiplex;
  return v2;
}

uint64_t NWMultiplexGroup.init(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;
  nw_group_descriptor_t multiplex;

  v2 = v1;
  sub_1832616F4(a1, v2 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
  NWEndpoint.nw.getter();
  if (v4)
  {
    multiplex = nw_group_descriptor_create_multiplex(v4);
    swift_unknownObjectRelease();
    sub_183261738(a1);
  }
  else
  {
    sub_183261738(a1);
    multiplex = 0;
  }
  *(_QWORD *)(v2 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw) = multiplex;
  return v2;
}

uint64_t sub_1832DE518()
{
  return swift_unknownObjectRetain();
}

uint64_t NWMultiplexGroup.deinit()
{
  uint64_t v0;

  sub_183261738(v0 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWMultiplexGroup.__deallocating_deinit()
{
  uint64_t v0;

  sub_183261738(v0 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t NWApplicationServiceGroup.nw.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1832DE5AC(NSObject *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[6];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = sub_183B914AC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup__nw) = a1;
  v14 = 0uLL;
  v7 = (void *)swift_unknownObjectRetain();
  nw_group_descriptor_get_id(v7, &v14);
  sub_183B91488();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v1 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup_groupID, v6, v3);
  v13 = MEMORY[0x1E0DEE9D8];
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = &v13;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = sub_1832E1C54;
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = sub_18306433C;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1830642F4;
  aBlock[3] = &block_descriptor_56_0;
  v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_group_descriptor_enumerate_endpoints(a1, v10);
  swift_unknownObjectRelease();
  _Block_release(v10);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((a1 & 1) != 0)
    __break(1u);
  *(_QWORD *)(v1 + 16) = v13;
  swift_release();
  return v1;
}

uint64_t sub_1832DE7C0(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NWEndpoint();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v19 - v11;
  v13 = swift_unknownObjectRetain();
  sub_183056F9C(v13, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1830620D4((uint64_t)v5, qword_1ECD84160);
  }
  else
  {
    sub_1830589B0((uint64_t)v5, (uint64_t)v12);
    sub_1832616F4((uint64_t)v12, (uint64_t)v10);
    v14 = *a2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_183062ADC(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
      *a2 = v14;
    }
    v17 = *(_QWORD *)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 24);
    if (v17 >= v16 >> 1)
    {
      v14 = sub_183062ADC(v16 > 1, v17 + 1, 1, v14);
      *a2 = v14;
    }
    *(_QWORD *)(v14 + 16) = v17 + 1;
    sub_1830589B0((uint64_t)v10, v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v17);
    sub_183261738((uint64_t)v12);
  }
  return 1;
}

uint64_t NWApplicationServiceGroup.__allocating_init(for:id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  NWApplicationServiceGroup.init(for:id:)(a1, a2);
  return v4;
}

uint64_t NWApplicationServiceGroup.init(for:id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  void *v17;
  __int16 v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _QWORD v32[2];

  v3 = v2;
  v32[1] = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for NWEndpoint();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(v2 + 16) = a1;
    v10 = v2 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup_groupID;
    v11 = sub_183B914AC();
    v12 = a2;
    v13 = v11;
    v14 = *(_QWORD *)(v11 - 8);
    v15 = *(void (**)(uint64_t))(v14 + 16);
    v30 = v12;
    v15(v10);
    if (*(_QWORD *)(a1 + 16))
    {
      sub_1832616F4(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), (uint64_t)v9);
      swift_bridgeObjectRetain();
      NWEndpoint.nw.getter();
      v17 = v16;
      sub_183261738((uint64_t)v9);
      if (v17)
      {
        *(_QWORD *)&v31 = sub_183B91494();
        WORD4(v31) = v18;
        BYTE10(v31) = v19;
        BYTE11(v31) = v20;
        BYTE12(v31) = v21;
        BYTE13(v31) = v22;
        BYTE14(v31) = v23;
        HIBYTE(v31) = v24;
        sub_1832DEC74(&v31, v17, a1, v32);
        swift_bridgeObjectRelease();
        v25 = v32[0];
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v30, v13);
        swift_unknownObjectRelease();
LABEL_8:
        *(_QWORD *)(v3 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup__nw) = v25;
        return v3;
      }
      swift_bridgeObjectRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v30, v13);
    v25 = 0;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  sub_18323C200();
  swift_allocError();
  *(_DWORD *)v26 = 22;
  *(_BYTE *)(v26 + 4) = 0;
  swift_willThrow();
  v27 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(a2, v27);
  swift_deallocPartialClassInstance();
  return v3;
}

NSObject *sub_1832DEC74@<X0>(_OWORD *a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  nw_group_descriptor_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;

  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEA10);
  MEMORY[0x1E0C80A78](v48);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  v12 = MEMORY[0x1E0C80A78](v11);
  v45 = (uint64_t)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v40 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v40 - v17;
  v19 = type metadata accessor for NWEndpoint();
  v50 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v43 = (uint64_t)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v20);
  v49 = (char *)&v40 - v23;
  if (!a1)
  {
    __break(1u);
    return result;
  }
  result = nw_group_descriptor_create_application_service(a2, a1);
  v44 = result;
  v24 = *(_QWORD *)(a3 + 16);
  if (!v24)
    goto LABEL_16;
  v41 = a4;
  v42 = v4;
  v25 = a3 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
  v46 = *(_QWORD *)(v50 + 72);
  v40 = a3;
  swift_bridgeObjectRetain();
  v47 = v25;
  v26 = v25;
  v27 = (uint64_t)v49;
  do
  {
    sub_1832616F4(v26, v27);
    sub_1832616F4(v27, (uint64_t)v18);
    v28 = v50;
    v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56);
    v29(v18, 0, 1, v19);
    sub_1832616F4(v47, (uint64_t)v16);
    v29(v16, 0, 1, v19);
    v30 = (uint64_t)&v10[*(int *)(v48 + 48)];
    sub_1832D6A4C((uint64_t)v18, (uint64_t)v10);
    sub_1832D6A4C((uint64_t)v16, v30);
    v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
    if (v31((uint64_t)v10, 1, v19) == 1)
    {
      sub_1830620D4((uint64_t)v16, qword_1ECD84160);
      sub_1830620D4((uint64_t)v18, qword_1ECD84160);
      if (v31(v30, 1, v19) == 1)
      {
        sub_1830620D4((uint64_t)v10, qword_1ECD84160);
        v27 = (uint64_t)v49;
        goto LABEL_5;
      }
    }
    else
    {
      v32 = (uint64_t)v16;
      v33 = v45;
      sub_1832D6A4C((uint64_t)v10, v45);
      if (v31(v30, 1, v19) != 1)
      {
        v35 = v43;
        sub_1830589B0(v30, v43);
        _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0(v33, v35);
        v37 = v36;
        sub_183261738(v35);
        sub_1830620D4(v32, qword_1ECD84160);
        sub_1830620D4((uint64_t)v18, qword_1ECD84160);
        v38 = v33;
        v16 = (char *)v32;
        sub_183261738(v38);
        sub_1830620D4((uint64_t)v10, qword_1ECD84160);
        v27 = (uint64_t)v49;
        if ((v37 & 1) != 0)
          goto LABEL_5;
        goto LABEL_13;
      }
      sub_1830620D4(v32, qword_1ECD84160);
      sub_1830620D4((uint64_t)v18, qword_1ECD84160);
      v34 = v33;
      v16 = (char *)v32;
      sub_183261738(v34);
    }
    sub_1830620D4((uint64_t)v10, &qword_1EDCDEA10);
    v27 = (uint64_t)v49;
LABEL_13:
    NWEndpoint.nw.getter();
    if (v39)
    {
      nw_group_descriptor_add_endpoint(v44, v39);
      swift_unknownObjectRelease();
    }
LABEL_5:
    sub_183261738(v27);
    v26 += v46;
    --v24;
  }
  while (v24);
  result = swift_bridgeObjectRelease();
  a4 = v41;
LABEL_16:
  *a4 = v44;
  return result;
}

uint64_t NWApplicationServiceGroup.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup_groupID;
  v2 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWApplicationServiceGroup.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup_groupID;
  v2 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t NWConnectionGroup.debugDescription.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(v0 + 24), sel_description);
  v2 = sub_183B916E0();

  return v2;
}

uint64_t sub_1832DF164@<X0>(nw_error_t error@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  nw_error_domain_t error_domain;
  uint64_t v7;
  unsigned int error_code;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 v11;

  switch((int)result)
  {
    case 0:
      result = swift_unknownObjectRelease();
      v5 = 0x8000000000;
      break;
    case 1:
      if (error)
      {
        error_domain = nw_error_get_error_domain(error);
        switch(error_domain)
        {
          case nw_error_domain_tls:
            error_code = nw_error_get_error_code(error);
            result = swift_unknownObjectRelease();
            v5 = error_code | 0x200000000;
            break;
          case nw_error_domain_dns:
            v9 = nw_error_get_error_code(error);
            result = swift_unknownObjectRelease();
            v5 = v9 | 0x100000000;
            break;
          case nw_error_domain_posix:
            nw_error_get_error_code(error);
            v7 = sub_183B915E4();
            result = swift_unknownObjectRelease();
            v5 = 22;
            if ((v7 & 0x100000000) == 0)
              v5 = v7;
            break;
          default:
            result = swift_unknownObjectRelease();
            v5 = 22;
            break;
        }
      }
      else
      {
        v5 = 50;
      }
      break;
    case 2:
      result = swift_unknownObjectRelease();
      v5 = 0x8000000001;
      break;
    case 3:
      result = (uint64_t)sub_1830840B4(error, (uint64_t)&v10);
      v5 = 0x4000000016;
      if (v11 != 255)
        v5 = v10 | ((unint64_t)v11 << 32) | 0x4000000000;
      break;
    default:
      result = swift_unknownObjectRelease();
      v5 = 0x8000000002;
      break;
  }
  *(_DWORD *)a3 = v5;
  *(_BYTE *)(a3 + 4) = BYTE4(v5);
  return result;
}

void NWConnectionGroup.state.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 56);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(v3 + 60);
  *(_DWORD *)a1 = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 72));
}

uint64_t (*NWConnectionGroup.stateUpdateHandler.getter())()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 18;
  os_unfair_lock_lock(v1 + 18);
  sub_1832DF6DC(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_182FEDAC0;
}

uint64_t sub_1832DF3BC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_1832576D8;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183257670(v1);
  return NWConnectionGroup.stateUpdateHandler.setter((uint64_t)v4, v3);
}

uint64_t NWConnectionGroup.stateUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  void *v9;
  _QWORD v11[6];

  v5 = *(_QWORD *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 72));
  v6 = *(_QWORD *)(v5 + 24);
  sub_183257670(a1);
  sub_182FEDBA4(v6);
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = a2;
  LODWORD(v6) = *(unsigned __int8 *)(v5 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 72));
  if ((_DWORD)v6 != 1)
    return sub_182FEDBA4(a1);
  v7 = *(NSObject **)(v2 + 24);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v2;
  v8[3] = a1;
  v8[4] = a2;
  v11[4] = sub_1832E1398;
  v11[5] = v8;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_182FED9C4;
  v11[3] = &block_descriptor_16;
  v9 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  sub_183257670(a1);
  swift_release();
  nw_connection_group_set_state_changed_handler(v7, v9);
  sub_182FEDBA4(a1);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

void sub_1832DF598(uint64_t a1, NSObject *a2, uint64_t a3, void (*a4)(int *))
{
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  int v10;

  v7 = *(os_unfair_lock_s **)(a3 + 16);
  v8 = (uint64_t)&v7[4];
  v9 = v7 + 18;
  os_unfair_lock_lock(v7 + 18);
  sub_1832DF630(v8, a1, a2, (uint64_t)&v10);
  os_unfair_lock_unlock(v9);
  if (a4)
    a4(&v10);
}

uint64_t sub_1832DF630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;

  swift_unknownObjectRetain();
  result = sub_1832DF164(a3, a2, (uint64_t)&v11);
  v9 = v11;
  v10 = v11 | ((unint64_t)v12 << 32);
  *(_BYTE *)(a1 + 44) = v12;
  *(_DWORD *)(a1 + 40) = v9;
  if (v10 >= 0x8000000002)
  {
    result = nw_utilities_minos_atleast();
    if ((_DWORD)result)
    {
      sub_182FEDBA4(*(_QWORD *)(a1 + 8));
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      result = sub_182FEDBA4(*(_QWORD *)(a1 + 24));
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  *(_DWORD *)a4 = v10;
  *(_BYTE *)(a4 + 4) = BYTE4(v10);
  return result;
}

uint64_t sub_1832DF6DC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_182FEDAC0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_183257670(v3);
}

uint64_t (*NWConnectionGroup.stateUpdateHandler.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)();
  uint64_t v7;
  __int128 v9;
  uint64_t (*v10[4])();

  a1[2] = (uint64_t (*)())v1;
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 18;
  os_unfair_lock_lock(v3 + 18);
  sub_1832DF6DC(v4, v10);
  os_unfair_lock_unlock(v5);
  v6 = v10[0];
  if (v10[0])
  {
    v9 = *(_OWORD *)v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_1832576D8;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v7;
  return sub_1832DF7F8;
}

uint64_t sub_1832DF7F8(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, NWConnectionGroup.stateUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_1832E1C98, (uint64_t (*)(uint64_t, uint64_t))sub_1832E1C9C);
}

NSObject *NWConnectionGroup.metadata(definition:)(uint64_t a1)
{
  uint64_t v1;
  NSObject *result;
  NSObject *v3;
  _QWORD *v4;

  result = nw_connection_group_copy_protocol_metadata(*(nw_connection_group_t *)(v1 + 24), *(nw_protocol_definition_t *)(a1 + 32));
  if (result)
  {
    v3 = result;
    v4 = sub_1832A39D4((uint64_t)result);
    if (v4)
    {
      return ((uint64_t (*))v4[12])(v3);
    }
    else
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1832DF874()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  type metadata accessor for NWConnectionGroup.Message();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 16) = &__block_literal_global_41718;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  v1 = swift_unknownObjectRetain_n();
  *(_BYTE *)(v0 + 64) = nw_content_context_get_is_final(v1);
  nw_content_context_get_identifier((nw_content_context_t)&__block_literal_global_41718);
  v2 = sub_183B91800();
  v4 = v3;
  result = swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_QWORD *)(v0 + 72) = 0;
  qword_1EDCDE990 = v0;
  return result;
}

uint64_t static NWConnectionGroup.Message.default.getter()
{
  if (qword_1EDCDC5F0 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_1832DF944@<X0>(uint64_t a1@<X8>)
{
  return sub_1832DF95C((uint64_t (*)(uint64_t, uint64_t))nw_connection_group_copy_remote_endpoint_for_message, a1);
}

uint64_t sub_1832DF950@<X0>(uint64_t a1@<X8>)
{
  return sub_1832DF95C((uint64_t (*)(uint64_t, uint64_t))nw_connection_group_copy_local_endpoint_for_message, a1);
}

uint64_t sub_1832DF95C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v10;

  v4 = *(_QWORD *)(v2 + 72);
  if (v4)
  {
    v6 = *(_QWORD *)(v4 + 24);
    v7 = *(_QWORD *)(v2 + 16);
    swift_retain();
    v8 = a1(v6, v7);
    sub_183056F9C(v8, a2);
    return swift_release();
  }
  else
  {
    v10 = type metadata accessor for NWEndpoint();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a2, 1, 1, v10);
  }
}

uint64_t sub_1832DF9F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v1 + 72);
  if (!v2)
    return 0;
  v3 = *(NSObject **)(v2 + 24);
  v4 = *(NSObject **)(v1 + 16);
  v5 = *(NSObject **)(a1 + 32);
  swift_retain();
  v6 = nw_connection_group_copy_protocol_metadata_for_message(v3, v4, v5);
  v7 = (uint64_t)v6;
  if (v6)
  {
    v8 = sub_1832A39D4((uint64_t)v6);
    if (v8)
    {
      v7 = ((uint64_t (*)(uint64_t))v8[12])(v7);
      goto LABEL_5;
    }
    swift_release();
    swift_unknownObjectRelease();
    return 0;
  }
LABEL_5:
  swift_release();
  return v7;
}

uint64_t sub_1832DFA94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(v1 + 72);
  if (v3)
  {
    v4 = *(NSObject **)(v3 + 24);
    v5 = *(NSObject **)(v1 + 16);
    swift_retain();
    v6 = nw_connection_group_copy_path_for_message(v4, v5);
    sub_183062C08(v6, a1);
    swift_release();
    v7 = type metadata accessor for NWPath(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a1;
    v10 = 0;
  }
  else
  {
    v7 = type metadata accessor for NWPath(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a1;
    v10 = 1;
  }
  return v8(v9, v10, 1, v7);
}

void sub_1832DFB2C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const char *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;

  v4 = *(_QWORD *)(v3 + 72);
  if (v4)
  {
    swift_retain();
    if (a2 >> 60 == 15)
      v8 = 0;
    else
      v8 = (void *)sub_183B9141C();
    v9 = NWCreateDispatchDataFromNSData(v8, v7);

    v10 = *(NSObject **)(v4 + 24);
    v11 = *(NSObject **)(v3 + 16);
    v12 = *(NSObject **)(a3 + 16);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if (v9)
    {
      v13 = v9;
      nw_connection_group_reply(v10, v11, v12, v13);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

    }
    else
    {
      nw_connection_group_reply(v10, v11, v12, 0);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    swift_release();
  }
}

NSObject *sub_1832DFC50()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *connection_for_message;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 72);
  if (!v1)
    return 0;
  v2 = *(NSObject **)(v1 + 24);
  v3 = *(NSObject **)(v0 + 16);
  swift_retain();
  connection_for_message = nw_connection_group_extract_connection_for_message(v2, v3);
  if (connection_for_message)
  {
    v5 = swift_retain();
    connection_for_message = sub_183056B70(v5, connection_for_message);
  }
  swift_release();
  return connection_for_message;
}

void NWConnectionGroup.Message.__allocating_init(identifier:expiration:priority:isFinal:antecedent:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, double a7)
{
  *(_QWORD *)(swift_allocObject() + 72) = 0;
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(a1, a2, a3, a4, a5, a6, a7);
}

void NWConnectionGroup.Message.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, double a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 72) = 0;
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t NWConnectionGroup.Message.__allocating_init(nw:)(NSObject *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  v3 = swift_unknownObjectRetain();
  *(_QWORD *)(v2 + 40) = nw_content_context_get_expiration_milliseconds(v3);
  *(double *)(v2 + 48) = nw_content_context_get_relative_priority(a1);
  *(_BYTE *)(v2 + 64) = nw_content_context_get_is_final(a1);
  nw_content_context_get_identifier(a1);
  *(_QWORD *)(v2 + 24) = sub_183B91800();
  *(_QWORD *)(v2 + 32) = v4;
  v5 = nw_content_context_copy_antecedent(a1);
  v6 = sub_1830841B8(v5);
  swift_unknownObjectRelease();
  *(_QWORD *)(v2 + 56) = v6;
  return v2;
}

uint64_t NWConnectionGroup.Message.init(nw:)(NSObject *a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;

  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 16) = a1;
  v3 = swift_unknownObjectRetain();
  *(_QWORD *)(v1 + 40) = nw_content_context_get_expiration_milliseconds(v3);
  *(double *)(v1 + 48) = nw_content_context_get_relative_priority(a1);
  *(_BYTE *)(v1 + 64) = nw_content_context_get_is_final(a1);
  nw_content_context_get_identifier(a1);
  *(_QWORD *)(v1 + 24) = sub_183B91800();
  *(_QWORD *)(v1 + 32) = v4;
  v5 = nw_content_context_copy_antecedent(a1);
  *(_QWORD *)(v1 + 56) = sub_1830841B8(v5);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_1832DFE64()
{
  return swift_release();
}

uint64_t NWConnectionGroup.Message.deinit()
{
  uint64_t v0;

  v0 = NWConnection.ContentContext.deinit();
  swift_release();
  return v0;
}

uint64_t NWConnectionGroup.Message.__deallocating_deinit()
{
  NWConnection.ContentContext.deinit();
  swift_release();
  return swift_deallocClassInstance();
}

void NWConnectionGroup.setReceiveHandler(maximumMessageSize:rejectOversizedMessages:handler:)(unint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint32_t v6;
  NSObject *v9;
  _QWORD *v10;
  void *v11;
  _QWORD v12[6];

  if (a1 > 0xFFFFFFFE)
    v6 = -1;
  else
    v6 = a1;
  if (a3)
  {
    v9 = *(NSObject **)(v4 + 24);
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = v4;
    v10[3] = a3;
    v10[4] = a4;
    v12[4] = sub_1832E13A8;
    v12[5] = v10;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 1107296256;
    v12[2] = sub_1832E00FC;
    v12[3] = &block_descriptor_13_0;
    v11 = _Block_copy(v12);
    sub_183257670(a3);
    sub_183257670(a3);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_connection_group_set_receive_handler(v9, v6, a2 & 1, v11);
    _Block_release(v11);
    swift_unknownObjectRelease();
    sub_182FEDBA4(a3);
  }
  else
  {
    nw_connection_group_set_receive_handler(*(nw_connection_group_t *)(v4 + 24), v6, a2 & 1, 0);
  }
}

uint64_t sub_1832E0014(void *a1, NSObject *a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  type metadata accessor for NWConnectionGroup.Message();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  swift_retain();
  v11 = swift_unknownObjectRetain();
  *(_BYTE *)(v10 + 64) = nw_content_context_get_is_final(v11);
  nw_content_context_get_identifier(a2);
  *(_QWORD *)(v10 + 24) = sub_183B91800();
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 72) = a4;
  v13 = NWCreateNSDataFromDispatchData(a1);
  if (v13)
  {
    v14 = v13;
    v15 = sub_183B91428();
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0xF000000000000000;
  }
  a5(v10, v15, v17, a3 & 1);
  sub_183084848(v15, v17);
  return swift_release();
}

void sub_1832E00FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(void *, uint64_t, uint64_t);
  id v8;

  v7 = *(void (**)(void *, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v8 = a2;
  swift_unknownObjectRetain();
  v7(a2, a3, a4);
  swift_release();
  swift_unknownObjectRelease();

}

uint64_t NWConnectionGroup.send(content:to:message:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  _QWORD aBlock[6];

  v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(NSObject **)(v6 + 24);
  swift_unknownObjectRetain();
  if (a2 >> 60 == 15)
    v17 = 0;
  else
    v17 = (void *)sub_183B9141C();
  v18 = NWCreateDispatchDataFromNSData(v17, v16);

  sub_1832D6A4C(a3, (uint64_t)v14);
  v19 = type metadata accessor for NWEndpoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v14, 1, v19) == 1)
  {
    sub_1830620D4((uint64_t)v14, qword_1ECD84160);
    v20 = 0;
  }
  else
  {
    NWEndpoint.nw.getter();
    v20 = v21;
    sub_183261738((uint64_t)v14);
  }
  v22 = *(NSObject **)(a4 + 16);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = a5;
  *(_QWORD *)(v23 + 24) = a6;
  aBlock[4] = sub_183083EF8;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_183056AB0;
  aBlock[3] = &block_descriptor_19_0;
  v24 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_group_send_message(v15, v18, v20, v22, v24);
  _Block_release(v24);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t (*NWConnectionGroup.newConnectionHandler.getter())(uint64_t a1)
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 18;
  os_unfair_lock_lock(v1 + 18);
  sub_1832E06D0(v2, &v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_1832758B4;
}

double sub_1832E0400@<D0>(uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, os_unfair_lock_s *)@<X3>, _OWORD *a3@<X8>)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  double result;
  __int128 v9;

  v5 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v6 = v5 + 4;
  v7 = v5 + 18;
  os_unfair_lock_lock(v5 + 18);
  a2(&v9, v6);
  os_unfair_lock_unlock(v7);
  result = *(double *)&v9;
  *a3 = v9;
  return result;
}

void sub_1832E0474(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_1832E1CEC;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183257670(v1);
  NWConnectionGroup.newConnectionHandler.setter((uint64_t)v4, v3);
}

void NWConnectionGroup.newConnectionHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  void *v9;
  _QWORD v10[6];

  v5 = *(_QWORD *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 72));
  v6 = *(_QWORD *)(v5 + 40);
  sub_183257670(a1);
  sub_182FEDBA4(v6);
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 72));
  if (a1)
  {
    v7 = *(NSObject **)(v2 + 24);
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = v2;
    v8[3] = a1;
    v8[4] = a2;
    v10[4] = sub_1832E13B8;
    v10[5] = v8;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = sub_182FC77FC;
    v10[3] = &block_descriptor_28;
    v9 = _Block_copy(v10);
    sub_183257670(a1);
    sub_183257670(a1);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_connection_group_set_new_connection_handler(v7, v9);
    sub_182FEDBA4(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_182FEDBA4(a1);
  }
  else
  {
    nw_connection_group_set_new_connection_handler(*(nw_connection_group_t *)(v2 + 24), 0);
  }
}

void sub_1832E0660(NSObject *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_unknownObjectRetain();
  if (sub_183056B70(v5, a1))
  {
    a3();
    swift_release();
  }
  else
  {
    nw_connection_cancel(a1);
  }
}

uint64_t sub_1832E06D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_18327BC84;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return sub_183257670(v3);
}

uint64_t (*NWConnectionGroup.newConnectionHandler.modify(uint64_t (**a1)(uint64_t)))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  __int128 v9;
  __int128 v10;

  a1[2] = (uint64_t (*)(uint64_t))v1;
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 18;
  os_unfair_lock_lock(v3 + 18);
  sub_1832E06D0(v4, &v10);
  os_unfair_lock_unlock(v5);
  v6 = (uint64_t (*)(uint64_t))v10;
  if ((_QWORD)v10)
  {
    v9 = v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_1832E1CEC;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))v7;
  return sub_1832E07EC;
}

uint64_t sub_1832E07EC(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))NWConnectionGroup.newConnectionHandler.setter, (void (*)(uint64_t, uint64_t))sub_183257670, (uint64_t (*)(uint64_t, uint64_t))sub_182FEDBA4);
}

uint64_t NWConnectionGroup.extract(connectionTo:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *connection;
  uint64_t v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(NSObject **)(v2 + 24);
  sub_1832D6A4C(a1, (uint64_t)v7);
  v9 = type metadata accessor for NWEndpoint();
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9);
  swift_unknownObjectRetain();
  if (v10 == 1)
  {
    sub_1830620D4((uint64_t)v7, qword_1ECD84160);
    v11 = 0;
    if (a2)
    {
LABEL_3:
      v12 = *(NSObject **)(a2 + 16);
      swift_unknownObjectRetain();
      goto LABEL_6;
    }
  }
  else
  {
    NWEndpoint.nw.getter();
    v11 = v13;
    sub_183261738((uint64_t)v7);
    if (a2)
      goto LABEL_3;
  }
  v12 = 0;
LABEL_6:
  connection = nw_connection_group_extract_connection(v8, v11, v12);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (connection)
    return _s7Network12NWConnectionCyACSgSo16OS_nw_connection_pcfC_0(connection);
  else
    return 0;
}

BOOL NWConnectionGroup.reinsert(connection:)(uint64_t a1)
{
  uint64_t v1;

  return nw_connection_group_reinsert_extracted_connection(*(nw_connection_group_t *)(v1 + 24), *(nw_connection_t *)(a1 + 16));
}

uint64_t NWConnectionGroup.descriptor.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NWConnectionGroup.parameters.getter()
{
  return swift_retain();
}

uint64_t NWConnectionGroup.__allocating_init(with:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  swift_allocObject();
  v6 = sub_1832E13C4(a1, a2, a3);
  swift_unknownObjectRelease();
  swift_release();
  return v6;
}

uint64_t NWConnectionGroup.init(with:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = sub_1832E13C4(a1, a2, a3);
  swift_unknownObjectRelease();
  swift_release();
  return v3;
}

uint64_t sub_1832E0A34(NSObject *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  nw_parameters_t v8;
  uint64_t v9;
  uint64_t v10;
  nw_group_descriptor_t v11;
  int type;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t result;
  _UNKNOWN **v18;
  uint64_t v19;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEA08);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 72) = 0;
  *(_BYTE *)(v7 + 16) = 0;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_BYTE *)(v7 + 60) = 0x80;
  *(_DWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  v2[2] = v7;
  v8 = nw_connection_group_copy_parameters(a1);
  type metadata accessor for NWParameters();
  v9 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v9 + 16) = v10;
  v2[6] = v9;
  v11 = nw_connection_group_copy_descriptor(a1);
  type = nw_group_descriptor_get_type(v11);
  if (type == 1)
  {
    type metadata accessor for NWMulticastGroup(0);
    v13 = swift_allocObject();
    sub_1832DD8AC(v11);
    v18 = &protocol witness table for NWMulticastGroup;
    goto LABEL_8;
  }
  if (type == 3)
  {
    type metadata accessor for NWApplicationServiceGroup(0);
    v13 = swift_allocObject();
    sub_1832DE5AC(v11);
    v18 = &protocol witness table for NWApplicationServiceGroup;
    goto LABEL_8;
  }
  if (type != 2)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_deallocPartialClassInstance();
    return 0;
  }
  type metadata accessor for NWMultiplexGroup(0);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw) = v11;
  v14 = (void *)swift_unknownObjectRetain();
  nw_group_descriptor_copy_member(v14);
  v15 = swift_unknownObjectRetain();
  sub_183056F9C(v15, (uint64_t)v6);
  v16 = type metadata accessor for NWEndpoint();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v6, 1, v16);
  if ((_DWORD)result != 1)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1830589B0((uint64_t)v6, v13 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
    v18 = &protocol witness table for NWMultiplexGroup;
LABEL_8:
    v2[4] = v13;
    v2[5] = v18;
    v2[3] = a1;
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

uint64_t NWConnectionGroup.__allocating_init(_:)(NSObject *a1)
{
  swift_allocObject();
  return sub_1832E0A34(a1);
}

void NWConnectionGroup.start(queue:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t (*v8)();
  NSObject *v9;
  __int128 v10;
  uint64_t (*v11[4])();

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 72));
  v5 = *(void **)(v4 + 64);
  v6 = a1;

  *(_QWORD *)(v4 + 64) = a1;
  *(_BYTE *)(v4 + 16) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 72));
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 72));
  sub_1832DF6DC(v4 + 16, v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 72));
  if (v11[0])
  {
    v10 = *(_OWORD *)v11;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v10;
    v8 = sub_1832576D8;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  sub_183257670((uint64_t)v8);
  sub_183257670((uint64_t)v8);
  NWConnectionGroup.stateUpdateHandler.setter((uint64_t)v8, v7);
  sub_182FEDBA4((uint64_t)v8);
  sub_182FEDBA4((uint64_t)v8);
  v9 = *(NSObject **)(v2 + 24);
  nw_connection_group_set_queue(v9, v6);
  nw_connection_group_start(v9);
}

void *NWConnectionGroup.queue.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (os_unfair_lock_s *)(v1 + 72);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 72));
  v3 = *(void **)(v1 + 64);
  v4 = v3;
  os_unfair_lock_unlock(v2);
  return v3;
}

Swift::Void __swiftcall NWConnectionGroup.cancel()()
{
  uint64_t v0;

  nw_connection_group_cancel(*(nw_connection_group_t *)(v0 + 24));
}

uint64_t NWConnectionGroup.deinit()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t NWConnectionGroup.__deallocating_deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t NWConnection.__allocating_init(message:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  nw_connection_t connection_for_message;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 72);
  if (!v5)
    goto LABEL_7;
  v6 = *(NSObject **)(v5 + 24);
  v7 = *(NSObject **)(a1 + 16);
  swift_retain();
  connection_for_message = nw_connection_group_extract_connection_for_message(v6, v7);
  if (!connection_for_message)
  {
    swift_release();
LABEL_7:
    swift_release();
    return 0;
  }
  v9 = connection_for_message;
  v10 = swift_retain();
  v11 = sub_183056B70(v10, v9);
  swift_release();
  if (!v11)
    goto LABEL_7;
  sub_1832616F4(v11 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint, (uint64_t)v4);
  v12 = *(_QWORD *)(v11 + OBJC_IVAR____TtC7Network13_NWConnection_parameters);
  v13 = *(_QWORD *)(v11 + 16);
  swift_allocObject();
  swift_retain();
  swift_unknownObjectRetain();
  v14 = sub_183058A08((uint64_t)v4, v12, v13);
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return v14;
}

uint64_t NWConnection.__allocating_init(from:to:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *connection;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  nw_parameters_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = type metadata accessor for NWEndpoint();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v36 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v36 - v11;
  MEMORY[0x1E0C80A78](v10);
  v37 = (uint64_t)&v36 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v36 - v18;
  v20 = *(NSObject **)(a1 + 24);
  sub_1832D6A4C(a2, (uint64_t)&v36 - v18);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v7) = v21(v19, 1, v6);
  swift_unknownObjectRetain();
  if ((_DWORD)v7 == 1)
  {
    sub_1830620D4((uint64_t)v19, qword_1ECD84160);
    v22 = 0;
    v38 = a2;
    if (a3)
    {
LABEL_3:
      v23 = *(NSObject **)(a3 + 16);
      swift_unknownObjectRetain();
      goto LABEL_6;
    }
  }
  else
  {
    NWEndpoint.nw.getter();
    v22 = v24;
    sub_183261738((uint64_t)v19);
    v38 = a2;
    if (a3)
      goto LABEL_3;
  }
  v23 = 0;
LABEL_6:
  connection = nw_connection_group_extract_connection(v20, v22, v23);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (connection)
  {
    v26 = nw_connection_copy_endpoint(connection);
    sub_183056F9C(v26, (uint64_t)v17);
    if (!v21(v17, 1, v6))
    {
      sub_1830589B0((uint64_t)v17, (uint64_t)v12);
      v29 = v37;
      sub_1830589B0((uint64_t)v12, v37);
      v30 = nw_connection_copy_parameters(connection);
      v31 = nw_parameters_copy(v30);
      swift_unknownObjectRelease();
      type metadata accessor for NWParameters();
      v32 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
      v33 = swift_allocObject();
      *(_DWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 16) = v31;
      *(_QWORD *)(v32 + 16) = v33;
      v34 = v36;
      sub_1832616F4(v29, v36);
      swift_allocObject();
      v28 = sub_183058A08(v34, v32, (uint64_t)connection);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
      sub_1830620D4(v38, qword_1ECD84160);
      sub_183261738(v29);
      return v28;
    }
    sub_1830620D4((uint64_t)v17, qword_1ECD84160);
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    v27 = v38;
  }
  else
  {
    swift_release();
    swift_release();
    v27 = v38;
  }
  sub_1830620D4(v27, qword_1ECD84160);
  return 0;
}

uint64_t sub_1832E1340()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832E1364()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

void sub_1832E1398(uint64_t a1, NSObject *a2)
{
  uint64_t v2;

  sub_1832DF598(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(int *))(v2 + 24));
}

uint64_t sub_1832E13A8(void *a1, NSObject *a2, char a3)
{
  uint64_t v3;

  return sub_1832E0014(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void (**)(uint64_t, uint64_t, unint64_t, _QWORD))(v3 + 24));
}

void sub_1832E13B8(NSObject *a1)
{
  uint64_t v1;

  sub_1832E0660(a1, *(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_1832E13C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  os_unfair_lock_s *v15;
  nw_connection_group_t v16;
  nw_parameters_t parameters;

  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEA08);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 72) = 0;
  *(_BYTE *)(v8 + 16) = 0;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_BYTE *)(v8 + 60) = 0x80;
  *(_DWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  v4[2] = v8;
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  type metadata accessor for NWMultiplexGroup(0);
  v9 = swift_dynamicCastClass();
  if (v9)
  {
    v10 = *(NSObject **)(v9 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw);
    if (v10)
      goto LABEL_8;
    __break(1u);
  }
  type metadata accessor for NWApplicationServiceGroup(v9);
  v11 = swift_dynamicCastClass();
  if (!v11)
    goto LABEL_7;
  v10 = *(NSObject **)(v11 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup__nw);
  if (v10)
  {
LABEL_8:
    v13 = *(_QWORD *)(a3 + 16);
    v14 = (_QWORD *)(v13 + 16);
    v15 = (os_unfair_lock_s *)(v13 + 24);
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v15);
    sub_183226978(v14, &parameters);
    os_unfair_lock_unlock(v15);
    v16 = nw_connection_group_create(v10, parameters);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v4[3] = v16;
    sub_183257670(0);
    NWConnectionGroup.stateUpdateHandler.setter(0, 0);
    return (uint64_t)v4;
  }
  __break(1u);
LABEL_7:
  type metadata accessor for NWMulticastGroup(v11);
  result = swift_dynamicCastClassUnconditional();
  v10 = *(NSObject **)(result + OBJC_IVAR____TtC7Network16NWMulticastGroup__nw);
  if (v10)
    goto LABEL_8;
  __break(1u);
  return result;
}

double sub_1832E156C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1832E0400(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_1832DF6DC, a2);
}

double sub_1832E158C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1832E0400(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_1832E06D0, a2);
}

uint64_t dispatch thunk of NWGroupDescriptor.members.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1832E15B4()
{
  return type metadata accessor for NWMulticastGroup(0);
}

void sub_1832E15BC()
{
  unint64_t v0;

  sub_18328FD9C();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for NWMulticastGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWMulticastGroup.members.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of NWMulticastGroup.__allocating_init(for:from:disableUnicast:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of NWMulticastGroup.nw.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t sub_1832E1688()
{
  return type metadata accessor for NWMultiplexGroup(0);
}

uint64_t sub_1832E1690()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for NWMultiplexGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWMultiplexGroup.members.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of NWMultiplexGroup.__allocating_init(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWMultiplexGroup.nw.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t sub_1832E1730()
{
  return type metadata accessor for NWApplicationServiceGroup(0);
}

uint64_t type metadata accessor for NWApplicationServiceGroup(uint64_t a1)
{
  return sub_183058E90(a1, qword_1EDCDB488);
}

uint64_t sub_1832E174C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_183B914AC();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for NWApplicationServiceGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWApplicationServiceGroup.__allocating_init(for:id:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for NWConnectionGroup()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWConnectionGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWConnectionGroup.__allocating_init(with:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

ValueMetadata *type metadata accessor for NWConnectionGroup.State()
{
  return &type metadata for NWConnectionGroup.State;
}

uint64_t type metadata accessor for NWConnectionGroup.Message()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWConnectionGroup.Message()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.remoteEndpoint.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.localEndpoint.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.metadata(definition:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.path.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.reply(content:message:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.extractConnection()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

void destroy for NWConnectionGroup.LockedState(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    swift_release();
  if (*(_QWORD *)(a1 + 24))
    swift_release();

}

uint64_t initializeWithCopy for NWConnectionGroup.LockedState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  v8 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = v8;
  return a1;
}

uint64_t assignWithCopy for NWConnectionGroup.LockedState(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  void *v14;
  id v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *v4 = *v6;
LABEL_8:
  v9 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v9)
    {
      v11 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v11;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_15;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  swift_retain();
  swift_release();
LABEL_15:
  v12 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v12;
  v13 = *(void **)(a1 + 48);
  v14 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  v15 = v14;

  return a1;
}

uint64_t assignWithTake for NWConnectionGroup.LockedState(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *v4 = *v6;
LABEL_8:
  v9 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v9)
    {
      v11 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v11;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_15;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  swift_release();
LABEL_15:
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  v12 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnectionGroup.LockedState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnectionGroup.LockedState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWConnectionGroup.LockedState()
{
  return &type metadata for NWConnectionGroup.LockedState;
}

uint64_t sub_1832E1C44()
{
  return swift_deallocObject();
}

uint64_t sub_1832E1C54(uint64_t a1)
{
  uint64_t v1;

  return sub_1832DE7C0(a1, *(unint64_t **)(v1 + 16));
}

uint64_t sub_1832E1C5C()
{
  return swift_deallocObject();
}

uint64_t sub_1832E1C6C()
{
  return swift_deallocObject();
}

uint64_t sub_1832E1C7C()
{
  return sub_1832DDA6C();
}

uint64_t sub_1832E1C84()
{
  return swift_deallocObject();
}

void static BonjourMetadataProviders.None.none.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t BonjourMetadataProviders.None.shouldFetchMetadata.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t BonjourMetadataProviders.None.makeMetadata(from:)()
{
  return 0;
}

uint64_t sub_1832E1D08()
{
  unsigned __int8 *v0;

  return *v0;
}

void static BonjourMetadataProviders.Default.default.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t BonjourMetadataProviders.Default.shouldFetchMetadata.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t BonjourMetadataProviders.Default.makeMetadata(from:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8[2];

  v3 = *a1;
  v4 = *a1;
  v5 = a1[1];
  if (!*a1)
  {
    v6 = sub_1832F2650(MEMORY[0x1E0DEE9D8]);
    NWTXTRecord.init(_:)(v6, v8);
    v4 = v8[0];
    v5 = v8[1];
  }
  *a2 = v4;
  a2[1] = v5;
  return sub_1832506C0(v3);
}

uint64_t sub_1832E1D84@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8[2];

  v3 = *a1;
  v4 = *a1;
  v5 = a1[1];
  if (!*a1)
  {
    v6 = sub_1832F2650(MEMORY[0x1E0DEE9D8]);
    NWTXTRecord.init(_:)(v6, v8);
    v4 = v8[0];
    v5 = v8[1];
  }
  *a2 = v4;
  a2[1] = v5;
  return sub_1832506C0(v3);
}

uint64_t BonjourMetadataProviders.DecodeResult.shouldFetchMetadata.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t BonjourMetadataProviders.DecodeResult.makeMetadata(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *a1;
  if (*a1)
  {
    MEMORY[0x1E0C80A78](a1);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
    sub_1832E1FA0((void (*)(_BYTE *))sub_1832E1F58, a2);
    sub_183253844(v3);
    v4 = sub_183B922BC();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 0, 1, v4);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
    v6 = sub_183B922BC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 1, 1, v6);
  }
}

uint64_t sub_1832E1F58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 16);
  v6 = *(_OWORD *)(v1 + 40);
  result = TXTRecordDecoder.decode<A>(_:from:)(v4, (uint64_t *)&v6);
  if (v2)
    *a1 = v2;
  return result;
}

uint64_t sub_1832E1FA0@<X0>(void (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];

  MEMORY[0x1E0C80A78](a1);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_183B922BC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(a2, v9, v6);
}

void static BonjourMetadataProviders.Decode.decode(_:decoder:)(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t BonjourMetadataProviders.Decode.shouldFetchMetadata.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t BonjourMetadataProviders.Decode.makeMetadata(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  if (!*a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 56))(a3, 1, 1, *(_QWORD *)(a2 + 16));
  v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  v5 = *(_QWORD *)(a2 + 16);
  TXTRecordDecoder.decode<A>(_:from:)(v5, v7);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a3, 0, 1, v5);
}

uint64_t sub_1832E2184@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return BonjourMetadataProviders.Decode.makeMetadata(from:)(a1, a2, a3);
}

uint64_t BonjourEndpoint.id.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  sub_183B917F4();
  swift_bridgeObjectRetain();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  sub_183B917F4();
  swift_bridgeObjectRetain();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t BonjourEndpoint.nw.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NWBrowser.Result(0);
  return sub_183058C44(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
}

uint64_t BonjourEndpoint.description.getter()
{
  sub_183B91DB8();
  sub_183B917F4();
  swift_bridgeObjectRetain();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  sub_183B917F4();
  swift_bridgeObjectRetain();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  sub_183B917F4();
  swift_bridgeObjectRetain();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  sub_183B917F4();
  sub_183B920DC();
  return 0;
}

uint64_t sub_1832E23F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t result;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;

  sub_183058EC4(a1, a9, type metadata accessor for NWBrowser.Result);
  v20 = (int *)type metadata accessor for BonjourEndpoint(0, a10, v18, v19);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 32))(a9 + v20[7], a2, a10);
  v22 = (_QWORD *)(a9 + v20[8]);
  *v22 = a3;
  v22[1] = a4;
  v23 = (_QWORD *)(a9 + v20[9]);
  *v23 = a5;
  v23[1] = a6;
  v24 = (_QWORD *)(a9 + v20[10]);
  *v24 = a7;
  v24[1] = a8;
  return result;
}

uint64_t sub_1832E24AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = BonjourEndpoint.id.getter(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t BrowseDescriptorFactories.Bonjour.makeDescriptor()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;

  v3 = v2;
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 24))(*(_QWORD *)(a1 + 16));
  v7 = *v3;
  v6 = v3[1];
  v9 = v3[2];
  v8 = v3[3];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  if ((v5 & 1) != 0)
    v11 = 32;
  else
    v11 = 0;
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 32) = v11;
  return result;
}

uint64_t BrowseDescriptorFactories.Bonjour.makeEndpoint(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;

  v66 = a3;
  v69 = a1;
  v4 = type metadata accessor for NWBrowser.Result(0);
  MEMORY[0x1E0C80A78](v4);
  v58 = (uint64_t)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v64 = a2;
  v61 = v7;
  v62 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v59 = sub_183B91CF8();
  v9 = *(_QWORD *)(v59 - 8);
  v10 = MEMORY[0x1E0C80A78](v59);
  v65 = (char *)&v52 - v11;
  v67 = AssociatedTypeWitness;
  v60 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v52 - v15;
  v17 = type metadata accessor for NWEndpoint();
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (uint64_t *)((char *)&v52 - v22);
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v52 - v24;
  v63 = v4;
  sub_183058C44(v69 + *(int *)(v4 + 20), (uint64_t)&v52 - v24, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  sub_183058C44((uint64_t)v25, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v26 = v16;
    v54 = *v23;
    v55 = v14;
    v28 = v23[1];
    v27 = v23[2];
    v29 = v23[3];
    v52 = v23[4];
    v53 = v27;
    v30 = v23[6];
    v56 = v23[5];
    v57 = v29;
    sub_183058B1C(v30);
    v31 = v69;
    v68 = *(_OWORD *)(v69 + *(int *)(v63 + 28));
    v32 = v65;
    (*(void (**)(__int128 *, uint64_t))(v62 + 16))(&v68, v61);
    v33 = (uint64_t)v25;
    v34 = v28;
    sub_183261738(v33);
    v35 = v60;
    v36 = v67;
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48))(v32, 1, v67);
    v38 = v66;
    if (v37 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v32, v59);
      v41 = type metadata accessor for BonjourEndpoint(0, v36, v39, v40);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v38, 1, 1, v41);
    }
    else
    {
      v44 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v45 = v26;
      v44(v26, v32, v36);
      v46 = v31;
      v47 = v58;
      sub_183058C44(v46, v58, type metadata accessor for NWBrowser.Result);
      v48 = (uint64_t)v55;
      v44(v55, v45, v36);
      sub_1832E23F0(v47, v48, v54, v34, v53, v57, v52, v56, v38, v36);
      v51 = type metadata accessor for BonjourEndpoint(0, v36, v49, v50);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v38, 0, 1, v51);
    }
  }
  else
  {
    sub_183058C44((uint64_t)v25, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    type metadata accessor for UnexpectedEndpointType();
    sub_1832E2924();
    swift_allocError();
    sub_183058EC4((uint64_t)v20, v43, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    swift_willThrow();
    sub_183261738((uint64_t)v25);
    return sub_183261738((uint64_t)v23);
  }
}

unint64_t sub_1832E2924()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDCDEA18[0];
  if (!qword_1EDCDEA18[0])
  {
    v1 = type metadata accessor for UnexpectedEndpointType();
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for UnexpectedEndpointType, v1);
    atomic_store(result, qword_1EDCDEA18);
  }
  return result;
}

uint64_t type metadata accessor for BonjourEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BonjourEndpoint);
}

uint64_t BrowseDescriptorFactories.Bonjour.browseParameters.getter()
{
  uint64_t v0;
  nw_parameters_t v1;
  uint64_t v2;

  type metadata accessor for NWParameters();
  v0 = swift_allocObject();
  v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

uint64_t sub_1832E29DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return BrowseDescriptorFactories.Bonjour.makeEndpoint(from:)(a1, a2, a3);
}

uint64_t sub_1832E29F0()
{
  uint64_t v0;
  nw_parameters_t v1;
  uint64_t v2;

  type metadata accessor for NWParameters();
  v0 = swift_allocObject();
  v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

uint64_t static BrowseDescriptorFactories.Bonjour.bonjour(_:domain:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_BYTE *)(a5 + 32) = 1;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _s7Network25BrowseDescriptorFactoriesO7BonjourV7bonjour_6domain8metadataQrSS_SSSgxtFZ_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, char *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v18);
  *(_QWORD *)a7 = a1;
  *((_QWORD *)a7 + 1) = a2;
  *((_QWORD *)a7 + 2) = a3;
  *((_QWORD *)a7 + 3) = a4;
  v20 = type metadata accessor for BrowseDescriptorFactories.Bonjour(0, a5, a6, v19);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&a7[*(int *)(v20 + 40)], v16, a5);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _s7Network8Browser1C3for5usingACyAA25BrowseDescriptorFactoriesO7BonjourVy_AA0H17MetadataProvidersO4NoneVGGAN_AA12NWParametersCSgtcANRszrlufC_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  nw_parameters_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v6 = *((_BYTE *)a1 + 32);
  if (a2)
  {
    v7 = a2;
  }
  else
  {
    type metadata accessor for NWParameters();
    v7 = swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = nw_parameters_create();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
    v9 = swift_allocObject();
    *(_DWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 16) = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 16) = v9;
  }
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v2;
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 40) = v4;
  *(_BYTE *)(result + 48) = v6;
  *(_QWORD *)(result + 56) = v7;
  return result;
}

uint64_t _s7Network8Browser1C3for5usingACyAA25BrowseDescriptorFactoriesO7BonjourVy_AA0H17MetadataProvidersO12DecodeResultVy_qd__GGGAO_AA12NWParametersCSgtcAORszSeRd__s8SendableRd__lufC_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  nw_parameters_t v5;
  uint64_t v6;
  _QWORD v8[2];
  __int128 v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 32);
  v8[0] = *(_QWORD *)a1;
  v8[1] = v2;
  v9 = *(_OWORD *)(a1 + 16);
  v10 = v3;
  if (a2)
  {
    v4 = a2;
  }
  else
  {
    type metadata accessor for NWParameters();
    v4 = swift_allocObject();
    v5 = nw_parameters_create();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
    v6 = swift_allocObject();
    *(_DWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(v4 + 16) = v6;
  }
  return Browser1.__allocating_init(provider:using:)((uint64_t)v8, v4);
}

uint64_t sub_1832E2CF0()
{
  return MEMORY[0x1E0DEA978];
}

uint64_t dispatch thunk of BonjourMetadataProvider.makeMetadata(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of BonjourMetadataProvider.shouldFetchMetadata.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for BonjourMetadataProviders()
{
  return &type metadata for BonjourMetadataProviders;
}

ValueMetadata *type metadata accessor for BonjourMetadataProviders.None()
{
  return &type metadata for BonjourMetadataProviders.None;
}

ValueMetadata *type metadata accessor for BonjourMetadataProviders.Default()
{
  return &type metadata for BonjourMetadataProviders.Default;
}

uint64_t sub_1832E2D44()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for BonjourMetadataProviders.DecodeResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BonjourMetadataProviders.DecodeResult);
}

uint64_t _s7Network24BonjourMetadataProvidersO4NoneVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7Network24BonjourMetadataProvidersO4NoneVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1832E2E44 + 4 * byte_183BA5065[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1832E2E78 + 4 * asc_183BA5060[v4]))();
}

uint64_t sub_1832E2E78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832E2E80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832E2E88);
  return result;
}

uint64_t sub_1832E2E94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1832E2E9CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1832E2EA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832E2EA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for BonjourMetadataProviders.Decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BonjourMetadataProviders.Decode);
}

uint64_t sub_1832E2EC0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for NWBrowser.Result(319);
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1832E2F54(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *result;
  char v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v6 = sub_183B913A4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8 & 0xF8 | 7;
  if (*(_QWORD *)(v7 + 64) <= 0x38uLL)
    v11 = 56;
  else
    v11 = *(_QWORD *)(v7 + 64);
  v12 = v11 + 8;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v10 = ((v8 & 0xF8) + 15) & ~v9;
  v16 = *(_QWORD *)(v14 + 64) + 7;
  v17 = (*(_DWORD *)(v14 + 80) | v8) & 0x100000;
  v18 = *a2;
  *a1 = *a2;
  if ((v15 | v9) != 7
    || v17 != 0
    || ((((((v16 + ((((((v11 + 8 + v10) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v15 + 16) & ~v15)) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    a1 = (_QWORD *)(v18 + (((v15 | v9) + 16) & ~(v15 | v9)));
    swift_retain();
  }
  else
  {
    v47 = ((((v11 + 8 + v10) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v15 + 16;
    v48 = v16;
    v49 = v13;
    v50 = a2;
    v21 = ~v9;
    v22 = (char *)a1 + v9;
    v23 = (char *)a2 + v9;
    v24 = (unint64_t)(v22 + 8) & v21;
    v25 = (unint64_t)(v23 + 8) & v21;
    v26 = *(unsigned __int8 *)(v25 + v11);
    swift_unknownObjectRetain();
    switch(v26)
    {
      case 0:
        v28 = ~v15;
        v30 = *(_QWORD *)v25;
        v29 = *(_QWORD *)(v25 + 8);
        v31 = *(_QWORD *)(v25 + 16);
        v46 = *(_BYTE *)(v25 + 24);
        sub_183058E2C(*(_QWORD *)v25, v29, v31, v46);
        *(_QWORD *)v24 = v30;
        *(_QWORD *)(v24 + 8) = v29;
        *(_QWORD *)(v24 + 16) = v31;
        *(_BYTE *)(v24 + 24) = v46;
        *(_WORD *)(v24 + 26) = *(_WORD *)(v25 + 26);
        *(_BYTE *)(v24 + v11) = 0;
        break;
      case 1:
        v28 = ~v15;
        *(_QWORD *)v24 = *(_QWORD *)v25;
        *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
        *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
        *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
        *(_QWORD *)(v24 + 32) = *(_QWORD *)(v25 + 32);
        *(_QWORD *)(v24 + 40) = *(_QWORD *)(v25 + 40);
        v33 = *(_QWORD *)(v25 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v33 != 1)
          swift_unknownObjectRetain();
        *(_QWORD *)(v24 + 48) = v33;
        v32 = 1;
        goto LABEL_25;
      case 2:
        v28 = ~v15;
        *(_QWORD *)v24 = *(_QWORD *)v25;
        *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
        *(_BYTE *)(v24 + v11) = 2;
        swift_bridgeObjectRetain();
        break;
      case 3:
        v28 = ~v15;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v24, v25, v6);
        v32 = 3;
LABEL_25:
        *(_BYTE *)(v24 + v11) = v32;
        break;
      case 4:
        v28 = ~v15;
        *(_QWORD *)v24 = *(_QWORD *)v25;
        *(_BYTE *)(v24 + v11) = 4;
        swift_unknownObjectRetain();
        break;
      default:
        if (v11 <= 3)
          v27 = v11;
        else
          v27 = 4;
        __asm { BR              X11 }
        return result;
    }
    v34 = (_QWORD *)((v12 + v25) & 0xFFFFFFFFFFFFFFF8);
    v35 = (_QWORD *)((v12 + v24) & 0xFFFFFFFFFFFFF8);
    *v35 = *v34;
    v36 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
    v37 = (unint64_t *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    v38 = *v37;
    swift_bridgeObjectRetain();
    if (v38 < 0xFFFFFFFF)
    {
      *(_OWORD *)v36 = *(_OWORD *)v37;
    }
    else
    {
      *(_QWORD *)v36 = v38;
      *(_QWORD *)(v36 + 8) = v37[1];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))(((unint64_t)a1 + v47) & v28, ((unint64_t)v50 + v47) & v28, v49);
    v39 = (_QWORD *)((v48 + (((unint64_t)a1 + v47) & v28)) & 0xFFFFFFFFFFFFFFF8);
    v40 = (_QWORD *)((v48 + (((unint64_t)v50 + v47) & v28)) & 0xFFFFFFFFFFFFFFF8);
    *v39 = *v40;
    v39[1] = v40[1];
    v41 = (_QWORD *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
    v42 = (_QWORD *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v41 = *v42;
    v41[1] = v42[1];
    v43 = (_QWORD *)(((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFFFF8);
    v44 = (_QWORD *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v43 = *v44;
    v43[1] = v44[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1832E3324(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  swift_unknownObjectRelease();
  v4 = sub_183B913A4();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v7 = v6 + 15;
  v8 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  v9 = (v6 + 15 + a1) & v8;
  if (*(_QWORD *)(v5 + 64) <= 0x38uLL)
    v10 = 56;
  else
    v10 = *(_QWORD *)(v5 + 64);
  switch(*(_BYTE *)(v9 + v10))
  {
    case 0:
      sub_183058BF0(*(_QWORD *)((v6 + 15 + a1) & v8), *(_QWORD *)(((v6 + 15 + a1) & v8) + 8), *(_QWORD *)(((v6 + 15 + a1) & v8) + 0x10), *(_BYTE *)(((v6 + 15 + a1) & v8) + 0x18));
      goto LABEL_15;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v9 + 48) == 1)
        goto LABEL_15;
      goto LABEL_14;
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_15;
    case 3:
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
      goto LABEL_15;
    case 4:
LABEL_14:
      swift_unknownObjectRelease();
LABEL_15:
      v12 = v10 + 8;
      swift_bridgeObjectRelease();
      if (*(_QWORD *)((((v12 + v9) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1
                                                                                                + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                                + ((((v12 + (v7 & v8)) & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    default:
      if (v10 <= 3)
        v11 = v10;
      else
        v11 = 4;
      __asm { BR              X13 }
      return result;
  }
}

_QWORD *sub_1832E3528(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *result;
  _QWORD *v40;

  *a1 = *a2;
  v5 = sub_183B913A4();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  v8 = v7 + 15;
  v9 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)a1 + v7 + 15) & v9;
  v40 = a2;
  v11 = ((unint64_t)a2 + v7 + 15) & v9;
  if (*(_QWORD *)(v6 + 64) <= 0x38uLL)
    v12 = 56;
  else
    v12 = *(_QWORD *)(v6 + 64);
  v13 = *(unsigned __int8 *)(v11 + v12);
  swift_unknownObjectRetain();
  switch(v13)
  {
    case 0:
      v15 = *(_QWORD *)v11;
      v16 = *(_QWORD *)(v11 + 8);
      v17 = *(_QWORD *)(v11 + 16);
      v18 = *(_BYTE *)(v11 + 24);
      sub_183058E2C(*(_QWORD *)v11, v16, v17, v18);
      *(_QWORD *)v10 = v15;
      *(_QWORD *)(v10 + 8) = v16;
      *(_QWORD *)(v10 + 16) = v17;
      *(_BYTE *)(v10 + 24) = v18;
      *(_WORD *)(v10 + 26) = *(_WORD *)(v11 + 26);
      *(_BYTE *)(v10 + v12) = 0;
      break;
    case 1:
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
      *(_QWORD *)(v10 + 40) = *(_QWORD *)(v11 + 40);
      v19 = *(_QWORD *)(v11 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v19 != 1)
        swift_unknownObjectRetain();
      *(_QWORD *)(v10 + 48) = v19;
      *(_BYTE *)(v10 + v12) = 1;
      break;
    case 2:
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
      *(_BYTE *)(v10 + v12) = 2;
      swift_bridgeObjectRetain();
      break;
    case 3:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v11, v5);
      *(_BYTE *)(v10 + v12) = 3;
      break;
    case 4:
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_BYTE *)(v10 + v12) = 4;
      swift_unknownObjectRetain();
      break;
    default:
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X11 }
      return result;
  }
  v20 = v12 + 8;
  v21 = (_QWORD *)((v20 + v11) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)((v20 + v10) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v21;
  v23 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = (unint64_t *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = *v24;
  swift_bridgeObjectRetain();
  if (v25 < 0xFFFFFFFF)
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  else
  {
    *(_QWORD *)v23 = v25;
    *(_QWORD *)(v23 + 8) = v24[1];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  v26 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = ((((v20 + (v8 & v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v27 + 16;
  v29 = ((unint64_t)a1 + v28) & ~v27;
  v30 = ((unint64_t)v40 + v28) & ~v27;
  (*(void (**)(unint64_t, unint64_t))(v26 + 16))(v29, v30);
  v31 = *(_QWORD *)(v26 + 64) + 7;
  v32 = (_QWORD *)((v31 + v29) & 0xFFFFFFFFFFFFFFF8);
  v33 = (_QWORD *)((v31 + v30) & 0xFFFFFFFFFFFFFFF8);
  *v32 = *v33;
  v32[1] = v33[1];
  v34 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v34 = *v35;
  v34[1] = v35[1];
  v36 = (_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  v37 = (_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1832E3880(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *result;
  _QWORD *v42;
  uint64_t v43;

  v4 = a2;
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v6 = sub_183B913A4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v9 = v8 + 15;
  v10 = ~v8 & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)a1 + v8 + 15) & v10;
  v12 = ((unint64_t)v4 + v8 + 15) & v10;
  if (*(_QWORD *)(v7 + 64) <= 0x38uLL)
    v13 = 56;
  else
    v13 = *(_QWORD *)(v7 + 64);
  if (v11 != v12)
  {
    v14 = v6;
    switch(*(_BYTE *)(v11 + v13))
    {
      case 0:
        sub_183058BF0(*(_QWORD *)(((unint64_t)a1 + v8 + 15) & v10), *(_QWORD *)((((unint64_t)a1 + v8 + 15) & v10) + 8), *(_QWORD *)((((unint64_t)a1 + v8 + 15) & v10) + 0x10), *(_BYTE *)((((unint64_t)a1 + v8 + 15) & v10) + 0x18));
        goto LABEL_21;
      case 1:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v11 + 48) != 1)
          goto LABEL_15;
        goto LABEL_21;
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      case 3:
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
        goto LABEL_21;
      case 4:
LABEL_15:
        swift_unknownObjectRelease();
LABEL_21:
        switch(*(_BYTE *)(v12 + v13))
        {
          case 0:
            v17 = *(_QWORD *)v12;
            v18 = *(_QWORD *)(v12 + 8);
            v42 = v4;
            v43 = a3;
            v19 = *(_QWORD *)(v12 + 16);
            v20 = *(_BYTE *)(v12 + 24);
            sub_183058E2C(*(_QWORD *)v12, v18, v19, v20);
            *(_QWORD *)v11 = v17;
            *(_QWORD *)(v11 + 8) = v18;
            *(_QWORD *)(v11 + 16) = v19;
            *(_BYTE *)(v11 + 24) = v20;
            v4 = v42;
            a3 = v43;
            *(_WORD *)(v11 + 26) = *(_WORD *)(v12 + 26);
            *(_BYTE *)(v11 + v13) = 0;
            break;
          case 1:
            *(_QWORD *)v11 = *(_QWORD *)v12;
            *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
            *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
            *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
            *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
            *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
            v21 = *(_QWORD *)(v12 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v21 != 1)
              swift_unknownObjectRetain();
            *(_QWORD *)(v11 + 48) = v21;
            *(_BYTE *)(v11 + v13) = 1;
            break;
          case 2:
            *(_QWORD *)v11 = *(_QWORD *)v12;
            *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
            *(_BYTE *)(v11 + v13) = 2;
            swift_bridgeObjectRetain();
            break;
          case 3:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v11, v12, v14);
            *(_BYTE *)(v11 + v13) = 3;
            break;
          case 4:
            *(_QWORD *)v11 = *(_QWORD *)v12;
            *(_BYTE *)(v11 + v13) = 4;
            swift_unknownObjectRetain();
            break;
          default:
            if (v13 <= 3)
              v16 = v13;
            else
              v16 = 4;
            __asm { BR              X12 }
            return result;
        }
        return result;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  v22 = v13 + 1;
  v23 = (_QWORD *)(((v11 | 7) + v22) & 0xFFFFFFFFFFFFFFF8);
  v24 = (v12 | 7) + v22;
  v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v23 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  v27 = (unint64_t *)(v25 & 0xFFFFFFFFFFFFFFF8);
  v28 = *v27;
  if (*v26 < 0xFFFFFFFFuLL)
  {
    if (v28 >= 0xFFFFFFFF)
    {
      *v26 = v28;
      v26[1] = v27[1];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_36;
    }
LABEL_35:
    *(_OWORD *)v26 = *(_OWORD *)v27;
    goto LABEL_36;
  }
  if (v28 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_35;
  }
  *v26 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26[1] = v27[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
LABEL_36:
  v29 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = (((((v9 & v10 | 7) + v22) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v30 + 16;
  v32 = ((unint64_t)a1 + v31) & ~v30;
  v33 = ((unint64_t)v4 + v31) & ~v30;
  (*(void (**)(unint64_t, unint64_t))(v29 + 24))(v32, v33);
  v34 = *(_QWORD *)(v29 + 64) + 7;
  v35 = (_QWORD *)((v34 + v32) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_QWORD *)((v34 + v33) & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = (_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_QWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39 = (_QWORD *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
  v40 = (_QWORD *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_1832E3D64(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  _OWORD *v30;
  _OWORD *v31;
  _QWORD *result;

  *a1 = *a2;
  v6 = sub_183B913A4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v9 = v8 + 15;
  v10 = ~v8 & 0xFFFFFFFFFFFFFFF8;
  v11 = (_OWORD *)(((unint64_t)a1 + v8 + 15) & v10);
  v12 = (_OWORD *)(((unint64_t)a2 + v8 + 15) & v10);
  if (*(_QWORD *)(v7 + 64) <= 0x38uLL)
    v13 = 56;
  else
    v13 = *(_QWORD *)(v7 + 64);
  switch(*((_BYTE *)v12 + v13))
  {
    case 0:
      v15 = 0;
      v16 = *v12;
      *(_OWORD *)((((unint64_t)a1 + v8 + 15) & v10) + 0xC) = *(_OWORD *)((((unint64_t)a2 + v8 + 15) & v10)
                                                                              + 0xC);
      *v11 = v16;
      break;
    case 1:
      v17 = *v12;
      v18 = *(_OWORD *)((((unint64_t)a2 + v8 + 15) & v10) + 0x10);
      v19 = *(_OWORD *)((((unint64_t)a2 + v8 + 15) & v10) + 0x20);
      *(_QWORD *)((((unint64_t)a1 + v8 + 15) & v10) + 0x30) = *(_QWORD *)((((unint64_t)a2 + v8 + 15) & v10)
                                                                               + 0x30);
      *(_OWORD *)((((unint64_t)a1 + v8 + 15) & v10) + 0x10) = v18;
      *(_OWORD *)((((unint64_t)a1 + v8 + 15) & v10) + 0x20) = v19;
      *v11 = v17;
      v15 = 1;
      break;
    case 2:
      *v11 = *v12;
      v15 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(v11, v12, v6);
      v15 = 3;
      break;
    case 4:
      *(_QWORD *)v11 = *(_QWORD *)v12;
      v15 = 4;
      break;
    default:
      if (v13 <= 3)
        v14 = v13;
      else
        v14 = 4;
      __asm { BR              X13 }
      return result;
  }
  *((_BYTE *)v11 + v13) = v15;
  v20 = (_QWORD *)(((unint64_t)v11 + v13 + 8) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v12 + v13 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  *(_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = ((((v13 + 8 + (v9 & v10)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v23 + 16;
  v25 = ((unint64_t)a1 + v24) & ~v23;
  v26 = ((unint64_t)a2 + v24) & ~v23;
  (*(void (**)(unint64_t, unint64_t))(v22 + 32))(v25, v26);
  v27 = *(_QWORD *)(v22 + 64) + 7;
  v28 = (_OWORD *)((v27 + v25) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_OWORD *)((v27 + v26) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  v30 = (_OWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_OWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  *(_OWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_1832E3FA0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *result;

  *a1 = *a2;
  swift_unknownObjectRelease();
  v6 = sub_183B913A4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v9 = v8 + 15;
  v10 = ~v8 & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)a1 + v8 + 15) & v10;
  v12 = ((unint64_t)a2 + v8 + 15) & v10;
  if (*(_QWORD *)(v7 + 64) <= 0x38uLL)
    v13 = 56;
  else
    v13 = *(_QWORD *)(v7 + 64);
  if (v11 != v12)
  {
    v14 = v6;
    switch(*(_BYTE *)(v11 + v13))
    {
      case 0:
        sub_183058BF0(*(_QWORD *)(((unint64_t)a1 + v8 + 15) & v10), *(_QWORD *)((((unint64_t)a1 + v8 + 15) & v10) + 8), *(_QWORD *)((((unint64_t)a1 + v8 + 15) & v10) + 0x10), *(_BYTE *)((((unint64_t)a1 + v8 + 15) & v10) + 0x18));
        goto LABEL_21;
      case 1:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v11 + 48) != 1)
          goto LABEL_15;
        goto LABEL_21;
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      case 3:
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
        goto LABEL_21;
      case 4:
LABEL_15:
        swift_unknownObjectRelease();
LABEL_21:
        switch(*(_BYTE *)(v12 + v13))
        {
          case 0:
            v17 = 0;
            v18 = *(_OWORD *)v12;
            *(_OWORD *)(v11 + 12) = *(_OWORD *)(v12 + 12);
            *(_OWORD *)v11 = v18;
            break;
          case 1:
            v19 = *(_OWORD *)v12;
            v20 = *(_OWORD *)(v12 + 16);
            v21 = *(_OWORD *)(v12 + 32);
            *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
            *(_OWORD *)(v11 + 16) = v20;
            *(_OWORD *)(v11 + 32) = v21;
            *(_OWORD *)v11 = v19;
            v17 = 1;
            break;
          case 2:
            *(_OWORD *)v11 = *(_OWORD *)v12;
            v17 = 2;
            break;
          case 3:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v11, v12, v14);
            v17 = 3;
            break;
          case 4:
            *(_QWORD *)v11 = *(_QWORD *)v12;
            v17 = 4;
            break;
          default:
            if (v13 <= 3)
              v16 = v13;
            else
              v16 = 4;
            __asm { BR              X12 }
            return result;
        }
        *(_BYTE *)(v11 + v13) = v17;
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  v22 = v13 + 1;
  v23 = (_QWORD *)(((v11 | 7) + v13 + 1) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((v12 | 7) + v13 + 1) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  swift_bridgeObjectRelease();
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  v26 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*v25 < 0xFFFFFFFFuLL)
    goto LABEL_32;
  if (*(_QWORD *)v26 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_32:
    *(_OWORD *)v25 = *(_OWORD *)v26;
    goto LABEL_33;
  }
  *v25 = *(_QWORD *)v26;
  swift_bridgeObjectRelease();
  v25[1] = *(_QWORD *)(v26 + 8);
  swift_unknownObjectRelease();
LABEL_33:
  v27 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = (((((v9 & v10 | 7) + v22) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v28 + 16;
  v30 = ((unint64_t)a1 + v29) & ~v28;
  v31 = ((unint64_t)a2 + v29) & ~v28;
  (*(void (**)(unint64_t, unint64_t))(v27 + 40))(v30, v31);
  v32 = *(_QWORD *)(v27 + 64) + 7;
  v33 = (_QWORD *)((v32 + v30) & 0xFFFFFFFFFFFFFFF8);
  v34 = (_QWORD *)((v32 + v31) & 0xFFFFFFFFFFFFFFF8);
  *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRelease();
  v35 = (_QWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRelease();
  v37 = (_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_QWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1832E4384(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;

  v6 = *(_QWORD *)(sub_183B913A4() - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x38uLL)
    v7 = 56;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = (((v7
         + ((unsigned __int16)((*(_WORD *)(v6 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v6 + 80) & 0xF8) & 0x1F8)
         + 8) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = v11 + v12 + 16;
  if (v10 < a2)
  {
    if (((((((((*(_QWORD *)(v8 + 64) + (v13 & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v14 = 2;
    else
      v14 = a2 - v10 + 1;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    __asm { BR              X16 }
  }
  if ((v9 & 0x80000000) != 0)
    return (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)a1 + v13) & ~v12);
  v18 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v18) = -1;
  return (v18 + 1);
}

void sub_1832E451C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  __int16 v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;

  v8 = *(_QWORD *)(sub_183B913A4() - 8);
  if (*(_QWORD *)(v8 + 64) <= 0x38uLL)
    v9 = 56;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= 0x7FFFFFFFu)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_DWORD *)(v8 + 80) & 0xF8;
  if (v11 >= a3)
  {
    v15 = 0u;
    if (a2 <= v11)
      goto LABEL_20;
  }
  else
  {
    if (((((((*(_DWORD *)(v10 + 64)
             + (((((((_DWORD)v9 + ((unsigned __int16)(v12 + 15) & (unsigned __int16)~v12 & 0x1F8) + 8) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
               + 16
               + *(unsigned __int8 *)(v10 + 80)) & ~*(unsigned __int8 *)(v10 + 80))
             + 7) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v13 = a3 - v11 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    if (a2 <= v11)
LABEL_20:
      __asm { BR              X13 }
  }
  if (((((((*(_DWORD *)(v10 + 64)
           + (((((((_DWORD)v9 + ((unsigned __int16)(v12 + 15) & (unsigned __int16)~v12 & 0x1F8) + 8) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
             + 16
             + *(unsigned __int8 *)(v10 + 80)) & ~*(unsigned __int8 *)(v10 + 80))
           + 7) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v16 = ~v11 + a2;
    bzero(a1, ((((((*(_QWORD *)(v10 + 64)+ ((((((v9 + ((unsigned __int16)(v12 + 15) & (unsigned __int16)~v12 & 0x1F8) + 8) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 16+ *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v16;
  }
  __asm { BR              X10 }
}

void sub_1832E4684()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1832E46FCLL);
}

void sub_1832E468C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x1832E4694);
  JUMPOUT(0x1832E46FCLL);
}

void sub_1832E46A8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1832E46FCLL);
}

void sub_1832E46B0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1832E46FCLL);
}

void sub_1832E46B8(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;

  *(_WORD *)((char *)v3 + v5) = 0;
  if (v4)
  {
    if (a3 < 0)
      JUMPOUT(0x1832E46C4);
    if (v4 < 0)
      JUMPOUT(0x1832E46E8);
    *v3 = (v4 - 1);
  }
  JUMPOUT(0x1832E46FCLL);
}

uint64_t sub_1832E4714()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1832E4794(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 32) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v12;
    v11[1] = v12[1];
    v13 = ((unint64_t)v11 + v6 + 16) & ~v6;
    v14 = ((unint64_t)v12 + v6 + 16) & ~v6;
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v13, v14, v4);
  }
  return a1;
}

uint64_t sub_1832E4880(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_1832E48D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v5[1] = v6[1];
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v5 + v9 + 16) & ~v9;
  v11 = ((unint64_t)v6 + v9 + 16) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v11, v7);
  return a1;
}

_QWORD *sub_1832E496C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_OWORD *sub_1832E4A1C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *sub_1832E4A84(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))(((unint64_t)v7 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_1832E4B14(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 32) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1832E4BE8 + 4 * byte_183BA50C9[(v9 - 1)]))();
}

void sub_1832E4C60(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for BrowseDescriptorFactories.Bonjour(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BrowseDescriptorFactories.Bonjour);
}

void sub_1832E4E6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for BrowseDescriptorFactories.Bonjour(255, *a1, a1[1], a4);
  JUMPOUT(0x186DB5558);
}

uint64_t static NWApplicationID.self.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = nw_application_id_create_self();
  *a1 = result;
  return result;
}

uint64_t NWApplicationID.init(nw:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t NWApplicationID.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v1 = sub_183B914AC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v0;
  v5 = v9;
  sub_1832E4FA4();
  sub_1832E5034();
  sub_183B91680();
  v6 = *(void (**)(char *, uint64_t))(v2 + 8);
  v6(v4, v1);
  v9 = v5;
  NWApplicationID.persona.getter();
  sub_183B91680();
  return ((uint64_t (*)(char *, uint64_t))v6)(v4, v1);
}

uint64_t sub_1832E4FA4()
{
  void **v0;
  void *v1;
  __int128 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *v0;
  v3 = 0uLL;
  nw_application_id_get_uuid(v1, &v3);
  return sub_183B91488();
}

unint64_t sub_1832E5034()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDCDEC30;
  if (!qword_1EDCDEC30)
  {
    v1 = sub_183B914AC();
    result = MEMORY[0x186DB5558](MEMORY[0x1E0CB09C8], v1);
    atomic_store(result, (unint64_t *)&qword_1EDCDEC30);
  }
  return result;
}

uint64_t NWApplicationID.persona.getter()
{
  void **v0;
  void *v1;
  __int128 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *v0;
  v3 = 0uLL;
  nw_application_id_get_persona(v1, &v3);
  return sub_183B91488();
}

uint64_t static NWApplicationID.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  char v14;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_183B914AC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v16 - v9;
  v11 = *a1;
  v12 = *a2;
  v17 = *a1;
  sub_1832E4FA4();
  v17 = v12;
  sub_1832E4FA4();
  LOBYTE(a2) = sub_183B9147C();
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  v13(v10, v4);
  if ((a2 & 1) != 0)
  {
    v17 = v11;
    NWApplicationID.persona.getter();
    v17 = v12;
    NWApplicationID.persona.getter();
    v14 = sub_183B9147C();
    v13(v8, v4);
    v13(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t NWApplicationID.nw.getter()
{
  return swift_unknownObjectRetain();
}

unint64_t NWApplicationID.debugDescription.getter()
{
  return 0xD000000000000011;
}

uint64_t NWApplicationID.encode(to:)(_QWORD *a1)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(_BOOL8, _QWORD);
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char *v24[3];
  _BYTE v25[24];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = sub_183B913C8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v24[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183B922F8();
  v24[0] = 0;
  v8 = nw_application_id_copy_serialized_bytes(v7, v24);
  v9 = (uint64_t)v24[0];
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0CB00C0], v3);
  sub_183B913BC();
  if (!v9)
  {
    v13 = (void (*)(_BOOL8, _QWORD))sub_183B913BC();
    v13(v8, 0);
    swift_release();
    swift_release();
    v11 = 0;
    v12 = (char *)0xC000000000000000;
    goto LABEL_18;
  }
  sub_183B91308();
  swift_allocObject();
  swift_retain();
  v10 = sub_183B912C0();
  if (v9 >= 15)
  {
    if ((unint64_t)v9 >= 0x7FFFFFFF)
    {
      sub_183B913EC();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = v9;
      swift_release();
      v12 = (char *)(v10 | 0x8000000000000000);
    }
    else
    {
      swift_release();
      v11 = v9 << 32;
      v12 = (char *)(v10 | 0x4000000000000000);
    }
    goto LABEL_18;
  }
  if (v9 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v14 = (_BYTE *)sub_183B912D8();
  if (v14)
  {
    v15 = sub_183B912FC();
    if (!__OFSUB__(0, v15))
    {
      v14 -= v15;
      goto LABEL_10;
    }
LABEL_20:
    __break(1u);
  }
LABEL_10:
  v16 = sub_183B912F0();
  if (v16 >= v9)
    v17 = v9;
  else
    v17 = v16;
  v18 = &v14[v17];
  if (v14)
    v19 = v18;
  else
    v19 = 0;
  v11 = sub_1832614E4(v14, v19);
  v21 = v20;
  swift_release();
  swift_release();
  v12 = (char *)(v21 & 0xFFFFFFFFFFFFFFLL);
LABEL_18:
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v24[1] = (char *)v11;
  v24[2] = v12;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v25, v26);
  sub_183280518();
  sub_183B920C4();
  sub_18308485C(v11, (unint64_t)v12);
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v25);
}

uint64_t NWApplicationID.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183B922C8();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
    sub_183280298();
    sub_183B920A0();
    __asm { BR              X10 }
  }
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
}

uint64_t sub_1832E585C(_QWORD *a1)
{
  return NWApplicationID.init(from:)(a1);
}

uint64_t sub_1832E5870(_QWORD *a1)
{
  return NWApplicationID.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for NWApplicationID()
{
  return &type metadata for NWApplicationID;
}

uint64_t sub_1832E5894(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_183306BDC(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 80);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        sub_183306BDC(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      v4 += 7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1832E5968@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  int well_known;
  const char *v12;
  const char *v13;
  uint64_t v14;

  if (a2 == -1)
  {
    well_known = nw_http_field_name_find_well_known(a1);
    v8 = 0x646F6874656D3ALL;
    v6 = 0xE700000000000000;
    result = 0x646F6874656D3ALL;
    v10 = 0xE700000000000000;
    switch(well_known)
    {
      case 0:
        break;
      case 1:
        v8 = 0x656D656863733ALL;
        result = 0x656D656863733ALL;
        break;
      case 2:
        v8 = 0x69726F687475613ALL;
        v6 = 0xEA00000000007974;
        result = 0x69726F687475613ALL;
        v10 = 0xEA00000000007974;
        break;
      case 3:
        v6 = 0xE500000000000000;
        v8 = 0x687461703ALL;
        result = 0x687461703ALL;
        v10 = 0xE500000000000000;
        break;
      case 4:
        v8 = 0x6F636F746F72703ALL;
        v6 = 0xE90000000000006CLL;
        result = 0x6F636F746F72703ALL;
        v10 = 0xE90000000000006CLL;
        break;
      case 5:
        v8 = 0x7375746174733ALL;
        result = 0x7375746174733ALL;
        break;
      case 6:
        v8 = 0x747065636341;
        goto LABEL_72;
      case 7:
        v6 = 0xEF676E69646F636ELL;
        result = 0x652D747065636361;
        v8 = 0x452D747065636341;
        v10 = 0xEF676E69646F636ELL;
        break;
      case 8:
        v6 = 0xEF65676175676E61;
        result = 0x6C2D747065636361;
        v8 = 0x4C2D747065636341;
        v10 = 0xEF65676175676E61;
        break;
      case 9:
        v6 = 0xED00007365676E61;
        result = 0x722D747065636361;
        v8 = 0x522D747065636341;
        v10 = 0xED00007365676E61;
        break;
      case 10:
        v8 = 0xD00000000000001CLL;
        v10 = 0x8000000183C70C00;
        v12 = "Access-Control-Allow-Headers";
        goto LABEL_82;
      case 11:
        v8 = 0xD00000000000001CLL;
        v10 = 0x8000000183C70C40;
        v12 = "Access-Control-Allow-Methods";
        goto LABEL_82;
      case 12:
        v8 = 0xD00000000000001BLL;
        v10 = 0x8000000183C70C80;
        v12 = "Access-Control-Allow-Origin";
        goto LABEL_82;
      case 13:
        v8 = 0xD00000000000001DLL;
        v10 = 0x8000000183C70CC0;
        v12 = "Access-Control-Expose-Headers";
        goto LABEL_82;
      case 14:
        v8 = 0xD000000000000016;
        v10 = 0x8000000183C70D00;
        v12 = "Access-Control-Max-Age";
        goto LABEL_82;
      case 15:
        v8 = 0xD00000000000001ELL;
        v10 = 0x8000000183C70D40;
        v12 = "Access-Control-Request-Headers";
        goto LABEL_82;
      case 16:
        v8 = 0xD00000000000001DLL;
        v10 = 0x8000000183C70D80;
        v12 = "Access-Control-Request-Method";
        goto LABEL_82;
      case 17:
        v8 = 6645569;
LABEL_27:
        result = v8 | 0x20;
        v6 = 0xE300000000000000;
        v10 = 0xE300000000000000;
        break;
      case 18:
        v8 = 0x776F6C6C41;
LABEL_29:
        result = v8 | 0x20;
        v6 = 0xE500000000000000;
        v10 = 0xE500000000000000;
        break;
      case 19:
        result = 0x6376732D746C61;
        v8 = 0x6376532D746C41;
        break;
      case 20:
        v8 = 0xD000000000000013;
        v10 = 0x8000000183C70DC0;
        v12 = "Authentication-Info";
        goto LABEL_82;
      case 21:
        v8 = 0x7A69726F68747541;
        result = 0x7A69726F68747561;
        v6 = 0xED00006E6F697461;
        v10 = 0xED00006E6F697461;
        break;
      case 22:
        v6 = 0xED00006C6F72746ELL;
        result = 0x6F632D6568636163;
        v8 = 0x6F432D6568636143;
        v10 = 0xED00006C6F72746ELL;
        break;
      case 23:
        v10 = 0x8000000183C72BA0;
        v13 = "Capsule-Protocol";
        goto LABEL_80;
      case 24:
        v8 = 0xD000000000000014;
        v10 = 0x8000000183C72B60;
        v12 = "Client-Connection-Id";
        goto LABEL_82;
      case 25:
        v6 = 0xEE00687361686F65;
        result = 0x672D746E65696C63;
        v14 = 0x746E65696C43;
LABEL_37:
        v8 = v14 & 0xFFFFFFFFFFFFLL | 0x472D000000000000;
        v10 = 0xEE00687361686F65;
        break;
      case 26:
        v8 = 0x697463656E6E6F43;
        result = 0x697463656E6E6F63;
        v6 = 0xEA00000000006E6FLL;
        v10 = 0xEA00000000006E6FLL;
        break;
      case 27:
        v10 = 0x8000000183C72B20;
        v13 = "Connect-UDP-Bind";
        goto LABEL_80;
      case 28:
        v8 = 0xD000000000000013;
        v10 = 0x8000000183C70E00;
        v12 = "Content-Disposition";
        goto LABEL_82;
      case 29:
        v10 = 0x8000000183C70E40;
        v13 = "Content-Encoding";
        goto LABEL_80;
      case 30:
        v10 = 0x8000000183C70E80;
        v13 = "Content-Language";
        goto LABEL_80;
      case 31:
        v8 = 0x2D746E65746E6F43;
        result = 0x2D746E65746E6F63;
        v6 = 0xEE006874676E654CLL;
        v10 = 0xEE006874676E656CLL;
        break;
      case 32:
        v10 = 0x8000000183C70EC0;
        v13 = "Content-Location";
        goto LABEL_80;
      case 33:
        v8 = 0x2D746E65746E6F43;
        result = 0x2D746E65746E6F63;
        v6 = 0xED000065676E6152;
        v10 = 0xED000065676E6172;
        break;
      case 34:
        v8 = 0xD000000000000017;
        v10 = 0x8000000183C70F00;
        v12 = "Content-Security-Policy";
        goto LABEL_82;
      case 35:
        v8 = 0x2D746E65746E6F43;
        result = 0x2D746E65746E6F63;
        v6 = 0xEC00000065707954;
        v10 = 0xEC00000065707974;
        break;
      case 36:
        v8 = 0x65696B6F6F43;
        goto LABEL_72;
      case 37:
        v8 = 0xD00000000000001CLL;
        v10 = 0x8000000183C70FA0;
        v12 = "Cross-Origin-Resource-Policy";
        goto LABEL_82;
      case 38:
        v10 = 0x8000000183C72AE0;
        v13 = "Datagram-Flow-Id";
        goto LABEL_80;
      case 39:
        v8 = 1702125892;
        goto LABEL_57;
      case 40:
        v6 = 0xEA00000000006174;
        result = 0x61642D796C726165;
        v8 = 0x61442D796C726145;
        v10 = 0xEA00000000006174;
        break;
      case 41:
        v6 = 0xE400000000000000;
        result = 1734440037;
        v8 = 1734431813;
        v10 = 0xE400000000000000;
        break;
      case 42:
        v8 = 0x746365707845;
        goto LABEL_72;
      case 43:
        v8 = 0x73657269707845;
        result = 0x73657269707865;
        break;
      case 44:
        v8 = 1836020294;
LABEL_57:
        result = v8 | 0x20;
        v6 = 0xE400000000000000;
        v10 = 0xE400000000000000;
        break;
      case 46:
        result = 0x686374616D2D6669;
        v6 = 0xE800000000000000;
        v8 = 0x686374614D2D6649;
        v10 = 0xE800000000000000;
        break;
      case 47:
        v8 = 0xD000000000000011;
        v10 = 0x8000000183C70FE0;
        v12 = "If-Modified-Since";
        goto LABEL_82;
      case 48:
        v6 = 0xED0000686374614DLL;
        v10 = 0xED0000686374616DLL;
        result = 0x2D656E6F6E2D6669;
        v8 = 0x2D656E6F4E2D6649;
        break;
      case 49:
        result = 0x65676E61722D6669;
        v6 = 0xE800000000000000;
        v8 = 0x65676E61522D6649;
        v10 = 0xE800000000000000;
        break;
      case 50:
        v8 = 0xD000000000000013;
        v10 = 0x8000000183C71020;
        v12 = "If-Unmodified-Since";
        goto LABEL_82;
      case 51:
        v6 = 0xEA00000000006576;
        result = 0x696C612D7065656BLL;
        v8 = 0x696C412D7065654BLL;
        v10 = 0xEA00000000006576;
        break;
      case 52:
        v6 = 0xED00006465696669;
        result = 0x646F6D2D7473616CLL;
        v8 = 0x646F4D2D7473614CLL;
        v10 = 0xED00006465696669;
        break;
      case 53:
        v8 = 0x6E6F697461636F4CLL;
        goto LABEL_74;
      case 54:
        v6 = 0xEC00000073647261;
        result = 0x77726F662D78616DLL;
        v8 = 0x77726F462D78614DLL;
        v10 = 0xEC00000073647261;
        break;
      case 55:
        v8 = 0x6E696769724FLL;
        goto LABEL_72;
      case 56:
        v6 = 0xE300000000000000;
        result = 7353200;
        v8 = 5256016;
        v10 = 0xE300000000000000;
        break;
      case 57:
        v8 = 0x616D67617250;
LABEL_72:
        result = v8 | 0x20;
        v6 = 0xE600000000000000;
        v10 = 0xE600000000000000;
        break;
      case 58:
        v8 = 0x797469726F697250;
LABEL_74:
        result = v8 | 0x20;
        v6 = 0xE800000000000000;
        v10 = 0xE800000000000000;
        break;
      case 59:
        v8 = 0xD000000000000012;
        v10 = 0x8000000183C71060;
        v12 = "Proxy-Authenticate";
        goto LABEL_82;
      case 60:
        v8 = 0xD000000000000019;
        v10 = 0x8000000183C710A0;
        v12 = "Proxy-Authentication-Info";
        goto LABEL_82;
      case 61:
        v8 = 0xD000000000000013;
        v10 = 0x8000000183C710E0;
        v12 = "Proxy-Authorization";
        goto LABEL_82;
      case 62:
        v8 = 0xD000000000000012;
        v10 = 0x8000000183C72AA0;
        v12 = "Proxy-Config-Epoch";
        goto LABEL_82;
      case 63:
        v10 = 0x8000000183C72A60;
        v13 = "Proxy-Connection";
LABEL_80:
        v6 = (unint64_t)(v13 - 32) | 0x8000000000000000;
        v8 = 0xD000000000000010;
        result = 0xD000000000000010;
        break;
      case 64:
        v8 = 0xD000000000000015;
        v10 = 0x8000000183C72A20;
        v12 = "Proxy-QUIC-Forwarding";
LABEL_82:
        v6 = (unint64_t)(v12 - 32) | 0x8000000000000000;
        result = v8;
        break;
      default:
        v6 = 0xEC00000073757461;
        result = 0x74732D79786F7270;
        v8 = 0x74532D79786F7250;
        v10 = 0xEC00000073757461;
        switch(well_known)
        {
          case 'A':
            goto LABEL_83;
          case 'B':
            v8 = 0x65676E6152;
            goto LABEL_29;
          case 'C':
            v8 = 0x72657265666552;
            break;
          case 'D':
            v6 = 0xEB00000000726574;
            result = 0x66612D7972746572;
            v8 = 0x66412D7972746552;
            v10 = 0xEB00000000726574;
            goto LABEL_83;
          case 'E':
            v8 = 0xD000000000000011;
            v10 = 0x8000000183C729E0;
            v12 = "Sec-CH-Background";
            goto LABEL_82;
          case 'F':
            v6 = 0xEE00687361686F65;
            result = 0x672D68632D636573;
            v14 = 0x48432D636553;
            goto LABEL_37;
          case 'G':
            v6 = 0xEB0000000065736FLL;
            result = 0x707275702D636573;
            v8 = 0x707275502D636553;
            v10 = 0xEB0000000065736FLL;
            goto LABEL_83;
          case 'H':
            v8 = 0xD000000000000014;
            v10 = 0x8000000183C71120;
            v12 = "Sec-WebSocket-Accept";
            goto LABEL_82;
          case 'I':
            v8 = 0xD000000000000018;
            v10 = 0x8000000183C71160;
            v12 = "Sec-WebSocket-Extensions";
            goto LABEL_82;
          case 'J':
            v8 = 0xD000000000000011;
            v10 = 0x8000000183C711A0;
            v12 = "Sec-WebSocket-Key";
            goto LABEL_82;
          case 'K':
            v8 = 0xD000000000000016;
            v10 = 0x8000000183C711E0;
            v12 = "Sec-WebSocket-Protocol";
            goto LABEL_82;
          case 'L':
            v8 = 0xD000000000000015;
            v10 = 0x8000000183C71220;
            v12 = "Sec-WebSocket-Version";
            goto LABEL_82;
          case 'M':
            v8 = 0x726576726553;
            goto LABEL_72;
          case 'N':
            v8 = 0xD000000000000014;
            v10 = 0x8000000183C729A0;
            v12 = "Server-Connection-Id";
            goto LABEL_82;
          case 'O':
            v6 = 0xEA00000000006569;
            result = 0x6B6F6F632D746573;
            v8 = 0x6B6F6F432D746553;
            v10 = 0xEA00000000006569;
            goto LABEL_83;
          case 'P':
            v8 = 0xD000000000000019;
            v10 = 0x8000000183C71260;
            v12 = "Strict-Transport-Security";
            goto LABEL_82;
          case 'Q':
            v6 = 0xE200000000000000;
            result = 25972;
            v8 = 17748;
            v10 = 0xE200000000000000;
            goto LABEL_83;
          case 'R':
            v8 = 0xD000000000000013;
            v10 = 0x8000000183C72960;
            v12 = "Timing-Allow-Origin";
            goto LABEL_82;
          case 'S':
            v8 = 0x72656C69617254;
            break;
          case 'T':
            v8 = 0xD000000000000011;
            v10 = 0x8000000183C712A0;
            v12 = "Transfer-Encoding";
            goto LABEL_82;
          case 'U':
            v8 = 0x65646172677055;
            break;
          case 'V':
            v8 = 0xD000000000000019;
            v10 = 0x8000000183C72920;
            v12 = "Upgrade-Insecure-Requests";
            goto LABEL_82;
          case 'W':
            v6 = 0xEA0000000000746ELL;
            result = 0x6567612D72657375;
            v8 = 0x6567412D72657355;
            v10 = 0xEA0000000000746ELL;
            goto LABEL_83;
          case 'X':
            v8 = 2037539158;
            goto LABEL_57;
          case 'Y':
            v8 = 6383958;
            goto LABEL_27;
          case 'Z':
            v10 = 0x8000000183C712E0;
            v13 = "WWW-Authenticate";
            goto LABEL_80;
          case '[':
            v8 = 0xD000000000000016;
            v10 = 0x8000000183C71320;
            v12 = "X-Content-Type-Options";
            goto LABEL_82;
          case '\\':
            v6 = 0xEF736E6F6974704FLL;
            v10 = 0xEF736E6F6974706FLL;
            result = 0x2D656D6172662D78;
            v8 = 0x2D656D6172462D58;
            goto LABEL_83;
          case ']':
            v10 = 0x8000000183C728E0;
            v13 = "X-XSS-Protection";
            goto LABEL_80;
          default:
            v4 = sub_183B91800();
            goto LABEL_3;
        }
        result = v8 | 0x20;
        v6 = 0xE700000000000000;
        v10 = 0xE700000000000000;
        break;
    }
  }
  else
  {
    v4 = sub_183B917A0();
LABEL_3:
    v6 = v5;
    v7 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v7 = v4 & 0xFFFFFFFFFFFFLL;
    if (!v7 || (v8 = v4, (sub_18329D8B4(v4, v5) & 1) == 0))
    {
      result = swift_bridgeObjectRelease();
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return result;
    }
    result = sub_183B91740();
  }
LABEL_83:
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 24) = v10;
  return result;
}

uint64_t sub_1832E6890@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t))
{
  uint64_t v18;
  uint64_t v19;
  unint64_t isStackAllocationSafe;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a6;
  v34 = *MEMORY[0x1E0C80C00];
  if ((sub_18324BC90(a1, a2) & 1) != 0)
  {
    v32 = (uint64_t)a10;
    swift_bridgeObjectRetain();
    sub_18324C26C(a8);
    sub_1832E7250(a1, a2, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))a3, a4, a5, v33, a7, a8, a10);
    goto LABEL_13;
  }
  v30[1] = a9;
  v31 = a5;
  v32 = a4;
  v18 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v18 = a1;
  v19 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v19 = 11;
  isStackAllocationSafe = sub_1832F0C5C(0xFuLL, v19 | (v18 << 16), a1, a2);
  v21 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v21 < 0)
    goto LABEL_15;
  if (v21 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v23 = (char *)v30 - v22;
    sub_1832E80A8((uint64_t)v30 - v22, v21, a1, a2);
    v24 = sub_183B917D0();
    v25 = sub_183B917D0();
    a3(v31, v24, v23, v25);
  }
  else
  {
    v26 = swift_slowAlloc();
    sub_1832E80A8(v26, v21, a1, a2);
    v27 = sub_183B917D0();
    v28 = sub_183B917D0();
    a3(v31, v27, (char *)v26, v28);
    MEMORY[0x186DB563C](v26, -1, -1);
  }
LABEL_13:
  swift_bridgeObjectRelease();
  return sub_18324C2B4(a8);
}

uint64_t sub_1832E6ADC(unint64_t a1, unint64_t a2, uint64_t (*a3)(char *))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if ((sub_18324BC90(a1, a2) & 1) != 0)
    return sub_1832E7510(a1, a2, (uint64_t (*)(_QWORD *))a3);
  v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v8 = a1;
  v9 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v9 = 11;
  isStackAllocationSafe = sub_1832F0C5C(0xFuLL, v9 | (v8 << 16), a1, a2);
  v11 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_16:
    __break(1u);
  }
  if (v11 < 0)
    goto LABEL_16;
  if (v11 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v13 = (char *)v15 - v12;
    sub_1832E80A8((uint64_t)v15 - v12, v11, a1, a2);
    result = a3(v13);
    if (v3)
      return swift_willThrow();
  }
  else
  {
    v14 = swift_slowAlloc();
    sub_1832E80A8(v14, v11, a1, a2);
    a3((char *)v14);
    return MEMORY[0x186DB563C](v14, -1, -1);
  }
  return result;
}

uint64_t sub_1832E6C94(unint64_t a1, unint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v15;
  uint64_t v16;
  unint64_t isStackAllocationSafe;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a7;
  v34 = a4;
  v35 = *MEMORY[0x1E0C80C00];
  if ((sub_18324BC90(a1, a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _Block_copy(a3);
    sub_1832E7928(a1, a2, a3, v34, a5, a6, v33, a8, a9);
    goto LABEL_19;
  }
  v31[1] = a5;
  v32 = a9;
  v15 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v15 = a1;
  v16 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v16 = 11;
  isStackAllocationSafe = sub_1832F0C5C(0xFuLL, v16 | (v15 << 16), a1, a2);
  v18 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if (v18 < 0)
    goto LABEL_21;
  if (v18 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v20 = (char *)v31 - v19;
    sub_1832E80A8((uint64_t)v31 - v19, v18, a1, a2);
    v21 = sub_183B917D0();
    v22 = sub_183B917D0();
    v23 = (v32 - 1);
    if (v23 < 3)
      v24 = v23 + 1;
    else
      v24 = 0;
    ((void (**)(_QWORD, uint64_t, uint64_t, char *, uint64_t, uint64_t))a3)[2](a3, v34, v21, v20, v22, v24);
  }
  else
  {
    v25 = swift_slowAlloc();
    sub_1832E80A8(v25, v18, a1, a2);
    v26 = sub_183B917D0();
    v27 = sub_183B917D0();
    v28 = (v32 - 1);
    if (v28 < 3)
      v29 = v28 + 1;
    else
      v29 = 0;
    a3[2](a3, v34, v26, v25, v27, v29);
    MEMORY[0x186DB563C](v25, -1, -1);
  }
LABEL_19:
  _Block_release(a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832E6F1C(unint64_t a1, unint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t isStackAllocationSafe;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD v28[2];
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if ((sub_18324BC90(a1, a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    _Block_copy(a3);
    sub_1832E7AF0(a1, a2, a3, a4, a5, a6, a7);
    goto LABEL_21;
  }
  v29 = a7;
  v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v14 = a1;
  v15 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v15 = 11;
  isStackAllocationSafe = sub_1832F0C5C(0xFuLL, v15 | (v14 << 16), a1, a2);
  v17 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v17 < 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  if (v17 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v28[1] = v28;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v19 = (char *)v28 - v18;
    sub_1832E80A8((uint64_t)v28 - v18, v17, a1, a2);
    v20 = sub_183B917D0();
    if (!__OFSUB__(v20, a4))
    {
      v21 = (v29 - 1);
      if (v21 < 3)
        v22 = v21 + 1;
      else
        v22 = 0;
      ((void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))a3)[2](a3, v19, a4, v20 - a4, v22);
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  v23 = swift_slowAlloc();
  sub_1832E80A8(v23, v17, a1, a2);
  v24 = sub_183B917D0();
  if (__OFSUB__(v24, a4))
    goto LABEL_25;
  v25 = (v29 - 1);
  if (v25 < 3)
    v26 = v25 + 1;
  else
    v26 = 0;
  a3[2](a3, v23, a4, v24 - a4, v26);
  MEMORY[0x186DB563C](v23, -1, -1);
LABEL_21:
  _Block_release(a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832E7174(void (*a1)(char *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  char v7;
  char v9;
  _QWORD v10[2];
  char v11;

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    sub_183B91D94();
    if (!v4)
      v7 = v11;
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    v10[0] = a3;
    v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    a1(&v9, v10);
    if (!v4)
      v7 = v9;
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0)
      v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = sub_183B91E78();
    a1((char *)v10, (_QWORD *)v6);
    if (!v4)
      v7 = v10[0];
  }
  return v7 & 1;
}

uint64_t sub_1832E7250(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, _QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t))
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183B91D94();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v16[0] = a1;
    v16[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v13 = sub_183B917D0();
    v14 = sub_183B917D0();
    a3(a5, v13, v16, v14);
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
      v11 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v11 = sub_183B91E78();
    a9(v11);
  }
  swift_bridgeObjectRelease();
  return sub_18324C2B4(a8);
}

uint64_t sub_1832E738C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t, char *, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, void (*a9)(uint64_t))
{
  uint64_t v9;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v20[10];
  _QWORD v21[4];

  v20[4] = a3;
  v20[5] = a4;
  v20[6] = a5;
  v20[7] = a6;
  v20[8] = a7;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183B91D94();
  }
  else
  {
    v21[3] = v20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v21[0] = a1;
      v21[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v20[1] = v9;
      v18 = *(_QWORD *)(a3 + 40);
      v17 = *(_QWORD *)(a3 + 48);
      swift_bridgeObjectRetain();
      sub_18324C26C(a3);
      sub_1832E6890(v18, v17, a4, a5, (uint64_t)v21, a6, a7, a3, a8, a9);
      sub_18324C2B4(a3);
      return swift_bridgeObjectRelease();
    }
    if ((a1 & 0x1000000000000000) != 0)
      v16 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v16 = sub_183B91E78();
    sub_1832E7C4C(v16, a3, a4, a5, a6, a7, a9, a8);
  }
  sub_18324C2B4(a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832E7510(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *))
{
  _QWORD *v4;
  _QWORD v6[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
    return sub_183B91D94();
  if ((a2 & 0x2000000000000000) != 0)
  {
    v6[0] = a1;
    v6[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v4 = v6;
  }
  else if ((a1 & 0x1000000000000000) != 0)
  {
    v4 = (_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v4 = (_QWORD *)sub_183B91E78();
  }
  return a3(v4);
}

void sub_1832E75C8(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v4 = a2;
  v5 = a1;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183B91D94();
LABEL_7:
    _Block_release(a3);
    return;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = sub_183B91E78();
    a3[2](a3, v6, v5, v4);
    goto LABEL_7;
  }
  v7[0] = a1;
  v7[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  ((void (*)(void (**)(_QWORD, _QWORD, _QWORD, _QWORD), _QWORD *))a3[2])(a3, v7);
  _Block_release(a3);
}

void sub_1832E76AC(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v4 = a2;
  v5 = a1;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183B91D94();
LABEL_7:
    _Block_release(a3);
    return;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = sub_183B91E78();
    a3[2](a3, v6, v5, v4);
    goto LABEL_7;
  }
  v7[0] = a1;
  v7[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  ((void (*)(void (**)(_QWORD, _QWORD, _QWORD, _QWORD), _QWORD *))a3[2])(a3, v7);
  _Block_release(a3);
}

uint64_t sub_1832E77A0(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, void *aBlock, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  uint64_t v14;
  _QWORD v16[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183B91D94();
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v16[0] = a1;
      v16[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1832E6C94(a3, a4, (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aBlock, (uint64_t)v16, a6, a7, a3, a4, a8);
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    if ((a1 & 0x1000000000000000) != 0)
      v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v14 = sub_183B91E78();
    sub_1832F0144(v14, a3, a4, aBlock, a6, a7, a8);
  }
  swift_bridgeObjectRelease();
LABEL_9:
  _Block_release(aBlock);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832E7928(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD v21[8];
  char v22;
  _QWORD v23[4];

  v21[2] = a3;
  v21[3] = a4;
  v21[4] = a5;
  v21[5] = a6;
  v21[6] = a7;
  v21[7] = a8;
  v22 = a9;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183B91D94();
    _Block_release(a3);
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v23[0] = a1;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v16 = sub_183B917D0();
    v17 = sub_183B917D0();
    v18 = (a9 - 1);
    if (v18 < 3)
      v19 = v18 + 1;
    else
      v19 = 0;
    ((void (**)(_QWORD, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))a3)[2](a3, a4, v16, v23, v17, v19);
    _Block_release(a3);
  }
  else
  {
    v23[3] = v21;
    if ((a1 & 0x1000000000000000) != 0)
      v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v15 = sub_183B91E78();
    sub_1832F01F0(v15, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    _Block_release(a3);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832E7AF0(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v12;
  uint64_t result;
  unsigned int v14;
  uint64_t v15;
  _QWORD v16[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183B91D94();
LABEL_7:
    _Block_release(a3);
    return swift_bridgeObjectRelease();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v12 = sub_183B91E78();
    sub_1832F03D8(v12, (uint64_t)a3, a4, a5, a6, a7);
    goto LABEL_7;
  }
  v16[0] = a1;
  v16[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  result = sub_183B917D0();
  if (!__OFSUB__(result, a4))
  {
    v14 = (a7 - 1);
    if (v14 < 3)
      v15 = v14 + 1;
    else
      v15 = 0;
    ((void (**)(_QWORD, _QWORD *, uint64_t, uint64_t, uint64_t))a3)[2](a3, v16, a4, result - a4, v15);
    _Block_release(a3);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1832E7C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X8>)
{
  unint64_t v15;
  unint64_t v16;

  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_18324C26C(a2);
  return sub_1832E6890(v15, v16, a3, a4, a1, a5, a6, a2, a8, a7);
}

uint64_t sub_1832E7CF0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = *v1;
  v11[3] = v5;
  v11[4] = v6;
  v11[0] = v2;
  v11[1] = v3;
  v11[2] = v4;
  v7 = HTTPFields.subscript.getter((uint64_t)v11);
  if (*(_QWORD *)(v7 + 16))
  {
    if (v4 != 0x65696B6F6F63 || v5 != 0xE600000000000000)
      sub_183B920F4();
    v9 = sub_1832E5894(v7);
    swift_bridgeObjectRelease();
    v11[0] = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC378);
    sub_18327DAB4((unint64_t *)&qword_1EDCDC380, &qword_1EDCDC378, MEMORY[0x1E0DEAF20]);
    v8 = sub_183B9168C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v8;
}

uint64_t sub_1832E7E40(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;

  v4 = *a3;
  v3 = a3[1];
  v6 = a3[2];
  v5 = a3[3];
  if (a2)
  {
    v9 = v6 == 0x65696B6F6F63 && v5 == 0xE600000000000000;
    if (v9 || (sub_183B920F4() & 1) != 0)
    {
      sub_1832984EC();
      v10 = sub_183B91BFC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = sub_1832F14F0(v10, v4, v3, v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183292B68(v11, v4, v3, v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      v13 = sub_18327D86C(a1, a2);
      v15 = v14;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC390);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183B9EA20;
      *(_QWORD *)(inited + 32) = v4;
      *(_BYTE *)(inited + 64) = 0;
      *(_QWORD *)(inited + 40) = v3;
      *(_QWORD *)(inited + 48) = v6;
      *(_QWORD *)(inited + 56) = v5;
      *(_QWORD *)(inited + 72) = v13;
      *(_QWORD *)(inited + 80) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_183292B68(inited, v4, v3, v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      return swift_arrayDestroy();
    }
  }
  else
  {
    sub_183292B68(MEMORY[0x1E0DEE9D8], *a3, a3[1], v6, v5);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_1832E80A8(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  _QWORD v15[2];

  if ((a4 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a4) & 0xF;
  else
    v7 = a3 & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v10) = sub_183B91DAC();
        if (__OFADD__(v8, 1))
          goto LABEL_22;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v15[0] = a3;
          v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
          v10 = *((unsigned __int8 *)v15 + v9);
          if (*((char *)v15 + v9) < 0)
            __asm { BR              X9 }
        }
        else
        {
          v12 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            v12 = sub_183B91E78();
          v10 = *(unsigned __int8 *)(v12 + v9);
          if (*(char *)(v12 + v9) < 0)
            __asm { BR              X10 }
        }
        v11 = 1;
        if (__OFADD__(v8, 1))
        {
LABEL_22:
          __break(1u);
          JUMPOUT(0x1832E82B4);
        }
      }
      v9 += v11;
      *(_BYTE *)(a1 + v8++) = v10;
    }
    while (v9 < v7);
  }
  v13 = 7;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  result = sub_1832F0C5C(0xFuLL, v13 | (v7 << 16), a3, a4);
  *(_BYTE *)(a1 + result) = 0;
  return result;
}

uint64_t _nw_http_field_has_name(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1832E5968(a2, -1, (uint64_t)&v10);
  v5 = v11;
  if (v11)
  {
    v6 = v10;
    if (v3 == v12 && v13 == v4)
      v8 = 1;
    else
      v8 = sub_183B920F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1832E83F0(v6, v5);
    return v8 & 1;
  }
  else
  {
    result = sub_183B91F5C();
    __break(1u);
  }
  return result;
}

uint64_t sub_1832E83F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _nw_http_field_set_value()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_183B91800();
  return HTTPField.value.setter(v0, v1);
}

void _nw_http_field_access(uint64_t a1, void *aBlock)
{
  void *v3;
  void *v4;
  __int128 v5;
  __int128 v6;
  _BYTE v7[16];
  uint64_t (*v8)();
  char *v9;
  char v10;
  void *v11;
  _OWORD v12[3];
  uint64_t v13;

  v3 = _Block_copy(aBlock);
  v4 = _Block_copy(v3);
  v5 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v5;
  v12[2] = *(_OWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 48);
  v11 = v4;
  v8 = sub_1832F0F64;
  v9 = &v10;
  v6 = v12[0];
  sub_18324C26C((uint64_t)v12);
  sub_18324C26C((uint64_t)v12);
  swift_bridgeObjectRetain();
  sub_1832E738C(v6, *((uint64_t *)&v6 + 1), (uint64_t)v12, (void (*)(uint64_t, uint64_t, char *, uint64_t))sub_182FEDAC0, (uint64_t)v7, v6, *((uint64_t *)&v6 + 1), (uint64_t)sub_1832F1A74, (void (*)(uint64_t))sub_1832F1A74);
  _Block_release(v4);
  sub_18324C2B4((uint64_t)v12);
  _Block_release(v3);
}

void _nw_http_field_access_canonical(uint64_t a1, void *aBlock)
{
  void *v3;
  void *v4;
  __int128 v5;
  __int128 v6;
  _BYTE v7[16];
  uint64_t (*v8)();
  char *v9;
  char v10;
  void *v11;
  _OWORD v12[3];
  uint64_t v13;

  v3 = _Block_copy(aBlock);
  v4 = _Block_copy(v3);
  v5 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v5;
  v12[2] = *(_OWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 48);
  v11 = v4;
  v8 = sub_1832F1B38;
  v9 = &v10;
  v6 = v5;
  sub_18324C26C((uint64_t)v12);
  sub_18324C26C((uint64_t)v12);
  swift_bridgeObjectRetain();
  sub_1832E738C(v6, *((uint64_t *)&v6 + 1), (uint64_t)v12, (void (*)(uint64_t, uint64_t, char *, uint64_t))sub_1832576D8, (uint64_t)v7, v6, *((uint64_t *)&v6 + 1), (uint64_t)sub_1832F1A74, (void (*)(uint64_t))sub_1832F1A74);
  _Block_release(v4);
  sub_18324C2B4((uint64_t)v12);
  _Block_release(v3);
}

uint64_t _nw_http_field_set_indexing_strategy(uint64_t result, unsigned int a2)
{
  char v2;

  if (a2 >= 4)
    v2 = 0;
  else
    v2 = a2;
  *(_BYTE *)(result + 32) = v2;
  return result;
}

uint64_t _nw_http_field_get_indexing_strategy(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) - 1 < 3)
    return (*(_BYTE *)(a1 + 32) - 1) + 1;
  else
    return 0;
}

void sub_1832E8628()
{
  sub_183B91F5C();
  __break(1u);
}

void sub_1832E8670()
{
  sub_183B91F5C();
  __break(1u);
}

void sub_1832E86B8()
{
  sub_183B91F5C();
  __break(1u);
}

void sub_1832E8700()
{
  sub_183B91F5C();
  __break(1u);
}

uint64_t sub_1832E8748(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*a2) & 1;
}

uint64_t sub_1832E8778(void (*a1)(uint64_t))
{
  uint64_t v1;

  swift_beginAccess();
  a1(v1 + 16);
  return swift_endAccess();
}

uint64_t sub_1832E87DC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  a1[3] = &type metadata for HTTPFields;
  a1[4] = &off_1E148D7D0;
  *a1 = v3;
  return swift_retain();
}

uint64_t sub_1832E8834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t sub_1832E8894(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v4;
  uint64_t v5;

  if (*(__objc2_class **)a1 == _TtC7NetworkP33_CFBD4EB2ABB20EFC96032331681B9C8314__NWHTTPFields)
  {
    swift_beginAccess();
    v4 = *(_QWORD *)(v1 + 16);
    swift_beginAccess();
    v5 = *(_QWORD *)(a1 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    v2 = sub_183297E78(v4, v5);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v2 = 0;
  }
  return v2 & 1;
}

uint64_t sub_1832E8950()
{
  return swift_release();
}

uint64_t _nw_http_fields_create()
{
  _QWORD *v0;
  uint64_t v1;
  _DWORD *v2;
  uint64_t result;

  type metadata accessor for HTTPFields._Storage();
  v0 = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[2] = MEMORY[0x1E0DEE9D8];
  v0[3] = sub_1832F2514(v1);
  v2 = (_DWORD *)swift_slowAlloc();
  v0[4] = v2;
  *v2 = 0;
  type metadata accessor for __NWHTTPFields();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

uint64_t _nw_http_fields_copy(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t _nw_http_fields_is_equal(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104);
  swift_retain();
  v2 = swift_retain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  swift_release();
  return v1 & 1;
}

uint64_t _nw_http_fields_get_count()
{
  uint64_t v0;
  uint64_t v2;

  v0 = swift_retain();
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X0>, _QWORD *@<X8>), _QWORD, _QWORD))(*(_QWORD *)v0 + 80))(&v2, sub_1832E8AB4, 0, MEMORY[0x1E0DEB418]);
  swift_release();
  return v2;
}

uint64_t sub_1832E8AB4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16);
  return result;
}

uint64_t sub_1832E8B00(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *(*v9)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>);
  size_t v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  uint64_t v22;
  unsigned __int8 *(*v23)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  swift_retain();
  sub_1832E5968(a2, -1, (uint64_t)&v21);
  v6 = v22;
  if (v22)
  {
    v7 = (uint64_t)v21;
    v9 = v23;
    v8 = v24;
    v10 = strlen(a3);
    if (v10)
    {
      if (*a3 < 0)
        goto LABEL_11;
      if (v10 == 1)
        goto LABEL_10;
      if (a3[1] < 0)
      {
LABEL_11:
        v21 = a3;
        v22 = v10;
        v23 = sub_1832FE3C4;
        v24 = 0;
        sub_1832F0FA0(v7, v6);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
        sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
        sub_183B91794();
        v13 = 0;
        v15 = 0xE000000000000000;
        goto LABEL_12;
      }
      v11 = v10 - 2;
      if (v10 != 2)
      {
        v12 = a3 + 2;
        while ((*v12 & 0x80000000) == 0)
        {
          ++v12;
          if (!--v11)
            goto LABEL_10;
        }
        goto LABEL_11;
      }
    }
LABEL_10:
    sub_1832F0FA0((uint64_t)v21, v22);
    v13 = sub_183B917A0();
    v15 = v14;
LABEL_12:
    v16 = sub_18327D86C(v13, v15);
    v18 = v17;
    swift_bridgeObjectRelease();
    v21 = (char *)v7;
    v22 = v6;
    v23 = v9;
    v24 = v8;
    v25 = 0;
    v26 = v16;
    v27 = v18;
    v19 = sub_1832E83F0(v7, v6);
    MEMORY[0x1E0C80A78](v19);
    (*(void (**)(uint64_t (*)(uint64_t *)))(*(_QWORD *)a1 + 80))(sub_1832F0FD0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  result = sub_183B91F5C();
  __break(1u);
  return result;
}

uint64_t sub_1832E8D48(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v11 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *a1;
  swift_beginAccess();
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 16);
  v12 = v11;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  sub_18324C26C(a2);
  sub_183294730(v9, v9, (uint64_t)&v12);
  return sub_18324C2B4(a2);
}

uint64_t sub_1832E8DF4(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  char *v13;
  size_t v14;
  unsigned __int8 *(*v15)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>);
  uint64_t v16;

  swift_retain();
  sub_1832E5968(a2, -1, (uint64_t)&v13);
  v6 = v14;
  if (v14)
  {
    v7 = (uint64_t)v13;
    v8 = strlen(a3);
    if (v8)
    {
      if (*a3 < 0)
        goto LABEL_11;
      if (v8 == 1)
        goto LABEL_10;
      if (a3[1] < 0)
      {
LABEL_11:
        v13 = a3;
        v14 = v8;
        v15 = sub_1832FE3C4;
        v16 = 0;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
        sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
        sub_183B91794();
        v11 = 0;
        goto LABEL_12;
      }
      v9 = v8 - 2;
      if (v8 != 2)
      {
        v10 = a3 + 2;
        while ((*v10 & 0x80000000) == 0)
        {
          ++v10;
          if (!--v9)
            goto LABEL_10;
        }
        goto LABEL_11;
      }
    }
LABEL_10:
    v11 = sub_183B917A0();
LABEL_12:
    MEMORY[0x1E0C80A78](v11);
    (*(void (**)(uint64_t (*)(uint64_t)))(*(_QWORD *)a1 + 80))(sub_1832F0FD8);
    swift_release();
    sub_1832E83F0(v7, v6);
    return swift_bridgeObjectRelease();
  }
  result = sub_183B91F5C();
  __break(1u);
  return result;
}

uint64_t sub_1832E8FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v10[4];

  v10[0] = a2;
  v10[1] = a3;
  v10[2] = a4;
  v10[3] = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1832E7E40(a6, a7, v10);
}

uint64_t sub_1832E9044(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  swift_retain();
  v4 = sub_1832E5968(a2, -1, (uint64_t)&v8);
  v5 = v9;
  if (v9)
  {
    v6 = v8;
    MEMORY[0x1E0C80A78](v4);
    (*(void (**)(uint64_t (*)(uint64_t)))(*(_QWORD *)a1 + 80))(sub_1832F0FE8);
    swift_release();
    return sub_1832E83F0(v6, v5);
  }
  else
  {
    result = sub_183B91F5C();
    __break(1u);
  }
  return result;
}

uint64_t sub_1832E9154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183298308(a2, a3, a4, a5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _nw_http_fields_remove(uint64_t a1, uint64_t a2)
{
  void (*v2)(uint64_t (*)(uint64_t *), _QWORD *, uint64_t);
  _QWORD v4[4];

  v4[2] = a2;
  v2 = *(void (**)(uint64_t (*)(uint64_t *), _QWORD *, uint64_t))(*(_QWORD *)a1 + 80);
  swift_retain();
  v2(sub_1832F0FF4, v4, MEMORY[0x1E0DEE9C0] + 8);
  return swift_release();
}

uint64_t sub_1832E921C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v5;

  v3 = *a1;
  result = swift_beginAccess();
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v5 > a2)
    return sub_183298C44(a2);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1832E9298(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t *@<X8>), _QWORD *, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t result;
  _QWORD v20[4];
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  swift_retain();
  v4 = sub_1832E5968(a2, -1, (uint64_t)&v23);
  v5 = v24;
  if (v24)
  {
    v7 = v25;
    v6 = v26;
    v8 = v23;
    MEMORY[0x1E0C80A78](v4);
    v20[2] = v8;
    v20[3] = v5;
    v21 = v7;
    v22 = v6;
    v9 = *(void (**)(unint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t *@<X8>), _QWORD *, uint64_t))(*(_QWORD *)a1 + 80);
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDB990);
    v9(&v23, sub_1832F0FFC, v20, v10);
    sub_1832E83F0(v8, v5);
    v11 = v24;
    if (!v24)
    {
      swift_release();
      return 0;
    }
    v12 = v23;
    v13 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) == 0)
      v13 = v23;
    v14 = 7;
    if (((v24 >> 60) & ((v23 & 0x800000000000000) == 0)) != 0)
      v14 = 11;
    v15 = sub_1832F0C5C(0xFuLL, v14 | (v13 << 16), v23, v24);
    v16 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
    }
    else
    {
      v17 = malloc(v15 + 1);
      if (v17)
      {
        v18 = v17;
        sub_1832E80A8((uint64_t)v17, v16, v12, v11);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v18;
      }
    }
    __break(1u);
  }
  LODWORD(v22) = 0;
  v21 = 374;
  result = sub_183B91F5C();
  __break(1u);
  return result;
}

uint64_t _nw_http_fields_have_field_with_name(uint64_t a1, unint64_t a2)
{
  return sub_1832E9470(a1, a2) & 1;
}

uint64_t sub_1832E9470(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  swift_retain();
  v4 = sub_1832E5968(a2, -1, (uint64_t)&v8);
  v5 = v9;
  if (v9)
  {
    v6 = v8;
    MEMORY[0x1E0C80A78](v4);
    (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(_BYTE *@<X8>)))(*(_QWORD *)a1 + 80))(&v8, sub_1832F1048);
    swift_release();
    sub_1832E83F0(v6, v5);
    return v8;
  }
  else
  {
    result = sub_183B91F5C();
    __break(1u);
  }
  return result;
}

uint64_t sub_1832E958C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, _BYTE *a3@<X8>)
{
  char v6;
  char v7;
  uint64_t result;

  swift_retain();
  if (*(_QWORD *)(sub_183290BA0() + 16))
  {
    swift_bridgeObjectRetain();
    sub_1832F67A0(a1, a2);
    v7 = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  swift_bridgeObjectRelease();
  result = swift_release();
  *a3 = v7 & 1;
  return result;
}

void _nw_http_fields_append_advanced(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, size_t a5, void *aBlock)
{
  void *v11;

  v11 = _Block_copy(aBlock);
  sub_1832E9688(a1, a2, a3, a4, a5, v11);
  _Block_release(v11);
}

uint64_t sub_1832E9688(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, size_t a5, void *aBlock)
{
  void (**v11)(void *, uint64_t *);
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *(*v14)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>);
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  char *v26;
  uint64_t v27;
  unsigned __int8 *(*v28)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>);
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v11 = (void (**)(void *, uint64_t *))_Block_copy(aBlock);
  swift_retain();
  sub_1832E5968(a2, a3, (uint64_t)&v26);
  v12 = v27;
  if (v27)
  {
    v13 = (uint64_t)v26;
    v14 = v28;
    v15 = v29;
    if (a5 == -1)
    {
      a5 = strlen(a4);
      if (!a5)
        goto LABEL_13;
    }
    else if (!a5)
    {
      goto LABEL_13;
    }
    if (*a4 < 0)
      goto LABEL_14;
    if (a5 == 1)
      goto LABEL_13;
    if (a4[1] < 0)
    {
LABEL_14:
      v26 = a4;
      v27 = a5;
      v28 = sub_1832FE3C4;
      v29 = 0;
      sub_1832F0FA0(v13, v12);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
      sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
      sub_183B91794();
      v18 = 0;
      v20 = 0xE000000000000000;
      goto LABEL_15;
    }
    v16 = a5 - 2;
    if (a5 != 2)
    {
      v17 = a4 + 2;
      while ((*v17 & 0x80000000) == 0)
      {
        ++v17;
        if (!--v16)
          goto LABEL_13;
      }
      goto LABEL_14;
    }
LABEL_13:
    sub_1832F0FA0((uint64_t)v26, v27);
    v18 = sub_183B917A0();
    v20 = v19;
LABEL_15:
    v21 = sub_18327D86C(v18, v20);
    v23 = v22;
    swift_bridgeObjectRelease();
    v26 = (char *)v13;
    v27 = v12;
    v28 = v14;
    v29 = v15;
    v30 = 0;
    v31 = v21;
    v32 = v23;
    sub_1832E83F0(v13, v12);
    v11[2](v11, (uint64_t *)&v26);
    _Block_release(v11);
    MEMORY[0x1E0C80A78](v24);
    (*(void (**)(uint64_t (*)(uint64_t *)))(*(_QWORD *)a1 + 80))(sub_1832F1054);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  result = sub_183B91F5C();
  __break(1u);
  return result;
}

uint64_t sub_1832E994C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  char v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a2;
  v2 = a2[1];
  v5 = a2[2];
  v4 = a2[3];
  v6 = *((_BYTE *)a2 + 32);
  v8 = a2[5];
  v7 = a2[6];
  v9 = *a1;
  swift_beginAccess();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 16);
  v12[0] = v3;
  v12[1] = v2;
  v12[2] = v5;
  v12[3] = v4;
  v13 = v6;
  v14 = v8;
  v15 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183294730(v10, v10, (uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void _nw_http_fields_access_value_by_name(uint64_t a1, unint64_t a2, void *aBlock)
{
  void *v5;

  v5 = _Block_copy(aBlock);
  sub_1832E9A58(a1, a2, v5);
  _Block_release(v5);
}

void sub_1832E9A58(uint64_t a1, unint64_t a2, void *aBlock)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = _Block_copy(aBlock);
  swift_retain();
  v6 = sub_1832E5968(a2, -1, (uint64_t)&v9);
  v7 = v10;
  if (v10)
  {
    v8 = v9;
    MEMORY[0x1E0C80A78](v6);
    (*(void (**)(uint64_t (*)(uint64_t *)))(*(_QWORD *)a1 + 80))(sub_1832F105C);
    swift_release();
    sub_1832E83F0(v8, v7);
    _Block_release(v5);
  }
  else
  {
    sub_183B91F5C();
    __break(1u);
  }
}

uint64_t sub_1832E9B84(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14[5];

  v7 = *a1;
  v14[3] = a5;
  v14[4] = v7;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a4;
  v8 = sub_1832E7CF0(v14);
  if (!v9)
    return (*(uint64_t (**)(uint64_t))(a6 + 16))(a6);
  v10 = MEMORY[0x1E0C80A78](v8);
  v11 = MEMORY[0x1E0C80A78](v10);
  sub_1832E6ADC(v11, v12, (uint64_t (*)(char *))sub_1832F1B24);
  return swift_bridgeObjectRelease();
}

void _nw_http_fields_access_field(uint64_t a1, uint64_t a2, void *aBlock)
{
  void *v5;
  void *v6;
  void (*v7)(uint64_t (*)(uint64_t *), _QWORD *, uint64_t);
  _QWORD v8[4];

  v5 = _Block_copy(aBlock);
  v6 = _Block_copy(v5);
  v8[2] = a2;
  v8[3] = v6;
  v7 = *(void (**)(uint64_t (*)(uint64_t *), _QWORD *, uint64_t))(*(_QWORD *)a1 + 80);
  swift_retain();
  v7(sub_1832F106C, v8, MEMORY[0x1E0DEE9C0] + 8);
  swift_release();
  _Block_release(v6);
  _Block_release(v5);
}

uint64_t sub_1832E9CE4(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, __int128 *);
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v5 = *a1;
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 16);
  if (*(_QWORD *)(v6 + 16) <= a2)
    goto LABEL_5;
  v7 = v6 + (a2 << 6);
  v8 = *(_QWORD *)(v7 + 40);
  v9 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(v7 + 56);
  v11 = *(_BYTE *)(v7 + 64);
  v12 = *(_QWORD *)(v7 + 72);
  v13 = *(_QWORD *)(v7 + 80);
  *(_QWORD *)&v22 = *(_QWORD *)(v7 + 32);
  *((_QWORD *)&v22 + 1) = v8;
  v23 = v9;
  v24 = v10;
  v25 = v11;
  v26 = v12;
  v27 = v13;
  v14 = *(void (**)(uint64_t, __int128 *))(a3 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(a3, &v22);
  v16 = v22;
  v17 = v23;
  v18 = v24;
  v19 = v25;
  v20 = v26;
  v21 = v27;
  return HTTPFields.subscript.setter((uint64_t *)&v16, a2);
}

unint64_t _nw_http_fields_enumerate_by_name(uint64_t a1, unint64_t a2, void *aBlock)
{
  void *v5;

  v5 = _Block_copy(aBlock);
  LOBYTE(a2) = sub_1832E9E48(a1, a2, v5);
  _Block_release(v5);
  return a2 & 1;
}

uint64_t sub_1832E9E48(uint64_t a1, unint64_t a2, void *aBlock)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v5 = _Block_copy(aBlock);
  swift_retain();
  v6 = sub_1832E5968(a2, -1, (uint64_t)&v10);
  v7 = v11;
  if (v11)
  {
    v8 = v10;
    MEMORY[0x1E0C80A78](v6);
    (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(unint64_t *@<X0>, char *@<X8>)))(*(_QWORD *)a1 + 80))(&v10, sub_1832F1074);
    swift_release();
    sub_1832E83F0(v8, v7);
    _Block_release(v5);
    return v10;
  }
  else
  {
    result = sub_183B91F5C();
    __break(1u);
  }
  return result;
}

uint64_t sub_1832E9F88@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t isStackAllocationSafe;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  char v54;
  _QWORD v55[2];
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD v68[2];
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  uint64_t v75;

  v65 = a6;
  v56 = a7;
  v75 = *MEMORY[0x1E0C80C00];
  v69 = *a1;
  *(_QWORD *)&v71 = a2;
  *((_QWORD *)&v71 + 1) = a3;
  *(_QWORD *)&v72 = a4;
  *((_QWORD *)&v72 + 1) = a5;
  v7 = HTTPFields.subscript.getter((uint64_t)&v71);
  v62 = *(_QWORD *)(v7 + 16);
  if (!v62)
  {
LABEL_80:
    result = swift_bridgeObjectRelease();
    v54 = 1;
    goto LABEL_81;
  }
  v8 = 0;
  v63 = 0;
  v55[1] = v7;
  v61 = v7 + 32;
  while (2)
  {
    v9 = v61 + 56 * v8;
    v11 = *(_OWORD *)(v9 + 16);
    v10 = *(_OWORD *)(v9 + 32);
    v12 = *(_OWORD *)v9;
    v74 = *(_QWORD *)(v9 + 48);
    v72 = v11;
    v73 = v10;
    v71 = v12;
    v13 = v12;
    v14 = MEMORY[0x1E0C80A78](v7);
    v55[-2] = v65;
    v15 = MEMORY[0x1E0C80A78](v14);
    v55[-2] = sub_1832F1B3C;
    v55[-1] = v16;
    v17 = MEMORY[0x1E0C80A78](v15);
    v55[-6] = &v71;
    v55[-5] = sub_1832F1B54;
    v55[-4] = v18;
    *(_OWORD *)&v55[-3] = v13;
    if ((*((_QWORD *)&v13 + 1) & 0x1000000000000000) != 0)
      goto LABEL_78;
    v20 = *((_QWORD *)&v73 + 1);
    v19 = v74;
    v66 = v55;
    v67 = v8;
    v64 = v13;
    if ((*((_QWORD *)&v13 + 1) & 0x2000000000000000) == 0)
    {
      if ((v13 & 0x1000000000000000) == 0)
      {
LABEL_78:
        sub_18324C26C((uint64_t)&v71);
        v52 = v63;
        sub_183B91D94();
        v63 = v52;
        goto LABEL_75;
      }
      v60 = v55;
      MEMORY[0x1E0C80A78](v17);
      v59 = &v55[-8];
      v55[-6] = sub_1832F1B54;
      v55[-5] = v21;
      v57 = v22;
      v55[-4] = v22;
      *(_OWORD *)&v55[-3] = v13;
      v55[-1] = &v71;
      if ((v19 & 0x2000000000000000) != 0)
        v23 = HIBYTE(v19) & 0xF;
      else
        v23 = v20 & 0xFFFFFFFFFFFFLL;
      if ((v19 & 0x1000000000000000) != 0)
        v24 = (v20 >> 59) & 1;
      else
        v24 = 1;
      v58 = v24;
      v25 = 4 << v24;
      v26 = 15;
      while (1)
      {
        while (1)
        {
          if (4 * v23 == v26 >> 14)
            goto LABEL_58;
          v27 = v26 & 0xC;
          v28 = v26;
          if (v27 == v25)
            v28 = sub_18329687C(v26, v20, v19);
          v29 = v28 >> 16;
          if (v28 >> 16 >= v23)
            goto LABEL_83;
          if ((v19 & 0x1000000000000000) == 0)
            break;
          v31 = sub_183B91848();
          if (v27 == v25)
            goto LABEL_30;
LABEL_25:
          if ((v19 & 0x1000000000000000) == 0)
            goto LABEL_13;
LABEL_26:
          if (v23 <= v26 >> 16)
            goto LABEL_85;
          v26 = sub_183B91818();
          if (v31 < 0)
          {
LABEL_66:
            v48 = 11;
            if ((_DWORD)v58)
              v48 = 7;
            v49 = sub_1832F0C5C(0xFuLL, v48 | (v23 << 16), v20, v19);
            v46 = v49 + 1;
            if (!__OFADD__(v49, 1))
            {
              if ((v46 & 0x8000000000000000) == 0)
              {
                isStackAllocationSafe = sub_18324C26C((uint64_t)&v71);
                if (v46 < 1025)
                  goto LABEL_72;
                isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
                if ((isStackAllocationSafe & 1) != 0)
                  goto LABEL_72;
LABEL_73:
                v51 = swift_slowAlloc();
                sub_1832E80A8(v51, v46, v20, v19);
                sub_183B917D0();
                sub_183B917D0();
                v43 = (*(uint64_t (**)(void))(v65 + 16))();
                MEMORY[0x186DB563C](v51, -1, -1);
                goto LABEL_74;
              }
LABEL_89:
              __break(1u);
            }
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
            goto LABEL_89;
          }
        }
        if ((v19 & 0x2000000000000000) != 0)
        {
          v69 = v20;
          v70 = v19 & 0xFFFFFFFFFFFFFFLL;
          v31 = *((_BYTE *)&v69 + v29);
          if (v27 == v25)
            goto LABEL_30;
          goto LABEL_25;
        }
        v30 = (v19 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v20 & 0x1000000000000000) == 0)
          v30 = sub_183B91E78();
        v31 = *(_BYTE *)(v30 + v29);
        if (v27 != v25)
          goto LABEL_25;
LABEL_30:
        v26 = sub_18329687C(v26, v20, v19);
        if ((v19 & 0x1000000000000000) != 0)
          goto LABEL_26;
LABEL_13:
        v26 = (v26 & 0xFFFFFFFFFFFF0000) + 65540;
        if (v31 < 0)
          goto LABEL_66;
      }
    }
    v60 = v55;
    v69 = v13;
    v70 = *((_QWORD *)&v13 + 1) & 0xFFFFFFFFFFFFFFLL;
    MEMORY[0x1E0C80A78](v17);
    v59 = &v55[-8];
    v55[-6] = sub_1832F1B54;
    v55[-5] = v32;
    v55[-4] = &v69;
    *(_OWORD *)&v55[-3] = v13;
    v55[-1] = &v71;
    if ((v19 & 0x2000000000000000) != 0)
      v33 = HIBYTE(v19) & 0xF;
    else
      v33 = v20 & 0xFFFFFFFFFFFFLL;
    if ((v19 & 0x1000000000000000) != 0)
      v34 = (v20 >> 59) & 1;
    else
      v34 = 1;
    v58 = v34;
    v35 = 4 << v34;
    v36 = 15;
    do
    {
      while (1)
      {
        if (4 * v33 == v36 >> 14)
        {
LABEL_58:
          sub_18324C26C((uint64_t)&v71);
          v42 = v63;
          v43 = sub_1832E7174((void (*)(char *__return_ptr, _QWORD *))sub_1832F14DC, (uint64_t)v59, v20, v19);
          v63 = v42;
          goto LABEL_74;
        }
        v37 = v36 & 0xC;
        v38 = v36;
        if (v37 == v35)
          v38 = sub_18329687C(v36, v20, v19);
        v39 = v38 >> 16;
        if (v38 >> 16 >= v33)
        {
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
          goto LABEL_87;
        }
        if ((v19 & 0x1000000000000000) == 0)
          break;
        v41 = sub_183B91848();
        if (v37 == v35)
          goto LABEL_56;
LABEL_51:
        if ((v19 & 0x1000000000000000) != 0)
          goto LABEL_52;
LABEL_39:
        v36 = (v36 & 0xFFFFFFFFFFFF0000) + 65540;
        if (v41 < 0)
          goto LABEL_59;
      }
      if ((v19 & 0x2000000000000000) != 0)
      {
        v68[0] = v20;
        v68[1] = v19 & 0xFFFFFFFFFFFFFFLL;
        v41 = *((_BYTE *)v68 + v39);
        if (v37 == v35)
          goto LABEL_56;
        goto LABEL_51;
      }
      v40 = (v19 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v20 & 0x1000000000000000) == 0)
        v40 = sub_183B91E78();
      v41 = *(_BYTE *)(v40 + v39);
      if (v37 != v35)
        goto LABEL_51;
LABEL_56:
      v36 = sub_18329687C(v36, v20, v19);
      if ((v19 & 0x1000000000000000) == 0)
        goto LABEL_39;
LABEL_52:
      if (v33 <= v36 >> 16)
        goto LABEL_84;
      v36 = sub_183B91818();
    }
    while ((v41 & 0x80) == 0);
LABEL_59:
    v44 = 11;
    if ((_DWORD)v58)
      v44 = 7;
    v45 = sub_1832F0C5C(0xFuLL, v44 | (v33 << 16), v20, v19);
    v46 = v45 + 1;
    if (__OFADD__(v45, 1))
      goto LABEL_86;
    if (v46 < 0)
      goto LABEL_88;
    isStackAllocationSafe = sub_18324C26C((uint64_t)&v71);
    if (v46 >= 1025)
    {
      isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
      if ((isStackAllocationSafe & 1) == 0)
        goto LABEL_73;
    }
LABEL_72:
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    sub_1832E80A8((uint64_t)v55 - v50, v46, v20, v19);
    sub_183B917D0();
    sub_183B917D0();
    v43 = (*(uint64_t (**)(void))(v65 + 16))();
LABEL_74:
    v8 = v67;
    LOBYTE(v68[0]) = v43 & 1;
LABEL_75:
    v7 = sub_18324C2B4((uint64_t)&v71);
    if ((v68[0] & 1) != 0)
    {
      if (++v8 == v62)
        goto LABEL_80;
      continue;
    }
    break;
  }
  result = swift_bridgeObjectRelease();
  v54 = 0;
LABEL_81:
  *v56 = v54;
  return result;
}

uint64_t _nw_http_fields_enumerate(uint64_t a1, void *a2)
{
  return _nw_http_fields_enumerateTm(a1, a2, (uint64_t)sub_1832F1084);
}

uint64_t sub_1832EA780@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t isStackAllocationSafe;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  char v54;
  _QWORD v55[2];
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  unint64_t v70;
  uint64_t v71;
  _QWORD v72[4];
  char v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;

  v64 = a2;
  v56 = a3;
  v76 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v62 = v3 + 16;
  v55[1] = v3;
  swift_retain();
  v4 = 0;
  v61 = 0;
  do
  {
    v5 = v62;
    v6 = swift_beginAccess();
    v7 = *(_QWORD *)(*(_QWORD *)v5 + 16);
    if (v4 == v7)
    {
      result = swift_release();
      v54 = 1;
      goto LABEL_81;
    }
    if (v4 >= v7)
      goto LABEL_86;
    v8 = *(_QWORD *)v5 + (v4 << 6);
    v10 = *(_QWORD *)(v8 + 40);
    v11 = *(_QWORD *)(v8 + 48);
    v12 = *(_QWORD *)(v8 + 56);
    v13 = *(_BYTE *)(v8 + 64);
    v14 = *(_QWORD *)(v8 + 72);
    v15 = *(_QWORD *)(v8 + 80);
    v72[0] = *(_QWORD *)(v8 + 32);
    v9 = v72[0];
    v72[1] = v10;
    v72[2] = v11;
    v72[3] = v12;
    v68 = v12;
    v73 = v13;
    v74 = v14;
    v75 = v15;
    v16 = MEMORY[0x1E0C80A78](v6);
    v55[-2] = v64;
    v17 = MEMORY[0x1E0C80A78](v16);
    v55[-2] = sub_1832F1470;
    v55[-1] = v18;
    v19 = MEMORY[0x1E0C80A78](v17);
    v55[-6] = v72;
    v55[-5] = sub_1832F149C;
    v55[-4] = v20;
    v55[-3] = v9;
    v55[-2] = v10;
    if ((v10 & 0x1000000000000000) != 0)
      goto LABEL_79;
    v65 = v55;
    v66 = v4;
    v67 = v10;
    v63 = v9;
    if ((v10 & 0x2000000000000000) == 0)
    {
      if ((v9 & 0x1000000000000000) == 0)
      {
LABEL_79:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v52 = v61;
        sub_183B91D94();
        v61 = v52;
        swift_bridgeObjectRelease();
        goto LABEL_77;
      }
      v60 = v55;
      MEMORY[0x1E0C80A78](v19);
      v59 = &v55[-8];
      v55[-6] = sub_1832F149C;
      v55[-5] = v21;
      v57 = v22;
      v55[-4] = v22;
      v55[-3] = v9;
      v55[-2] = v10;
      v55[-1] = v72;
      if ((v15 & 0x2000000000000000) != 0)
        v23 = HIBYTE(v15) & 0xF;
      else
        v23 = v14 & 0xFFFFFFFFFFFFLL;
      if ((v15 & 0x1000000000000000) != 0)
        v24 = (v14 >> 59) & 1;
      else
        v24 = 1;
      v58 = v24;
      v25 = 4 << v24;
      v26 = 15;
      while (1)
      {
        while (1)
        {
          if (4 * v23 == v26 >> 14)
            goto LABEL_59;
          v27 = v26 & 0xC;
          v28 = v26;
          if (v27 == v25)
            v28 = sub_18329687C(v26, v14, v15);
          v29 = v28 >> 16;
          if (v28 >> 16 >= v23)
            goto LABEL_83;
          if ((v15 & 0x1000000000000000) == 0)
            break;
          v31 = sub_183B91848();
          if (v27 == v25)
            goto LABEL_31;
LABEL_26:
          if ((v15 & 0x1000000000000000) == 0)
            goto LABEL_14;
LABEL_27:
          if (v23 <= v26 >> 16)
            goto LABEL_85;
          v26 = sub_183B91818();
          if (v31 < 0)
          {
LABEL_67:
            v48 = 11;
            if ((_DWORD)v58)
              v48 = 7;
            v49 = sub_1832F0C5C(0xFuLL, v48 | (v23 << 16), v14, v15);
            v46 = v49 + 1;
            if (!__OFADD__(v49, 1))
            {
              if ((v46 & 0x8000000000000000) == 0)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                isStackAllocationSafe = swift_bridgeObjectRetain();
                if (v46 < 1025)
                  goto LABEL_73;
                isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
                if ((isStackAllocationSafe & 1) != 0)
                  goto LABEL_73;
LABEL_74:
                v51 = swift_slowAlloc();
                sub_1832E80A8(v51, v46, v14, v15);
                sub_183B917D0();
                sub_183B917D0();
                v43 = (*(uint64_t (**)(void))(v64 + 16))();
                MEMORY[0x186DB563C](v51, -1, -1);
                goto LABEL_75;
              }
LABEL_90:
              __break(1u);
            }
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }
        }
        if ((v15 & 0x2000000000000000) != 0)
        {
          v70 = v14;
          v71 = v15 & 0xFFFFFFFFFFFFFFLL;
          v31 = *((_BYTE *)&v70 + v29);
          if (v27 == v25)
            goto LABEL_31;
          goto LABEL_26;
        }
        v30 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v14 & 0x1000000000000000) == 0)
          v30 = sub_183B91E78();
        v31 = *(_BYTE *)(v30 + v29);
        if (v27 != v25)
          goto LABEL_26;
LABEL_31:
        v26 = sub_18329687C(v26, v14, v15);
        if ((v15 & 0x1000000000000000) != 0)
          goto LABEL_27;
LABEL_14:
        v26 = (v26 & 0xFFFFFFFFFFFF0000) + 65540;
        if (v31 < 0)
          goto LABEL_67;
      }
    }
    v60 = v55;
    v70 = v9;
    v71 = v10 & 0xFFFFFFFFFFFFFFLL;
    MEMORY[0x1E0C80A78](v19);
    v59 = &v55[-8];
    v55[-6] = sub_1832F149C;
    v55[-5] = v32;
    v55[-4] = &v70;
    v55[-3] = v9;
    v55[-2] = v10;
    v55[-1] = v72;
    if ((v15 & 0x2000000000000000) != 0)
      v33 = HIBYTE(v15) & 0xF;
    else
      v33 = v14 & 0xFFFFFFFFFFFFLL;
    if ((v15 & 0x1000000000000000) != 0)
      v34 = (v14 >> 59) & 1;
    else
      v34 = 1;
    v58 = v34;
    v35 = 4 << v34;
    v36 = 15;
    do
    {
      while (1)
      {
        if (4 * v33 == v36 >> 14)
        {
LABEL_59:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v42 = v61;
          v43 = sub_1832E7174((void (*)(char *__return_ptr, _QWORD *))sub_1832F14DC, (uint64_t)v59, v14, v15);
          v61 = v42;
          v4 = v66;
          goto LABEL_76;
        }
        v37 = v36 & 0xC;
        v38 = v36;
        if (v37 == v35)
          v38 = sub_18329687C(v36, v14, v15);
        v39 = v38 >> 16;
        if (v38 >> 16 >= v33)
        {
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
          goto LABEL_88;
        }
        if ((v15 & 0x1000000000000000) == 0)
          break;
        v41 = sub_183B91848();
        if (v37 == v35)
          goto LABEL_57;
LABEL_52:
        if ((v15 & 0x1000000000000000) != 0)
          goto LABEL_53;
LABEL_40:
        v36 = (v36 & 0xFFFFFFFFFFFF0000) + 65540;
        if (v41 < 0)
          goto LABEL_60;
      }
      if ((v15 & 0x2000000000000000) != 0)
      {
        v69[0] = v14;
        v69[1] = v15 & 0xFFFFFFFFFFFFFFLL;
        v41 = *((_BYTE *)v69 + v39);
        if (v37 == v35)
          goto LABEL_57;
        goto LABEL_52;
      }
      v40 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v14 & 0x1000000000000000) == 0)
        v40 = sub_183B91E78();
      v41 = *(_BYTE *)(v40 + v39);
      if (v37 != v35)
        goto LABEL_52;
LABEL_57:
      v36 = sub_18329687C(v36, v14, v15);
      if ((v15 & 0x1000000000000000) == 0)
        goto LABEL_40;
LABEL_53:
      if (v33 <= v36 >> 16)
        goto LABEL_84;
      v36 = sub_183B91818();
    }
    while ((v41 & 0x80) == 0);
LABEL_60:
    v44 = 11;
    if ((_DWORD)v58)
      v44 = 7;
    v45 = sub_1832F0C5C(0xFuLL, v44 | (v33 << 16), v14, v15);
    v46 = v45 + 1;
    if (__OFADD__(v45, 1))
      goto LABEL_87;
    if (v46 < 0)
      goto LABEL_89;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v46 >= 1025)
    {
      isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
      if ((isStackAllocationSafe & 1) == 0)
        goto LABEL_74;
    }
LABEL_73:
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    sub_1832E80A8((uint64_t)v55 - v50, v46, v14, v15);
    sub_183B917D0();
    sub_183B917D0();
    v43 = (*(uint64_t (**)(void))(v64 + 16))();
LABEL_75:
    v4 = v66;
LABEL_76:
    LOBYTE(v69[0]) = v43 & 1;
    swift_bridgeObjectRelease();
LABEL_77:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ++v4;
  }
  while ((v69[0] & 1) != 0);
  result = swift_release();
  v54 = 0;
LABEL_81:
  *v56 = v54;
  return result;
}

uint64_t _nw_http_fields_enumerate_field(uint64_t a1, void *a2)
{
  return _nw_http_fields_enumerateTm(a1, a2, (uint64_t)sub_1832F108C);
}

uint64_t sub_1832EB050@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  result = swift_beginAccess();
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 16);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *a1;
      swift_beginAccess();
      v12 = *(_QWORD *)(v11 + 16);
      if (v10 >= *(_QWORD *)(v12 + 16))
        __break(1u);
      v13 = v12 + v9;
      v14 = *(_QWORD *)(v13 + 40);
      v15 = *(_QWORD *)(v13 + 48);
      v16 = *(_QWORD *)(v13 + 56);
      v17 = *(_BYTE *)(v13 + 64);
      v18 = *(_QWORD *)(v13 + 72);
      v19 = *(_QWORD *)(v13 + 80);
      *(_QWORD *)&v27 = *(_QWORD *)(v13 + 32);
      *((_QWORD *)&v27 + 1) = v14;
      v28 = v15;
      v29 = v16;
      v30 = v17;
      v31 = v18;
      v32 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LODWORD(v16) = (*(uint64_t (**)(uint64_t, unint64_t, __int128 *))(a2 + 16))(a2, v10, &v27);
      v21 = v27;
      v22 = v28;
      v23 = v29;
      v24 = v30;
      v25 = v31;
      v26 = v32;
      result = HTTPFields.subscript.setter((uint64_t *)&v21, v10);
      if (!(_DWORD)v16)
        break;
      ++v10;
      v9 += 64;
      if (v8 == v10)
        goto LABEL_6;
    }
    v20 = 0;
  }
  else
  {
LABEL_6:
    v20 = 1;
  }
  *a3 = v20;
  return result;
}

uint64_t _nw_http_fields_enumerate_const_field(uint64_t a1, void *a2)
{
  return _nw_http_fields_enumerateTm(a1, a2, (uint64_t)sub_1832F1094);
}

uint64_t _nw_http_fields_enumerateTm(uint64_t a1, void *aBlock, uint64_t a3)
{
  void *v5;
  void *v6;
  _QWORD v8[3];
  uint64_t v9;

  v5 = _Block_copy(aBlock);
  v6 = _Block_copy(v5);
  swift_retain();
  v8[2] = v6;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 80))(&v9, a3, v8, MEMORY[0x1E0DEAFA0]);
  swift_release();
  _Block_release(v6);
  _Block_release(v5);
  return v9;
}

uint64_t sub_1832EB258@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[4];
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *a1 + 16;
  swift_retain();
  swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      if (v10 >= v8)
        __break(1u);
      v11 = v7 + v9;
      v12 = *(_QWORD *)(v11 + 72);
      v13 = *(_QWORD *)(v11 + 80);
      v14 = *(_BYTE *)(v11 + 64);
      v15 = *(_QWORD *)(v11 + 48);
      v16 = *(_QWORD *)(v11 + 56);
      v17 = *(_QWORD *)(v11 + 40);
      v19[0] = *(_QWORD *)(v11 + 32);
      v19[1] = v17;
      v19[2] = v15;
      v19[3] = v16;
      v20 = v14;
      v21 = v12;
      v22 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LOBYTE(v13) = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD *))(a2 + 16))(a2, v10, v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
        break;
      ++v10;
      v7 = *(_QWORD *)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 16);
      v9 += 64;
      if (v10 == v8)
        goto LABEL_6;
    }
    result = swift_release();
    *a3 = 0;
  }
  else
  {
LABEL_6:
    result = swift_release();
    *a3 = 1;
  }
  return result;
}

uint64_t sub_1832EB3BC(void (*a1)(uint64_t))
{
  uint64_t v1;

  swift_beginAccess();
  a1(v1 + 296);
  return swift_endAccess();
}

_QWORD *sub_1832EB41C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  uint64_t v4;
  _QWORD __dst[36];

  v3 = (const void *)(v1 + 16);
  swift_beginAccess();
  memcpy(__dst, v3, sizeof(__dst));
  a1[3] = (uint64_t)&type metadata for HTTPRequest;
  a1[4] = (uint64_t)&off_1E148E0A0;
  v4 = swift_allocObject();
  *a1 = v4;
  memcpy((void *)(v4 + 16), v3, 0x120uLL);
  return sub_18328212C(__dst);
}

uint64_t sub_1832EB4B8()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  _QWORD __dst[36];

  v1 = (const void *)(v0 + 16);
  swift_beginAccess();
  memcpy(__dst, v1, sizeof(__dst));
  v2 = swift_allocObject();
  memcpy((void *)(v2 + 16), v1, 0x120uLL);
  sub_18328212C(__dst);
  return v2;
}

uint64_t sub_1832EB538(__objc2_class **a1)
{
  uint64_t v1;
  __objc2_class **v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _BYTE v7[280];
  _BYTE v8[280];
  _QWORD __dst[36];
  _QWORD v10[36];

  if (*a1 != _TtC7NetworkP33_CFBD4EB2ABB20EFC96032331681B9C8315__NWHTTPRequest)
    goto LABEL_5;
  v2 = a1;
  swift_beginAccess();
  memcpy(__dst, (const void *)(v1 + 16), sizeof(__dst));
  v2 += 2;
  swift_beginAccess();
  memcpy(v10, v2, sizeof(v10));
  memcpy(v8, __dst, sizeof(v8));
  memcpy(v7, v2, sizeof(v7));
  sub_18328212C(__dst);
  sub_18328212C(v10);
  if (!_s7Network11HTTPRequestV18PseudoHeaderFieldsV2eeoiySbAE_AEtFZ_0((uint64_t)v8, (uint64_t)v7))
  {
    sub_1832CF378(v10);
    sub_1832CF378(__dst);
LABEL_5:
    v5 = 0;
    return v5 & 1;
  }
  v3 = __dst[35];
  v4 = v10[35];
  swift_retain();
  swift_retain();
  v5 = sub_183297E78(v3, v4);
  swift_release();
  swift_release();
  sub_1832CF378(v10);
  sub_1832CF378(__dst);
  return v5 & 1;
}

_QWORD *sub_1832EB66C()
{
  uint64_t v0;
  _QWORD v2[36];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  return sub_1832CF378(v2);
}

uint64_t sub_1832EB6A4()
{
  uint64_t v0;
  _QWORD v2[36];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  sub_1832CF378(v2);
  return swift_deallocClassInstance();
}

uint64_t sub_1832EB6F0(char *a1, char *a2, char *a3, char *a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  size_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  size_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t result;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  size_t v47;
  unsigned __int8 *(*v48)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>);
  uint64_t v49;

  if ("GET" == a1)
  {
    v9 = 0xE300000000000000;
    v11 = 5522759;
  }
  else if ("HEAD" == a1)
  {
    v9 = 0xE400000000000000;
    v11 = 1145128264;
  }
  else if ("POST" == a1)
  {
    v9 = 0xE400000000000000;
    v11 = 1414745936;
  }
  else if ("PUT" == a1)
  {
    v9 = 0xE300000000000000;
    v11 = 5526864;
  }
  else if ("DELETE" == a1)
  {
    v9 = 0xE600000000000000;
    v11 = 0x4554454C4544;
  }
  else if ("CONNECT" == a1)
  {
    v9 = 0xE700000000000000;
    v11 = 0x5443454E4E4F43;
  }
  else if ("OPTIONS" == a1)
  {
    v9 = 0xE700000000000000;
    v11 = 0x534E4F4954504FLL;
  }
  else if ("TRACE" == a1)
  {
    v9 = 0xE500000000000000;
    v11 = 0x4543415254;
  }
  else if ("PATCH" == a1)
  {
    v9 = 0xE500000000000000;
    v11 = 0x4843544150;
  }
  else if ("CONNECT-UDP" == a1)
  {
    v9 = 0xEB00000000504455;
    v11 = 0x2D5443454E4E4F43;
  }
  else
  {
    v7 = sub_183B91800();
    v9 = v8;
    v10 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v10 = v7 & 0xFFFFFFFFFFFFLL;
    if (!v10 || (v11 = v7, (sub_18329D8B4(v7, v8) & 1) == 0))
    {
      swift_bridgeObjectRelease();
LABEL_93:
      result = sub_183B91F5C();
      __break(1u);
      return result;
    }
  }
  if (!a2)
  {
    v15 = 0;
    v17 = 0;
    goto LABEL_39;
  }
  v12 = strlen(a2);
  if (!v12)
    goto LABEL_35;
  if ((*a2 & 0x80000000) == 0)
  {
    if (v12 == 1)
      goto LABEL_35;
    if ((a2[1] & 0x80000000) == 0)
    {
      v13 = v12 - 2;
      if (v12 != 2)
      {
        v14 = a2 + 2;
        while ((*v14 & 0x80000000) == 0)
        {
          ++v14;
          if (!--v13)
            goto LABEL_35;
        }
        goto LABEL_37;
      }
LABEL_35:
      v15 = sub_183B917A0();
      v17 = v16;
      goto LABEL_38;
    }
  }
LABEL_37:
  v46 = a2;
  v47 = v12;
  v48 = sub_1832FE3C4;
  v49 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
  sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
  sub_183B91794();
  v15 = 0;
  v17 = 0xE000000000000000;
LABEL_38:
  if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v15, v17))
    goto LABEL_93;
LABEL_39:
  if (!a3)
  {
    v22 = 0;
    goto LABEL_52;
  }
  v18 = strlen(a3);
  if (!v18)
    goto LABEL_48;
  if ((*a3 & 0x80000000) == 0)
  {
    if (v18 == 1)
      goto LABEL_48;
    if ((a3[1] & 0x80000000) == 0)
    {
      v19 = v18 - 2;
      if (v18 != 2)
      {
        v20 = a3 + 2;
        while ((*v20 & 0x80000000) == 0)
        {
          ++v20;
          if (!--v19)
            goto LABEL_48;
        }
        goto LABEL_50;
      }
LABEL_48:
      a3 = (char *)sub_183B917A0();
      v22 = v21;
      goto LABEL_51;
    }
  }
LABEL_50:
  v46 = a3;
  v47 = v18;
  v48 = sub_1832FE3C4;
  v49 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
  sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
  sub_183B91794();
  a3 = 0;
  v22 = 0xE000000000000000;
LABEL_51:
  if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0((uint64_t)a3, v22))
    goto LABEL_93;
LABEL_52:
  v44 = v11;
  v45 = v9;
  if (!a4)
  {
    v27 = 0;
    goto LABEL_65;
  }
  v23 = strlen(a4);
  if (!v23)
    goto LABEL_61;
  if ((*a4 & 0x80000000) == 0)
  {
    if (v23 == 1)
      goto LABEL_61;
    if ((a4[1] & 0x80000000) == 0)
    {
      v24 = v23 - 2;
      if (v23 != 2)
      {
        v25 = a4 + 2;
        while ((*v25 & 0x80000000) == 0)
        {
          ++v25;
          if (!--v24)
            goto LABEL_61;
        }
        goto LABEL_63;
      }
LABEL_61:
      a4 = (char *)sub_183B917A0();
      v27 = v26;
      goto LABEL_64;
    }
  }
LABEL_63:
  v46 = a4;
  v47 = v23;
  v48 = sub_1832FE3C4;
  v49 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
  sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
  sub_183B91794();
  a4 = 0;
  v27 = 0xE000000000000000;
LABEL_64:
  if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0((uint64_t)a4, v27))
    goto LABEL_93;
LABEL_65:
  if (v17)
    v28 = 0x656D656863733ALL;
  else
    v28 = 0;
  if (v17)
    v29 = 0xE700000000000000;
  else
    v29 = 0;
  if (v17)
    v30 = v15;
  else
    v30 = 0;
  if (v22)
    v31 = 0x69726F687475613ALL;
  else
    v31 = 0;
  v32 = v17;
  if (v22)
    v33 = 0xEA00000000007974;
  else
    v33 = 0;
  if (v22)
    v34 = a3;
  else
    v34 = 0;
  v41 = v30;
  v42 = v34;
  v40 = v22;
  if (v27)
    v35 = 0x687461703ALL;
  else
    v35 = 0;
  if (v27)
    v36 = 0xE500000000000000;
  else
    v36 = 0;
  if (v27)
    v37 = a4;
  else
    v37 = 0;
  v43 = v37;
  HTTPFields.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8], &v46);
  v38 = v46;
  type metadata accessor for __NWHTTPRequest();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x646F6874656D3ALL;
  *(_QWORD *)(result + 24) = 0xE700000000000000;
  *(_QWORD *)(result + 32) = 0x646F6874656D3ALL;
  *(_QWORD *)(result + 40) = 0xE700000000000000;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = v44;
  *(_QWORD *)(result + 64) = v45;
  *(_QWORD *)(result + 72) = v28;
  *(_QWORD *)(result + 80) = v29;
  *(_QWORD *)(result + 88) = v28;
  *(_QWORD *)(result + 96) = v29;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = v41;
  *(_QWORD *)(result + 120) = v32;
  *(_QWORD *)(result + 128) = v31;
  *(_QWORD *)(result + 136) = v33;
  *(_QWORD *)(result + 144) = v31;
  *(_QWORD *)(result + 152) = v33;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = v42;
  *(_QWORD *)(result + 176) = v40;
  *(_QWORD *)(result + 184) = v35;
  *(_QWORD *)(result + 192) = v36;
  *(_QWORD *)(result + 200) = v35;
  *(_QWORD *)(result + 208) = v36;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = v43;
  *(_QWORD *)(result + 232) = v27;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_QWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 296) = v38;
  return result;
}

uint64_t sub_1832EBDC4(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];
  _BYTE v23[304];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_183B913A4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v20 - v11;
  v13 = sub_183B91800();
  v15 = v14;
  v16 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v16 = v13 & 0xFFFFFFFFFFFFLL;
  if (v16 && (v17 = v13, (sub_18329D8B4(v13, v14) & 1) != 0))
  {
    sub_1832EC040(a2, (uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
      v22[0] = v17;
      v22[1] = v15;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
      HTTPFields.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8], &v21);
      HTTPRequest.init(method:url:headerFields:)(v22, (uint64_t)v10, &v21, v23);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      type metadata accessor for __NWHTTPRequest();
      v18 = swift_allocObject();
      memcpy((void *)(v18 + 16), v23, 0x120uLL);
      return v18;
    }
    sub_1830620D4((uint64_t)v5, &qword_1EDCDC358);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  result = sub_183B91F5C();
  __break(1u);
  return result;
}

uint64_t sub_1832EC040@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  CFIndex v10;
  const __CFAllocator *v11;
  CFStringEncoding v12;
  CFURLRef v13;
  CFURLRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v19 - v8;
  v10 = strlen(a1);
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v12 = sub_183B9132C();
  v13 = CFURLCreateAbsoluteURLWithBytes(v11, (const UInt8 *)a1, v10, v12, 0, 0);
  if (v13)
  {
    v14 = v13;
    sub_183B91374();

    v15 = sub_183B913A4();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 0, 1, v15);
  }
  else
  {
    v15 = sub_183B913A4();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  }
  sub_1832F1428((uint64_t)v7, (uint64_t)v9);
  sub_183B913A4();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15) == 1)
  {
    sub_1830620D4((uint64_t)v9, &qword_1EDCDC358);
    v17 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2, v9, v15);
    v17 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a2, v17, 1, v15);
}

uint64_t _nw_http_request_has_method(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  swift_retain();
  v2 = sub_183B91800();
  v4 = v3;
  swift_beginAccess();
  if (*(_QWORD *)(a1 + 56) == v2 && *(_QWORD *)(a1 + 64) == v4)
    v6 = 1;
  else
    v6 = sub_183B920F4();
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  return v6 & 1;
}

uint64_t sub_1832EC274(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;

  swift_retain();
  v2 = sub_183B91800();
  v4 = v3;
  v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v5 = v2 & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v6 = v2;
    if ((sub_18329D8B4(v2, v3) & 1) != 0)
    {
      swift_beginAccess();
      v8 = *(_QWORD *)(a1 + 16);
      v7 = *(_QWORD *)(a1 + 24);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_BYTE *)(a1 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9 == 0x646F6874656D3ALL && v10 == 0xE700000000000000 || (sub_183B920F4() & 1) != 0)
      {
        if ((sub_18329D8B4(v6, v4) & 1) != 0)
        {
          *(_QWORD *)(a1 + 16) = v8;
          *(_QWORD *)(a1 + 24) = v7;
          *(_QWORD *)(a1 + 32) = v9;
          *(_QWORD *)(a1 + 40) = v10;
          *(_BYTE *)(a1 + 48) = v11;
          *(_QWORD *)(a1 + 56) = v6;
          *(_QWORD *)(a1 + 64) = v4;
          swift_endAccess();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        __break(1u);
      }
      __break(1u);
    }
  }
  swift_bridgeObjectRelease();
  result = sub_183B91F5C();
  __break(1u);
  return result;
}

uint64_t sub_1832EC440(uint64_t a1, char *a2)
{
  size_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  swift_retain();
  if (!a2)
  {
    swift_beginAccess();
    v10 = *(_QWORD *)(a1 + 72);
    v11 = *(_QWORD *)(a1 + 80);
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_QWORD *)(a1 + 120) = 0;
    sub_18324C184(v10, v11);
    return swift_release();
  }
  v4 = strlen(a2);
  if (!v4)
    goto LABEL_10;
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1)
      goto LABEL_10;
    if ((a2[1] & 0x80000000) == 0)
    {
      v5 = v4 - 2;
      if (v4 != 2)
      {
        v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5)
            goto LABEL_10;
        }
        goto LABEL_12;
      }
LABEL_10:
      v7 = sub_183B917A0();
      v9 = v8;
      goto LABEL_13;
    }
  }
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
  sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
  sub_183B91794();
  v7 = 0;
  v9 = 0xE000000000000000;
LABEL_13:
  if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v7, v9))
  {
    v16 = v7;
    v12 = 1;
    swift_beginAccess();
    v13 = *(_QWORD *)(a1 + 80);
    if (v13)
      v12 = *(unsigned __int8 *)(a1 + 104);
    v14 = *(_QWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = xmmword_183BA5830;
    *(_OWORD *)(a1 + 88) = xmmword_183BA5830;
    *(_QWORD *)(a1 + 104) = v12;
    *(_QWORD *)(a1 + 112) = v16;
    *(_QWORD *)(a1 + 120) = v9;
    swift_bridgeObjectRetain();
    sub_18324C184(v14, v13);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  result = sub_183B91F5C();
  __break(1u);
  return result;
}

uint64_t sub_1832EC67C(uint64_t a1, char *a2)
{
  size_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  swift_retain();
  if (!a2)
  {
    swift_beginAccess();
    v10 = *(_QWORD *)(a1 + 128);
    v11 = *(_QWORD *)(a1 + 136);
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_QWORD *)(a1 + 176) = 0;
    sub_18324C184(v10, v11);
    return swift_release();
  }
  v4 = strlen(a2);
  if (!v4)
    goto LABEL_10;
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1)
      goto LABEL_10;
    if ((a2[1] & 0x80000000) == 0)
    {
      v5 = v4 - 2;
      if (v4 != 2)
      {
        v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5)
            goto LABEL_10;
        }
        goto LABEL_12;
      }
LABEL_10:
      v7 = sub_183B917A0();
      v9 = v8;
      goto LABEL_13;
    }
  }
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
  sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
  sub_183B91794();
  v7 = 0;
  v9 = 0xE000000000000000;
LABEL_13:
  if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v7, v9))
  {
    v16 = v7;
    v12 = 1;
    swift_beginAccess();
    v13 = *(_QWORD *)(a1 + 136);
    if (v13)
      v12 = *(unsigned __int8 *)(a1 + 160);
    v14 = *(_QWORD *)(a1 + 128);
    *(_OWORD *)(a1 + 128) = xmmword_183BA5840;
    *(_OWORD *)(a1 + 144) = xmmword_183BA5840;
    *(_QWORD *)(a1 + 160) = v12;
    *(_QWORD *)(a1 + 168) = v16;
    *(_QWORD *)(a1 + 176) = v9;
    swift_bridgeObjectRetain();
    sub_18324C184(v14, v13);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  result = sub_183B91F5C();
  __break(1u);
  return result;
}

uint64_t sub_1832EC8A8(uint64_t a1, char *a2)
{
  size_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  swift_retain();
  if (!a2)
  {
    swift_beginAccess();
    v10 = *(_QWORD *)(a1 + 184);
    v11 = *(_QWORD *)(a1 + 192);
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_QWORD *)(a1 + 232) = 0;
    sub_18324C184(v10, v11);
    return swift_release();
  }
  v4 = strlen(a2);
  if (!v4)
    goto LABEL_10;
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1)
      goto LABEL_10;
    if ((a2[1] & 0x80000000) == 0)
    {
      v5 = v4 - 2;
      if (v4 != 2)
      {
        v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5)
            goto LABEL_10;
        }
        goto LABEL_12;
      }
LABEL_10:
      v7 = sub_183B917A0();
      v9 = v8;
      goto LABEL_13;
    }
  }
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
  sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
  sub_183B91794();
  v7 = 0;
  v9 = 0xE000000000000000;
LABEL_13:
  if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v7, v9))
  {
    swift_beginAccess();
    v12 = *(_QWORD *)(a1 + 136);
    if (v12)
      v12 = *(unsigned __int8 *)(a1 + 160);
    v13 = *(_QWORD *)(a1 + 184);
    v14 = *(_QWORD *)(a1 + 192);
    *(_OWORD *)(a1 + 184) = xmmword_183BA5850;
    *(_OWORD *)(a1 + 200) = xmmword_183BA5850;
    *(_QWORD *)(a1 + 216) = v12;
    *(_QWORD *)(a1 + 224) = v7;
    *(_QWORD *)(a1 + 232) = v9;
    swift_bridgeObjectRetain();
    sub_18324C184(v13, v14);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  result = sub_183B91F5C();
  __break(1u);
  return result;
}

uint64_t sub_1832ECAD4(uint64_t a1, char *a2)
{
  size_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  swift_retain();
  if (!a2)
  {
    swift_beginAccess();
    v10 = *(_QWORD *)(a1 + 240);
    v11 = *(_QWORD *)(a1 + 248);
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_QWORD *)(a1 + 288) = 0;
    sub_18324C184(v10, v11);
    return swift_release();
  }
  v4 = strlen(a2);
  if (!v4)
    goto LABEL_10;
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1)
      goto LABEL_10;
    if ((a2[1] & 0x80000000) == 0)
    {
      v5 = v4 - 2;
      if (v4 != 2)
      {
        v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5)
            goto LABEL_10;
        }
        goto LABEL_12;
      }
LABEL_10:
      v7 = sub_183B917A0();
      v9 = v8;
      goto LABEL_13;
    }
  }
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
  sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
  sub_183B91794();
  v7 = 0;
  v9 = 0xE000000000000000;
LABEL_13:
  if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v7, v9))
  {
    v16 = v7;
    v12 = 1;
    swift_beginAccess();
    v13 = *(_QWORD *)(a1 + 248);
    if (v13)
      v12 = *(unsigned __int8 *)(a1 + 272);
    v14 = *(_QWORD *)(a1 + 240);
    *(_OWORD *)(a1 + 240) = xmmword_183BA5860;
    *(_OWORD *)(a1 + 256) = xmmword_183BA5860;
    *(_QWORD *)(a1 + 272) = v12;
    *(_QWORD *)(a1 + 280) = v16;
    *(_QWORD *)(a1 + 288) = v9;
    swift_bridgeObjectRetain();
    sub_18324C184(v14, v13);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  result = sub_183B91F5C();
  __break(1u);
  return result;
}

void _nw_http_request_access_method(uint64_t a1, void *aBlock)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = _Block_copy(aBlock);
  v4 = _Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  _Block_copy(v4);
  swift_bridgeObjectRetain();
  sub_1832E75C8(v5, v6, (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))v4);
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_extended_connect_protocol(uint64_t a1, void *aBlock)
{
  void *v3;
  void (**v4)(void *, _QWORD);
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = _Block_copy(aBlock);
  v4 = (void (**)(void *, _QWORD))_Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  if (*(_QWORD *)(a1 + 248))
  {
    v5 = MEMORY[0x1E0C80A78](*(_QWORD *)(a1 + 280));
    v6 = MEMORY[0x1E0C80A78](v5);
    sub_1832E6ADC(v6, v7, (uint64_t (*)(char *))sub_1832F10CC);
  }
  else
  {
    v4[2](v4, 0);
  }
  swift_endAccess();
  swift_release();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_scheme(uint64_t a1, void *aBlock)
{
  void *v3;
  void (**v4)(void *, _QWORD);
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = _Block_copy(aBlock);
  v4 = (void (**)(void *, _QWORD))_Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  if (*(_QWORD *)(a1 + 80))
  {
    v5 = MEMORY[0x1E0C80A78](*(_QWORD *)(a1 + 112));
    v6 = MEMORY[0x1E0C80A78](v5);
    sub_1832E6ADC(v6, v7, (uint64_t (*)(char *))sub_1832F1B24);
  }
  else
  {
    v4[2](v4, 0);
  }
  swift_endAccess();
  swift_release();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_authority(uint64_t a1, void *aBlock)
{
  void *v3;
  void (**v4)(void *, _QWORD);
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = _Block_copy(aBlock);
  v4 = (void (**)(void *, _QWORD))_Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  if (*(_QWORD *)(a1 + 136))
  {
    v5 = MEMORY[0x1E0C80A78](*(_QWORD *)(a1 + 168));
    v6 = MEMORY[0x1E0C80A78](v5);
    sub_1832E6ADC(v6, v7, (uint64_t (*)(char *))sub_1832F1B24);
  }
  else
  {
    v4[2](v4, 0);
  }
  swift_endAccess();
  swift_release();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_path(uint64_t a1, void *aBlock)
{
  void *v3;
  void (**v4)(void *, _QWORD);
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = _Block_copy(aBlock);
  v4 = (void (**)(void *, _QWORD))_Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  if (*(_QWORD *)(a1 + 192))
  {
    v5 = MEMORY[0x1E0C80A78](*(_QWORD *)(a1 + 224));
    v6 = MEMORY[0x1E0C80A78](v5);
    sub_1832E6ADC(v6, v7, (uint64_t (*)(char *))sub_1832F1B24);
  }
  else
  {
    v4[2](v4, 0);
  }
  swift_endAccess();
  swift_release();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_method_field(uint64_t a1, void *a2)
{
  _nw_http_request_access_method_fieldTm(a1, a2, sub_1832ED1E0);
}

void sub_1832ED1E0(uint64_t a1, void *aBlock)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(_QWORD *, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v18 = *(_QWORD *)(a1 + 16);
  v19 = v4;
  *(_QWORD *)&v20 = v5;
  *((_QWORD *)&v20 + 1) = v6;
  v21 = v7;
  v22 = v8;
  v23 = v9;
  v10 = (void (*)(_QWORD *, uint64_t *))v3[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v3, &v18);
  v11 = v18;
  v12 = v19;
  v13 = v20;
  v14 = v21;
  v15 = v22;
  v16 = v23;
  if (v20 != __PAIR128__(0xE700000000000000, 0x646F6874656D3ALL) && (sub_183B920F4() & 1) == 0)
LABEL_10:
    __break(1u);
  v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v17 = v15 & 0xFFFFFFFFFFFFLL;
  if (!v17)
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((sub_18329D8B4(v15, v16) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v16;
  swift_endAccess();
  swift_release();
  _Block_release(v3);
}

uint64_t _nw_http_request_access_scheme_field(uint64_t a1, void *a2)
{
  return _nw_http_request_access_scheme_fieldTm(a1, a2, (uint64_t (*)(uint64_t, void *))sub_1832ED3B0);
}

BOOL sub_1832ED3B0(uint64_t *a1, void *aBlock)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  v4 = a1[10];
  if (v4)
  {
    v5 = a1[14];
    v6 = a1[15];
    v8 = a1[12];
    v7 = a1[13];
    v9 = a1[11];
    v19 = a1[9];
    v20 = v4;
    v21 = v9;
    v22 = v8;
    v23 = v7;
    v24 = v5;
    v25 = v6;
    v10 = (void (*)(_QWORD *, uint64_t *))v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v3, &v19);
    v11 = v19;
    v12 = v20;
    v13 = v21;
    v14 = v22;
    v15 = v23;
    v16 = v24;
    v17 = v25;
    if ((v21 != 0x656D656863733ALL || v22 != 0xE700000000000000) && (sub_183B920F4() & 1) == 0)
      __break(1u);
    sub_18324C184(a1[9], a1[10]);
    a1[9] = v11;
    a1[10] = v12;
    a1[11] = v13;
    a1[12] = v14;
    a1[13] = v15;
    a1[14] = v16;
    a1[15] = v17;
  }
  swift_endAccess();
  swift_release();
  _Block_release(v3);
  return v4 != 0;
}

uint64_t _nw_http_request_access_authority_field(uint64_t a1, void *a2)
{
  return _nw_http_request_access_scheme_fieldTm(a1, a2, (uint64_t (*)(uint64_t, void *))sub_1832ED550);
}

BOOL sub_1832ED550(uint64_t *a1, void *aBlock)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  v4 = a1[17];
  if (v4)
  {
    v5 = a1[21];
    v6 = a1[22];
    v8 = a1[19];
    v7 = a1[20];
    v9 = a1[18];
    v19 = a1[16];
    v20 = v4;
    v21 = v9;
    v22 = v8;
    v23 = v7;
    v24 = v5;
    v25 = v6;
    v10 = (void (*)(_QWORD *, uint64_t *))v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v3, &v19);
    v11 = v19;
    v12 = v20;
    v13 = v21;
    v14 = v22;
    v15 = v23;
    v17 = v24;
    v16 = v25;
    if ((v21 != 0x69726F687475613ALL || v22 != 0xEA00000000007974) && (sub_183B920F4() & 1) == 0)
      __break(1u);
    sub_18324C184(a1[16], a1[17]);
    a1[16] = v11;
    a1[17] = v12;
    a1[18] = v13;
    a1[19] = v14;
    a1[20] = v15;
    a1[21] = v17;
    a1[22] = v16;
  }
  swift_endAccess();
  swift_release();
  _Block_release(v3);
  return v4 != 0;
}

uint64_t _nw_http_request_access_path_field(uint64_t a1, void *a2)
{
  return _nw_http_request_access_scheme_fieldTm(a1, a2, (uint64_t (*)(uint64_t, void *))sub_1832ED6F8);
}

BOOL sub_1832ED6F8(uint64_t *a1, void *aBlock)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  v4 = a1[24];
  if (v4)
  {
    v5 = a1[28];
    v6 = a1[29];
    v8 = a1[26];
    v7 = a1[27];
    v9 = a1[25];
    v19 = a1[23];
    v20 = v4;
    v21 = v9;
    v22 = v8;
    v23 = v7;
    v24 = v5;
    v25 = v6;
    v10 = (void (*)(_QWORD *, uint64_t *))v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v3, &v19);
    v11 = v19;
    v12 = v20;
    v13 = v21;
    v14 = v22;
    v15 = v23;
    v16 = v24;
    v17 = v25;
    if ((v21 != 0x687461703ALL || v22 != 0xE500000000000000) && (sub_183B920F4() & 1) == 0)
      __break(1u);
    sub_18324C184(a1[23], a1[24]);
    a1[23] = v11;
    a1[24] = v12;
    a1[25] = v13;
    a1[26] = v14;
    a1[27] = v15;
    a1[28] = v16;
    a1[29] = v17;
  }
  swift_endAccess();
  swift_release();
  _Block_release(v3);
  return v4 != 0;
}

uint64_t _nw_http_request_access_extended_connect_protocol_field(uint64_t a1, void *a2)
{
  return _nw_http_request_access_scheme_fieldTm(a1, a2, (uint64_t (*)(uint64_t, void *))sub_1832ED8E0);
}

uint64_t _nw_http_request_access_scheme_fieldTm(uint64_t a1, void *aBlock, uint64_t (*a3)(uint64_t, void *))
{
  void *v5;

  v5 = _Block_copy(aBlock);
  LOBYTE(a3) = a3(a1, v5);
  _Block_release(v5);
  return a3 & 1;
}

BOOL sub_1832ED8E0(uint64_t *a1, void *aBlock)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  v4 = a1[31];
  if (v4)
  {
    v5 = a1[35];
    v6 = a1[36];
    v8 = a1[33];
    v7 = a1[34];
    v9 = a1[32];
    v19 = a1[30];
    v20 = v4;
    v21 = v9;
    v22 = v8;
    v23 = v7;
    v24 = v5;
    v25 = v6;
    v10 = (void (*)(_QWORD *, uint64_t *))v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v3, &v19);
    v11 = v19;
    v12 = v20;
    v13 = v21;
    v14 = v22;
    v15 = v23;
    v17 = v24;
    v16 = v25;
    if ((v21 != 0x6F636F746F72703ALL || v22 != 0xE90000000000006CLL) && (sub_183B920F4() & 1) == 0)
      __break(1u);
    sub_18324C184(a1[30], a1[31]);
    a1[30] = v11;
    a1[31] = v12;
    a1[32] = v13;
    a1[33] = v14;
    a1[34] = v15;
    a1[35] = v17;
    a1[36] = v16;
  }
  swift_endAccess();
  swift_release();
  _Block_release(v3);
  return v4 != 0;
}

uint64_t sub_1832EDA80(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v14 - v7;
  v9 = sub_183B913A4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_1832EC040(a2, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1830620D4((uint64_t)v8, &qword_1EDCDC358);
    result = sub_183B91F5C();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v6, v12, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    HTTPRequest.url.setter((uint64_t)v6);
    swift_endAccess();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

UInt8 *sub_1832EDC6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  UInt8 *v9;
  const __CFURL *v10;
  UInt8 *result;
  CFIndex v12;
  UInt8 *v13;
  _BYTE v15[288];

  v2 = sub_183B913A4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_retain();
  swift_beginAccess();
  memcpy(v15, (const void *)(a1 + 16), sizeof(v15));
  HTTPRequest.url.getter((uint64_t)v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
  {
    sub_1830620D4((uint64_t)v8, &qword_1EDCDC358);
    v9 = 0;
LABEL_6:
    swift_endAccess();
    swift_release();
    return v9;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v5, v8, v2);
  sub_1830620D4((uint64_t)v8, &qword_1EDCDC358);
  v10 = (const __CFURL *)sub_183B9135C();
  result = (UInt8 *)CFURLGetBytes(v10, 0, 0);
  v12 = (CFIndex)(result + 1);
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = result;
    result = (UInt8 *)malloc((size_t)(result + 1));
    if (result)
    {
      v9 = result;
      CFURLGetBytes(v10, result, v12);
      v13[(_QWORD)v9] = 0;

      (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t _nw_http_request_set_header_fields(uint64_t a1, uint64_t a2)
{
  return _nw_http_request_set_header_fieldsTm(a1, a2, (uint64_t)sub_1832F10F4);
}

uint64_t _nw_http_request_copy_header_fields(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_retain();
  swift_beginAccess();
  v2 = *(_QWORD *)(a1 + 296);
  type metadata accessor for __NWHTTPFields();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  swift_retain();
  swift_release();
  return v3;
}

uint64_t sub_1832EDEB4(void (*a1)(uint64_t))
{
  uint64_t v1;

  swift_beginAccess();
  a1(v1 + 88);
  return swift_endAccess();
}

uint64_t sub_1832EDF14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v7 = *(_BYTE *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 80);
  v14 = *(_QWORD *)(v1 + 72);
  v11 = *(_QWORD *)(v1 + 88);
  a1[3] = (uint64_t)&type metadata for HTTPResponse;
  a1[4] = (uint64_t)&off_1E148EE30;
  v12 = swift_allocObject();
  *a1 = v12;
  *(_QWORD *)(v12 + 16) = v4;
  *(_QWORD *)(v12 + 24) = v3;
  *(_QWORD *)(v12 + 32) = v6;
  *(_QWORD *)(v12 + 40) = v5;
  *(_BYTE *)(v12 + 48) = v7;
  *(_QWORD *)(v12 + 56) = v9;
  *(_QWORD *)(v12 + 64) = v8;
  *(_QWORD *)(v12 + 72) = v14;
  *(_QWORD *)(v12 + 80) = v10;
  *(_QWORD *)(v12 + 88) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1832EDFF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = *(_BYTE *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 88);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v2;
  *(_QWORD *)(v10 + 24) = v1;
  *(_QWORD *)(v10 + 32) = v4;
  *(_QWORD *)(v10 + 40) = v3;
  *(_BYTE *)(v10 + 48) = v5;
  *(_QWORD *)(v10 + 56) = v7;
  *(_QWORD *)(v10 + 64) = v6;
  *(_QWORD *)(v10 + 72) = v12;
  *(_QWORD *)(v10 + 80) = v8;
  *(_QWORD *)(v10 + 88) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return v10;
}

uint64_t sub_1832EE0C8(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;

  if (*(__objc2_class **)a1 == _TtC7NetworkP33_CFBD4EB2ABB20EFC96032331681B9C8316__NWHTTPResponse)
  {
    swift_beginAccess();
    v4 = *(_QWORD *)(v1 + 32);
    v5 = *(_QWORD *)(v1 + 40);
    v6 = *(_BYTE *)(v1 + 48);
    v7 = *(_OWORD *)(v1 + 56);
    v8 = *(_QWORD *)(v1 + 72);
    v22 = *(_OWORD *)(v1 + 16);
    v23 = v4;
    v24 = v5;
    v25 = v6;
    v26 = v7;
    v27 = v8;
    v28 = *(_OWORD *)(v1 + 80);
    swift_beginAccess();
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(_BYTE *)(a1 + 48);
    v12 = *(_OWORD *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 72);
    v15 = *(_OWORD *)(a1 + 16);
    v16 = v9;
    v17 = v10;
    v18 = v11;
    v19 = v12;
    v20 = v13;
    v21 = *(_OWORD *)(a1 + 80);
    v2 = _s7Network12HTTPResponseV2eeoiySbAC_ACtFZ_0((uint64_t)&v22, (uint64_t)&v15);
  }
  else
  {
    v2 = 0;
  }
  return v2 & 1;
}

uint64_t sub_1832EE1AC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832EE204()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1832EE26C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;

  v2 = xmmword_183BA4660;
  v3 = 0xE800000000000000;
  switch((int)result)
  {
    case 100:
      goto LABEL_51;
    case 101:
      v2 = xmmword_183BA4670;
      v4 = "Switching Protocols";
      goto LABEL_50;
    case 103:
      v2 = xmmword_183BA4680;
      v3 = 0xEB0000000073746ELL;
      goto LABEL_51;
    case 200:
      v2 = xmmword_183BA4690;
      v3 = 0xE200000000000000;
      goto LABEL_51;
    case 201:
      v2 = xmmword_183BA46A0;
      v3 = 0xE700000000000000;
      goto LABEL_51;
    case 202:
      v2 = xmmword_183BA46B0;
      v3 = 0xE800000000000000;
      goto LABEL_51;
    case 203:
      v2 = xmmword_183BA46C0;
      v4 = "Non-Authoritative Information";
      goto LABEL_50;
    case 204:
      v2 = xmmword_183BA46D0;
      v3 = 0xEA0000000000746ELL;
      goto LABEL_51;
    case 205:
      v2 = xmmword_183BA46E0;
      v3 = 0xED0000746E65746ELL;
      goto LABEL_51;
    case 206:
      v2 = xmmword_183BA46F0;
      v3 = 0xEF746E65746E6F43;
      goto LABEL_51;
    case 300:
      v2 = xmmword_183BA4700;
      v4 = "Multiple Choices";
      goto LABEL_50;
    case 301:
      v2 = xmmword_183BA4710;
      v4 = "Moved Permanently";
      goto LABEL_50;
    case 302:
      v2 = xmmword_183BA4720;
      v3 = 0xE500000000000000;
      goto LABEL_51;
    case 303:
      v3 = 0xE900000000000072;
      v2 = xmmword_183BA4730;
      goto LABEL_51;
    case 304:
      v2 = xmmword_183BA4740;
      v5 = 26982;
      goto LABEL_29;
    case 307:
      v2 = xmmword_183BA4750;
      v4 = "Temporary Redirect";
      goto LABEL_50;
    case 308:
      v2 = xmmword_183BA4760;
      v4 = "Permanent Redirect";
      goto LABEL_50;
    case 400:
      v2 = xmmword_183BA4770;
      v3 = 0xEB00000000747365;
      goto LABEL_51;
    case 401:
      v2 = xmmword_183BA4780;
      v5 = 31337;
LABEL_29:
      v3 = v5 & 0xFFFF0000FFFFLL | 0xEC00000064650000;
      goto LABEL_51;
    case 403:
      v3 = 0xE90000000000006ELL;
      v2 = xmmword_183BA4790;
      goto LABEL_51;
    case 404:
      v2 = xmmword_183BA47A0;
      v3 = 0xE900000000000064;
      goto LABEL_51;
    case 405:
      v2 = xmmword_183BA47B0;
      v4 = "Method Not Allowed";
      goto LABEL_50;
    case 406:
      v2 = xmmword_183BA47C0;
      v3 = 0xEE00656C62617470;
      goto LABEL_51;
    case 407:
      v2 = xmmword_183BA47D0;
      v4 = "Proxy Authentication Required";
      goto LABEL_50;
    case 408:
      v2 = xmmword_183BA47E0;
      goto LABEL_53;
    case 409:
      v2 = xmmword_183BA47F0;
      v3 = 0xE800000000000000;
      goto LABEL_51;
    case 410:
      v2 = xmmword_183BA4800;
      v3 = 0xE400000000000000;
      goto LABEL_51;
    case 411:
      v2 = xmmword_183BA4810;
      v3 = 0xEF64657269757165;
      goto LABEL_51;
    case 412:
      v2 = xmmword_183BA4820;
      v4 = "Precondition Failed";
      goto LABEL_50;
    case 413:
      v2 = xmmword_183BA4830;
      v4 = "Content Too Large";
      goto LABEL_50;
    case 414:
      v2 = xmmword_183BA4840;
      v3 = 0xEC000000676E6F4CLL;
      goto LABEL_51;
    case 415:
      v2 = xmmword_183BA4850;
      v4 = "Unsupported Media Type";
      goto LABEL_50;
    case 416:
      v2 = xmmword_183BA4860;
      v4 = "Range Not Satisfiable";
      goto LABEL_50;
    case 417:
      v2 = xmmword_183BA4870;
      v4 = "Expectation Failed";
      goto LABEL_50;
    case 421:
      v2 = xmmword_183BA4880;
      v4 = "Misdirected Request";
      goto LABEL_50;
    case 422:
      v2 = xmmword_183BA4890;
      v4 = "Unprocessable Content";
      goto LABEL_50;
    case 425:
      v3 = 0xE900000000000079;
      v2 = xmmword_183BA48A0;
      goto LABEL_51;
    case 426:
      v2 = xmmword_183BA48B0;
      v4 = "Upgrade Required";
      goto LABEL_50;
    case 428:
      v2 = xmmword_183BA48C0;
      v4 = "Precondition Required";
      goto LABEL_50;
    case 429:
      v2 = xmmword_183BA48D0;
      v4 = "Too Many Requests";
      goto LABEL_50;
    case 431:
      v2 = xmmword_183BA48E0;
      v4 = "Request Header Fields Too Large";
      goto LABEL_50;
    case 451:
      v2 = xmmword_183BA48F0;
      v4 = "Unavailable For Legal Reasons";
      goto LABEL_50;
    case 500:
      v2 = xmmword_183BA4900;
      v4 = "Internal Server Error";
      goto LABEL_50;
    case 501:
      v2 = xmmword_183BA4910;
      v3 = 0xEF6465746E656D65;
      goto LABEL_51;
    case 502:
      v2 = xmmword_183BA4920;
      v3 = 0xEB00000000796177;
      goto LABEL_51;
    case 503:
      v2 = xmmword_183BA4930;
      v4 = "Service Unavailable";
      goto LABEL_50;
    case 504:
      v2 = xmmword_183BA4940;
LABEL_53:
      v3 = 0xEF74756F656D6954;
      goto LABEL_51;
    case 505:
      v2 = xmmword_183BA4950;
      v4 = "HTTP Version Not Supported";
      goto LABEL_50;
    case 511:
      v2 = xmmword_183BA4960;
      v4 = "Network Authentication Required";
LABEL_50:
      v3 = (unint64_t)(v4 - 32) | 0x8000000000000000;
LABEL_51:
      *(_OWORD *)a2 = v2;
      *(_QWORD *)(a2 + 16) = v3;
      break;
    default:
      result = sub_183B91F5C();
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_1832EE6F0(uint64_t result, char *__s)
{
  char *v2;
  unsigned __int16 v3;
  size_t v4;
  size_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  void *v16;
  uint64_t v17;

  v2 = __s;
  v3 = result;
  if (!__s)
  {
    v8 = 0xE000000000000000;
    goto LABEL_13;
  }
  v4 = strlen(__s);
  if (!v4)
    goto LABEL_10;
  if ((*v2 & 0x80000000) == 0)
  {
    if (v4 == 1)
      goto LABEL_10;
    if ((v2[1] & 0x80000000) == 0)
    {
      v5 = v4 - 2;
      if (v4 != 2)
      {
        v6 = v2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5)
            goto LABEL_10;
        }
        goto LABEL_12;
      }
LABEL_10:
      result = sub_183B917A0();
      v2 = (char *)result;
      v8 = v7;
      goto LABEL_13;
    }
  }
LABEL_12:
  v14 = v2;
  v15 = v4;
  v16 = sub_1832FE3C4;
  v17 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
  sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
  result = sub_183B91794();
  v2 = 0;
  v8 = 0xE000000000000000;
LABEL_13:
  if (v3 > 0x3E7u)
  {
    __break(1u);
  }
  else
  {
    if ((sub_1832D9E5C((unint64_t)v2, v8) & 1) == 0)
    {
      v14 = v2;
      v15 = v8;
      v16 = sub_1832DA498;
      v17 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDD20);
      sub_18327DAB4((unint64_t *)&qword_1EDCDDD28, &qword_1EDCDDD20, MEMORY[0x1E0DEC858]);
      sub_183B91794();
      swift_bridgeObjectRelease();
      v2 = 0;
      v8 = 0xE000000000000000;
    }
    v9 = HTTPFields.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8], &v14);
    v10 = v14;
    MEMORY[0x1E0C80A78](v9);
    swift_bridgeObjectRetain();
    v11 = sub_183B917B8();
    v13 = v12;
    swift_bridgeObjectRelease();
    type metadata accessor for __NWHTTPResponse();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0x7375746174733ALL;
    *(_QWORD *)(result + 24) = 0xE700000000000000;
    *(_QWORD *)(result + 32) = 0x7375746174733ALL;
    *(_QWORD *)(result + 40) = 0xE700000000000000;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = v11;
    *(_QWORD *)(result + 64) = v13;
    *(_QWORD *)(result + 72) = v2;
    *(_QWORD *)(result + 80) = v8;
    *(_QWORD *)(result + 88) = v10;
  }
  return result;
}

uint64_t _nw_http_response_create_well_known(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[3];

  sub_1832EE26C(a1, (uint64_t)v9);
  v1 = v9[1];
  v2 = v9[2];
  HTTPFields.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8], &v8);
  v3 = v8;
  swift_bridgeObjectRetain();
  v4 = sub_183B917B8();
  v6 = v5;
  swift_bridgeObjectRelease();
  type metadata accessor for __NWHTTPResponse();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x7375746174733ALL;
  *(_QWORD *)(result + 24) = 0xE700000000000000;
  *(_QWORD *)(result + 32) = 0x7375746174733ALL;
  *(_QWORD *)(result + 40) = 0xE700000000000000;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = v4;
  *(_QWORD *)(result + 64) = v6;
  *(_QWORD *)(result + 72) = v1;
  *(_QWORD *)(result + 80) = v2;
  *(_QWORD *)(result + 88) = v3;
  return result;
}

uint64_t sub_1832EE9FC(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  int *(*v7)@<X0>(int *@<X0>, int *@<X8>);
  uint64_t v8;

  v3 = a2;
  swift_retain();
  result = swift_beginAccess();
  if (v3 > 0x3E7)
  {
    __break(1u);
  }
  else
  {
    if ((sub_1832D9E5C(0, 0xE000000000000000) & 1) == 0)
    {
      v5 = 0;
      v6 = 0xE000000000000000;
      v7 = sub_1832DA498;
      v8 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDD20);
      sub_18327DAB4((unint64_t *)&qword_1EDCDDD28, &qword_1EDCDDD20, MEMORY[0x1E0DEC858]);
      sub_183B91794();
    }
    v5 = a2;
    v6 = 0;
    v7 = (int *(*)@<X0>(int *@<X0>, int *@<X8>))0xE000000000000000;
    HTTPResponse.status.setter((uint64_t)&v5);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t _nw_http_response_get_status_code()
{
  return (unsigned __int16)sub_1832EEB18();
}

uint64_t sub_1832EEB18()
{
  unint64_t v0;
  uint64_t result;
  unint64_t v2;

  swift_retain();
  swift_beginAccess();
  HTTPResponse.status.getter(&v2);
  v0 = v2;
  swift_bridgeObjectRelease();
  if ((v0 & 0x8000000000000000) != 0 || v0 >= 0x10000)
  {
    result = sub_183B91F50();
    __break(1u);
  }
  else
  {
    swift_endAccess();
    swift_release();
    return v0;
  }
  return result;
}

uint64_t sub_1832EEC48(uint64_t a1, char *a2)
{
  size_t v4;
  size_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  _QWORD v25[6];

  swift_retain();
  if (!a2)
  {
    v7 = 0;
    v9 = 0xE000000000000000;
    goto LABEL_13;
  }
  v4 = strlen(a2);
  if (!v4)
    goto LABEL_10;
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1)
      goto LABEL_10;
    if ((a2[1] & 0x80000000) == 0)
    {
      v5 = v4 - 2;
      if (v4 != 2)
      {
        v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5)
            goto LABEL_10;
        }
        goto LABEL_12;
      }
LABEL_10:
      v7 = sub_183B917A0();
      v9 = v8;
      goto LABEL_13;
    }
  }
LABEL_12:
  *(_QWORD *)&v18 = a2;
  *((_QWORD *)&v18 + 1) = v4;
  v19 = sub_1832FE3C4;
  v20 = 0;
  v25[3] = 0;
  v25[4] = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
  sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
  sub_183B91794();
  v7 = 0;
  v9 = 0xE000000000000000;
LABEL_13:
  swift_beginAccess();
  v10 = *(void **)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_BYTE *)(a1 + 48);
  v13 = *(_OWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 72);
  v18 = *(_OWORD *)(a1 + 16);
  v19 = v10;
  v20 = v11;
  v21 = v12;
  v22 = v13;
  v23 = v14;
  v24 = *(_OWORD *)(a1 + 80);
  HTTPResponse.status.getter(v25);
  v15 = v25[0];
  result = swift_bridgeObjectRelease();
  if (v15 > 0x3E7)
  {
    __break(1u);
  }
  else
  {
    if ((sub_1832D9E5C(v7, v9) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      v17 = v9;
    }
    else
    {
      *(_QWORD *)&v18 = v7;
      *((_QWORD *)&v18 + 1) = v9;
      v19 = sub_1832DA498;
      v20 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDD20);
      sub_18327DAB4((unint64_t *)&qword_1EDCDDD28, &qword_1EDCDDD20, MEMORY[0x1E0DEC858]);
      sub_183B91794();
      v7 = 0;
      v17 = 0xE000000000000000;
    }
    *(_QWORD *)&v18 = v15;
    *((_QWORD *)&v18 + 1) = v7;
    v19 = (void *)v17;
    HTTPResponse.status.setter((uint64_t)&v18);
    swift_endAccess();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

void _nw_http_response_access_reason_phrase(uint64_t a1, void *a2)
{
  _nw_http_request_access_method_fieldTm(a1, a2, sub_1832EEE78);
}

void sub_1832EEE78(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t isStackAllocationSafe;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 72);
  v23 = *(_OWORD *)(a1 + 16);
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = *(_OWORD *)(a1 + 80);
  HTTPResponse.status.getter(&v20);
  v10 = v21;
  v9 = v22;
  if ((sub_18324BC90(v21, v22) & 1) != 0)
  {
    _Block_copy(v3);
    _Block_copy(v3);
    sub_1832E76AC(v10, v9, (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))v3);
    goto LABEL_13;
  }
  v11 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v11 = v10;
  v12 = 7;
  if (((v9 >> 60) & ((v10 & 0x800000000000000) == 0)) != 0)
    v12 = 11;
  v13 = sub_1832F0C5C(0xFuLL, v12 | (v11 << 16), v10, v9);
  v14 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v14 < 0)
    goto LABEL_15;
  isStackAllocationSafe = (uint64_t)_Block_copy(v3);
  if (v14 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v17 = (char *)&v19 - v16;
    sub_1832E80A8((uint64_t)&v19 - v16, v14, v10, v9);
    (*((void (**)(void *, char *))v3 + 2))(v3, v17);
  }
  else
  {
    v18 = swift_slowAlloc();
    sub_1832E80A8(v18, v14, v10, v9);
    (*((void (**)(void *, uint64_t))v3 + 2))(v3, v18);
    MEMORY[0x186DB563C](v18, -1, -1);
  }
LABEL_13:
  swift_bridgeObjectRelease();
  swift_endAccess();
  _Block_release(v3);
  swift_release();
  _Block_release(v3);
}

void _nw_http_response_access_status_field(uint64_t a1, void *a2)
{
  _nw_http_request_access_method_fieldTm(a1, a2, sub_1832EF104);
}

void _nw_http_request_access_method_fieldTm(uint64_t a1, void *aBlock, void (*a3)(uint64_t, void *))
{
  void *v5;

  v5 = _Block_copy(aBlock);
  a3(a1, v5);
  _Block_release(v5);
}

void sub_1832EF104(uint64_t a1, void *aBlock)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(_QWORD *, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = v4;
  *(_QWORD *)&v19 = v5;
  *((_QWORD *)&v19 + 1) = v6;
  v20 = v7;
  v21 = v8;
  v22 = v9;
  v10 = (void (*)(_QWORD *, uint64_t *))v3[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v3, &v17);
  v11 = v17;
  v12 = v18;
  v13 = v19;
  v14 = v20;
  v15 = v21;
  v16 = v22;
  if (v19 != __PAIR128__(0xE700000000000000, 0x7375746174733ALL) && (sub_183B920F4() & 1) == 0)
LABEL_8:
    __break(1u);
  if (sub_183B917D0() != 3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if ((sub_1832D9CC0(v15, v16) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v16;
  swift_endAccess();
  swift_release();
  _Block_release(v3);
}

uint64_t _nw_http_response_set_header_fields(uint64_t a1, uint64_t a2)
{
  return _nw_http_request_set_header_fieldsTm(a1, a2, (uint64_t)sub_1832F1148);
}

uint64_t _nw_http_request_set_header_fieldsTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD v7[3];

  v5 = a1 + 16;
  swift_retain();
  swift_retain();
  swift_beginAccess();
  v7[2] = v5;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 80))(a3, v7, MEMORY[0x1E0DEE9C0] + 8);
  swift_endAccess();
  swift_release();
  return swift_release();
}

uint64_t _nw_http_response_copy_header_fields(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_retain();
  swift_beginAccess();
  v2 = *(_QWORD *)(a1 + 88);
  type metadata accessor for __NWHTTPFields();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  swift_retain();
  swift_release();
  return v3;
}

uint64_t sub_1832EF3E8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t _nw_http_parsed_fields_create()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _DWORD *v3;

  type metadata accessor for __NWHTTPParsedFields();
  v0 = swift_allocObject();
  type metadata accessor for HTTPFields._Storage();
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  v1 = (_QWORD *)swift_allocObject();
  v2 = MEMORY[0x1E0DEE9D8];
  v1[2] = MEMORY[0x1E0DEE9D8];
  v1[3] = sub_1832F2514(v2);
  v3 = (_DWORD *)swift_slowAlloc();
  v1[4] = v3;
  *v3 = 0;
  *(_QWORD *)(v0 + 112) = v1;
  return v0;
}

uint64_t _nw_http_parsed_fields_add(int a1, char *a2, size_t a3, char *a4, size_t a5)
{
  return sub_1832EF510(a1, a2, a3, a4, a5) & 1;
}

uint64_t sub_1832EF510(int a1, char *__s, size_t a3, char *a4, size_t a5)
{
  size_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (a3 == -1)
  {
    a3 = strlen(__s);
    if (!a3)
      goto LABEL_12;
  }
  else if (!a3)
  {
LABEL_12:
    v10 = sub_183B917A0();
    v12 = v11;
    if (a5 != -1)
      goto LABEL_13;
LABEL_16:
    a5 = strlen(a4);
    if (!a5)
      goto LABEL_24;
    goto LABEL_17;
  }
  if ((*__s & 0x80000000) == 0)
  {
    if (a3 == 1)
      goto LABEL_12;
    if ((__s[1] & 0x80000000) == 0)
    {
      v8 = a3 - 2;
      if (a3 == 2)
        goto LABEL_12;
      v9 = __s + 2;
      while ((*v9 & 0x80000000) == 0)
      {
        ++v9;
        if (!--v8)
          goto LABEL_12;
      }
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
  sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
  sub_183B91794();
  v10 = 0;
  v12 = 0xE000000000000000;
  if (a5 == -1)
    goto LABEL_16;
LABEL_13:
  if (!a5)
    goto LABEL_24;
LABEL_17:
  if (*a4 < 0)
    goto LABEL_25;
  if (a5 == 1)
    goto LABEL_24;
  if (a4[1] < 0)
  {
LABEL_25:
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEC38);
    sub_18327DAB4(&qword_1EDCDEC40, &qword_1EDCDEC38, MEMORY[0x1E0DEC858]);
    sub_183B91794();
    v15 = 0;
    v17 = 0xE000000000000000;
    goto LABEL_26;
  }
  v13 = a5 - 2;
  if (a5 != 2)
  {
    v14 = a4 + 2;
    while ((*v14 & 0x80000000) == 0)
    {
      ++v14;
      if (!--v13)
        goto LABEL_24;
    }
    goto LABEL_25;
  }
LABEL_24:
  v15 = sub_183B917A0();
  v17 = v16;
LABEL_26:
  swift_retain();
  swift_beginAccess();
  sub_18329F714(v10, v12, v15, v17);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_1832EF908()
{
  uint64_t v0;
  _QWORD __src[36];

  swift_retain();
  swift_beginAccess();
  sub_18329FEA4((uint64_t)__src);
  swift_endAccess();
  swift_release();
  type metadata accessor for __NWHTTPRequest();
  v0 = swift_allocObject();
  memcpy((void *)(v0 + 16), __src, 0x120uLL);
  return v0;
}

__n128 sub_1832EFB4C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  __n128 v15;

  swift_retain();
  swift_beginAccess();
  sub_1832A0150((uint64_t)&v9);
  v0 = v10;
  v1 = v11;
  v2 = v12;
  v7 = v13;
  v8 = v9;
  v3 = v14;
  swift_endAccess();
  swift_release();
  type metadata accessor for __NWHTTPResponse();
  v6 = v15;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = v8;
  *(_QWORD *)(v4 + 32) = v0;
  *(_QWORD *)(v4 + 40) = v1;
  *(_BYTE *)(v4 + 48) = v2;
  *(_OWORD *)(v4 + 56) = v7;
  *(_QWORD *)(v4 + 72) = v3;
  result = v6;
  *(__n128 *)(v4 + 80) = v6;
  return result;
}

uint64_t sub_1832EFDC0(_QWORD *a1)
{
  void *v2;
  _BYTE *v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  swift_retain();
  swift_beginAccess();
  if (a1[3] || a1[5] || a1[7] || a1[9] || a1[11] || a1[13])
  {
    sub_1832A1EEC();
    v2 = (void *)swift_allocError();
    *v3 = 10;
    swift_willThrow();
    sub_18329FDF8();
    swift_endAccess();
    if (qword_1EDCD75A8 != -1)
      swift_once();
    v4 = sub_183B915CC();
    __swift_project_value_buffer(v4, (uint64_t)qword_1EDCF29F0);
    v5 = v2;
    v6 = v2;
    v7 = sub_183B915B4();
    v8 = sub_183B91C74();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v9 = 138543362;
      v11 = v2;
      v14 = _swift_stdlib_bridgeErrorToNSError();
      sub_183B91D1C();
      *v10 = v14;

      _os_log_impl(&dword_182FBE000, v7, v8, "Failed to parse HTTP response: %{public}@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7640);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v10, -1, -1);
      MEMORY[0x186DB563C](v9, -1, -1);
      swift_release();

    }
    else
    {
      swift_release();

    }
    return 0;
  }
  else
  {
    v13 = a1[14];
    sub_18329FC14();
    swift_retain();
    sub_18329FDF8();
    swift_endAccess();
    swift_release();
    type metadata accessor for __NWHTTPFields();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v13;
  }
  return result;
}

void _nw_http_fields_enumerate_modern_header_fields(uint64_t a1, void *a2)
{
  _nw_http_fields_enumerate_modern_header_fieldsTm(a1, a2, (uint64_t)sub_1832F119C, (void (*)(uint64_t, _QWORD *, uint64_t, uint64_t))sub_183264488);
}

uint64_t sub_1832F00BC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 *a5, void *a6)
{
  unsigned __int8 v11;

  v11 = *a5;
  swift_bridgeObjectRetain();
  _Block_copy(a6);
  swift_bridgeObjectRetain();
  return sub_1832E77A0(a1, a2, a3, a4, a6, a1, a2, v11);
}

uint64_t sub_1832F0144(uint64_t a1, unint64_t a2, unint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1832E6C94(a2, a3, (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aBlock, a1, a5, a6, a2, a3, a7);
}

uint64_t sub_1832F01F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v12 = sub_183B917D0();
  v13 = sub_183B917D0();
  v14 = (a8 - 1);
  if (v14 < 3)
    v15 = v14 + 1;
  else
    v15 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16))(a2, a3, v12, a1, v13, v15);
}

void _nw_http_fields_enumerate_modern_header_fields_combined(uint64_t a1, void *a2)
{
  _nw_http_fields_enumerate_modern_header_fieldsTm(a1, a2, (uint64_t)sub_1832F11A4, (void (*)(uint64_t, _QWORD *, uint64_t, uint64_t))sub_183264494);
}

void _nw_http_fields_enumerate_modern_header_fieldsTm(uint64_t a1, void *aBlock, uint64_t a3, void (*a4)(uint64_t, _QWORD *, uint64_t, uint64_t))
{
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v7 = _Block_copy(aBlock);
  v8 = _Block_copy(v7);
  v9 = swift_retain();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(v13, v9);
  v10 = v14;
  v11 = v15;
  __swift_project_boxed_opaque_existential_2(v13, v14);
  v12[2] = v8;
  a4(a3, v12, v10, v11);
  swift_release();
  _Block_release(v8);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v13);
  _Block_release(v7);
}

uint64_t sub_1832F0360(unint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4, void *aBlock)
{
  int v9;

  v9 = *a4;
  _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  return sub_1832E6F1C(a1, a2, (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aBlock, a3, a1, a2, v9);
}

uint64_t sub_1832F03D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;
  unsigned int v11;
  uint64_t v12;

  result = sub_183B917D0();
  if (__OFSUB__(result, a3))
  {
    __break(1u);
  }
  else
  {
    v11 = (a6 - 1);
    if (v11 < 3)
      v12 = v11 + 1;
    else
      v12 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16))(a2, a1, a3, result - a3, v12);
  }
  return result;
}

uint64_t sub_1832F0458(uint64_t a1, size_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v3 = swift_retain();
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v3 + 88))(v12);
  v4 = v13;
  v5 = v14;
  __swift_project_boxed_opaque_existential_2(v12, v13);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v12);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = malloc(v7);
  if (v8)
  {
    v9 = v8;
    if (v7)
    {
      if (v6 + 32 < (unint64_t)v8 + v7 && (unint64_t)v8 < v6 + 32 + v7)
        goto LABEL_11;
      memcpy(v8, (const void *)(v6 + 32), v7);
    }
    swift_bridgeObjectRelease();
    *a2 = v7;
    swift_release();
    return (uint64_t)v9;
  }
  __break(1u);
LABEL_11:
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t _nw_http_request_create_from_url_request(void *a1)
{
  char *v1;
  uint64_t v2;
  _BYTE v4[288];

  v1 = a1;
  sub_1832A83B8(v1, (uint64_t)v4);
  type metadata accessor for __NWHTTPRequest();
  v2 = swift_allocObject();
  memcpy((void *)(v2 + 16), v4, 0x120uLL);

  return v2;
}

uint64_t _nw_http_request_copy_url_request(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;

  v5 = a2;
  v6 = a3;
  v7 = sub_1832F063C(a1, (uint64_t)v5, (const __CFURL *)a3);

  return v7;
}

uint64_t sub_1832F063C(uint64_t a1, uint64_t a2, const __CFURL *a3)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[288];
  _QWORD __dst[36];

  v4 = (const void *)(a1 + 16);
  swift_retain();
  swift_beginAccess();
  memcpy(__dst, v4, sizeof(__dst));
  memcpy(v11, v4, sizeof(v11));
  v5 = sub_183B916E0();
  v7 = v6;
  sub_18328212C(__dst);
  sub_1832A8D3C(v5, v7, a3);
  v9 = v8;
  swift_bridgeObjectRelease();
  sub_1832CF378(__dst);
  swift_endAccess();
  swift_release();
  return v9;
}

uint64_t _nw_http_response_copy_url_response(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v8;
  id v9;
  uint64_t v10;

  v8 = a3;
  v9 = a4;
  v10 = sub_1832F0774(a1, a2, a3);

  return v10;
}

uint64_t sub_1832F0774(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD __dst[36];
  _QWORD __src[36];
  _BYTE v20[288];

  swift_retain();
  if (a2)
  {
    swift_retain();
    swift_beginAccess();
    memcpy(__dst, (const void *)(a2 + 16), sizeof(__dst));
    memmove(__src, (const void *)(a2 + 16), 0x120uLL);
    sub_1832F1248((uint64_t)__src);
    sub_18328212C(__dst);
    swift_release();
LABEL_5:
    sub_1832A9D28(__src, v20);
    swift_beginAccess();
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(_BYTE *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(a1 + 64);
    v13 = *(_QWORD *)(a1 + 72);
    v14 = *(_QWORD *)(a1 + 80);
    v15 = *(_QWORD *)(a1 + 88);
    __dst[0] = *(_QWORD *)(a1 + 16);
    __dst[1] = v7;
    __dst[2] = v8;
    __dst[3] = v9;
    LOBYTE(__dst[4]) = v10;
    __dst[5] = v11;
    __dst[6] = v12;
    __dst[7] = v13;
    __dst[8] = v14;
    __dst[9] = v15;
    sub_1832A9D28(v20, __src);
    sub_183B916E0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1832A9454(__src);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for CFURLResponse(0);
    v16 = swift_dynamicCastUnknownClassUnconditional();
    swift_endAccess();
    swift_release();
    sub_1832F11C8((uint64_t)v20);
    return v16;
  }
  if (a3)
  {
    __src[0] = a3;
    sub_1832F11AC((uint64_t)__src);
    v6 = a3;
    goto LABEL_5;
  }
  result = sub_183B91F5C();
  __break(1u);
  return result;
}

uint64_t sub_1832F0994()
{
  uint64_t v0;

  v0 = sub_183B915CC();
  __swift_allocate_value_buffer(v0, qword_1EDCF29F0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EDCF29F0);
  return sub_183B915C0();
}

uint64_t sub_1832F0A00(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

unint64_t sub_1832F0A54(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_1832F0AF0(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_1832F0B5C(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_1832F0AF0(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_18329687C(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
    __break(1u);
  return result;
}

unint64_t sub_1832F0B5C(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v10 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            v7 = *(_BYTE *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        v12 = result >> 16;
        v6 = sub_183B91E78();
        v5 = v12;
        if (v12 != v9)
          goto LABEL_9;
      }
      return v5 << 16;
    }
    v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v8 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v8)
      return sub_183B91DA0();
  }
  return result;
}

unint64_t sub_1832F0C5C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v7 = sub_1832F0A54(a1, a3, a4);
  result = sub_1832F0A54(a2, a3, a4);
  v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = sub_183B9177C();
        v7 = result;
      }
      else
      {
        v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = sub_183B91E78();
          v13 = *(unsigned __int8 *)(result + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14)
        return v11;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = sub_183B91788();
        v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = sub_183B91E78();
          v17 = 0;
          do
            v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14)
        return v11;
    }
    goto LABEL_36;
  }
  return 0;
}

_QWORD *sub_1832F0E6C@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1832F0EA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_BYTE *__return_ptr, uint64_t, uint64_t, char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t result;

  v14 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_18324C26C(a2);
  v15 = sub_1832F1778(v14, v13, a3, a4, a1, a5, a6, a2);
  sub_18324C2B4(a2);
  result = swift_bridgeObjectRelease();
  *a7 = v15 & 1;
  return result;
}

uint64_t sub_1832F0F64()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t type metadata accessor for __NWHTTPFields()
{
  return objc_opt_self();
}

uint64_t sub_1832F0FA0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1832F0FD0(uint64_t *a1)
{
  uint64_t v1;

  return sub_1832E8D48(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1832F0FD8(uint64_t a1)
{
  uint64_t v1;

  return sub_1832E8FD4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1832F0FE8(uint64_t a1)
{
  uint64_t *v1;

  return sub_1832E9154(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1832F0FF4(uint64_t *a1)
{
  uint64_t v1;

  return sub_1832E921C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1832F0FFC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_OWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 40);
  v12 = *a1;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  result = sub_1832E7CF0((uint64_t *)&v9);
  *a2 = result;
  a2[1] = v8;
  return result;
}

uint64_t sub_1832F1048@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1832E958C(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_1832F1054(uint64_t *a1)
{
  uint64_t v1;

  return sub_1832E994C(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1832F105C(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1832E9B84(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1832F106C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1832E9CE4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1832F1074@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;

  return sub_1832E9F88(a1, v2[2], v2[3], v2[4], v2[5], v2[6], a2);
}

uint64_t sub_1832F1084@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_1832EA780(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1832F108C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_1832EB050(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1832F1094@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1832EB258(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t type metadata accessor for __NWHTTPRequest()
{
  return objc_opt_self();
}

uint64_t sub_1832F10BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1832F10CC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1832F10F8(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)(v1 + 16) + 280) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t type metadata accessor for __NWHTTPResponse()
{
  return objc_opt_self();
}

uint64_t sub_1832F114C(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)(v1 + 16) + 72) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t type metadata accessor for __NWHTTPParsedFields()
{
  return objc_opt_self();
}

uint64_t sub_1832F119C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 *a5)
{
  uint64_t v5;

  return sub_1832F00BC(a1, a2, a3, a4, a5, *(void **)(v5 + 16));
}

uint64_t sub_1832F11A4(unint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4;

  return sub_1832F0360(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_1832F11AC(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 280) & 0xFFFFFFFFFFFFFF8 | 0x8000000000000000;
  *(_QWORD *)(result + 32) = *(unsigned __int8 *)(result + 32);
  *(_QWORD *)(result + 280) = v1;
  return result;
}

uint64_t sub_1832F11C8(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a1 + 240);
  v5 = *(_OWORD *)(a1 + 256);
  v3 = *(_OWORD *)(a1 + 208);
  sub_1832A7B44(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280));
  return a1;
}

uint64_t sub_1832F1248(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 280) & 0xFFFFFFFFFFFFFF8;
  *(_QWORD *)(result + 32) = *(unsigned __int8 *)(result + 32);
  *(_QWORD *)(result + 280) = v1;
  return result;
}

uint64_t type metadata accessor for __NWHTTPFieldsProvider()
{
  return objc_opt_self();
}

uint64_t sub_1832F1280()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832F12C4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[10])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[17])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[24])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[31])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832F1370(uint64_t a1)
{
  uint64_t v1;

  return sub_1832F03D8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48));
}

uint64_t sub_1832F1390(uint64_t a1)
{
  uint64_t v1;

  return sub_1832F0144(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56));
}

uint64_t sub_1832F13B4(uint64_t a1)
{
  uint64_t v1;

  return sub_1832F01F0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_BYTE *)(v1 + 64));
}

uint64_t sub_1832F13D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1832F13F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1832F1428(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1832F1470()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1832F149C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1832F14C8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1832F19B0(a1, a2);
}

_QWORD *sub_1832F14DC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1832F19D0(a1, a2);
}

uint64_t sub_1832F14F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v27[2];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[3];
  uint64_t v34;
  __int128 v35;
  char *(*v36)@<X0>(char *@<X0>, _BYTE *@<X8>);
  uint64_t v37;
  BOOL (*v38)(unsigned __int8 *);
  uint64_t v39;
  BOOL (*v40)(unsigned __int8 *);
  uint64_t v41;
  uint64_t v42;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v42 = MEMORY[0x1E0DEE9D8];
    sub_183306C14(0, v5, 0);
    v6 = v42;
    for (i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      v11 = *(i - 3);
      v10 = *(i - 2);
      v13 = *(i - 1);
      v12 = *i;
      swift_bridgeObjectRetain();
      v14 = MEMORY[0x186DB1C70](v11, v10, v13, v12);
      v16 = v15;
      if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v14, v15))
        break;
LABEL_11:
      swift_bridgeObjectRetain();
      v19 = a5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v42 = v6;
      v21 = *(_QWORD *)(v6 + 16);
      v20 = *(_QWORD *)(v6 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_183306C14(v20 > 1, v21 + 1, 1);
        v19 = a5;
        v6 = v42;
      }
      *(_QWORD *)(v6 + 16) = v21 + 1;
      v22 = v6 + 56 * v21;
      *(_QWORD *)(v22 + 32) = a2;
      *(_QWORD *)(v22 + 40) = a3;
      *(_QWORD *)(v22 + 48) = a4;
      *(_QWORD *)(v22 + 56) = v19;
      *(_BYTE *)(v22 + 64) = 0;
      *(_QWORD *)(v22 + 72) = v14;
      *(_QWORD *)(v22 + 80) = v16;
      if (!--v5)
        return v6;
    }
    *(_QWORD *)&v35 = v14;
    *((_QWORD *)&v35 + 1) = v16;
    v36 = sub_18327C868;
    v37 = 0;
    v38 = sub_18327C8A4;
    v39 = 0;
    v40 = sub_18327E03C;
    v41 = 0;
    v29 = v35;
    v30 = (unint64_t)sub_18327C868;
    v31 = (unint64_t)sub_18327C8A4;
    v32 = (unint64_t)sub_18327E03C;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD578);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE6F0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_183262D80(v27, (uint64_t)v33);
      __swift_project_boxed_opaque_existential_2(v33, v34);
      if ((sub_183B91FB0() & 1) != 0)
      {
        __swift_project_boxed_opaque_existential_2(v33, v34);
        sub_183B91FA4();
        v17 = *((_QWORD *)&v29 + 1);
        v14 = v29;
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v33);
LABEL_10:
        swift_bridgeObjectRelease();
        v16 = v17;
        goto LABEL_11;
      }
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v33);
    }
    else
    {
      v28 = 0;
      memset(v27, 0, sizeof(v27));
      sub_1830620D4((uint64_t)v27, &qword_1EDCDD580);
    }
    v14 = sub_1832A9DC0(&v35);
    v17 = v18;
    goto LABEL_10;
  }
  return v6;
}

uint64_t sub_1832F1778(unint64_t a1, unint64_t a2, void (*a3)(_BYTE *__return_ptr, uint64_t, uint64_t, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t isStackAllocationSafe;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  void (*v29)(_BYTE *__return_ptr, uint64_t, uint64_t, char *, uint64_t);
  uint64_t v30;
  _BYTE v31[81];

  *(_QWORD *)&v31[73] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v31[17] = a3;
  *(_QWORD *)&v31[25] = a4;
  *(_QWORD *)&v31[33] = a5;
  *(_QWORD *)&v31[41] = a6;
  *(_QWORD *)&v31[49] = a7;
  *(_QWORD *)&v31[57] = a8;
  if ((sub_18324BC90(a1, a2) & 1) != 0)
  {
    v13 = sub_1832E7174((void (*)(char *__return_ptr, _QWORD *))sub_1832F14DC, (uint64_t)&v31[1], a1, a2);
    return v13 & 1;
  }
  v30 = a4;
  v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v14 = a1;
  v15 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v15 = 11;
  isStackAllocationSafe = sub_1832F0C5C(0xFuLL, v15 | (v14 << 16), a1, a2);
  v17 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v17 < 0)
    goto LABEL_15;
  v29 = a3;
  if (v17 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v28 = (uint64_t)&v28;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v19 = (char *)&v28 - v18;
    sub_1832E80A8((uint64_t)&v28 - v18, v17, a1, a2);
    v20 = sub_183B917D0();
    v21 = sub_183B917D0();
    v29(v31, a5, v20, v19, v21);
    v13 = v31[0];
  }
  else
  {
    v22 = swift_slowAlloc();
    sub_1832E80A8(v22, v17, a1, a2);
    v23 = sub_183B917D0();
    v24 = sub_183B917D0();
    v25 = v23;
    v26 = v22;
    v29(v31, a5, v25, (char *)v22, v24);
    v13 = v31[0];
    MEMORY[0x186DB563C](v26, -1, -1);
  }
  return v13 & 1;
}

uint64_t sub_1832F19B0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1832F0EA8(a1, *(_QWORD *)(v2 + 16), *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, char *, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), a2);
}

_QWORD *sub_1832F19D0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *(*v5)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;

  v5 = *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 16);
  v6 = *(_QWORD *)(v2 + 32);
  v7 = sub_183B917D0();
  v8 = sub_183B917D0();
  result = v5(&v10, v6, v7, a1, v8);
  *a2 = v10;
  return result;
}

uint64_t sub_1832F1A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1832F1A88(a1, (void (*)(uint64_t))sub_1832F1A74, a2);
}

uint64_t sub_1832F1A74(uint64_t a1)
{
  return sub_1832F1AAC(a1);
}

uint64_t sub_1832F1A88@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1832E7C4C(a1, *(_QWORD *)(v3 + 16), *(void (**)(uint64_t, uint64_t, char *, uint64_t))(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), a2, a3);
}

uint64_t sub_1832F1AAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = sub_183B917D0();
  v6 = sub_183B917D0();
  return v3(v4, v5, a1, v6);
}

uint64_t sub_1832F1B24()
{
  return sub_1832F10CC();
}

uint64_t sub_1832F1B40()
{
  return sub_1832F13D8();
}

uint64_t sub_1832F1B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  char v18;
  __int128 v19;
  char v20;
  _BYTE v21[24];
  __int128 v22;
  char v23;
  __int128 v24;
  char v25;
  _BYTE v26[24];
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  int v31;
  char v32;

  result = sub_1832F4B0C(a2);
  if ((v10 & 1) != 0)
    goto LABEL_17;
  v11 = v9;
  v12 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v12 != (_DWORD)v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  v13 = result;
  v14 = 1 << *(_BYTE *)(a2 + 32);
  if (v14 < result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v22 = *(_OWORD *)a1;
  v23 = *(_BYTE *)(a1 + 16);
  v24 = v22;
  v25 = v23;
  sub_1832FD848((uint64_t)&v24, (uint64_t)v26);
  result = sub_1832FD848((uint64_t)v26, (uint64_t)&v27);
  if ((v29 & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v28 != (_DWORD)v12)
    goto LABEL_13;
  if (v27 < v13)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = *(_OWORD *)(a1 + 24);
  v18 = *(_BYTE *)(a1 + 40);
  v19 = v17;
  v20 = v18;
  sub_1832FD848((uint64_t)&v19, (uint64_t)v21);
  result = sub_1832FD848((uint64_t)v21, (uint64_t)&v30);
  if ((v32 & 1) == 0)
  {
    v15 = v30;
    v16 = v31;
    sub_1832903C4(v13, v11, 0);
    result = sub_1832903C4(v14, v12, 0);
    if ((_DWORD)v12 == v16)
    {
      if (v14 >= v15)
      {
        *(_QWORD *)(a4 + 48) = a2;
        *(_QWORD *)(a4 + 56) = a3;
        *(_OWORD *)a4 = v22;
        *(_BYTE *)(a4 + 16) = v23;
        *(_OWORD *)(a4 + 24) = v17;
        *(_BYTE *)(a4 + 40) = v18;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        return sub_1832FD890(a1);
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t NWTXTRecord.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  nw_txt_record_t dictionary;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  const char *v23;
  NSObject *v24;
  const char *v25;
  NSObject *v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  const char *v30;
  NSObject *v31;
  _BOOL4 v32;
  char v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  unint64_t v49;
  const char *v50;
  NSObject *v51;
  BOOL v52;
  char isUniquelyReferenced_nonNull_native;
  char v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  uint64_t result;
  NSObject *v70;
  unint64_t v72;
  uint8_t *value;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  int64_t v77;
  uint8_t v78[8];
  uint64_t v79;

  v72 = sub_1832F278C(MEMORY[0x1E0DEE9D8]);
  dictionary = nw_txt_record_create_dictionary();
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v76 = (unint64_t)(v6 + 63) >> 6;
  v74 = a1 + 64;
  v75 = a1;
  while (v8)
  {
    v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v10 = v9 | (v4 << 6);
LABEL_20:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000) == 0)
      v21 = v20 & 0xFFFFFFFFFFFFLL;
    v77 = v4;
    if (v21)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v19 == 0xE000000000000000;
      if (v22 || (sub_183B920F4() & 1) != 0)
      {
        v23 = (const char *)(sub_183B91758() + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v24 = swift_unknownObjectRetain();
        LOBYTE(v23) = nw_txt_record_set_key(v24, v23, (const uint8_t *)"", 0);
        swift_unknownObjectRelease();
        swift_release();
        if ((v23 & 1) == 0)
          goto LABEL_29;
        goto LABEL_51;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v27 = v19;
      v28 = v20;
      if ((v19 & 0x1000000000000000) != 0)
      {
        v28 = sub_1832F5B78();
        v27 = v49;
        swift_bridgeObjectRelease();
        if ((v27 & 0x2000000000000000) != 0)
        {
LABEL_50:
          *(_QWORD *)v78 = v28;
          v79 = v27 & 0xFFFFFFFFFFFFFFLL;
          v50 = (const char *)(sub_183B91758() + 32);
          v51 = swift_unknownObjectRetain();
          v52 = nw_txt_record_set_key(v51, v50, v78, HIBYTE(v27) & 0xF);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          v5 = v74;
          a1 = v75;
          if (!v52)
            goto LABEL_29;
          goto LABEL_51;
        }
      }
      else if ((v19 & 0x2000000000000000) != 0)
      {
        goto LABEL_50;
      }
      if ((v28 & 0x1000000000000000) != 0)
      {
        value = (uint8_t *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v29 = v28 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        value = (uint8_t *)sub_183B91E78();
        v29 = v68;
      }
      v30 = (const char *)(sub_183B91758() + 32);
      v31 = swift_unknownObjectRetain();
      v32 = nw_txt_record_set_key(v31, v30, value, v29);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      v5 = v74;
      a1 = v75;
      if (!v32)
      {
LABEL_29:
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
LABEL_51:
      v70 = dictionary;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v78 = v72;
      v55 = sub_1832F67FC(v16, v17);
      v56 = *(_QWORD *)(v72 + 16);
      v57 = (v54 & 1) == 0;
      v58 = v56 + v57;
      if (__OFADD__(v56, v57))
        goto LABEL_66;
      v59 = v54;
      if (*(_QWORD *)(v72 + 24) >= v58)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1832FB278();
      }
      else
      {
        sub_1832F7AFC(v58, isUniquelyReferenced_nonNull_native);
        v60 = sub_1832F67FC(v16, v17);
        if ((v59 & 1) != (v61 & 1))
          goto LABEL_70;
        v55 = v60;
      }
      v62 = *(_QWORD **)v78;
      v72 = *(_QWORD *)v78;
      if ((v59 & 1) != 0)
      {
        v63 = *(_QWORD *)(*(_QWORD *)v78 + 56) + 24 * v55;
        sub_1832575A0(*(_QWORD *)v63, *(_QWORD *)(v63 + 8), *(_BYTE *)(v63 + 16));
        *(_QWORD *)v63 = v20;
        *(_QWORD *)(v63 + 8) = v19;
        *(_BYTE *)(v63 + 16) = 0;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v78 + 8 * (v55 >> 6) + 64) |= 1 << v55;
        v64 = (uint64_t *)(v62[6] + 16 * v55);
        *v64 = v16;
        v64[1] = v17;
        v65 = v62[7] + 24 * v55;
        *(_QWORD *)v65 = v20;
        *(_QWORD *)(v65 + 8) = v19;
        *(_BYTE *)(v65 + 16) = 0;
        v66 = v62[2];
        v47 = __OFADD__(v66, 1);
        v67 = v66 + 1;
        if (v47)
          goto LABEL_68;
        v62[2] = v67;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v5 = v74;
      a1 = v75;
      dictionary = v70;
      v4 = v77;
    }
    else
    {
      v25 = (const char *)(sub_183B91758() + 32);
      swift_bridgeObjectRetain();
      v26 = swift_unknownObjectRetain();
      LOBYTE(v25) = nw_txt_record_set_key(v26, v25, (const uint8_t *)"", 0);
      swift_unknownObjectRelease();
      swift_release();
      if ((v25 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        v33 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v78 = v72;
        v35 = sub_1832F67FC(v16, v17);
        v36 = *(_QWORD *)(v72 + 16);
        v37 = (v34 & 1) == 0;
        v38 = v36 + v37;
        if (__OFADD__(v36, v37))
          goto LABEL_67;
        v39 = v34;
        if (*(_QWORD *)(v72 + 24) >= v38)
        {
          if ((v33 & 1) == 0)
            sub_1832FB278();
        }
        else
        {
          sub_1832F7AFC(v38, v33);
          v40 = sub_1832F67FC(v16, v17);
          if ((v39 & 1) != (v41 & 1))
            goto LABEL_70;
          v35 = v40;
        }
        v42 = *(_QWORD **)v78;
        v72 = *(_QWORD *)v78;
        if ((v39 & 1) != 0)
        {
          v43 = *(_QWORD *)(*(_QWORD *)v78 + 56) + 24 * v35;
          sub_1832575A0(*(_QWORD *)v43, *(_QWORD *)(v43 + 8), *(_BYTE *)(v43 + 16));
          *(_OWORD *)v43 = xmmword_183BA32D0;
          *(_BYTE *)(v43 + 16) = 2;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v78 + 8 * (v35 >> 6) + 64) |= 1 << v35;
          v44 = (uint64_t *)(v42[6] + 16 * v35);
          *v44 = v16;
          v44[1] = v17;
          v45 = v42[7] + 24 * v35;
          *(_OWORD *)v45 = xmmword_183BA32D0;
          *(_BYTE *)(v45 + 16) = 2;
          v46 = v42[2];
          v47 = __OFADD__(v46, 1);
          v48 = v46 + 1;
          if (v47)
            goto LABEL_69;
          v42[2] = v48;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease_n();
      }
LABEL_31:
      swift_bridgeObjectRelease();
      v4 = v77;
    }
  }
  v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_65;
  }
  if (v11 >= v76)
    goto LABEL_63;
  v12 = *(_QWORD *)(v5 + 8 * v11);
  ++v4;
  if (v12)
    goto LABEL_19;
  v4 = v11 + 1;
  if (v11 + 1 >= v76)
    goto LABEL_63;
  v12 = *(_QWORD *)(v5 + 8 * v4);
  if (v12)
    goto LABEL_19;
  v4 = v11 + 2;
  if (v11 + 2 >= v76)
    goto LABEL_63;
  v12 = *(_QWORD *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_19:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_20;
  }
  v13 = v11 + 3;
  if (v13 >= v76)
  {
LABEL_63:
    result = swift_release();
    *a2 = v72;
    a2[1] = (unint64_t)dictionary;
    return result;
  }
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_19;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v76)
      goto LABEL_63;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_19;
  }
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  result = sub_183B921CC();
  __break(1u);
  return result;
}

unint64_t sub_1832F2378(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED20);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECD8);
  v6 = sub_183B91F8C();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_183062090(v12, (uint64_t)v5, &qword_1EDCDED20);
    result = sub_1832F67AC((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_183B91F44();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    result = (unint64_t)sub_1832A3478(v9, (_OWORD *)(v7[7] + 32 * v16));
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1832F2514(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _WORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC370);
  v2 = (_QWORD *)sub_183B91F8C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (__int16 *)(a1 + 50);
  while (1)
  {
    v5 = *(_QWORD *)(v4 - 9);
    v6 = *(_QWORD *)(v4 - 5);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1832FC9D8(v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1832F69A8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_WORD *)(v2[7] + 4 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 12;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1832F2650(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECB8);
  v2 = (_QWORD *)sub_183B91F8C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1832FC9D8(v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1832F69A8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1832F278C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7718);
  v2 = (_QWORD *)sub_183B91F8C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (char *)(a1 + 64);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 4);
    v6 = *((_QWORD *)v4 - 3);
    v7 = *((_QWORD *)v4 - 2);
    v8 = *((_QWORD *)v4 - 1);
    v9 = *v4;
    swift_bridgeObjectRetain();
    sub_183257580(v7, v8, v9);
    result = sub_1832F67FC(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = v2[7] + 24 * result;
    *(_QWORD *)v13 = v7;
    *(_QWORD *)(v13 + 8) = v8;
    *(_BYTE *)(v13 + 16) = v9;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4 += 40;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1832F28CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7B00);
  v2 = sub_183B91F8C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_183062090(v6, (uint64_t)&v15, &qword_1EDCD7B38);
    v7 = v15;
    v8 = v16;
    result = sub_1832FC9D8(v15, v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1832F69A8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1832A3478(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1832F2A14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED10);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF8);
  v6 = sub_183B91F8C();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_183062090(v12, (uint64_t)v5, &qword_1EDCDED10);
    result = sub_1832F6944((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_183B914AC();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    v19 = v7[7];
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v16, v9, v20);
    v21 = v7[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t NWTXTRecord.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  unint64_t v15;
  char v16;

  if (a2)
  {
    v7 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v7 = a1 & 0xFFFFFFFFFFFFLL;
    if (v7)
    {
      v14 = a1;
      v15 = a2;
      v16 = 0;
      NWTXTRecord.setEntry(_:for:)((uint64_t)&v14, a3, a4);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v10 = (const char *)(sub_183B91758() + 32);
    v11 = swift_unknownObjectRetain();
    LOBYTE(v10) = nw_txt_record_set_key(v11, v10, (const uint8_t *)"", 0);
    swift_unknownObjectRelease();
    swift_release();
    if ((v10 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v14 = *v4;
      *v4 = 0x8000000000000000;
      sub_1832F9EC8(1, 0, 2, a3, a4, isUniquelyReferenced_nonNull_native);
      *v4 = v14;
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v8 = (const char *)(sub_183B91758() + 32);
    v9 = swift_unknownObjectRetain();
    LODWORD(v8) = nw_txt_record_remove_key(v9, v8);
    swift_unknownObjectRelease();
    swift_release();
    if ((_DWORD)v8)
    {
      swift_bridgeObjectRetain();
      sub_1832F7054(a3, a4, (uint64_t)&v14);
      swift_bridgeObjectRelease();
      sub_1832FB450(v14, v15, v16);
      return swift_bridgeObjectRelease();
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t NWTXTRecord.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;

  v5 = sub_183B91728();
  MEMORY[0x1E0C80A78](v5);
  v6 = *v2;
  if (!*(_QWORD *)(v6 + 16))
    return 0;
  swift_bridgeObjectRetain();
  v7 = sub_1832F67FC(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)(v6 + 56) + 24 * v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(unsigned __int8 *)(v9 + 16);
  sub_183257580(*(_QWORD *)v9, v11, *(_BYTE *)(v9 + 16));
  swift_bridgeObjectRelease();
  if (v12)
  {
    if (v12 == 1)
    {
      sub_18324A994(v10, v11);
      sub_183B91710();
      sub_1832FB464();
      v13 = sub_183B916F8();
      sub_1832575A0(v10, v11, 1);
      sub_1832575A0(v10, v11, 1);
      return v13;
    }
    else
    {
      return 0;
    }
  }
  return v10;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  _QWORD v9[2];
  char v10;

  v4 = sub_1832F4884((uint64_t)v9, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *v2);
  v5 = v9[0];
  v6 = v9[1];
  v7 = v10;
  swift_bridgeObjectRetain();
  sub_183257580(v5, v6, v7);
  sub_1832575A0(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  return v4;
}

uint64_t NWTXTRecord.init(nw:)@<X0>(NSObject *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[6];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = MEMORY[0x1E0DEE9E0];
  v5 = (uint64_t *)(v4 + 16);
  v9[4] = sub_18325762C;
  v9[5] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_1832F41F8;
  v9[3] = &block_descriptor_17;
  v6 = _Block_copy(v9);
  swift_retain();
  swift_release();
  nw_txt_record_apply(a1, v6);
  _Block_release(v6);
  swift_beginAccess();
  v7 = *v5;
  swift_bridgeObjectRetain();
  result = swift_release();
  *a2 = v7;
  a2[1] = a1;
  return result;
}

BOOL static NWTXTRecord.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return nw_txt_record_is_equal(*(nw_txt_record_t *)(a1 + 8), *(nw_txt_record_t *)(a2 + 8));
}

uint64_t NWTXTRecord.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *v0;
  v4 = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain();
  sub_18324FE60(v1, &v4);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  v2 = sub_183B9165C();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t NWTXTRecord.nw.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NWTXTRecord.Entry.data.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  if (*(_BYTE *)(v0 + 16))
  {
    if (*(_BYTE *)(v0 + 16) == 1)
      sub_18324A994(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
    else
      return 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    return sub_183257F24(v2, v1);
  }
  return v2;
}

uint64_t NWTXTRecord.Entry.init(_:)@<X0>(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_183B91728();
  result = MEMORY[0x1E0C80A78](v4);
  if (a1 >> 60 != 15)
    __asm { BR              X10 }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 2;
  return result;
}

uint64_t NWTXTRecord.Entry.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  if (!*(_BYTE *)(v0 + 16))
  {
    swift_bridgeObjectRetain();
    v1 = sub_183257F24(v1, v2);
    v2 = v3;
    goto LABEL_7;
  }
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_18324A994(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
LABEL_7:
    sub_183B92268();
    sub_18324A994(v1, v2);
    sub_183B91434();
    sub_183084848(v1, v2);
    return sub_183084848(v1, v2);
  }
  if (v1 | v2)
  {
    v1 = 0;
    v2 = 0xC000000000000000;
    goto LABEL_7;
  }
  return sub_183B92268();
}

uint64_t NWTXTRecord.Entry.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  if (*(_BYTE *)(v0 + 16))
  {
    if (*(_BYTE *)(v0 + 16) == 1)
    {
      sub_18324A994(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
      v3 = sub_183B913D4();
      sub_1832575A0(v1, v2, 1);
    }
    else if (v1 | v2)
    {
      return 0x3E7974706D653CLL;
    }
    else
    {
      return 0x3E656E6F6E3CLL;
    }
  }
  else
  {
    sub_183B917F4();
    sub_183B917F4();
    return 34;
  }
  return v3;
}

uint64_t NWTXTRecord.Entry.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int v3;
  unint64_t v4;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  sub_183B92250();
  if (v3)
  {
    if (v3 == 1)
    {
      sub_18324A994(v1, v2);
    }
    else
    {
      if (!(v1 | v2))
      {
        sub_183B92268();
        return sub_183B9228C();
      }
      v1 = 0;
      v2 = 0xC000000000000000;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v1 = sub_183257F24(v1, v2);
    v2 = v4;
  }
  sub_183B92268();
  sub_18324A994(v1, v2);
  sub_183B91434();
  sub_183084848(v1, v2);
  sub_183084848(v1, v2);
  return sub_183B9228C();
}

uint64_t sub_1832F3548()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  if (!*(_BYTE *)(v0 + 16))
  {
    swift_bridgeObjectRetain();
    v1 = sub_183257F24(v1, v2);
    v2 = v3;
    goto LABEL_7;
  }
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_18324A994(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
LABEL_7:
    sub_183B92268();
    sub_18324A994(v1, v2);
    sub_183B91434();
    sub_183084848(v1, v2);
    return sub_183084848(v1, v2);
  }
  if (v1 | v2)
  {
    v1 = 0;
    v2 = 0xC000000000000000;
    goto LABEL_7;
  }
  return sub_183B92268();
}

uint64_t sub_1832F3618()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int v3;
  unint64_t v4;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  sub_183B92250();
  if (v3)
  {
    if (v3 == 1)
    {
      sub_18324A994(v1, v2);
    }
    else
    {
      if (!(v1 | v2))
      {
        sub_183B92268();
        return sub_183B9228C();
      }
      v1 = 0;
      v2 = 0xC000000000000000;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v1 = sub_183257F24(v1, v2);
    v2 = v4;
  }
  sub_183B92268();
  sub_18324A994(v1, v2);
  sub_183B91434();
  sub_183084848(v1, v2);
  sub_183084848(v1, v2);
  return sub_183B9228C();
}

uint64_t sub_1832F36FC()
{
  sub_183B92250();
  sub_183B91740();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_1832F3760()
{
  sub_183B91740();
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832F37A0()
{
  sub_183B92250();
  sub_183B91740();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_1832F3800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_183B91740();
  v2 = v1;
  if (v0 == sub_183B91740() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_183B920F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t NWTXTRecord.setEntry(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  BOOL v11;
  uint64_t result;
  uint64_t v13;
  NSObject *v14;
  const uint8_t *v15;
  const char *v16;
  BOOL v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20[6];

  v4 = v3;
  v20[5] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v9 == 1)
      __asm { BR              X9 }
    if (!(v7 | v8))
    {
      v19 = sub_183B91758() + 32;
      v14 = swift_unknownObjectRetain();
      v16 = (const char *)v19;
      v15 = 0;
      goto LABEL_13;
    }
LABEL_12:
    v13 = sub_183B91758() + 32;
    v14 = swift_unknownObjectRetain();
    v15 = (const uint8_t *)"";
    v16 = (const char *)v13;
LABEL_13:
    v17 = nw_txt_record_set_key(v14, v16, v15, 0);
    swift_unknownObjectRelease();
    swift_release();
    if (v17)
      goto LABEL_14;
    return 0;
  }
  if (v7)
    v10 = 0;
  else
    v10 = v8 == 0xE000000000000000;
  if (v10 || (sub_183B920F4() & 1) != 0)
    goto LABEL_12;
  v20[0] = v7;
  v20[1] = v8;
  swift_bridgeObjectRetain();
  sub_183257580(v7, v8, 0);
  v11 = sub_1832FCFC0(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = 0;
  if (v11)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    sub_183257580(v7, v8, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20[0] = *v4;
    *v4 = 0x8000000000000000;
    sub_1832F9EC8(v7, v8, v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v20[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  return result;
}

void NWTXTRecord.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1832F4060(uint64_t a1, int a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[2];
  char v23;

  v8 = (uint64_t *)(a5 + 16);
  v9 = sub_183B91800();
  v11 = v10;
  if (a2 == 4)
  {
    sub_1832BDCC4(a3, a4);
    NWTXTRecord.Entry.init(_:)(v14, (uint64_t)v22);
    v15 = v22[0];
    v16 = v22[1];
    v17 = v23;
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v8;
    *v8 = 0x8000000000000000;
    sub_1832F9EC8(v15, v16, v17, v9, v11, isUniquelyReferenced_nonNull_native);
    v19 = v21;
  }
  else
  {
    if (a2 == 3)
    {
      swift_beginAccess();
      v12 = swift_isUniquelyReferenced_nonNull_native();
      v22[0] = *v8;
      *v8 = 0x8000000000000000;
      v13 = 1;
    }
    else
    {
      if (a2 != 2)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      swift_beginAccess();
      v12 = swift_isUniquelyReferenced_nonNull_native();
      v22[0] = *v8;
      *v8 = 0x8000000000000000;
      v13 = 0;
    }
    sub_1832F9EC8(v13, 0, 2, v9, v11, v12);
    v19 = v22[0];
  }
  *v8 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return 1;
}

uint64_t sub_1832F41F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a5) = v9(a2, a3, a4, a5);
  swift_release();
  return a5 & 1;
}

Swift::Bool __swiftcall NWTXTRecord.removeEntry(key:)(Swift::String key)
{
  void *object;
  uint64_t countAndFlagsBits;
  const char *v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v7[2];
  char v8;

  object = key._object;
  countAndFlagsBits = key._countAndFlagsBits;
  v3 = (const char *)(sub_183B91758() + 32);
  v4 = swift_unknownObjectRetain();
  v5 = nw_txt_record_remove_key(v4, v3);
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_1832F7054(countAndFlagsBits, (uint64_t)object, (uint64_t)v7);
    swift_bridgeObjectRelease();
    sub_1832FB450(v7[0], v7[1], v8);
  }
  return v5;
}

uint64_t NWTXTRecord.getEntry(for:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;

  v5 = *v3;
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = result;
    swift_bridgeObjectRetain();
    v8 = sub_1832F67FC(v7, a2);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v5 + 56) + 24 * v8;
      v11 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)a3 = *(_QWORD *)v10;
      *(_QWORD *)(a3 + 8) = v12;
      v13 = *(_BYTE *)(v10 + 16);
      *(_BYTE *)(a3 + 16) = v13;
      sub_183257580(v11, v12, v13);
      return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = -1;
  return result;
}

uint64_t NWTXTRecord.data.getter()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[6];

  v1 = *(NSObject **)(v0 + 8);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_183B9FD60;
  v6[4] = sub_1832FD1C8;
  v6[5] = v2;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1107296256;
  v6[2] = sub_18325BF2C;
  v6[3] = &block_descriptor_11_0;
  v3 = _Block_copy(v6);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_txt_record_access_bytes(v1, v3);
  _Block_release(v3);
  swift_unknownObjectRelease();
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 + 16);
  sub_18324A994(v4, *(_QWORD *)(v2 + 24));
  swift_release();
  return v4;
}

uint64_t sub_1832F44AC(_BYTE *__src, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (a2)
  {
    if (a2 <= 14)
    {
      v7 = sub_1832614E4(__src, &__src[a2]);
      v8 = v9 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      sub_183B91308();
      swift_allocObject();
      v5 = sub_183B912CC();
      v6 = v5;
      if ((unint64_t)a2 >= 0x7FFFFFFF)
      {
        sub_183B913EC();
        v7 = swift_allocObject();
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = a2;
        v8 = v6 | 0x8000000000000000;
      }
      else
      {
        v7 = a2 << 32;
        v8 = v5 | 0x4000000000000000;
      }
    }
  }
  else
  {
    v7 = 0;
    v8 = 0xC000000000000000;
  }
  swift_beginAccess();
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v8;
  sub_18308485C(v10, v11);
  return 1;
}

uint64_t sub_1832F4598@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v5 = NWTXTRecord.subscript.getter(v3, v4);
  v7 = v6;
  swift_unknownObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  a2[1] = v7;
  return result;
}

uint64_t sub_1832F4614(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a3;
  v4 = a3[1];
  v5 = *a1;
  v6 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return NWTXTRecord.subscript.setter(v5, v6, v3, v4);
}

void (*NWTXTRecord.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  *v7 = NWTXTRecord.subscript.getter(a2, a3);
  v7[1] = v8;
  return sub_1832F46E8;
}

void sub_1832F46E8(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = (*a1)[3];
  v6 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NWTXTRecord.subscript.setter(v3, v4, v6, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    NWTXTRecord.subscript.setter(v3, v4, v6, v5);
  }
  free(v2);
}

uint64_t NWTXTRecord.dictionary.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = MEMORY[0x1E0DEE9E0];
  v0 = swift_bridgeObjectRetain();
  sub_18324FE60(v0, &v2);
  swift_bridgeObjectRelease();
  return v2;
}

BOOL sub_1832F47CC(uint64_t a1, uint64_t a2)
{
  return nw_txt_record_is_equal(*(nw_txt_record_t *)(a1 + 8), *(nw_txt_record_t *)(a2 + 8));
}

uint64_t sub_1832F4884(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    v6 = *(_QWORD *)(a5 + 56) + 24 * a2;
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)result = *(_QWORD *)v6;
    *(_QWORD *)(result + 8) = v8;
    v9 = *(_BYTE *)(v6 + 16);
    *(_BYTE *)(result + 16) = v9;
    swift_bridgeObjectRetain();
    sub_183257580(v7, v8, v9);
    return v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL static NWTXTRecord.Index.== infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result == *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL static NWTXTRecord.Index.< infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result < *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_1832F49B0(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result < *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_1832F49EC(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 16) & 1) == 0 && (*(_BYTE *)(result + 16) & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 8) == *(_QWORD *)(result + 8))
      return *(_QWORD *)a2 >= *(_QWORD *)result;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_1832F4A28(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result >= *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_1832F4A64(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 16) & 1) == 0 && (*(_BYTE *)(result + 16) & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 8) == *(_QWORD *)(result + 8))
      return *(_QWORD *)a2 < *(_QWORD *)result;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_1832F4AA0(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result == *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t NWTXTRecord.startIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  char v5;

  result = sub_1832F4B0C(*v1);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t sub_1832F4B0C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 88);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void NWTXTRecord.endIndex.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)v1 + 36);
  *(_QWORD *)a1 = 1 << *(_BYTE *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t NWTXTRecord.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1832FC954(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *v2);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t sub_1832F4C08@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  char v5;

  result = sub_1832F4B0C(*v1);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

void sub_1832F4C38(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)v1 + 36);
  *(_QWORD *)a1 = 1 << *(_BYTE *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
}

void (*sub_1832F4C58(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _QWORD v13[2];
  char v14;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v6 = sub_1832F4884((uint64_t)v13, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *v2);
  v8 = v7;
  v9 = v13[0];
  v10 = v13[1];
  v5[5] = v7;
  v5[6] = v9;
  v5[7] = v10;
  v11 = v14;
  *((_BYTE *)v5 + 33) = v14;
  swift_bridgeObjectRetain();
  sub_183257580(v9, v10, v11);
  sub_1832575A0(v9, v10, v11);
  swift_bridgeObjectRelease();
  *v5 = v6;
  v5[1] = v8;
  v5[2] = v9;
  v5[3] = v10;
  *((_BYTE *)v5 + 32) = v11;
  swift_bridgeObjectRetain();
  sub_183257580(v9, v10, v11);
  return sub_1832F4D30;
}

void sub_1832F4D30(uint64_t a1)
{
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v1 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v6 = *(_BYTE *)(*(_QWORD *)a1 + 32);
  v7 = *(_BYTE *)(*(_QWORD *)a1 + 33);
  swift_bridgeObjectRelease();
  sub_1832575A0(v4, v5, v6);
  swift_bridgeObjectRelease();
  sub_1832575A0(v3, v2, v7);
  free(v1);
}

uint64_t sub_1832F4DAC@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];

  v3 = a1[1];
  v5 = *a1;
  v6[0] = v3;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  return sub_1832F1B5C((uint64_t)&v5, *v2, v2[1], a2);
}

uint64_t sub_1832F4DE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *v1;
  v3 = v1[1];
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = sub_1832F4B0C(v4);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6 & 1;
  v7 = *(unsigned int *)(v4 + 36);
  *(_QWORD *)(a1 + 40) = 1 << *(_BYTE *)(v4 + 32);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = 0;
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t sub_1832F4E44()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  int v3;
  char v4;

  v1 = *v0;
  result = sub_1832F4B0C(*v0);
  if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(v1 + 36) == v3)
      return result == 1 << *(_BYTE *)(v1 + 32);
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1832F4E98(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -2;
}

uint64_t sub_1832F4EA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_1832F4EC0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, *v3, a3);
}

uint64_t sub_1832F4EC0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a4 < 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  else
  {
    v7 = a2;
    v8 = result;
    v9 = a6;
    v10 = a3 & 1;
    if (a4)
    {
      result = sub_1832FD658(result, a2, a3 & 1);
      v12 = 0;
      v13 = a5 + 64;
      v14 = a4 - 1;
      v15 = v7;
      v16 = a5 + 96;
      while (1)
      {
        if ((v10 & 1) != 0)
          goto LABEL_31;
        if ((v8 & 0x8000000000000000) != 0 || (v18 = 1 << *(_BYTE *)(a5 + 32), (uint64_t)v8 >= v18))
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        v19 = v8 >> 6;
        v20 = *(_QWORD *)(v13 + 8 * (v8 >> 6));
        if (((v20 >> v8) & 1) == 0)
          goto LABEL_28;
        if (*(_DWORD *)(a5 + 36) != (_DWORD)v7)
          goto LABEL_29;
        v21 = v20 & (-2 << (v8 & 0x3F));
        if (v21)
        {
          v8 = __clz(__rbit64(v21)) | v8 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v22 = v19 + 1;
          v23 = (unint64_t)(v18 + 63) >> 6;
          if (v19 + 1 >= v23)
            goto LABEL_22;
          v24 = *(_QWORD *)(v13 + 8 * v22);
          if (!v24)
          {
            v22 = v19 + 2;
            if (v19 + 2 >= v23)
              goto LABEL_22;
            v24 = *(_QWORD *)(v13 + 8 * v22);
            if (!v24)
            {
              v22 = v19 + 3;
              if (v19 + 3 >= v23)
              {
LABEL_22:
                v8 = 1 << *(_BYTE *)(a5 + 32);
                goto LABEL_5;
              }
              v24 = *(_QWORD *)(v13 + 8 * v22);
              if (!v24)
              {
                while (v23 - 4 != v19)
                {
                  v24 = *(_QWORD *)(v16 + 8 * v19++);
                  if (v24)
                  {
                    v25 = v8;
                    v26 = v16;
                    result = sub_1832903C4(v25, v7, 0);
                    v16 = v26;
                    v22 = v19 + 3;
                    goto LABEL_14;
                  }
                }
                v27 = v8;
                v28 = v16;
                result = sub_1832903C4(v27, v7, 0);
                v16 = v28;
                v8 = v18;
                goto LABEL_5;
              }
            }
          }
LABEL_14:
          v8 = __clz(__rbit64(v24)) + (v22 << 6);
        }
LABEL_5:
        v10 = 0;
        v7 = v15;
        if (v12++ == v14)
        {
          v7 = v15;
          v9 = a6;
          goto LABEL_26;
        }
      }
    }
    result = sub_1832FD658(result, a2, a3 & 1);
LABEL_26:
    *(_QWORD *)v9 = v8;
    *(_QWORD *)(v9 + 8) = v7;
    *(_BYTE *)(v9 + 16) = v10;
  }
  return result;
}

uint64_t sub_1832F50BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return sub_1832F50FC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_BYTE *)(a3 + 16), *v4, a4);
}

uint64_t sub_1832F50FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v31;

  if (a4 < 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
    v14 = a2;
    v15 = result;
    v16 = a3 & 1;
    result = sub_1832FD658(result, a2, a3 & 1);
    if (a4)
    {
      v17 = 0;
      v31 = a7 & 1;
      v18 = (a3 | a7) & 1;
      v19 = a8 + 64;
      v20 = a5;
      while (1)
      {
        if ((v18 & 1) != 0)
          goto LABEL_36;
        if ((_DWORD)v14 != a6)
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        if (v15 == v20)
        {
          result = sub_1832903C4(v20, v14, 0);
          *(_QWORD *)a9 = 0;
          *(_QWORD *)(a9 + 8) = 0;
          *(_BYTE *)(a9 + 16) = -1;
          return result;
        }
        if ((v15 & 0x8000000000000000) != 0)
          goto LABEL_32;
        v21 = 1 << *(_BYTE *)(a8 + 32);
        if ((uint64_t)v15 >= v21)
          goto LABEL_32;
        v22 = v15 >> 6;
        v23 = *(_QWORD *)(v19 + 8 * (v15 >> 6));
        if (((v23 >> v15) & 1) == 0)
          goto LABEL_33;
        if (*(_DWORD *)(a8 + 36) != a6)
          goto LABEL_34;
        v24 = v23 & (-2 << (v15 & 0x3F));
        if (v24)
        {
          result = sub_1832903C4(v15, v14, 0);
          v15 = __clz(__rbit64(v24)) | v15 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v25 = v22 + 1;
          v26 = (unint64_t)(v21 + 63) >> 6;
          if (v22 + 1 < v26)
          {
            v27 = *(_QWORD *)(v19 + 8 * v25);
            if (v27)
              goto LABEL_16;
            v25 = v22 + 2;
            if (v22 + 2 >= v26)
            {
LABEL_26:
              result = sub_1832903C4(v15, v14, 0);
              v15 = v21;
            }
            else
            {
              v27 = *(_QWORD *)(v19 + 8 * v25);
              if (!v27)
              {
                v25 = v22 + 3;
                if (v22 + 3 >= v26)
                  goto LABEL_26;
                v27 = *(_QWORD *)(v19 + 8 * v25);
                if (!v27)
                {
                  v28 = v26 - 4;
                  while (v28 != v22)
                  {
                    v27 = *(_QWORD *)(a8 + 96 + 8 * v22++);
                    if (v27)
                    {
                      v25 = v22 + 3;
                      goto LABEL_16;
                    }
                  }
                  goto LABEL_26;
                }
              }
LABEL_16:
              result = sub_1832903C4(v15, v14, 0);
              v15 = __clz(__rbit64(v27)) | (v25 << 6);
            }
            v20 = a5;
            goto LABEL_5;
          }
          result = sub_1832903C4(v15, v14, 0);
          v15 = v21;
        }
LABEL_5:
        ++v17;
        v14 = a6;
        v18 = v31;
        if (v17 == a4)
        {
          v16 = 0;
          v14 = a6;
          break;
        }
      }
    }
    *(_QWORD *)a9 = v15;
    *(_QWORD *)(a9 + 8) = v14;
    *(_BYTE *)(a9 + 16) = v16;
  }
  return result;
}

uint64_t sub_1832F5340(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1832F5360(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *v2);
}

uint64_t sub_1832F5360(uint64_t result, uint64_t a2, char a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;

  if ((a6 & 1) != 0 || (a3 & 1) != 0)
    goto LABEL_39;
  v8 = result;
  if (a4 < result)
    goto LABEL_37;
  if (a5 != (_DWORD)a2)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    v12 = a7 + 64;
    v22 = a7 + 96;
    v10 = 1;
    while (1)
    {
      if ((v8 & 0x8000000000000000) != 0 || (v13 = 1 << *(_BYTE *)(a7 + 32), (uint64_t)v8 >= v13))
      {
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      v14 = v8 >> 6;
      v15 = *(_QWORD *)(v12 + 8 * (v8 >> 6));
      if (((v15 >> v8) & 1) == 0)
        goto LABEL_35;
      if (*(_DWORD *)(a7 + 36) != a5)
        goto LABEL_36;
      v16 = v15 & (-2 << (v8 & 0x3F));
      if (v16)
      {
        result = sub_1832903C4(v8, a2, 0);
        v8 = __clz(__rbit64(v16)) | v8 & 0xFFFFFFFFFFFFFFC0;
        if (v8 == a4)
          return v10;
      }
      else
      {
        v17 = v14 + 1;
        v18 = (unint64_t)(v13 + 63) >> 6;
        if (v14 + 1 < v18)
        {
          v19 = *(_QWORD *)(v12 + 8 * v17);
          if (v19)
            goto LABEL_18;
          v17 = v14 + 2;
          if (v14 + 2 >= v18)
          {
LABEL_29:
            result = sub_1832903C4(v8, a2, 0);
            v8 = v13;
          }
          else
          {
            v19 = *(_QWORD *)(v12 + 8 * v17);
            if (!v19)
            {
              v17 = v14 + 3;
              if (v14 + 3 >= v18)
                goto LABEL_29;
              v19 = *(_QWORD *)(v12 + 8 * v17);
              if (!v19)
              {
                v20 = v18 - 4;
                while (v20 != v14)
                {
                  v19 = *(_QWORD *)(v22 + 8 * v14++);
                  if (v19)
                  {
                    v17 = v14 + 3;
                    goto LABEL_18;
                  }
                }
                goto LABEL_29;
              }
            }
LABEL_18:
            result = sub_1832903C4(v8, a2, 0);
            v8 = __clz(__rbit64(v19)) | (v17 << 6);
          }
          if (v8 == a4)
            return v10;
          goto LABEL_31;
        }
        result = sub_1832903C4(v8, a2, 0);
        v8 = v13;
        if (v13 == a4)
          return v10;
      }
LABEL_31:
      a2 = a5;
      if (__OFADD__(v10++, 1))
      {
        __break(1u);
        goto LABEL_34;
      }
    }
  }
  sub_1832903C4(a4, a2, 0);
  return 0;
}

uint64_t sub_1832F554C(uint64_t result, uint64_t a2)
{
  int v2;

  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_13;
  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_QWORD *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)result < *(_QWORD *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (v2 != *(_QWORD *)(a2 + 32))
    goto LABEL_11;
  if (*(_QWORD *)result >= *(_QWORD *)(a2 + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1832F55B8(uint64_t result, uint64_t a2)
{
  int v2;

  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_13;
  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_QWORD *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)result < *(_QWORD *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(a2 + 32) != v2)
    goto LABEL_11;
  if (*(_QWORD *)(a2 + 24) < *(_QWORD *)result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1832F5624(uint64_t result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_13;
  if (*(_DWORD *)(result + 8) != *(_QWORD *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)result < *(_QWORD *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (((*(_BYTE *)(a2 + 40) | *(_BYTE *)(result + 40)) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(result + 32))
    goto LABEL_11;
  if (*(_QWORD *)(a2 + 24) < *(_QWORD *)(result + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1832F56A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1832FC954(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *v2);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t sub_1832F56DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t result;

  v3 = *v1;
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = sub_1832FC954(*(_QWORD *)a1, v5, v6, v3);
  v9 = v8;
  v11 = v10;
  result = sub_1832903C4(v4, v5, v6);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v11 & 1;
  return result;
}

__n128 sub_1832F5754@<Q0>(__n128 *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  __n128 result;
  unint64_t v5;
  char v6;
  __n128 v7;

  v7 = *(__n128 *)v1;
  v3 = sub_1832F4B0C(*v1);
  result = v7;
  *a1 = v7;
  a1[1].n128_u64[0] = v3;
  a1[1].n128_u64[1] = v5;
  a1[2].n128_u8[0] = v6 & 1;
  return result;
}

uint64_t sub_1832F579C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  v1 = *v0;
  v2 = sub_1832F4B0C(*v0);
  v4 = v3;
  v6 = v5 & 1;
  v7 = sub_1832F5360(v2, v3, v5 & 1, 1 << *(_BYTE *)(v1 + 32), *(_DWORD *)(v1 + 36), 0, v1);
  sub_1832903C4(v2, v4, v6);
  return v7;
}

uint64_t sub_1832F5818()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = sub_1832F611C(*v0, v0[1]);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1832F5860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1832F64B4(a1, a2, a3, *v3, v3[1]);
}

uint64_t sub_1832F5868()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *v0;
  v4 = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain();
  sub_18324FE60(v1, &v4);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  v2 = sub_183B9165C();
  swift_bridgeObjectRelease();
  return v2;
}

void sub_1832F5910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1832F5970(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1832F5B54);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_1832F5B78()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_183B91884();
  v4 = sub_1832F5BF4(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1832F5BF4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_1832F5D38(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_183273CD4(v9, 0);
      v12 = sub_1832F5E24((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x186DB1CB8](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x186DB1CB8);
LABEL_9:
      sub_183B91E78();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x186DB1CB8]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_1832F5D38(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_18329687C(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_18329687C(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_183B9183C();
  }
  __break(1u);
  return result;
}

unint64_t sub_1832F5E24(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_18329687C(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_183B91848();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_183B91E78();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_18329687C(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_183B91818();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

_QWORD *sub_1832F6034(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_beginAccess();
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC390);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v2;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
  v5 = sub_1832F6398((uint64_t)&v7, (uint64_t)(v3 + 4), v2, a1);
  swift_retain();
  swift_release();
  if (v5 != v2)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1832F611C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  _QWORD v17[4];
  char v18;

  v4 = sub_1832F4B0C(a1);
  v6 = v5;
  v8 = v7 & 1;
  v9 = sub_1832F5360(v4, v5, v7 & 1, 1 << *(_BYTE *)(a1 + 32), *(_DWORD *)(a1 + 36), 0, a1);
  sub_1832903C4(v4, v6, v8);
  if (!v9)
    return MEMORY[0x1E0DEE9D8];
  if (v9 <= 0)
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECA0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v9;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v12 = sub_1832F64B4((uint64_t)v17, (uint64_t)(v10 + 4), v9, a1, a2);
  v13 = v17[2];
  v14 = v17[3];
  v15 = v18;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_1832903C4(v13, v14, v15);
  if (v12 == v9)
    return (uint64_t)v10;
  __break(1u);
  return result;
}

uint64_t sub_1832F6278(char *a1, int64_t a2)
{
  char *v4;
  size_t v5;
  char *v6;
  uint64_t result;

  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC1A0);
    v4 = (char *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    *((_QWORD *)v4 + 2) = a2;
    *((_QWORD *)v4 + 3) = 2 * v5 - 64;
    v6 = v4 + 32;
    if (&v4[a2 + 32] <= a1 || v6 >= &a1[a2])
    {
      memcpy(v6, a1, a2);
      return (uint64_t)v4;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_1832F6398(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = (_QWORD *)result;
  if (!a2)
  {
LABEL_11:
    v6 = 0;
    goto LABEL_12;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_12:
    *v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v7 = a2;
    result = swift_beginAccess();
    v8 = *(_QWORD *)(a4 + 16);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = (_QWORD *)(v8 + 80);
      v11 = 1;
      while (v11 - 1 < v9)
      {
        v12 = *(v10 - 1);
        v13 = *v10;
        v14 = *((_BYTE *)v10 - 16);
        v15 = *(v10 - 4);
        v16 = *(v10 - 3);
        v17 = *(v10 - 5);
        *(_QWORD *)v7 = *(v10 - 6);
        *(_QWORD *)(v7 + 8) = v17;
        *(_QWORD *)(v7 + 16) = v15;
        *(_QWORD *)(v7 + 24) = v16;
        *(_BYTE *)(v7 + 32) = v14;
        *(_QWORD *)(v7 + 40) = v12;
        *(_QWORD *)(v7 + 48) = v13;
        if (v6 == v11)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_12;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRetain();
        v18 = v11 + 1;
        v9 = *(_QWORD *)(v8 + 16);
        v10 += 8;
        v7 += 56;
        if (v11++ == v9)
        {
          v6 = v18 - 1;
          goto LABEL_12;
        }
      }
      __break(1u);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1832F64B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  result = sub_1832F4B0C(a4);
  v12 = result;
  v13 = v11 & 1;
  if (!a2)
  {
    result = 0;
    goto LABEL_32;
  }
  if (!a3)
  {
    result = 0;
LABEL_32:
    v14 = a4;
LABEL_36:
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = a5;
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = v13;
    return result;
  }
  if (a3 < 0)
    goto LABEL_43;
  v34 = a1;
  v35 = a5;
  if ((v11 & 1) == 0)
  {
    result = 0;
    v14 = a4;
    v15 = a4 + 64;
    v16 = 1;
    v37 = a3;
    while (1)
    {
      v17 = *(unsigned int *)(v14 + 36);
      if ((_DWORD)v17 != (_DWORD)v10)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        break;
      }
      v18 = v16;
      v19 = 1 << *(_BYTE *)(v14 + 32);
      if (v12 == v19)
      {
        v13 = 0;
LABEL_35:
        a1 = v34;
        a5 = v35;
        goto LABEL_36;
      }
      if ((v12 & 0x8000000000000000) != 0 || (uint64_t)v12 >= v19)
        goto LABEL_38;
      v41 = a2;
      v20 = v12 >> 6;
      if ((*(_QWORD *)(v15 + 8 * (v12 >> 6)) & (1 << v12)) == 0)
        goto LABEL_39;
      v40 = v18;
      v36 = v10;
      v21 = v15;
      v22 = (uint64_t *)(*(_QWORD *)(v14 + 48) + 16 * v12);
      v23 = v22[1];
      v39 = *v22;
      v24 = *(_QWORD *)(v14 + 56) + 24 * v12;
      v25 = *(_QWORD *)v24;
      v26 = *(_QWORD *)(v24 + 8);
      v27 = *(_BYTE *)(v24 + 16);
      swift_bridgeObjectRetain();
      sub_183257580(v25, v26, v27);
      swift_bridgeObjectRetain();
      sub_183257580(v25, v26, v27);
      swift_bridgeObjectRelease();
      result = sub_1832575A0(v25, v26, v27);
      v14 = a4;
      v28 = 1 << *(_BYTE *)(a4 + 32);
      if ((uint64_t)v12 >= v28)
        goto LABEL_40;
      v29 = *(_QWORD *)(v21 + 8 * v20);
      if ((v29 & (1 << v12)) == 0)
        goto LABEL_41;
      v10 = v17;
      if (*(_DWORD *)(a4 + 36) != (_DWORD)v17)
        goto LABEL_42;
      v15 = v21;
      v30 = v29 & (-2 << (v12 & 0x3F));
      if (v30)
      {
        v12 = __clz(__rbit64(v30)) | v12 & 0xFFFFFFFFFFFFFFC0;
        goto LABEL_28;
      }
      v31 = v20 + 1;
      v32 = (unint64_t)(v28 + 63) >> 6;
      if (v20 + 1 < v32)
      {
        v33 = *(_QWORD *)(v21 + 8 * v31);
        if (v33)
          goto LABEL_18;
        v31 = v20 + 2;
        if (v20 + 2 < v32)
        {
          v33 = *(_QWORD *)(v21 + 8 * v31);
          if (v33)
            goto LABEL_18;
          v31 = v20 + 3;
          if (v20 + 3 < v32)
          {
            v33 = *(_QWORD *)(v21 + 8 * v31);
            if (v33)
            {
LABEL_18:
              v12 = __clz(__rbit64(v33)) + (v31 << 6);
              goto LABEL_28;
            }
            while (v32 - 4 != v20)
            {
              v33 = *(_QWORD *)(a4 + 96 + 8 * v20++);
              if (v33)
              {
                sub_1832903C4(v12, v36, 0);
                v10 = v17;
                v15 = v21;
                v14 = a4;
                v31 = v20 + 3;
                goto LABEL_18;
              }
            }
            sub_1832903C4(v12, v36, 0);
            v10 = v17;
            v15 = v21;
            v14 = a4;
          }
        }
      }
      v12 = v28;
LABEL_28:
      result = v40;
      *(_QWORD *)v41 = v39;
      *(_QWORD *)(v41 + 8) = v23;
      *(_QWORD *)(v41 + 16) = v25;
      *(_QWORD *)(v41 + 24) = v26;
      *(_BYTE *)(v41 + 32) = v27;
      if (v40 == v37)
      {
        v13 = 0;
        result = v37;
        goto LABEL_35;
      }
      a2 = v41 + 40;
      v16 = v40 + 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1832F67A0(uint64_t a1, uint64_t a2)
{
  return sub_1832FC9D8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1832F69A8);
}

unint64_t sub_1832F67AC(uint64_t a1)
{
  uint64_t v2;

  sub_183B91F44();
  v2 = sub_183B91674();
  return sub_1832F6A88(a1, v2);
}

unint64_t sub_1832F67FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_183B92250();
  sub_183B91740();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  v4 = sub_183B9228C();
  return sub_1832F6BB0(a1, a2, v4);
}

unint64_t sub_1832F687C(_QWORD *a1)
{
  uint64_t v2;

  sub_183B92250();
  sub_183B917C4();
  type metadata accessor for NWActorID();
  sub_183B914AC();
  sub_1832FD8E0((unint64_t *)&qword_1EDCDEC30, MEMORY[0x1E0CB09C8]);
  sub_183B91680();
  v2 = sub_183B9228C();
  return sub_1832F6D40(a1, v2);
}

unint64_t sub_1832F6914(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_183B92244();
  return sub_1832F6E80(a1, v2);
}

unint64_t sub_1832F6944(uint64_t a1)
{
  uint64_t v2;

  sub_183B914AC();
  sub_1832FD8E0((unint64_t *)&qword_1EDCDEC30, MEMORY[0x1E0CB09C8]);
  v2 = sub_183B91674();
  return sub_1832F6F1C(a1, v2);
}

unint64_t sub_1832F69A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_183B920F4() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_183B920F4() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1832F6A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_183B91F44();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_183B916BC();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1832F6BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v7 = sub_183B91740();
    v9 = v8;
    if (v7 == sub_183B91740() && v9 == v10)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v6;
    }
    v12 = sub_183B920F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      v13 = ~v5;
      v6 = (v6 + 1) & v13;
      if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      {
        while (1)
        {
          v14 = sub_183B91740();
          v16 = v15;
          if (v14 == sub_183B91740() && v16 == v17)
            break;
          v19 = sub_183B920F4();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            v6 = (v6 + 1) & v13;
            if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
              continue;
          }
          return v6;
        }
        goto LABEL_16;
      }
    }
  }
  return v6;
}

unint64_t sub_1832F6D40(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v15;

  v5 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_183058C44(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      v13 = *v8 == *a1 && v8[1] == a1[1];
      if ((v13 || (sub_183B920F4() & 1) != 0) && (sub_183B9147C() & 1) != 0)
        break;
      sub_1832BF12C((uint64_t)v8);
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        return v10;
    }
    sub_1832BF12C((uint64_t)v8);
  }
  return v10;
}

unint64_t sub_1832F6E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1832F6F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_183B914AC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_1832FD8E0(&qword_1EDCDECD0, MEMORY[0x1E0CB09D0]);
      v14 = sub_183B916BC();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_1832F7054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1832F67FC(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1832FB278();
      v12 = v15;
    }
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v12 + 56) + 24 * v8;
    v14 = *(_BYTE *)(v13 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v13;
    *(_BYTE *)(a3 + 16) = v14;
    sub_1832B88A0(v8, v12);
    *v4 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = -1;
  }
  return result;
}

double sub_1832F7144@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1832F67AC(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1832FB4CC();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_183B91F44();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    sub_1832A3478((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_1832B8AB8(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1832F7240(_QWORD *a1)
{
  return sub_1832F7268(a1, (void (*)(unint64_t, uint64_t))sub_1832B8D3C, &qword_1EDCDED00);
}

uint64_t sub_1832F7254(_QWORD *a1)
{
  return sub_1832F7268(a1, (void (*)(unint64_t, uint64_t))sub_1832B8D3C, &qword_1EDCDED08);
}

uint64_t sub_1832F7268(_QWORD *a1, void (*a2)(unint64_t, uint64_t), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v6;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1832F687C(a1);
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v6;
  v16 = *v6;
  *v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1832FB714(a3);
    v11 = v16;
  }
  v12 = *(_QWORD *)(v11 + 48);
  v13 = type metadata accessor for NWActorID();
  sub_1832BF12C(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v8);
  v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v8);
  a2(v8, v11);
  *v6 = v11;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1832F734C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_1832F687C(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1832FB94C();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for NWActorID();
  sub_1832BF12C(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v4);
  sub_1832B900C(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1832F7430@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1832F687C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1832FBB84();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for NWActorID();
    sub_1832BF12C(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = type metadata accessor for NWActorDiscoveryMechanism(0);
    v14 = *(_QWORD *)(v13 - 8);
    sub_183058EC4(v12 + *(_QWORD *)(v14 + 72) * v6, a2, type metadata accessor for NWActorDiscoveryMechanism);
    sub_1832B92D8(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for NWActorDiscoveryMechanism(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

uint64_t sub_1832F7564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1832FC9D8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1832F69A8);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1832FBE1C();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = type metadata accessor for NWActorSystem.ServerRole();
    v14 = *(_QWORD *)(v13 - 8);
    sub_183058EC4(v12 + *(_QWORD *)(v14 + 72) * v8, a3, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
    sub_1832B95E4(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for NWActorSystem.ServerRole();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

uint64_t sub_1832F769C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1832F6944(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1832FC288();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_183B914AC();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a2, v12 + *(_QWORD *)(v14 + 72) * v6, v13);
    sub_1832B99AC(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

uint64_t sub_1832F77E0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int16 *v33;
  __int16 v34;
  __int16 v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC370);
  v40 = a2;
  v6 = sub_183B91F80();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v37 = v2;
  v38 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v39 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_33;
      v24 = *(_QWORD *)(v39 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v38)
              goto LABEL_33;
            v24 = *(_QWORD *)(v39 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = (__int16 *)(*(_QWORD *)(v5 + 56) + 4 * v21);
    v34 = *v33;
    v35 = v33[1];
    if ((v40 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_183B92250();
    sub_183B917C4();
    result = sub_183B9228C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = (_WORD *)(*(_QWORD *)(v7 + 56) + 4 * v17);
    *v19 = v34;
    v19[1] = v35;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v37;
  v23 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1832F7AFC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t i;
  char v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7718);
  v40 = a2;
  v6 = sub_183B91F80();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v30 = *v29;
      v31 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v34 = *(_QWORD *)v32;
      v33 = *(_QWORD *)(v32 + 8);
      v35 = *(_BYTE *)(v32 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_183257580(v34, v33, v35);
      }
      sub_183B92250();
      sub_183B91740();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      result = sub_183B9228C();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
      *(_QWORD *)v19 = v34;
      *(_QWORD *)(v19 + 8) = v33;
      *(_BYTE *)(v19 + 16) = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1832F7E40(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int v39;
  _OWORD v40[2];

  v3 = v2;
  v5 = sub_183B91F44();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECD8);
  v39 = a2;
  v10 = sub_183B91F80();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v38 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v36 = v2;
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = v38;
    v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_34;
      v24 = v38[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v37)
              goto LABEL_34;
            v24 = v38[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      sub_1832A3478((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v21), v40);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      sub_18321887C(*(_QWORD *)(v9 + 56) + 32 * v21, (uint64_t)v40);
    }
    result = sub_183B91674();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = (uint64_t)sub_1832A3478(v40, (_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v19));
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = v38;
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1832F81C4(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v5 = v3;
  v7 = type metadata accessor for NWActorID();
  v41 = *(_QWORD *)(v7 - 8);
  v42 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v43 = a2;
  v11 = sub_183B91F80();
  v12 = v11;
  if (*(_QWORD *)(v10 + 16))
  {
    v38 = v3;
    v13 = 1 << *(_BYTE *)(v10 + 32);
    v14 = *(_QWORD *)(v10 + 64);
    v40 = (_QWORD *)(v10 + 64);
    if (v13 < 64)
      v15 = ~(-1 << v13);
    else
      v15 = -1;
    v16 = v15 & v14;
    v39 = (unint64_t)(v13 + 63) >> 6;
    v17 = v11 + 64;
    result = swift_retain();
    v19 = 0;
    while (1)
    {
      if (v16)
      {
        v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v22 = v21 | (v19 << 6);
      }
      else
      {
        v23 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v39)
          goto LABEL_34;
        v24 = v40[v23];
        ++v19;
        if (!v24)
        {
          v19 = v23 + 1;
          if (v23 + 1 >= v39)
            goto LABEL_34;
          v24 = v40[v19];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_34:
              swift_release();
              v5 = v38;
              if ((v43 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v10 + 32);
                if (v36 >= 64)
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v36;
                *(_QWORD *)(v10 + 16) = 0;
              }
              break;
            }
            v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                v19 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v19 >= v39)
                  goto LABEL_34;
                v24 = v40[v19];
                ++v25;
                if (v24)
                  goto LABEL_21;
              }
            }
            v19 = v25;
          }
        }
LABEL_21:
        v16 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v19 << 6);
      }
      v26 = *(_QWORD *)(v41 + 72);
      v27 = *(_QWORD *)(v10 + 48) + v26 * v22;
      if ((v43 & 1) != 0)
      {
        sub_183058EC4(v27, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        v28 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      }
      else
      {
        sub_183058C44(v27, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        v28 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
        swift_retain();
      }
      sub_183B92250();
      sub_183B917C4();
      sub_183B914AC();
      sub_1832FD8E0((unint64_t *)&qword_1EDCDEC30, MEMORY[0x1E0CB09C8]);
      sub_183B91680();
      result = sub_183B9228C();
      v29 = -1 << *(_BYTE *)(v12 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v17 + 8 * v31);
        }
        while (v35 == -1);
        v20 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      result = sub_183058EC4((uint64_t)v9, *(_QWORD *)(v12 + 48) + v26 * v20, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v28;
      ++*(_QWORD *)(v12 + 16);
    }
  }
  result = swift_release();
  *v5 = v12;
  return result;
}

uint64_t sub_1832F8578(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;

  v3 = v2;
  v5 = type metadata accessor for NWActorID();
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECE0);
  v40 = a2;
  v9 = sub_183B91F80();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v37 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v35 = v2;
  v36 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = v37;
    v23 = v37[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_34;
      v23 = v37[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_34:
          swift_release();
          v3 = v35;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = v37[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v17 >= v36)
              goto LABEL_34;
            v23 = v37[v17];
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v17 = v24;
      }
    }
LABEL_21:
    v14 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v38 + 72);
    v26 = *(_QWORD *)(v8 + 48) + v25 * v20;
    if ((v40 & 1) != 0)
    {
      sub_183058EC4(v26, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      v41 = *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v20);
    }
    else
    {
      sub_183058C44(v26, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      v41 = *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v20);
      swift_retain();
    }
    sub_183B92250();
    sub_183B917C4();
    sub_183B914AC();
    sub_1832FD8E0((unint64_t *)&qword_1EDCDEC30, MEMORY[0x1E0CB09C8]);
    sub_183B91680();
    result = sub_183B9228C();
    v27 = -1 << *(_BYTE *)(v10 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v15 + 8 * v29);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = sub_183058EC4((uint64_t)v7, *(_QWORD *)(v10 + 48) + v25 * v18, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    *(_OWORD *)(*(_QWORD *)(v10 + 56) + 16 * v18) = v41;
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = v37;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v34 = 1 << *(_BYTE *)(v8 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_1832F8938(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;

  v3 = v2;
  v5 = type metadata accessor for NWActorDiscoveryMechanism(0);
  v44 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NWActorID();
  v45 = *(_QWORD *)(v8 - 8);
  v46 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECE8);
  v47 = a2;
  v12 = sub_183B91F80();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v42 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v40 = v2;
  v41 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  v43 = v7;
  while (1)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = v42;
    v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_34;
      v26 = v42[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          v3 = v40;
          if ((v47 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_43;
            if (v20 >= v41)
              goto LABEL_34;
            v26 = v42[v20];
            ++v27;
            if (v26)
              goto LABEL_21;
          }
        }
        v20 = v27;
      }
    }
LABEL_21:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    v28 = *(_QWORD *)(v45 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v47 & 1) != 0)
    {
      sub_183058EC4(v29, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      v30 = *(_QWORD *)(v44 + 72);
      sub_183058EC4(*(_QWORD *)(v11 + 56) + v30 * v23, (uint64_t)v7, type metadata accessor for NWActorDiscoveryMechanism);
    }
    else
    {
      sub_183058C44(v29, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      v30 = *(_QWORD *)(v44 + 72);
      sub_183058C44(*(_QWORD *)(v11 + 56) + v30 * v23, (uint64_t)v7, type metadata accessor for NWActorDiscoveryMechanism);
    }
    sub_183B92250();
    sub_183B917C4();
    sub_183B914AC();
    sub_1832FD8E0((unint64_t *)&qword_1EDCDEC30, MEMORY[0x1E0CB09C8]);
    sub_183B91680();
    result = sub_183B9228C();
    v31 = -1 << *(_BYTE *)(v13 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      v7 = v43;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      v7 = v43;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    sub_183058EC4((uint64_t)v10, *(_QWORD *)(v13 + 48) + v28 * v21, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    result = sub_183058EC4((uint64_t)v7, *(_QWORD *)(v13 + 56) + v30 * v21, type metadata accessor for NWActorDiscoveryMechanism);
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v3 = v40;
  v25 = v42;
  if ((v47 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v11 + 32);
  if (v38 >= 64)
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v38;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v13;
  return result;
}

uint64_t sub_1832F8D6C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;

  v3 = v2;
  v5 = type metadata accessor for NWActorSystem.ServerRole();
  v42 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED18);
  v43 = a2;
  v9 = sub_183B91F80();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v41 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v39 = v2;
  v40 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_34;
      v24 = v41[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v17 >= v40)
              goto LABEL_34;
            v24 = v41[v17];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v17 = v25;
      }
    }
LABEL_21:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    v26 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v42 + 72);
    v30 = *(_QWORD *)(v8 + 56) + v29 * v21;
    if ((v43 & 1) != 0)
    {
      sub_183058EC4(v30, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
    }
    else
    {
      sub_183058C44(v30, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
      swift_bridgeObjectRetain();
    }
    sub_183B92250();
    sub_183B917C4();
    result = sub_183B9228C();
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    result = sub_183058EC4((uint64_t)v7, *(_QWORD *)(v10 + 56) + v29 * v18, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v39;
  v23 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v8 + 32);
  if (v38 >= 64)
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v38;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_1832F90EC(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7598);
  result = sub_183B91F80();
  v11 = result;
  if (*(_QWORD *)(v9 + 16))
  {
    v36 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v39 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v38 = (unint64_t)(v14 + 63) >> 6;
    v17 = result + 64;
    v37 = a2;
    v18 = 16;
    if ((a2 & 1) != 0)
      v18 = 32;
    v40 = v18;
    while (1)
    {
      if (v16)
      {
        v20 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v21 = v20 | (v12 << 6);
      }
      else
      {
        v22 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v22 >= v38)
          goto LABEL_33;
        v23 = v39[v22];
        ++v12;
        if (!v23)
        {
          v12 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_33;
          v23 = v39[v12];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_33:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v36;
                goto LABEL_40;
              }
              v34 = 1 << *(_BYTE *)(v9 + 32);
              if (v34 >= 64)
                bzero(v39, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v34;
              v3 = v36;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v12 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v12 >= v38)
                  goto LABEL_33;
                v23 = v39[v12];
                ++v24;
                if (v23)
                  goto LABEL_23;
              }
            }
            v12 = v24;
          }
        }
LABEL_23:
        v16 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v12 << 6);
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v21);
      v26 = *(_QWORD *)(v6 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + v40))(v8, *(_QWORD *)(v9 + 56) + v26 * v21, v5);
      result = sub_183B92244();
      v27 = -1 << *(_BYTE *)(v11 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v19) = v25;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 56) + v26 * v19, v8, v5);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v11;
  return result;
}

uint64_t sub_1832F9420(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[4];
  int v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
  v51 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  MEMORY[0x1E0C80A78](v5);
  v50 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_183B914AC();
  v49 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF8);
  v11 = sub_183B91F80();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v46 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v44 = v2;
  v45 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v48 = v10;
  result = swift_retain();
  v19 = 0;
  v43 = a2;
  v20 = 16;
  if ((a2 & 1) != 0)
    v20 = 32;
  v47 = v20;
  v21 = v20;
  while (1)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v24 = v23 | (v19 << 6);
      goto LABEL_24;
    }
    v25 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45)
      break;
    v26 = v46;
    v27 = v46[v25];
    ++v19;
    if (!v27)
    {
      v19 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_34;
      v27 = v46[v19];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          v40 = v48;
          swift_release();
          v3 = v44;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            v19 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_43;
            if (v19 >= v45)
              goto LABEL_34;
            v27 = v46[v19];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v19 = v28;
      }
    }
LABEL_23:
    v16 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_24:
    v29 = v48;
    v30 = *(_QWORD *)(v49 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v49 + v21))(v9, *(_QWORD *)(v48 + 48) + v30 * v24, v7);
    v31 = *(_QWORD *)(v29 + 56);
    v32 = *(_QWORD *)(v51 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v51 + v21))(v50, v31 + v32 * v24, v52);
    sub_1832FD8E0((unint64_t *)&qword_1EDCDEC30, MEMORY[0x1E0CB09C8]);
    result = sub_183B91674();
    v33 = -1 << *(_BYTE *)(v12 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v17 + 8 * v35);
      }
      while (v39 == -1);
      v22 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v17 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v49 + 32))(*(_QWORD *)(v12 + 48) + v30 * v22, v9, v7);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v51 + 32))(*(_QWORD *)(v12 + 56) + v32 * v22, v50, v52);
    ++*(_QWORD *)(v12 + 16);
  }
  v40 = v48;
  swift_release();
  v3 = v44;
  v26 = v46;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v41 = 1 << *(_BYTE *)(v40 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v40 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_1832F9814(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  int v43;

  v3 = v2;
  v5 = sub_183B914AC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDECC0);
  v43 = a2;
  v10 = sub_183B91F80();
  v11 = v9;
  v12 = v10;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v11 + 32);
  v14 = *(_QWORD *)(v11 + 64);
  v41 = (_QWORD *)(v11 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v39 = v3;
  v40 = (unint64_t)(v13 + 63) >> 6;
  v17 = v10 + 64;
  result = swift_retain();
  v19 = 0;
  for (i = v11; ; v11 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_34;
      v25 = v41[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v19 >= v40)
              goto LABEL_34;
            v25 = v41[v19];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v19 = v26;
      }
    }
LABEL_21:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    v27 = *(_QWORD *)(v6 + 72);
    v28 = *(_QWORD *)(v11 + 48) + v27 * v22;
    if ((v43 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v28, v5);
      v29 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v28, v5);
      v29 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v22);
      swift_retain();
    }
    sub_1832FD8E0((unint64_t *)&qword_1EDCDEC30, MEMORY[0x1E0CB09C8]);
    result = sub_183B91674();
    v30 = -1 << *(_BYTE *)(v12 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v37 = 1 << *(_BYTE *)(v11 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_1832F9BA4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECB8);
  v42 = a2;
  v6 = sub_183B91F80();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_183B92250();
    sub_183B917C4();
    result = sub_183B9228C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1832F9EC8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;

  v7 = v6;
  v14 = *v6;
  v16 = sub_1832F67FC(a4, a5);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a6 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_1832FB278();
LABEL_7:
    v22 = (_QWORD *)*v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7] + 24 * v16;
      result = sub_1832575A0(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
      *(_QWORD *)v23 = a1;
      *(_QWORD *)(v23 + 8) = a2;
      *(_BYTE *)(v23 + 16) = a3;
      return result;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v27 = (uint64_t *)(v22[6] + 16 * v16);
    *v27 = a4;
    v27[1] = a5;
    v28 = v22[7] + 24 * v16;
    *(_QWORD *)v28 = a1;
    *(_QWORD *)(v28 + 8) = a2;
    *(_BYTE *)(v28 + 16) = a3;
    v29 = v22[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (!v30)
    {
      v22[2] = v31;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1832F7AFC(v19, a6 & 1);
  v25 = sub_1832F67FC(a4, a5);
  if ((v20 & 1) == (v26 & 1))
  {
    v16 = v25;
    v22 = (_QWORD *)*v7;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_183B921CC();
  __break(1u);
  return result;
}

_OWORD *sub_1832FA050(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = sub_183B91F44();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1832F67AC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_OWORD *)(v20[7] + 32 * v14);
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v21);
        return sub_1832A3478(a1, v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1832FB4CC();
      goto LABEL_7;
    }
    sub_1832F7E40(v17, a3 & 1);
    v23 = sub_1832F67AC(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1832FABC8(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = (_OWORD *)sub_183B921CC();
  __break(1u);
  return result;
}

uint64_t sub_1832FA1CC(uint64_t a1, _QWORD *a2, char a3)
{
  return sub_1832FA1E4(a1, a2, a3, &qword_1EDCDED00);
}

uint64_t sub_1832FA1D8(uint64_t a1, _QWORD *a2, char a3)
{
  return sub_1832FA1E4(a1, a2, a3, &qword_1EDCDED08);
}

uint64_t sub_1832FA1E4(uint64_t a1, _QWORD *a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD **v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v6 = (_QWORD **)v4;
  v10 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_1832F687C(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];
      result = swift_release();
      *(_QWORD *)(v22 + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_1832FB714(a4);
    goto LABEL_7;
  }
  sub_1832F81C4(v18, a3 & 1, a4);
  v24 = sub_1832F687C(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    result = sub_183B921CC();
    __break(1u);
    return result;
  }
  v15 = v24;
  v21 = *v6;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_183058C44((uint64_t)a2, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  return sub_1832FAC68(v15, (uint64_t)v12, a1, v21);
}

uint64_t sub_1832FA34C(uint64_t a1, uint64_t a2, _QWORD *a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v5 = (_QWORD **)v4;
  v10 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_1832F687C(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (uint64_t *)(v21[7] + 16 * v15);
      result = swift_release();
      *v22 = a1;
      v22[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_1832FB94C();
    goto LABEL_7;
  }
  sub_1832F8578(v18, a4 & 1);
  v24 = sub_1832F687C(a3);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    result = sub_183B921CC();
    __break(1u);
    return result;
  }
  v15 = v24;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_183058C44((uint64_t)a3, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  return sub_1832FAD00(v15, (uint64_t)v12, a1, a2, v21);
}

uint64_t sub_1832FA4B0(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1832F687C(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      v21 = type metadata accessor for NWActorDiscoveryMechanism(0);
      return sub_1832FD920(a1, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v13, type metadata accessor for NWActorDiscoveryMechanism);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1832FBB84();
    goto LABEL_7;
  }
  sub_1832F8938(v16, a3 & 1);
  v23 = sub_1832F687C(a2);
  if ((v17 & 1) != (v24 & 1))
  {
LABEL_14:
    result = sub_183B921CC();
    __break(1u);
    return result;
  }
  v13 = v23;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_183058C44((uint64_t)a2, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  return sub_1832FADA0(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_1832FA620(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1832FC9D8(a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1832F69A8);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for NWActorSystem.ServerRole();
        return sub_1832FD920(a1, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1832FBE1C();
      goto LABEL_7;
    }
    sub_1832F8D6C(v15, a4 & 1);
    v22 = sub_1832FC9D8(a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1832F69A8);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1832FAE58(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_183B921CC();
  __break(1u);
  return result;
}

uint64_t sub_1832FA770(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1832F6914(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, a1, v18);
      }
      return sub_1832FAEE8(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1832FC060();
      goto LABEL_7;
    }
    sub_1832F90EC(v13, a3 & 1);
    v20 = sub_1832F6914(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_1832FAEE8(v10, a2, a1, v16);
    }
  }
  result = sub_183B921CC();
  __break(1u);
  return result;
}

uint64_t sub_1832FA898(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = sub_183B914AC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1832F6944(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, a1, v22);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1832FC288();
      goto LABEL_7;
    }
    sub_1832F9420(v17, a3 & 1);
    v24 = sub_1832F6944(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1832FAF78(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = sub_183B921CC();
  __break(1u);
  return result;
}

uint64_t sub_1832FAA24(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = sub_183B914AC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1832F6944(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_release();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1832FC56C();
    goto LABEL_7;
  }
  sub_1832F9814(v17, a3 & 1);
  v23 = sub_1832F6944(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = sub_183B921CC();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1832FB034(v14, (uint64_t)v11, a1, v20);
}

unint64_t sub_1832FAB80(unint64_t result, uint64_t a2, uint64_t a3, int a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_DWORD *)(a5[7] + 4 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

_OWORD *sub_1832FABC8(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_183B91F44();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_1832A3478(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1832FAC68(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for NWActorID();
  result = sub_183058EC4(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1832FAD00(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for NWActorID();
  result = sub_183058EC4(a2, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t sub_1832FADA0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for NWActorID();
  sub_183058EC4(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  v10 = a4[7];
  v11 = type metadata accessor for NWActorDiscoveryMechanism(0);
  result = sub_183058EC4(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, type metadata accessor for NWActorDiscoveryMechanism);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_1832FAE58(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for NWActorSystem.ServerRole();
  result = sub_183058EC4(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

uint64_t sub_1832FAEE8(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a3, v8);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

uint64_t sub_1832FAF78(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_183B914AC();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_1832FB034(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_183B914AC();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

void *sub_1832FB0CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC370);
  v2 = *v0;
  v3 = sub_183B91F74();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 4 * v15;
    LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v20) = (_DWORD)v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1832FB278()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7718);
  v2 = *v0;
  v3 = sub_183B91F74();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_BYTE *)(v21 + 16);
    *v24 = v19;
    v24[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_QWORD *)(v26 + 8) = v23;
    *(_BYTE *)(v26 + 16) = v25;
    swift_bridgeObjectRetain();
    result = (void *)sub_183257580(v22, v23, v25);
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1832FB450(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_1832575A0(result, a2, a3);
  return result;
}

unint64_t sub_1832FB464()
{
  unint64_t result;

  result = qword_1EDCD7650;
  if (!qword_1EDCD7650)
  {
    result = MEMORY[0x186DB5558](MEMORY[0x1E0CB0368], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EDCD7650);
  }
  return result;
}

uint64_t sub_1832FB4A8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void *sub_1832FB4CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _OWORD v26[2];

  v1 = v0;
  v2 = sub_183B91F44();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECD8);
  v6 = *v0;
  v7 = sub_183B91F74();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 32 * v18;
    sub_18321887C(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = sub_1832A3478(v26, (_OWORD *)(*(_QWORD *)(v8 + 56) + v20));
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1832FB708()
{
  return sub_1832FB714(&qword_1EDCDED00);
}

void *sub_1832FB714(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v1;
  v4 = type metadata accessor for NWActorID();
  v29 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v7 = *v1;
  v8 = sub_183B91F74();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v3 = v9;
    return result;
  }
  v27 = v3;
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v28 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v17)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v13;
    if (!v24)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v17)
        goto LABEL_26;
      v24 = *(_QWORD *)(v28 + 8 * v13);
      if (!v24)
        break;
    }
LABEL_25:
    v16 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v29 + 72) * v19;
    sub_183058C44(*(_QWORD *)(v7 + 48) + v20, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v21 = 8 * v19;
    v22 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v19);
    sub_183058EC4((uint64_t)v6, *(_QWORD *)(v9 + 48) + v20, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v22;
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v17)
  {
LABEL_26:
    result = (void *)swift_release();
    v3 = v27;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v13 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v13 >= v17)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v13);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1832FB94C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;

  v1 = v0;
  v2 = type metadata accessor for NWActorID();
  v26 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECE0);
  v5 = *v0;
  v6 = sub_183B91F74();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = v5 + 64;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v9 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v26 + 72) * v18;
    sub_183058C44(*(_QWORD *)(v5 + 48) + v19, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v20 = 16 * v18;
    v21 = *(_QWORD *)(v7 + 48) + v19;
    v27 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v20);
    sub_183058EC4((uint64_t)v4, v21, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + v20) = v27;
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v9 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1832FBB84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for NWActorDiscoveryMechanism(0);
  v29 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NWActorID();
  v28 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECE8);
  v8 = *v0;
  v9 = sub_183B91F74();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = (void *)swift_release();
LABEL_25:
    *v1 = v10;
    return result;
  }
  v25 = v1;
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v13 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v14 = 1 << *(_BYTE *)(v8 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v8 + 64);
  v26 = v8 + 64;
  v27 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v27)
      goto LABEL_23;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_23;
      v22 = *(_QWORD *)(v26 + 8 * v13);
      if (!v22)
        break;
    }
LABEL_22:
    v16 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    v19 = *(_QWORD *)(v28 + 72) * v18;
    sub_183058C44(*(_QWORD *)(v8 + 48) + v19, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v20 = *(_QWORD *)(v29 + 72) * v18;
    sub_183058C44(*(_QWORD *)(v8 + 56) + v20, (uint64_t)v4, type metadata accessor for NWActorDiscoveryMechanism);
    sub_183058EC4((uint64_t)v7, *(_QWORD *)(v10 + 48) + v19, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    result = (void *)sub_183058EC4((uint64_t)v4, *(_QWORD *)(v10 + 56) + v20, type metadata accessor for NWActorDiscoveryMechanism);
  }
  v23 = v21 + 2;
  if (v23 >= v27)
  {
LABEL_23:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_25;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v27)
      goto LABEL_23;
    v22 = *(_QWORD *)(v26 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1832FBE1C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for NWActorSystem.ServerRole();
  v29 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED18);
  v5 = *v0;
  v6 = sub_183B91F74();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v26 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v27 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(v29 + 72) * v16;
    sub_183058C44(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
    v22 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v17);
    *v22 = v19;
    v22[1] = v20;
    sub_183058EC4((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1832FC060()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7598);
  v23 = v0;
  v5 = *v0;
  v6 = sub_183B91F74();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_23:
    result = (void *)swift_release();
    *v23 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v24 = v5 + 64;
  v25 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25)
      goto LABEL_23;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_23;
      v20 = *(_QWORD *)(v24 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_22:
    v13 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    v18 = *(_QWORD *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 56) + v18, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v17;
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 56) + v18, v4, v1);
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_23;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v25)
      goto LABEL_23;
    v20 = *(_QWORD *)(v24 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

char *sub_1832FC288()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  char *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;

  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF0);
  v37 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v40 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_183B914AC();
  v36 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v38 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECF8);
  v33 = v0;
  v3 = *v0;
  v4 = sub_183B91F74();
  v5 = *(_QWORD *)(v3 + 16);
  v43 = v4;
  if (!v5)
  {
    result = (char *)swift_release();
    v32 = v43;
    v31 = v33;
LABEL_25:
    *v31 = v32;
    return result;
  }
  v6 = v4;
  result = (char *)(v4 + 64);
  v8 = (char *)(v3 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    result = (char *)memmove(result, v8, 8 * v9);
    v6 = v43;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v42 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v35 = (unint64_t)(v11 + 63) >> 6;
  v14 = v36;
  v15 = v37;
  v17 = v38;
  v16 = v39;
  v18 = v41;
  v19 = v43;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v44 = v10;
      v21 = v20 | (v10 << 6);
      v22 = v42;
      goto LABEL_9;
    }
    v27 = v10 + 1;
    v22 = v42;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v35)
      goto LABEL_23;
    v28 = *(_QWORD *)(v34 + 8 * v27);
    v29 = v10 + 1;
    if (!v28)
    {
      v29 = v27 + 1;
      if (v27 + 1 >= v35)
        goto LABEL_23;
      v28 = *(_QWORD *)(v34 + 8 * v29);
      if (!v28)
        break;
    }
LABEL_22:
    v13 = (v28 - 1) & v28;
    v44 = v29;
    v21 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_9:
    v23 = *(_QWORD *)(v14 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v17, *(_QWORD *)(v22 + 48) + v23, v16);
    v24 = *(_QWORD *)(v15 + 72) * v21;
    v25 = *(_QWORD *)(v22 + 56) + v24;
    v26 = v40;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v40, v25, v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(_QWORD *)(v19 + 48) + v23, v17, v16);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v15 + 32))(*(_QWORD *)(v19 + 56) + v24, v26, v18);
    v10 = v44;
  }
  v30 = v27 + 2;
  if (v30 >= v35)
  {
LABEL_23:
    result = (char *)swift_release();
    v31 = v33;
    v32 = v43;
    goto LABEL_25;
  }
  v28 = *(_QWORD *)(v34 + 8 * v30);
  if (v28)
  {
    v29 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v29 >= v35)
      goto LABEL_23;
    v28 = *(_QWORD *)(v34 + 8 * v29);
    ++v30;
    if (v28)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1832FC56C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_183B914AC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDECC0);
  v24 = v0;
  v5 = *v0;
  v6 = sub_183B91F74();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1832FC79C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDECB8);
  v2 = *v0;
  v3 = sub_183B91F74();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1832FC954(uint64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
    goto LABEL_10;
  if (result < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
  }
  else if (((*(_QWORD *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    if (*(_DWORD *)(a4 + 36) == a2)
      return sub_183B91D70();
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1832FC9D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;

  sub_183B92250();
  sub_183B917C4();
  v5 = sub_183B9228C();
  return a3(a1, a2, v5);
}

uint64_t sub_1832FCA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_1832F5910((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1832FCB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_183B912D8();
  v11 = result;
  if (result)
  {
    result = sub_183B912FC();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_183B912F0();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1832F5910(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_1832FCBCC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1832FCC18()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1832FCC4C + dword_1832FCE24[v0 >> 62]))();
}

uint64_t sub_1832FCC5C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t _s7Network11NWTXTRecordV5EntryO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  char v10;
  char v11;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 16) == 1)
    {
      sub_18324A994(*(_QWORD *)a1, v2);
      if (!v6)
        goto LABEL_12;
    }
    else
    {
      if (v3 | v2)
        v2 = 0xC000000000000000;
      else
        v2 = 0xF000000000000000;
      v3 = 0;
      if (!*(_BYTE *)(a2 + 16))
        goto LABEL_12;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v3 = sub_183257F24(v3, v2);
    v2 = v7;
    if (!v6)
    {
LABEL_12:
      swift_bridgeObjectRetain();
      v5 = sub_183257F24(v5, v4);
      v4 = v8;
      goto LABEL_17;
    }
  }
  if (v6 == 1)
  {
    sub_18324A994(v5, v4);
  }
  else
  {
    if (v5 | v4)
      v4 = 0xC000000000000000;
    else
      v4 = 0xF000000000000000;
    v5 = 0;
  }
LABEL_17:
  if (v2 >> 60 == 15)
  {
    if (v4 >> 60 == 15)
      return 1;
    goto LABEL_21;
  }
  if (v4 >> 60 == 15)
  {
LABEL_21:
    sub_183084848(v3, v2);
    sub_183084848(v5, v4);
    return 0;
  }
  sub_18324A994(v3, v2);
  sub_1832FCBCC(v3, v2);
  v11 = v10;
  sub_183084848(v5, v4);
  sub_183084848(v3, v2);
  sub_183084848(v3, v2);
  return v11 & 1;
}

BOOL sub_1832FCFC0(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  const uint8_t *v8;
  size_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v16;
  _QWORD v17[2];

  v1 = *a1;
  v2 = a1[1];
  if ((v2 & 0x1000000000000000) != 0)
  {
    v1 = sub_1832F5B78();
    v12 = v11;
    swift_bridgeObjectRelease();
    *a1 = v1;
    a1[1] = v12;
    v2 = v12;
    if ((v12 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_7:
    v17[0] = v1;
    v17[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    v13 = sub_183B91758() + 32;
    v6 = swift_unknownObjectRetain();
    v8 = (const uint8_t *)v17;
    v7 = (const char *)v13;
    v9 = HIBYTE(v2) & 0xF;
    goto LABEL_8;
  }
  if ((v2 & 0x2000000000000000) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0)
  {
    v3 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v3 = sub_183B91E78();
    v4 = v16;
  }
  v5 = sub_183B91758() + 32;
  v6 = swift_unknownObjectRetain();
  v7 = (const char *)v5;
  v8 = (const uint8_t *)v3;
  v9 = v4;
LABEL_8:
  v14 = nw_txt_record_set_key(v6, v7, v8, v9);
  swift_unknownObjectRelease();
  swift_release();
  return v14;
}

BOOL sub_1832FD0F0(const uint8_t *a1, uint64_t a2)
{
  size_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  const uint8_t *v7;
  size_t v8;
  uint64_t v9;
  _BOOL8 v10;

  if (a1)
  {
    v3 = a2 - (_QWORD)a1;
    v4 = sub_183B91758() + 32;
    v5 = swift_unknownObjectRetain();
    v6 = (const char *)v4;
    v7 = a1;
    v8 = v3;
  }
  else
  {
    v9 = sub_183B91758() + 32;
    v5 = swift_unknownObjectRetain();
    v6 = (const char *)v9;
    v7 = 0;
    v8 = 0;
  }
  v10 = nw_txt_record_set_key(v5, v6, v7, v8);
  swift_unknownObjectRelease();
  swift_release();
  return v10;
}

uint64_t sub_1832FD1A4()
{
  uint64_t v0;

  sub_18308485C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1832FD1C8(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1832F44AC(a1, a2, v2);
}

unint64_t sub_1832FD1D4()
{
  unint64_t result;

  result = qword_1EDCDEC48;
  if (!qword_1EDCDEC48)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWTXTRecord.Entry, &type metadata for NWTXTRecord.Entry);
    atomic_store(result, (unint64_t *)&qword_1EDCDEC48);
  }
  return result;
}

unint64_t sub_1832FD21C()
{
  unint64_t result;

  result = qword_1EDCDEC50;
  if (!qword_1EDCDEC50)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWTXTRecord.Index, &type metadata for NWTXTRecord.Index);
    atomic_store(result, (unint64_t *)&qword_1EDCDEC50);
  }
  return result;
}

unint64_t sub_1832FD264()
{
  unint64_t result;

  result = qword_1EDCDEC58;
  if (!qword_1EDCDEC58)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWTXTRecord, &type metadata for NWTXTRecord);
    atomic_store(result, (unint64_t *)&qword_1EDCDEC58);
  }
  return result;
}

unint64_t sub_1832FD2AC()
{
  unint64_t result;

  result = qword_1EDCDEC60;
  if (!qword_1EDCDEC60)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWTXTRecord.Index, &type metadata for NWTXTRecord.Index);
    atomic_store(result, (unint64_t *)&qword_1EDCDEC60);
  }
  return result;
}

uint64_t sub_1832FD2F0()
{
  return sub_18327DAB4(&qword_1EDCDEC68, &qword_1EDCDEC70, MEMORY[0x1E0DEA228]);
}

uint64_t sub_1832FD31C()
{
  return sub_18327DAB4(&qword_1EDCDEC78, &qword_1EDCDEC80, MEMORY[0x1E0DEDE48]);
}

uint64_t sub_1832FD348()
{
  return sub_18327DAB4(&qword_1EDCDEC88, (uint64_t *)&unk_1EDCDEC90, MEMORY[0x1E0DEC908]);
}

uint64_t sub_1832FD37C()
{
  return 0;
}

uint64_t destroy for NWTXTRecord()
{
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

_QWORD *_s7Network11NWTXTRecordVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NWTXTRecord(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_OWORD *assignWithTake for NWTXTRecord(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NWTXTRecord()
{
  return &type metadata for NWTXTRecord;
}

uint64_t destroy for NWTXTRecord.Entry(uint64_t a1)
{
  return sub_1832575A0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s7Network11NWTXTRecordV5EntryOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_183257580(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for NWTXTRecord.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_183257580(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1832575A0(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NWTXTRecord.Entry(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1832575A0(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWTXTRecord.Entry(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWTXTRecord.Entry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1832FD614(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1832FD62C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NWTXTRecord.Entry()
{
  return &type metadata for NWTXTRecord.Entry;
}

uint64_t sub_1832FD658(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for NWTXTRecord.Index(uint64_t a1)
{
  return sub_1832903C4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s7Network11NWTXTRecordV5IndexVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1832FD658(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for NWTXTRecord.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1832FD658(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1832903C4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NWTXTRecord.Index(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1832903C4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWTXTRecord.Index(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWTXTRecord.Index(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWTXTRecord.Index()
{
  return &type metadata for NWTXTRecord.Index;
}

ValueMetadata *type metadata accessor for NWTXTRecord.CaseInsensitiveString()
{
  return &type metadata for NWTXTRecord.CaseInsensitiveString;
}

unint64_t sub_1832FD804()
{
  unint64_t result;

  result = qword_1EDCD7678;
  if (!qword_1EDCD7678)
  {
    result = MEMORY[0x186DB5558](&unk_183BA5B78, &type metadata for NWTXTRecord.CaseInsensitiveString);
    atomic_store(result, &qword_1EDCD7678);
  }
  return result;
}

uint64_t sub_1832FD848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDECA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1832FD890(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  sub_1832FD658(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  sub_1832FD658(v2, v3, v4);
  return a1;
}

uint64_t sub_1832FD8E0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_183B914AC();
    result = MEMORY[0x186DB5558](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1832FD920(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_1832FD97C()
{
  unint64_t result;

  result = qword_1EDCDED28;
  if (!qword_1EDCDED28)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for ActorSystemError, &type metadata for ActorSystemError);
    atomic_store(result, (unint64_t *)&qword_1EDCDED28);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ActorSystemError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return sub_1832FDC38(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_1832FD9D0);
}

id sub_1832FD9D0(id result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;

  switch(a3 >> 60)
  {
    case 2uLL:
      v3 = a3 & 0xFFFFFFFFFFFFFFFLL;
      sub_18324A994((uint64_t)result, a2);
      result = (id)v3;
      goto LABEL_4;
    case 3uLL:
LABEL_4:
      result = result;
      break;
    case 4uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
      result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void destroy for ActorSystemError(uint64_t a1)
{
  sub_1832FDA38(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

void sub_1832FDA38(void *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;

  switch(a3 >> 60)
  {
    case 2uLL:
      v3 = a3 & 0xFFFFFFFFFFFFFFFLL;
      sub_18308485C((uint64_t)a1, a2);
      a1 = (void *)v3;
      goto LABEL_4;
    case 3uLL:
LABEL_4:

      break;
    case 4uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t *assignWithCopy for ActorSystemError(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  return sub_1832FDC94(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_1832FD9D0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1832FDA38);
}

uint64_t *assignWithTake for ActorSystemError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1832FDD00(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1832FDA38);
}

uint64_t getEnumTagSinglePayload for ActorSystemError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x76 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 118);
  v3 = ((*(_QWORD *)(a1 + 16) >> 60) & 0x8F | (16 * (*(_QWORD *)(a1 + 16) & 7))) ^ 0x7F;
  if (v3 >= 0x75)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ActorSystemError(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x75)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 118;
    if (a3 >= 0x76)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x76)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1832FDB58(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16) >> 60;
  if (v1 <= 9)
    return v1;
  else
    return (*(_DWORD *)a1 + 10);
}

uint64_t sub_1832FDB74(uint64_t result)
{
  *(_QWORD *)(result + 16) &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1832FDB84(uint64_t result, uint64_t a2)
{
  if (a2 < 0xA)
  {
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFF8 | (a2 << 60);
  }
  else
  {
    *(_QWORD *)result = (a2 - 10);
    *(_OWORD *)(result + 8) = xmmword_183BA5DA0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActorSystemError()
{
  return &type metadata for ActorSystemError;
}

_QWORD *initializeBufferWithCopyOfBuffer for NWActorSystemError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return sub_1832FDC38(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_1832FDBD0);
}

id sub_1832FDBD0(id result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;

  switch(a3 >> 60)
  {
    case 2uLL:
      v3 = a3 & 0xFFFFFFFFFFFFFFFLL;
      sub_18324A994((uint64_t)result, a2);
      result = (id)v3;
      goto LABEL_4;
    case 3uLL:
LABEL_4:
      result = result;
      break;
    case 4uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
      result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void destroy for NWActorSystemError(uint64_t a1)
{
  sub_1832BB29C(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_QWORD *sub_1832FDC38(_QWORD *a1, _QWORD *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  a4(*a2, v6, v7);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  return a1;
}

uint64_t *assignWithCopy for NWActorSystemError(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  return sub_1832FDC94(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_1832FDBD0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1832BB29C);
}

uint64_t *sub_1832FDC94(uint64_t *a1, _QWORD *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  a4(*a2, v8, v9);
  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for NWActorSystemError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1832FDD00(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1832BB29C);
}

uint64_t *sub_1832FDD00(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *a1;
  v8 = a1[1];
  v7 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v5;
  a4(v6, v8, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorSystemError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x75 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 117);
  v3 = ((*(_QWORD *)(a1 + 16) >> 60) & 0x8F | (16 * (*(_QWORD *)(a1 + 16) & 7))) ^ 0x7F;
  if (v3 >= 0x74)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NWActorSystemError(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x74)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 117;
    if (a3 >= 0x75)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x75)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1832FDDE8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16) >> 60;
  if (v1 <= 0xA)
    return v1;
  else
    return (*(_DWORD *)a1 + 11);
}

uint64_t sub_1832FDE04(uint64_t result, uint64_t a2)
{
  if (a2 < 0xB)
  {
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFF8 | (a2 << 60);
  }
  else
  {
    *(_QWORD *)result = (a2 - 11);
    *(_OWORD *)(result + 8) = xmmword_183BA5DB0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWActorSystemError()
{
  return &type metadata for NWActorSystemError;
}

ValueMetadata *type metadata accessor for ISOLatin1String()
{
  return &type metadata for ISOLatin1String;
}

uint64_t sub_1832FDE58@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if ((sub_18324BC90(a3, a4) & 1) == 0)
    return sub_1832FEE0C(a1, a2, a3, a4, a5, a6);
  swift_bridgeObjectRetain();
  sub_1832FE198((uint64_t (*)(_QWORD *, uint64_t))a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832FDF08(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  uint64_t v18;
  char *v19;
  __int128 v20[2];
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v18 - v10;
  if ((sub_183B918B4() & 1) != 0)
  {
    v12 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 16);
    v19 = a1;
    v13 = v12(v11, a1, a2);
    MEMORY[0x1E0C80A78](v13);
    *(&v18 - 2) = a2;
    *(&v18 - 1) = a3;
    sub_183B918A8();
    if (v22[1])
    {
      v14 = v22[0];
      v15 = *(void (**)(char *, uint64_t))(v6 + 8);
      v15(v11, a2);
LABEL_4:
      v16 = v19;
LABEL_12:
      v15(v16, a2);
      return v14;
    }
    v12(v9, v11, a2);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE6F0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_183262D80(v20, (uint64_t)v22);
      __swift_project_boxed_opaque_existential_2(v22, v23);
      if ((sub_183B91FB0() & 1) != 0)
      {
        __swift_project_boxed_opaque_existential_2(v22, v23);
        sub_183B91FA4();
        v15 = *(void (**)(char *, uint64_t))(v6 + 8);
        v15(v11, a2);
        v14 = *(_QWORD *)&v20[0];
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v22);
        goto LABEL_4;
      }
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v22);
    }
    else
    {
      v21 = 0;
      memset(v20, 0, sizeof(v20));
      sub_18327DFFC((uint64_t)v20);
    }
    v16 = v19;
    v14 = sub_1832FFE54((uint64_t)v11);
    v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v11, a2);
    goto LABEL_12;
  }
  v14 = sub_1832FE258();
  (*(void (**)(char *, uint64_t))(v6 + 8))(a1, a2);
  return v14;
}

uint64_t sub_1832FE198(uint64_t (*a1)(_QWORD *, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = *v1;
  v4 = v1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    v5 = v10;
    return a1(v5, v6);
  }
  v3 = sub_1832F5B78();
  v8 = v7;
  swift_bridgeObjectRelease();
  *v1 = v3;
  v1[1] = v8;
  v4 = v8;
  if ((v8 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    v5 = (_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v5 = (_QWORD *)sub_183B91E78();
  }
  return a1(v5, v6);
}

uint64_t sub_1832FE258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v0 = sub_183B91DE8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v10 - v2;
  v4 = sub_183B91EFC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v10 - v6;
  sub_183B918D8();
  MEMORY[0x186DB5558](MEMORY[0x1E0DEC330], v0);
  sub_183B91FBC();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v10[0] = 0;
  v10[1] = 0xE000000000000000;
  MEMORY[0x186DB5558](MEMORY[0x1E0DEC858], v4);
  sub_183B91794();
  v8 = v10[0];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

unsigned __int8 *sub_1832FE3C4@<X0>(unsigned __int8 *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t sub_1832FE3D0(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t isStackAllocationSafe;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v3 = a2;
  v13[1] = *MEMORY[0x1E0C80C00];
  v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v5 = a1;
  v6 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v6 = 11;
  isStackAllocationSafe = sub_1832F0C5C(0xFuLL, v6 | (v5 << 16), a1, a2);
  if (isStackAllocationSafe < 0)
    __break(1u);
  v8 = isStackAllocationSafe;
  if (isStackAllocationSafe < 1025
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v10 = sub_1832FF00C((uint64_t)v13 - v9, v8, a1, v3);
    if (v2)
      swift_willThrow();
    else
      return v10;
  }
  else
  {
    v11 = swift_slowAlloc();
    v3 = sub_1832FF00C(v11, v8, a1, v3);
    MEMORY[0x186DB563C](v11, -1, -1);
  }
  return v3;
}

uint64_t sub_1832FE54C@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t isStackAllocationSafe;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v27 - v15;
  v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v17 = a1;
  v18 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v18 = 11;
  v19 = sub_1832F0C5C(0xFuLL, v18 | (v17 << 16), a1, a2);
  if ((v19 & 0x8000000000000000) != 0)
    __break(1u);
  v20 = v19;
  sub_18324C26C(a3);
  sub_18324C26C(a4);
  sub_18324C26C(a3);
  isStackAllocationSafe = sub_18324C26C(a4);
  if (v20 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v28 = v16;
    v29 = a5;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v23 = (char *)&v27 - v22;
    sub_18324C26C(a3);
    sub_18324C26C(a4);
    sub_1832FF1FC(v23, (char *)v20, a1, a2, a3, a4, (uint64_t)v14);
    if (v5)
    {
      swift_willThrow();
    }
    else
    {
      v24 = (uint64_t)v28;
      sub_1832F1428((uint64_t)v14, (uint64_t)v28);
      sub_1832F1428(v24, v29);
    }
  }
  else
  {
    v25 = (char *)swift_slowAlloc();
    sub_18324C26C(a3);
    sub_18324C26C(a4);
    sub_1832FF1FC(v25, (char *)v20, a1, a2, a3, a4, a5);
    MEMORY[0x186DB563C](v25, -1, -1);
  }
  sub_18324C2B4(a3);
  sub_18324C2B4(a4);
  sub_18324C2B4(a3);
  sub_18324C2B4(a4);
  sub_18324C2B4(a3);
  return sub_18324C2B4(a4);
}

uint64_t sub_1832FE7D0@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t isStackAllocationSafe;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v29 = (uint64_t)&v28 - v17;
  v18 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v18 = a1;
  v19 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v19 = 11;
  v20 = sub_1832F0C5C(0xFuLL, v19 | (v18 << 16), a1, a2);
  if ((v20 & 0x8000000000000000) != 0)
    __break(1u);
  v21 = v20;
  sub_18324C26C(a3);
  isStackAllocationSafe = sub_18324C26C(a3);
  if (v21 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v28 = a6;
    v30 = &v28;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v24 = (char *)&v28 - v23;
    sub_18324C26C(a3);
    sub_1832FF4BC(v24, (char *)v21, a1, a2, a3, a4, a5, (uint64_t)v16);
    if (v6)
    {
      swift_willThrow();
    }
    else
    {
      v25 = v29;
      sub_1832F1428((uint64_t)v16, v29);
      sub_1832F1428(v25, v28);
    }
  }
  else
  {
    v26 = (char *)swift_slowAlloc();
    sub_18324C26C(a3);
    sub_1832FF4BC(v26, (char *)v21, a1, a2, a3, a4, a5, a6);
    MEMORY[0x186DB563C](v26, -1, -1);
  }
  sub_18324C2B4(a3);
  sub_18324C2B4(a3);
  return sub_18324C2B4(a3);
}

uint64_t sub_1832FEA38@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t isStackAllocationSafe;
  char *v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v27 = a5;
  v28 = a6;
  v29 = *MEMORY[0x1E0C80C00];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v26 - v17;
  v19 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v19 = a1;
  v20 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v20 = 11;
  isStackAllocationSafe = sub_1832F0C5C(0xFuLL, v20 | (v19 << 16), a1, a2);
  if (isStackAllocationSafe < 0)
    __break(1u);
  v22 = (char *)isStackAllocationSafe;
  if (isStackAllocationSafe < 1025
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    sub_1832FF6CC((char *)&v26 - v23, v22, a1, a2, a3, a4, v27, v28, (uint64_t)v16);
    if (v7)
    {
      return swift_willThrow();
    }
    else
    {
      sub_1832F1428((uint64_t)v16, (uint64_t)v18);
      return sub_1832F1428((uint64_t)v18, a7);
    }
  }
  else
  {
    v25 = (char *)swift_slowAlloc();
    sub_1832FF6CC(v25, v22, a1, a2, a3, a4, v27, v28, a7);
    return MEMORY[0x186DB563C](v25, -1, -1);
  }
}

char *sub_1832FEC4C(unint64_t a1, unint64_t a2)
{
  return sub_1832FEC94(a1, a2);
}

char *sub_1832FEC94(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t isStackAllocationSafe;
  char *v8;
  uint64_t v9;
  char *result;
  char *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v5 = a1;
  v6 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v6 = 11;
  isStackAllocationSafe = sub_1832F0C5C(0xFuLL, v6 | (v5 << 16), a1, a2);
  if (isStackAllocationSafe < 0)
    __break(1u);
  v8 = (char *)isStackAllocationSafe;
  if (isStackAllocationSafe < 1025
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    result = sub_1832FF8C8((char *)v12 - v9, v8, a1, a2);
    if (v2)
      return (char *)swift_willThrow();
  }
  else
  {
    v11 = (char *)swift_slowAlloc();
    sub_1832FF8C8(v11, v8, a1, a2);
    return (char *)MEMORY[0x186DB563C](v11, -1, -1);
  }
  return result;
}

uint64_t sub_1832FEE0C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t isStackAllocationSafe;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  _QWORD v28[4];

  v28[1] = a2;
  v28[3] = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v18 = (char *)v28 - v17;
  v19 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v19 = v15;
  v20 = 7;
  if (((v16 >> 60) & ((v15 & 0x800000000000000) == 0)) != 0)
    v20 = 11;
  isStackAllocationSafe = sub_1832F0C5C(0xFuLL, v20 | (v19 << 16), v15, v16);
  if (isStackAllocationSafe < 0)
    __break(1u);
  v22 = isStackAllocationSafe;
  if (isStackAllocationSafe <= 1024
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    v28[0] = a6;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v24 = v28[2];
    sub_1832FFAB0((uint64_t)v28 - v23, v22, a3, a4, a1);
    if (v24)
    {
      return swift_willThrow();
    }
    else
    {
      v26 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v26(v18, v14, a5);
      return ((uint64_t (*)(_QWORD, char *, uint64_t))v26)(v28[0], v18, a5);
    }
  }
  else
  {
    v27 = swift_slowAlloc();
    sub_1832FFAB0(v27, v22, a3, a4, a1);
    return MEMORY[0x186DB563C](v27, -1, -1);
  }
}

uint64_t sub_1832FF00C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD v16[2];

  if ((a4 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a4) & 0xF;
  else
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v13) = sub_183B91DAC();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v16[0] = a3;
          v16[1] = v10;
          v13 = *((unsigned __int8 *)v16 + v9);
          if (*((char *)v16 + v9) < 0)
            __asm { BR              X9 }
        }
        else
        {
          v12 = v11;
          if ((a3 & 0x1000000000000000) == 0)
            v12 = sub_183B91E78();
          v13 = *(unsigned __int8 *)(v12 + v9);
          if (*(char *)(v12 + v9) < 0)
            __asm { BR              X10 }
        }
        v14 = 1;
      }
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        JUMPOUT(0x1832FF1DCLL);
      }
      v9 += v14;
      *(_BYTE *)(a1 + v8++) = v13;
    }
    while (v9 < v5);
  }
  return sub_183B917A0();
}

uint64_t sub_1832FF1FC@<X0>(char *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v26 = a6;
  if ((a4 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a4) & 0xF;
  else
    v8 = a3 & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    v9 = a4;
    v10 = a3;
    v11 = 0;
    v12 = 0;
    v13 = a4 & 0xFFFFFFFFFFFFFFLL;
    v14 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    while (1)
    {
      if ((v9 & 0x1000000000000000) != 0)
      {
        LOBYTE(v16) = sub_183B91DAC();
      }
      else
      {
        if ((v9 & 0x2000000000000000) != 0)
        {
          v24 = v10;
          v25 = v13;
          v16 = *((unsigned __int8 *)&v24 + v12);
          if (*((char *)&v24 + v12) < 0)
            __asm { BR              X9 }
        }
        else
        {
          v15 = v14;
          if ((v10 & 0x1000000000000000) == 0)
            v15 = sub_183B91E78();
          v16 = *(unsigned __int8 *)(v15 + v12);
          if (*(char *)(v15 + v12) < 0)
            __asm { BR              X10 }
        }
        v17 = 1;
      }
      if (__OFADD__(v11, 1))
        break;
      v12 += v17;
      a1[v11++] = v16;
      if (v12 >= v8)
        goto LABEL_19;
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_19:
  v14 = a5;
  v10 = *(_QWORD *)(a5 + 40);
  v9 = *(_QWORD *)(a5 + 48);
  if ((sub_18324BC90(v10, v9) & 1) == 0)
  {
LABEL_23:
    v18 = v26;
    sub_18324C26C(v26);
    sub_1832FE7D0(v10, v9, v18, a1, a2, a7);
    goto LABEL_24;
  }
  v24 = v10;
  v25 = v9;
  v18 = v26;
  sub_18324C26C(v26);
  sub_18324C26C(v18);
  sub_18324C26C(v18);
  swift_bridgeObjectRetain();
  sub_18324C060((uint64_t *)&v24, v18, a1, a2, a7);
  if (v20)
  {
    sub_18324C2B4(v18);
    sub_18324C2B4(v18);
    swift_bridgeObjectRelease();
    __break(1u);
    JUMPOUT(0x1832FF49CLL);
  }
  swift_bridgeObjectRelease();
  sub_18324C2B4(v18);
  sub_18324C2B4(v18);
LABEL_24:
  sub_18324C2B4(v14);
  return sub_18324C2B4(v18);
}

uint64_t sub_1832FF4BC@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v25[2];
  uint64_t v26;

  v26 = a5;
  if ((a4 & 0x2000000000000000) != 0)
    v9 = HIBYTE(a4) & 0xF;
  else
    v9 = a3 & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    v12 = 0;
    v13 = 0;
    v14 = a4 & 0xFFFFFFFFFFFFFFLL;
    v15 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v17) = sub_183B91DAC();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v25[0] = a3;
          v25[1] = v14;
          v17 = *((unsigned __int8 *)v25 + v13);
          if (*((char *)v25 + v13) < 0)
            __asm { BR              X9 }
        }
        else
        {
          v16 = v15;
          if ((a3 & 0x1000000000000000) == 0)
            v16 = sub_183B91E78();
          v17 = *(unsigned __int8 *)(v16 + v13);
          if (*(char *)(v16 + v13) < 0)
            __asm { BR              X10 }
        }
        v18 = 1;
      }
      if (__OFADD__(v12, 1))
      {
        __break(1u);
        JUMPOUT(0x1832FF6ACLL);
      }
      v13 += v18;
      a1[v12++] = v17;
    }
    while (v13 < v9);
  }
  v19 = v26;
  sub_18324B284(a1, a2, v26, a6, a7, a8);
  return sub_18324C2B4(v19);
}

uint64_t sub_1832FF6CC@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD v27[2];

  if ((a4 & 0x2000000000000000) != 0)
    v10 = HIBYTE(a4) & 0xF;
  else
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10)
  {
    v13 = 0;
    v14 = 0;
    v15 = a4 & 0xFFFFFFFFFFFFFFLL;
    v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v18) = sub_183B91DAC();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v27[0] = a3;
          v27[1] = v15;
          v18 = *((unsigned __int8 *)v27 + v14);
          if (*((char *)v27 + v14) < 0)
            __asm { BR              X9 }
        }
        else
        {
          v17 = v16;
          if ((a3 & 0x1000000000000000) == 0)
            v17 = sub_183B91E78();
          v18 = *(unsigned __int8 *)(v17 + v14);
          if (*(char *)(v17 + v14) < 0)
            __asm { BR              X10 }
        }
        v19 = 1;
      }
      if (__OFADD__(v13, 1))
      {
        __break(1u);
        JUMPOUT(0x1832FF8A8);
      }
      v14 += v19;
      a1[v13++] = v18;
    }
    while (v14 < v10);
  }
  return sub_18324B3AC(a5, a6, a7, a8, a1, a2, a9);
}

char *sub_1832FF8C8(char *a1, char *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD v17[2];

  if ((a4 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a4) & 0xF;
  else
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v13) = sub_183B91DAC();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v17[0] = a3;
          v17[1] = v10;
          v13 = *((unsigned __int8 *)v17 + v9);
          if (*((char *)v17 + v9) < 0)
            __asm { BR              X9 }
        }
        else
        {
          v12 = v11;
          if ((a3 & 0x1000000000000000) == 0)
            v12 = sub_183B91E78();
          v13 = *(unsigned __int8 *)(v12 + v9);
          if (*(char *)(v12 + v9) < 0)
            __asm { BR              X10 }
        }
        v14 = 1;
      }
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        JUMPOUT(0x1832FFA90);
      }
      v9 += v14;
      a1[v8++] = v13;
    }
    while (v9 < v5);
  }
  return sub_1832BF8BC(a1, a2);
}

uint64_t sub_1832FFAB0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v19[2];

  if ((a4 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a4) & 0xF;
  else
    v6 = a3 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    v9 = 0;
    v10 = 0;
    v11 = a4 & 0xFFFFFFFFFFFFFFLL;
    v12 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v13) = sub_183B91DAC();
        if (__OFADD__(v9, 1))
          goto LABEL_20;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v19[0] = a3;
          v19[1] = v11;
          v13 = *((unsigned __int8 *)v19 + v10);
          if (*((char *)v19 + v10) < 0)
            __asm { BR              X9 }
        }
        else
        {
          v15 = v12;
          if ((a3 & 0x1000000000000000) == 0)
            v15 = sub_183B91E78();
          v13 = *(unsigned __int8 *)(v15 + v10);
          if (*(char *)(v15 + v10) < 0)
            __asm { BR              X10 }
        }
        v14 = 1;
        if (__OFADD__(v9, 1))
        {
LABEL_20:
          __break(1u);
          JUMPOUT(0x1832FFCA4);
        }
      }
      v10 += v14;
      *(_BYTE *)(a1 + v9++) = v13;
    }
    while (v10 < v6);
  }
  return a5(a1, a2);
}

uint64_t sub_1832FFCC4(unsigned __int8 *a1)
{
  return (*a1 >> 7) ^ 1u;
}

uint64_t sub_1832FFCD4()
{
  sub_183B92250();
  sub_183B917C4();
  return sub_183B9228C();
}

uint64_t sub_1832FFD1C()
{
  return sub_183B917C4();
}

uint64_t sub_1832FFD24()
{
  sub_183B92250();
  sub_183B917C4();
  return sub_183B9228C();
}

uint64_t sub_1832FFD68(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_183B920F4();
}

unint64_t sub_1832FFD9C()
{
  unint64_t result;

  result = qword_1EDCDED30;
  if (!qword_1EDCDED30)
  {
    result = MEMORY[0x186DB5558](&unk_183BA5DD0, &type metadata for ISOLatin1String);
    atomic_store(result, (unint64_t *)&qword_1EDCDED30);
  }
  return result;
}

uint64_t sub_1832FFDE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x186DB1E14](a1, a2, AssociatedTypeWitness);
  result = sub_183B917A0();
  *a3 = result;
  a3[1] = v8;
  return result;
}

uint64_t sub_1832FFE54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_183B9189C();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v3 < 0 || (v3 & 0x4000000000000000) != 0))
    goto LABEL_12;
  _swift_isClassOrObjCExistentialType();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v3 < 0 || (v3 & 0x4000000000000000) != 0))
  {
    swift_unknownObjectRetain();
    sub_183B91F68();
    swift_unknownObjectRelease();
  }
  else
  {
    _swift_isClassOrObjCExistentialType();
  }
  sub_183B916C8();
  if ((unsigned __int128)(v6 * (__int128)*(uint64_t *)(v5 + 72)) >> 64 != (v6 * *(_QWORD *)(v5 + 72)) >> 63)
  {
    __break(1u);
LABEL_12:
    v13 = v3;
    v9 = sub_183B91E18();
    swift_retain();
    MEMORY[0x186DB5558](MEMORY[0x1E0DEC400], v9);
    sub_183B91EC0();
    v10 = sub_183B916C8();
    sub_183300074(v10, v11, (uint64_t)&v13);
    v7 = v13;
    swift_release();
    goto LABEL_10;
  }
  v7 = sub_183B917A0();
LABEL_10:
  swift_release();
  return v7;
}

uint64_t sub_183300074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v8;
  char v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x186DB1E14](a1, a2, AssociatedTypeWitness);
  result = sub_183B917A0();
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = v9 & 1;
  return result;
}

uint64_t sub_1833000F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  void *v24;
  _QWORD v25[4];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a2;
  v25[1] = a7;
  v25[2] = a6;
  v29 = a5;
  v10 = sub_183B91728();
  MEMORY[0x1E0C80A78](v10);
  v25[3] = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 0x2000000000000000) != 0)
    v12 = HIBYTE(a4) & 0xF;
  else
    v12 = a3 & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
    v13 = 0;
    v14 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v16) = sub_183B91DAC();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v27 = a3;
          v28 = a4 & 0xFFFFFFFFFFFFFFLL;
          v16 = *((unsigned __int8 *)&v27 + v14);
          if (*((char *)&v27 + v14) < 0)
            __asm { BR              X9 }
        }
        else
        {
          v15 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            v15 = sub_183B91E78();
          v16 = *(unsigned __int8 *)(v15 + v14);
          if (*(char *)(v15 + v14) < 0)
            __asm { BR              X10 }
        }
        v17 = 1;
      }
      if (__OFADD__(v13, 1))
        break;
      v14 += v17;
      *(_BYTE *)(a1 + v13++) = v16;
      if (v14 >= v12)
        goto LABEL_19;
    }
    __break(1u);
  }
  else
  {
LABEL_19:
    v18 = *(_QWORD *)(v29 + 16);
    if (!v18)
      return 0;
    swift_bridgeObjectRetain();
    v19 = 0;
    v20 = v26;
    while (1)
    {
      v27 = a1;
      v28 = v20;
      sub_183B9171C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDED8);
      sub_183300684();
      sub_183B916F8();
      if (v21)
        break;
      if (v18 == ++v19)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
  }
  swift_bridgeObjectRelease();
  v23 = (void *)sub_183B916D4();
  v24 = (void *)sub_183B916D4();
  swift_bridgeObjectRelease();
  _CFHTTPMessageAddHeaderFieldValue();

  return 1;
}

uint64_t sub_1833003E0(unint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t isStackAllocationSafe;
  uint64_t v19;
  char *v20;
  id v21;
  char v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v28[2];

  v6 = v5;
  v28[1] = *(id *)MEMORY[0x1E0C80C00];
  v12 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v12 = a1;
  v13 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v14 = sub_1832F0C5C(0xFuLL, v13 | (v12 << 16), a1, a2);
  if ((v14 & 0x8000000000000000) != 0)
    __break(1u);
  v15 = v14;
  swift_bridgeObjectRetain();
  v16 = a4;
  sub_18324C26C(a5);
  swift_bridgeObjectRetain();
  v17 = v16;
  isStackAllocationSafe = sub_18324C26C(a5);
  v28[0] = v17;
  if (v15 >= 1025)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v23 = v17;
      v24 = swift_slowAlloc();
      swift_bridgeObjectRetain();
      v25 = v23;
      sub_18324C26C(a5);
      v22 = sub_1833000F0(v24, v15, a1, a2, a3, (uint64_t)v25, a5);
      sub_18324C2B4(a5);
      swift_bridgeObjectRelease();

      MEMORY[0x186DB563C](v24, -1, -1);
      swift_bridgeObjectRelease();
      if (v6)
        goto LABEL_12;
LABEL_13:
      v26 = v28[0];
      sub_18324C2B4(a5);

      swift_bridgeObjectRelease();
      sub_18324C2B4(a5);
      return v22 & 1;
    }
  }
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v20 = (char *)v28 - v19;
  swift_bridgeObjectRetain();
  v21 = v17;
  sub_18324C26C(a5);
  v22 = sub_1833000F0((uint64_t)v20, v15, a1, a2, a3, (uint64_t)v21, a5);
  sub_18324C2B4(a5);
  swift_bridgeObjectRelease();

  if (!v5)
  {

    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  swift_willThrow();

  swift_bridgeObjectRelease();
LABEL_12:
  sub_18324C2B4(a5);

  swift_bridgeObjectRelease();
  sub_18324C2B4(a5);
  return v22 & 1;
}

unint64_t sub_183300684()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDCDDEE0;
  if (!qword_1EDCDDEE0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDDED8);
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DEA5D8], v1);
    atomic_store(result, (unint64_t *)&qword_1EDCDDEE0);
  }
  return result;
}

uint64_t sub_1833006D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_183300738();
  return sub_1832FFDE0(a1, a2, a3);
}

unint64_t sub_183300738()
{
  unint64_t result;

  result = qword_1EDCDED38;
  if (!qword_1EDCDED38)
  {
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DEE480], MEMORY[0x1E0DEE478]);
    atomic_store(result, (unint64_t *)&qword_1EDCDED38);
  }
  return result;
}

uint64_t NWParameters.nw.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (os_unfair_lock_s *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v3 = *(_QWORD *)(v1 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t NWParameters.copy()()
{
  return sub_1833007F4((uint64_t (*)(_QWORD))nw_parameters_copy, (void (*)(void))type metadata accessor for NWParameters, &qword_1EDCDBA80);
}

uint64_t NWParameters.defaultProtocolStack.getter()
{
  return sub_1833007F4((uint64_t (*)(_QWORD))nw_parameters_copy_default_protocol_stack, (void (*)(void))type metadata accessor for NWParameters.ProtocolStack, (uint64_t *)&unk_1EDCDB630);
}

uint64_t sub_1833007F4(uint64_t (*a1)(_QWORD), void (*a2)(void), uint64_t *a3)
{
  uint64_t v3;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  uint64_t v11;

  v7 = *(os_unfair_lock_s **)(v3 + 16);
  v8 = v7 + 4;
  v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_1831EF71C(v8, a1, a2, a3, &v11);
  os_unfair_lock_unlock(v9);
  return v11;
}

uint64_t static NWParameters.applicationService.getter()
{
  NSObject *application_service;
  nw_parameters_t v1;
  uint64_t v2;
  uint64_t v3;

  application_service = nw_parameters_create_application_service();
  v1 = nw_parameters_copy(application_service);
  swift_unknownObjectRelease();
  v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  return v2;
}

uint64_t NWParameters.__allocating_init(_:)(NSObject *a1)
{
  nw_parameters_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = nw_parameters_copy(a1);
  swift_unknownObjectRelease();
  v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  return v2;
}

uint64_t NWParameters.__allocating_init()()
{
  uint64_t v0;
  nw_parameters_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

uint64_t NWParameters.__allocating_init(dtls:udp:)(uint64_t a1, uint64_t a2)
{
  return sub_183307568(a1, a2, 1u);
}

uint64_t NWParameters.__allocating_init(quicStream:)(uint64_t a1)
{
  uint64_t v2;
  nw_parameters_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = swift_allocObject();
  v3 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v4 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v4;
  *(_DWORD *)(v4 + 24) = 0;
  v5 = (os_unfair_lock_s *)(v4 + 24);
  *(_QWORD *)(v4 + 16) = v3;
  v6 = (_QWORD *)(v4 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  sub_1831EF71C(v6, (uint64_t (*)(_QWORD))nw_parameters_copy_default_protocol_stack, (void (*)(void))type metadata accessor for NWParameters.ProtocolStack, (uint64_t *)&unk_1EDCDB630, &v9);
  os_unfair_lock_unlock(v5);
  v7 = *(_QWORD *)(v9 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  nw_protocol_stack_set_transport_protocol(*(nw_protocol_stack_t *)(v7 + 16), *(nw_protocol_options_t *)(a1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  swift_release();
  swift_release_n();
  return v2;
}

uint64_t NWParameters.init()()
{
  uint64_t v0;
  nw_parameters_t v1;
  uint64_t v2;

  v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

NSObject *static NWParameters.applicationServiceQUIC(identity:)(uint64_t a1)
{
  void *v1;
  NSObject *result;
  nw_parameters_t v3;
  uint64_t v4;
  uint64_t v5;
  nw_parameters_t v6;

  if (a1)
  {
    v1 = (void *)swift_unknownObjectRetain();
    result = nw_parameters_create_application_service_quic_using_identity(v1);
    if (result)
    {
      v3 = nw_parameters_copy(result);
      swift_unknownObjectRelease();
      v4 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
      v5 = swift_allocObject();
      *(_DWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 16) = v3;
      swift_unknownObjectRelease();
LABEL_6:
      *(_QWORD *)(v4 + 16) = v5;
      return v4;
    }
    __break(1u);
  }
  else
  {
    result = nw_parameters_create_application_service_quic();
    if (result)
    {
      v6 = nw_parameters_copy(result);
      swift_unknownObjectRelease();
      v4 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
      v5 = swift_allocObject();
      *(_DWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 16) = v6;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t static NWParameters.quic(alpn:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = _s7Network14NWProtocolQUICC7OptionsC4alpnAESaySSG_tcfC_0(v0);
  return _s7Network12NWParametersC4quicAcA14NWProtocolQUICC7OptionsC_tcfC_0(v1);
}

uint64_t static NWParameters.migratingPeerToPeerQuic(quic:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  void *v4;

  v0 = swift_retain();
  v1 = _s7Network12NWParametersC4quicAcA14NWProtocolQUICC7OptionsC_tcfC_0(v0);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = (os_unfair_lock_s *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  v4 = *(void **)(v2 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v3);
  nw_parameters_set_migrating_peer_to_peer(v4);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t static NWParameters.quicDatagram(alpn:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = _s7Network14NWProtocolQUICC7OptionsC4alpnAESaySSG_tcfC_0(v0);
  nw_quic_set_stream_is_datagram(*(nw_protocol_options_t *)(v1 + 16), 1);
  return _s7Network12NWParametersC4quicAcA14NWProtocolQUICC7OptionsC_tcfC_0(v1);
}

uint64_t static NWParameters.tls.getter()
{
  return sub_183300CEC((void (*)(_QWORD))type metadata accessor for NWProtocolTCP.Options, (uint64_t (*)(void))nw_tcp_create_options, 2u);
}

uint64_t static NWParameters.dtls.getter()
{
  return sub_183300CEC((void (*)(_QWORD))type metadata accessor for NWProtocolUDP.Options, (uint64_t (*)(void))nw_udp_create_options, 1u);
}

uint64_t sub_183300CEC(void (*a1)(_QWORD), uint64_t (*a2)(void), unsigned int a3)
{
  uint64_t v6;
  uint64_t inited;

  type metadata accessor for NWProtocolTLS.Options();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = nw_tls_create_options();
  a1(0);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a2();
  return sub_183307568(v6, inited, a3);
}

uint64_t static NWParameters.tcp.getter()
{
  return sub_183300D9C((void (*)(_QWORD))type metadata accessor for NWProtocolTCP.Options, (uint64_t (*)(void))nw_tcp_create_options, 2u);
}

uint64_t static NWParameters.udp.getter()
{
  return sub_183300D9C((void (*)(_QWORD))type metadata accessor for NWProtocolUDP.Options, (uint64_t (*)(void))nw_udp_create_options, 1u);
}

uint64_t sub_183300D9C(void (*a1)(_QWORD), uint64_t (*a2)(void), unsigned int a3)
{
  uint64_t inited;

  a1(0);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a2();
  return sub_183307568(0, inited, a3);
}

void NWParameters.requiredInterface.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  nw_interface_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  v4 = nw_parameters_copy_required_interface(*(nw_parameters_t *)(v3 + 16));
  if (v4)
    v5 = (uint64_t)v4;
  else
    v5 = 1;
  *a1 = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

uint64_t sub_183300E48(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject **v4;
  os_unfair_lock_s *v5;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v4 = (NSObject **)(v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + 24);
  sub_183058E80(*a1);
  os_unfair_lock_lock(v5);
  sub_1833092F0(v4);
  os_unfair_lock_unlock(v5);
  return sub_183058B1C(v2);
}

uint64_t NWParameters.requiredInterface.setter(unint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  os_unfair_lock_s *v3;
  NSObject **v4;
  os_unfair_lock_s *v5;

  v2 = *a1;
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (NSObject **)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_183300F10(v4, v2);
  os_unfair_lock_unlock(v5);
  return sub_183058B1C(v2);
}

uint64_t sub_183300F10(NSObject **a1, unint64_t a2)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *a1;
  if (a2 >= 2)
  {
    v3 = a2;
    swift_unknownObjectRetain();
  }
  else
  {
    v3 = 0;
  }
  nw_parameters_require_interface(v2, v3);
  return swift_unknownObjectRelease();
}

nw_interface_t sub_183300F64@<X0>(nw_parameters_t *a1@<X0>, uint64_t *a2@<X8>)
{
  nw_interface_t result;
  uint64_t v4;

  result = nw_parameters_copy_required_interface(*a1);
  if (result)
    v4 = (uint64_t)result;
  else
    v4 = 1;
  *a2 = v4;
  return result;
}

uint64_t (*NWParameters.requiredInterface.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  nw_interface_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  a1[1] = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  v4 = nw_parameters_copy_required_interface(*(nw_parameters_t *)(v3 + 16));
  if (v4)
    v5 = (uint64_t)v4;
  else
    v5 = 1;
  *a1 = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_183300FFC;
}

uint64_t sub_183300FFC(uint64_t *a1, char a2)
{
  os_unfair_lock_s *v2;
  unint64_t v3;
  os_unfair_lock_s *v4;
  NSObject **v5;

  v3 = *a1;
  v2 = (os_unfair_lock_s *)a1[1];
  v4 = v2 + 6;
  v5 = (NSObject **)&v2[4];
  if ((a2 & 1) != 0)
  {
    sub_183058E80(*a1);
    os_unfair_lock_lock(v4);
    sub_183300F10(v5, v3);
    os_unfair_lock_unlock(v4);
    sub_183058B1C(v3);
  }
  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_183300F10(v5, v3);
    os_unfair_lock_unlock(v4);
  }
  return sub_183058B1C(v3);
}

void NWParameters.requiredInterfaceType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  nw_interface_type_t required_interface_type;
  char v5;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  required_interface_type = nw_parameters_get_required_interface_type(*(nw_parameters_t *)(v3 + 16));
  if (required_interface_type >= (nw_interface_type_loopback|nw_interface_type_wifi))
    v5 = 0;
  else
    v5 = required_interface_type;
  *a1 = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

void NWParameters.requiredInterfaceType.setter(unsigned __int8 *a1)
{
  sub_183302DD4(a1, (void (*)(_QWORD, uint64_t))nw_parameters_set_required_interface_type);
}

uint64_t sub_183301108@<X0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  result = nw_parameters_get_required_interface_type(*a1);
  if (result >= 5)
    v4 = 0;
  else
    v4 = result;
  *a2 = v4;
  return result;
}

void (*NWParameters.requiredInterfaceType.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  nw_interface_type_t required_interface_type;
  char v5;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  required_interface_type = nw_parameters_get_required_interface_type(*(nw_parameters_t *)(v3 + 16));
  if (required_interface_type >= (nw_interface_type_loopback|nw_interface_type_wifi))
    v5 = 0;
  else
    v5 = required_interface_type;
  *(_BYTE *)(a1 + 8) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_1833011A0;
}

void sub_1833011A0(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_183302EC0(a1, a2, (void (*)(_QWORD, uint64_t))nw_parameters_set_required_interface_type);
}

void NWParameters.requiredInterfaceSubtype.getter(char *a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  void **v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (void **)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_183301250(v4, a1);
  os_unfair_lock_unlock(v5);
}

void NWParameters.requiredInterfaceSubtype.setter(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  nw_parameters_set_required_interface_subtype(*(void **)(v3 + 16), dword_183BA62C0[v2]);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

uint64_t sub_183301250@<X0>(void **a1@<X0>, char *a2@<X8>)
{
  uint64_t result;
  char v4;

  result = nw_parameters_get_required_interface_subtype(*a1);
  if ((int)result > 4000)
  {
    if ((_DWORD)result == 4001)
    {
      v4 = 3;
      goto LABEL_11;
    }
    if ((_DWORD)result == 5001)
    {
      v4 = 4;
      goto LABEL_11;
    }
LABEL_8:
    v4 = 0;
    goto LABEL_11;
  }
  if ((_DWORD)result == 1001)
  {
    v4 = 1;
    goto LABEL_11;
  }
  if ((_DWORD)result != 1002)
    goto LABEL_8;
  v4 = 2;
LABEL_11:
  *a2 = v4;
  return result;
}

void (*NWParameters.requiredInterfaceSubtype.modify(_QWORD *a1))(os_unfair_lock_s **a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int required_interface_subtype;
  char v5;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = v2;
  v3 = (char *)(a1 + 1);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  required_interface_subtype = nw_parameters_get_required_interface_subtype(*(void **)(v2 + 16));
  if (required_interface_subtype > 4000)
  {
    if (required_interface_subtype == 4001)
    {
      v5 = 3;
      goto LABEL_11;
    }
    if (required_interface_subtype == 5001)
    {
      v5 = 4;
      goto LABEL_11;
    }
LABEL_8:
    v5 = 0;
    goto LABEL_11;
  }
  if (required_interface_subtype == 1001)
  {
    v5 = 1;
    goto LABEL_11;
  }
  if (required_interface_subtype != 1002)
    goto LABEL_8;
  v5 = 2;
LABEL_11:
  *v3 = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
  return sub_183301378;
}

void sub_183301378(os_unfair_lock_s **a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = *a1;
  v2 = *a1 + 6;
  v3 = *((char *)a1 + 8);
  os_unfair_lock_lock(v2);
  nw_parameters_set_required_interface_subtype(*(void **)&v1[4]._os_unfair_lock_opaque, dword_183BA62C0[v3]);
  os_unfair_lock_unlock(v2);
}

uint64_t NWParameters.prohibitedInterfaces.getter()
{
  return sub_183301650((void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_18330146C);
}

uint64_t NWParameters.prohibitedInterfaces.setter(uint64_t a1)
{
  return sub_183301AC8(a1, (void (*)(os_unfair_lock_s *, uint64_t))sub_1833013E8);
}

void sub_1833013E8(nw_parameters_t *a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;

  v3 = *a1;
  nw_parameters_clear_prohibited_interfaces(*a1);
  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      v5 = 0;
      while (1)
      {
        v6 = *(NSObject **)(a2 + 8 * v5 + 32);
        if (!v6)
          break;
        ++v5;
        nw_parameters_prohibit_interface(v3, v6);
        if (v4 == v5)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
      __break(1u);
    }
  }
}

uint64_t sub_18330146C@<X0>(NSObject **a1@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD aBlock[6];
  uint64_t v11;

  v11 = MEMORY[0x1E0DEE9D8];
  v3 = *a1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = &v11;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = sub_18306438C;
  *(_QWORD *)(v5 + 24) = v4;
  aBlock[4] = sub_18306433C;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1830642F4;
  aBlock[3] = &block_descriptor_207;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_parameters_iterate_prohibited_interfaces(v3, v6);
  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    v9 = *(_QWORD *)(v11 + 16);
    result = swift_release();
    if (!v9)
    {
      result = swift_bridgeObjectRelease();
      v8 = 0;
    }
    *a2 = v8;
  }
  return result;
}

uint64_t (*NWParameters.prohibitedInterfaces.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  NSObject **v4;
  os_unfair_lock_s *v5;
  uint64_t v7;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v3;
  v4 = (NSObject **)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_18330146C(v4, &v7);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_183301638;
}

uint64_t sub_183301638(uint64_t *a1, char a2)
{
  return sub_183301FAC(a1, a2, (void (*)(os_unfair_lock_s *, uint64_t))sub_1833013E8);
}

uint64_t NWParameters.prohibitedInterfaceTypes.getter()
{
  return sub_183301650((void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_1833017AC);
}

uint64_t sub_183301650(void (*a1)(uint64_t *__return_ptr, os_unfair_lock_s *))
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  uint64_t v7;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = v3 + 4;
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  a1(&v7, v4);
  os_unfair_lock_unlock(v5);
  return v7;
}

void sub_1833016B0(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, os_unfair_lock_s *)@<X3>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;

  v5 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v6 = v5 + 4;
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  a2(&v8, v6);
  os_unfair_lock_unlock(v7);
  *a3 = v8;
}

uint64_t NWParameters.prohibitedInterfaceTypes.setter(uint64_t a1)
{
  return sub_183301AC8(a1, (void (*)(os_unfair_lock_s *, uint64_t))sub_183301730);
}

void sub_183301730(nw_parameters_t *a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t i;
  nw_interface_type_t v6;

  v3 = *a1;
  nw_parameters_clear_prohibited_interface_types(*a1);
  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v4; ++i)
      {
        v6 = *(unsigned __int8 *)(a2 + i + 32);
        nw_parameters_prohibit_interface_type(v3, v6);
      }
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1833017AC@<X0>(NSObject **a1@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD aBlock[6];
  uint64_t v11;

  v11 = MEMORY[0x1E0DEE9D8];
  v3 = *a1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = &v11;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = sub_183309340;
  *(_QWORD *)(v5 + 24) = v4;
  aBlock[4] = sub_18306433C;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_18324C6DC;
  aBlock[3] = &block_descriptor_198;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_parameters_iterate_prohibited_interface_types(v3, v6);
  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    v9 = *(_QWORD *)(v11 + 16);
    result = swift_release();
    if (!v9)
    {
      result = swift_bridgeObjectRelease();
      v8 = 0;
    }
    *a2 = v8;
  }
  return result;
}

uint64_t sub_183301900(unsigned int a1, char **a2)
{
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v4 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_183243408(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    *a2 = v4;
  }
  v7 = *((_QWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  if (v7 >= v6 >> 1)
    v4 = sub_183243408((char *)(v6 > 1), v7 + 1, 1, v4);
  if (a1 >= 5)
    v8 = 0;
  else
    v8 = a1;
  *((_QWORD *)v4 + 2) = v7 + 1;
  v4[v7 + 32] = v8;
  *a2 = v4;
  return 1;
}

uint64_t (*NWParameters.prohibitedInterfaceTypes.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  NSObject **v4;
  os_unfair_lock_s *v5;
  uint64_t v7;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v3;
  v4 = (NSObject **)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1833017AC(v4, &v7);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_183301A2C;
}

uint64_t sub_183301A2C(uint64_t *a1, char a2)
{
  return sub_183301FAC(a1, a2, (void (*)(os_unfair_lock_s *, uint64_t))sub_183301730);
}

uint64_t NWParameters.prohibitedInterfaceSubtypes.getter()
{
  return sub_183301650((void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183301BF0);
}

uint64_t sub_183301A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(os_unfair_lock_s *))
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;

  v6 = *(os_unfair_lock_s **)(*(_QWORD *)a2 + 16);
  v7 = v6 + 4;
  v8 = v6 + 6;
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v8);
  a5(v7);
  os_unfair_lock_unlock(v8);
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.prohibitedInterfaceSubtypes.setter(uint64_t a1)
{
  return sub_183301AC8(a1, (void (*)(os_unfair_lock_s *, uint64_t))sub_183301B30);
}

uint64_t sub_183301AC8(uint64_t a1, void (*a2)(os_unfair_lock_s *, uint64_t))
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;

  v5 = *(os_unfair_lock_s **)(v2 + 16);
  v6 = v5 + 4;
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  a2(v6, a1);
  os_unfair_lock_unlock(v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_183301B30(void **a1, uint64_t a2)
{
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;

  v4 = xpc_array_create(0, 0);
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain();
      v6 = 0;
      do
      {
        v7 = *(char *)(a2 + v6++ + 32);
        v8 = xpc_uint64_create(qword_183BA6298[v7]);
        xpc_array_append_value(v4, v8);
        swift_unknownObjectRelease();
      }
      while (v5 != v6);
      swift_bridgeObjectRelease();
    }
  }
  nw_parameters_set_prohibited_interface_subtypes(*a1, v4);
  return swift_unknownObjectRelease();
}

uint64_t sub_183301BF0@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[6];
  uint64_t v12;

  v12 = MEMORY[0x1E0DEE9D8];
  v3 = nw_parameters_copy_prohibited_interface_subtypes(*a1);
  if (!v3)
    v3 = xpc_array_create(0, 0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = &v12;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = sub_183309318;
  *(_QWORD *)(v5 + 24) = v4;
  v11[4] = sub_18306433C;
  v11[5] = v5;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_183301ED8;
  v11[3] = &block_descriptor_189;
  v6 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  xpc_array_apply(v3, v6);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v9 = v12;
    v10 = *(_QWORD *)(v12 + 16);
    result = swift_release();
    if (!v10)
    {
      result = swift_bridgeObjectRelease();
      v9 = 0;
    }
    *a2 = v9;
  }
  return result;
}

uint64_t sub_183301D80(int a1, xpc_object_t xuint, char **a3)
{
  uint64_t value;
  char v5;
  char *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  value = xpc_uint64_get_value(xuint);
  if (HIDWORD(value))
  {
    result = sub_183B91F50();
    __break(1u);
    return result;
  }
  if ((int)value > 4000)
  {
    if ((_DWORD)value == 4001)
    {
      v5 = 3;
      goto LABEL_12;
    }
    if ((_DWORD)value == 5001)
    {
      v5 = 4;
      goto LABEL_12;
    }
LABEL_9:
    v5 = 0;
    goto LABEL_12;
  }
  if ((_DWORD)value == 1001)
  {
    v5 = 1;
    goto LABEL_12;
  }
  if ((_DWORD)value != 1002)
    goto LABEL_9;
  v5 = 2;
LABEL_12:
  v6 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = sub_183243414(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
    *a3 = v6;
  }
  v9 = *((_QWORD *)v6 + 2);
  v8 = *((_QWORD *)v6 + 3);
  if (v9 >= v8 >> 1)
    v6 = sub_183243414((char *)(v8 > 1), v9 + 1, 1, v6);
  *((_QWORD *)v6 + 2) = v9 + 1;
  v6[v9 + 32] = v5;
  *a3 = v6;
  return 1;
}

uint64_t sub_183301ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  char v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t (*NWParameters.prohibitedInterfaceSubtypes.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  void **v4;
  os_unfair_lock_s *v5;
  uint64_t v7;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v3;
  v4 = (void **)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_183301BF0(v4, &v7);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_183301FA0;
}

uint64_t sub_183301FA0(uint64_t *a1, char a2)
{
  return sub_183301FAC(a1, a2, (void (*)(os_unfair_lock_s *, uint64_t))sub_183301B30);
}

uint64_t sub_183301FAC(uint64_t *a1, char a2, void (*a3)(os_unfair_lock_s *, uint64_t))
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;

  v4 = (os_unfair_lock_s *)a1[1];
  v5 = *a1;
  v6 = v4 + 6;
  v7 = v4 + 4;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v6);
    a3(v7, v5);
    os_unfair_lock_unlock(v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v4 + 6);
    a3(v7, v5);
    os_unfair_lock_unlock(v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.prohibitExpensivePaths.getter()
{
  return sub_183304AD0((uint64_t (*)(_QWORD))nw_parameters_get_prohibit_expensive);
}

void NWParameters.prohibitExpensivePaths.setter(char a1)
{
  sub_183304B28(a1, (void (*)(_QWORD, _QWORD))nw_parameters_set_prohibit_expensive);
}

BOOL sub_183302084@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_parameters_get_prohibit_expensive(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.prohibitExpensivePaths.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(v3) = nw_parameters_get_prohibit_expensive(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_183302110;
}

void sub_183302110(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_183304C08(a1, a2, (void (*)(_QWORD, uint64_t))nw_parameters_set_prohibit_expensive);
}

uint64_t NWParameters.prohibitConstrainedPaths.getter()
{
  return sub_183304AD0((uint64_t (*)(_QWORD))nw_parameters_get_prohibit_constrained);
}

void NWParameters.prohibitConstrainedPaths.setter(char a1)
{
  sub_183304B28(a1, (void (*)(_QWORD, _QWORD))nw_parameters_set_prohibit_constrained);
}

BOOL sub_183302134@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_parameters_get_prohibit_constrained(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.prohibitConstrainedPaths.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(v3) = nw_parameters_get_prohibit_constrained(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_1833021C0;
}

void sub_1833021C0(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_183304C08(a1, a2, (void (*)(_QWORD, uint64_t))nw_parameters_set_prohibit_constrained);
}

uint64_t NWParameters.preferNoProxies.getter()
{
  return sub_183304AD0((uint64_t (*)(_QWORD))nw_parameters_get_prefer_no_proxy);
}

void NWParameters.preferNoProxies.setter(char a1)
{
  sub_183304B28(a1, (void (*)(_QWORD, _QWORD))nw_parameters_set_prefer_no_proxy);
}

BOOL sub_1833021E4@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_parameters_get_prefer_no_proxy(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.preferNoProxies.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(v3) = nw_parameters_get_prefer_no_proxy(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_183302270;
}

void sub_183302270(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_183304C08(a1, a2, (void (*)(_QWORD, uint64_t))nw_parameters_set_prefer_no_proxy);
}

void NWParameters.requiredLocalEndpoint.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  nw_parameters_t *v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (nw_parameters_t *)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_183302554(v4, a1);
  os_unfair_lock_unlock(v5);
}

void sub_1833022D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v3;
  nw_parameters_t *v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v4 = (nw_parameters_t *)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_183302554(v4, a2);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_183302330(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  os_unfair_lock_s *v7;
  NSObject **v8;
  os_unfair_lock_s *v9;
  _BYTE v11[16];
  _BYTE *v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_183062090(a1, (uint64_t)v6, qword_1ECD84160);
  v7 = *(os_unfair_lock_s **)(*(_QWORD *)a2 + 16);
  v12 = v6;
  v8 = (NSObject **)&v7[4];
  v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_183309248(v8);
  os_unfair_lock_unlock(v9);
  return sub_1830620D4((uint64_t)v6, qword_1ECD84160);
}

uint64_t NWParameters.requiredLocalEndpoint.setter(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  NSObject **v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (NSObject **)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_18330245C(v4, a1);
  os_unfair_lock_unlock(v5);
  return sub_1830620D4(a1, qword_1ECD84160);
}

uint64_t sub_18330245C(NSObject **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  sub_183062090(a2, (uint64_t)v6, qword_1ECD84160);
  v8 = type metadata accessor for NWEndpoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    sub_1830620D4((uint64_t)v6, qword_1ECD84160);
    v9 = 0;
  }
  else
  {
    NWEndpoint.nw.getter();
    v9 = v10;
    sub_183058AE0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  }
  nw_parameters_set_local_endpoint(v7, v9);
  return swift_unknownObjectRelease();
}

uint64_t sub_183302554@<X0>(nw_parameters_t *a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v3;
  uint64_t v5;

  v3 = nw_parameters_copy_local_endpoint(*a1);
  if (v3)
    return sub_183056F9C(v3, a2);
  v5 = type metadata accessor for NWEndpoint();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 1, 1, v5);
}

void (*NWParameters.requiredLocalEndpoint.modify(void **a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;
  os_unfair_lock_s *v5;
  nw_parameters_t *v6;
  os_unfair_lock_s *v7;

  v3 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160) - 8) + 64);
  *a1 = malloc(v3);
  v4 = malloc(v3);
  v5 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v4;
  a1[2] = v5;
  v6 = (nw_parameters_t *)&v5[4];
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  sub_183302554(v6, (uint64_t)v4);
  a1[3] = 0;
  os_unfair_lock_unlock(v7);
  return sub_183302654;
}

void sub_183302654(uint64_t a1, char a2)
{
  os_unfair_lock_s *v2;
  void *v3;
  void *v4;
  os_unfair_lock_s *v5;
  NSObject **v6;

  v2 = *(os_unfair_lock_s **)(a1 + 16);
  v3 = *(void **)a1;
  v4 = *(void **)(a1 + 8);
  v5 = v2 + 6;
  v6 = (NSObject **)&v2[4];
  if ((a2 & 1) != 0)
  {
    sub_183062090(*(_QWORD *)(a1 + 8), (uint64_t)v3, qword_1ECD84160);
    os_unfair_lock_lock(v5);
    sub_18330245C(v6, (uint64_t)v3);
    os_unfair_lock_unlock(v5);
    sub_1830620D4((uint64_t)v3, qword_1ECD84160);
  }
  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_18330245C(v6, (uint64_t)v4);
    os_unfair_lock_unlock(v5);
  }
  sub_1830620D4((uint64_t)v4, qword_1ECD84160);
  free(v4);
  free(v3);
}

uint64_t NWParameters.allowLocalEndpointReuse.getter()
{
  return sub_183304AD0((uint64_t (*)(_QWORD))nw_parameters_get_reuse_local_address);
}

void NWParameters.allowLocalEndpointReuse.setter(char a1)
{
  sub_183304B28(a1, (void (*)(_QWORD, _QWORD))nw_parameters_set_reuse_local_address);
}

BOOL sub_183302744@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_parameters_get_reuse_local_address(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.allowLocalEndpointReuse.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(v3) = nw_parameters_get_reuse_local_address(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_1833027D0;
}

void sub_1833027D0(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_183304C08(a1, a2, (void (*)(_QWORD, uint64_t))nw_parameters_set_reuse_local_address);
}

uint64_t NWParameters.acceptLocalOnly.getter()
{
  return sub_183304AD0((uint64_t (*)(_QWORD))nw_parameters_get_local_only);
}

void NWParameters.acceptLocalOnly.setter(char a1)
{
  sub_183304B28(a1, (void (*)(_QWORD, _QWORD))nw_parameters_set_local_only);
}

BOOL sub_1833027F4@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_parameters_get_local_only(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.acceptLocalOnly.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(v3) = nw_parameters_get_local_only(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_183302880;
}

void sub_183302880(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_183304C08(a1, a2, (void (*)(_QWORD, uint64_t))nw_parameters_set_local_only);
}

uint64_t NWParameters.includePeerToPeer.getter()
{
  return sub_183304AD0((uint64_t (*)(_QWORD))nw_parameters_get_include_peer_to_peer);
}

void NWParameters.includePeerToPeer.setter(char a1)
{
  sub_183304B28(a1, (void (*)(_QWORD, _QWORD))nw_parameters_set_include_peer_to_peer);
}

BOOL sub_1833028A4@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_parameters_get_include_peer_to_peer(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.includePeerToPeer.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(v3) = nw_parameters_get_include_peer_to_peer(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_183302930;
}

void sub_183302930(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_183304C08(a1, a2, (void (*)(_QWORD, uint64_t))nw_parameters_set_include_peer_to_peer);
}

uint64_t NWParameters.requiresDNSSECValidation.getter()
{
  return sub_183304AD0((uint64_t (*)(_QWORD))nw_parameters_requires_dnssec_validation);
}

void NWParameters.requiresDNSSECValidation.setter(char a1)
{
  sub_183304B28(a1, (void (*)(_QWORD, _QWORD))nw_parameters_set_requires_dnssec_validation);
}

BOOL sub_183302954@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_parameters_requires_dnssec_validation(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.requiresDNSSECValidation.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(v3) = nw_parameters_requires_dnssec_validation(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_1833029E0;
}

void sub_1833029E0(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_183304C08(a1, a2, (void (*)(_QWORD, uint64_t))nw_parameters_set_requires_dnssec_validation);
}

BOOL static NWParameters.ServiceClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWParameters.ServiceClass.hash(into:)()
{
  return sub_183B9225C();
}

void NWParameters.serviceClass.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  nw_service_class_t service_class;
  char v5;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  service_class = nw_parameters_get_service_class(*(nw_parameters_t *)(v3 + 16));
  if (service_class >= (nw_service_class_responsive_data|nw_service_class_interactive_video))
    v5 = 0;
  else
    v5 = service_class;
  *a1 = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

void NWParameters.serviceClass.setter(unsigned __int8 *a1)
{
  sub_183302DD4(a1, (void (*)(_QWORD, uint64_t))nw_parameters_set_service_class);
}

uint64_t sub_183302A84@<X0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  result = nw_parameters_get_service_class(*a1);
  if (result >= 6)
    v4 = 0;
  else
    v4 = result;
  *a2 = v4;
  return result;
}

void (*NWParameters.serviceClass.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  nw_service_class_t service_class;
  char v5;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  service_class = nw_parameters_get_service_class(*(nw_parameters_t *)(v3 + 16));
  if (service_class >= (nw_service_class_responsive_data|nw_service_class_interactive_video))
    v5 = 0;
  else
    v5 = service_class;
  *(_BYTE *)(a1 + 8) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_183302B1C;
}

void sub_183302B1C(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_183302EC0(a1, a2, (void (*)(_QWORD, uint64_t))nw_parameters_set_service_class);
}

void NWParameters.multipathServiceType.getter(_BYTE *a1@<X8>)
{
  sub_183302CA8((uint64_t (*)(_QWORD))nw_parameters_get_multipath_service, a1);
}

void NWParameters.multipathServiceType.setter(unsigned __int8 *a1)
{
  sub_183302DD4(a1, (void (*)(_QWORD, uint64_t))nw_parameters_set_multipath_service);
}

uint64_t sub_183302B44@<X0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  result = nw_parameters_get_multipath_service(*a1);
  if (result >= 4)
    v4 = 0;
  else
    v4 = result;
  *a2 = v4;
  return result;
}

void (*NWParameters.multipathServiceType.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  nw_multipath_service_t multipath_service;
  char v5;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  multipath_service = nw_parameters_get_multipath_service(*(nw_parameters_t *)(v3 + 16));
  if (multipath_service >= 4)
    v5 = 0;
  else
    v5 = multipath_service;
  *(_BYTE *)(a1 + 8) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_183302BDC;
}

void sub_183302BDC(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_183302EC0(a1, a2, (void (*)(_QWORD, uint64_t))nw_parameters_set_multipath_service);
}

uint64_t NWParameters.allowFastOpen.getter()
{
  return sub_183304AD0((uint64_t (*)(_QWORD))nw_parameters_get_fast_open_enabled);
}

void NWParameters.allowFastOpen.setter(char a1)
{
  sub_183304B28(a1, (void (*)(_QWORD, _QWORD))nw_parameters_set_fast_open_enabled);
}

BOOL sub_183302C00@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_parameters_get_fast_open_enabled(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.allowFastOpen.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(v3) = nw_parameters_get_fast_open_enabled(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_183302C8C;
}

void sub_183302C8C(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_183304C08(a1, a2, (void (*)(_QWORD, uint64_t))nw_parameters_set_fast_open_enabled);
}

void NWParameters.expiredDNSBehavior.getter(_BYTE *a1@<X8>)
{
  sub_183302CA8((uint64_t (*)(_QWORD))nw_parameters_get_expired_dns_behavior, a1);
}

void sub_183302CA8(uint64_t (*a1)(_QWORD)@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int v6;
  char v7;

  v5 = *(_QWORD *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  v6 = a1(*(_QWORD *)(v5 + 16));
  if (v6 >= 4)
    v7 = 0;
  else
    v7 = v6;
  *a2 = v7;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
}

void sub_183302CF8(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, os_unfair_lock_s *)@<X3>, _BYTE *a3@<X8>)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;

  v5 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v6 = v5 + 4;
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  a2(&v8, v6);
  os_unfair_lock_unlock(v7);
  *a3 = v8;
}

void sub_183302D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(os_unfair_lock_s *))
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;

  v6 = *(os_unfair_lock_s **)(*(_QWORD *)a2 + 16);
  v7 = v6 + 4;
  v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  a5(v7);
  os_unfair_lock_unlock(v8);
}

void NWParameters.expiredDNSBehavior.setter(unsigned __int8 *a1)
{
  sub_183302DD4(a1, (void (*)(_QWORD, uint64_t))nw_parameters_set_expired_dns_behavior);
}

void sub_183302DD4(unsigned __int8 *a1, void (*a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *(_QWORD *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  a2(*(_QWORD *)(v5 + 16), v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
}

uint64_t sub_183302E1C@<X0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  result = nw_parameters_get_expired_dns_behavior(*a1);
  if (result >= 4)
    v4 = 0;
  else
    v4 = result;
  *a2 = v4;
  return result;
}

void (*NWParameters.expiredDNSBehavior.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  nw_parameters_expired_dns_behavior_t expired_dns_behavior;
  char v5;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  expired_dns_behavior = nw_parameters_get_expired_dns_behavior(*(nw_parameters_t *)(v3 + 16));
  if (expired_dns_behavior >= 4)
    v5 = 0;
  else
    v5 = expired_dns_behavior;
  *(_BYTE *)(a1 + 8) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_183302EB4;
}

void sub_183302EB4(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_183302EC0(a1, a2, (void (*)(_QWORD, uint64_t))nw_parameters_set_expired_dns_behavior);
}

void sub_183302EC0(os_unfair_lock_s **a1, uint64_t a2, void (*a3)(_QWORD, uint64_t))
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *a1 + 6;
  v6 = *((unsigned __int8 *)a1 + 8);
  os_unfair_lock_lock(v5);
  a3(*(_QWORD *)&v4[4]._os_unfair_lock_opaque, v6);
  os_unfair_lock_unlock(v5);
}

void sub_183302F1C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v3;
  NSObject **v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v4 = (NSObject **)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1833030A8(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t sub_183302F84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  nw_protocol_stack_t *v3;
  os_unfair_lock_s *v4;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v3 = (nw_protocol_stack_t *)(v2 + 16);
  v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1833091D0(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_183302FF0(unint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  nw_protocol_stack_t *v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (nw_protocol_stack_t *)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1831EF7BC(v4, a1);
  os_unfair_lock_unlock(v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_18330304C()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  NSObject **v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (NSObject **)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1833030A8(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1833030A8@<X0>(NSObject **a1@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  uint64_t v8;
  _QWORD aBlock[6];
  uint64_t v10;

  v10 = MEMORY[0x1E0DEE9D8];
  v3 = *a1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = &v10;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = sub_183309388;
  *(_QWORD *)(v5 + 24) = v4;
  aBlock[4] = sub_183288404;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_183281A80;
  aBlock[3] = &block_descriptor_223_0;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_protocol_stack_iterate_application_protocols(v3, v6);
  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v10;
    result = swift_release();
    *a2 = v8;
  }
  return result;
}

uint64_t sub_1833031E8(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  if (qword_1EDCD7AE0 != -1)
LABEL_18:
    result = swift_once();
  v4 = off_1EDCD7B50;
  v5 = *((_QWORD *)off_1EDCD7B50 + 2);
  if (v5)
  {
    v6 = *((_QWORD *)off_1EDCD7B50 + 4);
    v7 = *(uint64_t (**)(uint64_t))(v6 + 88);
    swift_bridgeObjectRetain();
    result = v7(v3);
    if ((result & 1) != 0)
    {
LABEL_4:
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))(v6 + 96))(v3);
      swift_unknownObjectRetain();
      v8 = swift_retain();
      MEMORY[0x186DB1E20](v8);
      if (*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_183B91968();
      sub_183B91998();
      sub_183B91944();
      return swift_release();
    }
    if (v5 != 1)
    {
      if (v4[2] < 2uLL)
      {
        __break(1u);
        return result;
      }
      v6 = v4[5];
      if (((*(uint64_t (**)(uint64_t))(v6 + 88))(v3) & 1) != 0)
        goto LABEL_4;
      v9 = 0;
      v10 = v5 - 2;
      while (v10 != v9)
      {
        if ((unint64_t)(v9 + 2) >= v4[2])
        {
          __break(1u);
          goto LABEL_18;
        }
        v6 = v4[v9++ + 6];
        if (((*(uint64_t (**)(uint64_t))(v6 + 88))(v3) & 1) != 0)
          goto LABEL_4;
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*sub_183303380(_QWORD *a1))(unint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  NSObject **v4;
  os_unfair_lock_s *v5;
  uint64_t v7;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v3;
  v4 = (NSObject **)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1833030A8(v4, &v7);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_1833033F8;
}

uint64_t sub_1833033F8(unint64_t *a1, char a2)
{
  os_unfair_lock_s *v2;
  unint64_t v3;
  os_unfair_lock_s *v4;
  nw_protocol_stack_t *v5;

  v2 = (os_unfair_lock_s *)a1[1];
  v3 = *a1;
  v4 = v2 + 6;
  v5 = (nw_protocol_stack_t *)&v2[4];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v4);
    sub_1831EF7BC(v5, v3);
    os_unfair_lock_unlock(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_1831EF7BC(v5, v3);
    os_unfair_lock_unlock(v4);
  }
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1833034B4(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  nw_protocol_stack_t *v3;
  os_unfair_lock_s *v4;

  if (*result)
  {
    v2 = *(_QWORD *)(*(_QWORD *)a2 + 16);
    v3 = (nw_protocol_stack_t *)(v2 + 16);
    v4 = (os_unfair_lock_s *)(v2 + 24);
    swift_retain_n();
    os_unfair_lock_lock(v4);
    sub_1833091C4(v3);
    os_unfair_lock_unlock(v4);
    return (_QWORD *)swift_release_n();
  }
  return result;
}

uint64_t sub_18330351C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
    nw_protocol_stack_set_transport_protocol(*(nw_protocol_stack_t *)(v3 + 16), *(nw_protocol_options_t *)(v2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
    return swift_release_n();
  }
  return result;
}

uint64_t sub_183303578()
{
  return sub_183303688((uint64_t (*)(_QWORD))nw_protocol_stack_copy_transport_protocol);
}

uint64_t *(*sub_183303584(uint64_t *a1))(uint64_t *result, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_183303578();
  return sub_1833035B8;
}

uint64_t *sub_1833035B8(uint64_t *result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      v3 = *(_QWORD *)(result[1] + 16);
      swift_retain_n();
      os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
      nw_protocol_stack_set_transport_protocol(*(nw_protocol_stack_t *)(v3 + 16), *(nw_protocol_options_t *)(v2 + 16));
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
      swift_release_n();
    }
    return (uint64_t *)swift_release();
  }
  else if (v2)
  {
    v4 = *(_QWORD *)(result[1] + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
    nw_protocol_stack_set_transport_protocol(*(nw_protocol_stack_t *)(v4 + 16), *(nw_protocol_options_t *)(v2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
    return (uint64_t *)swift_release_n();
  }
  return result;
}

uint64_t sub_18330367C()
{
  return sub_183303688((uint64_t (*)(_QWORD))nw_protocol_stack_copy_internet_protocol);
}

uint64_t sub_183303688(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  v4 = a1(*(_QWORD *)(v3 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  if (v4)
  {
    v5 = sub_1832A39F0(v4);
    if (v5)
      return ((uint64_t (*)(uint64_t))v5[12])(v4);
    swift_unknownObjectRelease();
  }
  return 0;
}

uint64_t (*sub_183303700(uint64_t *a1))()
{
  *a1 = sub_18330367C();
  return destroy for NWConnection.EstablishmentReport.Handshake;
}

uint64_t NWParameters.ProtocolStack.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t _s7Network12NWParametersC16debugDescriptionSSvg_0()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  id *v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (id *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1833037AC(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1833037AC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, sel_description);
  v4 = sub_183B916E0();
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_183303810()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for NWParameters.PrivacyContext();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED48);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 16) = &__block_literal_global_11079;
  *(_QWORD *)(v0 + 16) = v1;
  qword_1EDCDED40 = v0;
  return swift_unknownObjectRetain();
}

uint64_t static NWParameters.PrivacyContext.default.getter()
{
  if (qword_1EDCDC600 != -1)
    swift_once();
  return swift_retain();
}

uint64_t NWParameters.PrivacyContext.__allocating_init(description:)()
{
  uint64_t v0;
  uint64_t v1;
  nw_privacy_context_t v2;
  uint64_t v3;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = MEMORY[0x1E0DEE9D8];
  v1 = sub_183B91758();
  swift_bridgeObjectRelease();
  v2 = nw_privacy_context_create((const char *)(v1 + 32));
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED48);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v0 + 16) = v3;
  return v0;
}

uint64_t NWParameters.PrivacyContext.init(description:)()
{
  uint64_t v0;
  uint64_t v1;
  nw_privacy_context_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 24) = MEMORY[0x1E0DEE9D8];
  v1 = sub_183B91758();
  swift_bridgeObjectRelease();
  v2 = nw_privacy_context_create((const char *)(v1 + 32));
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED48);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v0 + 16) = v3;
  return v0;
}

void sub_1833039DC()
{
  sub_1833039F4((void (*)(_QWORD))nw_privacy_context_flush_cache);
}

void sub_1833039E8()
{
  sub_1833039F4((void (*)(_QWORD))nw_privacy_context_disable_logging);
}

void sub_1833039F4(void (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  a1(*(_QWORD *)(v3 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

uint64_t NWParameters.PrivacyContext.ResolverConfiguration.debugDescription.getter()
{
  NSObject *v0;
  id v1;
  uint64_t v2;

  v0 = sub_183303AAC();
  if (!v0)
    return 7104878;
  v1 = -[NSObject description](v0, sel_description);
  swift_unknownObjectRelease();
  v2 = sub_183B916E0();

  return v2;
}

NSObject *sub_183303AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  const __CFURL *v20;
  _BOOL8 v21;
  NSObject *https;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  _QWORD v34[2];

  v1 = sub_183B913A4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NWEndpoint();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)v34 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v34 - v13;
  v15 = type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration();
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_183058C44(v0, (uint64_t)v17, v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v19 = *(_QWORD *)&v17[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED88) + 48)];
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v17, v1);
    v20 = (const __CFURL *)sub_183B9135C();
    v21 = nw_endpoint_create_with_cfurl(v20);

    https = nw_resolver_config_create_https((nw_endpoint_t)v21);
    if (https)
    {
      v23 = *(_QWORD *)(v19 + 16);
      if (v23)
      {
        v34[0] = v21;
        v34[1] = v19;
        v24 = v19 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        v25 = *(_QWORD *)(v6 + 72);
        swift_unknownObjectRetain();
        do
        {
          sub_183058C44(v24, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
          NWEndpoint.nw.getter();
          if (v26)
          {
            nw_resolver_config_add_server_address(https, v26);
            swift_unknownObjectRelease();
          }
          sub_183058AE0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
          v24 += v25;
          --v23;
        }
        while (v23);
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v27 = *(_QWORD *)&v17[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED80) + 48)];
    sub_1830589B0((uint64_t)v17, (uint64_t)v14);
    NWEndpoint.nw.getter();
    if (v28)
    {
      https = nw_resolver_config_create_tls(v28);
      if (https)
      {
        v29 = *(_QWORD *)(v27 + 16);
        if (v29)
        {
          v30 = v27 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
          v31 = *(_QWORD *)(v6 + 72);
          swift_unknownObjectRetain();
          do
          {
            sub_183058C44(v30, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
            NWEndpoint.nw.getter();
            if (v32)
            {
              nw_resolver_config_add_server_address(https, v32);
              swift_unknownObjectRelease();
            }
            sub_183058AE0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
            v30 += v31;
            --v29;
          }
          while (v29);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        swift_unknownObjectRelease();
        sub_183058AE0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      }
      else
      {
        sub_183058AE0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      sub_183058AE0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return https;
}

uint64_t sub_183303E50()
{
  NSObject *v0;
  id v1;
  uint64_t v2;

  v0 = sub_183303AAC();
  if (!v0)
    return 7104878;
  v1 = -[NSObject description](v0, sel_description);
  swift_unknownObjectRelease();
  v2 = sub_183B916E0();

  return v2;
}

void sub_183303EC8(char a1, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  NSObject **v6;
  os_unfair_lock_s *v7;

  v5 = *(os_unfair_lock_s **)(v2 + 16);
  v6 = (NSObject **)&v5[4];
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  sub_183303F24(v6, a1, a2);
  os_unfair_lock_unlock(v7);
}

uint64_t sub_183303F24(NSObject **a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEDB0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  sub_183062090(a3, (uint64_t)v8, &qword_1EDCDEDB0);
  v10 = type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) == 1)
  {
    sub_1830620D4((uint64_t)v8, &qword_1EDCDEDB0);
    v11 = 0;
  }
  else
  {
    v11 = sub_183303AAC();
    sub_183058AE0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration);
  }
  nw_privacy_context_require_encrypted_name_resolution(v9, a2 & 1, v11);
  return swift_unknownObjectRelease();
}

void sub_183304024(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v3;

  v3 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 24);
  os_unfair_lock_lock(v3);
  sub_1833091B8(a2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_183304068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject **v3;
  os_unfair_lock_s *v4;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v3 = (NSObject **)(v2 + 16);
  v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1833091A0(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1833040D4(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  NSObject **v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (NSObject **)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_183304134(v4, v1, a1);
  os_unfair_lock_unlock(v5);
  return swift_bridgeObjectRelease();
}

void sub_183304134(NSObject **a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t i;
  NSObject *v8;

  *(_QWORD *)(a2 + 24) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *a1;
  nw_privacy_context_clear_proxies(v5);
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v6; ++i)
    {
      v8 = *(NSObject **)(a3 + 8 * i + 32);
      nw_privacy_context_add_proxy(v5, v8);
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1833041C8()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 24);
  os_unfair_lock_lock(v1);
  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  return v2;
}

uint64_t (*sub_183304208(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v1;
  a1[2] = v3;
  v4 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  v5 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v4);
  *a1 = v5;
  return sub_183304264;
}

uint64_t sub_183304264(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  NSObject **v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = (os_unfair_lock_s *)a1[2];
  v5 = v4 + 6;
  v6 = (NSObject **)&v4[4];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v5);
    sub_183304134(v6, v3, v2);
    os_unfair_lock_unlock(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v4 + 6);
    sub_183304134(v6, v3, v2);
    os_unfair_lock_unlock(v5);
  }
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.PrivacyContext.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NWParameters.PrivacyContext.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t NWParameters.requiredNetworkAgents.getter()
{
  return sub_183304398((uint64_t (*)(_QWORD))nw_parameters_copy_required_netagent_domains, (uint64_t (*)(uint64_t))nw_parameters_copy_required_netagent_types);
}

uint64_t sub_183304398(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t v9;

  v5 = *(os_unfair_lock_s **)(v2 + 16);
  v6 = v5 + 4;
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  sub_183304738(v6, a1, a2, &v9);
  os_unfair_lock_unlock(v7);
  return v9;
}

void sub_18330440C(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t (*a3)(uint64_t)@<X4>, _QWORD *a4@<X8>)
{
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;

  v7 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v8 = v7 + 4;
  v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_183304738(v8, a2, a3, &v10);
  os_unfair_lock_unlock(v9);
  *a4 = v10;
}

uint64_t NWParameters.requiredNetworkAgents.setter(uint64_t a1)
{
  return sub_183304548(a1, (void (*)(uint64_t, xpc_object_t, xpc_object_t))nw_parameters_set_required_netagent_classes);
}

uint64_t (*NWParameters.requiredNetworkAgents.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  uint64_t v7;

  a1[1] = v1;
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = v3 + 4;
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_183304738(v4, (uint64_t (*)(_QWORD))nw_parameters_copy_required_netagent_domains, (uint64_t (*)(uint64_t))nw_parameters_copy_required_netagent_types, &v7);
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_18330451C;
}

uint64_t sub_18330451C(uint64_t *a1, char a2)
{
  return sub_183304980(a1, a2, NWParameters.requiredNetworkAgents.setter);
}

uint64_t NWParameters.preferredNetworkAgents.getter()
{
  return sub_183304398((uint64_t (*)(_QWORD))nw_parameters_copy_preferred_netagent_domains, (uint64_t (*)(uint64_t))nw_parameters_copy_preferred_netagent_types);
}

uint64_t NWParameters.preferredNetworkAgents.setter(uint64_t a1)
{
  return sub_183304548(a1, (void (*)(uint64_t, xpc_object_t, xpc_object_t))nw_parameters_set_preferred_netagent_classes);
}

uint64_t sub_183304548(uint64_t a1, void (*a2)(uint64_t, xpc_object_t, xpc_object_t))
{
  uint64_t v2;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = xpc_array_create(0, 0);
  v6 = xpc_array_create(0, 0);
  v7 = *(_QWORD *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  sub_183304624(v7 + 16, a1, v5, v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  swift_bridgeObjectRelease();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  v8 = *(_QWORD *)(v7 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  a2(v8, v5, v6);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

void sub_183304624(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v7;
  const char *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v7 = swift_bridgeObjectRetain() + 56;
    do
    {
      v8 = (const char *)(sub_183B91758() + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = xpc_string_create(v8);
      swift_release();
      xpc_array_append_value(a3, v9);
      swift_bridgeObjectRelease();
      v10 = sub_183B91758();
      swift_bridgeObjectRelease();
      v11 = xpc_string_create((const char *)(v10 + 32));
      swift_release();
      xpc_array_append_value(a4, v11);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v7 += 32;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_183304738@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t (*a3)(uint64_t)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  void *v10;
  size_t count;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  size_t v24;
  void *v25;

  v6 = *a1;
  result = a2(*a1);
  if (!result)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_20:
    *a4 = v13;
    return result;
  }
  v8 = (void *)result;
  v9 = a3(v6);
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  v10 = (void *)v9;
  count = xpc_array_get_count(v8);
  result = xpc_array_get_count(v10);
  v23 = a4;
  if (count != result)
    goto LABEL_16;
  if ((count & 0x8000000000000000) == 0)
  {
    if (count)
    {
      v12 = 0;
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v25 = v10;
      v24 = count;
      do
      {
        if (xpc_array_get_string(v8, v12) && xpc_array_get_string(v10, v12))
        {
          v15 = sub_183B91800();
          v17 = v16;
          v18 = sub_183B91800();
          v20 = v19;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v13 = sub_183243420(0, v13[2] + 1, 1, v13);
          v22 = v13[2];
          v21 = v13[3];
          if (v22 >= v21 >> 1)
            v13 = sub_183243420((_QWORD *)(v21 > 1), v22 + 1, 1, v13);
          v13[2] = v22 + 1;
          v14 = &v13[4 * v22];
          v14[4] = v15;
          v14[5] = v17;
          v14[6] = v18;
          v14[7] = v20;
          v10 = v25;
          count = v24;
        }
        ++v12;
      }
      while (count != v12);
      goto LABEL_17;
    }
LABEL_16:
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
    swift_unknownObjectRelease();
    a4 = v23;
LABEL_19:
    result = swift_unknownObjectRelease();
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t (*NWParameters.preferredNetworkAgents.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  uint64_t v7;

  a1[1] = v1;
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = v3 + 4;
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_183304738(v4, (uint64_t (*)(_QWORD))nw_parameters_copy_preferred_netagent_domains, (uint64_t (*)(uint64_t))nw_parameters_copy_preferred_netagent_types, &v7);
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_183304974;
}

uint64_t sub_183304974(uint64_t *a1, char a2)
{
  return sub_183304980(a1, a2, NWParameters.preferredNetworkAgents.setter);
}

uint64_t sub_183304980(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  if ((a2 & 1) == 0)
    return a3(*a1);
  v4 = swift_bridgeObjectRetain();
  a3(v4);
  return swift_bridgeObjectRelease();
}

void NWParameters.setPrivacyContext(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  NSObject **v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (NSObject **)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_183304A28(v4, a1);
  os_unfair_lock_unlock(v5);
}

void sub_183304A28(NSObject **a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  NSObject *v6;

  v3 = *a1;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = (os_unfair_lock_s *)(v4 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  v6 = *(NSObject **)(v4 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v5);
  if (v2)
  {
    __break(1u);
  }
  else
  {
    nw_parameters_set_privacy_context(v3, v6);
    swift_unknownObjectRelease();
  }
}

uint64_t sub_183304A98@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1831EF71C(a1, (uint64_t (*)(_QWORD))nw_parameters_copy, (void (*)(void))type metadata accessor for NWParameters, &qword_1EDCDBA80, a2);
}

uint64_t NWParameters.isKnownTracker.getter()
{
  return sub_183304AD0((uint64_t (*)(_QWORD))nw_parameters_get_is_known_tracker);
}

uint64_t sub_183304AD0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  v4 = a1(*(_QWORD *)(v3 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return v4;
}

void NWParameters.isKnownTracker.setter(char a1)
{
  sub_183304B28(a1, (void (*)(_QWORD, _QWORD))nw_parameters_set_is_known_tracker);
}

void sub_183304B28(char a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  a2(*(_QWORD *)(v5 + 16), a1 & 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
}

uint64_t sub_183304B70@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = nw_parameters_get_is_known_tracker(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.isKnownTracker.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(v3) = nw_parameters_get_is_known_tracker(*(void **)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_183304BFC;
}

void sub_183304BFC(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_183304C08(a1, a2, (void (*)(_QWORD, uint64_t))nw_parameters_set_is_known_tracker);
}

void sub_183304C08(os_unfair_lock_s **a1, uint64_t a2, void (*a3)(_QWORD, uint64_t))
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *a1 + 6;
  v6 = *((unsigned __int8 *)a1 + 8);
  os_unfair_lock_lock(v5);
  a3(*(_QWORD *)&v4[4]._os_unfair_lock_opaque, v6);
  os_unfair_lock_unlock(v5);
}

uint64_t NWParameters.Attribution.hash(into:)()
{
  return sub_183B9225C();
}

BOOL static NWParameters.Attribution.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWParameters.Attribution.hashValue.getter()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

void NWParameters.attribution.getter(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  *a1 = nw_parameters_get_attribution(*(nw_parameters_t *)(v3 + 16)) == nw_parameters_attribution_user;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

void sub_183304D20(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  os_unfair_lock_s *v3;
  nw_parameters_t *v4;
  os_unfair_lock_s *v5;
  BOOL v6;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v4 = (nw_parameters_t *)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_183304DD4(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void NWParameters.attribution.setter(unsigned __int8 *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  nw_parameters_attribution_t v4;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  if (v2)
    v4 = nw_parameters_attribution_user;
  else
    v4 = nw_parameters_attribution_developer;
  nw_parameters_set_attribution(*(nw_parameters_t *)(v3 + 16), v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

uint64_t sub_183304DD4@<X0>(nw_parameters_t *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result;

  result = nw_parameters_get_attribution(*a1);
  *a2 = (_DWORD)result == 2;
  return result;
}

void (*NWParameters.attribution.modify(uint64_t a1))(os_unfair_lock_s **a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  *(_BYTE *)(a1 + 8) = nw_parameters_get_attribution(*(nw_parameters_t *)(v3 + 16)) == nw_parameters_attribution_user;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_183304E6C;
}

void sub_183304E6C(os_unfair_lock_s **a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  int v3;
  nw_parameters_attribution_t v4;

  v1 = *a1;
  v2 = *a1 + 6;
  v3 = *((unsigned __int8 *)a1 + 8);
  os_unfair_lock_lock(v2);
  if (v3)
    v4 = nw_parameters_attribution_user;
  else
    v4 = nw_parameters_attribution_developer;
  nw_parameters_set_attribution(*(nw_parameters_t *)&v1[4]._os_unfair_lock_opaque, v4);
  os_unfair_lock_unlock(v2);
}

uint64_t NWParameters.accountID.getter()
{
  return sub_183304F5C((uint64_t (*)(_QWORD))nw_parameters_get_account_id);
}

uint64_t NWParameters.accountID.setter(uint64_t a1, uint64_t a2)
{
  return sub_1833050C0(a1, a2, (void (*)(uint64_t, uint64_t))nw_parameters_set_account_id);
}

uint64_t (*NWParameters.accountID.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + 16);
  a1[2] = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  if (nw_parameters_get_account_id(*(void **)(v3 + 16)))
  {
    v5 = sub_183B91800();
    v7 = v6;
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  os_unfair_lock_unlock(v4);
  *a1 = v5;
  a1[1] = v7;
  return sub_183304F44;
}

uint64_t sub_183304F44(uint64_t *a1, char a2)
{
  return sub_183305258(a1, a2, (void (*)(uint64_t, uint64_t))nw_parameters_set_account_id);
}

uint64_t NWParameters.sourceApplicationBundleID.getter()
{
  return sub_183304F5C((uint64_t (*)(_QWORD))nw_parameters_get_effective_bundle_id);
}

uint64_t sub_183304F5C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  if (a1(*(_QWORD *)(v3 + 16)))
    v5 = sub_183B91800();
  else
    v5 = 0;
  os_unfair_lock_unlock(v4);
  return v5;
}

double sub_183304FC4@<D0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _OWORD *a3@<X8>)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  double result;
  __int128 v9;

  v5 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v6 = v5 + 4;
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  sub_183305198(v6, a2, (uint64_t *)&v9);
  os_unfair_lock_unlock(v7);
  result = *(double *)&v9;
  *a3 = v9;
  return result;
}

uint64_t sub_18330503C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(os_unfair_lock_s *))
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;

  v6 = *(os_unfair_lock_s **)(*(_QWORD *)a2 + 16);
  v7 = v6 + 4;
  v8 = v6 + 6;
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v8);
  a5(v7);
  os_unfair_lock_unlock(v8);
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.sourceApplicationBundleID.setter(uint64_t a1, uint64_t a2)
{
  return sub_1833050C0(a1, a2, (void (*)(uint64_t, uint64_t))nw_parameters_set_source_application_by_bundle_id);
}

uint64_t sub_1833050C0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  os_unfair_lock_s *v7;
  uint64_t *v8;
  os_unfair_lock_s *v9;

  v7 = *(os_unfair_lock_s **)(v3 + 16);
  v8 = (uint64_t *)&v7[4];
  v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_183305134(v8, a1, a2, a3);
  os_unfair_lock_unlock(v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_183305134(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a1;
  if (a3)
    v6 = sub_183B91758() + 32;
  else
    v6 = 0;
  a4(v5, v6);
  return swift_unknownObjectRelease();
}

uint64_t sub_183305198@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = a2(*a1);
  if (result)
    result = sub_183B91800();
  else
    v5 = 0;
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t (*NWParameters.sourceApplicationBundleID.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + 16);
  a1[2] = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  if (nw_parameters_get_effective_bundle_id(*(void **)(v3 + 16)))
  {
    v5 = sub_183B91800();
    v7 = v6;
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  os_unfair_lock_unlock(v4);
  *a1 = v5;
  a1[1] = v7;
  return sub_18330524C;
}

uint64_t sub_18330524C(uint64_t *a1, char a2)
{
  return sub_183305258(a1, a2, (void (*)(uint64_t, uint64_t))nw_parameters_set_source_application_by_bundle_id);
}

uint64_t sub_183305258(uint64_t *a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t *v8;

  v5 = *a1;
  v4 = a1[1];
  v6 = (os_unfair_lock_s *)a1[2];
  v7 = v6 + 6;
  v8 = (uint64_t *)&v6[4];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v7);
    sub_183305134(v8, v5, v4, a3);
    os_unfair_lock_unlock(v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v6 + 6);
    sub_183305134(v8, v5, v4, a3);
    os_unfair_lock_unlock(v7);
  }
  return swift_bridgeObjectRelease();
}

void NWParameters.applicationID.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  *a1 = nw_parameters_copy_application_id(*(void **)(v3 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

_QWORD *sub_183305374(_QWORD *result)
{
  uint64_t v1;
  void **v2;
  os_unfair_lock_s *v3;

  if (*result)
  {
    MEMORY[0x1E0C80A78](result);
    v2 = (void **)(v1 + 16);
    v3 = (os_unfair_lock_s *)(v1 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v3);
    sub_183309130(v2);
    os_unfair_lock_unlock(v3);
    return (_QWORD *)swift_unknownObjectRelease();
  }
  return result;
}

void **NWParameters.applicationID.setter(void **result)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = *result;
  if (*result)
  {
    v3 = *(_QWORD *)(v1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
    nw_parameters_set_application_id(*(void **)(v3 + 16), v2);
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
    return (void **)swift_unknownObjectRelease();
  }
  return result;
}

BOOL sub_183305464@<W0>(void **a1@<X0>, _BOOL8 *a2@<X8>)
{
  _BOOL8 result;

  result = nw_parameters_copy_application_id(*a1);
  *a2 = result;
  return result;
}

uint64_t (*NWParameters.applicationID.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  a1[1] = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  *a1 = nw_parameters_copy_application_id(*(void **)(v3 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_1833054EC;
}

uint64_t sub_1833054EC(uint64_t result, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)result;
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      v3 = *(_QWORD *)(result + 8);
      swift_unknownObjectRetain();
      os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
      nw_parameters_set_application_id(*(void **)(v3 + 16), v2);
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
      swift_unknownObjectRelease();
    }
    return swift_unknownObjectRelease();
  }
  else if (v2)
  {
    v4 = *(_QWORD *)(result + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
    nw_parameters_set_application_id(*(void **)(v4 + 16), v2);
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1833055A4()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  id *v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)v0 + 16);
  v2 = (id *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1833037AC(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t ProxyConfiguration.nw.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ProxyConfiguration.init(_nw:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL ProxyConfiguration.allowFailover.getter()
{
  nw_proxy_config_t *v0;

  return nw_proxy_config_get_failover_allowed(*v0);
}

void ProxyConfiguration.allowFailover.setter(char a1)
{
  nw_proxy_config_t *v1;

  nw_proxy_config_set_failover_allowed(*v1, a1 & 1);
}

void (*ProxyConfiguration.allowFailover.modify(uint64_t a1))(uint64_t a1)
{
  nw_proxy_config_t *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = nw_proxy_config_get_failover_allowed(*v1);
  return sub_183305678;
}

void sub_183305678(uint64_t a1)
{
  nw_proxy_config_set_failover_allowed(**(nw_proxy_config_t **)a1, *(_BYTE *)(a1 + 8));
}

uint64_t ProxyConfiguration.matchDomains.getter()
{
  NSObject **v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD aBlock[6];
  uint64_t v8;

  v1 = *v0;
  v8 = MEMORY[0x1E0DEE9D8];
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = &v8;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = sub_1833078F4;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_182FEDAC0;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_183305800;
  aBlock[3] = &block_descriptor_18;
  v4 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_proxy_config_enumerate_match_domains(v1, v4);
  swift_unknownObjectRelease();
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

uint64_t ProxyConfiguration.matchDomains.setter(uint64_t a1)
{
  sub_18330795C(a1, (uint64_t (*)(_QWORD))nw_proxy_config_clear_match_domains, (void (*)(uint64_t, uint64_t))nw_proxy_config_add_match_domain);
  return swift_bridgeObjectRelease();
}

uint64_t sub_183305800(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

void (*ProxyConfiguration.matchDomains.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  NSObject **v1;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (*result)(uint64_t, char);
  uint64_t v10;

  v3 = malloc(0x48uLL);
  v4 = MEMORY[0x1E0DEE9D8];
  *a1 = v3;
  v3[7] = v4;
  v3[8] = v1;
  v5 = *v1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3 + 7;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_1833093AC;
  *(_QWORD *)(v7 + 24) = v6;
  v3[4] = sub_1832576D8;
  v3[5] = v7;
  *v3 = MEMORY[0x1E0C809B0];
  v3[1] = 1107296256;
  v3[2] = sub_183305800;
  v3[3] = &block_descriptor_68;
  v8 = _Block_copy(v3);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_proxy_config_enumerate_match_domains(v5, v8);
  swift_unknownObjectRelease();
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  result = (void (*)(uint64_t, char))swift_release();
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v10 = v3[7];
    swift_release();
    v3[6] = v10;
    return sub_18330598C;
  }
  return result;
}

void sub_18330598C(uint64_t a1, char a2)
{
  sub_183305D44(a1, a2, (uint64_t (*)(_QWORD))nw_proxy_config_clear_match_domains, (void (*)(uint64_t, uint64_t))nw_proxy_config_add_match_domain);
}

uint64_t ProxyConfiguration.excludedDomains.getter()
{
  NSObject **v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD aBlock[6];
  uint64_t v8;

  v1 = *v0;
  v8 = MEMORY[0x1E0DEE9D8];
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = &v8;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = sub_1833093AC;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_1832576D8;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_183305800;
  aBlock[3] = &block_descriptor_78;
  v4 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_proxy_config_enumerate_match_domains(v1, v4);
  swift_unknownObjectRelease();
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

uint64_t ProxyConfiguration.excludedDomains.setter(uint64_t a1)
{
  sub_18330795C(a1, (uint64_t (*)(_QWORD))nw_proxy_config_clear_excluded_domains, (void (*)(uint64_t, uint64_t))nw_proxy_config_add_excluded_domain);
  return swift_bridgeObjectRelease();
}

uint64_t sub_183305B18(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v3 = sub_183B91800();
  v5 = v4;
  v6 = (_QWORD *)*a2;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a2 = (uint64_t)v6;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_183242590(0, v6[2] + 1, 1, v6);
    v6 = (_QWORD *)result;
    *a2 = result;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    result = (uint64_t)sub_183242590((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    v6 = (_QWORD *)result;
    *a2 = result;
  }
  v6[2] = v9 + 1;
  v10 = &v6[2 * v9];
  v10[4] = v3;
  v10[5] = v5;
  return result;
}

void (*ProxyConfiguration.excludedDomains.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  NSObject **v1;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (*result)(uint64_t, char);
  uint64_t v10;

  v3 = malloc(0x48uLL);
  v4 = MEMORY[0x1E0DEE9D8];
  *a1 = v3;
  v3[7] = v4;
  v3[8] = v1;
  v5 = *v1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3 + 7;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_1833093AC;
  *(_QWORD *)(v7 + 24) = v6;
  v3[4] = sub_1832576D8;
  v3[5] = v7;
  *v3 = MEMORY[0x1E0C809B0];
  v3[1] = 1107296256;
  v3[2] = sub_183305800;
  v3[3] = &block_descriptor_89;
  v8 = _Block_copy(v3);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_proxy_config_enumerate_match_domains(v5, v8);
  swift_unknownObjectRelease();
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  result = (void (*)(uint64_t, char))swift_release();
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v10 = v3[7];
    swift_release();
    v3[6] = v10;
    return sub_183305D30;
  }
  return result;
}

void sub_183305D30(uint64_t a1, char a2)
{
  sub_183305D44(a1, a2, (uint64_t (*)(_QWORD))nw_proxy_config_clear_excluded_domains, (void (*)(uint64_t, uint64_t))nw_proxy_config_add_excluded_domain);
}

void sub_183305D44(uint64_t a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t, uint64_t))
{
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(void **)a1;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  if ((a2 & 1) != 0)
  {
    v8 = swift_bridgeObjectRetain();
    sub_18330795C(v8, a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18330795C(v7, a3, a4);
  }
  swift_bridgeObjectRelease();
  free(v6);
}

Swift::Void __swiftcall ProxyConfiguration.applyCredential(username:password:)(Swift::String username, Swift::String password)
{
  const char *v2;
  const char *v3;
  NSObject *v4;

  v2 = (const char *)(sub_183B91758() + 32);
  v3 = (const char *)(sub_183B91758() + 32);
  v4 = swift_unknownObjectRetain();
  nw_proxy_config_set_username_and_password(v4, v2, v3);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
}

void ProxyConfiguration.init(socksv5Proxy:)(uint64_t a1@<X0>, nw_proxy_config_t *a2@<X8>)
{
  NSObject *v4;
  nw_proxy_config_t socksv5;

  NWEndpoint.nw.getter();
  if (v4)
  {
    socksv5 = nw_proxy_config_create_socksv5(v4);
    swift_unknownObjectRelease();
    sub_183058AE0(a1, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    *a2 = socksv5;
  }
  else
  {
    __break(1u);
  }
}

void ProxyConfiguration.init(httpCONNECTProxy:tlsOptions:)(uint64_t a1@<X0>, uint64_t a2@<X1>, nw_proxy_config_t *a3@<X8>)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  nw_proxy_config_t http_connect;

  NWEndpoint.nw.getter();
  if (v6)
  {
    v7 = v6;
    if (a2)
    {
      v8 = *(NSObject **)(a2 + 16);
      swift_unknownObjectRetain();
    }
    else
    {
      v8 = 0;
    }
    http_connect = nw_proxy_config_create_http_connect(v7, v8);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_183058AE0(a1, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    *a3 = http_connect;
  }
  else
  {
    __break(1u);
  }
}

uint64_t ProxyConfiguration.RelayHop.init(http3RelayEndpoint:http2RelayEndpoint:tlsOptions:additionalHTTPHeaderFields:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, NSObject **a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t result;
  int64_t v24;
  const char *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject **v33;

  v33 = a5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a1;
  NWEndpoint.nw.getter();
  v13 = v12;
  v31 = a2;
  sub_183062090(a2, (uint64_t)v11, qword_1ECD84160);
  v14 = type metadata accessor for NWEndpoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v11, 1, v14) == 1)
  {
    sub_1830620D4((uint64_t)v11, qword_1ECD84160);
    v15 = 0;
  }
  else
  {
    NWEndpoint.nw.getter();
    v15 = v16;
    sub_183058AE0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  }
  v30 = a3;
  v17 = nw_relay_hop_create(v13, v15, *(nw_protocol_options_t *)(a3 + 16));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v18 = a4 + 64;
  v19 = 1 << *(_BYTE *)(a4 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *(_QWORD *)(a4 + 64);
  v22 = (unint64_t)(v19 + 63) >> 6;
  result = swift_unknownObjectRetain();
  v24 = 0;
  while (1)
  {
    if (v21)
    {
      v21 &= v21 - 1;
      goto LABEL_8;
    }
    v27 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v27 >= v22)
      goto LABEL_24;
    v28 = *(_QWORD *)(v18 + 8 * v27);
    ++v24;
    if (!v28)
    {
      v24 = v27 + 1;
      if (v27 + 1 >= v22)
        goto LABEL_24;
      v28 = *(_QWORD *)(v18 + 8 * v24);
      if (!v28)
      {
        v24 = v27 + 2;
        if (v27 + 2 >= v22)
          goto LABEL_24;
        v28 = *(_QWORD *)(v18 + 8 * v24);
        if (!v28)
          break;
      }
    }
LABEL_23:
    v21 = (v28 - 1) & v28;
LABEL_8:
    v25 = (const char *)(sub_183B91758() + 32);
    v26 = sub_183B91758();
    nw_relay_hop_add_additional_http_header_field(v17, v25, (const char *)(v26 + 32));
    swift_release();
    result = swift_release();
  }
  v29 = v27 + 3;
  if (v29 >= v22)
  {
LABEL_24:
    swift_release();
    swift_unknownObjectRelease();
    sub_1830620D4(v31, qword_1ECD84160);
    sub_183058AE0(v32, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    result = swift_release();
    *v33 = v17;
    return result;
  }
  v28 = *(_QWORD *)(v18 + 8 * v29);
  if (v28)
  {
    v24 = v29;
    goto LABEL_23;
  }
  while (1)
  {
    v24 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v24 >= v22)
      goto LABEL_24;
    v28 = *(_QWORD *)(v18 + 8 * v24);
    ++v29;
    if (v28)
      goto LABEL_23;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t ProxyConfiguration.RelayHop.init(http2RelayEndpoint:tlsOptions:additionalHTTPHeaderFields:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
  nw_endpoint_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t result;
  int64_t v14;
  const char *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;

  NWEndpoint.nw.getter();
  v7 = nw_relay_hop_create(0, v6, *(nw_protocol_options_t *)(a2 + 16));
  swift_unknownObjectRelease();
  v8 = a3 + 64;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  result = swift_unknownObjectRetain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v11 &= v11 - 1;
      goto LABEL_5;
    }
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v17 >= v12)
      goto LABEL_21;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_21;
      v18 = *(_QWORD *)(v8 + 8 * v14);
      if (!v18)
      {
        v14 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_21;
        v18 = *(_QWORD *)(v8 + 8 * v14);
        if (!v18)
          break;
      }
    }
LABEL_20:
    v11 = (v18 - 1) & v18;
LABEL_5:
    v15 = (const char *)(sub_183B91758() + 32);
    v16 = sub_183B91758();
    nw_relay_hop_add_additional_http_header_field(v7, v15, (const char *)(v16 + 32));
    swift_release();
    result = swift_release();
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_21:
    swift_release();
    swift_unknownObjectRelease();
    sub_183058AE0(a1, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    result = swift_release();
    *a4 = v7;
    return result;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v14 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v12)
      goto LABEL_21;
    v18 = *(_QWORD *)(v8 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

_QWORD *ProxyConfiguration.init(relayHops:)@<X0>(_QWORD *result@<X0>, nw_proxy_config_t *a2@<X8>)
{
  uint64_t v3;
  NSObject *v4;
  nw_proxy_config_t relay;
  NSObject *v6;
  NSObject *v7;

  v3 = result[2];
  if (v3 == 1)
  {
    v4 = result[4];
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    relay = nw_proxy_config_create_relay(v4, 0);
LABEL_5:
    result = (_QWORD *)swift_unknownObjectRelease();
    *a2 = relay;
    return result;
  }
  if (v3 == 2)
  {
    v6 = result[4];
    v7 = result[5];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    relay = nw_proxy_config_create_relay(v6, v7);
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void ProxyConfiguration.init(obliviousHTTPRelay:relayResourcePath:gatewayKeyConfig:matchDomains:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X10 }
}

uint64_t sub_1833064F8()
{
  NSObject *v0;
  NSObject **v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  const char *v5;
  NSObject *oblivious_http;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  __int16 v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v11 = v4;
  v12 = v3;
  v13 = BYTE2(v3);
  v14 = BYTE3(v3);
  v15 = BYTE4(v3);
  v16 = BYTE5(v3);
  v5 = (const char *)(sub_183B91758() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  oblivious_http = nw_proxy_config_create_oblivious_http(v0, v5, (const uint8_t *)&v11, BYTE6(v3));
  swift_release();
  v7 = *(_QWORD *)(v2 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = v2 + 40;
    do
    {
      v9 = sub_183B91758();
      nw_proxy_config_add_match_domain(oblivious_http, (const char *)(v9 + 32));
      swift_release();
      v8 += 16;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  sub_18308485C(v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  result = swift_unknownObjectRelease();
  *v1 = oblivious_http;
  return result;
}

uint64_t NSURLSessionConfiguration.proxyConfigurations.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = objc_msgSend(v0, sel_proxyConfigurations);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED50);
  v2 = sub_183B9192C();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v3 = sub_183B91F68();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_13;
LABEL_3:
  v10 = MEMORY[0x1E0DEE9D8];
  result = sub_183306C30(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = v10;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x186DB230C](v5, v2);
      }
      else
      {
        v7 = *(_QWORD *)(v2 + 8 * v5 + 32);
        swift_unknownObjectRetain();
      }
      v9 = *(_QWORD *)(v10 + 16);
      v8 = *(_QWORD *)(v10 + 24);
      if (v9 >= v8 >> 1)
        sub_183306C30(v8 > 1, v9 + 1, 1);
      ++v5;
      *(_QWORD *)(v10 + 16) = v9 + 1;
      *(_QWORD *)(v10 + 8 * v9 + 32) = v7;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return v6;
  }
  __break(1u);
  return result;
}

void NSURLSessionConfiguration.proxyConfigurations.setter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_183B91E9C();
    v3 = 0;
    do
    {
      v4 = v3 + 1;
      swift_unknownObjectRetain();
      sub_183B91E84();
      sub_183B91EA8();
      sub_183B91EB4();
      sub_183B91E90();
      v3 = v4;
    }
    while (v2 != v4);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED50);
  v5 = (id)sub_183B91920();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setProxyConfigurations_, v5);

}

void (*NSURLSessionConfiguration.proxyConfigurations.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = NSURLSessionConfiguration.proxyConfigurations.getter();
  return sub_183306B60;
}

void sub_183306B60(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
  {
    v2 = swift_bridgeObjectRetain();
    NSURLSessionConfiguration.proxyConfigurations.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    NSURLSessionConfiguration.proxyConfigurations.setter(*a1);
  }
}

uint64_t sub_183306BA4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_183306C4C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_183306BC0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_183306DD4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_183306BDC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_183306FB4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_183306BF8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_18330711C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_183306C14(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_183307278(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_183306C30(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_183307400(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_183306C4C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEE28);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCBC0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183306DD4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD84138);
  v10 = *(_QWORD *)(type metadata accessor for NWEndpoint() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for NWEndpoint() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183306FB4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC398);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_18330711C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEE20);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183307278(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC390);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183307400(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEDA8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183307568(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  nw_parameters_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  unint64_t v14;
  uint64_t v15;
  nw_protocol_stack_t *v16;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  nw_protocol_stack_t *v19;
  os_unfair_lock_s *v20;
  uint64_t v22;

  type metadata accessor for NWParameters();
  v6 = swift_allocObject();
  v7 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v8 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v8;
  *(_DWORD *)(v8 + 24) = 0;
  v9 = (os_unfair_lock_s *)(v8 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  v10 = (void **)(v8 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
  nw_parameters_set_data_mode(*v10, a3);
  os_unfair_lock_unlock(v9);
  os_unfair_lock_lock(v9);
  sub_1831EF71C(v10, (uint64_t (*)(_QWORD))nw_parameters_copy_default_protocol_stack, (void (*)(void))type metadata accessor for NWParameters.ProtocolStack, (uint64_t *)&unk_1EDCDB630, &v22);
  os_unfair_lock_unlock(v9);
  v11 = v22;
  v12 = *(_QWORD *)(v22 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 24));
  nw_protocol_stack_set_transport_protocol(*(nw_protocol_stack_t *)(v12 + 16), *(nw_protocol_options_t *)(a2 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 24));
  swift_retain();
  swift_release_n();
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDB270);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183BA1510;
    *(_QWORD *)(inited + 32) = a1;
    v22 = inited;
    sub_183B91944();
    v14 = v22;
    v15 = *(_QWORD *)(v11 + 16);
    v16 = (nw_protocol_stack_t *)(v15 + 16);
    v17 = (os_unfair_lock_s *)(v15 + 24);
    swift_retain_n();
    os_unfair_lock_lock(v17);
    sub_1831EF7BC(v16, v14);
    os_unfair_lock_unlock(v17);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = *(os_unfair_lock_s **)(v11 + 16);
    v19 = (nw_protocol_stack_t *)&v18[4];
    v20 = v18 + 6;
    os_unfair_lock_lock(v18 + 6);
    sub_1831EF7BC(v19, MEMORY[0x1E0DEE9D8]);
    os_unfair_lock_unlock(v20);
  }
  swift_release();
  swift_release();
  swift_release();
  return v6;
}

uint64_t _s7Network12NWParametersC4quicAcA14NWProtocolQUICC7OptionsC_tcfC_0(uint64_t a1)
{
  uint64_t v2;
  nw_parameters_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  type metadata accessor for NWParameters();
  v2 = swift_allocObject();
  v3 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v4 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v4;
  *(_DWORD *)(v4 + 24) = 0;
  v5 = (os_unfair_lock_s *)(v4 + 24);
  *(_QWORD *)(v4 + 16) = v3;
  v6 = (_QWORD *)(v4 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  sub_1831EF71C(v6, (uint64_t (*)(_QWORD))nw_parameters_copy_default_protocol_stack, (void (*)(void))type metadata accessor for NWParameters.ProtocolStack, (uint64_t *)&unk_1EDCDB630, &v10);
  os_unfair_lock_unlock(v5);
  v7 = *(_QWORD *)(v10 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  nw_protocol_stack_set_transport_protocol(*(nw_protocol_stack_t *)(v7 + 16), *(nw_protocol_options_t *)(a1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  swift_retain();
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
  nw_parameters_set_attach_protocol_listener(*(void **)(v8 + 16), 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v2;
}

uint64_t sub_1833078E4()
{
  return swift_deallocObject();
}

uint64_t sub_1833078F4(uint64_t a1)
{
  uint64_t v1;

  return sub_183305B18(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_18330790C()
{
  return swift_deallocObject();
}

uint64_t sub_18330791C()
{
  return swift_deallocObject();
}

uint64_t sub_18330792C()
{
  return swift_deallocObject();
}

uint64_t sub_18330793C()
{
  return swift_deallocObject();
}

uint64_t sub_18330794C()
{
  return swift_deallocObject();
}

uint64_t sub_18330795C(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(uint64_t, uint64_t))
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = a2(*v3);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = a1 + 40;
    do
    {
      v9 = sub_183B91758() + 32;
      v10 = swift_unknownObjectRetain();
      a3(v10, v9);
      swift_unknownObjectRelease();
      result = swift_release();
      v8 += 16;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1833079E0()
{
  return swift_deallocObject();
}

uint64_t sub_1833079F0()
{
  return swift_deallocObject();
}

uint64_t sub_183307A00(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  const uint8_t *v12;
  BOOL v13;
  int64_t v14;
  size_t v15;
  uint64_t v16;
  NSObject *oblivious_http;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = sub_183B912D8();
  v12 = (const uint8_t *)result;
  if (result)
  {
    result = sub_183B912FC();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    v12 += a1 - result;
  }
  v13 = __OFSUB__(a2, a1);
  v14 = a2 - a1;
  if (v13)
  {
    __break(1u);
    goto LABEL_15;
  }
  result = sub_183B912F0();
  if (!v12)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  if (result >= v14)
    v15 = v14;
  else
    v15 = result;
  v16 = sub_183B91758();
  oblivious_http = nw_proxy_config_create_oblivious_http(a4, (const char *)(v16 + 32), v12, v15);
  swift_release();
  v18 = *(_QWORD *)(a7 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    v19 = a7 + 40;
    do
    {
      v20 = sub_183B91758();
      nw_proxy_config_add_match_domain(oblivious_http, (const char *)(v20 + 32));
      swift_release();
      v19 += 16;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  return (uint64_t)oblivious_http;
}

unint64_t sub_183307B1C()
{
  unint64_t result;

  result = qword_1EDCDED58;
  if (!qword_1EDCDED58)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWParameters.ServiceClass, &type metadata for NWParameters.ServiceClass);
    atomic_store(result, (unint64_t *)&qword_1EDCDED58);
  }
  return result;
}

unint64_t sub_183307B64()
{
  unint64_t result;

  result = qword_1EDCDED60;
  if (!qword_1EDCDED60)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWParameters.MultipathServiceType, &type metadata for NWParameters.MultipathServiceType);
    atomic_store(result, (unint64_t *)&qword_1EDCDED60);
  }
  return result;
}

unint64_t sub_183307BAC()
{
  unint64_t result;

  result = qword_1EDCDED68;
  if (!qword_1EDCDED68)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWParameters.ExpiredDNSBehavior, &type metadata for NWParameters.ExpiredDNSBehavior);
    atomic_store(result, (unint64_t *)&qword_1EDCDED68);
  }
  return result;
}

unint64_t sub_183307BF4()
{
  unint64_t result;

  result = qword_1EDCDED70;
  if (!qword_1EDCDED70)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWParameters.Attribution, &type metadata for NWParameters.Attribution);
    atomic_store(result, (unint64_t *)&qword_1EDCDED70);
  }
  return result;
}

void sub_183307C38(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1833016B0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183300F64, a2);
}

void sub_183307C58(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183301108, a2);
}

void sub_183307C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_1833092E4);
}

void sub_183307C90(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183301250, a2);
}

void sub_183307CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_1833092CC);
}

void sub_183307CC8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1833016B0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_18330146C, a2);
}

uint64_t sub_183307CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183301A44(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_1833092B4);
}

void sub_183307D00(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1833016B0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_1833017AC, a2);
}

uint64_t sub_183307D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183301A44(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_18330929C);
}

void sub_183307D38(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1833016B0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183301BF0, a2);
}

uint64_t sub_183307D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183301A44(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_183309284);
}

void sub_183307D70(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183302084, a2);
}

void sub_183307D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_183309278);
}

void sub_183307DA8(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183302134, a2);
}

void sub_183307DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_18330926C);
}

void sub_183307DE0(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_1833021E4, a2);
}

void sub_183307DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_183309260);
}

void sub_183307E20(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183302744, a2);
}

void sub_183307E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_18330923C);
}

void sub_183307E58(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_1833027F4, a2);
}

void sub_183307E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_183309230);
}

void sub_183307E90(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_1833028A4, a2);
}

void sub_183307EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_183309224);
}

void sub_183307EC8(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183302954, a2);
}

void sub_183307EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_183309218);
}

void sub_183307F00(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183302A84, a2);
}

void sub_183307F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_18330920C);
}

void sub_183307F38(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183302B44, a2);
}

void sub_183307F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_183309200);
}

void sub_183307F70(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183302C00, a2);
}

void sub_183307F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_1833091F4);
}

void sub_183307FA8(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183302E1C, a2);
}

void sub_183307FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_1833091E8);
}

uint64_t sub_183307FE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_183303578();
  *a1 = result;
  return result;
}

uint64_t sub_183308014@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_18330367C();
  *a1 = result;
  return result;
}

void sub_183308048(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_18330440C(a1, (uint64_t (*)(_QWORD))nw_parameters_copy_required_netagent_domains, (uint64_t (*)(uint64_t))nw_parameters_copy_required_netagent_types, a2);
}

uint64_t sub_18330806C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_133Tm(a1, a2, a3, a4, NWParameters.requiredNetworkAgents.setter);
}

void sub_183308078(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_18330440C(a1, (uint64_t (*)(_QWORD))nw_parameters_copy_preferred_netagent_domains, (uint64_t (*)(uint64_t))nw_parameters_copy_preferred_netagent_types, a2);
}

uint64_t sub_18330809C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_133Tm(a1, a2, a3, a4, NWParameters.preferredNetworkAgents.setter);
}

void sub_1833080A8(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_183302CF8(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183304B70, a2);
}

void sub_1833080C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_183309194);
}

void sub_1833080E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_183302D6C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_18330917C);
}

double sub_183308100@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_183304FC4(a1, (uint64_t (*)(_QWORD))nw_parameters_get_account_id, a2);
}

uint64_t sub_18330811C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18330503C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_18330915C);
}

double sub_183308138@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_183304FC4(a1, (uint64_t (*)(_QWORD))nw_parameters_get_effective_bundle_id, a2);
}

uint64_t sub_183308154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18330503C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_18330913C);
}

void sub_183308170(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1833016B0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_183305464, a2);
}

BOOL sub_183308190@<W0>(nw_proxy_config_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_proxy_config_get_failover_allowed(*a1);
  *a2 = result;
  return result;
}

void sub_1833081B8(BOOL *a1, nw_proxy_config_t *a2)
{
  nw_proxy_config_set_failover_allowed(*a2, *a1);
}

uint64_t sub_1833081C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ProxyConfiguration.matchDomains.getter();
  *a1 = result;
  return result;
}

uint64_t sub_183308200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_149Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_proxy_config_clear_match_domains, (void (*)(uint64_t, uint64_t))nw_proxy_config_add_match_domain);
}

uint64_t sub_183308214@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ProxyConfiguration.excludedDomains.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18330824C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_149Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_proxy_config_clear_excluded_domains, (void (*)(uint64_t, uint64_t))nw_proxy_config_add_excluded_domain);
}

uint64_t keypath_set_149Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = swift_bridgeObjectRetain();
  sub_18330795C(v8, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1833082A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = NSURLSessionConfiguration.proxyConfigurations.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1833082D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_133Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))NSURLSessionConfiguration.proxyConfigurations.setter);
}

uint64_t keypath_set_133Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = swift_bridgeObjectRetain();
  return a5(v6);
}

uint64_t method lookup function for NWParameters()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWParameters.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t storeEnumTagSinglePayload for NWParameters.ServiceClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_183308368 + 4 * byte_183BA5E45[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_18330839C + 4 * byte_183BA5E40[v4]))();
}

uint64_t sub_18330839C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833083A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1833083ACLL);
  return result;
}

uint64_t sub_1833083B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1833083C0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1833083C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833083CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWParameters.ServiceClass()
{
  return &type metadata for NWParameters.ServiceClass;
}

ValueMetadata *type metadata accessor for NWParameters.MultipathServiceType()
{
  return &type metadata for NWParameters.MultipathServiceType;
}

uint64_t _s7Network12NWParametersC20MultipathServiceTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_18330844C + 4 * byte_183BA5E4F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_183308480 + 4 * byte_183BA5E4A[v4]))();
}

uint64_t sub_183308480(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183308488(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x183308490);
  return result;
}

uint64_t sub_18330849C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1833084A4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1833084A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833084B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWParameters.ExpiredDNSBehavior()
{
  return &type metadata for NWParameters.ExpiredDNSBehavior;
}

uint64_t method lookup function for NWParameters.ProtocolStack()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.transportProtocol.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.transportProtocol.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.transportProtocol.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.internetProtocol.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.internetProtocol.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.internetProtocol.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t type metadata accessor for NWParameters.PrivacyContext()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWParameters.PrivacyContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.__allocating_init(description:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.flushCache()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.disableLogging()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.requireEncryptedNameResolution(_:fallbackResolver:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.proxyConfigurations.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.proxyConfigurations.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.proxyConfigurations.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t *initializeBufferWithCopyOfBuffer for NWParameters.PrivacyContext.ResolverConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      type metadata accessor for NWEndpoint();
      v9 = (char *)&loc_1833086B0 + 4 * byte_183BA5E54[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v6 = sub_183B913A4();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED88);
    *(uint64_t *)((char *)a1 + *(int *)(v7 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 48));
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for NWParameters.PrivacyContext.ResolverConfiguration(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = sub_183B913A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
    v3 = &qword_1EDCDED88;
  }
  else
  {
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_183058BF0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 48) != 1)
          goto LABEL_8;
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        v4 = sub_183B913A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
        break;
      case 4u:
LABEL_8:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
    v3 = &qword_1EDCDED80;
  }
  __swift_instantiateConcreteTypeFromMangledName(v3);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NWParameters.PrivacyContext.ResolverConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;

  if (swift_getEnumCaseMultiPayload() != 1)
  {
    type metadata accessor for NWEndpoint();
    v6 = (char *)&loc_1833089B0 + 4 * byte_183BA5E5E[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v4 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED88);
  *(_QWORD *)(a1 + *(int *)(v5 + 48)) = *(_QWORD *)(a2 + *(int *)(v5 + 48));
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for NWParameters.PrivacyContext.ResolverConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;

  if (a1 != a2)
  {
    sub_183058AE0(a1, (uint64_t (*)(_QWORD))type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      type metadata accessor for NWEndpoint();
      v6 = (char *)&loc_183308BC0 + 4 * byte_183BA5E63[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v4 = sub_183B913A4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDED88);
    *(_QWORD *)(a1 + *(int *)(v5 + 48)) = *(_QWORD *)(a2 + *(int *)(v5 + 48));
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration()
{
  uint64_t result;

  result = qword_1EDCDED90;
  if (!qword_1EDCDED90)
    return swift_getSingletonMetadata();
  return result;
}

char *initializeWithTake for NWParameters.PrivacyContext.ResolverConfiguration(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_183B913A4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
    v5 = &qword_1EDCDED88;
  }
  else
  {
    v6 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v7 = sub_183B913A4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v5 = &qword_1EDCDED80;
  }
  v8 = __swift_instantiateConcreteTypeFromMangledName(v5);
  *(_QWORD *)&a1[*(int *)(v8 + 48)] = *(_QWORD *)&a2[*(int *)(v8 + 48)];
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for NWParameters.PrivacyContext.ResolverConfiguration(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_183058AE0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_183B913A4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
      v5 = &qword_1EDCDED88;
    }
    else
    {
      v6 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v7 = sub_183B913A4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      v5 = &qword_1EDCDED80;
    }
    v8 = __swift_instantiateConcreteTypeFromMangledName(v5);
    *(_QWORD *)&a1[*(int *)(v8 + 48)] = *(_QWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_183308F90()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  char *v5;
  uint64_t *v6;

  result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v5 = &v4;
    result = sub_183B913A4();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v6 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NWParameters.Attribution(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_183309090 + 4 * byte_183BA5E6D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1833090C4 + 4 * byte_183BA5E68[v4]))();
}

uint64_t sub_1833090C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833090CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1833090D4);
  return result;
}

uint64_t sub_1833090E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1833090E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1833090EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833090F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWParameters.Attribution()
{
  return &type metadata for NWParameters.Attribution;
}

ValueMetadata *type metadata accessor for ProxyConfiguration()
{
  return &type metadata for ProxyConfiguration;
}

ValueMetadata *type metadata accessor for ProxyConfiguration.RelayHop()
{
  return &type metadata for ProxyConfiguration.RelayHop;
}

void sub_183309130(void **a1)
{
  uint64_t v1;

  nw_parameters_set_application_id(*a1, *(void **)(v1 + 16));
}

uint64_t sub_18330913C(uint64_t *a1)
{
  uint64_t v1;

  return sub_183305134(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(uint64_t, uint64_t))nw_parameters_set_source_application_by_bundle_id);
}

uint64_t sub_18330915C(uint64_t *a1)
{
  uint64_t v1;

  return sub_183305134(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(uint64_t, uint64_t))nw_parameters_set_account_id);
}

void sub_18330917C(NSObject **a1)
{
  uint64_t v1;
  NSObject *v2;
  nw_parameters_attribution_t v3;

  v2 = *a1;
  if (*(_BYTE *)(v1 + 16))
    v3 = nw_parameters_attribution_user;
  else
    v3 = nw_parameters_attribution_developer;
  nw_parameters_set_attribution(v2, v3);
}

void sub_183309194(void **a1)
{
  uint64_t v1;

  nw_parameters_set_is_known_tracker(*a1, *(unsigned __int8 *)(v1 + 16));
}

void sub_1833091A0(NSObject **a1)
{
  uint64_t v1;

  sub_183304134(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1833091B8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

void sub_1833091C4(nw_protocol_stack_t *a1)
{
  uint64_t v1;

  nw_protocol_stack_set_transport_protocol(*a1, *(nw_protocol_options_t *)(v1 + 16));
}

uint64_t sub_1833091D0(nw_protocol_stack_t *a1)
{
  uint64_t v1;

  return sub_1831EF7BC(a1, *(_QWORD *)(v1 + 16));
}

void sub_1833091E8(nw_parameters_t *a1)
{
  uint64_t v1;

  nw_parameters_set_expired_dns_behavior(*a1, (nw_parameters_expired_dns_behavior_t)*(unsigned __int8 *)(v1 + 16));
}

void sub_1833091F4(nw_parameters_t *a1)
{
  uint64_t v1;

  nw_parameters_set_fast_open_enabled(*a1, *(_BYTE *)(v1 + 16));
}

void sub_183309200(nw_parameters_t *a1)
{
  uint64_t v1;

  nw_parameters_set_multipath_service(*a1, (nw_multipath_service_t)*(unsigned __int8 *)(v1 + 16));
}

void sub_18330920C(nw_parameters_t *a1)
{
  uint64_t v1;

  nw_parameters_set_service_class(*a1, (nw_service_class_t)*(unsigned __int8 *)(v1 + 16));
}

void sub_183309218(nw_parameters_t *a1)
{
  uint64_t v1;

  nw_parameters_set_requires_dnssec_validation(*a1, *(_BYTE *)(v1 + 16));
}

void sub_183309224(nw_parameters_t *a1)
{
  uint64_t v1;

  nw_parameters_set_include_peer_to_peer(*a1, *(_BYTE *)(v1 + 16));
}

void sub_183309230(nw_parameters_t *a1)
{
  uint64_t v1;

  nw_parameters_set_local_only(*a1, *(_BYTE *)(v1 + 16));
}

void sub_18330923C(nw_parameters_t *a1)
{
  uint64_t v1;

  nw_parameters_set_reuse_local_address(*a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_183309248(NSObject **a1)
{
  uint64_t v1;

  return sub_18330245C(a1, *(_QWORD *)(v1 + 16));
}

void sub_183309260(nw_parameters_t *a1)
{
  uint64_t v1;

  nw_parameters_set_prefer_no_proxy(*a1, *(_BYTE *)(v1 + 16));
}

void sub_18330926C(nw_parameters_t *a1)
{
  uint64_t v1;

  nw_parameters_set_prohibit_constrained(*a1, *(_BYTE *)(v1 + 16));
}

void sub_183309278(nw_parameters_t *a1)
{
  uint64_t v1;

  nw_parameters_set_prohibit_expensive(*a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_183309284(void **a1)
{
  uint64_t v1;

  return sub_183301B30(a1, *(_QWORD *)(v1 + 16));
}

void sub_18330929C(nw_parameters_t *a1)
{
  uint64_t v1;

  sub_183301730(a1, *(_QWORD *)(v1 + 16));
}

void sub_1833092B4(nw_parameters_t *a1)
{
  uint64_t v1;

  sub_1833013E8(a1, *(_QWORD *)(v1 + 16));
}

void sub_1833092CC(void **a1)
{
  uint64_t v1;

  nw_parameters_set_required_interface_subtype(*a1, dword_183BA62C0[*(char *)(v1 + 16)]);
}

void sub_1833092E4(nw_parameters_t *a1)
{
  uint64_t v1;

  nw_parameters_set_required_interface_type(*a1, (nw_interface_type_t)*(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1833092F0(NSObject **a1)
{
  uint64_t v1;

  return sub_183300F10(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_183309308()
{
  return swift_deallocObject();
}

uint64_t sub_183309318(int a1, void *a2)
{
  uint64_t v2;

  return sub_183301D80(a1, a2, *(char ***)(v2 + 16));
}

uint64_t sub_183309320()
{
  return swift_deallocObject();
}

uint64_t sub_183309330()
{
  return swift_deallocObject();
}

uint64_t sub_183309340(unsigned int a1)
{
  uint64_t v1;

  return sub_183301900(a1, *(char ***)(v1 + 16));
}

uint64_t sub_183309348()
{
  return swift_deallocObject();
}

uint64_t sub_183309358()
{
  return swift_deallocObject();
}

uint64_t sub_183309368()
{
  return swift_deallocObject();
}

uint64_t sub_183309378()
{
  return swift_deallocObject();
}

uint64_t sub_183309388(uint64_t a1)
{
  uint64_t v1;

  return sub_1833031E8(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_183309390()
{
  return swift_deallocObject();
}

uint64_t *sub_1833093F8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_183B914AC();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (char *)a2 + v9;
    v12 = *(uint64_t *)((char *)a2 + v9 + 8);
    *v10 = *(uint64_t *)((char *)a2 + v9);
    v10[1] = v12;
    v13 = *(int *)(type metadata accessor for NWActorID() + 20);
    v14 = (char *)v10 + v13;
    v15 = &v11[v13];
    swift_bridgeObjectRetain();
    v8((uint64_t *)v14, (uint64_t *)v15, v7);
    v16 = a3[6];
    v17 = a3[7];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_183309504(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v4 = sub_183B914AC();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for NWActorID();
  v5(v6 + *(int *)(v7 + 20), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1833095A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = sub_183B914AC();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = a2 + v8;
  v11 = *(_QWORD *)(a2 + v8 + 8);
  *v9 = *(_QWORD *)(a2 + v8);
  v9[1] = v11;
  v12 = *(int *)(type metadata accessor for NWActorID() + 20);
  v13 = (char *)v9 + v12;
  v14 = v10 + v12;
  swift_bridgeObjectRetain();
  v7((uint64_t)v13, v14, v6);
  v15 = a3[6];
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_183309680(char *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;

  v6 = sub_183B914AC();
  v7 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)(a2 + v8);
  *((_QWORD *)v9 + 1) = *(_QWORD *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = type metadata accessor for NWActorID();
  v7(&v9[*(int *)(v11 + 20)], v10 + *(int *)(v11 + 20), v6);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = (_QWORD *)(a2 + v12);
  *(_QWORD *)v13 = *v14;
  *((_QWORD *)v13 + 1) = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_183309790(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_183B914AC();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v11 = type metadata accessor for NWActorID();
  v7(v9 + *(int *)(v11 + 20), v10 + *(int *)(v11 + 20), v6);
  v12 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

char *sub_183309844(char *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_183B914AC();
  v7 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = a2 + v8;
  v11 = *(_QWORD *)(a2 + v8 + 8);
  *(_QWORD *)v9 = *(_QWORD *)(a2 + v8);
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  v12 = type metadata accessor for NWActorID();
  v7(&v9[*(int *)(v12 + 20)], v10 + *(int *)(v12 + 20), v6);
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *(_QWORD *)v14 = v17;
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_183309924()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183309930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_183B914AC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for NWActorID();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1833099DC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1833099E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_183B914AC();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for NWActorID();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for RemoteCallEnvelope(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1EDCDEE30);
}

uint64_t sub_183309AA4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_183B914AC();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for NWActorID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_183309B40(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEE68);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18330A54C();
  sub_183B9231C();
  LOBYTE(v12) = 0;
  sub_183B914AC();
  sub_183064644(&qword_1EDCDE0D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
  sub_183B92064();
  if (!v2)
  {
    v9 = type metadata accessor for RemoteCallEnvelope(0);
    LOBYTE(v12) = 1;
    type metadata accessor for NWActorID();
    sub_183064644(&qword_1EDCDD870, (uint64_t (*)(uint64_t))type metadata accessor for NWActorID, (uint64_t)&protocol conformance descriptor for NWActorID);
    sub_183B92064();
    LOBYTE(v12) = 2;
    sub_183B92058();
    v12 = *(_QWORD *)(v3 + *(int *)(v9 + 28));
    HIBYTE(v11) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC378);
    sub_18330A5D4(&qword_1EDCDEE70, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_183B92064();
    v12 = *(_QWORD *)(v3 + *(int *)(v9 + 32));
    HIBYTE(v11) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEE58);
    sub_18330A634(&qword_1EDCDEE78, (uint64_t (*)(void))sub_183280518, MEMORY[0x1E0DEAF10]);
    sub_183B92064();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_183309DC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;

  v21 = a2;
  v22 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v22);
  v23 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_183B914AC();
  v4 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v25 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEE40);
  v6 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for RemoteCallEnvelope(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18330A54C();
  v26 = v8;
  v12 = (uint64_t)v28;
  sub_183B922EC();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  v13 = (uint64_t)v23;
  v20 = v6;
  v28 = a1;
  LOBYTE(v30) = 0;
  sub_183064644(&qword_1EDCDE0E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v14 = v24;
  v15 = v25;
  sub_183B92010();
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v11, v15, v14);
  LOBYTE(v30) = 1;
  sub_183064644(&qword_1EDCDD860, (uint64_t (*)(uint64_t))type metadata accessor for NWActorID, (uint64_t)&protocol conformance descriptor for NWActorID);
  sub_183B92010();
  sub_183058EC4(v13, (uint64_t)&v11[v9[5]], (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  LOBYTE(v30) = 2;
  v16 = sub_183B92004();
  v17 = (uint64_t *)&v11[v9[6]];
  *v17 = v16;
  v17[1] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC378);
  v29 = 3;
  sub_18330A5D4(&qword_1EDCDEE50, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
  sub_183B92010();
  *(_QWORD *)&v11[v9[7]] = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEE58);
  v29 = 4;
  sub_18330A634(&qword_1EDCDEE60, (uint64_t (*)(void))sub_183280298, MEMORY[0x1E0DEAF40]);
  sub_183B92010();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v27);
  *(_QWORD *)&v11[v9[8]] = v30;
  sub_18330A590((uint64_t)v11, v21);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v28);
  return sub_183058AE0((uint64_t)v11, type metadata accessor for RemoteCallEnvelope);
}

uint64_t sub_18330A244@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v15 = a2;
  v17 = sub_183B914AC();
  v14 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v16 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEEA8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CancelRemoteCall(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18330AF04();
  sub_183B922EC();
  if (!v2)
  {
    sub_183064644(&qword_1EDCDE0E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    sub_183B92010();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v16, v17);
    sub_183058EC4((uint64_t)v11, v15, type metadata accessor for CancelRemoteCall);
  }
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
}

uint64_t sub_18330A410()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18330A43C + 4 * byte_183BA62E0[*v0]))(0x44496C6C6163, 0xE600000000000000);
}

uint64_t sub_18330A43C()
{
  return 0x6E65697069636572;
}

unint64_t sub_18330A458()
{
  return 0xD000000000000010;
}

uint64_t sub_18330A474()
{
  return 0x53636972656E6567;
}

uint64_t sub_18330A494()
{
  return 1936159329;
}

uint64_t sub_18330A4A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18330ACE4(a1, a2);
  *a3 = result;
  return result;
}

void sub_18330A4C8(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_18330A4D4()
{
  sub_18330A54C();
  return sub_183B92334();
}

uint64_t sub_18330A4FC()
{
  sub_18330A54C();
  return sub_183B92340();
}

uint64_t sub_18330A524@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_183309DC8(a1, a2);
}

uint64_t sub_18330A538(_QWORD *a1)
{
  return sub_183309B40(a1);
}

unint64_t sub_18330A54C()
{
  unint64_t result;

  result = qword_1EDCDEE48;
  if (!qword_1EDCDEE48)
  {
    result = MEMORY[0x186DB5558](&unk_183BA64C4, &type metadata for RemoteCallEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEE48);
  }
  return result;
}

uint64_t sub_18330A590(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RemoteCallEnvelope(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18330A5D4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDC378);
    v8 = a2;
    result = MEMORY[0x186DB5558](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18330A634(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDEE58);
    v8 = a2();
    result = MEMORY[0x186DB5558](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18330A69C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B914AC();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_18330A6D8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_183B914AC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_18330A70C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_18330A750(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_18330A794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_18330A7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_18330A81C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18330A828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B914AC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_18330A864()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18330A870(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_183B914AC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CancelRemoteCall(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1EDCDEE80);
}

uint64_t sub_18330A8C4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_183B914AC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RemoteCallEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_18330A978 + 4 * byte_183BA62EA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_18330A9AC + 4 * byte_183BA62E5[v4]))();
}

uint64_t sub_18330A9AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18330A9B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18330A9BCLL);
  return result;
}

uint64_t sub_18330A9C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18330A9D0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_18330A9D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18330A9DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteCallEnvelope.CodingKeys()
{
  return &type metadata for RemoteCallEnvelope.CodingKeys;
}

unint64_t sub_18330A9FC()
{
  unint64_t result;

  result = qword_1EDCDEE90;
  if (!qword_1EDCDEE90)
  {
    result = MEMORY[0x186DB5558](&unk_183BA643C, &type metadata for RemoteCallEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEE90);
  }
  return result;
}

uint64_t sub_18330AA40()
{
  return 0x44496C6C6163;
}

uint64_t sub_18330AA54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x44496C6C6163 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_183B920F4();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_18330AAE0()
{
  sub_18330AF04();
  return sub_183B92334();
}

uint64_t sub_18330AB08()
{
  sub_18330AF04();
  return sub_183B92340();
}

uint64_t sub_18330AB30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_18330A244(a1, a2);
}

uint64_t sub_18330AB44(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEEB8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18330AF04();
  sub_183B9231C();
  sub_183B914AC();
  sub_183064644(&qword_1EDCDE0D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
  sub_183B92064();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_18330AC58()
{
  unint64_t result;

  result = qword_1EDCDEE98;
  if (!qword_1EDCDEE98)
  {
    result = MEMORY[0x186DB5558](&unk_183BA63AC, &type metadata for RemoteCallEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEE98);
  }
  return result;
}

unint64_t sub_18330ACA0()
{
  unint64_t result;

  result = qword_1EDCDEEA0;
  if (!qword_1EDCDEEA0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA63D4, &type metadata for RemoteCallEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEEA0);
  }
  return result;
}

uint64_t sub_18330ACE4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x44496C6C6163 && a2 == 0xE600000000000000;
  if (v2 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E65697069636572 && a2 == 0xE900000000000074 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000183C72CA0 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x53636972656E6567 && a2 == 0xEB00000000736275 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1936159329 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_183B920F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t sub_18330AF04()
{
  unint64_t result;

  result = qword_1EDCDEEB0;
  if (!qword_1EDCDEEB0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA65CC, &type metadata for CancelRemoteCall.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEEB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CancelRemoteCall.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18330AF88 + 4 * byte_183BA62EF[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18330AFA8 + 4 * byte_183BA62F4[v4]))();
}

_BYTE *sub_18330AF88(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18330AFA8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18330AFB0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18330AFB8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18330AFC0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18330AFC8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CancelRemoteCall.CodingKeys()
{
  return &type metadata for CancelRemoteCall.CodingKeys;
}

unint64_t sub_18330AFE8()
{
  unint64_t result;

  result = qword_1EDCDEEC0;
  if (!qword_1EDCDEEC0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA65A4, &type metadata for CancelRemoteCall.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEEC0);
  }
  return result;
}

unint64_t sub_18330B030()
{
  unint64_t result;

  result = qword_1EDCDEEC8;
  if (!qword_1EDCDEEC8)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6514, &type metadata for CancelRemoteCall.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEEC8);
  }
  return result;
}

unint64_t sub_18330B078()
{
  unint64_t result;

  result = qword_1EDCDEED0;
  if (!qword_1EDCDEED0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA653C, &type metadata for CancelRemoteCall.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEED0);
  }
  return result;
}

uint64_t sub_18330B0BC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  char *v29;
  uint8_t *v30;
  uint64_t v31;
  void (*v32)(char *, uint8_t *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEF80);
  v38 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCEA0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v40 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v8 = a1;
    if (qword_1EDCDC608 != -1)
      swift_once();
    v9 = sub_183B915CC();
    __swift_project_value_buffer(v9, (uint64_t)qword_1EDCDEED8);
    v10 = a1;
    v11 = a1;
    v12 = sub_183B915B4();
    v13 = sub_183B91C80();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v14 = 138412290;
      v41 = v14 + 4;
      v16 = a1;
      v17 = _swift_stdlib_bridgeErrorToNSError();
      v43 = v17;
      sub_183B91D1C();
      *v15 = v17;

      _os_log_impl(&dword_182FBE000, v12, v13, "Marking file as failed: %@", v14, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7640);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v15, -1, -1);
      MEMORY[0x186DB563C](v14, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (qword_1EDCDC608 != -1)
      swift_once();
    v19 = sub_183B915CC();
    __swift_project_value_buffer(v19, (uint64_t)qword_1EDCDEED8);
    v20 = sub_183B915B4();
    v21 = sub_183B91C80();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_182FBE000, v20, v21, "Marking file as completed", v22, 2u);
      MEMORY[0x186DB563C](v22, -1, -1);
    }

  }
  v23 = v42;
  MEMORY[0x1E0C80A78](v18);
  *(&v37 - 2) = (uint64_t)a1;
  *(&v37 - 1) = v23;
  v25 = v24 + 4;
  os_unfair_lock_lock(v24 + 4);
  sub_183273D38(v26, (uint64_t (*)(void))sub_18330DB4C);
  os_unfair_lock_unlock(v25);
  os_unfair_lock_lock(v25);
  sub_18330DB64(&v43);
  v27 = (uint8_t *)v43;
  os_unfair_lock_unlock(v25);
  v41 = v27;
  v28 = *((_QWORD *)v27 + 2);
  if (v28)
  {
    v29 = v40;
    v30 = &v41[(*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)];
    v31 = v5;
    v42 = *(_QWORD *)(v6 + 72);
    v32 = *(void (**)(char *, uint8_t *, uint64_t))(v6 + 16);
    v33 = v38;
    v34 = v39;
    do
    {
      v32(v29, v30, v31);
      LOBYTE(v43) = 1;
      sub_183B91B3C();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v34);
      v43 = (uint64_t)a1;
      v35 = a1;
      sub_183B91B48();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v29, v31);
      v30 += v42;
      --v28;
    }
    while (v28);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_18330B4E4(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint8_t *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  char v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEF80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCEA0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  if (qword_1EDCDC608 != -1)
    swift_once();
  v28 = v12;
  v13 = sub_183B915CC();
  __swift_project_value_buffer(v13, (uint64_t)qword_1EDCDEED8);
  v14 = sub_183B915B4();
  v15 = sub_183B91C80();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = v2;
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_182FBE000, v14, v15, "Updating file state", v17, 2u);
    v18 = v17;
    v2 = v16;
    MEMORY[0x186DB563C](v18, -1, -1);
  }

  v19 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 16) + 16);
  os_unfair_lock_lock(v19);
  sub_18330DB64(&v32);
  v20 = v32;
  os_unfair_lock_unlock(v19);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v22 = *(unsigned __int8 *)(v9 + 80);
    v27 = v20;
    v23 = v20 + ((v22 + 32) & ~v22);
    v29 = *(_QWORD *)(v9 + 72);
    v30 = v4;
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v25 = v28;
    do
    {
      v24(v11, v23, v8);
      v31 = v25;
      sub_183B91B3C();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v30);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v23 += v29;
      --v21;
    }
    while (v21);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_18330B740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_183B915CC();
  __swift_allocate_value_buffer(v0, qword_1EDCDEED8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EDCDEED8);
  if (qword_1EDCDC620 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_1EDCF2A90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_18330B7D0()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEF88);
  swift_allocObject();
  result = sub_183B9234C();
  qword_1EDCDEEF0 = result;
  return result;
}

uint64_t static NWFile1.$delegate.getter()
{
  if (qword_1EDCDC610 != -1)
    swift_once();
  return swift_retain();
}

uint64_t static NWFile1.delegate.getter()
{
  if (qword_1EDCDC610 != -1)
    swift_once();
  return sub_183B92358();
}

uint64_t NWFile1.fileURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  v4 = sub_183B913A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NWFile1.transferState.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  int v15;
  _BYTE v17[16];
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned __int8 v21;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEEF8);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCEA0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v11 = &v17[-v10];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DF0A50], v1);
  sub_183B91B0C();
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v11, v9, v5);
  v12 = *(os_unfair_lock_s **)(v0 + 16);
  v18 = v0;
  v19 = v11;
  v13 = v12 + 4;
  os_unfair_lock_lock(v12 + 4);
  sub_18330BC34((uint64_t)&v20);
  v14 = v20;
  v15 = v21;
  os_unfair_lock_unlock(v13);
  if (v15 != 255)
  {
    if ((v15 & 1) != 0)
      v20 = v14;
    else
      v20 = 0;
    sub_183B91B48();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
}

id sub_18330BAB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v17;
  unint64_t *v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCEA0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned __int8 *)(a1 + 40);
  if (v10 == 255)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    swift_beginAccess();
    v11 = *(_QWORD *)(a1 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a1 + 24) = v11;
    v18 = (unint64_t *)(a1 + 24);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v11 = sub_18324354C(0, *(_QWORD *)(v11 + 16) + 1, 1, v11);
      *(_QWORD *)(a1 + 24) = v11;
    }
    v14 = *(_QWORD *)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
    if (v14 >= v13 >> 1)
    {
      v11 = sub_18324354C(v13 > 1, v14 + 1, 1, v11);
      *v18 = v11;
    }
    *(_QWORD *)(v11 + 16) = v14 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v14, v9, v6);
    swift_endAccess();
    LOBYTE(v10) = *(_BYTE *)(a1 + 40);
  }
  v15 = *(void **)(a1 + 32);
  *(_QWORD *)a3 = v15;
  *(_BYTE *)(a3 + 8) = v10;
  return sub_18330DBA8(v15, v10);
}

id sub_18330BC34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_18330BAB0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t NWFile1.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDB1F0);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 40) = -1;
  v5 = v2 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  v6 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a1, v6);
  return v2;
}

uint64_t NWFile1.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDB1F0);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = -1;
  v5 = v1 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  v6 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a1, v6);
  return v1;
}

uint64_t NWFile1.description.getter()
{
  sub_183B913A4();
  sub_18330D290(&qword_1EDCDD210, MEMORY[0x1E0CB0048]);
  sub_183B92088();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  sub_183B917F4();
  return 0x28656C6946574ELL;
}

uint64_t NWFile1.waitUntilComplete()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[3] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEF08);
  v1[4] = v2;
  v1[5] = *(_QWORD *)(v2 - 8);
  v1[6] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEF10);
  v1[7] = v3;
  v1[8] = *(_QWORD *)(v3 - 8);
  v1[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18330BE98()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  unsigned __int8 v12;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(os_unfair_lock_s **)(v1 + 16);
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = sub_18330D19C;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = v2 + 4;
  os_unfair_lock_lock(v2 + 4);
  (*(void (**)(uint64_t *__return_ptr))(v3 + 16))(&v11);
  v5 = v12;
  os_unfair_lock_unlock(v4);
  swift_task_dealloc();
  if (v5 == 255)
  {
    v7 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 32);
    NWFile1.transferState.getter();
    sub_183B91A88();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v9;
    *v9 = v0;
    v9[1] = sub_18330C038;
    return sub_183B91B6C();
  }
  else
  {
    if ((v5 & 1) != 0)
      swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_18330C038()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18330C09C()
{
  uint64_t v0;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 88) == 2)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v2;
    *v2 = v0;
    v2[1] = sub_18330C038;
    return sub_183B91B6C();
  }
}

uint64_t sub_18330C15C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NWFile1.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  NWFile1.init(from:)(a1);
  return v2;
}

uint64_t *NWFile1.init(from:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v2 = v1;
  v51 = *v2;
  v45 = sub_183B913A4();
  v43 = *(_QWORD *)(v45 - 8);
  v4 = MEMORY[0x1E0C80A78](v45);
  v42 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v46 = (char *)&v41 - v6;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEF18);
  v44 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v50 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_183B91F44();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEF20);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for NWFileSerializationContext(0);
  v15 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v49 = (uint64_t *)((char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDB1F0);
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  v18 = MEMORY[0x1E0DEE9D8];
  v2[2] = v17;
  v2[3] = v18;
  v2[4] = 0;
  *((_BYTE *)v2 + 40) = -1;
  v19 = a1[3];
  v52 = a1;
  __swift_project_boxed_opaque_existential_2(a1, v19);
  v20 = sub_183B922E0();
  if (qword_1EDCDC618 != -1)
    swift_once();
  v21 = __swift_project_value_buffer(v8, (uint64_t)qword_1EDCF2A78);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21, v8);
  if (*(_QWORD *)(v20 + 16) && (v22 = sub_1832F67AC((uint64_t)v11), (v23 & 1) != 0))
  {
    sub_18321887C(*(_QWORD *)(v20 + 56) + 32 * v22, (uint64_t)&v53);
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (!*((_QWORD *)&v54 + 1))
  {
    sub_1830620D4((uint64_t)&v53, (uint64_t *)&unk_1EDCD7B90);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v14, 1, 1, v55);
    goto LABEL_13;
  }
  v24 = v55;
  v25 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v14, v25 ^ 1u, 1, v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v24) == 1)
  {
LABEL_13:
    sub_1830620D4((uint64_t)v14, &qword_1EDCDEF20);
    v30 = sub_183B91E54();
    swift_allocError();
    v32 = v31;
    sub_183B91E48();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, *MEMORY[0x1E0DEC458], v30);
    swift_willThrow();
    v27 = v52;
    goto LABEL_14;
  }
  v26 = v49;
  sub_18330D208((uint64_t)v14, (uint64_t)v49);
  v27 = v52;
  __swift_project_boxed_opaque_existential_2(v52, v52[3]);
  sub_18330D24C();
  v28 = v48;
  sub_183B922EC();
  if (v28)
  {
    sub_18324A8F0((uint64_t)v26);
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    sub_18330D1E4((void *)v2[4], *((_BYTE *)v2 + 40));
    swift_deallocPartialClassInstance();
    goto LABEL_15;
  }
  sub_18330D290(&qword_1EDCDEF30, MEMORY[0x1E0CB0038]);
  v29 = v45;
  sub_183B92010();
  __swift_project_boxed_opaque_existential_2(v26, v26[3]);
  v34 = sub_183B91350();
  v36 = v35;
  v37 = (void (*)(char *, char *, uint64_t))((char *)v26 + *(int *)(v55 + 20));
  if (qword_1EDCDC610 != -1)
    swift_once();
  sub_183B92358();
  v38 = v42;
  sub_1832B74EC(v34, v36, v37, (uint64_t)&v53, v42);
  sub_1830620D4((uint64_t)&v53, &qword_1EDCDDF28);
  swift_bridgeObjectRelease();
  v39 = v43;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))((uint64_t)v2 + OBJC_IVAR____TtC7Network7NWFile1_fileURL, v38, v29);
  v40 = v49;
  __swift_project_boxed_opaque_existential_2(v49, v49[3]);
  sub_1832B815C();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v46, v29);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v50, v47);
  sub_18324A8F0((uint64_t)v40);
LABEL_15:
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v27);
  return v2;
}

uint64_t NWFile1.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEF38);
  v27 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v30 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_183B91F44();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEF20);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for NWFileSerializationContext(0);
  v10 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v28 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  v12 = sub_183B922E0();
  if (qword_1EDCDC618 != -1)
    swift_once();
  v13 = __swift_project_value_buffer(v3, (uint64_t)qword_1EDCF2A78);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v13, v3);
  if (*(_QWORD *)(v12 + 16) && (v14 = sub_1832F67AC((uint64_t)v6), (v15 & 1) != 0))
  {
    sub_18321887C(*(_QWORD *)(v12 + 56) + 32 * v14, (uint64_t)&v33);
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (!*((_QWORD *)&v34 + 1))
  {
    sub_1830620D4((uint64_t)&v33, (uint64_t *)&unk_1EDCD7B90);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1, 1, v35);
    goto LABEL_13;
  }
  v16 = v35;
  v17 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v9, v17 ^ 1u, 1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v16) == 1)
  {
LABEL_13:
    sub_1830620D4((uint64_t)v9, &qword_1EDCDEF20);
    v24 = sub_183B91E6C();
    swift_allocError();
    v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEF40);
    v26[3] = MEMORY[0x1E0DEA968];
    *v26 = 0;
    v26[1] = 0xE000000000000000;
    sub_183B91E48();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x1E0DEC4B0], v24);
    return swift_willThrow();
  }
  v18 = v28;
  sub_18330D208((uint64_t)v9, (uint64_t)v28);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18330D24C();
  v19 = v30;
  sub_183B9231C();
  v20 = v31;
  sub_183B913A4();
  sub_18330D290(&qword_1EDCDEF48, MEMORY[0x1E0CB0010]);
  v21 = v32;
  v22 = v29;
  sub_183B92064();
  if (!v22)
  {
    __swift_project_boxed_opaque_existential_2(v18, v18[3]);
    sub_1832B840C(v20);
  }
  (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v21);
  return sub_18324A8F0((uint64_t)v18);
}

void sub_18330CC18(void *a1, uint64_t a2)
{
  void *v2;
  unsigned __int8 v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  if (a1)
  {
    v2 = *(void **)(a2 + 32);
    *(_QWORD *)(a2 + 32) = a1;
    v3 = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a2 + 40) = 1;
    v4 = a1;
    v5 = v2;
    v6 = v3;
  }
  else
  {
    v5 = *(void **)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    v7 = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a2 + 40) = 0;
    v6 = v7;
  }
  sub_18330D1E4(v5, v6);
}

uint64_t sub_18330CC80()
{
  sub_183B92250();
  sub_183B917C4();
  return sub_183B9228C();
}

uint64_t sub_18330CCD0()
{
  return sub_183B917C4();
}

uint64_t sub_18330CCE8()
{
  sub_183B92250();
  sub_183B917C4();
  return sub_183B9228C();
}

uint64_t sub_18330CD34@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_183B91FC8();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_18330CD84(_QWORD *a1@<X8>)
{
  *a1 = 0x4C5255656C6966;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_18330CDA0()
{
  return 0x4C5255656C6966;
}

uint64_t sub_18330CDB8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_183B91FC8();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_18330CE0C()
{
  sub_18330D24C();
  return sub_183B92334();
}

uint64_t sub_18330CE34()
{
  sub_18330D24C();
  return sub_183B92340();
}

uint64_t NWFile1.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_bridgeObjectRelease();
  sub_18330D1E4(*(void **)(v0 + 32), *(_BYTE *)(v0 + 40));
  v1 = v0 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  v2 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t NWFile1.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_bridgeObjectRelease();
  sub_18330D1E4(*(void **)(v0 + 32), *(_BYTE *)(v0 + 40));
  v1 = v0 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  v2 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t *sub_18330CF28@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *result;

  v5 = swift_allocObject();
  result = NWFile1.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_18330CF7C(_QWORD *a1)
{
  return NWFile1.encode(to:)(a1);
}

uint64_t sub_18330CF9C()
{
  sub_183B913A4();
  sub_18330D290(&qword_1EDCDD210, MEMORY[0x1E0CB0048]);
  sub_183B92088();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  sub_183B917F4();
  return 0x28656C6946574ELL;
}

BOOL static NWFile1.TransferPhase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWFile1.TransferPhase.hash(into:)()
{
  return sub_183B9225C();
}

uint64_t NWFile1.TransferPhase.hashValue.getter()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

uint64_t sub_18330D0BC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEF90);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_183B91F44();
  __swift_allocate_value_buffer(v3, qword_1EDCF2A78);
  v4 = __swift_project_value_buffer(v3, (uint64_t)qword_1EDCF2A78);
  sub_183B91F38();
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

id sub_18330D19C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;

  v2 = *(void **)(v1 + 32);
  *(_QWORD *)a1 = v2;
  v3 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_18330DBA8(v2, v3);
}

uint64_t type metadata accessor for NWFileSerializationContext(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1EDCDEF58);
}

void sub_18330D1E4(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_18330D1FC(a1, a2 & 1);
}

void sub_18330D1FC(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t sub_18330D208(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NWFileSerializationContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_18330D24C()
{
  unint64_t result;

  result = qword_1EDCDEF28;
  if (!qword_1EDCDEF28)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6908, &type metadata for NWFile1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEF28);
  }
  return result;
}

uint64_t sub_18330D290(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_183B913A4();
    result = MEMORY[0x186DB5558](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_18330D2D4()
{
  unint64_t result;

  result = qword_1EDCDEF50;
  if (!qword_1EDCDEF50)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWFile1.TransferPhase, &type metadata for NWFile1.TransferPhase);
    atomic_store(result, (unint64_t *)&qword_1EDCDEF50);
  }
  return result;
}

uint64_t sub_18330D318()
{
  return type metadata accessor for NWFile1(0);
}

uint64_t type metadata accessor for NWFile1(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1EDCD7A78);
}

uint64_t sub_18330D334()
{
  uint64_t result;
  unint64_t v1;

  result = sub_183B913A4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for NWFile1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWFile1.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWFile1.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for NWFile1.TransferState()
{
  return &type metadata for NWFile1.TransferState;
}

uint64_t _s7Network7NWFile1C13TransferPhaseOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18330D454 + 4 * byte_183BA6625[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18330D488 + 4 * byte_183BA6620[v4]))();
}

uint64_t sub_18330D488(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18330D490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18330D498);
  return result;
}

uint64_t sub_18330D4A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18330D4ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18330D4B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18330D4B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWFile1.TransferPhase()
{
  return &type metadata for NWFile1.TransferPhase;
}

uint64_t dispatch thunk of NWFileTransferDelegate.receivingDestinationDirectory.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t storeEnumTagSinglePayload for NWFile1.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18330D51C + 4 * byte_183BA662A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18330D53C + 4 * byte_183BA662F[v4]))();
}

_BYTE *sub_18330D51C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18330D53C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18330D544(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18330D54C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18330D554(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18330D55C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NWFile1.CodingKeys()
{
  return &type metadata for NWFile1.CodingKeys;
}

_QWORD *sub_18330D578(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = *(int *)(a3 + 20);
    v9 = (_QWORD *)((char *)v4 + v8);
    v10 = (uint64_t)a2 + v8;
    v11 = *(uint64_t *)((char *)a2 + v8);
    v12 = *(_QWORD *)(v10 + 8);
    *v9 = v11;
    v9[1] = v12;
    v13 = *(int *)(type metadata accessor for NWActorID() + 20);
    v14 = (char *)v9 + v13;
    v15 = v10 + v13;
    v16 = sub_183B914AC();
    v17 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
  }
  return v4;
}

uint64_t sub_18330D650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_destroy_boxed_opaque_existential_2(a1);
  v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for NWActorID() + 20);
  v6 = sub_183B914AC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_18330D6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = v10;
  v11 = *(int *)(type metadata accessor for NWActorID() + 20);
  v12 = (char *)v8 + v11;
  v13 = v9 + v11;
  v14 = sub_183B914AC();
  v15 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t *sub_18330D750(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v6 = *(int *)(a3 + 20);
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(int *)(type metadata accessor for NWActorID() + 20);
  v10 = (char *)v7 + v9;
  v11 = (char *)v8 + v9;
  v12 = sub_183B914AC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t sub_18330D7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_OWORD *)(a1 + v5) = *(_OWORD *)(a2 + v5);
  v8 = *(int *)(type metadata accessor for NWActorID() + 20);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_18330D864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  __swift_destroy_boxed_opaque_existential_2(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v11 = *(int *)(type metadata accessor for NWActorID() + 20);
  v12 = (char *)v8 + v11;
  v13 = (char *)v9 + v11;
  v14 = sub_183B914AC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_18330D8F8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18330D904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for NWActorID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_18330D980()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18330D98C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for NWActorID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_18330DA00()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NWActorID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_18330DA78()
{
  unint64_t result;

  result = qword_1EDCDEF68;
  if (!qword_1EDCDEF68)
  {
    result = MEMORY[0x186DB5558](&unk_183BA68E0, &type metadata for NWFile1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEF68);
  }
  return result;
}

unint64_t sub_18330DAC0()
{
  unint64_t result;

  result = qword_1EDCDEF70;
  if (!qword_1EDCDEF70)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6818, &type metadata for NWFile1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEF70);
  }
  return result;
}

unint64_t sub_18330DB08()
{
  unint64_t result;

  result = qword_1EDCDEF78;
  if (!qword_1EDCDEF78)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6840, &type metadata for NWFile1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEF78);
  }
  return result;
}

void sub_18330DB4C()
{
  uint64_t v0;

  sub_18330CC18(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_18330DB64@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  *a1 = *(_QWORD *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

id sub_18330DBA8(id result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_18330DBC0(result, a2 & 1);
  return result;
}

id sub_18330DBC0(id result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

uint64_t *sub_18330DBCC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_183B914AC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    sub_18324A994(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
    v13 = *(int *)(a3 + 24);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = v15[16];
    if (v16 == 255)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v14[16] = v15[16];
    }
    else
    {
      v17 = *(_QWORD *)v15;
      v18 = *((_QWORD *)v15 + 1);
      sub_1832BB30C(*(_QWORD *)v15, v18, v15[16]);
      *(_QWORD *)v14 = v17;
      *((_QWORD *)v14 + 1) = v18;
      v14[16] = v16;
    }
  }
  return a1;
}

uint64_t sub_18330DCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;

  v4 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  result = sub_18308485C(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  v6 = a1 + *(int *)(a2 + 24);
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (v7 != 255)
    return sub_1832BB284(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), v7);
  return result;
}

uint64_t sub_18330DD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_18324A994(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = *((unsigned __int8 *)v14 + 16);
  if (v15 == 255)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_BYTE *)(v13 + 16) = *((_BYTE *)v14 + 16);
  }
  else
  {
    v16 = *v14;
    v17 = v14[1];
    sub_1832BB30C(*v14, v17, *((_BYTE *)v14 + 16));
    *(_QWORD *)v13 = v16;
    *(_QWORD *)(v13 + 8) = v17;
    *(_BYTE *)(v13 + 16) = v15;
  }
  return a1;
}

uint64_t sub_18330DDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;

  v6 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_18324A994(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_18308485C(v12, v13);
  v14 = *(int *)(a3 + 24);
  v15 = a1 + v14;
  v16 = (__int128 *)(a2 + v14);
  v17 = *(unsigned __int8 *)(a2 + v14 + 16);
  if (*(unsigned __int8 *)(a1 + v14 + 16) == 255)
  {
    if (v17 == 255)
    {
      v26 = *v16;
      *(_BYTE *)(v15 + 16) = *((_BYTE *)v16 + 16);
      *(_OWORD *)v15 = v26;
    }
    else
    {
      v23 = *(_QWORD *)v16;
      v24 = *((_QWORD *)v16 + 1);
      sub_1832BB30C(v23, v24, v17);
      *(_QWORD *)v15 = v23;
      *(_QWORD *)(v15 + 8) = v24;
      *(_BYTE *)(v15 + 16) = v17;
    }
  }
  else if (v17 == 255)
  {
    sub_18330DF0C(v15);
    v25 = *((_BYTE *)v16 + 16);
    *(_OWORD *)v15 = *v16;
    *(_BYTE *)(v15 + 16) = v25;
  }
  else
  {
    v18 = *(_QWORD *)v16;
    v19 = *((_QWORD *)v16 + 1);
    sub_1832BB30C(v18, v19, v17);
    v20 = *(_QWORD *)v15;
    v21 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)v15 = v18;
    *(_QWORD *)(v15 + 8) = v19;
    v22 = *(_BYTE *)(v15 + 16);
    *(_BYTE *)(v15 + 16) = v17;
    sub_1832BB284(v20, v21, v22);
  }
  return a1;
}

uint64_t sub_18330DF0C(uint64_t a1)
{
  sub_1832BB284(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_18330DF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t sub_18330DFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_18308485C(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(unsigned __int8 *)(a1 + v10 + 16);
  if (v13 == 255)
    goto LABEL_5;
  v14 = *(unsigned __int8 *)(v12 + 16);
  if (v14 == 255)
  {
    sub_18330DF0C(v11);
LABEL_5:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
    return a1;
  }
  v15 = *(_QWORD *)v11;
  v16 = *(_QWORD *)(v11 + 8);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = v14;
  sub_1832BB284(v15, v16, v13);
  return a1;
}

uint64_t sub_18330E06C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18330E078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_183B914AC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 16);
  if (v9 <= 2)
    return 0;
  else
    return v9 ^ 0xFF;
}

uint64_t sub_18330E0F4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18330E100(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_183B914AC();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24) + 16) = ~(_BYTE)a2;
  return result;
}

uint64_t type metadata accessor for ReplyEnvelope()
{
  uint64_t result;

  result = qword_1EDCDEF98;
  if (!qword_1EDCDEF98)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_18330E1B8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_183B914AC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ReplyEnvelope.Error(uint64_t a1)
{
  return sub_1832BB284(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s7Network13ReplyEnvelopeV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1832BB30C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ReplyEnvelope.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1832BB30C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1832BB284(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ReplyEnvelope.Error(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1832BB284(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error()
{
  return &type metadata for ReplyEnvelope.Error;
}

uint64_t sub_18330E338(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  char v34;
  char v35;
  char v36;
  char v37;

  *(_QWORD *)&v32 = a2;
  v33 = a4;
  *((_QWORD *)&v32 + 1) = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDF028);
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  MEMORY[0x1E0C80A78](v5);
  v29 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDF030);
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDF038);
  v25 = *(_QWORD *)(v10 - 8);
  v26 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDF040);
  v23 = *(_QWORD *)(v13 - 8);
  v24 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDF048);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18330F614();
  sub_183B9231C();
  if (!(_BYTE)v33)
  {
    v36 = 2;
    sub_18330F69C();
    sub_183B92040();
    v20 = v28;
    sub_183B92058();
    v21 = v27;
    goto LABEL_5;
  }
  if (v33 == 1)
  {
    v37 = 3;
    sub_18330F658();
    v9 = v29;
    sub_183B92040();
    v20 = v31;
    sub_183B92058();
    v21 = v30;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  if (v32 == 0)
  {
    v34 = 0;
    sub_18330F724();
    sub_183B92040();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v24);
  }
  else
  {
    v35 = 1;
    sub_18330F6E0();
    sub_183B92040();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v26);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t sub_18330E670(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 *v10;
  char v11;
  __int128 v13;
  char v14;
  char v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEFC0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18330EF5C();
  sub_183B9231C();
  LOBYTE(v13) = 0;
  sub_183B914AC();
  sub_1832FD8E0(&qword_1EDCDE0D8, MEMORY[0x1E0CB09B8]);
  sub_183B92064();
  if (!v2)
  {
    v9 = type metadata accessor for ReplyEnvelope();
    v13 = *(_OWORD *)(v3 + *(int *)(v9 + 20));
    v15 = 1;
    sub_183280518();
    sub_183B92064();
    v10 = (__int128 *)(v3 + *(int *)(v9 + 24));
    v11 = *((_BYTE *)v10 + 16);
    v13 = *v10;
    v14 = v11;
    v15 = 2;
    sub_18330F064();
    sub_183B9204C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_18330E824@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  char v25;

  v17 = a2;
  v3 = sub_183B914AC();
  v18 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v20 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEFA8);
  v5 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ReplyEnvelope();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18330EF5C();
  v19 = v7;
  v11 = v22;
  sub_183B922EC();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  v22 = v5;
  v12 = v18;
  LOBYTE(v23) = 0;
  sub_1832FD8E0(&qword_1EDCDE0E8, MEMORY[0x1E0CB09E0]);
  v13 = v19;
  sub_183B92010();
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v10, v20, v3);
  v25 = 1;
  sub_183280298();
  sub_183B92010();
  *(_OWORD *)&v10[*(int *)(v8 + 20)] = v23;
  v25 = 2;
  sub_18330EFA0();
  sub_183B91FEC();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v21);
  v14 = v24;
  v15 = &v10[*(int *)(v8 + 24)];
  *(_OWORD *)v15 = v23;
  v15[16] = v14;
  sub_18330EFE4((uint64_t)v10, v17);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  return sub_18330F028((uint64_t)v10);
}

uint64_t sub_18330EB14()
{
  return 0;
}

uint64_t sub_18330EB20()
{
  sub_18330F724();
  return sub_183B92334();
}

uint64_t sub_18330EB48()
{
  sub_18330F724();
  return sub_183B92340();
}

uint64_t sub_18330EB78()
{
  return 12383;
}

uint64_t sub_18330EB88()
{
  sub_18330F658();
  return sub_183B92334();
}

uint64_t sub_18330EBB0()
{
  sub_18330F658();
  return sub_183B92340();
}

uint64_t sub_18330EBD8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_18330EC0C + 4 * byte_183BA6960[*v0]))(0xD000000000000015, 0x8000000183C72D80);
}

uint64_t sub_18330EC0C()
{
  return 0x6F5464656C696166;
}

uint64_t sub_18330EC30()
{
  return 0x69796C7265646E75;
}

uint64_t sub_18330EC4C()
{
  return 0x746E65696C63;
}

uint64_t sub_18330EC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18330FE54(a1, a2);
  *a3 = result;
  return result;
}

void sub_18330EC84(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_18330EC90()
{
  sub_18330F614();
  return sub_183B92334();
}

uint64_t sub_18330ECB8()
{
  sub_18330F614();
  return sub_183B92340();
}

uint64_t sub_18330ECE0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_18330ED0C()
{
  sub_18330F6E0();
  return sub_183B92334();
}

uint64_t sub_18330ED34()
{
  sub_18330F6E0();
  return sub_183B92340();
}

uint64_t sub_18330ED5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_183B920F4();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_18330EDD8()
{
  sub_18330F69C();
  return sub_183B92334();
}

uint64_t sub_18330EE00()
{
  sub_18330F69C();
  return sub_183B92340();
}

_QWORD *sub_18330EE28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  char v6;

  result = sub_18330F0A8(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_18330EE54(_QWORD *a1)
{
  uint64_t v1;

  return sub_18330E338(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_18330EE70()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65756C6176;
  if (*v0 != 1)
    v1 = 0x726F727265;
  if (*v0)
    return v1;
  else
    return 0x44496C6C6163;
}

uint64_t sub_18330EEC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_183310030(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18330EEE4()
{
  sub_18330EF5C();
  return sub_183B92334();
}

uint64_t sub_18330EF0C()
{
  sub_18330EF5C();
  return sub_183B92340();
}

uint64_t sub_18330EF34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_18330E824(a1, a2);
}

uint64_t sub_18330EF48(_QWORD *a1)
{
  return sub_18330E670(a1);
}

unint64_t sub_18330EF5C()
{
  unint64_t result;

  result = qword_1EDCDEFB0;
  if (!qword_1EDCDEFB0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA7024, &type metadata for ReplyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEFB0);
  }
  return result;
}

unint64_t sub_18330EFA0()
{
  unint64_t result;

  result = qword_1EDCDEFB8;
  if (!qword_1EDCDEFB8)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6A08, &type metadata for ReplyEnvelope.Error);
    atomic_store(result, (unint64_t *)&qword_1EDCDEFB8);
  }
  return result;
}

uint64_t sub_18330EFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReplyEnvelope();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18330F028(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReplyEnvelope();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_18330F064()
{
  unint64_t result;

  result = qword_1EDCDEFC8;
  if (!qword_1EDCDEFC8)
  {
    result = MEMORY[0x186DB5558](&unk_183BA69E0, &type metadata for ReplyEnvelope.Error);
    atomic_store(result, (unint64_t *)&qword_1EDCDEFC8);
  }
  return result;
}

_QWORD *sub_18330F0A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEFD0);
  v23 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v27 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEFD8);
  v24 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v26 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEFE0);
  v19[3] = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEFE8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDEFF0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v28 = a1;
  v12 = __swift_project_boxed_opaque_existential_2(a1, v11);
  sub_18330F614();
  v13 = v29;
  sub_183B922EC();
  if (!v13)
  {
    v19[1] = v6;
    v19[2] = v5;
    v29 = v8;
    v14 = sub_183B92028();
    if (*(_QWORD *)(v14 + 16) == 1)
      __asm { BR              X10 }
    v15 = sub_183B91E54();
    swift_allocError();
    v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDF000);
    *v17 = &type metadata for ReplyEnvelope.Error;
    v12 = v10;
    sub_183B91FE0();
    sub_183B91E48();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC450], v15);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v7);
  }
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v28);
  return v12;
}

unint64_t sub_18330F614()
{
  unint64_t result;

  result = qword_1EDCDEFF8;
  if (!qword_1EDCDEFF8)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6FD4, &type metadata for ReplyEnvelope.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDEFF8);
  }
  return result;
}

unint64_t sub_18330F658()
{
  unint64_t result;

  result = qword_1EDCDF008;
  if (!qword_1EDCDF008)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6F84, &type metadata for ReplyEnvelope.Error.ClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF008);
  }
  return result;
}

unint64_t sub_18330F69C()
{
  unint64_t result;

  result = qword_1EDCDF010;
  if (!qword_1EDCDF010)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6F34, &type metadata for ReplyEnvelope.Error.UnderlyingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF010);
  }
  return result;
}

unint64_t sub_18330F6E0()
{
  unint64_t result;

  result = qword_1EDCDF018;
  if (!qword_1EDCDF018)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6EE4, &type metadata for ReplyEnvelope.Error.FailedToExecuteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF018);
  }
  return result;
}

unint64_t sub_18330F724()
{
  unint64_t result;

  result = qword_1EDCDF020;
  if (!qword_1EDCDF020)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6E94, &type metadata for ReplyEnvelope.Error.ActorResolutionFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF020);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReplyEnvelope.Error.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_18330F7B4 + 4 * byte_183BA696D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18330F7E8 + 4 * byte_183BA6968[v4]))();
}

uint64_t sub_18330F7E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18330F7F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18330F7F8);
  return result;
}

uint64_t sub_18330F804(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18330F80CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_18330F810(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18330F818(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.CodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.ActorResolutionFailedCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.ActorResolutionFailedCodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.FailedToExecuteCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.FailedToExecuteCodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.UnderlyingCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.UnderlyingCodingKeys;
}

uint64_t _s7Network13ReplyEnvelopeV5ErrorO20UnderlyingCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18330F8AC + 4 * byte_183BA6972[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18330F8CC + 4 * byte_183BA6977[v4]))();
}

_BYTE *sub_18330F8AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18330F8CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18330F8D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18330F8DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18330F8E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18330F8EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.ClientCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.ClientCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ReplyEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18330F954 + 4 * byte_183BA6981[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18330F988 + 4 * byte_183BA697C[v4]))();
}

uint64_t sub_18330F988(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18330F990(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18330F998);
  return result;
}

uint64_t sub_18330F9A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18330F9ACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18330F9B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18330F9B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.CodingKeys()
{
  return &type metadata for ReplyEnvelope.CodingKeys;
}

unint64_t sub_18330F9D8()
{
  unint64_t result;

  result = qword_1EDCDF050;
  if (!qword_1EDCDF050)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6BA4, &type metadata for ReplyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF050);
  }
  return result;
}

unint64_t sub_18330FA20()
{
  unint64_t result;

  result = qword_1EDCDF058;
  if (!qword_1EDCDF058)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6C5C, &type metadata for ReplyEnvelope.Error.ClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF058);
  }
  return result;
}

unint64_t sub_18330FA68()
{
  unint64_t result;

  result = qword_1EDCDF060;
  if (!qword_1EDCDF060)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6D14, &type metadata for ReplyEnvelope.Error.UnderlyingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF060);
  }
  return result;
}

unint64_t sub_18330FAB0()
{
  unint64_t result;

  result = qword_1EDCDF068;
  if (!qword_1EDCDF068)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6E6C, &type metadata for ReplyEnvelope.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF068);
  }
  return result;
}

unint64_t sub_18330FAF8()
{
  unint64_t result;

  result = qword_1EDCDF070;
  if (!qword_1EDCDF070)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6D8C, &type metadata for ReplyEnvelope.Error.ActorResolutionFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF070);
  }
  return result;
}

unint64_t sub_18330FB40()
{
  unint64_t result;

  result = qword_1EDCDF078;
  if (!qword_1EDCDF078)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6DB4, &type metadata for ReplyEnvelope.Error.ActorResolutionFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF078);
  }
  return result;
}

unint64_t sub_18330FB88()
{
  unint64_t result;

  result = qword_1EDCDF080;
  if (!qword_1EDCDF080)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6D3C, &type metadata for ReplyEnvelope.Error.FailedToExecuteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF080);
  }
  return result;
}

unint64_t sub_18330FBD0()
{
  unint64_t result;

  result = qword_1EDCDF088;
  if (!qword_1EDCDF088)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6D64, &type metadata for ReplyEnvelope.Error.FailedToExecuteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF088);
  }
  return result;
}

unint64_t sub_18330FC18()
{
  unint64_t result;

  result = qword_1EDCDF090;
  if (!qword_1EDCDF090)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6C84, &type metadata for ReplyEnvelope.Error.UnderlyingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF090);
  }
  return result;
}

unint64_t sub_18330FC60()
{
  unint64_t result;

  result = qword_1EDCDF098;
  if (!qword_1EDCDF098)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6CAC, &type metadata for ReplyEnvelope.Error.UnderlyingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF098);
  }
  return result;
}

unint64_t sub_18330FCA8()
{
  unint64_t result;

  result = qword_1EDCDF0A0;
  if (!qword_1EDCDF0A0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6BCC, &type metadata for ReplyEnvelope.Error.ClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF0A0);
  }
  return result;
}

unint64_t sub_18330FCF0()
{
  unint64_t result;

  result = qword_1EDCDF0A8;
  if (!qword_1EDCDF0A8)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6BF4, &type metadata for ReplyEnvelope.Error.ClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF0A8);
  }
  return result;
}

unint64_t sub_18330FD38()
{
  unint64_t result;

  result = qword_1EDCDF0B0;
  if (!qword_1EDCDF0B0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6DDC, &type metadata for ReplyEnvelope.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF0B0);
  }
  return result;
}

unint64_t sub_18330FD80()
{
  unint64_t result;

  result = qword_1EDCDF0B8;
  if (!qword_1EDCDF0B8)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6E04, &type metadata for ReplyEnvelope.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF0B8);
  }
  return result;
}

unint64_t sub_18330FDC8()
{
  unint64_t result;

  result = qword_1EDCDF0C0;
  if (!qword_1EDCDF0C0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6B14, &type metadata for ReplyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF0C0);
  }
  return result;
}

unint64_t sub_18330FE10()
{
  unint64_t result;

  result = qword_1EDCDF0C8;
  if (!qword_1EDCDF0C8)
  {
    result = MEMORY[0x186DB5558](&unk_183BA6B3C, &type metadata for ReplyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF0C8);
  }
  return result;
}

uint64_t sub_18330FE54(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x8000000183C72D80 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F5464656C696166 && a2 == 0xEF65747563657845 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69796C7265646E75 && a2 == 0xEA0000000000676ELL || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E65696C63 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_183B920F4();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_183310030(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x44496C6C6163 && a2 == 0xE600000000000000;
  if (v2 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_183B920F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_183310174()
{
  uint64_t v0;

  v0 = sub_183B915CC();
  __swift_allocate_value_buffer(v0, qword_1EDCF2A90);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EDCF2A90);
  return sub_183B915C0();
}

_QWORD *NWActorSystemInvocationDecoder.decodeGenericSubstitutions()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = v0 + *(int *)(type metadata accessor for NWActorSystemInvocationDecoder() + 20);
  v2 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for RemoteCallEnvelope(0) + 28));
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v4 = v2 + 40;
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    swift_bridgeObjectRetain();
    v6 = sub_183B91DD0();
    swift_bridgeObjectRelease();
    if (v6)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_183243560(0, v5[2] + 1, 1, v5);
      v8 = v5[2];
      v7 = v5[3];
      if (v8 >= v7 >> 1)
        v5 = sub_183243560((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
      v5[2] = v8 + 1;
      v5[v8 + 4] = v6;
    }
    v4 += 16;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t type metadata accessor for NWActorSystemInvocationDecoder()
{
  uint64_t result;

  result = qword_1EDCDF0D0;
  if (!qword_1EDCDF0D0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t NWActorSystemInvocationDecoder.decodeNextArgument<A>()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  swift_conformsToProtocol();
  swift_conformsToProtocol();
  result = type metadata accessor for NWActorSystemInvocationDecoder();
  v5 = (_QWORD *)(v1 + *(int *)(result + 24));
  v6 = v5[1];
  v7 = *(_QWORD *)(*v5 + 16);
  if (v6 == v7)
  {
    sub_183274368();
    swift_allocError();
    *(_QWORD *)v8 = a1;
    *(_OWORD *)(v8 + 8) = xmmword_183BA7080;
    return swift_willThrow();
  }
  else if (v6 >= v7)
  {
    __break(1u);
  }
  else
  {
    v9 = *v5 + 16 * v6;
    v10 = *(_QWORD *)(v9 + 32);
    v11 = *(_QWORD *)(v9 + 40);
    v5[1] = v6 + 1;
    sub_18324A994(v10, v11);
    sub_183B91254();
    if (v2)
      swift_willThrow();
    return sub_18308485C(v10, v11);
  }
  return result;
}

uint64_t NWActorSystemInvocationDecoder.decodeErrorType()()
{
  return 0;
}

uint64_t NWActorSystemInvocationDecoder.decodeReturnType()()
{
  return 0;
}

_QWORD *sub_183310488()
{
  return NWActorSystemInvocationDecoder.decodeGenericSubstitutions()();
}

uint64_t sub_18331049C(uint64_t a1)
{
  swift_conformsToProtocol();
  swift_conformsToProtocol();
  return NWActorSystemInvocationDecoder.decodeNextArgument<A>()(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for NWActorSystemInvocationDecoder(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v31)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_183B914AC();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v31 = v12;
    swift_retain();
    v12(v9, v10, v11);
    v13 = (int *)type metadata accessor for RemoteCallEnvelope(0);
    v14 = v13[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = *(_QWORD *)&v10[v14 + 8];
    *(_QWORD *)v15 = *(_QWORD *)&v10[v14];
    *((_QWORD *)v15 + 1) = v17;
    v18 = *(int *)(type metadata accessor for NWActorID() + 20);
    v19 = &v15[v18];
    v20 = &v16[v18];
    swift_bridgeObjectRetain();
    v31(v19, v20, v11);
    v21 = v13[6];
    v22 = &v9[v21];
    v23 = &v10[v21];
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    *(_QWORD *)&v9[v13[7]] = *(_QWORD *)&v10[v13[7]];
    *(_QWORD *)&v9[v13[8]] = *(_QWORD *)&v10[v13[8]];
    v25 = *(int *)(a3 + 24);
    v26 = (uint64_t *)((char *)v7 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    v29 = *v27;
    v28 = v27[1];
    *v26 = v29;
    v26[1] = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for NWActorSystemInvocationDecoder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_183B914AC();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = v4 + *(int *)(type metadata accessor for RemoteCallEnvelope(0) + 20);
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for NWActorID();
  v6(v7 + *(int *)(v8 + 20), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for NWActorSystemInvocationDecoder(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_183B914AC();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain();
  v9(v6, v7, v8);
  v10 = (int *)type metadata accessor for RemoteCallEnvelope(0);
  v11 = v10[5];
  v12 = &v6[v11];
  v13 = &v7[v11];
  v14 = *(_QWORD *)&v7[v11 + 8];
  *(_QWORD *)v12 = *(_QWORD *)&v7[v11];
  *((_QWORD *)v12 + 1) = v14;
  v15 = *(int *)(type metadata accessor for NWActorID() + 20);
  v16 = &v12[v15];
  v17 = &v13[v15];
  swift_bridgeObjectRetain();
  v9(v16, v17, v8);
  v18 = v10[6];
  v19 = &v6[v18];
  v20 = &v7[v18];
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = v21;
  *(_QWORD *)&v6[v10[7]] = *(_QWORD *)&v7[v10[7]];
  *(_QWORD *)&v6[v10[8]] = *(_QWORD *)&v7[v10[8]];
  v22 = *(int *)(a3 + 24);
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NWActorSystemInvocationDecoder(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_183B914AC();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v11 = (int *)type metadata accessor for RemoteCallEnvelope(0);
  v12 = v11[5];
  v13 = &v7[v12];
  v14 = &v8[v12];
  *(_QWORD *)v13 = *(_QWORD *)&v8[v12];
  *((_QWORD *)v13 + 1) = *(_QWORD *)&v8[v12 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = type metadata accessor for NWActorID();
  v10(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v9);
  v16 = v11[6];
  v17 = &v7[v16];
  v18 = &v8[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v11[7]] = *(_QWORD *)&v8[v11[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v11[8]] = *(_QWORD *)&v8[v11[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = *(int *)(a3 + 24);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  return a1;
}

_QWORD *initializeWithTake for NWActorSystemInvocationDecoder(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_183B914AC();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = (int *)type metadata accessor for RemoteCallEnvelope(0);
  v12 = v11[5];
  v13 = &v7[v12];
  v14 = &v8[v12];
  *(_OWORD *)&v7[v12] = *(_OWORD *)&v8[v12];
  v15 = type metadata accessor for NWActorID();
  v10(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v9);
  *(_OWORD *)&v7[v11[6]] = *(_OWORD *)&v8[v11[6]];
  *(_QWORD *)&v7[v11[7]] = *(_QWORD *)&v8[v11[7]];
  *(_QWORD *)&v7[v11[8]] = *(_QWORD *)&v8[v11[8]];
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for NWActorSystemInvocationDecoder(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_183B914AC();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v11 = (int *)type metadata accessor for RemoteCallEnvelope(0);
  v12 = v11[5];
  v13 = &v7[v12];
  v14 = &v8[v12];
  v15 = *(_QWORD *)&v8[v12 + 8];
  *(_QWORD *)v13 = *(_QWORD *)&v8[v12];
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v16 = type metadata accessor for NWActorID();
  v10(&v13[*(int *)(v16 + 20)], &v14[*(int *)(v16 + 20)], v9);
  v17 = v11[6];
  v18 = &v7[v17];
  v19 = &v8[v17];
  v21 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = v21;
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v11[7]] = *(_QWORD *)&v8[v11[7]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v11[8]] = *(_QWORD *)&v8[v11[8]];
  swift_bridgeObjectRelease();
  v22 = *(int *)(a3 + 24);
  v23 = (char *)a1 + v22;
  v24 = (_QWORD *)((char *)a2 + v22);
  *(_QWORD *)((char *)a1 + v22) = *v24;
  swift_bridgeObjectRelease();
  *((_QWORD *)v23 + 1) = v24[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorSystemInvocationDecoder()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183310C14(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for RemoteCallEnvelope(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NWActorSystemInvocationDecoder()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_183310C9C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for RemoteCallEnvelope(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_183310D10()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RemoteCallEnvelope(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_183310D94(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x65756C6176;
    else
      v3 = 0xD000000000000010;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0x8000000183C6F5A0;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x65756C6176;
      else
        v6 = 0xD000000000000010;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0x8000000183C6F5A0;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1701667182;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1701667182)
  {
LABEL_21:
    v8 = sub_183B920F4();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_183310E94(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000012;
  v3 = 0x8000000183C6F5C0;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6946726564616568;
    else
      v5 = 0x68506E6F73616572;
    if (v4 == 1)
      v6 = 0xEC00000073646C65;
    else
      v6 = 0xEC00000065736172;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000012;
  v6 = 0x8000000183C6F5C0;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0x6946726564616568;
    else
      v2 = 0x68506E6F73616572;
    if (v7 == 1)
      v3 = 0xEC00000073646C65;
    else
      v3 = 0xEC00000065736172;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
    v8 = 1;
  else
    v8 = sub_183B920F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_183310FC0(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6946726564616568;
  else
    v3 = 0xD000000000000012;
  if (v2)
    v4 = 0x8000000183C6F5C0;
  else
    v4 = 0xEC00000073646C65;
  if ((a2 & 1) != 0)
    v5 = 0x6946726564616568;
  else
    v5 = 0xD000000000000012;
  if ((a2 & 1) != 0)
    v6 = 0xEC00000073646C65;
  else
    v6 = 0x8000000183C6F5C0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_183B920F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_183311070(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  if (a1)
  {
    if (a1 == 1)
      v2 = 0x646F70656D6F68;
    else
      v2 = 0x72656B61657073;
    v3 = 0xE700000000000000;
    v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1)
        v5 = 0x646F70656D6F68;
      else
        v5 = 0x72656B61657073;
      v6 = 0xE700000000000000;
      if (v2 != v5)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = 0xE300000000000000;
    v2 = 7496035;
    v4 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE300000000000000;
  if (v2 != 7496035)
  {
LABEL_15:
    v7 = sub_183B920F4();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6)
    goto LABEL_15;
  v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_183311178(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000079;
  v3 = 0x74696D69786F7270;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x73646E65697266;
    else
      v5 = 0x656E6F7972657665;
    if (v4 == 1)
      v6 = 0xE700000000000000;
    else
      v6 = 0xE800000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x74696D69786F7270;
  v6 = 0xE900000000000079;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x73646E65697266;
    else
      v3 = 0x656E6F7972657665;
    if (v7 == 1)
      v2 = 0xE700000000000000;
    else
      v2 = 0xE800000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_183B920F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t HTTPRequest.scheme.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (_QWORD *)v2;
  if (!a2)
  {
    result = sub_18324C184(*(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    *(_QWORD *)(v2 + 104) = 0;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    return result;
  }
  v4 = a2;
  v5 = a1;
  v6 = v3[8];
  if (v6)
  {
    v7 = v3[7];
    v17 = v3[9];
    v15 = v3[10];
    v16 = v3[11];
    if ((sub_18324BC90(a1, a2) & 1) != 0)
    {
      sub_18324C148(v7, v6);
    }
    else
    {
      sub_18324C148(v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
      sub_183312424();
      sub_183B91794();
      swift_bridgeObjectRelease();
      v5 = 0;
      v4 = 0xE000000000000000;
    }
    v9 = sub_18327D86C(v5, v4);
    v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17 == 0x656D656863733ALL && v15 == 0xE700000000000000)
    {
      v13 = v16;
      result = sub_18324C184(v7, v6);
    }
    else
    {
      v14 = sub_183B920F4();
      v13 = v16;
      result = sub_18324C184(v7, v6);
      if ((v14 & 1) == 0)
      {
        __break(1u);
        return result;
      }
    }
    v3[7] = v7;
    v3[8] = v6;
    v3[9] = v17;
    v3[10] = v15;
    v3[11] = v13;
  }
  else
  {
    if ((sub_18324BC90(a1, a2) & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
      sub_183312424();
      sub_183B91794();
      swift_bridgeObjectRelease();
      v5 = 0;
      v4 = 0xE000000000000000;
    }
    v9 = sub_18327D86C(v5, v4);
    v11 = v10;
    result = swift_bridgeObjectRelease();
    *(_OWORD *)(v3 + 7) = xmmword_183BA5830;
    *(_OWORD *)(v3 + 9) = xmmword_183BA5830;
    v3[11] = 0;
  }
  v3[12] = v9;
  v3[13] = v11;
  return result;
}

uint64_t HTTPRequest.authority.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (_QWORD *)v2;
  if (!a2)
  {
    result = sub_18324C184(*(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120));
    *(_QWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    return result;
  }
  v4 = a2;
  v5 = a1;
  v6 = v3[15];
  if (v6)
  {
    v7 = v3[14];
    v17 = v3[16];
    v15 = v3[17];
    v16 = v3[18];
    if ((sub_18324BC90(a1, a2) & 1) != 0)
    {
      sub_18324C148(v7, v6);
    }
    else
    {
      sub_18324C148(v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
      sub_183312424();
      sub_183B91794();
      swift_bridgeObjectRelease();
      v5 = 0;
      v4 = 0xE000000000000000;
    }
    v9 = sub_18327D86C(v5, v4);
    v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17 == 0x69726F687475613ALL && v15 == 0xEA00000000007974)
    {
      v13 = v16;
      result = sub_18324C184(v7, v6);
    }
    else
    {
      v14 = sub_183B920F4();
      v13 = v16;
      result = sub_18324C184(v7, v6);
      if ((v14 & 1) == 0)
      {
        __break(1u);
        return result;
      }
    }
    v3[14] = v7;
    v3[15] = v6;
    v3[16] = v17;
    v3[17] = v15;
    v3[18] = v13;
  }
  else
  {
    if ((sub_18324BC90(a1, a2) & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
      sub_183312424();
      sub_183B91794();
      swift_bridgeObjectRelease();
      v5 = 0;
      v4 = 0xE000000000000000;
    }
    v9 = sub_18327D86C(v5, v4);
    v11 = v10;
    result = swift_bridgeObjectRelease();
    *((_OWORD *)v3 + 7) = xmmword_183BA5840;
    *((_OWORD *)v3 + 8) = xmmword_183BA5840;
    v3[18] = 0;
  }
  v3[19] = v9;
  v3[20] = v11;
  return result;
}

uint64_t HTTPRequest.path.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (_QWORD *)v2;
  if (!a2)
  {
    result = sub_18324C184(*(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176));
    *(_QWORD *)(v2 + 216) = 0;
    *(_OWORD *)(v2 + 200) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    return result;
  }
  v4 = a2;
  v5 = a1;
  v6 = v3[22];
  if (v6)
  {
    v7 = v3[21];
    v17 = v3[23];
    v15 = v3[24];
    v16 = v3[25];
    if ((sub_18324BC90(a1, a2) & 1) != 0)
    {
      sub_18324C148(v7, v6);
    }
    else
    {
      sub_18324C148(v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
      sub_183312424();
      sub_183B91794();
      swift_bridgeObjectRelease();
      v5 = 0;
      v4 = 0xE000000000000000;
    }
    v9 = sub_18327D86C(v5, v4);
    v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17 == 0x687461703ALL && v15 == 0xE500000000000000)
    {
      v13 = v16;
      result = sub_18324C184(v7, v6);
    }
    else
    {
      v14 = sub_183B920F4();
      v13 = v16;
      result = sub_18324C184(v7, v6);
      if ((v14 & 1) == 0)
      {
        __break(1u);
        return result;
      }
    }
    v3[21] = v7;
    v3[22] = v6;
    v3[23] = v17;
    v3[24] = v15;
    v3[25] = v13;
  }
  else
  {
    if ((sub_18324BC90(a1, a2) & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
      sub_183312424();
      sub_183B91794();
      swift_bridgeObjectRelease();
      v5 = 0;
      v4 = 0xE000000000000000;
    }
    v9 = sub_18327D86C(v5, v4);
    v11 = v10;
    result = swift_bridgeObjectRelease();
    *(_OWORD *)(v3 + 21) = xmmword_183BA5850;
    *(_OWORD *)(v3 + 23) = xmmword_183BA5850;
    v3[25] = 0;
  }
  v3[26] = v9;
  v3[27] = v11;
  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.scheme.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  if (!v2
    || (v4 == 0x656D656863733ALL ? (v9 = v5 == 0xE700000000000000) : (v9 = 0),
        v9 || (result = sub_183B920F4(), (result & 1) != 0)))
  {
    result = sub_18324C184(v1[7], v1[8]);
    v1[7] = v3;
    v1[8] = v2;
    v1[9] = v4;
    v1[10] = v5;
    v1[11] = v6;
    v1[12] = v7;
    v1[13] = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.authority.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  if (!v2
    || (v4 == 0x69726F687475613ALL ? (v9 = v5 == 0xEA00000000007974) : (v9 = 0),
        v9 || (result = sub_183B920F4(), (result & 1) != 0)))
  {
    result = sub_18324C184(v1[14], v1[15]);
    v1[14] = v3;
    v1[15] = v2;
    v1[16] = v4;
    v1[17] = v5;
    v1[18] = v6;
    v1[19] = v7;
    v1[20] = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.path.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  if (!v2
    || (v4 == 0x687461703ALL ? (v9 = v5 == 0xE500000000000000) : (v9 = 0),
        v9 || (result = sub_183B920F4(), (result & 1) != 0)))
  {
    result = sub_18324C184(v1[21], v1[22]);
    v1[21] = v3;
    v1[22] = v2;
    v1[23] = v4;
    v1[24] = v5;
    v1[25] = v6;
    v1[26] = v7;
    v1[27] = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static HTTPRequest.Method.get.getter(_QWORD *a1@<X8>)
{
  *a1 = 5522759;
  a1[1] = 0xE300000000000000;
}

double HTTPRequest.init(method:scheme:authority:path:headerFields:)@<D0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v10;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double result;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v10 = a5;
  v40 = a1[1];
  v41 = *a1;
  v42 = *a8;
  if (a3)
  {
    v14 = a2;
    if ((sub_18324BC90(a2, a3) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      v15 = a3;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
      sub_183312424();
      sub_183B91794();
      v14 = 0;
      v15 = 0xE000000000000000;
    }
    v25 = sub_18327D86C(v14, v15);
    v38 = v26;
    v39 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = 0xE700000000000000;
    v16 = 0x656D656863733ALL;
    if (v10)
    {
LABEL_9:
      if ((sub_18324BC90(a4, v10) & 1) != 0)
      {
        swift_bridgeObjectRetain();
        v27 = v10;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
        sub_183312424();
        sub_183B91794();
        a4 = 0;
        v27 = 0xE000000000000000;
      }
      v19 = sub_18327D86C(a4, v27);
      v20 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = 0xEA00000000007974;
      v18 = 0x69726F687475613ALL;
      if (a7)
        goto LABEL_13;
LABEL_6:
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v38 = 0;
    v39 = 0;
    if (a5)
      goto LABEL_9;
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  if (!a7)
    goto LABEL_6;
LABEL_13:
  v36 = v16;
  v29 = v17;
  v30 = v20;
  v31 = v19;
  if ((sub_18324BC90(a6, a7) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v32 = a7;
    v33 = a6;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
    sub_183312424();
    sub_183B91794();
    v33 = 0;
    v32 = 0xE000000000000000;
  }
  v23 = sub_18327D86C(v33, v32);
  v24 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = 0xE500000000000000;
  v21 = 0x687461703ALL;
  v19 = v31;
  v20 = v30;
  v17 = v29;
  v16 = v36;
LABEL_17:
  *(_QWORD *)a9 = 0x646F6874656D3ALL;
  *(_QWORD *)(a9 + 8) = 0xE700000000000000;
  *(_QWORD *)(a9 + 16) = 0x646F6874656D3ALL;
  *(_QWORD *)(a9 + 24) = 0xE700000000000000;
  *(_BYTE *)(a9 + 32) = 0;
  *(_QWORD *)(a9 + 40) = v41;
  *(_QWORD *)(a9 + 48) = v40;
  *(_QWORD *)(a9 + 56) = v16;
  *(_QWORD *)(a9 + 64) = v17;
  *(_QWORD *)(a9 + 72) = v16;
  *(_QWORD *)(a9 + 80) = v17;
  *(_QWORD *)(a9 + 88) = 0;
  *(_QWORD *)(a9 + 96) = v39;
  *(_QWORD *)(a9 + 104) = v38;
  *(_QWORD *)(a9 + 112) = v18;
  *(_QWORD *)(a9 + 120) = v10;
  *(_QWORD *)(a9 + 128) = v18;
  *(_QWORD *)(a9 + 136) = v10;
  *(_QWORD *)(a9 + 144) = 0;
  *(_QWORD *)(a9 + 152) = v19;
  *(_QWORD *)(a9 + 160) = v20;
  *(_QWORD *)(a9 + 168) = v21;
  *(_QWORD *)(a9 + 176) = v22;
  *(_QWORD *)(a9 + 184) = v21;
  *(_QWORD *)(a9 + 192) = v22;
  *(_QWORD *)(a9 + 200) = 0;
  *(_QWORD *)(a9 + 208) = v23;
  *(_QWORD *)(a9 + 216) = v24;
  result = 0.0;
  *(_OWORD *)(a9 + 240) = 0u;
  *(_OWORD *)(a9 + 256) = 0u;
  *(_OWORD *)(a9 + 224) = 0u;
  *(_QWORD *)(a9 + 272) = 0;
  *(_QWORD *)(a9 + 280) = v42;
  return result;
}

uint64_t HTTPRequest.method.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 48);
  *a1 = *(_QWORD *)(v1 + 40);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

void static HTTPRequest.Method.connect.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x5443454E4E4F43;
  a1[1] = 0xE700000000000000;
}

Network::HTTPRequest::Method_optional __swiftcall HTTPRequest.Method.init(_:)(Swift::String a1)
{
  uint64_t *v1;
  void *object;
  uint64_t *v3;
  uint64_t v4;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  void *v7;
  Network::HTTPRequest::Method_optional result;

  object = a1._object;
  v3 = v1;
  v4 = HIBYTE(a1._object) & 0xF;
  if (((uint64_t)a1._object & 0x2000000000000000) == 0)
    v4 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v4
    && (countAndFlagsBits = a1._countAndFlagsBits,
        v6 = sub_18329D8B4(a1._countAndFlagsBits, (unint64_t)a1._object),
        (v6 & 1) != 0))
  {
    *v3 = countAndFlagsBits;
    v3[1] = (uint64_t)object;
  }
  else
  {
    v6 = swift_bridgeObjectRelease();
    *v3 = 0;
    v3[1] = 0;
  }
  result.value.rawValue._object = v7;
  result.value.rawValue._countAndFlagsBits = v6;
  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.extendedConnectProtocol.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  if (!v2
    || (v4 == 0x6F636F746F72703ALL ? (v9 = v5 == 0xE90000000000006CLL) : (v9 = 0),
        v9 || (result = sub_183B920F4(), (result & 1) != 0)))
  {
    result = sub_18324C184(v1[28], v1[29]);
    v1[28] = v3;
    v1[29] = v2;
    v1[30] = v4;
    v1[31] = v5;
    v1[32] = v6;
    v1[33] = v7;
    v1[34] = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static HTTPRequest.Method.head.getter(_QWORD *a1@<X8>)
{
  *a1 = 1145128264;
  a1[1] = 0xE400000000000000;
}

void static HTTPRequest.Method.post.getter(_QWORD *a1@<X8>)
{
  *a1 = 1414745936;
  a1[1] = 0xE400000000000000;
}

void static HTTPRequest.Method.put.getter(_QWORD *a1@<X8>)
{
  *a1 = 5526864;
  a1[1] = 0xE300000000000000;
}

void static HTTPRequest.Method.delete.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4554454C4544;
  a1[1] = 0xE600000000000000;
}

void static HTTPRequest.Method.options.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x534E4F4954504FLL;
  a1[1] = 0xE700000000000000;
}

void static HTTPRequest.Method.trace.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4543415254;
  a1[1] = 0xE500000000000000;
}

void static HTTPRequest.Method.patch.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4843544150;
  a1[1] = 0xE500000000000000;
}

uint64_t HTTPRequest.method.setter(unint64_t *a1)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  BOOL v10;
  uint64_t v11;
  char v12;

  v2 = *a1;
  v3 = a1[1];
  v5 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v7 = v1[3];
  v8 = *((_BYTE *)v1 + 32);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v10 = v6 == 0x646F6874656D3ALL && v7 == 0xE700000000000000;
  if (v10 || (result = sub_183B920F4(), (result & 1) != 0))
  {
    v11 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v11 = v2 & 0xFFFFFFFFFFFFLL;
    if (v11)
    {
      v12 = sub_18329D8B4(v2, v3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v12 & 1) != 0)
      {
        *v1 = v5;
        v1[1] = v4;
        v1[2] = v6;
        v1[3] = v7;
        *((_BYTE *)v1 + 32) = v8;
        v1[5] = v2;
        v1[6] = v3;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.method.setter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;

  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)(result + 24);
  v6 = *(_BYTE *)(result + 32);
  v7 = *(_QWORD *)(result + 40);
  v8 = *(_QWORD *)(result + 48);
  v9 = v4 == 0x646F6874656D3ALL && v5 == 0xE700000000000000;
  if (v9 || (result = sub_183B920F4(), (result & 1) != 0))
  {
    v10 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v10 = v7 & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      result = sub_18329D8B4(v7, v8);
      if ((result & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        *(_QWORD *)v1 = v2;
        *(_QWORD *)(v1 + 8) = v3;
        *(_QWORD *)(v1 + 16) = v4;
        *(_QWORD *)(v1 + 24) = v5;
        *(_BYTE *)(v1 + 32) = v6;
        *(_QWORD *)(v1 + 40) = v7;
        *(_QWORD *)(v1 + 48) = v8;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_183312424()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDCDD518;
  if (!qword_1EDCDD518)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDD510);
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DEC858], v1);
    atomic_store(result, (unint64_t *)&qword_1EDCDD518);
  }
  return result;
}

Network::HTTPRequest::Method_optional __swiftcall HTTPRequest.Method.init(rawValue:)(Swift::String rawValue)
{
  uint64_t *v1;
  void *object;
  uint64_t *v3;
  uint64_t v4;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  void *v7;
  Network::HTTPRequest::Method_optional result;

  object = rawValue._object;
  v3 = v1;
  v4 = HIBYTE(rawValue._object) & 0xF;
  if (((uint64_t)rawValue._object & 0x2000000000000000) == 0)
    v4 = rawValue._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v4
    && (countAndFlagsBits = rawValue._countAndFlagsBits,
        v6 = sub_18329D8B4(rawValue._countAndFlagsBits, (unint64_t)rawValue._object),
        (v6 & 1) != 0))
  {
    *v3 = countAndFlagsBits;
    v3[1] = (uint64_t)object;
  }
  else
  {
    v6 = swift_bridgeObjectRelease();
    *v3 = 0;
    v3[1] = 0;
  }
  result.value.rawValue._object = v7;
  result.value.rawValue._countAndFlagsBits = v6;
  return result;
}

uint64_t HTTPRequest.Method.description.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_183312508()
{
  sub_183B92250();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_183312560()
{
  swift_bridgeObjectRetain();
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1833125A4()
{
  sub_183B92250();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_1833125F8(Swift::String *a1)
{
  return HTTPRequest.Method.init(rawValue:)(*a1).value.rawValue._countAndFlagsBits;
}

uint64_t sub_183312604@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_183312614(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  _QWORD v11[4];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  v3 = a1[1];
  v6 = *a2;
  v5 = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  v9 = *((_BYTE *)a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11[0] = v6;
  v11[1] = v5;
  v11[2] = v8;
  v11[3] = v7;
  v12 = v9;
  v13 = v4;
  v14 = v3;
  sub_1833138E0(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v6;
  a2[1] = v5;
  a2[2] = v8;
  a2[3] = v7;
  *((_BYTE *)a2 + 32) = v9;
  a2[5] = v4;
  a2[6] = v3;
  return result;
}

uint64_t (*HTTPRequest.method.modify(_QWORD *a1))(unint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 48);
  *a1 = *(_QWORD *)(v1 + 40);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return sub_183312700;
}

uint64_t sub_183312700(unint64_t *a1, char a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  v6 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  v9 = *(_BYTE *)(v3 + 32);
  v11 = v7 == 0x646F6874656D3ALL && v8 == 0xE700000000000000;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (!v11)
    {
      result = sub_183B920F4();
      if ((result & 1) == 0)
        goto LABEL_26;
    }
    v13 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0)
      v13 = v4 & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      v14 = sub_18329D8B4(v4, v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
      {
        *(_QWORD *)v3 = v6;
        *(_QWORD *)(v3 + 8) = v5;
        *(_QWORD *)(v3 + 16) = v7;
        *(_QWORD *)(v3 + 24) = v8;
        *(_BYTE *)(v3 + 32) = v9;
        *(_QWORD *)(v3 + 40) = v4;
        *(_QWORD *)(v3 + 48) = v2;
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (!v11)
    {
      result = sub_183B920F4();
      if ((result & 1) == 0)
        goto LABEL_27;
    }
    v15 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0)
      v15 = v4 & 0xFFFFFFFFFFFFLL;
    if (v15)
    {
      v16 = sub_18329D8B4(v4, v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
      {
        *(_QWORD *)v3 = v6;
        *(_QWORD *)(v3 + 8) = v5;
        *(_QWORD *)(v3 + 16) = v7;
        *(_QWORD *)(v3 + 24) = v8;
        *(_BYTE *)(v3 + 32) = v9;
        *(_QWORD *)(v3 + 40) = v4;
        *(_QWORD *)(v3 + 48) = v2;
        return result;
      }
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t HTTPRequest.scheme.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = v0[8];
  if (!v1)
    return 0;
  v2 = v0[7];
  v3 = v0[12];
  v4 = v0[13];
  if ((sub_18324BC90(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_18324C148(v2, v1);
    v5 = sub_1832FE3D0(v3, v4);
    sub_18324C184(v2, v1);
    return v5;
  }
  return v3;
}

uint64_t sub_1833129C8@<X0>(void *__src@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD __dst[37];

  result = (uint64_t)memcpy(__dst, __src, 0x120uLL);
  v4 = __dst[8];
  if (__dst[8])
  {
    v5 = __dst[7];
    v6 = __dst[12];
    v7 = __dst[13];
    if ((sub_18324BC90(__dst[12], __dst[13]) & 1) != 0)
    {
      result = swift_bridgeObjectRetain();
    }
    else
    {
      sub_18328212C(__dst);
      sub_18324C148(v5, v4);
      v8 = sub_1832FE3D0(v6, v7);
      v10 = v9;
      sub_18324C184(v5, v4);
      result = (uint64_t)sub_1832CF378(__dst);
      v6 = v8;
      v7 = v10;
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t (*HTTPRequest.scheme.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  a1[2] = (unint64_t)v1;
  v3 = v1[8];
  if (v3)
  {
    v4 = v1[7];
    v5 = v1[12];
    v6 = v1[13];
    if ((sub_18324BC90(v5, v6) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_18324C148(v4, v3);
      v7 = sub_1832FE3D0(v5, v6);
      v9 = v8;
      sub_18324C184(v4, v3);
      v5 = v7;
      v6 = v9;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *a1 = v5;
  a1[1] = v6;
  return sub_183312BC8;
}

uint64_t sub_183312BC8(uint64_t *a1, char a2)
{
  return sub_183313778(a1, a2, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.scheme.setter);
}

unint64_t HTTPRequest.authority.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = v0[15];
  if (!v1)
    return 0;
  v2 = v0[14];
  v3 = v0[19];
  v4 = v0[20];
  if ((sub_18324BC90(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_18324C148(v2, v1);
    v5 = sub_1832FE3D0(v3, v4);
    sub_18324C184(v2, v1);
    return v5;
  }
  return v3;
}

uint64_t sub_183312CBC@<X0>(void *__src@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD __dst[37];

  result = (uint64_t)memcpy(__dst, __src, 0x120uLL);
  v4 = __dst[15];
  if (__dst[15])
  {
    v5 = __dst[14];
    v6 = __dst[19];
    v7 = __dst[20];
    if ((sub_18324BC90(__dst[19], __dst[20]) & 1) != 0)
    {
      result = swift_bridgeObjectRetain();
    }
    else
    {
      sub_18328212C(__dst);
      sub_18324C148(v5, v4);
      v8 = sub_1832FE3D0(v6, v7);
      v10 = v9;
      sub_18324C184(v5, v4);
      result = (uint64_t)sub_1832CF378(__dst);
      v6 = v8;
      v7 = v10;
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t (*HTTPRequest.authority.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  a1[2] = (unint64_t)v1;
  v3 = v1[15];
  if (v3)
  {
    v4 = v1[14];
    v5 = v1[19];
    v6 = v1[20];
    if ((sub_18324BC90(v5, v6) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_18324C148(v4, v3);
      v7 = sub_1832FE3D0(v5, v6);
      v9 = v8;
      sub_18324C184(v4, v3);
      v5 = v7;
      v6 = v9;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *a1 = v5;
  a1[1] = v6;
  return sub_183312EBC;
}

uint64_t sub_183312EBC(uint64_t *a1, char a2)
{
  return sub_183313778(a1, a2, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.authority.setter);
}

unint64_t HTTPRequest.path.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = v0[22];
  if (!v1)
    return 0;
  v2 = v0[21];
  v3 = v0[26];
  v4 = v0[27];
  if ((sub_18324BC90(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_18324C148(v2, v1);
    v5 = sub_1832FE3D0(v3, v4);
    sub_18324C184(v2, v1);
    return v5;
  }
  return v3;
}

uint64_t sub_183312FB0@<X0>(void *__src@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD __dst[37];

  result = (uint64_t)memcpy(__dst, __src, 0x120uLL);
  v4 = __dst[22];
  if (__dst[22])
  {
    v5 = __dst[21];
    v6 = __dst[26];
    v7 = __dst[27];
    if ((sub_18324BC90(__dst[26], __dst[27]) & 1) != 0)
    {
      result = swift_bridgeObjectRetain();
    }
    else
    {
      sub_18328212C(__dst);
      sub_18324C148(v5, v4);
      v8 = sub_1832FE3D0(v6, v7);
      v10 = v9;
      sub_18324C184(v5, v4);
      result = (uint64_t)sub_1832CF378(__dst);
      v6 = v8;
      v7 = v10;
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t (*HTTPRequest.path.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  a1[2] = (unint64_t)v1;
  v3 = v1[22];
  if (v3)
  {
    v4 = v1[21];
    v5 = v1[26];
    v6 = v1[27];
    if ((sub_18324BC90(v5, v6) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_18324C148(v4, v3);
      v7 = sub_1832FE3D0(v5, v6);
      v9 = v8;
      sub_18324C184(v4, v3);
      v5 = v7;
      v6 = v9;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *a1 = v5;
  a1[1] = v6;
  return sub_1833131B0;
}

uint64_t sub_1833131B0(uint64_t *a1, char a2)
{
  return sub_183313778(a1, a2, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.path.setter);
}

unint64_t HTTPRequest.extendedConnectProtocol.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = v0[29];
  if (!v1)
    return 0;
  v2 = v0[28];
  v3 = v0[33];
  v4 = v0[34];
  if ((sub_18324BC90(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_18324C148(v2, v1);
    v5 = sub_1832FE3D0(v3, v4);
    sub_18324C184(v2, v1);
    return v5;
  }
  return v3;
}

uint64_t sub_1833132A4@<X0>(void *__src@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD __dst[37];

  result = (uint64_t)memcpy(__dst, __src, 0x120uLL);
  v4 = __dst[29];
  if (__dst[29])
  {
    v5 = __dst[28];
    v6 = __dst[33];
    v7 = __dst[34];
    if ((sub_18324BC90(__dst[33], __dst[34]) & 1) != 0)
    {
      result = swift_bridgeObjectRetain();
    }
    else
    {
      sub_18328212C(__dst);
      sub_18324C148(v5, v4);
      v8 = sub_1832FE3D0(v6, v7);
      v10 = v9;
      sub_18324C184(v5, v4);
      result = (uint64_t)sub_1832CF378(__dst);
      v6 = v8;
      v7 = v10;
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t HTTPRequest.extendedConnectProtocol.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (_QWORD *)v2;
  if (!a2)
  {
    result = sub_18324C184(*(_QWORD *)(v2 + 224), *(_QWORD *)(v2 + 232));
    *(_QWORD *)(v2 + 272) = 0;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    return result;
  }
  v4 = a2;
  v5 = a1;
  v6 = v3[29];
  if (v6)
  {
    v7 = v3[28];
    v17 = v3[30];
    v15 = v3[31];
    v16 = v3[32];
    if ((sub_18324BC90(a1, a2) & 1) != 0)
    {
      sub_18324C148(v7, v6);
    }
    else
    {
      sub_18324C148(v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
      sub_183312424();
      sub_183B91794();
      swift_bridgeObjectRelease();
      v5 = 0;
      v4 = 0xE000000000000000;
    }
    v9 = sub_18327D86C(v5, v4);
    v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17 == 0x6F636F746F72703ALL && v15 == 0xE90000000000006CLL)
    {
      v13 = v16;
      result = sub_18324C184(v7, v6);
    }
    else
    {
      v14 = sub_183B920F4();
      v13 = v16;
      result = sub_18324C184(v7, v6);
      if ((v14 & 1) == 0)
      {
        __break(1u);
        return result;
      }
    }
    v3[28] = v7;
    v3[29] = v6;
    v3[30] = v17;
    v3[31] = v15;
    v3[32] = v13;
  }
  else
  {
    if ((sub_18324BC90(a1, a2) & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
      sub_183312424();
      sub_183B91794();
      swift_bridgeObjectRelease();
      v5 = 0;
      v4 = 0xE000000000000000;
    }
    v9 = sub_18327D86C(v5, v4);
    v11 = v10;
    result = swift_bridgeObjectRelease();
    *((_OWORD *)v3 + 14) = xmmword_183BA5860;
    *((_OWORD *)v3 + 15) = xmmword_183BA5860;
    v3[32] = 0;
  }
  v3[33] = v9;
  v3[34] = v11;
  return result;
}

uint64_t (*HTTPRequest.extendedConnectProtocol.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  a1[2] = (unint64_t)v1;
  v3 = v1[29];
  if (v3)
  {
    v4 = v1[28];
    v5 = v1[33];
    v6 = v1[34];
    if ((sub_18324BC90(v5, v6) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_18324C148(v4, v3);
      v7 = sub_1832FE3D0(v5, v6);
      v9 = v8;
      sub_18324C184(v4, v3);
      v5 = v7;
      v6 = v9;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *a1 = v5;
  a1[1] = v6;
  return sub_18331376C;
}

uint64_t sub_18331376C(uint64_t *a1, char a2)
{
  return sub_183313778(a1, a2, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.extendedConnectProtocol.setter);
}

uint64_t sub_183313778(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v5 = *a1;
  v4 = a1[1];
  if ((a2 & 1) == 0)
    return a3(*a1, v4);
  swift_bridgeObjectRetain();
  a3(v5, v4);
  return swift_bridgeObjectRelease();
}

uint64_t HTTPRequest.PseudoHeaderFields.method.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = *((_BYTE *)v1 + 32);
  v7 = v1[5];
  v8 = v1[6];
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_183313824(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v11[0] = *(_QWORD *)a1;
  v4 = v11[0];
  v11[1] = v3;
  v11[2] = v6;
  v11[3] = v5;
  v12 = v7;
  v13 = v9;
  v14 = v8;
  sub_1833138E0(v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v5;
  *(_BYTE *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v8;
  return result;
}

uint64_t sub_1833138E0(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;

  result = a1[2];
  v3 = a1[5];
  v4 = a1[6];
  if (result != 0x646F6874656D3ALL || a1[3] != 0xE700000000000000)
  {
    result = sub_183B920F4();
    if ((result & 1) == 0)
      goto LABEL_13;
  }
  v6 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  if (!v6)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = sub_18329D8B4(v3, v4);
  if ((result & 1) == 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

void (*HTTPRequest.PseudoHeaderFields.method.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  v5 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v7 = v1[3];
  v8 = *((_BYTE *)v1 + 32);
  v9 = v1[5];
  v10 = v1[6];
  *v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  *((_BYTE *)v3 + 32) = v8;
  v3[5] = v9;
  v3[6] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_183313A08;
}

void sub_183313A08(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v15 = *((_BYTE *)*a1 + 32);
  v7 = (*a1)[5];
  v8 = (*a1)[6];
  v10 = v5 == 0x646F6874656D3ALL && v6 == 0xE700000000000000;
  if ((a2 & 1) != 0)
  {
    if (!v10 && (sub_183B920F4() & 1) == 0)
      goto LABEL_27;
    v11 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v11 = v7 & 0xFFFFFFFFFFFFLL;
    if (v11)
    {
      if ((sub_18329D8B4(v7, v8) & 1) != 0)
      {
        v12 = v2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)v12 = v4;
        *(_QWORD *)(v12 + 8) = v3;
        *(_QWORD *)(v12 + 16) = v5;
        *(_QWORD *)(v12 + 24) = v6;
        *(_BYTE *)(v12 + 32) = v15;
        *(_QWORD *)(v12 + 40) = v7;
        *(_QWORD *)(v12 + 48) = v8;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_22:
        free(v2);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    if (!v10 && (sub_183B920F4() & 1) == 0)
      goto LABEL_28;
    v13 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v13 = v7 & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      if ((sub_18329D8B4(v7, v8) & 1) != 0)
      {
        v14 = v2[7];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)v14 = v4;
        *(_QWORD *)(v14 + 8) = v3;
        *(_QWORD *)(v14 + 16) = v5;
        *(_QWORD *)(v14 + 24) = v6;
        *(_BYTE *)(v14 + 32) = v15;
        *(_QWORD *)(v14 + 40) = v7;
        *(_QWORD *)(v14 + 48) = v8;
        goto LABEL_22;
      }
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t HTTPRequest.PseudoHeaderFields.scheme.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[7];
  v3 = v1[8];
  v4 = v1[9];
  v5 = v1[10];
  v6 = v1[11];
  v7 = v1[12];
  v8 = v1[13];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_18324C148(v2, v3);
}

uint64_t sub_183313C28@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[7];
  v2 = a1[8];
  v4 = a1[9];
  v5 = a1[10];
  v6 = a1[11];
  v7 = a1[12];
  v8 = a1[13];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  return sub_18324C148(v3, v2);
}

uint64_t sub_183313C50(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  if (!v3)
    goto LABEL_7;
  if (v5 == 0x656D656863733ALL && v6 == 0xE700000000000000)
    goto LABEL_7;
  v11 = a1[2];
  v12 = a1[3];
  v13 = a1[4];
  v14 = a1[5];
  v15 = a1[6];
  result = sub_183B920F4();
  v9 = v15;
  v8 = v14;
  v7 = v13;
  v6 = v12;
  v5 = v11;
  if ((result & 1) != 0)
  {
LABEL_7:
    v17 = a2[7];
    v18 = a2[8];
    v27 = v3;
    v19 = v4;
    v20 = v3;
    v21 = v4;
    v22 = v5;
    v23 = v6;
    v24 = v7;
    v25 = v8;
    v26 = v9;
    sub_18324C148(v19, v20);
    result = sub_18324C184(v17, v18);
    a2[7] = v21;
    a2[8] = v27;
    a2[9] = v22;
    a2[10] = v23;
    a2[11] = v24;
    a2[12] = v25;
    a2[13] = v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*HTTPRequest.PseudoHeaderFields.scheme.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = v1[7];
  v5 = v1[8];
  v6 = v1[9];
  v7 = v1[10];
  v8 = v1[11];
  v9 = v1[12];
  v10 = v1[13];
  *v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  v3[4] = v8;
  v3[5] = v9;
  v3[6] = v10;
  v3[7] = v1;
  sub_18324C148(v4, v5);
  return sub_183313E08;
}

void sub_183313E08(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v8 = (*a1)[4];
  v7 = (*a1)[5];
  v9 = (*a1)[6];
  if ((a2 & 1) != 0)
  {
    if (!v3
      || (v5 == 0x656D656863733ALL ? (v10 = v6 == 0xE700000000000000) : (v10 = 0), v10 || (sub_183B920F4() & 1) != 0))
    {
      v11 = (_QWORD *)v2[7];
      v12 = v11[8];
      v15 = v11[7];
      sub_18324C148(v4, v3);
      sub_18324C184(v15, v12);
      v11[7] = v4;
      v11[8] = v3;
      v11[9] = v5;
      v11[10] = v6;
      v11[11] = v8;
      v11[12] = v7;
      v11[13] = v9;
      sub_18324C184(*v2, v2[1]);
LABEL_16:
      free(v2);
      return;
    }
    __break(1u);
  }
  else if (!v3
         || (v5 == 0x656D656863733ALL ? (v13 = v6 == 0xE700000000000000) : (v13 = 0), v13
                                                                                     || (sub_183B920F4() & 1) != 0))
  {
    v14 = (uint64_t *)v2[7];
    sub_18324C184(v14[7], v14[8]);
    v14[7] = v4;
    v14[8] = v3;
    v14[9] = v5;
    v14[10] = v6;
    v14[11] = v8;
    v14[12] = v7;
    v14[13] = v9;
    goto LABEL_16;
  }
  __break(1u);
}

uint64_t HTTPRequest.PseudoHeaderFields.authority.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[14];
  v3 = v1[15];
  v4 = v1[16];
  v5 = v1[17];
  v6 = v1[18];
  v7 = v1[19];
  v8 = v1[20];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_18324C148(v2, v3);
}

uint64_t sub_183313FD4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[14];
  v2 = a1[15];
  v4 = a1[16];
  v5 = a1[17];
  v6 = a1[18];
  v7 = a1[19];
  v8 = a1[20];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  return sub_18324C148(v3, v2);
}

uint64_t sub_183313FFC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  if (!v3)
    goto LABEL_7;
  if (v5 == 0x69726F687475613ALL && v6 == 0xEA00000000007974)
    goto LABEL_7;
  v11 = a1[2];
  v12 = a1[3];
  v13 = a1[4];
  v14 = a1[5];
  v15 = a1[6];
  result = sub_183B920F4();
  v9 = v15;
  v8 = v14;
  v7 = v13;
  v6 = v12;
  v5 = v11;
  if ((result & 1) != 0)
  {
LABEL_7:
    v17 = a2[14];
    v18 = a2[15];
    v19 = v4;
    v20 = v3;
    v27 = v3;
    v21 = v4;
    v22 = v5;
    v23 = v6;
    v24 = v7;
    v25 = v8;
    v26 = v9;
    sub_18324C148(v19, v20);
    result = sub_18324C184(v17, v18);
    a2[14] = v21;
    a2[15] = v27;
    a2[16] = v22;
    a2[17] = v23;
    a2[18] = v24;
    a2[19] = v25;
    a2[20] = v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*HTTPRequest.PseudoHeaderFields.authority.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = v1[14];
  v5 = v1[15];
  v6 = v1[16];
  v7 = v1[17];
  v8 = v1[18];
  v9 = v1[19];
  v10 = v1[20];
  *v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  v3[4] = v8;
  v3[5] = v9;
  v3[6] = v10;
  v3[7] = v1;
  sub_18324C148(v4, v5);
  return sub_1833141B8;
}

void sub_1833141B8(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v8 = (*a1)[4];
  v7 = (*a1)[5];
  v9 = (*a1)[6];
  if ((a2 & 1) != 0)
  {
    if (!v3
      || (v5 == 0x69726F687475613ALL ? (v10 = v6 == 0xEA00000000007974) : (v10 = 0), v10 || (sub_183B920F4() & 1) != 0))
    {
      v11 = (_QWORD *)v2[7];
      v12 = v11[15];
      v15 = v11[14];
      sub_18324C148(v4, v3);
      sub_18324C184(v15, v12);
      v11[14] = v4;
      v11[15] = v3;
      v11[16] = v5;
      v11[17] = v6;
      v11[18] = v8;
      v11[19] = v7;
      v11[20] = v9;
      sub_18324C184(*v2, v2[1]);
LABEL_16:
      free(v2);
      return;
    }
    __break(1u);
  }
  else if (!v3
         || (v5 == 0x69726F687475613ALL ? (v13 = v6 == 0xEA00000000007974) : (v13 = 0),
             v13 || (sub_183B920F4() & 1) != 0))
  {
    v14 = (uint64_t *)v2[7];
    sub_18324C184(v14[14], v14[15]);
    v14[14] = v4;
    v14[15] = v3;
    v14[16] = v5;
    v14[17] = v6;
    v14[18] = v8;
    v14[19] = v7;
    v14[20] = v9;
    goto LABEL_16;
  }
  __break(1u);
}

uint64_t HTTPRequest.PseudoHeaderFields.path.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[21];
  v3 = v1[22];
  v4 = v1[23];
  v5 = v1[24];
  v6 = v1[25];
  v7 = v1[26];
  v8 = v1[27];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_18324C148(v2, v3);
}

uint64_t sub_183314394@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[21];
  v2 = a1[22];
  v4 = a1[23];
  v5 = a1[24];
  v6 = a1[25];
  v7 = a1[26];
  v8 = a1[27];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  return sub_18324C148(v3, v2);
}

uint64_t sub_1833143BC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  if (!v3)
    goto LABEL_7;
  if (v5 == 0x687461703ALL && v6 == 0xE500000000000000)
    goto LABEL_7;
  v11 = a1[2];
  v12 = a1[3];
  v13 = a1[4];
  v14 = a1[5];
  v15 = a1[6];
  result = sub_183B920F4();
  v9 = v15;
  v8 = v14;
  v7 = v13;
  v6 = v12;
  v5 = v11;
  if ((result & 1) != 0)
  {
LABEL_7:
    v17 = a2[21];
    v18 = a2[22];
    v27 = v3;
    v19 = v4;
    v20 = v3;
    v21 = v4;
    v22 = v5;
    v23 = v6;
    v24 = v7;
    v25 = v8;
    v26 = v9;
    sub_18324C148(v19, v20);
    result = sub_18324C184(v17, v18);
    a2[21] = v21;
    a2[22] = v27;
    a2[23] = v22;
    a2[24] = v23;
    a2[25] = v24;
    a2[26] = v25;
    a2[27] = v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*HTTPRequest.PseudoHeaderFields.path.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = v1[21];
  v5 = v1[22];
  v6 = v1[23];
  v7 = v1[24];
  v8 = v1[25];
  v9 = v1[26];
  v10 = v1[27];
  *v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  v3[4] = v8;
  v3[5] = v9;
  v3[6] = v10;
  v3[7] = v1;
  sub_18324C148(v4, v5);
  return sub_18331456C;
}

void sub_18331456C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v8 = (*a1)[4];
  v7 = (*a1)[5];
  v9 = (*a1)[6];
  if ((a2 & 1) != 0)
  {
    if (!v3
      || (v5 == 0x687461703ALL ? (v10 = v6 == 0xE500000000000000) : (v10 = 0), v10 || (sub_183B920F4() & 1) != 0))
    {
      v11 = (_QWORD *)v2[7];
      v12 = v11[22];
      v15 = v11[21];
      sub_18324C148(v4, v3);
      sub_18324C184(v15, v12);
      v11[21] = v4;
      v11[22] = v3;
      v11[23] = v5;
      v11[24] = v6;
      v11[25] = v8;
      v11[26] = v7;
      v11[27] = v9;
      sub_18324C184(*v2, v2[1]);
LABEL_16:
      free(v2);
      return;
    }
    __break(1u);
  }
  else if (!v3
         || (v5 == 0x687461703ALL ? (v13 = v6 == 0xE500000000000000) : (v13 = 0), v13 || (sub_183B920F4() & 1) != 0))
  {
    v14 = (uint64_t *)v2[7];
    sub_18324C184(v14[21], v14[22]);
    v14[21] = v4;
    v14[22] = v3;
    v14[23] = v5;
    v14[24] = v6;
    v14[25] = v8;
    v14[26] = v7;
    v14[27] = v9;
    goto LABEL_16;
  }
  __break(1u);
}

uint64_t HTTPRequest.PseudoHeaderFields.extendedConnectProtocol.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[28];
  v3 = v1[29];
  v4 = v1[30];
  v5 = v1[31];
  v6 = v1[32];
  v7 = v1[33];
  v8 = v1[34];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_18324C148(v2, v3);
}

uint64_t sub_183314728@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[28];
  v2 = a1[29];
  v4 = a1[30];
  v5 = a1[31];
  v6 = a1[32];
  v7 = a1[33];
  v8 = a1[34];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  return sub_18324C148(v3, v2);
}

uint64_t sub_183314750(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  if (!v3)
    goto LABEL_7;
  if (v5 == 0x6F636F746F72703ALL && v6 == 0xE90000000000006CLL)
    goto LABEL_7;
  v11 = a1[2];
  v12 = a1[3];
  v13 = a1[4];
  v14 = a1[5];
  v15 = a1[6];
  result = sub_183B920F4();
  v9 = v15;
  v8 = v14;
  v7 = v13;
  v6 = v12;
  v5 = v11;
  if ((result & 1) != 0)
  {
LABEL_7:
    v17 = a2[28];
    v18 = a2[29];
    v19 = v4;
    v20 = v3;
    v27 = v3;
    v21 = v4;
    v22 = v5;
    v23 = v6;
    v24 = v7;
    v25 = v8;
    v26 = v9;
    sub_18324C148(v19, v20);
    result = sub_18324C184(v17, v18);
    a2[28] = v21;
    a2[29] = v27;
    a2[30] = v22;
    a2[31] = v23;
    a2[32] = v24;
    a2[33] = v25;
    a2[34] = v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*HTTPRequest.PseudoHeaderFields.extendedConnectProtocol.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = v1[28];
  v5 = v1[29];
  v6 = v1[30];
  v7 = v1[31];
  v8 = v1[32];
  v9 = v1[33];
  v10 = v1[34];
  *v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  v3[4] = v8;
  v3[5] = v9;
  v3[6] = v10;
  v3[7] = v1;
  sub_18324C148(v4, v5);
  return sub_18331490C;
}

void sub_18331490C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v8 = (*a1)[4];
  v7 = (*a1)[5];
  v9 = (*a1)[6];
  if ((a2 & 1) != 0)
  {
    if (!v3
      || (v5 == 0x6F636F746F72703ALL ? (v10 = v6 == 0xE90000000000006CLL) : (v10 = 0), v10 || (sub_183B920F4() & 1) != 0))
    {
      v11 = (_QWORD *)v2[7];
      v12 = v11[29];
      v15 = v11[28];
      sub_18324C148(v4, v3);
      sub_18324C184(v15, v12);
      v11[28] = v4;
      v11[29] = v3;
      v11[30] = v5;
      v11[31] = v6;
      v11[32] = v8;
      v11[33] = v7;
      v11[34] = v9;
      sub_18324C184(*v2, v2[1]);
LABEL_16:
      free(v2);
      return;
    }
    __break(1u);
  }
  else if (!v3
         || (v5 == 0x6F636F746F72703ALL ? (v13 = v6 == 0xE90000000000006CLL) : (v13 = 0),
             v13 || (sub_183B920F4() & 1) != 0))
  {
    v14 = (uint64_t *)v2[7];
    sub_18324C184(v14[28], v14[29]);
    v14[28] = v4;
    v14[29] = v3;
    v14[30] = v5;
    v14[31] = v6;
    v14[32] = v8;
    v14[33] = v7;
    v14[34] = v9;
    goto LABEL_16;
  }
  __break(1u);
}

uint64_t HTTPRequest.PseudoHeaderFields.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0[8];
  v6 = v0[7];
  v7 = v0[14];
  v10 = v0[15];
  v8 = v0[21];
  v11 = v0[22];
  v12 = v0[29];
  v9 = v0[28];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183B92268();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v1)
  {
    sub_183B92268();
    sub_18324C148(v6, v1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_183B917C4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_183B92268();
    swift_bridgeObjectRetain();
    sub_183B917C4();
    swift_bridgeObjectRelease();
    sub_18324C184(v6, v1);
    v3 = v10;
    v2 = v11;
    if (v10)
      goto LABEL_3;
  }
  else
  {
    sub_183B92268();
    v3 = v10;
    v2 = v11;
    if (v10)
    {
LABEL_3:
      sub_183B92268();
      sub_18324C148(v7, v3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183B92268();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      sub_18324C184(v7, v3);
      if (v2)
        goto LABEL_4;
LABEL_8:
      sub_183B92268();
      v4 = v12;
      if (v12)
        goto LABEL_5;
      return sub_183B92268();
    }
  }
  sub_183B92268();
  if (!v2)
    goto LABEL_8;
LABEL_4:
  sub_183B92268();
  sub_18324C148(v8, v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183B92268();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  sub_18324C184(v8, v2);
  v4 = v12;
  if (v12)
  {
LABEL_5:
    sub_183B92268();
    sub_18324C148(v9, v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_183B917C4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_183B92268();
    swift_bridgeObjectRetain();
    sub_183B917C4();
    swift_bridgeObjectRelease();
    return sub_18324C184(v9, v4);
  }
  return sub_183B92268();
}

uint64_t HTTPRequest.PseudoHeaderFields.hashValue.getter()
{
  sub_183B92250();
  HTTPRequest.PseudoHeaderFields.hash(into:)();
  return sub_183B9228C();
}

uint64_t sub_183314FB8()
{
  sub_183B92250();
  HTTPRequest.PseudoHeaderFields.hash(into:)();
  return sub_183B9228C();
}

uint64_t sub_183314FF8()
{
  sub_183B92250();
  HTTPRequest.PseudoHeaderFields.hash(into:)();
  return sub_183B9228C();
}

_QWORD *HTTPRequest.pseudoHeaderFields.getter@<X0>(void *a1@<X8>)
{
  const void *v1;
  _QWORD v4[36];

  memcpy(v4, v1, 0x118uLL);
  memcpy(a1, v1, 0x118uLL);
  return sub_183317734(v4);
}

void *HTTPRequest.pseudoHeaderFields.setter(const void *a1)
{
  void *v1;
  _QWORD v4[36];

  memcpy(v4, v1, 0x118uLL);
  sub_183317888(v4);
  return memcpy(v1, a1, 0x118uLL);
}

uint64_t (*HTTPRequest.pseudoHeaderFields.modify())()
{
  return nullsub_1;
}

uint64_t HTTPRequest.headerFields.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 280);
  return swift_retain();
}

uint64_t HTTPRequest.headerFields.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 280) = v2;
  return result;
}

uint64_t (*HTTPRequest.headerFields.modify())()
{
  return nullsub_1;
}

uint64_t HTTPRequest.hash(into:)()
{
  HTTPRequest.PseudoHeaderFields.hash(into:)();
  swift_retain();
  sub_1832911D4();
  return swift_release();
}

uint64_t HTTPRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 280);
  sub_183B92250();
  HTTPRequest.PseudoHeaderFields.hash(into:)();
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = v2 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183B92268();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 += 64;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  return sub_183B9228C();
}

uint64_t sub_183315298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 280);
  HTTPRequest.PseudoHeaderFields.hash(into:)();
  result = swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = v3 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183B92268();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v5 += 64;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1833153B4()
{
  sub_183B92250();
  HTTPRequest.PseudoHeaderFields.hash(into:)();
  sub_1832911D4();
  return sub_183B9228C();
}

uint64_t HTTPRequest.debugDescription.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[7];
  v2 = v0[8];
  v4 = v0[12];
  v3 = v0[13];
  v11 = v0[14];
  v5 = v0[20];
  v14 = v0[19];
  v15 = v0[15];
  v16 = v0[22];
  v12 = v0[21];
  v6 = v0[27];
  v13 = v0[26];
  swift_bridgeObjectRetain();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  sub_183B917F4();
  if (v2)
  {
    if ((sub_18324BC90(v4, v3) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_18324C148(v1, v2);
      sub_1832FE3D0(v4, v3);
      sub_18324C184(v1, v2);
    }
    v8 = v15;
    v7 = v16;
    v9 = v14;
    swift_bridgeObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = v15;
    v7 = v16;
    v9 = v14;
  }
  sub_183B917F4();
  swift_bridgeObjectRelease();
  if (v8)
  {
    if ((sub_18324BC90(v9, v5) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_18324C148(v11, v8);
      sub_1832FE3D0(v9, v5);
      v7 = v16;
      sub_18324C184(v11, v8);
    }
  }
  sub_183B917F4();
  swift_bridgeObjectRelease();
  if (v7)
  {
    if ((sub_18324BC90(v13, v6) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_18324C148(v12, v7);
      sub_1832FE3D0(v13, v6);
      sub_18324C184(v12, v7);
    }
  }
  sub_183B917F4();
  swift_bridgeObjectRelease();
  return 40;
}

uint64_t HTTPRequest.PseudoHeaderFields.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  uint64_t v8;
  uint64_t v9;

  v9 = v1[8];
  v6 = v1[15];
  v5 = v1[22];
  v4 = v1[29];
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183B922F8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
  sub_1832985C4();
  sub_183B920C4();
  if (!v2)
  {
    if (v9)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_183B920C4();
    }
    if (v6)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_183B920C4();
    }
    if (v5)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_183B920C4();
    }
    if (v4)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_183B920C4();
    }
  }
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v7);
}

uint64_t HTTPRequest.PseudoHeaderFields.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD v63[3];
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;

  v3 = a1;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183B922C8();
  if (v2)
    goto LABEL_68;
  __swift_project_boxed_opaque_existential_2(v63, v64);
  if ((sub_183B920AC() & 1) != 0)
  {
    v49 = 0;
    v50 = 0;
    v66 = 0;
    v44 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
LABEL_4:
    sub_18324C184(v9, v8);
    sub_18324C184(v7, v6);
    sub_18324C184(v5, v44);
    sub_18324C184(v49, v50);
    sub_18324A894((uint64_t)v63, (uint64_t)&v56);
    sub_183B91E54();
    swift_allocError();
    sub_183B91E30();
    __swift_destroy_boxed_opaque_existential_2((uint64_t)&v56);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v63);
    goto LABEL_68;
  }
  v21 = (uint64_t)v3;
  v41 = 0;
  v42 = 0;
  v39 = 0;
  v40 = 0;
  v37 = 0;
  v38 = 0;
  v43 = 0;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v51 = 0;
  v52 = 0;
  v49 = 0;
  v50 = 0;
  v47 = 0;
  v48 = 0;
  v10 = 0;
  v45 = 0;
  v46 = 0;
  v44 = 0;
  v35 = 0;
  v36 = 0;
  v33 = 0;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
LABEL_6:
  v66 = v10;
  do
  {
    while (1)
    {
      while (1)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v63, v64);
        sub_183298608();
        sub_183B920A0();
        v11 = v59;
        v13 = v61;
        v12 = v62;
        if (v58 != 0x646F6874656D3ALL || v59 != 0xE700000000000000)
          break;
        v11 = 0xE700000000000000;
LABEL_28:
        sub_18324C184(v37, v43);
        if (v43)
        {
          sub_18324C184(v22, v23);
          sub_18324C184(v29, v30);
          sub_18324C184(v36, v44);
          sub_18324C184(v49, v50);
          sub_18324A894((uint64_t)v63, (uint64_t)&v56);
          sub_183B91E54();
          swift_allocError();
          goto LABEL_65;
        }
        __swift_project_boxed_opaque_existential_2(v63, v64);
        v41 = v61;
        v42 = v62;
        v39 = v11;
        v40 = v60;
        v37 = v56;
        v38 = v58;
        v43 = v57;
        if ((sub_183B920AC() & 1) != 0)
        {
          v37 = v56;
          v38 = v58;
          v42 = v62;
          v43 = v57;
          v39 = v11;
          v40 = v60;
          v41 = v61;
          goto LABEL_53;
        }
      }
      if ((sub_183B920F4() & 1) != 0)
        goto LABEL_28;
      if (v58 == 0x656D656863733ALL && v59 == 0xE700000000000000)
        break;
      if ((sub_183B920F4() & 1) != 0)
        goto LABEL_32;
      if (v58 == 0x69726F687475613ALL && v59 == 0xEA00000000007974)
      {
        v11 = 0xEA00000000007974;
LABEL_36:
        sub_18324C184(v36, v44);
        if (v44)
        {
          sub_18324C184(v22, v23);
          sub_18324C184(v29, v30);
          sub_18324C184(v49, v50);
          sub_18324C184(v37, v43);
          sub_18324A894((uint64_t)v63, (uint64_t)&v56);
          sub_183B91E54();
          swift_allocError();
          goto LABEL_65;
        }
        v66 = v65;
        __swift_project_boxed_opaque_existential_2(v63, v64);
        v47 = v60;
        v48 = v62;
        v10 = v61;
        v45 = v58;
        v46 = v11;
        v44 = v57;
        v36 = v56;
        if ((sub_183B920AC() & 1) == 0)
          goto LABEL_6;
        v36 = v56;
        v44 = v57;
        v45 = v58;
        v46 = v11;
        v47 = v60;
        v10 = v61;
        v48 = v62;
        goto LABEL_54;
      }
      if ((sub_183B920F4() & 1) != 0)
        goto LABEL_36;
      if (v58 == 0x687461703ALL && v59 == 0xE500000000000000)
      {
        v11 = 0xE500000000000000;
LABEL_40:
        sub_18324C184(v29, v30);
        if (v30)
        {
          sub_18324C184(v22, v23);
          sub_18324C184(v36, v44);
          sub_18324C184(v49, v50);
          sub_18324C184(v37, v43);
          sub_18324A894((uint64_t)v63, (uint64_t)&v56);
          sub_183B91E54();
          swift_allocError();
          goto LABEL_65;
        }
        __swift_project_boxed_opaque_existential_2(v63, v64);
        v16 = sub_183B920AC();
        v34 = v61;
        v35 = v62;
        v32 = v11;
        v33 = v60;
        v30 = v57;
        v31 = v58;
        v29 = v56;
        v10 = v66;
        if ((v16 & 1) == 0)
          goto LABEL_6;
        v29 = v56;
        v30 = v57;
        v31 = v58;
        v32 = v11;
        v33 = v60;
        v34 = v61;
        v35 = v62;
        goto LABEL_54;
      }
      if ((sub_183B920F4() & 1) != 0)
        goto LABEL_40;
      if (v58 == 0x6F636F746F72703ALL && v59 == 0xE90000000000006CLL)
      {
        v11 = 0xE90000000000006CLL;
LABEL_44:
        sub_18324C184(v22, v23);
        if (!v23)
        {
          __swift_project_boxed_opaque_existential_2(v63, v64);
          v17 = sub_183B920AC();
          v27 = v61;
          v28 = v62;
          v25 = v11;
          v26 = v60;
          v23 = v57;
          v24 = v58;
          v22 = v56;
          v10 = v66;
          if ((v17 & 1) == 0)
            goto LABEL_6;
          goto LABEL_54;
        }
        sub_18324C184(v29, v30);
        sub_18324C184(v36, v44);
        sub_18324C184(v49, v50);
        sub_18324C184(v37, v43);
        sub_18324A894((uint64_t)v63, (uint64_t)&v56);
        sub_183B91E54();
        swift_allocError();
LABEL_65:
        sub_183B91E30();
LABEL_66:
        __swift_destroy_boxed_opaque_existential_2((uint64_t)&v56);
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_67;
      }
      if ((sub_183B920F4() & 1) != 0)
        goto LABEL_44;
      swift_bridgeObjectRetain();
      v15 = sub_183B91860();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
        sub_18324C184(v22, v23);
        sub_18324C184(v29, v30);
        sub_18324C184(v36, v44);
        sub_18324C184(v49, v50);
        sub_18324C184(v37, v43);
        sub_18324A894((uint64_t)v63, (uint64_t)&v56);
        sub_183B91DB8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_183B917F4();
        if ((sub_18324BC90(v13, v12) & 1) != 0)
        {
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1832FE3D0(v13, v12);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_183B917F4();
        swift_bridgeObjectRelease();
        sub_183B917F4();
        swift_bridgeObjectRelease();
        sub_183B917F4();
        sub_183B91E54();
        swift_allocError();
        sub_183B91E30();
        swift_bridgeObjectRelease();
        goto LABEL_66;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_2(v63, v64);
      if ((sub_183B920AC() & 1) != 0)
        goto LABEL_53;
    }
    v11 = 0xE700000000000000;
LABEL_32:
    sub_18324C184(v49, v50);
    if (v50)
    {
      sub_18324C184(v22, v23);
      sub_18324C184(v29, v30);
      sub_18324C184(v36, v44);
      sub_18324C184(v37, v43);
      sub_18324A894((uint64_t)v63, (uint64_t)&v56);
      sub_183B91E54();
      swift_allocError();
      goto LABEL_65;
    }
    __swift_project_boxed_opaque_existential_2(v63, v64);
    v54 = v61;
    v55 = v62;
    v53 = v60;
    v51 = v58;
    v52 = v11;
    v49 = v56;
    v50 = v57;
  }
  while ((sub_183B920AC() & 1) == 0);
  v49 = v56;
  v50 = v57;
  v51 = v58;
  v52 = v11;
  v53 = v60;
  v54 = v61;
  v55 = v62;
LABEL_53:
  v10 = v66;
LABEL_54:
  if (!v43)
  {
    v3 = (_QWORD *)v21;
    v66 = v10;
    v5 = v36;
    v7 = v29;
    v6 = v30;
    v8 = v23;
    v9 = v22;
    goto LABEL_4;
  }
  v18 = HIBYTE(v42) & 0xF;
  if ((v42 & 0x2000000000000000) == 0)
    v18 = v41 & 0xFFFFFFFFFFFFLL;
  if (v18 && (sub_18329D8B4(v41, v42) & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v63);
    *(_QWORD *)a2 = v37;
    *(_QWORD *)(a2 + 8) = v43;
    *(_QWORD *)(a2 + 16) = v38;
    *(_QWORD *)(a2 + 24) = v39;
    *(_BYTE *)(a2 + 32) = v40;
    *(_QWORD *)(a2 + 40) = v41;
    *(_QWORD *)(a2 + 48) = v42;
    *(_QWORD *)(a2 + 56) = v49;
    *(_QWORD *)(a2 + 64) = v50;
    *(_QWORD *)(a2 + 72) = v51;
    *(_QWORD *)(a2 + 80) = v52;
    *(_QWORD *)(a2 + 88) = v53;
    *(_QWORD *)(a2 + 96) = v54;
    *(_QWORD *)(a2 + 104) = v55;
    *(_QWORD *)(a2 + 112) = v36;
    *(_QWORD *)(a2 + 120) = v44;
    *(_QWORD *)(a2 + 128) = v45;
    *(_QWORD *)(a2 + 136) = v46;
    *(_QWORD *)(a2 + 144) = v47;
    *(_QWORD *)(a2 + 152) = v10;
    *(_QWORD *)(a2 + 160) = v48;
    *(_QWORD *)(a2 + 168) = v29;
    *(_QWORD *)(a2 + 176) = v30;
    *(_QWORD *)(a2 + 184) = v31;
    *(_QWORD *)(a2 + 192) = v32;
    *(_QWORD *)(a2 + 200) = v33;
    *(_QWORD *)(a2 + 208) = v34;
    v19 = v21;
    *(_QWORD *)(a2 + 216) = v35;
    *(_QWORD *)(a2 + 224) = v22;
    *(_QWORD *)(a2 + 232) = v23;
    *(_QWORD *)(a2 + 240) = v24;
    *(_QWORD *)(a2 + 248) = v25;
    *(_QWORD *)(a2 + 256) = v26;
    *(_QWORD *)(a2 + 264) = v27;
    *(_QWORD *)(a2 + 272) = v28;
    return __swift_destroy_boxed_opaque_existential_2(v19);
  }
  sub_18324C184(v22, v23);
  sub_18324C184(v29, v30);
  sub_18324C184(v36, v44);
  sub_18324C184(v49, v50);
  sub_18324A894((uint64_t)v63, (uint64_t)&v56);
  sub_183B91DB8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_183B917F4();
  sub_18324C184(v37, v43);
  swift_bridgeObjectRelease();
  sub_183B917F4();
  sub_183B91E54();
  swift_allocError();
  sub_183B91E30();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_2((uint64_t)&v56);
  swift_willThrow();
LABEL_67:
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v63);
  v3 = (_QWORD *)v21;
LABEL_68:
  v19 = (uint64_t)v3;
  return __swift_destroy_boxed_opaque_existential_2(v19);
}

uint64_t sub_1833168D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return HTTPRequest.PseudoHeaderFields.init(from:)(a1, a2);
}

uint64_t sub_1833168E4(_QWORD *a1)
{
  return HTTPRequest.PseudoHeaderFields.encode(to:)(a1);
}

uint64_t sub_1833168F8(char *a1, char *a2)
{
  return sub_183310FC0(*a1, *a2);
}

uint64_t sub_183316904()
{
  sub_183B92250();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_183316990()
{
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1833169F8()
{
  sub_183B92250();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_183316A80@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_183B91FC8();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_183316ADC(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD000000000000012;
  if (*v1)
    v2 = 0x6946726564616568;
  v3 = 0x8000000183C6F5C0;
  if (*v1)
    v3 = 0xEC00000073646C65;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_183316B28()
{
  _BYTE *v0;

  if (*v0)
    return 0x6946726564616568;
  else
    return 0xD000000000000012;
}

uint64_t sub_183316B70@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_183B91FC8();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_183316BD0()
{
  sub_1833179DC();
  return sub_183B92334();
}

uint64_t sub_183316BF8()
{
  sub_1833179DC();
  return sub_183B92340();
}

uint64_t HTTPRequest.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[35];
  char v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDF0E0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v3[35];
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1833179DC();
  sub_183B9231C();
  memcpy(v12, v3, sizeof(v12));
  v13 = 0;
  sub_183317A20();
  sub_183B92064();
  if (!v2)
  {
    v12[0] = v11;
    v13 = 1;
    sub_1832DCFA4();
    sub_183B92064();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

_QWORD *HTTPRequest.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[36];
  _QWORD v14[36];
  uint64_t v15;
  _QWORD v16[35];
  _BYTE v17[280];
  _BYTE v18[304];

  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDF0F8);
  v5 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1833179DC();
  sub_183B922EC();
  if (v2)
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  v8 = a2;
  v18[303] = 0;
  sub_183317A64();
  v9 = v12;
  sub_183B92010();
  memcpy(v16, v17, sizeof(v16));
  memcpy(v18, v17, 0x118uLL);
  v18[302] = 1;
  sub_183317734(v16);
  sub_1832DD070();
  sub_183B92010();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v9);
  v10 = v15;
  memcpy(v13, v16, 0x118uLL);
  v13[35] = v15;
  sub_18328212C(v13);
  sub_183317888(v16);
  memcpy(v8, v13, 0x120uLL);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  memcpy(v14, v18, 0x118uLL);
  v14[35] = v10;
  return sub_1832CF378(v14);
}

_QWORD *sub_183316FBC@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return HTTPRequest.init(from:)(a1, a2);
}

uint64_t sub_183316FD0(_QWORD *a1)
{
  return HTTPRequest.encode(to:)(a1);
}

BOOL _s7Network11HTTPRequestV18PseudoHeaderFieldsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BOOL8 result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v2 = *(unsigned __int8 *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v70 = *(_QWORD *)(a1 + 56);
  v76 = *(_QWORD *)(a1 + 72);
  v78 = *(_QWORD *)(a1 + 80);
  v79 = *(_QWORD *)(a1 + 64);
  v74 = *(_QWORD *)(a1 + 96);
  v75 = *(_QWORD *)(a1 + 88);
  v77 = *(_QWORD *)(a1 + 104);
  v56 = *(_QWORD *)(a1 + 112);
  v71 = *(_QWORD *)(a1 + 120);
  v67 = *(_QWORD *)(a1 + 136);
  v64 = *(_QWORD *)(a1 + 144);
  v65 = *(_QWORD *)(a1 + 128);
  v60 = *(_QWORD *)(a1 + 152);
  v66 = *(_QWORD *)(a1 + 160);
  v43 = *(_QWORD *)(a1 + 168);
  v57 = *(_QWORD *)(a1 + 176);
  v53 = *(_QWORD *)(a1 + 192);
  v50 = *(_QWORD *)(a1 + 200);
  v51 = *(_QWORD *)(a1 + 184);
  v46 = *(_QWORD *)(a1 + 208);
  v52 = *(_QWORD *)(a1 + 216);
  v29 = *(_QWORD *)(a1 + 224);
  v38 = *(_QWORD *)(a1 + 240);
  v40 = *(_QWORD *)(a1 + 232);
  v41 = *(_QWORD *)(a1 + 248);
  v37 = *(_QWORD *)(a1 + 256);
  v32 = *(_QWORD *)(a1 + 264);
  v33 = *(_QWORD *)(a1 + 272);
  v5 = *(unsigned __int8 *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 64);
  v69 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  v72 = *(_QWORD *)(a2 + 104);
  v73 = *(_QWORD *)(a2 + 96);
  v55 = *(_QWORD *)(a2 + 112);
  v68 = *(_QWORD *)(a2 + 120);
  v62 = *(_QWORD *)(a2 + 128);
  v63 = *(_QWORD *)(a2 + 136);
  v61 = *(_QWORD *)(a2 + 144);
  v58 = *(_QWORD *)(a2 + 160);
  v59 = *(_QWORD *)(a2 + 152);
  v42 = *(_QWORD *)(a2 + 168);
  v54 = *(_QWORD *)(a2 + 176);
  v48 = *(_QWORD *)(a2 + 184);
  v49 = *(_QWORD *)(a2 + 192);
  v47 = *(_QWORD *)(a2 + 200);
  v44 = *(_QWORD *)(a2 + 216);
  v45 = *(_QWORD *)(a2 + 208);
  v28 = *(_QWORD *)(a2 + 224);
  v39 = *(_QWORD *)(a2 + 232);
  v35 = *(_QWORD *)(a2 + 240);
  v36 = *(_QWORD *)(a2 + 248);
  v34 = *(_QWORD *)(a2 + 256);
  v30 = *(_QWORD *)(a2 + 264);
  v31 = *(_QWORD *)(a2 + 272);
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    if (v2 != v5)
      return 0;
  }
  else
  {
    v12 = sub_183B920F4();
    result = 0;
    if ((v12 & 1) == 0 || v2 != v5)
      return result;
  }
  if (v3 != v6 || v4 != v7)
  {
    v14 = sub_183B920F4();
    result = 0;
    if ((v14 & 1) == 0)
      return result;
  }
  if (!v79)
  {
    if (!v8)
      goto LABEL_25;
LABEL_19:
    sub_18324C148(v69, v8);
    sub_18324C184(v70, v79);
    v15 = v69;
    v16 = v8;
LABEL_51:
    sub_18324C184(v15, v16);
    return 0;
  }
  if (!v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }
  if (v76 == v10 && v78 == v9)
  {
    if (v75 != v11)
      return 0;
  }
  else
  {
    v17 = sub_183B920F4();
    result = 0;
    if ((v17 & 1) == 0 || v75 != v11)
      return result;
  }
  if (v74 != v73 || v77 != v72)
  {
    v18 = sub_183B920F4();
    result = 0;
    if ((v18 & 1) == 0)
      return result;
  }
LABEL_25:
  if (!v71)
  {
    if (!v68)
    {
LABEL_40:
      if (v57)
      {
        if (v54)
        {
          if (v51 == v48 && v53 == v49)
          {
            if (v50 != v47)
              return 0;
          }
          else
          {
            v25 = sub_183B920F4();
            result = 0;
            if ((v25 & 1) == 0 || v50 != v47)
              return result;
          }
          if (v46 == v45 && v52 == v44)
            goto LABEL_59;
          v26 = sub_183B920F4();
          result = 0;
          if ((v26 & 1) != 0)
            goto LABEL_59;
          return result;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else if (!v54)
      {
LABEL_59:
        if (v40)
        {
          v27 = v39;
          if (v39)
            return (v38 == v35 && v41 == v36 || (sub_183B920F4() & 1) != 0)
                && v37 == v34
                && (v32 == v30 && v33 == v31 || (sub_183B920F4() & 1) != 0);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v27 = v39;
          if (!v39)
            return 1;
        }
        sub_18324C148(v28, v27);
        sub_18324C184(v29, v40);
        v15 = v28;
        v16 = v27;
        goto LABEL_51;
      }
      v19 = v42;
      v20 = v54;
      sub_18324C148(v42, v54);
      v21 = v43;
      v22 = v57;
      goto LABEL_50;
    }
LABEL_34:
    v19 = v55;
    v20 = v68;
    sub_18324C148(v55, v68);
    v21 = v56;
    v22 = v71;
LABEL_50:
    sub_18324C184(v21, v22);
    v15 = v19;
    v16 = v20;
    goto LABEL_51;
  }
  if (!v68)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_34;
  }
  if (v65 == v62 && v67 == v63)
  {
    if (v64 != v61)
      return 0;
  }
  else
  {
    v23 = sub_183B920F4();
    result = 0;
    if ((v23 & 1) == 0 || v64 != v61)
      return result;
  }
  if (v60 == v59 && v66 == v58)
    goto LABEL_40;
  v24 = sub_183B920F4();
  result = 0;
  if ((v24 & 1) != 0)
    goto LABEL_40;
  return result;
}

uint64_t _s7Network11HTTPRequestV2eeoiySbAC_ACtFZ_0(uint64_t *__src, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE v8[280];
  _BYTE __dst[280];

  memcpy(__dst, __src, sizeof(__dst));
  v4 = __src[35];
  memcpy(v8, a2, sizeof(v8));
  v5 = a2[35];
  if (!_s7Network11HTTPRequestV18PseudoHeaderFieldsV2eeoiySbAE_AEtFZ_0((uint64_t)__dst, (uint64_t)v8))
    return 0;
  swift_retain();
  swift_retain();
  v6 = sub_183297E78(v4, v5);
  swift_release();
  swift_release();
  return v6 & 1;
}

_QWORD *sub_183317734(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[7];
  v3 = a1[8];
  v5 = a1[15];
  v6 = a1[14];
  v7 = a1[22];
  v8 = a1[21];
  v9 = a1[29];
  v10 = a1[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_18324C148(v2, v3);
  sub_18324C148(v6, v5);
  sub_18324C148(v8, v7);
  sub_18324C148(v10, v9);
  return a1;
}

_QWORD *sub_183317888(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[7];
  v3 = a1[8];
  v5 = a1[15];
  v6 = a1[14];
  v7 = a1[22];
  v8 = a1[21];
  v9 = a1[29];
  v10 = a1[28];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18324C184(v2, v3);
  sub_18324C184(v6, v5);
  sub_18324C184(v8, v7);
  sub_18324C184(v10, v9);
  return a1;
}

unint64_t sub_1833179DC()
{
  unint64_t result;

  result = qword_1EDCDF0E8;
  if (!qword_1EDCDF0E8)
  {
    result = MEMORY[0x186DB5558](&unk_183BA7500, &type metadata for HTTPRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF0E8);
  }
  return result;
}

unint64_t sub_183317A20()
{
  unint64_t result;

  result = qword_1EDCDF0F0;
  if (!qword_1EDCDF0F0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPRequest.PseudoHeaderFields, &type metadata for HTTPRequest.PseudoHeaderFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDF0F0);
  }
  return result;
}

unint64_t sub_183317A64()
{
  unint64_t result;

  result = qword_1EDCDF100;
  if (!qword_1EDCDF100)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPRequest.PseudoHeaderFields, &type metadata for HTTPRequest.PseudoHeaderFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDF100);
  }
  return result;
}

unint64_t sub_183317AAC()
{
  unint64_t result;

  result = qword_1EDCDF108;
  if (!qword_1EDCDF108)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPRequest.Method, &type metadata for HTTPRequest.Method);
    atomic_store(result, (unint64_t *)&qword_1EDCDF108);
  }
  return result;
}

unint64_t sub_183317AF4()
{
  unint64_t result;

  result = qword_1EDCDF110;
  if (!qword_1EDCDF110)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPRequest.Method, &type metadata for HTTPRequest.Method);
    atomic_store(result, (unint64_t *)&qword_1EDCDF110);
  }
  return result;
}

unint64_t sub_183317B3C()
{
  unint64_t result;

  result = qword_1EDCDF118;
  if (!qword_1EDCDF118)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPRequest.PseudoHeaderFields, &type metadata for HTTPRequest.PseudoHeaderFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDF118);
  }
  return result;
}

unint64_t sub_183317B84()
{
  unint64_t result;

  result = qword_1EDCDF120;
  if (!qword_1EDCDF120)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPRequest, &type metadata for HTTPRequest);
    atomic_store(result, (unint64_t *)&qword_1EDCDF120);
  }
  return result;
}

uint64_t sub_183317BC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_183317BDC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.scheme.setter);
}

uint64_t sub_183317BEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.authority.setter);
}

uint64_t sub_183317BFC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.path.setter);
}

uint64_t sub_183317C0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.extendedConnectProtocol.setter);
}

uint64_t destroy for HTTPRequest(_QWORD *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[8])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[15])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[29])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t initializeWithCopy for HTTPRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v7;
    v8 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v8;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    v9 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = *(_QWORD *)(a2 + 120);
    if (v10)
      goto LABEL_3;
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v19;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v10 = *(_QWORD *)(a2 + 120);
    if (v10)
    {
LABEL_3:
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v10;
      v11 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v11;
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      v12 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = *(_QWORD *)(a2 + 176);
      if (v13)
        goto LABEL_4;
LABEL_8:
      v21 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v21;
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      v16 = *(_QWORD *)(a2 + 232);
      if (v16)
        goto LABEL_5;
LABEL_9:
      v22 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v22;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      goto LABEL_10;
    }
  }
  v20 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v20;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v13 = *(_QWORD *)(a2 + 176);
  if (!v13)
    goto LABEL_8;
LABEL_4:
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v13;
  v14 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v14;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  v15 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = *(_QWORD *)(a2 + 232);
  if (!v16)
    goto LABEL_9;
LABEL_5:
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v16;
  v17 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v17;
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  v18 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_10:
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HTTPRequest(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 56);
  v5 = (__int128 *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1833183E0(a1 + 56);
      v8 = *(_OWORD *)(a2 + 72);
      v7 = *(_OWORD *)(a2 + 88);
      v9 = *v5;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v8;
      *(_OWORD *)(a1 + 88) = v7;
      *v4 = v9;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v5;
    v11 = *(_OWORD *)(a2 + 72);
    v12 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = v12;
    *v4 = v10;
  }
  v13 = (_OWORD *)(a1 + 112);
  v14 = (__int128 *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120))
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1833183E0(a1 + 112);
      v17 = *(_OWORD *)(a2 + 128);
      v16 = *(_OWORD *)(a2 + 144);
      v18 = *v14;
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 144) = v16;
      *v13 = v18;
    }
  }
  else if (v15)
  {
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = *v14;
    v20 = *(_OWORD *)(a2 + 128);
    v21 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v20;
    *(_OWORD *)(a1 + 144) = v21;
    *v13 = v19;
  }
  v22 = (_OWORD *)(a1 + 168);
  v23 = (__int128 *)(a2 + 168);
  v24 = *(_QWORD *)(a2 + 176);
  if (*(_QWORD *)(a1 + 176))
  {
    if (v24)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1833183E0(a1 + 168);
      v26 = *(_OWORD *)(a2 + 184);
      v25 = *(_OWORD *)(a2 + 200);
      v27 = *v23;
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 184) = v26;
      *(_OWORD *)(a1 + 200) = v25;
      *v22 = v27;
    }
  }
  else if (v24)
  {
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v28 = *v23;
    v29 = *(_OWORD *)(a2 + 184);
    v30 = *(_OWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 184) = v29;
    *(_OWORD *)(a1 + 200) = v30;
    *v22 = v28;
  }
  v31 = (_OWORD *)(a1 + 224);
  v32 = (__int128 *)(a2 + 224);
  v33 = *(_QWORD *)(a2 + 232);
  if (*(_QWORD *)(a1 + 232))
  {
    if (v33)
    {
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1833183E0(a1 + 224);
      v35 = *(_OWORD *)(a2 + 240);
      v34 = *(_OWORD *)(a2 + 256);
      v36 = *v32;
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v35;
      *(_OWORD *)(a1 + 256) = v34;
      *v31 = v36;
    }
  }
  else if (v33)
  {
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v37 = *v32;
    v38 = *(_OWORD *)(a2 + 240);
    v39 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 240) = v38;
    *(_OWORD *)(a1 + 256) = v39;
    *v31 = v37;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1833183E0(uint64_t a1)
{
  destroy for HTTPField();
  return a1;
}

uint64_t assignWithTake for HTTPRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 64))
  {
    v7 = *(_QWORD *)(a2 + 64);
    if (v7)
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v7;
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v8;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      v9 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1833183E0(a1 + 56);
  }
  v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
LABEL_6:
  if (*(_QWORD *)(a1 + 120))
  {
    v11 = *(_QWORD *)(a2 + 120);
    if (v11)
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v11;
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v12;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      v13 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = v13;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_1833183E0(a1 + 112);
  }
  v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
LABEL_11:
  if (*(_QWORD *)(a1 + 176))
  {
    v15 = *(_QWORD *)(a2 + 176);
    if (v15)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v15;
      swift_bridgeObjectRelease();
      v16 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v16;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      v17 = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v17;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_1833183E0(a1 + 168);
  }
  v18 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v18;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
LABEL_16:
  if (!*(_QWORD *)(a1 + 232))
  {
LABEL_20:
    v22 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v22;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    goto LABEL_21;
  }
  v19 = *(_QWORD *)(a2 + 232);
  if (!v19)
  {
    sub_1833183E0(a1 + 224);
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v19;
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v20;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  v21 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v21;
  swift_bridgeObjectRelease();
LABEL_21:
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 288))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 288) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 288) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPRequest()
{
  return &type metadata for HTTPRequest;
}

ValueMetadata *type metadata accessor for HTTPRequest.Method()
{
  return &type metadata for HTTPRequest.Method;
}

uint64_t destroy for HTTPRequest.PseudoHeaderFields(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[8])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[15])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  result = a1[29];
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for HTTPRequest.PseudoHeaderFields(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v7;
    v8 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v8;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    v9 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = *(_QWORD *)(a2 + 120);
    if (v10)
      goto LABEL_3;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v20;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v10 = *(_QWORD *)(a2 + 120);
    if (v10)
    {
LABEL_3:
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v10;
      v11 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v11;
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      v12 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = *(_QWORD *)(a2 + 176);
      if (v13)
        goto LABEL_4;
LABEL_8:
      v22 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v22;
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      v16 = *(_QWORD *)(a2 + 232);
      if (v16)
        goto LABEL_5;
LABEL_9:
      v23 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v23;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      return a1;
    }
  }
  v21 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v21;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v13 = *(_QWORD *)(a2 + 176);
  if (!v13)
    goto LABEL_8;
LABEL_4:
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v13;
  v14 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v14;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  v15 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = *(_QWORD *)(a2 + 232);
  if (!v16)
    goto LABEL_9;
LABEL_5:
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v16;
  v17 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v17;
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  v18 = *(_QWORD *)(a2 + 264);
  v19 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = v18;
  *(_QWORD *)(a1 + 272) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HTTPRequest.PseudoHeaderFields(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 56);
  v5 = (__int128 *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1833183E0(a1 + 56);
      v8 = *(_OWORD *)(a2 + 72);
      v7 = *(_OWORD *)(a2 + 88);
      v9 = *v5;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v8;
      *(_OWORD *)(a1 + 88) = v7;
      *v4 = v9;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v5;
    v11 = *(_OWORD *)(a2 + 72);
    v12 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = v12;
    *v4 = v10;
  }
  v13 = (_OWORD *)(a1 + 112);
  v14 = (__int128 *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120))
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1833183E0(a1 + 112);
      v17 = *(_OWORD *)(a2 + 128);
      v16 = *(_OWORD *)(a2 + 144);
      v18 = *v14;
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 144) = v16;
      *v13 = v18;
    }
  }
  else if (v15)
  {
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = *v14;
    v20 = *(_OWORD *)(a2 + 128);
    v21 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v20;
    *(_OWORD *)(a1 + 144) = v21;
    *v13 = v19;
  }
  v22 = (_OWORD *)(a1 + 168);
  v23 = (__int128 *)(a2 + 168);
  v24 = *(_QWORD *)(a2 + 176);
  if (*(_QWORD *)(a1 + 176))
  {
    if (v24)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1833183E0(a1 + 168);
      v26 = *(_OWORD *)(a2 + 184);
      v25 = *(_OWORD *)(a2 + 200);
      v27 = *v23;
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 184) = v26;
      *(_OWORD *)(a1 + 200) = v25;
      *v22 = v27;
    }
  }
  else if (v24)
  {
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v28 = *v23;
    v29 = *(_OWORD *)(a2 + 184);
    v30 = *(_OWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 184) = v29;
    *(_OWORD *)(a1 + 200) = v30;
    *v22 = v28;
  }
  v31 = (_OWORD *)(a1 + 224);
  v32 = (__int128 *)(a2 + 224);
  v33 = *(_QWORD *)(a2 + 232);
  if (*(_QWORD *)(a1 + 232))
  {
    if (v33)
    {
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1833183E0(a1 + 224);
      v35 = *(_OWORD *)(a2 + 240);
      v34 = *(_OWORD *)(a2 + 256);
      v36 = *v32;
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v35;
      *(_OWORD *)(a1 + 256) = v34;
      *v31 = v36;
    }
  }
  else if (v33)
  {
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v37 = *v32;
    v38 = *(_OWORD *)(a2 + 240);
    v39 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 240) = v38;
    *(_OWORD *)(a1 + 256) = v39;
    *v31 = v37;
  }
  return a1;
}

void *__swift_memcpy280_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for HTTPRequest.PseudoHeaderFields(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 64))
  {
    v7 = *(_QWORD *)(a2 + 64);
    if (v7)
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v7;
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v8;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      v9 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1833183E0(a1 + 56);
  }
  v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
LABEL_6:
  if (*(_QWORD *)(a1 + 120))
  {
    v11 = *(_QWORD *)(a2 + 120);
    if (v11)
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v11;
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v12;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      v13 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = v13;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_1833183E0(a1 + 112);
  }
  v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
LABEL_11:
  if (*(_QWORD *)(a1 + 176))
  {
    v15 = *(_QWORD *)(a2 + 176);
    if (v15)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v15;
      swift_bridgeObjectRelease();
      v16 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v16;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      v17 = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v17;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_1833183E0(a1 + 168);
  }
  v18 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v18;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
LABEL_16:
  if (!*(_QWORD *)(a1 + 232))
  {
LABEL_20:
    v22 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v22;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    return a1;
  }
  v19 = *(_QWORD *)(a2 + 232);
  if (!v19)
  {
    sub_1833183E0(a1 + 224);
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v19;
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v20;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  v21 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPRequest.PseudoHeaderFields(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 280))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPRequest.PseudoHeaderFields(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 280) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 280) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPRequest.PseudoHeaderFields()
{
  return &type metadata for HTTPRequest.PseudoHeaderFields;
}

uint64_t storeEnumTagSinglePayload for HTTPRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_183319214 + 4 * byte_183BA7125[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183319248 + 4 * byte_183BA7120[v4]))();
}

uint64_t sub_183319248(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183319250(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x183319258);
  return result;
}

uint64_t sub_183319264(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18331926CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_183319270(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183319278(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPRequest.CodingKeys()
{
  return &type metadata for HTTPRequest.CodingKeys;
}

unint64_t sub_183319298()
{
  unint64_t result;

  result = qword_1EDCDF128;
  if (!qword_1EDCDF128)
  {
    result = MEMORY[0x186DB5558](&unk_183BA74D8, &type metadata for HTTPRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF128);
  }
  return result;
}

unint64_t sub_1833192E0()
{
  unint64_t result;

  result = qword_1EDCDF130;
  if (!qword_1EDCDF130)
  {
    result = MEMORY[0x186DB5558](&unk_183BA7410, &type metadata for HTTPRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF130);
  }
  return result;
}

unint64_t sub_183319328()
{
  unint64_t result;

  result = qword_1EDCDF138;
  if (!qword_1EDCDF138)
  {
    result = MEMORY[0x186DB5558](&unk_183BA7438, &type metadata for HTTPRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDF138);
  }
  return result;
}

uint64_t NWActorDiscoveryMechanism.init(browseDescriptor:browseParameters:connectionParameters:target:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v14 = *a1;
  v8 = *((_QWORD *)a1 + 2);
  v9 = *((_QWORD *)a1 + 3);
  v10 = *((_BYTE *)a1 + 32);
  sub_183319418(a4, a5);
  result = type metadata accessor for NWActorDiscoveryMechanism(0);
  v12 = result;
  v13 = a5 + *(int *)(result + 20);
  *(_OWORD *)v13 = v14;
  *(_QWORD *)(v13 + 16) = v8;
  *(_QWORD *)(v13 + 24) = v9;
  *(_BYTE *)(v13 + 32) = v10;
  *(_QWORD *)(a5 + *(int *)(result + 24)) = a2;
  if (a3)
    a2 = a3;
  else
    result = swift_retain();
  *(_QWORD *)(a5 + *(int *)(v12 + 28)) = a2;
  return result;
}

uint64_t sub_183319418(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NWActorDiscoveryMechanism.Target(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1EDCDF150);
}

uint64_t type metadata accessor for NWActorDiscoveryMechanism(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1EDCDF140);
}

uint64_t *initializeBufferWithCopyOfBuffer for NWActorDiscoveryMechanism(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    type metadata accessor for NWActorDiscoveryMechanism.Target(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for NWEndpoint();
      v7 = (char *)&loc_18331950C + 4 * byte_183BA7550[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v9 = a2[1];
    *v4 = *a2;
    v4[1] = v9;
    swift_retain();
    swift_storeEnumTagMultiPayload();
    v10 = a3[5];
    v11 = (char *)v4 + v10;
    v12 = (char *)a2 + v10;
    v13 = v12[32];
    if (v13 <= 0xFD)
    {
      v15 = *(_QWORD *)v12;
      v16 = *((_QWORD *)v12 + 1);
      v17 = *((_QWORD *)v12 + 2);
      v18 = *((_QWORD *)v12 + 3);
      sub_1832538CC(*(_QWORD *)v12, v16, v17, v18, v12[32]);
      *(_QWORD *)v11 = v15;
      *((_QWORD *)v11 + 1) = v16;
      *((_QWORD *)v11 + 2) = v17;
      *((_QWORD *)v11 + 3) = v18;
      v11[32] = v13;
    }
    else
    {
      v14 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v14;
      v11[32] = v12[32];
    }
    v19 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for NWActorDiscoveryMechanism(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_183058BF0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 48) != 1)
          goto LABEL_9;
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        v4 = sub_183B913A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
        break;
      case 4u:
LABEL_9:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }
  else
  {
    swift_release();
  }
  v5 = a1 + *(int *)(a2 + 20);
  v6 = *(unsigned __int8 *)(v5 + 32);
  if (v6 <= 0xFD)
    sub_183253930(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), v6);
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for NWActorDiscoveryMechanism(_QWORD *a1, _QWORD *a2, int *a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for NWEndpoint();
    v6 = (char *)&loc_18331988C + 4 * byte_183BA7564[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  swift_retain();
  swift_storeEnumTagMultiPayload();
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = v10[32];
  if (v11 <= 0xFD)
  {
    v13 = *(_QWORD *)v10;
    v14 = *((_QWORD *)v10 + 1);
    v15 = *((_QWORD *)v10 + 2);
    v16 = *((_QWORD *)v10 + 3);
    sub_1832538CC(*(_QWORD *)v10, v14, v15, v16, v10[32]);
    *(_QWORD *)v9 = v13;
    *((_QWORD *)v9 + 1) = v14;
    *((_QWORD *)v9 + 2) = v15;
    *((_QWORD *)v9 + 3) = v16;
    v9[32] = v11;
  }
  else
  {
    v12 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v12;
    v9[32] = v10[32];
  }
  v17 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for NWActorDiscoveryMechanism(_QWORD *a1, _QWORD *a2, int *a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;

  if (a1 != a2)
  {
    sub_183319D48((uint64_t)a1);
    type metadata accessor for NWActorDiscoveryMechanism.Target(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for NWEndpoint();
      v6 = (char *)&loc_183319ADC + 4 * byte_183BA7569[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  v8 = a3[5];
  v9 = (uint64_t)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = *((unsigned __int8 *)a2 + v8 + 32);
  if (*((unsigned __int8 *)a1 + v8 + 32) <= 0xFDu)
  {
    if (v11 <= 0xFD)
    {
      v20 = *(_QWORD *)v10;
      v21 = *((_QWORD *)v10 + 1);
      v22 = *((_QWORD *)v10 + 2);
      v23 = *((_QWORD *)v10 + 3);
      sub_1832538CC(v20, v21, v22, v23, v11);
      v24 = *(_QWORD *)v9;
      v25 = *(_QWORD *)(v9 + 8);
      v26 = *(_QWORD *)(v9 + 16);
      v27 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)v9 = v20;
      *(_QWORD *)(v9 + 8) = v21;
      *(_QWORD *)(v9 + 16) = v22;
      *(_QWORD *)(v9 + 24) = v23;
      v28 = *(_BYTE *)(v9 + 32);
      *(_BYTE *)(v9 + 32) = v11;
      sub_183253930(v24, v25, v26, v27, v28);
    }
    else
    {
      sub_183319D84(v9);
      v14 = v10[32];
      v15 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *(_OWORD *)(v9 + 16) = v15;
      *(_BYTE *)(v9 + 32) = v14;
    }
  }
  else if (v11 <= 0xFD)
  {
    v16 = *(_QWORD *)v10;
    v17 = *((_QWORD *)v10 + 1);
    v18 = *((_QWORD *)v10 + 2);
    v19 = *((_QWORD *)v10 + 3);
    sub_1832538CC(v16, v17, v18, v19, v11);
    *(_QWORD *)v9 = v16;
    *(_QWORD *)(v9 + 8) = v17;
    *(_QWORD *)(v9 + 16) = v18;
    *(_QWORD *)(v9 + 24) = v19;
    *(_BYTE *)(v9 + 32) = v11;
  }
  else
  {
    v12 = *(_OWORD *)v10;
    v13 = *((_OWORD *)v10 + 1);
    *(_BYTE *)(v9 + 32) = v10[32];
    *(_OWORD *)v9 = v12;
    *(_OWORD *)(v9 + 16) = v13;
  }
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_retain();
  swift_release();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_183319D48(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_183319D84(uint64_t a1)
{
  destroy for NWBrowser.Descriptor(a1);
  return a1;
}

char *initializeWithTake for NWActorDiscoveryMechanism(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v6 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v8 = sub_183B913A4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *(_OWORD *)v12;
  v14 = *((_OWORD *)v12 + 1);
  v11[32] = v12[32];
  *(_OWORD *)v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

unsigned __int8 *assignWithTake for NWActorDiscoveryMechanism(unsigned __int8 *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  if (a1 != (unsigned __int8 *)a2)
  {
    sub_183319D48((uint64_t)a1);
    v6 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v8 = sub_183B913A4();
        (*(void (**)(unsigned __int8 *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v9 = a3[5];
  v10 = (uint64_t)&a1[v9];
  v11 = &a2[v9];
  v12 = a1[v9 + 32];
  if (v12 <= 0xFD)
  {
    v13 = v11[32];
    if (v13 <= 0xFD)
    {
      v15 = *(_QWORD *)v10;
      v16 = *(_QWORD *)(v10 + 8);
      v17 = *(_QWORD *)(v10 + 16);
      v18 = *(_QWORD *)(v10 + 24);
      v19 = *((_OWORD *)v11 + 1);
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *(_OWORD *)(v10 + 16) = v19;
      *(_BYTE *)(v10 + 32) = v13;
      sub_183253930(v15, v16, v17, v18, v12);
      goto LABEL_13;
    }
    sub_183319D84(v10);
  }
  v14 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v14;
  *(_BYTE *)(v10 + 32) = v11[32];
LABEL_13:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_release();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorDiscoveryMechanism()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18331A054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for NWActorDiscoveryMechanism()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18331A0DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_18331A154()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NWActorDiscoveryMechanism.Target(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NWActorDiscoveryMechanism.Target(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for NWEndpoint();
      v6 = (char *)&loc_18331A254 + 4 * byte_183BA756E[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for NWActorDiscoveryMechanism.Target(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  type metadata accessor for NWEndpoint();
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      result = sub_183058BF0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = *(_QWORD *)(a1 + 48);
      if (result != 1)
        goto LABEL_9;
      break;
    case 2:
      result = swift_bridgeObjectRelease();
      break;
    case 3:
      v3 = sub_183B913A4();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 4:
LABEL_9:
      result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for NWActorDiscoveryMechanism.Target(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for NWEndpoint();
    v4 = (char *)&loc_18331A518 + 4 * byte_183BA7578[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for NWActorDiscoveryMechanism.Target(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_183319D48((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for NWEndpoint();
      v4 = (char *)&loc_18331A6DC + 4 * byte_183BA757D[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for NWActorDiscoveryMechanism.Target(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v7 = sub_183B913A4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

