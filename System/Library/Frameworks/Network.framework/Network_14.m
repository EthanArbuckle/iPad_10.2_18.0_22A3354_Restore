void nw_protocol_http1_output_available(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  int is_metadata_complete;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int output_frames;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  os_log_type_t v42;
  NSObject *v43;
  os_log_type_t v44;
  const char *v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  os_log_type_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  int v60;
  int v61;
  char *v62;
  uint64_t v63;
  os_log_type_t v64;
  NSObject *v65;
  os_log_type_t v66;
  const char *v67;
  int v68;
  char *v69;
  uint64_t v70;
  os_log_type_t v71;
  NSObject *v72;
  os_log_type_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  char *v80;
  NSObject *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  BOOL v93;
  _BYTE *v94;
  char v95;
  BOOL v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  char *v100;
  uint64_t v101;
  os_log_type_t v102;
  NSObject *v103;
  os_log_type_t v104;
  const char *v105;
  uint64_t v106;
  os_log_type_t v107;
  uint64_t v108;
  os_log_type_t v109;
  NSObject *v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  char *v119;
  NSObject *v120;
  os_log_type_t v121;
  _BOOL4 v122;
  NSObject *v123;
  os_log_type_t v124;
  uint64_t v125;
  char v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  os_log_type_t v133;
  NSObject *v134;
  os_log_type_t v135;
  const char *v136;
  uint64_t v137;
  char *v138;
  NSObject *v139;
  os_log_type_t v140;
  _BOOL4 v141;
  uint64_t v142;
  os_log_type_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  os_log_type_t v147;
  NSObject *v148;
  os_log_type_t v149;
  const char *v150;
  char v151;
  char *v152;
  NSObject *v153;
  os_log_type_t v154;
  _BOOL4 v155;
  NSObject *v156;
  os_log_type_t v157;
  NSObject *v158;
  uint64_t v159;
  int v160;
  int v161;
  char *v162;
  NSObject *v163;
  os_log_type_t v164;
  NSObject *v165;
  os_log_type_t v166;
  const char *v167;
  NSObject *v168;
  os_log_type_t v169;
  NSObject *v170;
  uint64_t v171;
  int v172;
  int v173;
  NSObject *v174;
  uint64_t v175;
  int v176;
  int v177;
  char *v178;
  NSObject *v179;
  os_log_type_t v180;
  _BOOL4 v181;
  NSObject *v182;
  os_log_type_t v183;
  const char *v184;
  NSObject *v185;
  os_log_type_t v186;
  _BOOL4 v187;
  NSObject *v188;
  uint64_t v189;
  NSObject *v190;
  os_log_type_t v191;
  NSObject *v192;
  os_log_type_t v193;
  char *v194;
  NSObject *v195;
  os_log_type_t v196;
  NSObject *v197;
  os_log_type_t v198;
  const char *v199;
  char *v200;
  NSObject *v201;
  os_log_type_t v202;
  NSObject *v203;
  os_log_type_t v204;
  const char *v205;
  char *v206;
  NSObject *v207;
  os_log_type_t v208;
  _BOOL4 v209;
  char *v210;
  NSObject *v211;
  os_log_type_t v212;
  _BOOL4 v213;
  NSObject *v214;
  uint64_t v215;
  int v216;
  int v217;
  NSObject *v218;
  os_log_type_t v219;
  NSObject *v220;
  os_log_type_t v221;
  char *v222;
  NSObject *v223;
  os_log_type_t v224;
  NSObject *v225;
  os_log_type_t v226;
  const char *v227;
  char *v228;
  NSObject *v229;
  os_log_type_t v230;
  _BOOL4 v231;
  NSObject *v232;
  os_log_type_t v233;
  NSObject *v234;
  uint64_t v235;
  int v236;
  int v237;
  NSObject *v238;
  _BOOL4 v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  int v248;
  uint64_t v249;
  NSObject *v250;
  uint64_t v251;
  int v252;
  int v253;
  _WORD *v254;
  unsigned int v255;
  uint64_t v256;
  int v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  NSObject *v264;
  _BOOL4 v265;
  uint64_t v266;
  int v267;
  int v268;
  uint64_t v269;
  char *v270;
  NSObject *v271;
  os_log_type_t v272;
  const char *v273;
  char *v274;
  NSObject *v275;
  os_log_type_t v276;
  const char *v277;
  char *v278;
  _BOOL4 v279;
  char *v280;
  _BOOL4 v281;
  const char *v282;
  NSObject *v283;
  os_log_type_t v284;
  uint32_t v285;
  NSObject *v286;
  uint64_t v287;
  int v288;
  int v289;
  NSObject *v290;
  os_log_type_t v291;
  uint32_t v292;
  char *v293;
  NSObject *v294;
  os_log_type_t v295;
  const char *v296;
  uint64_t v297;
  char *v298;
  NSObject *v299;
  os_log_type_t v300;
  const char *v301;
  char *backtrace_string;
  _BOOL4 v303;
  char *v304;
  _BOOL4 v305;
  const char *v306;
  char *v307;
  _BOOL4 v308;
  const char *v309;
  NSObject *v310;
  os_log_type_t v311;
  NSObject *v312;
  uint64_t v313;
  int v314;
  int v315;
  char *v316;
  NSObject *v317;
  os_log_type_t v318;
  const char *v319;
  char *v320;
  _BOOL4 v321;
  _BOOL4 v322;
  _BOOL4 v323;
  _BOOL4 v324;
  char *v325;
  _BOOL4 v326;
  char *v327;
  NSObject *v328;
  os_log_type_t v329;
  const char *v330;
  NSObject *v331;
  uint64_t v332;
  int v333;
  int v334;
  char *v335;
  _BOOL4 v336;
  _BOOL4 v337;
  char *v338;
  _BOOL4 v339;
  unsigned __int16 *v340;
  uint64_t *v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  _QWORD *v346;
  uint64_t v347;
  uint64_t v348;
  _DWORD __len[3];
  uint64_t v350;
  uint64_t (*v351)(uint64_t, uint64_t);
  void *v352;
  os_log_type_t *v353;
  os_log_type_t type[8];
  os_log_type_t *v355;
  uint64_t v356;
  int v357;
  char v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t *v362;
  uint8_t buf[4];
  const char *v364;
  __int16 v365;
  _BYTE v366[18];
  __int16 v367;
  _BYTE v368[10];
  char *v369;
  _BYTE v370[10];
  uint64_t v371;
  uint64_t v372;

  v372 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v364 = "nw_http1_get_http1_protocol";
    v293 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v293, &__len[1], type))
      goto LABEL_556;
    if (LOBYTE(__len[1]) != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        v294 = __nwlog_obj();
        v295 = __len[1];
        if (!os_log_type_enabled(v294, __len[1]))
          goto LABEL_556;
        *(_DWORD *)buf = 136446210;
        v364 = "nw_http1_get_http1_protocol";
        v296 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_555;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v294 = __nwlog_obj();
      v295 = __len[1];
      v303 = os_log_type_enabled(v294, __len[1]);
      if (!backtrace_string)
      {
        if (!v303)
          goto LABEL_556;
        *(_DWORD *)buf = 136446210;
        v364 = "nw_http1_get_http1_protocol";
        v296 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_555;
      }
      if (v303)
      {
        *(_DWORD *)buf = 136446466;
        v364 = "nw_http1_get_http1_protocol";
        v365 = 2082;
        *(_QWORD *)v366 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v294, v295, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_556;
    }
    v294 = __nwlog_obj();
    v295 = __len[1];
    if (!os_log_type_enabled(v294, __len[1]))
      goto LABEL_556;
    *(_DWORD *)buf = 136446210;
    v364 = "nw_http1_get_http1_protocol";
    v296 = "%{public}s called with null protocol";
LABEL_555:
    _os_log_impl(&dword_182FBE000, v294, v295, v296, buf, 0xCu);
    goto LABEL_556;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v364 = "nw_http1_get_http1_protocol";
    v293 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v293, &__len[1], type))
      goto LABEL_556;
    if (LOBYTE(__len[1]) != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        v294 = __nwlog_obj();
        v295 = __len[1];
        if (!os_log_type_enabled(v294, __len[1]))
          goto LABEL_556;
        *(_DWORD *)buf = 136446210;
        v364 = "nw_http1_get_http1_protocol";
        v296 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_555;
      }
      v304 = (char *)__nw_create_backtrace_string();
      v294 = __nwlog_obj();
      v295 = __len[1];
      v305 = os_log_type_enabled(v294, __len[1]);
      if (!v304)
      {
        if (!v305)
          goto LABEL_556;
        *(_DWORD *)buf = 136446210;
        v364 = "nw_http1_get_http1_protocol";
        v296 = "%{public}s called with null handle, no backtrace";
        goto LABEL_555;
      }
      if (v305)
      {
        *(_DWORD *)buf = 136446466;
        v364 = "nw_http1_get_http1_protocol";
        v365 = 2082;
        *(_QWORD *)v366 = v304;
        v306 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_463:
        _os_log_impl(&dword_182FBE000, v294, v295, v306, buf, 0x16u);
      }
LABEL_464:
      free(v304);
      if (!v293)
      {
LABEL_558:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        v364 = "nw_protocol_http1_output_available";
        v298 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__len[1]) = 16;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v298, &__len[1], type))
          goto LABEL_592;
        if (LOBYTE(__len[1]) == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v299 = gLogObj;
          v300 = __len[1];
          if (!os_log_type_enabled((os_log_t)gLogObj, __len[1]))
            goto LABEL_592;
          *(_DWORD *)buf = 136446210;
          v364 = "nw_protocol_http1_output_available";
          v301 = "%{public}s called with null http1";
        }
        else if (type[0])
        {
          v335 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v299 = gLogObj;
          v300 = __len[1];
          v336 = os_log_type_enabled((os_log_t)gLogObj, __len[1]);
          if (v335)
          {
            if (v336)
            {
              *(_DWORD *)buf = 136446466;
              v364 = "nw_protocol_http1_output_available";
              v365 = 2082;
              *(_QWORD *)v366 = v335;
              _os_log_impl(&dword_182FBE000, v299, v300, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v335);
LABEL_592:
            if (!v298)
              return;
            goto LABEL_593;
          }
          if (!v336)
            goto LABEL_592;
          *(_DWORD *)buf = 136446210;
          v364 = "nw_protocol_http1_output_available";
          v301 = "%{public}s called with null http1, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v299 = gLogObj;
          v300 = __len[1];
          if (!os_log_type_enabled((os_log_t)gLogObj, __len[1]))
            goto LABEL_592;
          *(_DWORD *)buf = 136446210;
          v364 = "nw_protocol_http1_output_available";
          v301 = "%{public}s called with null http1, backtrace limit exceeded";
        }
        goto LABEL_591;
      }
LABEL_557:
      free(v293);
      goto LABEL_558;
    }
    v294 = __nwlog_obj();
    v295 = __len[1];
    if (!os_log_type_enabled(v294, __len[1]))
      goto LABEL_556;
    *(_DWORD *)buf = 136446210;
    v364 = "nw_http1_get_http1_protocol";
    v296 = "%{public}s called with null handle";
    goto LABEL_555;
  }
  v3 = *((_DWORD *)handle + 6);
  v4 = a1->handle;
  if (v3 == 1)
    goto LABEL_10;
  if (v3 != 2)
  {
    if (v3 != 3)
      goto LABEL_558;
    v5 = *((_QWORD *)handle + 2);
    if (v5)
    {
      v4 = (_QWORD *)(v5 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v364 = "nw_http1_get_http1_protocol";
    v293 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v293, &__len[1], type))
    {
      if (LOBYTE(__len[1]) == 17)
      {
        v294 = __nwlog_obj();
        v295 = __len[1];
        if (!os_log_type_enabled(v294, __len[1]))
          goto LABEL_556;
        *(_DWORD *)buf = 136446210;
        v364 = "nw_http1_get_http1_protocol";
        v296 = "%{public}s called with null handle->http1_connection";
        goto LABEL_555;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        v294 = __nwlog_obj();
        v295 = __len[1];
        if (!os_log_type_enabled(v294, __len[1]))
          goto LABEL_556;
        *(_DWORD *)buf = 136446210;
        v364 = "nw_http1_get_http1_protocol";
        v296 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_555;
      }
      v304 = (char *)__nw_create_backtrace_string();
      v294 = __nwlog_obj();
      v295 = __len[1];
      v323 = os_log_type_enabled(v294, __len[1]);
      if (!v304)
      {
        if (!v323)
          goto LABEL_556;
        *(_DWORD *)buf = 136446210;
        v364 = "nw_http1_get_http1_protocol";
        v296 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_555;
      }
      if (v323)
      {
        *(_DWORD *)buf = 136446466;
        v364 = "nw_http1_get_http1_protocol";
        v365 = 2082;
        *(_QWORD *)v366 = v304;
        v306 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_463;
      }
      goto LABEL_464;
    }
LABEL_556:
    if (!v293)
      goto LABEL_558;
    goto LABEL_557;
  }
  v6 = *((_QWORD *)handle + 1);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v364 = "nw_http1_get_http1_protocol";
    v293 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v293, &__len[1], type))
      goto LABEL_556;
    if (LOBYTE(__len[1]) == 17)
    {
      v294 = __nwlog_obj();
      v295 = __len[1];
      if (!os_log_type_enabled(v294, __len[1]))
        goto LABEL_556;
      *(_DWORD *)buf = 136446210;
      v364 = "nw_http1_get_http1_protocol";
      v296 = "%{public}s called with null handle->http1_stream";
      goto LABEL_555;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      v294 = __nwlog_obj();
      v295 = __len[1];
      if (!os_log_type_enabled(v294, __len[1]))
        goto LABEL_556;
      *(_DWORD *)buf = 136446210;
      v364 = "nw_http1_get_http1_protocol";
      v296 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_555;
    }
    v304 = (char *)__nw_create_backtrace_string();
    v294 = __nwlog_obj();
    v295 = __len[1];
    v324 = os_log_type_enabled(v294, __len[1]);
    if (!v304)
    {
      if (!v324)
        goto LABEL_556;
      *(_DWORD *)buf = 136446210;
      v364 = "nw_http1_get_http1_protocol";
      v296 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_555;
    }
    if (v324)
    {
      *(_DWORD *)buf = 136446466;
      v364 = "nw_http1_get_http1_protocol";
      v365 = 2082;
      *(_QWORD *)v366 = v304;
      v306 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_463;
    }
    goto LABEL_464;
  }
  v4 = (_QWORD *)(v6 + 248);
LABEL_10:
  if (!*v4)
    goto LABEL_558;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v364 = "nw_protocol_http1_output_available";
    v298 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v298, &__len[1], type))
      goto LABEL_592;
    if (LOBYTE(__len[1]) == 17)
    {
      v299 = __nwlog_obj();
      v300 = __len[1];
      if (!os_log_type_enabled(v299, __len[1]))
        goto LABEL_592;
      *(_DWORD *)buf = 136446210;
      v364 = "nw_protocol_http1_output_available";
      v301 = "%{public}s called with null other_protocol";
    }
    else if (type[0])
    {
      v307 = (char *)__nw_create_backtrace_string();
      v299 = __nwlog_obj();
      v300 = __len[1];
      v308 = os_log_type_enabled(v299, __len[1]);
      if (v307)
      {
        if (!v308)
          goto LABEL_585;
        *(_DWORD *)buf = 136446466;
        v364 = "nw_protocol_http1_output_available";
        v365 = 2082;
        *(_QWORD *)v366 = v307;
        v309 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_584;
      }
      if (!v308)
        goto LABEL_592;
      *(_DWORD *)buf = 136446210;
      v364 = "nw_protocol_http1_output_available";
      v301 = "%{public}s called with null other_protocol, no backtrace";
    }
    else
    {
      v299 = __nwlog_obj();
      v300 = __len[1];
      if (!os_log_type_enabled(v299, __len[1]))
        goto LABEL_592;
      *(_DWORD *)buf = 136446210;
      v364 = "nw_protocol_http1_output_available";
      v301 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }
LABEL_591:
    _os_log_impl(&dword_182FBE000, v299, v300, v301, buf, 0xCu);
    goto LABEL_592;
  }
  if (v3 == 2)
  {
    v8 = *((_QWORD *)handle + 1);
    if (v8)
    {
      v7 = (uint64_t *)(v8 + 256);
      goto LABEL_17;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v364 = "nw_http1_get_connection_for_protocol";
    v316 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v316, &__len[1], type))
    {
      if (LOBYTE(__len[1]) == 17)
      {
        v317 = __nwlog_obj();
        v318 = __len[1];
        if (!os_log_type_enabled(v317, __len[1]))
          goto LABEL_574;
        *(_DWORD *)buf = 136446210;
        v364 = "nw_http1_get_connection_for_protocol";
        v319 = "%{public}s called with null handle->http1_stream";
        goto LABEL_573;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        v317 = __nwlog_obj();
        v318 = __len[1];
        if (!os_log_type_enabled(v317, __len[1]))
          goto LABEL_574;
        *(_DWORD *)buf = 136446210;
        v364 = "nw_http1_get_connection_for_protocol";
        v319 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
        goto LABEL_573;
      }
      v325 = (char *)__nw_create_backtrace_string();
      v317 = __nwlog_obj();
      v318 = __len[1];
      v326 = os_log_type_enabled(v317, __len[1]);
      if (v325)
      {
        if (v326)
        {
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_get_connection_for_protocol";
          v365 = 2082;
          *(_QWORD *)v366 = v325;
          _os_log_impl(&dword_182FBE000, v317, v318, "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v325);
        goto LABEL_574;
      }
      if (v326)
      {
        *(_DWORD *)buf = 136446210;
        v364 = "nw_http1_get_connection_for_protocol";
        v319 = "%{public}s called with null handle->http1_stream, no backtrace";
LABEL_573:
        _os_log_impl(&dword_182FBE000, v317, v318, v319, buf, 0xCu);
      }
    }
LABEL_574:
    if (v316)
      free(v316);
    goto LABEL_576;
  }
  if (v3 != 3)
  {
LABEL_576:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v364 = "nw_protocol_http1_output_available";
    v298 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v298, &__len[1], type))
      goto LABEL_592;
    if (LOBYTE(__len[1]) == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v299 = gLogObj;
      v300 = __len[1];
      if (!os_log_type_enabled((os_log_t)gLogObj, __len[1]))
        goto LABEL_592;
      *(_DWORD *)buf = 136446210;
      v364 = "nw_protocol_http1_output_available";
      v301 = "%{public}s called with null http1_connection";
      goto LABEL_591;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v299 = gLogObj;
      v300 = __len[1];
      if (!os_log_type_enabled((os_log_t)gLogObj, __len[1]))
        goto LABEL_592;
      *(_DWORD *)buf = 136446210;
      v364 = "nw_protocol_http1_output_available";
      v301 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_591;
    }
    v307 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v299 = gLogObj;
    v300 = __len[1];
    v337 = os_log_type_enabled((os_log_t)gLogObj, __len[1]);
    if (!v307)
    {
      if (!v337)
        goto LABEL_592;
      *(_DWORD *)buf = 136446210;
      v364 = "nw_protocol_http1_output_available";
      v301 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_591;
    }
    if (!v337)
    {
LABEL_585:
      free(v307);
      if (!v298)
        return;
LABEL_593:
      free(v298);
      return;
    }
    *(_DWORD *)buf = 136446466;
    v364 = "nw_protocol_http1_output_available";
    v365 = 2082;
    *(_QWORD *)v366 = v307;
    v309 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_584:
    _os_log_impl(&dword_182FBE000, v299, v300, v309, buf, 0x16u);
    goto LABEL_585;
  }
  v7 = (uint64_t *)(handle + 16);
LABEL_17:
  v9 = *v7;
  if (!*v7)
    goto LABEL_576;
  if (!*(_QWORD *)(v9 + 648))
    goto LABEL_375;
  v348 = *v7;
  if ((*(_BYTE *)(v9 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v312 = __nwlog_obj();
      if (os_log_type_enabled(v312, OS_LOG_TYPE_DEBUG))
      {
        v313 = *(_QWORD *)(v9 + 488);
        v314 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
        v315 = *(_DWORD *)(v9 + 860);
        if (v313)
          LODWORD(v313) = *(_DWORD *)(v313 + 424);
        *(_DWORD *)buf = 136447490;
        v364 = "nw_http1_connection_drain_outbound_frames";
        v365 = 2082;
        *(_QWORD *)v366 = v9 + 74;
        *(_WORD *)&v366[8] = 2080;
        *(_QWORD *)&v366[10] = " ";
        v367 = 1024;
        *(_DWORD *)v368 = v314;
        *(_WORD *)&v368[4] = 1024;
        *(_DWORD *)&v368[6] = v315;
        LOWORD(v369) = 1024;
        *(_DWORD *)((char *)&v369 + 2) = v313;
        _os_log_impl(&dword_182FBE000, v312, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> draining pending outbound frames", buf, 0x32u);
      }
    }
  }
  if (!*(_QWORD *)(v9 + 480))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v364 = "nw_http1_connection_drain_outbound_frames";
    v274 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v274, &__len[1], type))
    {
      if (LOBYTE(__len[1]) == 17)
      {
        v310 = __nwlog_obj();
        v311 = __len[1];
        if (os_log_type_enabled(v310, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_drain_outbound_frames";
          v277 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_550:
          v290 = v310;
          v291 = v311;
          v292 = 12;
          goto LABEL_436;
        }
      }
      else if (type[0])
      {
        v320 = (char *)__nw_create_backtrace_string();
        v310 = __nwlog_obj();
        v311 = __len[1];
        v321 = os_log_type_enabled(v310, __len[1]);
        if (v320)
        {
          if (v321)
          {
            *(_DWORD *)buf = 136446466;
            v364 = "nw_http1_connection_drain_outbound_frames";
            v365 = 2082;
            *(_QWORD *)v366 = v320;
            _os_log_impl(&dword_182FBE000, v310, v311, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v320);
          v9 = v348;
        }
        else
        {
          v9 = v348;
          if (v321)
          {
            *(_DWORD *)buf = 136446210;
            v364 = "nw_http1_connection_drain_outbound_frames";
            v277 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
            goto LABEL_550;
          }
        }
      }
      else
      {
        v310 = __nwlog_obj();
        v311 = __len[1];
        if (os_log_type_enabled(v310, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_drain_outbound_frames";
          v277 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
          goto LABEL_550;
        }
      }
    }
LABEL_437:
    if (!v274)
      goto LABEL_375;
LABEL_438:
    free(v274);
    goto LABEL_375;
  }
  if (!*(_QWORD *)(v9 + 488))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v364 = "nw_http1_connection_drain_outbound_frames";
    v274 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v274, &__len[1], type))
    {
      if (LOBYTE(__len[1]) == 17)
      {
        v310 = __nwlog_obj();
        v311 = __len[1];
        if (os_log_type_enabled(v310, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_drain_outbound_frames";
          v277 = "%{public}s called with null http1_connection->current_stream";
          goto LABEL_550;
        }
      }
      else if (type[0])
      {
        v280 = (char *)__nw_create_backtrace_string();
        v310 = __nwlog_obj();
        v311 = __len[1];
        v322 = os_log_type_enabled(v310, __len[1]);
        if (v280)
        {
          if (v322)
          {
            *(_DWORD *)buf = 136446466;
            v364 = "nw_http1_connection_drain_outbound_frames";
            v365 = 2082;
            *(_QWORD *)v366 = v280;
            v282 = "%{public}s called with null http1_connection->current_stream, dumping backtrace:%{public}s";
            v283 = v310;
            v284 = v311;
            v285 = 22;
            goto LABEL_415;
          }
LABEL_416:
          free(v280);
          v9 = v348;
          if (!v274)
            goto LABEL_375;
          goto LABEL_438;
        }
        v9 = v348;
        if (v322)
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_drain_outbound_frames";
          v277 = "%{public}s called with null http1_connection->current_stream, no backtrace";
          goto LABEL_550;
        }
      }
      else
      {
        v310 = __nwlog_obj();
        v311 = __len[1];
        if (os_log_type_enabled(v310, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_drain_outbound_frames";
          v277 = "%{public}s called with null http1_connection->current_stream, backtrace limit exceeded";
          goto LABEL_550;
        }
      }
    }
    goto LABEL_437;
  }
  v10 = (uint64_t *)(v9 + 648);
  v11 = *(_QWORD *)(v9 + 648);
  if (!v11)
    goto LABEL_373;
  v340 = (unsigned __int16 *)(v9 + 872);
  v344 = v9 + 696;
  v342 = (_QWORD *)(v9 + 656);
  v347 = v9 + 74;
  v341 = (uint64_t *)(v9 + 648);
  while (2)
  {
    v12 = *(_QWORD *)(v11 + 32);
    v13 = *(_QWORD **)(v11 + 40);
    v14 = (_QWORD *)(v11 + 32);
    if (v12)
    {
      *(_QWORD *)(v12 + 40) = v13;
      v13 = *(_QWORD **)(v11 + 40);
    }
    else
    {
      *v342 = v13;
    }
    *v13 = v12;
    *v14 = 0;
    *(_QWORD *)(v11 + 40) = 0;
    __len[0] = 0;
    if (!*(_QWORD *)(v11 + 112))
    {
      v17 = 0;
      if ((*(_BYTE *)(v9 + 158) & 1) != 0)
        goto LABEL_40;
      goto LABEL_39;
    }
    if ((*(_WORD *)(v11 + 204) & 0x100) != 0
      && g_channel_check_validity
      && (g_channel_check_validity(v11, *(_QWORD *)(v11 + 88)) & 1) == 0)
    {
      v17 = 0;
      __len[0] = 0;
      if ((*(_BYTE *)(v9 + 158) & 1) != 0)
        goto LABEL_40;
      goto LABEL_39;
    }
    v16 = *(_DWORD *)(v11 + 52);
    v15 = *(unsigned int *)(v11 + 56);
    if (v16)
      v16 -= v15 + *(_DWORD *)(v11 + 60);
    __len[0] = v16;
    v17 = (char *)(*(_QWORD *)(v11 + 112) + v15);
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
LABEL_39:
      if (gLogDatapath)
      {
        v158 = __nwlog_obj();
        if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
        {
          v159 = *(_QWORD *)(v9 + 488);
          if (v159)
            LODWORD(v159) = *(_DWORD *)(v159 + 424);
          v160 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
          v161 = *(_DWORD *)(v9 + 860);
          *(_DWORD *)buf = 136448002;
          v364 = "nw_http1_connection_drain_outbound_frames";
          v365 = 2082;
          *(_QWORD *)v366 = v347;
          *(_WORD *)&v366[8] = 2080;
          *(_QWORD *)&v366[10] = " ";
          v367 = 1024;
          *(_DWORD *)v368 = v160;
          *(_WORD *)&v368[4] = 1024;
          *(_DWORD *)&v368[6] = v161;
          LOWORD(v369) = 1024;
          *(_DWORD *)((char *)&v369 + 2) = v159;
          HIWORD(v369) = 2048;
          *(_QWORD *)v370 = v11;
          *(_WORD *)&v370[8] = 1024;
          LODWORD(v371) = __len[0];
          _os_log_impl(&dword_182FBE000, v158, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> draining frame %p with length %u", buf, 0x42u);
        }
      }
    }
LABEL_40:
    if (!v17 || !__len[0])
      goto LABEL_25;
    if ((*(_WORD *)(*(_QWORD *)(v9 + 488) + 428) & 0x100) != 0)
    {
      if ((*(_WORD *)(v11 + 204) & 4) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446466;
        v364 = "nw_http1_connection_drain_outbound_frames";
        v365 = 2048;
        *(_QWORD *)v366 = v11;
        v62 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__len[1]) = 16;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v62, &__len[1], type))
          goto LABEL_166;
        if (LOBYTE(__len[1]) == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v63 = gLogObj;
          v64 = __len[1];
          if (!os_log_type_enabled((os_log_t)gLogObj, __len[1]))
            goto LABEL_166;
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_drain_outbound_frames";
          v365 = 2048;
          *(_QWORD *)v366 = v11;
          v65 = v63;
          v66 = v64;
          v67 = "%{public}s frame %p has no metadata";
        }
        else if (type[0])
        {
          v80 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v81 = gLogObj;
          v82 = __len[1];
          v83 = os_log_type_enabled((os_log_t)gLogObj, __len[1]);
          if (v80)
          {
            if (v83)
            {
              *(_DWORD *)buf = 136446722;
              v364 = "nw_http1_connection_drain_outbound_frames";
              v365 = 2048;
              *(_QWORD *)v366 = v11;
              *(_WORD *)&v366[8] = 2082;
              *(_QWORD *)&v366[10] = v80;
              _os_log_impl(&dword_182FBE000, v81, v82, "%{public}s frame %p has no metadata, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v80);
            v9 = v348;
            goto LABEL_166;
          }
          v9 = v348;
          if (!v83)
          {
LABEL_166:
            if (v62)
              free(v62);
            goto LABEL_26;
          }
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_drain_outbound_frames";
          v365 = 2048;
          *(_QWORD *)v366 = v11;
          v65 = v81;
          v66 = v82;
          v67 = "%{public}s frame %p has no metadata, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v106 = gLogObj;
          v107 = __len[1];
          if (!os_log_type_enabled((os_log_t)gLogObj, __len[1]))
            goto LABEL_166;
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_drain_outbound_frames";
          v365 = 2048;
          *(_QWORD *)v366 = v11;
          v65 = v106;
          v66 = v107;
          v67 = "%{public}s frame %p has no metadata, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v65, v66, v67, buf, 0x16u);
        goto LABEL_166;
      }
      if ((*(_BYTE *)(v11 + 216) & 1) != 0)
        goto LABEL_43;
      nw_frame_unclaim(v11, (uint64_t)a2, 0xAu, 7u);
      v76 = *(_QWORD *)(v11 + 112);
      if (v76)
      {
        if ((*(_WORD *)(v11 + 204) & 0x100) == 0 || !g_channel_check_validity)
        {
LABEL_130:
          v77 = v76 + *(unsigned int *)(v11 + 56);
          v78 = *(_QWORD *)(v11 + 64);
          if (v78)
          {
LABEL_131:
            v79 = (*(unsigned __int8 *)(v78 + 66) >> 6) & 1;
            goto LABEL_144;
          }
LABEL_143:
          v79 = 0;
LABEL_144:
          v346 = (_QWORD *)(v11 + 32);
          v88 = __len[0];
          if (__len[0])
          {
            v89 = v11;
            v90 = -1;
            v91 = __len[0];
            do
            {
              v92 = v90++;
              v93 = v91 >= 0x10;
              v91 >>= 4;
            }
            while (v93);
            if (v77)
            {
              v94 = (_BYTE *)(v77 + v90);
              *(_WORD *)(v94 + 1) = 2573;
              do
              {
                if ((v88 & 0xF) >= 0xA)
                  v95 = (v88 & 0xF) + 55;
                else
                  v95 = v88 & 0xF | 0x30;
                *v94-- = v95;
                v96 = v88 > 0xF;
                v88 >>= 4;
              }
              while (v96);
              goto LABEL_153;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v364 = "nw_http1_connection_write_chunk_header";
            v200 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__len[1]) = 16;
            type[0] = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v200, &__len[1], type))
            {
              if (LOBYTE(__len[1]) == 17)
              {
                v201 = __nwlog_obj();
                v202 = __len[1];
                if (os_log_type_enabled(v201, __len[1]))
                {
                  *(_DWORD *)buf = 136446210;
                  v364 = "nw_http1_connection_write_chunk_header";
                  v203 = v201;
                  v204 = v202;
                  v205 = "%{public}s called with null buffer";
LABEL_335:
                  _os_log_impl(&dword_182FBE000, v203, v204, v205, buf, 0xCu);
                }
              }
              else if (type[0])
              {
                v210 = (char *)__nw_create_backtrace_string();
                v211 = __nwlog_obj();
                v212 = __len[1];
                v213 = os_log_type_enabled(v211, __len[1]);
                if (v210)
                {
                  if (v213)
                  {
                    *(_DWORD *)buf = 136446466;
                    v364 = "nw_http1_connection_write_chunk_header";
                    v365 = 2082;
                    *(_QWORD *)v366 = v210;
                    _os_log_impl(&dword_182FBE000, v211, v212, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v210);
                  goto LABEL_336;
                }
                if (v213)
                {
                  *(_DWORD *)buf = 136446210;
                  v364 = "nw_http1_connection_write_chunk_header";
                  v203 = v211;
                  v204 = v212;
                  v205 = "%{public}s called with null buffer, no backtrace";
                  goto LABEL_335;
                }
              }
              else
              {
                v220 = __nwlog_obj();
                v221 = __len[1];
                if (os_log_type_enabled(v220, __len[1]))
                {
                  *(_DWORD *)buf = 136446210;
                  v364 = "nw_http1_connection_write_chunk_header";
                  v203 = v220;
                  v204 = v221;
                  v205 = "%{public}s called with null buffer, backtrace limit exceeded";
                  goto LABEL_335;
                }
              }
            }
LABEL_336:
            if (v200)
              free(v200);
            v9 = v348;
LABEL_153:
            v97 = v92 + 2;
            v98 = v90 + 3;
            if (v92 == 6)
            {
              v99 = 0;
              goto LABEL_203;
            }
LABEL_202:
            memmove((void *)(v77 + v98), (const void *)(v77 + 10), __len[0]);
            v99 = 8 - v97;
LABEL_203:
            if (v77)
            {
              v125 = v77 + v98 + __len[0];
              *(_WORD *)v125 = 2573;
              if (!v79)
                goto LABEL_212;
              *(_BYTE *)(v125 + 6) = 10;
              *(_DWORD *)(v125 + 2) = 218762544;
LABEL_206:
              v126 = v79 ^ 1;
              if ((*v340 & 0x8000) == 0)
                v126 = 1;
              if ((v126 & 1) == 0)
              {
                if ((*(_BYTE *)(v9 + 158) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v214 = __nwlog_obj();
                    if (os_log_type_enabled(v214, OS_LOG_TYPE_DEBUG))
                    {
                      v215 = *(_QWORD *)(v9 + 488);
                      if (v215)
                        LODWORD(v215) = *(_DWORD *)(v215 + 424);
                      v9 = v348;
                      v216 = *(_DWORD *)(*(_QWORD *)(v348 + 480) + 372);
                      v217 = *(_DWORD *)(v348 + 860);
                      *(_DWORD *)buf = 136447746;
                      v364 = "nw_http1_connection_drain_outbound_frames";
                      v365 = 2082;
                      *(_QWORD *)v366 = v347;
                      *(_WORD *)&v366[8] = 2080;
                      *(_QWORD *)&v366[10] = " ";
                      v367 = 1024;
                      *(_DWORD *)v368 = v216;
                      *(_WORD *)&v368[4] = 1024;
                      *(_DWORD *)&v368[6] = v217;
                      LOWORD(v369) = 1024;
                      *(_DWORD *)((char *)&v369 + 2) = v215;
                      HIWORD(v369) = 2048;
                      *(_QWORD *)v370 = v89;
                      _os_log_impl(&dword_182FBE000, v214, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> pending final chunk written to frame %p", buf, 0x3Cu);
                    }
                  }
                }
                v127 = *v340;
                v128 = v127 & 0xFFFF7FFF | (*((unsigned __int8 *)v340 + 2) << 16);
                *v340 = v127 & 0x7FFF;
                *((_BYTE *)v340 + 2) = BYTE2(v128);
              }
LABEL_212:
              if (v79)
                v129 = 0;
              else
                v129 = 5;
              v130 = v99 + v129;
              if (!__CFADD__(v99, (_DWORD)v129))
              {
                v11 = v89;
                v14 = v346;
                if (!(_DWORD)v130)
                {
LABEL_237:
                  v17 = (char *)nw_frame_unclaimed_bytes(v11, __len);
                  if ((*(_WORD *)(v11 + 204) & 4) != 0)
                  {
                    v151 = *(_BYTE *)(v11 + 216);
                    *(_QWORD *)(v11 + 208) = v9;
                    *(_BYTE *)(v11 + 216) = v151 & 0xFC | 1;
                    goto LABEL_43;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  *(_DWORD *)buf = 136446466;
                  v364 = "nw_http1_frame_metadata_reset";
                  v365 = 2048;
                  v144 = v11;
                  *(_QWORD *)v366 = v11;
                  v145 = (char *)_os_log_send_and_compose_impl();
                  LOBYTE(__len[1]) = 16;
                  type[0] = OS_LOG_TYPE_DEFAULT;
                  if (!__nwlog_fault(v145, &__len[1], type))
                    goto LABEL_253;
                  if (LOBYTE(__len[1]) == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v146 = gLogObj;
                    v147 = __len[1];
                    if (os_log_type_enabled((os_log_t)gLogObj, __len[1]))
                    {
                      *(_DWORD *)buf = 136446466;
                      v364 = "nw_http1_frame_metadata_reset";
                      v365 = 2048;
                      *(_QWORD *)v366 = v11;
                      v148 = v146;
                      v149 = v147;
                      v150 = "%{public}s frame %p has no metadata";
LABEL_252:
                      _os_log_impl(&dword_182FBE000, v148, v149, v150, buf, 0x16u);
                    }
                  }
                  else if (type[0])
                  {
                    v152 = (char *)__nw_create_backtrace_string();
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v153 = gLogObj;
                    v154 = __len[1];
                    v155 = os_log_type_enabled((os_log_t)gLogObj, __len[1]);
                    if (v152)
                    {
                      if (v155)
                      {
                        *(_DWORD *)buf = 136446722;
                        v364 = "nw_http1_frame_metadata_reset";
                        v365 = 2048;
                        *(_QWORD *)v366 = v144;
                        *(_WORD *)&v366[8] = 2082;
                        *(_QWORD *)&v366[10] = v152;
                        _os_log_impl(&dword_182FBE000, v153, v154, "%{public}s frame %p has no metadata, dumping backtrace:%{public}s", buf, 0x20u);
                      }
                      free(v152);
                      v9 = v348;
                      goto LABEL_253;
                    }
                    v9 = v348;
                    if (v155)
                    {
                      *(_DWORD *)buf = 136446466;
                      v364 = "nw_http1_frame_metadata_reset";
                      v365 = 2048;
                      *(_QWORD *)v366 = v144;
                      v148 = v153;
                      v149 = v154;
                      v150 = "%{public}s frame %p has no metadata, no backtrace";
                      goto LABEL_252;
                    }
                  }
                  else
                  {
                    v156 = __nwlog_obj();
                    v157 = __len[1];
                    if (os_log_type_enabled(v156, __len[1]))
                    {
                      *(_DWORD *)buf = 136446466;
                      v364 = "nw_http1_frame_metadata_reset";
                      v365 = 2048;
                      *(_QWORD *)v366 = v11;
                      v148 = v156;
                      v149 = v157;
                      v150 = "%{public}s frame %p has no metadata, backtrace limit exceeded";
                      goto LABEL_252;
                    }
                  }
LABEL_253:
                  if (v145)
                    free(v145);
                  v11 = v144;
                  v14 = v346;
                  goto LABEL_43;
                }
LABEL_236:
                nw_frame_claim(v11, v75, 0, v130);
                goto LABEL_237;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              *(_DWORD *)buf = 136446978;
              v364 = "nw_http1_connection_drain_outbound_frames";
              v365 = 2082;
              *(_QWORD *)v366 = "unused_bytes";
              *(_WORD *)&v366[8] = 2048;
              *(_QWORD *)&v366[10] = v129;
              v367 = 2048;
              *(_QWORD *)v368 = v99 + v129;
              v131 = (char *)_os_log_send_and_compose_impl();
              LOBYTE(__len[1]) = 16;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v11 = v89;
              if (__nwlog_fault(v131, &__len[1], type))
              {
                if (LOBYTE(__len[1]) == 17)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v132 = gLogObj;
                  v133 = __len[1];
                  if (os_log_type_enabled((os_log_t)gLogObj, __len[1]))
                  {
                    *(_DWORD *)buf = 136446978;
                    v364 = "nw_http1_connection_drain_outbound_frames";
                    v365 = 2082;
                    *(_QWORD *)v366 = "unused_bytes";
                    *(_WORD *)&v366[8] = 2048;
                    *(_QWORD *)&v366[10] = v129;
                    v367 = 2048;
                    *(_QWORD *)v368 = v130;
                    v134 = v132;
                    v135 = v133;
                    v136 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_232:
                    _os_log_impl(&dword_182FBE000, v134, v135, v136, buf, 0x2Au);
                  }
                }
                else if (type[0])
                {
                  v137 = v89;
                  v138 = (char *)__nw_create_backtrace_string();
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v139 = gLogObj;
                  v140 = __len[1];
                  v141 = os_log_type_enabled((os_log_t)gLogObj, __len[1]);
                  if (v138)
                  {
                    if (v141)
                    {
                      *(_DWORD *)buf = 136447234;
                      v364 = "nw_http1_connection_drain_outbound_frames";
                      v365 = 2082;
                      *(_QWORD *)v366 = "unused_bytes";
                      *(_WORD *)&v366[8] = 2048;
                      *(_QWORD *)&v366[10] = v129;
                      v367 = 2048;
                      *(_QWORD *)v368 = v130;
                      *(_WORD *)&v368[8] = 2082;
                      v369 = v138;
                      _os_log_impl(&dword_182FBE000, v139, v140, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                    }
                    free(v138);
                    v11 = v137;
                    goto LABEL_233;
                  }
                  v11 = v137;
                  if (v141)
                  {
                    *(_DWORD *)buf = 136446978;
                    v364 = "nw_http1_connection_drain_outbound_frames";
                    v365 = 2082;
                    *(_QWORD *)v366 = "unused_bytes";
                    *(_WORD *)&v366[8] = 2048;
                    *(_QWORD *)&v366[10] = v129;
                    v367 = 2048;
                    *(_QWORD *)v368 = v130;
                    v134 = v139;
                    v135 = v140;
                    v136 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                    goto LABEL_232;
                  }
                }
                else
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v142 = gLogObj;
                  v143 = __len[1];
                  if (os_log_type_enabled((os_log_t)gLogObj, __len[1]))
                  {
                    *(_DWORD *)buf = 136446978;
                    v364 = "nw_http1_connection_drain_outbound_frames";
                    v365 = 2082;
                    *(_QWORD *)v366 = "unused_bytes";
                    *(_WORD *)&v366[8] = 2048;
                    *(_QWORD *)&v366[10] = v129;
                    v367 = 2048;
                    *(_QWORD *)v368 = v130;
                    v134 = v142;
                    v135 = v143;
                    v136 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                    goto LABEL_232;
                  }
                }
              }
LABEL_233:
              if (v131)
                free(v131);
              LODWORD(v130) = -1;
              v9 = v348;
              v14 = v346;
              goto LABEL_236;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v364 = "nw_http1_connection_write_chunk_trailer";
            v194 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__len[1]) = 16;
            type[0] = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v194, &__len[1], type))
            {
              if (LOBYTE(__len[1]) == 17)
              {
                v195 = __nwlog_obj();
                v196 = __len[1];
                if (!os_log_type_enabled(v195, __len[1]))
                  goto LABEL_329;
                *(_DWORD *)buf = 136446210;
                v364 = "nw_http1_connection_write_chunk_trailer";
                v197 = v195;
                v198 = v196;
                v199 = "%{public}s called with null buffer";
                goto LABEL_328;
              }
              if (type[0] == OS_LOG_TYPE_DEFAULT)
              {
                v218 = __nwlog_obj();
                v219 = __len[1];
                v9 = v348;
                if (!os_log_type_enabled(v218, __len[1]))
                  goto LABEL_329;
                *(_DWORD *)buf = 136446210;
                v364 = "nw_http1_connection_write_chunk_trailer";
                v197 = v218;
                v198 = v219;
                v199 = "%{public}s called with null buffer, backtrace limit exceeded";
                goto LABEL_328;
              }
              v206 = (char *)__nw_create_backtrace_string();
              v207 = __nwlog_obj();
              v208 = __len[1];
              v209 = os_log_type_enabled(v207, __len[1]);
              if (v206)
              {
                if (v209)
                {
                  *(_DWORD *)buf = 136446466;
                  v364 = "nw_http1_connection_write_chunk_trailer";
                  v365 = 2082;
                  *(_QWORD *)v366 = v206;
                  _os_log_impl(&dword_182FBE000, v207, v208, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v206);
                v9 = v348;
                goto LABEL_329;
              }
              v9 = v348;
              if (v209)
              {
                *(_DWORD *)buf = 136446210;
                v364 = "nw_http1_connection_write_chunk_trailer";
                v197 = v207;
                v198 = v208;
                v199 = "%{public}s called with null buffer, no backtrace";
LABEL_328:
                _os_log_impl(&dword_182FBE000, v197, v198, v199, buf, 0xCu);
              }
            }
LABEL_329:
            if (v194)
              free(v194);
            goto LABEL_206;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_write_chunk_header";
          v100 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(__len[1]) = 16;
          type[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v100, &__len[1], type))
          {
            if (LOBYTE(__len[1]) == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v101 = gLogObj;
              v102 = __len[1];
              if (os_log_type_enabled((os_log_t)gLogObj, __len[1]))
              {
                *(_DWORD *)buf = 136446210;
                v364 = "nw_http1_connection_write_chunk_header";
                v103 = v101;
                v104 = v102;
                v105 = "%{public}s called with null size";
LABEL_198:
                _os_log_impl(&dword_182FBE000, v103, v104, v105, buf, 0xCu);
              }
            }
            else if (type[0])
            {
              v119 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v120 = gLogObj;
              v121 = __len[1];
              v122 = os_log_type_enabled((os_log_t)gLogObj, __len[1]);
              if (v119)
              {
                if (v122)
                {
                  *(_DWORD *)buf = 136446466;
                  v364 = "nw_http1_connection_write_chunk_header";
                  v365 = 2082;
                  *(_QWORD *)v366 = v119;
                  _os_log_impl(&dword_182FBE000, v120, v121, "%{public}s called with null size, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v119);
                goto LABEL_199;
              }
              if (v122)
              {
                *(_DWORD *)buf = 136446210;
                v364 = "nw_http1_connection_write_chunk_header";
                v103 = v120;
                v104 = v121;
                v105 = "%{public}s called with null size, no backtrace";
                goto LABEL_198;
              }
            }
            else
            {
              v123 = __nwlog_obj();
              v124 = __len[1];
              if (os_log_type_enabled(v123, __len[1]))
              {
                *(_DWORD *)buf = 136446210;
                v364 = "nw_http1_connection_write_chunk_header";
                v103 = v123;
                v104 = v124;
                v105 = "%{public}s called with null size, backtrace limit exceeded";
                goto LABEL_198;
              }
            }
          }
LABEL_199:
          if (v100)
            free(v100);
          v89 = v11;
          v97 = 0;
          v98 = 2;
          v9 = v348;
          goto LABEL_202;
        }
        if (g_channel_check_validity(v11, *(_QWORD *)(v11 + 88)))
        {
          v76 = *(_QWORD *)(v11 + 112);
          goto LABEL_130;
        }
      }
      v77 = 0;
      v78 = *(_QWORD *)(v11 + 64);
      if (v78)
        goto LABEL_131;
      goto LABEL_143;
    }
LABEL_43:
    if (nw_frame_is_metadata_complete(v11))
    {
      if ((*(_BYTE *)(v9 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v174 = __nwlog_obj();
          if (os_log_type_enabled(v174, OS_LOG_TYPE_DEBUG))
          {
            v175 = *(_QWORD *)(v9 + 488);
            if (v175)
              LODWORD(v175) = *(_DWORD *)(v175 + 424);
            v176 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
            v177 = *(_DWORD *)(v9 + 860);
            *(_DWORD *)buf = 136447746;
            v364 = "nw_http1_connection_drain_outbound_frames";
            v365 = 2082;
            *(_QWORD *)v366 = v347;
            *(_WORD *)&v366[8] = 2080;
            *(_QWORD *)&v366[10] = " ";
            v367 = 1024;
            *(_DWORD *)v368 = v176;
            *(_WORD *)&v368[4] = 1024;
            *(_DWORD *)&v368[6] = v177;
            LOWORD(v369) = 1024;
            *(_DWORD *)((char *)&v369 + 2) = v175;
            HIWORD(v369) = 2048;
            *(_QWORD *)v370 = v11;
            _os_log_impl(&dword_182FBE000, v174, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> draining output frame %p, complete", buf, 0x3Cu);
          }
        }
      }
    }
    v18 = __len[0];
    is_metadata_complete = nw_frame_is_metadata_complete(v11);
    v345 = v14;
    if (!v17)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v364 = "nw_http1_connection_send_bytes";
      v162 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__len[1]) = 16;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v162, &__len[1], type))
        goto LABEL_303;
      if (LOBYTE(__len[1]) == 17)
      {
        v163 = __nwlog_obj();
        v164 = __len[1];
        if (os_log_type_enabled(v163, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_send_bytes";
          v165 = v163;
          v166 = v164;
          v167 = "%{public}s called with null buffer";
LABEL_302:
          _os_log_impl(&dword_182FBE000, v165, v166, v167, buf, 0xCu);
        }
LABEL_303:
        if (v162)
          free(v162);
        LODWORD(v18) = 0;
        goto LABEL_180;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        v190 = __nwlog_obj();
        v191 = __len[1];
        if (os_log_type_enabled(v190, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_send_bytes";
          v165 = v190;
          v166 = v191;
          v167 = "%{public}s called with null buffer, backtrace limit exceeded";
          goto LABEL_302;
        }
        goto LABEL_303;
      }
      v178 = (char *)__nw_create_backtrace_string();
      v179 = __nwlog_obj();
      v180 = __len[1];
      v181 = os_log_type_enabled(v179, __len[1]);
      if (!v178)
      {
        v9 = v348;
        if (v181)
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_send_bytes";
          v165 = v179;
          v166 = v180;
          v167 = "%{public}s called with null buffer, no backtrace";
          goto LABEL_302;
        }
        goto LABEL_303;
      }
      if (v181)
      {
        *(_DWORD *)buf = 136446466;
        v364 = "nw_http1_connection_send_bytes";
        v365 = 2082;
        *(_QWORD *)v366 = v178;
        v182 = v179;
        v183 = v180;
        v184 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_286:
        _os_log_impl(&dword_182FBE000, v182, v183, v184, buf, 0x16u);
      }
LABEL_287:
      free(v178);
      v9 = v348;
      goto LABEL_303;
    }
    if (!(_DWORD)v18)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v364 = "nw_http1_connection_send_bytes";
      v162 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__len[1]) = 16;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v162, &__len[1], type))
        goto LABEL_303;
      if (LOBYTE(__len[1]) == 17)
      {
        v168 = __nwlog_obj();
        v169 = __len[1];
        if (os_log_type_enabled(v168, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_send_bytes";
          v165 = v168;
          v166 = v169;
          v167 = "%{public}s called with null length";
          goto LABEL_302;
        }
        goto LABEL_303;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        v192 = __nwlog_obj();
        v193 = __len[1];
        if (os_log_type_enabled(v192, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_send_bytes";
          v165 = v192;
          v166 = v193;
          v167 = "%{public}s called with null length, backtrace limit exceeded";
          goto LABEL_302;
        }
        goto LABEL_303;
      }
      v178 = (char *)__nw_create_backtrace_string();
      v185 = __nwlog_obj();
      v186 = __len[1];
      v187 = os_log_type_enabled(v185, __len[1]);
      if (!v178)
      {
        v9 = v348;
        if (v187)
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_send_bytes";
          v165 = v185;
          v166 = v186;
          v167 = "%{public}s called with null length, no backtrace";
          goto LABEL_302;
        }
        goto LABEL_303;
      }
      if (v187)
      {
        *(_DWORD *)buf = 136446466;
        v364 = "nw_http1_connection_send_bytes";
        v365 = 2082;
        *(_QWORD *)v366 = v178;
        v182 = v185;
        v183 = v186;
        v184 = "%{public}s called with null length, dumping backtrace:%{public}s";
        goto LABEL_286;
      }
      goto LABEL_287;
    }
    v20 = *(_QWORD *)(v9 + 32);
    if (!v20)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v364 = "nw_http1_connection_send_bytes";
      v222 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__len[1]) = 16;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v222, &__len[1], type))
      {
        if (LOBYTE(__len[1]) == 17)
        {
          v223 = __nwlog_obj();
          v224 = __len[1];
          if (os_log_type_enabled(v223, __len[1]))
          {
            *(_DWORD *)buf = 136446210;
            v364 = "nw_http1_connection_send_bytes";
            v225 = v223;
            v226 = v224;
            v227 = "%{public}s called with null output_handler";
LABEL_352:
            _os_log_impl(&dword_182FBE000, v225, v226, v227, buf, 0xCu);
          }
        }
        else if (type[0])
        {
          v228 = (char *)__nw_create_backtrace_string();
          v229 = __nwlog_obj();
          v230 = __len[1];
          v231 = os_log_type_enabled(v229, __len[1]);
          if (v228)
          {
            if (v231)
            {
              *(_DWORD *)buf = 136446466;
              v364 = "nw_http1_connection_send_bytes";
              v365 = 2082;
              *(_QWORD *)v366 = v228;
              _os_log_impl(&dword_182FBE000, v229, v230, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v228);
            goto LABEL_353;
          }
          if (v231)
          {
            *(_DWORD *)buf = 136446210;
            v364 = "nw_http1_connection_send_bytes";
            v225 = v229;
            v226 = v230;
            v227 = "%{public}s called with null output_handler, no backtrace";
            goto LABEL_352;
          }
        }
        else
        {
          v232 = __nwlog_obj();
          v233 = __len[1];
          if (os_log_type_enabled(v232, __len[1]))
          {
            *(_DWORD *)buf = 136446210;
            v364 = "nw_http1_connection_send_bytes";
            v225 = v232;
            v226 = v233;
            v227 = "%{public}s called with null output_handler, backtrace limit exceeded";
            goto LABEL_352;
          }
        }
      }
LABEL_353:
      if (v222)
        free(v222);
      LODWORD(v18) = 0;
      v9 = v348;
      v10 = v341;
      goto LABEL_180;
    }
    v21 = is_metadata_complete;
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v170 = __nwlog_obj();
        if (os_log_type_enabled(v170, OS_LOG_TYPE_DEBUG))
        {
          v171 = *(_QWORD *)(v9 + 488);
          if (v171)
            LODWORD(v171) = *(_DWORD *)(v171 + 424);
          v172 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
          v173 = *(_DWORD *)(v9 + 860);
          *(_DWORD *)buf = 136447746;
          v364 = "nw_http1_connection_send_bytes";
          v365 = 2082;
          *(_QWORD *)v366 = v347;
          *(_WORD *)&v366[8] = 2080;
          *(_QWORD *)&v366[10] = " ";
          v367 = 1024;
          *(_DWORD *)v368 = v172;
          *(_WORD *)&v368[4] = 1024;
          *(_DWORD *)&v368[6] = v173;
          LOWORD(v369) = 1024;
          *(_DWORD *)((char *)&v369 + 2) = v171;
          HIWORD(v369) = 1024;
          *(_DWORD *)v370 = v18;
          _os_log_impl(&dword_182FBE000, v170, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> sending %u bytes", buf, 0x38u);
        }
      }
    }
    v343 = v11;
    v22 = v18;
    while (1)
    {
      v361 = 0;
      v362 = &v361;
      v359 = 0;
      v360 = &v359;
      output_frames = nw_protocol_get_output_frames(v20, v9, 1, v18, 0xFFFFFFFFLL, (uint64_t)&v361);
      v28 = v361;
      v29 = !v361 || output_frames == 0;
      if (v29)
        break;
      while (1)
      {
        v30 = *(_QWORD *)(v28 + 32);
        if (v30 || *(_QWORD *)(v28 + 40))
        {
          v31 = *(_QWORD *)(v28 + 112);
          if (!v31)
            goto LABEL_69;
        }
        else
        {
          v30 = 0;
          v31 = *(_QWORD *)(v28 + 112);
          if (!v31)
            goto LABEL_69;
        }
        if ((*(_WORD *)(v28 + 204) & 0x100) != 0
          && g_channel_check_validity
          && !g_channel_check_validity(v28, *(_QWORD *)(v28 + 88)))
        {
          LODWORD(v31) = 0;
LABEL_69:
          v33 = 0;
          goto LABEL_70;
        }
        LODWORD(v31) = *(_DWORD *)(v28 + 52);
        v32 = *(unsigned int *)(v28 + 56);
        if ((_DWORD)v31)
          LODWORD(v31) = v31 - (v32 + *(_DWORD *)(v28 + 60));
        v33 = (void *)(*(_QWORD *)(v28 + 112) + v32);
LABEL_70:
        v34 = v31 >= v22 ? v22 : v31;
        memcpy(v33, v17, v34);
        v22 -= v34;
        v17 += v34;
        if (!nw_frame_claim(v28, v35, v34, 0))
          break;
        nw_frame_collapse(v28);
        nw_frame_unclaim(v28, v36, v34, 0);
        v37 = *(_QWORD *)(v28 + 32);
        v38 = *(_QWORD **)(v28 + 40);
        if (v37)
        {
          *(_QWORD *)(v37 + 40) = v38;
          v38 = *(_QWORD **)(v28 + 40);
        }
        else
        {
          v362 = *(uint64_t **)(v28 + 40);
        }
        *v38 = v37;
        v39 = v360;
        *(_QWORD *)(v28 + 32) = 0;
        *(_QWORD *)(v28 + 40) = v39;
        *v39 = v28;
        v360 = (uint64_t *)(v28 + 32);
        if (v30)
        {
          v28 = v30;
          if (v22)
            continue;
        }
        goto LABEL_97;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      v364 = "nw_http1_connection_send_bytes";
      v365 = 1024;
      *(_DWORD *)v366 = v34;
      v40 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v358 = 0;
      if (!__nwlog_fault(v40, type, &v358))
        goto LABEL_95;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v41 = gLogObj;
        v42 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_send_bytes";
          v365 = 1024;
          *(_DWORD *)v366 = v34;
          v43 = v41;
          v44 = v42;
          v45 = "%{public}s claiming frame with %u bytes failed";
          goto LABEL_94;
        }
        goto LABEL_95;
      }
      if (!v358)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v50 = gLogObj;
        v51 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
          goto LABEL_95;
        *(_DWORD *)buf = 136446466;
        v364 = "nw_http1_connection_send_bytes";
        v365 = 1024;
        *(_DWORD *)v366 = v34;
        v43 = v50;
        v44 = v51;
        v45 = "%{public}s claiming frame with %u bytes failed, backtrace limit exceeded";
        goto LABEL_94;
      }
      v46 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v47 = gLogObj;
      v48 = type[0];
      v49 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v46)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446722;
          v364 = "nw_http1_connection_send_bytes";
          v365 = 1024;
          *(_DWORD *)v366 = v34;
          *(_WORD *)&v366[4] = 2082;
          *(_QWORD *)&v366[6] = v46;
          _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s claiming frame with %u bytes failed, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(v46);
        goto LABEL_95;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446466;
        v364 = "nw_http1_connection_send_bytes";
        v365 = 1024;
        *(_DWORD *)v366 = v34;
        v43 = v47;
        v44 = v48;
        v45 = "%{public}s claiming frame with %u bytes failed, no backtrace";
LABEL_94:
        _os_log_impl(&dword_182FBE000, v43, v44, v45, buf, 0x12u);
      }
LABEL_95:
      if (v40)
        free(v40);
LABEL_97:
      v52 = (uint64_t *)v360[1];
      v53 = *v52;
      if (*v52)
      {
        nw_frame_set_metadata(*v52, 0, 0, v21);
        if (v21)
        {
          if ((*(_BYTE *)(v348 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v58 = __nwlog_obj();
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
              {
                v59 = *(_QWORD *)(v348 + 488);
                if (v59)
                  LODWORD(v59) = *(_DWORD *)(v59 + 424);
                v60 = *(_DWORD *)(*(_QWORD *)(v348 + 480) + 372);
                v61 = *(_DWORD *)(v348 + 860);
                *(_DWORD *)buf = 136447746;
                v364 = "nw_http1_connection_send_bytes";
                v365 = 2082;
                *(_QWORD *)v366 = v347;
                *(_WORD *)&v366[8] = 2080;
                *(_QWORD *)&v366[10] = " ";
                v367 = 1024;
                *(_DWORD *)v368 = v60;
                *(_WORD *)&v368[4] = 1024;
                *(_DWORD *)&v368[6] = v61;
                LOWORD(v369) = 1024;
                *(_DWORD *)((char *)&v369 + 2) = v59;
                HIWORD(v369) = 2048;
                *(_QWORD *)v370 = v53;
                _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> setting complete on last output frame %p", buf, 0x3Cu);
              }
            }
          }
        }
      }
      nw_protocol_finalize_output_frames(v20, (uint64_t)&v359);
      v26 = v361;
      v9 = v348;
      if (v361)
      {
        *(_QWORD *)type = 0;
        v355 = type;
        v357 = 0;
        v356 = 0x2000000000;
        *(_QWORD *)&__len[1] = MEMORY[0x1E0C809B0];
        v350 = 0x40000000;
        v351 = ___ZL30nw_http1_connection_send_bytesP19nw_http1_connectionPhjb_block_invoke;
        v352 = &unk_1E14A1890;
        v353 = type;
        do
        {
          if (!v26)
            break;
          v54 = *(_QWORD *)(v26 + 32);
          v55 = ((uint64_t (*)(_DWORD *))v351)(&__len[1]);
          v26 = v54;
        }
        while ((v55 & 1) != 0);
        if ((*(_BYTE *)(v348 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v56 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            v57 = *(_QWORD *)(v348 + 488);
            if (v57)
              LODWORD(v57) = *(_DWORD *)(v57 + 424);
            v23 = *(_DWORD *)(*(_QWORD *)(v348 + 480) + 372);
            v24 = *(_DWORD *)(v348 + 860);
            v25 = *((_DWORD *)v355 + 6);
            *(_DWORD *)buf = 136447746;
            v364 = "nw_http1_connection_send_bytes";
            v365 = 2082;
            *(_QWORD *)v366 = v347;
            *(_WORD *)&v366[8] = 2080;
            *(_QWORD *)&v366[10] = " ";
            v367 = 1024;
            *(_DWORD *)v368 = v23;
            *(_WORD *)&v368[4] = 1024;
            *(_DWORD *)&v368[6] = v24;
            LOWORD(v369) = 1024;
            *(_DWORD *)((char *)&v369 + 2) = v57;
            HIWORD(v369) = 1024;
            *(_DWORD *)v370 = v25;
            _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> failed to use %u frames, marking as failed", buf, 0x38u);
          }
        }
        _Block_object_dispose(type, 8);
      }
      if (!v22)
      {
        v10 = v341;
        goto LABEL_179;
      }
    }
    v68 = output_frames;
    v10 = v341;
    if (output_frames)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      v364 = "nw_http1_connection_send_bytes";
      v365 = 1024;
      *(_DWORD *)v366 = v68;
      v69 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v358 = 0;
      if (!__nwlog_fault(v69, type, &v358))
        goto LABEL_171;
      if (type[0] != OS_LOG_TYPE_FAULT)
      {
        if (v358)
        {
          v84 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v85 = gLogObj;
          v86 = type[0];
          v87 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (v84)
          {
            if (v87)
            {
              *(_DWORD *)buf = 136446722;
              v364 = "nw_http1_connection_send_bytes";
              v365 = 1024;
              *(_DWORD *)v366 = v68;
              *(_WORD *)&v366[4] = 2082;
              *(_QWORD *)&v366[6] = v84;
              _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s output handler reported %u frames to write, but array is empty, dumping backtrace:%{public}s", buf, 0x1Cu);
            }
            free(v84);
            goto LABEL_171;
          }
          if (!v87)
            goto LABEL_171;
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_send_bytes";
          v365 = 1024;
          *(_DWORD *)v366 = v68;
          v72 = v85;
          v73 = v86;
          v74 = "%{public}s output handler reported %u frames to write, but array is empty, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v108 = gLogObj;
          v109 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
            goto LABEL_171;
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_send_bytes";
          v365 = 1024;
          *(_DWORD *)v366 = v68;
          v72 = v108;
          v73 = v109;
          v74 = "%{public}s output handler reported %u frames to write, but array is empty, backtrace limit exceeded";
        }
LABEL_170:
        _os_log_impl(&dword_182FBE000, v72, v73, v74, buf, 0x12u);
        goto LABEL_171;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v70 = gLogObj;
      v71 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v364 = "nw_http1_connection_send_bytes";
        v365 = 1024;
        *(_DWORD *)v366 = v68;
        v72 = v70;
        v73 = v71;
        v74 = "%{public}s output handler reported %u frames to write, but array is empty";
        goto LABEL_170;
      }
LABEL_171:
      if (v69)
        free(v69);
    }
    v9 = v348;
    if ((*(_BYTE *)(v348 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v110 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        v111 = *(_QWORD *)(v348 + 488);
        if (v111)
          LODWORD(v111) = *(_DWORD *)(v111 + 424);
        v112 = *(_DWORD *)(*(_QWORD *)(v348 + 480) + 372);
        v113 = *(_DWORD *)(v348 + 860);
        *(_DWORD *)buf = 136447746;
        v364 = "nw_http1_connection_send_bytes";
        v365 = 2082;
        *(_QWORD *)v366 = v347;
        *(_WORD *)&v366[8] = 2080;
        *(_QWORD *)&v366[10] = " ";
        v367 = 1024;
        *(_DWORD *)v368 = v112;
        *(_WORD *)&v368[4] = 1024;
        *(_DWORD *)&v368[6] = v113;
        LOWORD(v369) = 1024;
        *(_DWORD *)((char *)&v369 + 2) = v111;
        HIWORD(v369) = 1024;
        *(_DWORD *)v370 = v18;
        _os_log_impl(&dword_182FBE000, v110, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> output handler refused frame request for frames of length %u", buf, 0x38u);
      }
    }
    LODWORD(v18) = v18 - v22;
LABEL_179:
    v11 = v343;
LABEL_180:
    if ((_DWORD)v18 == __len[0])
    {
      nw_http_transaction_metadata_increment_outbound_body_transfer_size(*(void **)(*(_QWORD *)(v9 + 488) + 352), v18);
      v114 = *(_QWORD *)(v9 + 488);
      v115 = __len[0];
      v116 = *(_QWORD *)(v114 + 176);
      v93 = __CFADD__(v116, __len[0]);
      *(_QWORD *)(v114 + 176) = v116 + __len[0];
      if (v93)
      {
        if (gLogDatapath)
        {
          v188 = __nwlog_obj();
          if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
          {
            v189 = *(_QWORD *)(v114 + 176);
            *(_DWORD *)buf = 136446978;
            v364 = "increment_outbound_body_size";
            v365 = 2082;
            *(_QWORD *)v366 = "outbound_body_size";
            *(_WORD *)&v366[8] = 2048;
            *(_QWORD *)&v366[10] = v115;
            v367 = 2048;
            *(_QWORD *)v368 = v189;
            _os_log_impl(&dword_182FBE000, v188, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
          }
        }
        *(_QWORD *)(v114 + 176) = -1;
      }
      v117 = v345;
      if (nw_frame_is_metadata_complete(v11))
      {
        *(_WORD *)(*(_QWORD *)(v9 + 488) + 428) |= 0x400u;
        *v340 |= 0x20u;
        nw_http_transaction_metadata_mark_outbound_message_end(*(void **)(*(_QWORD *)(v9 + 488) + 352));
        v118 = *(_QWORD *)(v9 + 488);
        if (*(_BYTE *)(v118 + 168))
        {
          if (*(_QWORD *)(v118 + 160) != *(_QWORD *)(v118 + 176))
          {
            if ((*(_BYTE *)(v118 + 158) & 1) == 0)
            {
              v238 = __nwlog_obj();
              v239 = os_log_type_enabled(v238, OS_LOG_TYPE_ERROR);
              v118 = *(_QWORD *)(v9 + 488);
              if (v239)
              {
                v240 = *(_QWORD *)(v118 + 256);
                if (v240)
                  LODWORD(v240) = *(_DWORD *)(v240 + 860);
                v241 = *(_DWORD *)(*(_QWORD *)(v118 + 248) + 372);
                v242 = *(_DWORD *)(v118 + 424);
                if (*(_BYTE *)(v118 + 168))
                  v243 = *(_QWORD *)(v118 + 160);
                else
                  v243 = -1;
                v244 = *(_QWORD *)(v118 + 176);
                *(_DWORD *)buf = 136448002;
                v364 = "nw_http1_connection_drain_outbound_frames";
                v365 = 2082;
                *(_QWORD *)v366 = v118 + 74;
                *(_WORD *)&v366[8] = 2080;
                *(_QWORD *)&v366[10] = " ";
                v367 = 1024;
                *(_DWORD *)v368 = v241;
                *(_WORD *)&v368[4] = 1024;
                *(_DWORD *)&v368[6] = v240;
                LOWORD(v369) = 1024;
                *(_DWORD *)((char *)&v369 + 2) = v242;
                HIWORD(v369) = 2048;
                *(_QWORD *)v370 = v243;
                *(_WORD *)&v370[8] = 2048;
                v371 = v244;
                _os_log_impl(&dword_182FBE000, v238, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Content length header %llu does not equal body size %llu", buf, 0x46u);
                v118 = *(_QWORD *)(v9 + 488);
              }
            }
            nw_protocol_error(*(_QWORD **)(v118 + 48), v118);
            nw_protocol_disconnected(*(_QWORD **)(*(_QWORD *)(v9 + 488) + 48), *(_QWORD *)(v9 + 488));
            goto LABEL_370;
          }
        }
      }
LABEL_25:
      *(_QWORD *)(v11 + 80) = 0;
      *(_QWORD *)(v11 + 88) = 0;
      nw_frame_cache_return_frame(v344, v11);
      v11 = *v10;
LABEL_26:
      if (!v11)
        goto LABEL_373;
      continue;
    }
    break;
  }
  v117 = v345;
  if ((*(_BYTE *)(v9 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v234 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      v235 = *(_QWORD *)(v9 + 488);
      v236 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
      v237 = *(_DWORD *)(v9 + 860);
      if (v235)
        LODWORD(v235) = *(_DWORD *)(v235 + 424);
      *(_DWORD *)buf = 136448002;
      v364 = "nw_http1_connection_drain_outbound_frames";
      v365 = 2082;
      *(_QWORD *)v366 = v347;
      *(_WORD *)&v366[8] = 2080;
      *(_QWORD *)&v366[10] = " ";
      v367 = 1024;
      *(_DWORD *)v368 = v236;
      *(_WORD *)&v368[4] = 1024;
      *(_DWORD *)&v368[6] = v237;
      LOWORD(v369) = 1024;
      *(_DWORD *)((char *)&v369 + 2) = v235;
      HIWORD(v369) = 1024;
      *(_DWORD *)v370 = __len[0];
      *(_WORD *)&v370[4] = 1024;
      *(_DWORD *)&v370[6] = v18;
      _os_log_impl(&dword_182FBE000, v234, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:c%u:s%u> could not send pending output frame of length %u sent %u", buf, 0x3Eu);
    }
  }
LABEL_370:
  nw_frame_claim(v11, v26, v18, 0);
  v245 = *v10;
  *(_QWORD *)(v11 + 32) = *v10;
  v246 = (_QWORD *)(v245 + 40);
  v29 = v245 == 0;
  v247 = v342;
  if (!v29)
    v247 = v246;
  *v247 = v117;
  *v10 = v11;
  *(_QWORD *)(v11 + 40) = v10;
LABEL_373:
  v248 = *(unsigned __int16 *)(v9 + 872);
  if ((v248 & 0x8000) != 0 && !*v10)
  {
    v254 = (_WORD *)(v9 + 872);
    v255 = v248 & 0xFFFF7FFF | (*(unsigned __int8 *)(v9 + 874) << 16);
    *(_WORD *)(v9 + 872) = v248 & 0x7FFF;
    *(_BYTE *)(v9 + 874) = BYTE2(v255);
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v331 = __nwlog_obj();
        if (os_log_type_enabled(v331, OS_LOG_TYPE_DEBUG))
        {
          v332 = *(_QWORD *)(v9 + 488);
          v333 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
          v334 = *(_DWORD *)(v9 + 860);
          if (v332)
            LODWORD(v332) = *(_DWORD *)(v332 + 424);
          *(_DWORD *)buf = 136447490;
          v364 = "nw_http1_connection_send_final_chunk";
          v365 = 2082;
          *(_QWORD *)v366 = v9 + 74;
          *(_WORD *)&v366[8] = 2080;
          *(_QWORD *)&v366[10] = " ";
          v367 = 1024;
          *(_DWORD *)v368 = v333;
          *(_WORD *)&v368[4] = 1024;
          *(_DWORD *)&v368[6] = v334;
          LOWORD(v369) = 1024;
          *(_DWORD *)((char *)&v369 + 2) = v332;
          _os_log_impl(&dword_182FBE000, v331, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> requesting new frame for final chunk", buf, 0x32u);
          v9 = v348;
        }
      }
    }
    v256 = *(_QWORD *)(v9 + 32);
    if (v256)
    {
      *(_QWORD *)&__len[1] = 0;
      v350 = (uint64_t)&__len[1];
      v257 = nw_protocol_get_output_frames(v256, v9, 5, 5, 1, (uint64_t)&__len[1]);
      v258 = v257;
      v259 = *(_QWORD *)&__len[1];
      if (*(_QWORD *)&__len[1] && v257)
      {
        *(_DWORD *)type = 0;
        v260 = nw_frame_unclaimed_bytes(*(uint64_t *)&__len[1], type);
        *(_DWORD *)v260 = 218762544;
        *(_BYTE *)(v260 + 4) = 10;
        if (nw_frame_claim(v259, v261, 5, 0))
        {
          nw_frame_collapse(v259);
          nw_frame_unclaim(v259, v262, 5u, 0);
          if (nw_protocol_finalize_output_frames(v256, (uint64_t)&__len[1]))
          {
            *(_WORD *)(*(_QWORD *)(v9 + 488) + 428) |= 0x400u;
            *v254 |= 0x20u;
            nw_http_transaction_metadata_mark_outbound_message_end(*(void **)(*(_QWORD *)(v9 + 488) + 352));
            v263 = *(_QWORD *)(v9 + 488);
            if (*(_BYTE *)(v263 + 168))
            {
              if (*(_QWORD *)(v263 + 160) != *(_QWORD *)(v263 + 176))
              {
                if ((*(_BYTE *)(v263 + 158) & 1) == 0)
                {
                  v264 = __nwlog_obj();
                  v265 = os_log_type_enabled(v264, OS_LOG_TYPE_ERROR);
                  v263 = *(_QWORD *)(v9 + 488);
                  if (v265)
                  {
                    v266 = *(_QWORD *)(v263 + 256);
                    if (v266)
                      LODWORD(v266) = *(_DWORD *)(v266 + 860);
                    v267 = *(_DWORD *)(*(_QWORD *)(v263 + 248) + 372);
                    v268 = *(_DWORD *)(v263 + 424);
                    if (*(_BYTE *)(v263 + 168))
                      v269 = *(_QWORD *)(v263 + 160);
                    else
                      v269 = -1;
                    v297 = *(_QWORD *)(v263 + 176);
                    *(_DWORD *)buf = 136448002;
                    v364 = "nw_http1_connection_send_final_chunk";
                    v365 = 2082;
                    *(_QWORD *)v366 = v263 + 74;
                    *(_WORD *)&v366[8] = 2080;
                    *(_QWORD *)&v366[10] = " ";
                    v367 = 1024;
                    *(_DWORD *)v368 = v267;
                    *(_WORD *)&v368[4] = 1024;
                    *(_DWORD *)&v368[6] = v266;
                    LOWORD(v369) = 1024;
                    *(_DWORD *)((char *)&v369 + 2) = v268;
                    HIWORD(v369) = 2048;
                    *(_QWORD *)v370 = v269;
                    *(_WORD *)&v370[8] = 2048;
                    v371 = v297;
                    _os_log_impl(&dword_182FBE000, v264, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Content length header %llu does not equal body size %llu", buf, 0x46u);
                    v263 = *(_QWORD *)(v9 + 488);
                  }
                }
                nw_protocol_error(*(_QWORD **)(v263 + 48), v263);
                nw_protocol_disconnected(*(_QWORD **)(*(_QWORD *)(v9 + 488) + 48), *(_QWORD *)(v9 + 488));
              }
            }
          }
          goto LABEL_375;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446466;
        v364 = "nw_http1_connection_send_final_chunk";
        v365 = 1024;
        *(_DWORD *)v366 = 5;
        v274 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v361) = 16;
        LOBYTE(v359) = 0;
        if (!__nwlog_fault(v274, &v361, &v359))
          goto LABEL_437;
        if (v361 == 17)
        {
          v275 = __nwlog_obj();
          v276 = v361;
          if (!os_log_type_enabled(v275, (os_log_type_t)v361))
            goto LABEL_437;
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_send_final_chunk";
          v365 = 1024;
          *(_DWORD *)v366 = 5;
          v277 = "%{public}s claiming frame with %u bytes failed";
LABEL_435:
          v290 = v275;
          v291 = v276;
          v292 = 18;
LABEL_436:
          _os_log_impl(&dword_182FBE000, v290, v291, v277, buf, v292);
          goto LABEL_437;
        }
        if (!(_BYTE)v359)
        {
          v275 = __nwlog_obj();
          v276 = v361;
          if (!os_log_type_enabled(v275, (os_log_type_t)v361))
            goto LABEL_437;
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_send_final_chunk";
          v365 = 1024;
          *(_DWORD *)v366 = 5;
          v277 = "%{public}s claiming frame with %u bytes failed, backtrace limit exceeded";
          goto LABEL_435;
        }
        v280 = (char *)__nw_create_backtrace_string();
        v275 = __nwlog_obj();
        v276 = v361;
        v281 = os_log_type_enabled(v275, (os_log_type_t)v361);
        if (!v280)
        {
          v9 = v348;
          if (!v281)
            goto LABEL_437;
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_send_final_chunk";
          v365 = 1024;
          *(_DWORD *)v366 = 5;
          v277 = "%{public}s claiming frame with %u bytes failed, no backtrace";
          goto LABEL_435;
        }
        if (v281)
        {
          *(_DWORD *)buf = 136446722;
          v364 = "nw_http1_connection_send_final_chunk";
          v365 = 1024;
          *(_DWORD *)v366 = 5;
          *(_WORD *)&v366[4] = 2082;
          *(_QWORD *)&v366[6] = v280;
          v282 = "%{public}s claiming frame with %u bytes failed, dumping backtrace:%{public}s";
          v283 = v275;
          v284 = v276;
          v285 = 28;
LABEL_415:
          _os_log_impl(&dword_182FBE000, v283, v284, v282, buf, v285);
          goto LABEL_416;
        }
        goto LABEL_416;
      }
      if (!v257)
      {
LABEL_428:
        if ((*(_BYTE *)(v9 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v286 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            v287 = *(_QWORD *)(v9 + 488);
            v288 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
            v289 = *(_DWORD *)(v9 + 860);
            if (v287)
              LODWORD(v287) = *(_DWORD *)(v287 + 424);
            *(_DWORD *)buf = 136447746;
            v364 = "nw_http1_connection_send_final_chunk";
            v365 = 2082;
            *(_QWORD *)v366 = v9 + 74;
            *(_WORD *)&v366[8] = 2080;
            *(_QWORD *)&v366[10] = " ";
            v367 = 1024;
            *(_DWORD *)v368 = v288;
            *(_WORD *)&v368[4] = 1024;
            *(_DWORD *)&v368[6] = v289;
            LOWORD(v369) = 1024;
            *(_DWORD *)((char *)&v369 + 2) = v287;
            HIWORD(v369) = 1024;
            *(_DWORD *)v370 = 5;
            _os_log_impl(&dword_182FBE000, v286, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> output handler refused frame request for frames of length %u", buf, 0x38u);
          }
        }
        goto LABEL_375;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      v364 = "nw_http1_connection_send_final_chunk";
      v365 = 1024;
      *(_DWORD *)v366 = v258;
      v270 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v361) = 0;
      if (__nwlog_fault(v270, type, &v361))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v271 = __nwlog_obj();
          v272 = type[0];
          if (os_log_type_enabled(v271, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            v364 = "nw_http1_connection_send_final_chunk";
            v365 = 1024;
            *(_DWORD *)v366 = v258;
            v273 = "%{public}s output handler reported %u frames to write, but array is empty";
LABEL_424:
            _os_log_impl(&dword_182FBE000, v271, v272, v273, buf, 0x12u);
          }
        }
        else if ((_BYTE)v361)
        {
          v278 = (char *)__nw_create_backtrace_string();
          v271 = __nwlog_obj();
          v272 = type[0];
          v279 = os_log_type_enabled(v271, type[0]);
          if (v278)
          {
            if (v279)
            {
              *(_DWORD *)buf = 136446722;
              v364 = "nw_http1_connection_send_final_chunk";
              v365 = 1024;
              *(_DWORD *)v366 = v258;
              *(_WORD *)&v366[4] = 2082;
              *(_QWORD *)&v366[6] = v278;
              _os_log_impl(&dword_182FBE000, v271, v272, "%{public}s output handler reported %u frames to write, but array is empty, dumping backtrace:%{public}s", buf, 0x1Cu);
            }
            free(v278);
            goto LABEL_425;
          }
          if (v279)
          {
            *(_DWORD *)buf = 136446466;
            v364 = "nw_http1_connection_send_final_chunk";
            v365 = 1024;
            *(_DWORD *)v366 = v258;
            v273 = "%{public}s output handler reported %u frames to write, but array is empty, no backtrace";
            goto LABEL_424;
          }
        }
        else
        {
          v271 = __nwlog_obj();
          v272 = type[0];
          if (os_log_type_enabled(v271, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            v364 = "nw_http1_connection_send_final_chunk";
            v365 = 1024;
            *(_DWORD *)v366 = v258;
            v273 = "%{public}s output handler reported %u frames to write, but array is empty, backtrace limit exceeded";
            goto LABEL_424;
          }
        }
      }
LABEL_425:
      if (v270)
        free(v270);
      v9 = v348;
      goto LABEL_428;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v364 = "nw_http1_connection_send_final_chunk";
    v327 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v327, &__len[1], type))
    {
      if (LOBYTE(__len[1]) == 17)
      {
        v328 = __nwlog_obj();
        v329 = __len[1];
        if (os_log_type_enabled(v328, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_send_final_chunk";
          v330 = "%{public}s called with null output_handler";
LABEL_604:
          _os_log_impl(&dword_182FBE000, v328, v329, v330, buf, 0xCu);
        }
      }
      else if (type[0])
      {
        v338 = (char *)__nw_create_backtrace_string();
        v328 = __nwlog_obj();
        v329 = __len[1];
        v339 = os_log_type_enabled(v328, __len[1]);
        if (v338)
        {
          if (v339)
          {
            *(_DWORD *)buf = 136446466;
            v364 = "nw_http1_connection_send_final_chunk";
            v365 = 2082;
            *(_QWORD *)v366 = v338;
            _os_log_impl(&dword_182FBE000, v328, v329, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v338);
          goto LABEL_605;
        }
        if (v339)
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_send_final_chunk";
          v330 = "%{public}s called with null output_handler, no backtrace";
          goto LABEL_604;
        }
      }
      else
      {
        v328 = __nwlog_obj();
        v329 = __len[1];
        if (os_log_type_enabled(v328, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_send_final_chunk";
          v330 = "%{public}s called with null output_handler, backtrace limit exceeded";
          goto LABEL_604;
        }
      }
    }
LABEL_605:
    if (v327)
      free(v327);
    v9 = v348;
  }
LABEL_375:
  v249 = *(_QWORD *)(v9 + 488);
  if (v249)
  {
    nw_protocol_output_available(*(_QWORD **)(v249 + 48), v249);
  }
  else if ((*(_BYTE *)(v9 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v250 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v251 = *(_QWORD *)(v9 + 488);
      v252 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
      v253 = *(_DWORD *)(v9 + 860);
      if (v251)
        LODWORD(v251) = *(_DWORD *)(v251 + 424);
      *(_DWORD *)buf = 136447490;
      v364 = "nw_protocol_http1_output_available";
      v365 = 2082;
      *(_QWORD *)v366 = v9 + 74;
      *(_WORD *)&v366[8] = 2080;
      *(_QWORD *)&v366[10] = " ";
      v367 = 1024;
      *(_DWORD *)v368 = v252;
      *(_WORD *)&v368[4] = 1024;
      *(_DWORD *)&v368[6] = v253;
      LOWORD(v369) = 1024;
      *(_DWORD *)((char *)&v369 + 2) = v251;
      _os_log_impl(&dword_182FBE000, v250, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> not sending output_available for connection without stream", buf, 0x32u);
    }
  }
}

void nw_protocol_http1_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  int v13;
  int input_frames;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  NSObject *v21;
  int v22;
  int v23;
  _DWORD *v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  int v32;
  int v33;
  char *v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *v37;
  os_log_type_t v38;
  const char *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  os_log_type_t v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  NSObject *v49;
  uint64_t v50;
  int v51;
  int v52;
  const char *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  _DWORD *v72;
  _DWORD *v73;
  char v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  NSObject *v80;
  uint64_t v81;
  int v82;
  int v83;
  const char *v84;
  NSObject *v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  _BOOL4 v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  int v94;
  NSObject *v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  int v109;
  char *v110;
  _BOOL4 v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  NSObject *v115;
  uint64_t v116;
  int v117;
  int v118;
  char *v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  NSObject *v127;
  os_log_type_t v128;
  uint64_t v129;
  const char *v130;
  NSObject *v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  void *v146;
  NSObject *v147;
  uint64_t v148;
  int v149;
  int v150;
  char *v151;
  _BOOL4 v152;
  uint64_t v153;
  char *v154;
  NSObject *v155;
  os_log_type_t v156;
  const char *v157;
  char *v158;
  NSObject *v159;
  os_log_type_t v160;
  const char *v161;
  char *backtrace_string;
  _BOOL4 v163;
  char *v164;
  _BOOL4 v165;
  const char *v166;
  uint64_t v167;
  char *v168;
  _BOOL4 v169;
  const char *v170;
  NSObject *v171;
  _BOOL4 v172;
  int v173;
  int v174;
  int v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  NSObject *v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  void *v186;
  char *v187;
  NSObject *v188;
  os_log_type_t v189;
  const char *v190;
  NSObject *v191;
  uint64_t v192;
  int v193;
  int v194;
  _BOOL4 v195;
  _BOOL4 v196;
  NSObject *v197;
  char *v198;
  _BOOL4 v199;
  char *v200;
  char *v201;
  NSObject *v202;
  os_log_type_t v203;
  const char *v204;
  NSObject *v205;
  uint64_t v206;
  int v207;
  int v208;
  char *v209;
  _BOOL4 v210;
  NSObject *v211;
  uint64_t v212;
  int v213;
  int v214;
  int v215;
  char *v216;
  _BOOL4 v217;
  _BOOL4 v218;
  char *v219;
  _BOOL4 v220;
  const char *v221;
  _BOOL4 v222;
  uint8_t *v223;
  NSObject *v224;
  uint64_t v225;
  int v226;
  int v227;
  char *v228;
  NSObject *v229;
  os_log_type_t v230;
  const char *v231;
  NSObject *v232;
  uint64_t v233;
  int v234;
  int v235;
  char *v236;
  NSObject *v237;
  os_log_type_t v238;
  const char *v239;
  char *v240;
  _BOOL4 v241;
  NSObject *v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  char *v247;
  _BOOL4 v248;
  char *v249;
  _BOOL4 v250;
  const char *v251;
  _BOOL4 v252;
  uint8_t *v253;
  NSObject *v254;
  void *v255;
  _WORD *v256;
  os_log_type_t v257[8];
  os_log_type_t *v258;
  char v259;
  os_log_type_t type;
  _BYTE buf[44];
  __int128 v262;
  __int16 v263;
  uint64_t v264;
  _BYTE v265[22];
  uint64_t v266;

  v266 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v154 = (char *)_os_log_send_and_compose_impl();
    v265[0] = 16;
    v257[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v154, v265, v257))
      goto LABEL_396;
    if (v265[0] != 17)
    {
      if (v257[0] == OS_LOG_TYPE_DEFAULT)
      {
        v155 = __nwlog_obj();
        v156 = v265[0];
        if (!os_log_type_enabled(v155, (os_log_type_t)v265[0]))
          goto LABEL_396;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v157 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_395;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v155 = __nwlog_obj();
      v156 = v265[0];
      v163 = os_log_type_enabled(v155, (os_log_type_t)v265[0]);
      if (!backtrace_string)
      {
        if (!v163)
          goto LABEL_396;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v157 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_395;
      }
      if (v163)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v155, v156, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_396;
    }
    v155 = __nwlog_obj();
    v156 = v265[0];
    if (!os_log_type_enabled(v155, (os_log_type_t)v265[0]))
      goto LABEL_396;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v157 = "%{public}s called with null protocol";
    goto LABEL_395;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v154 = (char *)_os_log_send_and_compose_impl();
    v265[0] = 16;
    v257[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v154, v265, v257))
      goto LABEL_396;
    if (v265[0] != 17)
    {
      if (v257[0] == OS_LOG_TYPE_DEFAULT)
      {
        v155 = __nwlog_obj();
        v156 = v265[0];
        if (!os_log_type_enabled(v155, (os_log_type_t)v265[0]))
          goto LABEL_396;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v157 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_395;
      }
      v164 = (char *)__nw_create_backtrace_string();
      v155 = __nwlog_obj();
      v156 = v265[0];
      v165 = os_log_type_enabled(v155, (os_log_type_t)v265[0]);
      if (!v164)
      {
        if (!v165)
          goto LABEL_396;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v157 = "%{public}s called with null handle, no backtrace";
        goto LABEL_395;
      }
      if (!v165)
        goto LABEL_272;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v164;
      v166 = "%{public}s called with null handle, dumping backtrace:%{public}s";
      goto LABEL_271;
    }
    v155 = __nwlog_obj();
    v156 = v265[0];
    if (!os_log_type_enabled(v155, (os_log_type_t)v265[0]))
      goto LABEL_396;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v157 = "%{public}s called with null handle";
LABEL_395:
    _os_log_impl(&dword_182FBE000, v155, v156, v157, buf, 0xCu);
    goto LABEL_396;
  }
  v3 = *((_DWORD *)handle + 6);
  v4 = a1->handle;
  if (v3 == 1)
    goto LABEL_10;
  if (v3 != 2)
  {
    if (v3 != 3)
      goto LABEL_398;
    v5 = *((_QWORD *)handle + 2);
    if (v5)
    {
      v4 = (_QWORD *)(v5 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v154 = (char *)_os_log_send_and_compose_impl();
    v265[0] = 16;
    v257[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v154, v265, v257))
    {
      if (v265[0] == 17)
      {
        v155 = __nwlog_obj();
        v156 = v265[0];
        if (!os_log_type_enabled(v155, (os_log_type_t)v265[0]))
          goto LABEL_396;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v157 = "%{public}s called with null handle->http1_connection";
        goto LABEL_395;
      }
      if (v257[0] == OS_LOG_TYPE_DEFAULT)
      {
        v155 = __nwlog_obj();
        v156 = v265[0];
        if (!os_log_type_enabled(v155, (os_log_type_t)v265[0]))
          goto LABEL_396;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v157 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_395;
      }
      v164 = (char *)__nw_create_backtrace_string();
      v155 = __nwlog_obj();
      v156 = v265[0];
      v196 = os_log_type_enabled(v155, (os_log_type_t)v265[0]);
      if (!v164)
      {
        if (!v196)
          goto LABEL_396;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v157 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_395;
      }
      if (v196)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v164;
        v166 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_271;
      }
LABEL_272:
      free(v164);
      if (!v154)
      {
LABEL_398:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
        v158 = (char *)_os_log_send_and_compose_impl();
        v265[0] = 16;
        v257[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v158, v265, v257))
          goto LABEL_432;
        if (v265[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v159 = gLogObj;
          v160 = v265[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v265[0]))
            goto LABEL_432;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
          v161 = "%{public}s called with null http1";
        }
        else if (v257[0])
        {
          v216 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v159 = gLogObj;
          v160 = v265[0];
          v217 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v265[0]);
          if (v216)
          {
            if (v217)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v216;
              _os_log_impl(&dword_182FBE000, v159, v160, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v216);
LABEL_432:
            if (!v158)
              return;
            goto LABEL_433;
          }
          if (!v217)
            goto LABEL_432;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
          v161 = "%{public}s called with null http1, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v159 = gLogObj;
          v160 = v265[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v265[0]))
            goto LABEL_432;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
          v161 = "%{public}s called with null http1, backtrace limit exceeded";
        }
        goto LABEL_431;
      }
LABEL_397:
      free(v154);
      goto LABEL_398;
    }
LABEL_396:
    if (!v154)
      goto LABEL_398;
    goto LABEL_397;
  }
  v6 = *((_QWORD *)handle + 1);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v154 = (char *)_os_log_send_and_compose_impl();
    v265[0] = 16;
    v257[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v154, v265, v257))
      goto LABEL_396;
    if (v265[0] == 17)
    {
      v155 = __nwlog_obj();
      v156 = v265[0];
      if (!os_log_type_enabled(v155, (os_log_type_t)v265[0]))
        goto LABEL_396;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v157 = "%{public}s called with null handle->http1_stream";
      goto LABEL_395;
    }
    if (v257[0] == OS_LOG_TYPE_DEFAULT)
    {
      v155 = __nwlog_obj();
      v156 = v265[0];
      if (!os_log_type_enabled(v155, (os_log_type_t)v265[0]))
        goto LABEL_396;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v157 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_395;
    }
    v164 = (char *)__nw_create_backtrace_string();
    v155 = __nwlog_obj();
    v156 = v265[0];
    v195 = os_log_type_enabled(v155, (os_log_type_t)v265[0]);
    if (!v164)
    {
      if (!v195)
        goto LABEL_396;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v157 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_395;
    }
    if (!v195)
      goto LABEL_272;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v164;
    v166 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
LABEL_271:
    _os_log_impl(&dword_182FBE000, v155, v156, v166, buf, 0x16u);
    goto LABEL_272;
  }
  v4 = (_QWORD *)(v6 + 248);
LABEL_10:
  if (!*v4)
    goto LABEL_398;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
    v158 = (char *)_os_log_send_and_compose_impl();
    v265[0] = 16;
    v257[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v158, v265, v257))
      goto LABEL_432;
    if (v265[0] == 17)
    {
      v159 = __nwlog_obj();
      v160 = v265[0];
      if (!os_log_type_enabled(v159, (os_log_type_t)v265[0]))
        goto LABEL_432;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
      v161 = "%{public}s called with null other_protocol";
    }
    else if (v257[0])
    {
      v168 = (char *)__nw_create_backtrace_string();
      v159 = __nwlog_obj();
      v160 = v265[0];
      v169 = os_log_type_enabled(v159, (os_log_type_t)v265[0]);
      if (v168)
      {
        if (!v169)
          goto LABEL_425;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v168;
        v170 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_424;
      }
      if (!v169)
        goto LABEL_432;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
      v161 = "%{public}s called with null other_protocol, no backtrace";
    }
    else
    {
      v159 = __nwlog_obj();
      v160 = v265[0];
      if (!os_log_type_enabled(v159, (os_log_type_t)v265[0]))
        goto LABEL_432;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
      v161 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }
LABEL_431:
    _os_log_impl(&dword_182FBE000, v159, v160, v161, buf, 0xCu);
    goto LABEL_432;
  }
  if (v3 == 2)
  {
    v8 = *((_QWORD *)handle + 1);
    if (v8)
    {
      v7 = (uint64_t *)(v8 + 256);
      goto LABEL_17;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
    v187 = (char *)_os_log_send_and_compose_impl();
    v265[0] = 16;
    v257[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v187, v265, v257))
    {
      if (v265[0] == 17)
      {
        v188 = __nwlog_obj();
        v189 = v265[0];
        if (!os_log_type_enabled(v188, (os_log_type_t)v265[0]))
          goto LABEL_414;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v190 = "%{public}s called with null handle->http1_stream";
        goto LABEL_413;
      }
      if (v257[0] == OS_LOG_TYPE_DEFAULT)
      {
        v188 = __nwlog_obj();
        v189 = v265[0];
        if (!os_log_type_enabled(v188, (os_log_type_t)v265[0]))
          goto LABEL_414;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v190 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
        goto LABEL_413;
      }
      v198 = (char *)__nw_create_backtrace_string();
      v188 = __nwlog_obj();
      v189 = v265[0];
      v199 = os_log_type_enabled(v188, (os_log_type_t)v265[0]);
      if (v198)
      {
        if (v199)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v198;
          _os_log_impl(&dword_182FBE000, v188, v189, "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v198);
        goto LABEL_414;
      }
      if (v199)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v190 = "%{public}s called with null handle->http1_stream, no backtrace";
LABEL_413:
        _os_log_impl(&dword_182FBE000, v188, v189, v190, buf, 0xCu);
      }
    }
LABEL_414:
    if (v187)
      free(v187);
    goto LABEL_416;
  }
  if (v3 != 3)
  {
LABEL_416:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
    v158 = (char *)_os_log_send_and_compose_impl();
    v265[0] = 16;
    v257[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v158, v265, v257))
      goto LABEL_432;
    if (v265[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v159 = gLogObj;
      v160 = v265[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v265[0]))
        goto LABEL_432;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
      v161 = "%{public}s called with null http1_connection";
      goto LABEL_431;
    }
    if (v257[0] == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v159 = gLogObj;
      v160 = v265[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v265[0]))
        goto LABEL_432;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
      v161 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_431;
    }
    v168 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v159 = gLogObj;
    v160 = v265[0];
    v218 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v265[0]);
    if (!v168)
    {
      if (!v218)
        goto LABEL_432;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
      v161 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_431;
    }
    if (!v218)
    {
LABEL_425:
      free(v168);
      if (!v158)
        return;
LABEL_433:
      free(v158);
      return;
    }
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v168;
    v170 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_424:
    _os_log_impl(&dword_182FBE000, v159, v160, v170, buf, 0x16u);
    goto LABEL_425;
  }
  v7 = (uint64_t *)(handle + 16);
LABEL_17:
  v9 = *v7;
  if (!*v7)
    goto LABEL_416;
  v10 = (unsigned __int16 *)(v9 + 872);
  v11 = *(unsigned __int16 *)(v9 + 872);
  v12 = v11 | (*(unsigned __int8 *)(v9 + 874) << 16);
  if ((v11 & 0x2000) != 0)
  {
    if ((*(_BYTE *)(v9 + 158) & 1) != 0)
      goto LABEL_96;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v49 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      goto LABEL_96;
    v50 = *(_QWORD *)(v9 + 488);
    v51 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
    v52 = *(_DWORD *)(v9 + 860);
    if (v50)
      LODWORD(v50) = *(_DWORD *)(v50 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http1_connection_finish_input";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v9 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v51;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v52;
    LOWORD(v262) = 1024;
    *(_DWORD *)((char *)&v262 + 2) = v50;
    v53 = "%{public}s %{public}s%s<i%u:c%u:s%u> input already finished, returning";
LABEL_95:
    _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_INFO, v53, buf, 0x32u);
    goto LABEL_96;
  }
  *(_BYTE *)(v9 + 874) = BYTE2(v12);
  *v10 = v12 | 0x2000;
  if ((v12 & 0x40000) != 0)
  {
    if ((*(_BYTE *)(v9 + 158) & 1) != 0)
      goto LABEL_96;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v49 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      goto LABEL_96;
    v54 = *(_QWORD *)(v9 + 488);
    v55 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
    v56 = *(_DWORD *)(v9 + 860);
    if (v54)
      LODWORD(v54) = *(_DWORD *)(v54 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http1_connection_finish_input";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v9 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v55;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v56;
    LOWORD(v262) = 1024;
    *(_DWORD *)((char *)&v262 + 2) = v54;
    v53 = "%{public}s %{public}s%s<i%u:c%u:s%u> already getting input frames, returning";
    goto LABEL_95;
  }
  v256 = (_WORD *)(v9 + 872);
  v13 = 0;
  *(_QWORD *)v257 = 0;
  v258 = v257;
  do
  {
    input_frames = nw_protocol_get_input_frames(*(_QWORD *)(v9 + 32), v9, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, (uint64_t)v257);
    v15 = *(_DWORD **)v257;
    if (!*(_QWORD *)v257)
      goto LABEL_22;
    if (gLogDatapath)
    {
      v47 = __nwlog_obj();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v15;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v257;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v9 + 616;
        *(_WORD *)&buf[42] = 1024;
        LODWORD(v262) = 1;
        WORD2(v262) = 1024;
        *(_DWORD *)((char *)&v262 + 6) = 1;
        WORD5(v262) = 1024;
        HIDWORD(v262) = 1;
        _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s called: initial frame %p, source %p, destination %p, temp %u, forwards %u, append %u", buf, 0x3Cu);
      }
    }
    v16 = 0;
    *(_QWORD *)v265 = 0;
    *(_QWORD *)&v265[8] = v265;
    do
    {
      v19 = (_DWORD *)*((_QWORD *)v15 + 4);
      if (!v19 && !*((_QWORD *)v15 + 5))
        v19 = 0;
      if (gLogDatapath)
      {
        v21 = __nwlog_obj();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          v22 = v15[13];
          if (v22)
            v22 -= v15[14] + v15[15];
          if (v19)
          {
            v23 = v19[13];
            if (v23)
              v23 -= v19[14] + v19[15];
          }
          else
          {
            v23 = 0;
          }
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v15;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v22;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v19;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v23;
          _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)", buf, 0x2Cu);
        }
      }
      v20 = *((_QWORD *)v15 + 4);
      v17 = (_QWORD *)*((_QWORD *)v15 + 5);
      if (v20)
      {
        *(_QWORD *)(v20 + 40) = v17;
        v17 = (_QWORD *)*((_QWORD *)v15 + 5);
      }
      else
      {
        v258 = (os_log_type_t *)*((_QWORD *)v15 + 5);
      }
      *v17 = v20;
      v18 = *(_QWORD **)&v265[8];
      *((_QWORD *)v15 + 4) = 0;
      *((_QWORD *)v15 + 5) = v18;
      *v18 = v15;
      *(_QWORD *)&v265[8] = v15 + 8;
      ++v16;
      v15 = v19;
    }
    while (v19);
    if (v16)
    {
      if (gLogDatapath)
      {
        v48 = __nwlog_obj();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v16;
          _os_log_impl(&dword_182FBE000, v48, OS_LOG_TYPE_DEBUG, "%{public}s moving %u frames from temp array to destination array", buf, 0x12u);
        }
      }
      v24 = *(_DWORD **)v265;
      v25 = v16;
      if (!*(_QWORD *)v265)
        goto LABEL_63;
      v25 = v16;
      do
      {
        v27 = v24 + 8;
        v28 = (_DWORD *)*((_QWORD *)v24 + 4);
        if (!v28 && !*((_QWORD *)v24 + 5))
          v28 = 0;
        if (gLogDatapath)
        {
          v31 = __nwlog_obj();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          {
            v32 = v24[13];
            if (v32)
              v32 -= v24[14] + v24[15];
            if (v28)
            {
              v33 = v28[13];
              if (v33)
                v33 -= v28[14] + v28[15];
            }
            else
            {
              v33 = 0;
            }
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v24;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v32;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v28;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v33;
            _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_DEBUG, "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)", buf, 0x2Cu);
          }
        }
        v29 = *((_QWORD *)v24 + 4);
        v30 = (_QWORD *)*((_QWORD *)v24 + 5);
        if (v29)
        {
          *(_QWORD *)(v29 + 40) = v30;
          v30 = (_QWORD *)*((_QWORD *)v24 + 5);
        }
        else
        {
          *(_QWORD *)&v265[8] = *((_QWORD *)v24 + 5);
        }
        *v30 = v29;
        *v27 = 0;
        *((_QWORD *)v24 + 5) = 0;
        v26 = *(_QWORD **)(v9 + 624);
        *((_QWORD *)v24 + 5) = v26;
        *v26 = v24;
        *(_QWORD *)(v9 + 624) = v27;
        --v25;
        v24 = v28;
      }
      while (v28);
      if (v25)
      {
LABEL_63:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v25;
        v34 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v259 = 0;
        if (!__nwlog_fault(v34, &type, &v259))
          goto LABEL_77;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v35 = gLogObj;
          v36 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_77;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v25;
          v37 = v35;
          v38 = v36;
          v39 = "%{public}s failed to deliver all temp frames, remaining %u frames";
        }
        else if (v259)
        {
          v40 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v41 = gLogObj;
          v42 = type;
          v43 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v40)
          {
            if (v43)
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v25;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = v40;
              _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s failed to deliver all temp frames, remaining %u frames, dumping backtrace:%{public}s", buf, 0x1Cu);
            }
            free(v40);
            goto LABEL_77;
          }
          if (!v43)
          {
LABEL_77:
            if (v34)
              free(v34);
            goto LABEL_21;
          }
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v25;
          v37 = v41;
          v38 = v42;
          v39 = "%{public}s failed to deliver all temp frames, remaining %u frames, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v44 = gLogObj;
          v45 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_77;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v25;
          v37 = v44;
          v38 = v45;
          v39 = "%{public}s failed to deliver all temp frames, remaining %u frames, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v37, v38, v39, buf, 0x12u);
        goto LABEL_77;
      }
    }
LABEL_21:
    if (gLogDatapath)
    {
      v46 = __nwlog_obj();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v257;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v9 + 616;
        _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_DEBUG, "%{public}s moved %u frames from %p to %p", buf, 0x26u);
      }
    }
LABEL_22:
    v13 += input_frames;
  }
  while (input_frames);
  if (gLogDatapath)
  {
    v197 = __nwlog_obj();
    if (os_log_type_enabled(v197, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_182FBE000, v197, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  v71 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
  *(_QWORD *)&buf[24] = &__block_descriptor_tmp_55_39648;
  *(_QWORD *)&buf[32] = v257;
  buf[40] = 0;
  v72 = *(_DWORD **)v257;
  v10 = (unsigned __int16 *)(v9 + 872);
  do
  {
    if (!v72)
      break;
    v73 = (_DWORD *)*((_QWORD *)v72 + 4);
    v74 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
    v72 = v73;
  }
  while ((v74 & 1) != 0);
  v75 = (unsigned __int16)*v256;
  v76 = v75 | (*(unsigned __int8 *)(v9 + 874) << 16);
  if ((v75 & 0x6000) == 0x2000 && !*(_QWORD *)(v9 + 616))
  {
    *(_BYTE *)(v9 + 874) = BYTE2(v76);
    *v256 = v76 | 0x4000;
    if (*(_QWORD *)(v9 + 488))
    {
      if (*(_DWORD *)(v9 + 868) && llhttp_message_needs_eof(v9 + 200))
      {
        if ((v76 & 4) == 0)
        {
          v106 = 5;
          if ((*(_BYTE *)(v9 + 158) & 1) != 0)
            goto LABEL_117;
          goto LABEL_191;
        }
LABEL_347:
        if ((*(_BYTE *)(v9 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v224 = __nwlog_obj();
            if (os_log_type_enabled(v224, OS_LOG_TYPE_DEBUG))
            {
              v225 = *(_QWORD *)(v9 + 488);
              v226 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
              v227 = *(_DWORD *)(v9 + 860);
              if (v225)
                LODWORD(v225) = *(_DWORD *)(v225 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_parser_signal_eof_if_needed";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v9 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v226;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v227;
              LOWORD(v262) = 1024;
              *(_DWORD *)((char *)&v262 + 2) = v225;
              _os_log_impl(&dword_182FBE000, v224, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> signaled eof and terminated message successfully", buf, 0x32u);
              v10 = (unsigned __int16 *)(v9 + 872);
            }
          }
        }
        *((_BYTE *)v10 + 2) = (*v10 | (*((unsigned __int8 *)v10 + 2) << 16) | 0x10000u) >> 16;
        goto LABEL_117;
      }
      v113 = llhttp_finish(v9 + 200);
      if ((*v256 & 4) != 0)
        goto LABEL_347;
      v106 = v113;
      if (!v113)
        goto LABEL_347;
      if (v113 != 14)
        goto LABEL_190;
      v114 = *(_QWORD *)(v9 + 488);
      if (v114)
      {
        v106 = 14;
        if ((*v256 & 1) != 0
          && (*(_WORD *)(v114 + 428) & 1) == 0
          && !*(_DWORD *)(v9 + 848)
          && !*(_DWORD *)(v9 + 852)
          && !*(_DWORD *)(v9 + 856))
        {
          if ((*v256 & 2) != 0 && *(_QWORD *)(v9 + 800))
          {
            if (!*(_QWORD *)(v9 + 808))
            {
              v200 = strdup("");
              if (!v200)
              {
                v254 = __nwlog_obj();
                os_log_type_enabled(v254, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "strict_strdup";
                v255 = (void *)_os_log_send_and_compose_impl();
                if (__nwlog_abort((uint64_t)v255))
                {
                  __break(1u);
                  return;
                }
                free(v255);
              }
              *(_QWORD *)(v9 + 808) = v200;
            }
            nw_http1_on_header_value_complete(v9 + 200);
          }
          nw_http1_on_headers_complete(v9 + 200);
          nw_http1_on_message_complete(v9 + 200);
          v10 = (unsigned __int16 *)(v9 + 872);
          goto LABEL_347;
        }
LABEL_190:
        if ((*(_BYTE *)(v9 + 158) & 1) != 0)
          goto LABEL_117;
        goto LABEL_191;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
      v236 = (char *)_os_log_send_and_compose_impl();
      v265[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v236, v265, &type))
      {
        if (v265[0] == 17)
        {
          v237 = __nwlog_obj();
          v238 = v265[0];
          if (!os_log_type_enabled(v237, (os_log_type_t)v265[0]))
            goto LABEL_526;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
          v239 = "%{public}s called with null http1_stream";
LABEL_525:
          _os_log_impl(&dword_182FBE000, v237, v238, v239, buf, 0xCu);
          goto LABEL_526;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          v237 = __nwlog_obj();
          v238 = v265[0];
          if (!os_log_type_enabled(v237, (os_log_type_t)v265[0]))
            goto LABEL_526;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
          v239 = "%{public}s called with null http1_stream, backtrace limit exceeded";
          goto LABEL_525;
        }
        v247 = (char *)__nw_create_backtrace_string();
        v237 = __nwlog_obj();
        v238 = v265[0];
        v248 = os_log_type_enabled(v237, (os_log_type_t)v265[0]);
        if (!v247)
        {
          if (!v248)
            goto LABEL_526;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
          v239 = "%{public}s called with null http1_stream, no backtrace";
          goto LABEL_525;
        }
        if (v248)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v247;
          _os_log_impl(&dword_182FBE000, v237, v238, "%{public}s called with null http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v247);
      }
LABEL_526:
      if (v236)
        free(v236);
      v106 = 14;
      v10 = (unsigned __int16 *)(v9 + 872);
      if ((*(_BYTE *)(v9 + 158) & 1) != 0)
        goto LABEL_117;
LABEL_191:
      v115 = __nwlog_obj();
      if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
      {
        v116 = *(_QWORD *)(v9 + 488);
        if (v116)
          LODWORD(v116) = *(_DWORD *)(v116 + 424);
        if (v106 >= 0x24)
          abort();
        v117 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
        v118 = *(_DWORD *)(v9 + 860);
        v119 = off_1E14A4C50[v106];
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http1_parser_signal_eof_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v9 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v117;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v118;
        LOWORD(v262) = 1024;
        *(_DWORD *)((char *)&v262 + 2) = v116;
        WORD3(v262) = 2080;
        *((_QWORD *)&v262 + 1) = v119;
        _os_log_impl(&dword_182FBE000, v115, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> parser eof did not terminate full message with errno: %s, deferring input error", buf, 0x3Cu);
      }
      goto LABEL_117;
    }
    if ((v76 & 0x100) != 0)
    {
      if ((*(_BYTE *)(v9 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v131 = __nwlog_obj();
          if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
          {
            v132 = *(_QWORD *)(v9 + 488);
            v133 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
            v134 = *(_DWORD *)(v9 + 860);
            if (v132)
              LODWORD(v132) = *(_DWORD *)(v132 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_close";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v9 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v133;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v134;
            LOWORD(v262) = 1024;
            *(_DWORD *)((char *)&v262 + 2) = v132;
            _os_log_impl(&dword_182FBE000, v131, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> already closed", buf, 0x32u);
            v10 = (unsigned __int16 *)(v9 + 872);
          }
        }
      }
      goto LABEL_117;
    }
    *(_BYTE *)(v9 + 874) = BYTE2(v76);
    *v256 = v76 | 0x4100;
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v232 = __nwlog_obj();
        if (os_log_type_enabled(v232, OS_LOG_TYPE_DEBUG))
        {
          v233 = *(_QWORD *)(v9 + 488);
          v234 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
          v235 = *(_DWORD *)(v9 + 860);
          if (v233)
            LODWORD(v233) = *(_DWORD *)(v233 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v9 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v234;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v235;
          LOWORD(v262) = 1024;
          *(_DWORD *)((char *)&v262 + 2) = v233;
          _os_log_impl(&dword_182FBE000, v232, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
          v10 = (unsigned __int16 *)(v9 + 872);
        }
      }
    }
    v120 = *(_QWORD *)(v9 + 480);
    if (!v120)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      v228 = (char *)_os_log_send_and_compose_impl();
      v265[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v228, v265, &type))
        goto LABEL_536;
      if (v265[0] == 17)
      {
        v229 = __nwlog_obj();
        v230 = v265[0];
        if (!os_log_type_enabled(v229, (os_log_type_t)v265[0]))
          goto LABEL_536;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v231 = "%{public}s called with null http1";
      }
      else if (type)
      {
        v240 = (char *)__nw_create_backtrace_string();
        v229 = __nwlog_obj();
        v230 = v265[0];
        v241 = os_log_type_enabled(v229, (os_log_type_t)v265[0]);
        if (v240)
        {
          if (v241)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v240;
            _os_log_impl(&dword_182FBE000, v229, v230, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v240);
          goto LABEL_536;
        }
        if (!v241)
          goto LABEL_536;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v231 = "%{public}s called with null http1, no backtrace";
      }
      else
      {
        v229 = __nwlog_obj();
        v230 = v265[0];
        if (!os_log_type_enabled(v229, (os_log_type_t)v265[0]))
          goto LABEL_536;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v231 = "%{public}s called with null http1, backtrace limit exceeded";
      }
      v253 = buf;
LABEL_535:
      _os_log_impl(&dword_182FBE000, v229, v230, v231, v253, 0xCu);
      goto LABEL_536;
    }
    v121 = *v10;
    v122 = v121 | (*((unsigned __int8 *)v10 + 2) << 16);
    if ((v121 & 0x800) != 0)
    {
      if ((*(_BYTE *)(v9 + 158) & 1) != 0
        || !gLogDatapath
        || (v147 = __nwlog_obj(), !os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG)))
      {
LABEL_294:
        if (*(_QWORD *)(v9 + 488))
          goto LABEL_117;
LABEL_295:
        v180 = *(_QWORD *)(v9 + 784);
        if (v180)
        {
          nw_queue_set_timer_values(v180, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        }
        else
        {
          if ((*(_BYTE *)(v9 + 158) & 1) == 0)
          {
            v181 = __nwlog_obj();
            if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
            {
              v182 = *(_QWORD *)(v9 + 488);
              v183 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
              v184 = *(_DWORD *)(v9 + 860);
              if (v182)
                LODWORD(v182) = *(_DWORD *)(v182 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_connection_close";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v9 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v183;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v184;
              LOWORD(v262) = 1024;
              *(_DWORD *)((char *)&v262 + 2) = v182;
              _os_log_impl(&dword_182FBE000, v181, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing", buf, 0x32u);
            }
          }
          v185 = *(_QWORD *)(v9 + 608);
          v186 = *(void **)(v9 + 496);
          *(_QWORD *)buf = v71;
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
          *(_QWORD *)&buf[24] = &unk_1E14A14F0;
          *(_QWORD *)&buf[32] = v185;
          nw_queue_context_async(v186, buf);
        }
        goto LABEL_117;
      }
      v148 = *(_QWORD *)(v9 + 488);
      v149 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
      v150 = *(_DWORD *)(v9 + 860);
      if (v148)
        LODWORD(v148) = *(_DWORD *)(v148 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v149;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v150;
      LOWORD(v262) = 1024;
      *(_DWORD *)((char *)&v262 + 2) = v148;
      _os_log_impl(&dword_182FBE000, v147, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
      goto LABEL_538;
    }
    *((_BYTE *)v10 + 2) = BYTE2(v122);
    *v10 = v122 | 0x800;
    v123 = *(unsigned int *)(v120 + 368) + 1;
    v124 = v123 << 31 >> 31;
    *(_DWORD *)(v120 + 368) = v123;
    if (v124 == v123 && (v124 & 0x8000000000000000) == 0)
    {
LABEL_289:
      if ((*(_BYTE *)(v9 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v242 = __nwlog_obj();
          if (os_log_type_enabled(v242, OS_LOG_TYPE_DEBUG))
          {
            v243 = *(_QWORD *)(v9 + 488);
            v244 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
            v245 = *(_DWORD *)(v9 + 860);
            if (v243)
              LODWORD(v243) = *(_DWORD *)(v243 + 424);
            v246 = *(_DWORD *)(v120 + 368) + *(_DWORD *)(v120 + 364);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v9 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v244;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v245;
            LOWORD(v262) = 1024;
            *(_DWORD *)((char *)&v262 + 2) = v243;
            WORD3(v262) = 1024;
            DWORD2(v262) = v246;
            _os_log_impl(&dword_182FBE000, v242, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
            v10 = (unsigned __int16 *)(v9 + 872);
          }
        }
      }
      v177 = *(void **)(v9 + 496);
      if (!v177)
      {
        __nwlog_obj();
        *(_DWORD *)v265 = 136446210;
        *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        v228 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v259 = 0;
        if (!__nwlog_fault(v228, &type, &v259))
          goto LABEL_536;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v229 = __nwlog_obj();
          v230 = type;
          if (!os_log_type_enabled(v229, type))
            goto LABEL_536;
          *(_DWORD *)v265 = 136446210;
          *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v231 = "%{public}s called with null http1_connection->context";
LABEL_534:
          v253 = v265;
          goto LABEL_535;
        }
        if (!v259)
        {
          v229 = __nwlog_obj();
          v230 = type;
          if (!os_log_type_enabled(v229, type))
            goto LABEL_536;
          *(_DWORD *)v265 = 136446210;
          *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v231 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
          goto LABEL_534;
        }
        v249 = (char *)__nw_create_backtrace_string();
        v229 = __nwlog_obj();
        v230 = type;
        v250 = os_log_type_enabled(v229, type);
        if (!v249)
        {
          if (!v250)
            goto LABEL_536;
          *(_DWORD *)v265 = 136446210;
          *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v231 = "%{public}s called with null http1_connection->context, no backtrace";
          goto LABEL_534;
        }
        if (!v250)
          goto LABEL_510;
        *(_DWORD *)v265 = 136446466;
        *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        *(_WORD *)&v265[12] = 2082;
        *(_QWORD *)&v265[14] = v249;
        v251 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
        goto LABEL_509;
      }
      v178 = *(_QWORD *)(v9 + 480);
      if (v178)
      {
        v179 = *(_QWORD *)(v178 + 200);
        *(_QWORD *)buf = v71;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E14A1518;
        *(_QWORD *)&buf[32] = v179;
        nw_queue_context_async(v177, buf);
        goto LABEL_294;
      }
      __nwlog_obj();
      *(_DWORD *)v265 = 136446210;
      *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
      v228 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v259 = 0;
      if (__nwlog_fault(v228, &type, &v259))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v229 = __nwlog_obj();
          v230 = type;
          if (!os_log_type_enabled(v229, type))
            goto LABEL_536;
          *(_DWORD *)v265 = 136446210;
          *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v231 = "%{public}s called with null http1";
          goto LABEL_534;
        }
        if (!v259)
        {
          v229 = __nwlog_obj();
          v230 = type;
          if (!os_log_type_enabled(v229, type))
            goto LABEL_536;
          *(_DWORD *)v265 = 136446210;
          *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v231 = "%{public}s called with null http1, backtrace limit exceeded";
          goto LABEL_534;
        }
        v249 = (char *)__nw_create_backtrace_string();
        v229 = __nwlog_obj();
        v230 = type;
        v252 = os_log_type_enabled(v229, type);
        if (!v249)
        {
          if (!v252)
            goto LABEL_536;
          *(_DWORD *)v265 = 136446210;
          *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v231 = "%{public}s called with null http1, no backtrace";
          goto LABEL_534;
        }
        if (!v252)
          goto LABEL_510;
        *(_DWORD *)v265 = 136446466;
        *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        *(_WORD *)&v265[12] = 2082;
        *(_QWORD *)&v265[14] = v249;
        v251 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_509:
        _os_log_impl(&dword_182FBE000, v229, v230, v251, v265, 0x16u);
LABEL_510:
        free(v249);
        if (v228)
LABEL_537:
          free(v228);
LABEL_538:
        v10 = (unsigned __int16 *)(v9 + 872);
        if (*(_QWORD *)(v9 + 488))
          goto LABEL_117;
        goto LABEL_295;
      }
LABEL_536:
      if (!v228)
        goto LABEL_538;
      goto LABEL_537;
    }
    __nwlog_obj();
    v125 = *(unsigned int *)(v120 + 368);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = 1;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v125;
    v126 = (char *)_os_log_send_and_compose_impl();
    v265[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v126, v265, &type))
    {
      if (v265[0] == 17)
      {
        v127 = __nwlog_obj();
        v128 = v265[0];
        if (os_log_type_enabled(v127, (os_log_type_t)v265[0]))
        {
          v129 = *(unsigned int *)(v120 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v129;
          v130 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_285:
          _os_log_impl(&dword_182FBE000, v127, v128, v130, buf, 0x2Au);
        }
      }
      else if (type)
      {
        v151 = (char *)__nw_create_backtrace_string();
        v127 = __nwlog_obj();
        v128 = v265[0];
        v152 = os_log_type_enabled(v127, (os_log_type_t)v265[0]);
        if (v151)
        {
          if (v152)
          {
            v153 = *(unsigned int *)(v120 + 368);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v153;
            *(_WORD *)&buf[42] = 2082;
            *(_QWORD *)&v262 = v151;
            _os_log_impl(&dword_182FBE000, v127, v128, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v151);
          goto LABEL_286;
        }
        if (v152)
        {
          v176 = *(unsigned int *)(v120 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v176;
          v130 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_285;
        }
      }
      else
      {
        v127 = __nwlog_obj();
        v128 = v265[0];
        if (os_log_type_enabled(v127, (os_log_type_t)v265[0]))
        {
          v167 = *(unsigned int *)(v120 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v167;
          v130 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_285;
        }
      }
    }
LABEL_286:
    if (v126)
      free(v126);
    *(_DWORD *)(v120 + 368) = -1;
    v10 = (unsigned __int16 *)(v9 + 872);
    goto LABEL_289;
  }
LABEL_117:
  v77 = *(_QWORD *)(v9 + 616);
  v78 = *(_QWORD *)(v9 + 632);
  v79 = *v10 & 0x204;
  if ((*v10 & 0x2000) != 0)
  {
    v89 = v77 | v78;
    v90 = (v77 | v78) == 0;
    v91 = ((*v10 | (*((unsigned __int8 *)v10 + 2) << 16)) >> 9) & 1;
    if (v79 == 4)
      v91 = 1;
    if (v89 || !v91)
    {
      if (v79 == 4)
        goto LABEL_159;
      if (!v90)
        goto LABEL_159;
      *(_DWORD *)(v9 + 864) = 5;
      if ((*(_BYTE *)(v9 + 158) & 1) != 0)
        goto LABEL_159;
      v80 = __nwlog_obj();
      if (!os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
        goto LABEL_159;
      v99 = *(_QWORD *)(v9 + 488);
      v100 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
      v101 = *(_DWORD *)(v9 + 860);
      if (v99)
        LODWORD(v99) = *(_DWORD *)(v99 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v100;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v101;
      LOWORD(v262) = 1024;
      *(_DWORD *)((char *)&v262 + 2) = v99;
      v84 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: connection error";
    }
    else
    {
      *(_DWORD *)(v9 + 864) = 4;
      if ((*(_BYTE *)(v9 + 158) & 1) != 0)
        goto LABEL_159;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v80 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        goto LABEL_159;
      v92 = *(_QWORD *)(v9 + 488);
      v93 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
      v94 = *(_DWORD *)(v9 + 860);
      if (v92)
        LODWORD(v92) = *(_DWORD *)(v92 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v93;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v94;
      LOWORD(v262) = 1024;
      *(_DWORD *)((char *)&v262 + 2) = v92;
      v84 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: connection complete";
    }
LABEL_158:
    _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_DEBUG, v84, buf, 0x32u);
    goto LABEL_159;
  }
  if (v79 != 4)
  {
    if ((*(_BYTE *)(v9 + 158) & 1) != 0)
      goto LABEL_159;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v80 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      goto LABEL_159;
    v102 = *(_QWORD *)(v9 + 488);
    v103 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
    v104 = *(_DWORD *)(v9 + 860);
    if (v102)
      LODWORD(v102) = *(_DWORD *)(v102 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v9 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v103;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v104;
    LOWORD(v262) = 1024;
    *(_DWORD *)((char *)&v262 + 2) = v102;
    v84 = "%{public}s %{public}s%s<i%u:c%u:s%u> no change to http1 connection state";
    goto LABEL_158;
  }
  if (v77 | v78)
  {
    if (!v77)
      goto LABEL_159;
    if (v78)
      goto LABEL_159;
    *(_DWORD *)(v9 + 864) = 3;
    if ((*(_BYTE *)(v9 + 158) & 1) != 0)
      goto LABEL_159;
    v80 = __nwlog_obj();
    if (!os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      goto LABEL_159;
    v107 = *(_QWORD *)(v9 + 488);
    v108 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
    v109 = *(_DWORD *)(v9 + 860);
    if (v107)
      LODWORD(v107) = *(_DWORD *)(v107 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v9 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v108;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v109;
    LOWORD(v262) = 1024;
    *(_DWORD *)((char *)&v262 + 2) = v107;
    v84 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: stream pending";
    goto LABEL_158;
  }
  *(_DWORD *)(v9 + 864) = 2;
  if ((*(_BYTE *)(v9 + 158) & 1) == 0)
  {
    v80 = __nwlog_obj();
    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
    {
      v81 = *(_QWORD *)(v9 + 488);
      v82 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
      v83 = *(_DWORD *)(v9 + 860);
      if (v81)
        LODWORD(v81) = *(_DWORD *)(v81 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v82;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v83;
      LOWORD(v262) = 1024;
      *(_DWORD *)((char *)&v262 + 2) = v81;
      v84 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: stream complete";
      goto LABEL_158;
    }
  }
LABEL_159:
  if (*(_DWORD *)(v9 + 864) == 1)
  {
    if (v13)
    {
      v105 = *(_QWORD *)(v9 + 488);
      if (v105)
        nw_protocol_input_available(*(_QWORD **)(v105 + 48), v105);
    }
  }
LABEL_96:
  v57 = *(_QWORD *)(v9 + 488);
  if (v57)
  {
    if (*(_BYTE *)(v9 + 158) & 1 | (gLogDatapath == 0))
      goto LABEL_98;
    v171 = __nwlog_obj();
    v172 = os_log_type_enabled(v171, OS_LOG_TYPE_DEBUG);
    v57 = *(_QWORD *)(v9 + 488);
    if (v172)
    {
      v173 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
      v174 = *(_DWORD *)(v9 + 860);
      if (v57)
        v175 = *(_DWORD *)(v57 + 424);
      else
        v175 = 0;
      *(_DWORD *)buf = 136448002;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v173;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v174;
      LOWORD(v262) = 1024;
      *(_DWORD *)((char *)&v262 + 2) = v175;
      WORD3(v262) = 2048;
      *((_QWORD *)&v262 + 1) = v9;
      v263 = 2048;
      v264 = v57;
      _os_log_impl(&dword_182FBE000, v171, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection %p sending input_finished to current stream (%p)", buf, 0x46u);
      v57 = *(_QWORD *)(v9 + 488);
    }
    if (v57)
LABEL_98:
      nw_protocol_input_finished(*(_QWORD **)(v57 + 48), v57);
    else
      nw_protocol_input_finished(0, 0);
    return;
  }
  if (!(*(_BYTE *)(v9 + 158) & 1 | (gLogDatapath == 0)))
  {
    v191 = __nwlog_obj();
    if (os_log_type_enabled(v191, OS_LOG_TYPE_DEBUG))
    {
      v192 = *(_QWORD *)(v9 + 488);
      v193 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
      v194 = *(_DWORD *)(v9 + 860);
      if (v192)
        LODWORD(v192) = *(_DWORD *)(v192 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_input_finished";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v193;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v194;
      LOWORD(v262) = 1024;
      *(_DWORD *)((char *)&v262 + 2) = v192;
      _os_log_impl(&dword_182FBE000, v191, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> closing http connection on input_finished, no remaining input", buf, 0x32u);
    }
  }
  v58 = *v10;
  v59 = v58 | (*((unsigned __int8 *)v10 + 2) << 16);
  if ((v58 & 0x100) != 0)
  {
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v85 = __nwlog_obj();
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
        {
          v86 = *(_QWORD *)(v9 + 488);
          v87 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
          v88 = *(_DWORD *)(v9 + 860);
          if (v86)
            LODWORD(v86) = *(_DWORD *)(v86 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v9 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v87;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v88;
          LOWORD(v262) = 1024;
          *(_DWORD *)((char *)&v262 + 2) = v86;
          _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> already closed", buf, 0x32u);
        }
      }
    }
  }
  else
  {
    *((_BYTE *)v10 + 2) = BYTE2(v59);
    *v10 = v59 | 0x100;
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v205 = __nwlog_obj();
        if (os_log_type_enabled(v205, OS_LOG_TYPE_DEBUG))
        {
          v206 = *(_QWORD *)(v9 + 488);
          v207 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
          v208 = *(_DWORD *)(v9 + 860);
          if (v206)
            LODWORD(v206) = *(_DWORD *)(v206 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v9 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v207;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v208;
          LOWORD(v262) = 1024;
          *(_DWORD *)((char *)&v262 + 2) = v206;
          _os_log_impl(&dword_182FBE000, v205, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
        }
      }
    }
    v60 = *(_QWORD *)(v9 + 480);
    if (!v60)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      v201 = (char *)_os_log_send_and_compose_impl();
      v265[0] = 16;
      v257[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v201, v265, v257))
        goto LABEL_465;
      if (v265[0] == 17)
      {
        v202 = __nwlog_obj();
        v203 = v265[0];
        if (!os_log_type_enabled(v202, (os_log_type_t)v265[0]))
          goto LABEL_465;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v204 = "%{public}s called with null http1";
      }
      else if (v257[0])
      {
        v209 = (char *)__nw_create_backtrace_string();
        v202 = __nwlog_obj();
        v203 = v265[0];
        v210 = os_log_type_enabled(v202, (os_log_type_t)v265[0]);
        if (v209)
        {
          if (v210)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v209;
            _os_log_impl(&dword_182FBE000, v202, v203, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v209);
          goto LABEL_465;
        }
        if (!v210)
        {
LABEL_465:
          if (!v201)
            goto LABEL_226;
          goto LABEL_466;
        }
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v204 = "%{public}s called with null http1, no backtrace";
      }
      else
      {
        v202 = __nwlog_obj();
        v203 = v265[0];
        if (!os_log_type_enabled(v202, (os_log_type_t)v265[0]))
          goto LABEL_465;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v204 = "%{public}s called with null http1, backtrace limit exceeded";
      }
      v223 = buf;
      goto LABEL_464;
    }
    v61 = *v10;
    v62 = v61 | (*((unsigned __int8 *)v10 + 2) << 16);
    if ((v61 & 0x800) == 0)
    {
      *((_BYTE *)v10 + 2) = BYTE2(v62);
      *v10 = v62 | 0x800;
      v63 = *(unsigned int *)(v60 + 368) + 1;
      v64 = v63 << 31 >> 31;
      *(_DWORD *)(v60 + 368) = v63;
      if (v64 != v63 || v64 < 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v65 = *(unsigned int *)(v60 + 368);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = 1;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v65;
        v66 = (char *)_os_log_send_and_compose_impl();
        v265[0] = 16;
        v257[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v66, v265, v257))
          goto LABEL_218;
        if (v265[0] != 17)
        {
          if (v257[0])
          {
            v110 = (char *)__nw_create_backtrace_string();
            v67 = __nwlog_obj();
            v68 = v265[0];
            v111 = os_log_type_enabled(v67, (os_log_type_t)v265[0]);
            if (v110)
            {
              if (v111)
              {
                v112 = *(unsigned int *)(v60 + 368);
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = 1;
                *(_WORD *)&buf[32] = 2048;
                *(_QWORD *)&buf[34] = v112;
                *(_WORD *)&buf[42] = 2082;
                *(_QWORD *)&v262 = v110;
                _os_log_impl(&dword_182FBE000, v67, v68, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v110);
              goto LABEL_218;
            }
            if (!v111)
              goto LABEL_218;
            v136 = *(unsigned int *)(v60 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v136;
            v70 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          }
          else
          {
            v67 = __nwlog_obj();
            v68 = v265[0];
            if (!os_log_type_enabled(v67, (os_log_type_t)v265[0]))
              goto LABEL_218;
            v135 = *(unsigned int *)(v60 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v135;
            v70 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          }
LABEL_217:
          _os_log_impl(&dword_182FBE000, v67, v68, v70, buf, 0x2Au);
          goto LABEL_218;
        }
        v67 = __nwlog_obj();
        v68 = v265[0];
        if (os_log_type_enabled(v67, (os_log_type_t)v265[0]))
        {
          v69 = *(unsigned int *)(v60 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v69;
          v70 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
          goto LABEL_217;
        }
LABEL_218:
        if (v66)
          free(v66);
        *(_DWORD *)(v60 + 368) = -1;
      }
      if ((*(_BYTE *)(v9 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v211 = __nwlog_obj();
          if (os_log_type_enabled(v211, OS_LOG_TYPE_DEBUG))
          {
            v212 = *(_QWORD *)(v9 + 488);
            v213 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
            v214 = *(_DWORD *)(v9 + 860);
            if (v212)
              LODWORD(v212) = *(_DWORD *)(v212 + 424);
            v215 = *(_DWORD *)(v60 + 368) + *(_DWORD *)(v60 + 364);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v9 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v213;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v214;
            LOWORD(v262) = 1024;
            *(_DWORD *)((char *)&v262 + 2) = v212;
            WORD3(v262) = 1024;
            DWORD2(v262) = v215;
            _os_log_impl(&dword_182FBE000, v211, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
          }
        }
      }
      v137 = *(void **)(v9 + 496);
      if (v137)
      {
        v138 = *(_QWORD *)(v9 + 480);
        if (v138)
        {
          v139 = *(_QWORD *)(v138 + 200);
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
          *(_QWORD *)&buf[24] = &unk_1E14A1518;
          *(_QWORD *)&buf[32] = v139;
          nw_queue_context_async(v137, buf);
          goto LABEL_226;
        }
        __nwlog_obj();
        *(_DWORD *)v265 = 136446210;
        *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        v201 = (char *)_os_log_send_and_compose_impl();
        v257[0] = OS_LOG_TYPE_ERROR;
        type = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v201, v257, &type))
          goto LABEL_465;
        if (v257[0] == OS_LOG_TYPE_FAULT)
        {
          v202 = __nwlog_obj();
          v203 = v257[0];
          if (os_log_type_enabled(v202, v257[0]))
          {
            *(_DWORD *)v265 = 136446210;
            *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            v204 = "%{public}s called with null http1";
            goto LABEL_463;
          }
          goto LABEL_465;
        }
        if (type)
        {
          v219 = (char *)__nw_create_backtrace_string();
          v202 = __nwlog_obj();
          v203 = v257[0];
          v222 = os_log_type_enabled(v202, v257[0]);
          if (v219)
          {
            if (v222)
            {
              *(_DWORD *)v265 = 136446466;
              *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              *(_WORD *)&v265[12] = 2082;
              *(_QWORD *)&v265[14] = v219;
              v221 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_443:
              _os_log_impl(&dword_182FBE000, v202, v203, v221, v265, 0x16u);
            }
            goto LABEL_444;
          }
          if (!v222)
            goto LABEL_465;
          *(_DWORD *)v265 = 136446210;
          *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v204 = "%{public}s called with null http1, no backtrace";
        }
        else
        {
          v202 = __nwlog_obj();
          v203 = v257[0];
          if (!os_log_type_enabled(v202, v257[0]))
            goto LABEL_465;
          *(_DWORD *)v265 = 136446210;
          *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v204 = "%{public}s called with null http1, backtrace limit exceeded";
        }
LABEL_463:
        v223 = v265;
LABEL_464:
        _os_log_impl(&dword_182FBE000, v202, v203, v204, v223, 0xCu);
        goto LABEL_465;
      }
      __nwlog_obj();
      *(_DWORD *)v265 = 136446210;
      *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
      v201 = (char *)_os_log_send_and_compose_impl();
      v257[0] = OS_LOG_TYPE_ERROR;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v201, v257, &type))
        goto LABEL_465;
      if (v257[0] == OS_LOG_TYPE_FAULT)
      {
        v202 = __nwlog_obj();
        v203 = v257[0];
        if (os_log_type_enabled(v202, v257[0]))
        {
          *(_DWORD *)v265 = 136446210;
          *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v204 = "%{public}s called with null http1_connection->context";
          goto LABEL_463;
        }
        goto LABEL_465;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v202 = __nwlog_obj();
        v203 = v257[0];
        if (!os_log_type_enabled(v202, v257[0]))
          goto LABEL_465;
        *(_DWORD *)v265 = 136446210;
        *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        v204 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
        goto LABEL_463;
      }
      v219 = (char *)__nw_create_backtrace_string();
      v202 = __nwlog_obj();
      v203 = v257[0];
      v220 = os_log_type_enabled(v202, v257[0]);
      if (!v219)
      {
        if (!v220)
          goto LABEL_465;
        *(_DWORD *)v265 = 136446210;
        *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        v204 = "%{public}s called with null http1_connection->context, no backtrace";
        goto LABEL_463;
      }
      if (v220)
      {
        *(_DWORD *)v265 = 136446466;
        *(_QWORD *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        *(_WORD *)&v265[12] = 2082;
        *(_QWORD *)&v265[14] = v219;
        v221 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
        goto LABEL_443;
      }
LABEL_444:
      free(v219);
      if (!v201)
        goto LABEL_226;
LABEL_466:
      free(v201);
      goto LABEL_226;
    }
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v95 = __nwlog_obj();
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
        {
          v96 = *(_QWORD *)(v9 + 488);
          v97 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
          v98 = *(_DWORD *)(v9 + 860);
          if (v96)
            LODWORD(v96) = *(_DWORD *)(v96 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v9 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v97;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v98;
          LOWORD(v262) = 1024;
          *(_DWORD *)((char *)&v262 + 2) = v96;
          _os_log_impl(&dword_182FBE000, v95, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
        }
      }
    }
LABEL_226:
    if (!*(_QWORD *)(v9 + 488))
    {
      v140 = *(_QWORD *)(v9 + 784);
      if (v140)
      {
        if (*(_QWORD *)v140)
        {
          dispatch_source_set_timer(*(dispatch_source_t *)v140, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        }
        else
        {
          *(_OWORD *)(v140 + 32) = xmmword_183C6F190;
          if (*(_BYTE *)(v140 + 48) && *(_BYTE *)(v140 + 49))
            nw_queue_source_run_timer(v140, v57);
        }
      }
      else
      {
        if ((*(_BYTE *)(v9 + 158) & 1) == 0)
        {
          v141 = __nwlog_obj();
          if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
          {
            v142 = *(_QWORD *)(v9 + 488);
            v143 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
            v144 = *(_DWORD *)(v9 + 860);
            if (v142)
              LODWORD(v142) = *(_DWORD *)(v142 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_close";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v9 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v143;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v144;
            LOWORD(v262) = 1024;
            *(_DWORD *)((char *)&v262 + 2) = v142;
            _os_log_impl(&dword_182FBE000, v141, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing", buf, 0x32u);
          }
        }
        v145 = *(_QWORD *)(v9 + 608);
        v146 = *(void **)(v9 + 496);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E14A14F0;
        *(_QWORD *)&buf[32] = v145;
        nw_queue_context_async(v146, buf);
      }
    }
  }
}

void nw_protocol_http1_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  NSObject *v25;
  _BOOL4 v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int output_frames;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  _BOOL4 v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  const char *v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  const char *v55;
  char *v56;
  _BOOL4 v57;
  char *v58;
  _BOOL4 v59;
  const char *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint32_t v63;
  NSObject *v64;
  uint64_t v65;
  int v66;
  int v67;
  NSObject *v68;
  os_log_type_t v69;
  uint32_t v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  const char *v74;
  NSObject *v75;
  os_log_type_t v76;
  char *backtrace_string;
  _BOOL4 v78;
  char *v79;
  _BOOL4 v80;
  const char *v81;
  uint64_t v82;
  _BOOL4 v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  const char *v87;
  _BOOL4 v88;
  _BOOL4 v89;
  _BOOL4 v90;
  char *v91;
  _BOOL4 v92;
  NSObject *v93;
  uint64_t v94;
  int v95;
  int v96;
  char *v97;
  _BOOL4 v98;
  _BOOL4 v99;
  _BOOL4 v100;
  _BOOL4 v101;
  char v102;
  os_log_type_t type[7];
  os_log_type_t v104;
  os_log_type_t v105[8];
  os_log_type_t *v106;
  uint8_t buf[4];
  const char *v108;
  __int16 v109;
  _BYTE v110[18];
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  _BYTE v118[18];
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_http1_get_http1_protocol";
    v71 = (char *)_os_log_send_and_compose_impl();
    v105[0] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v71, v105, type))
      goto LABEL_197;
    if (v105[0] == OS_LOG_TYPE_FAULT)
    {
      v72 = __nwlog_obj();
      v73 = v105[0];
      if (!os_log_type_enabled(v72, v105[0]))
        goto LABEL_197;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_http1_get_http1_protocol";
      v74 = "%{public}s called with null protocol";
    }
    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v72 = __nwlog_obj();
      v73 = v105[0];
      v78 = os_log_type_enabled(v72, v105[0]);
      if (backtrace_string)
      {
        if (v78)
        {
          *(_DWORD *)buf = 136446466;
          v108 = "nw_http1_get_http1_protocol";
          v109 = 2082;
          *(_QWORD *)v110 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v72, v73, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_197:
        if (!v71)
          goto LABEL_199;
LABEL_198:
        free(v71);
        goto LABEL_199;
      }
      if (!v78)
        goto LABEL_197;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_http1_get_http1_protocol";
      v74 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v72 = __nwlog_obj();
      v73 = v105[0];
      if (!os_log_type_enabled(v72, v105[0]))
        goto LABEL_197;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_http1_get_http1_protocol";
      v74 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_196;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_http1_get_http1_protocol";
    v71 = (char *)_os_log_send_and_compose_impl();
    v105[0] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v71, v105, type))
      goto LABEL_197;
    if (v105[0] != OS_LOG_TYPE_FAULT)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        v72 = __nwlog_obj();
        v73 = v105[0];
        if (!os_log_type_enabled(v72, v105[0]))
          goto LABEL_197;
        *(_DWORD *)buf = 136446210;
        v108 = "nw_http1_get_http1_protocol";
        v74 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_196;
      }
      v79 = (char *)__nw_create_backtrace_string();
      v72 = __nwlog_obj();
      v73 = v105[0];
      v80 = os_log_type_enabled(v72, v105[0]);
      if (!v79)
      {
        if (!v80)
          goto LABEL_197;
        *(_DWORD *)buf = 136446210;
        v108 = "nw_http1_get_http1_protocol";
        v74 = "%{public}s called with null handle, no backtrace";
        goto LABEL_196;
      }
      if (v80)
      {
        *(_DWORD *)buf = 136446466;
        v108 = "nw_http1_get_http1_protocol";
        v109 = 2082;
        *(_QWORD *)v110 = v79;
        v81 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_160:
        _os_log_impl(&dword_182FBE000, v72, v73, v81, buf, 0x16u);
      }
LABEL_161:
      free(v79);
      if (!v71)
        goto LABEL_199;
      goto LABEL_198;
    }
    v72 = __nwlog_obj();
    v73 = v105[0];
    if (!os_log_type_enabled(v72, v105[0]))
      goto LABEL_197;
    *(_DWORD *)buf = 136446210;
    v108 = "nw_http1_get_http1_protocol";
    v74 = "%{public}s called with null handle";
LABEL_196:
    _os_log_impl(&dword_182FBE000, v72, v73, v74, buf, 0xCu);
    goto LABEL_197;
  }
  v3 = *((_DWORD *)handle + 6);
  v4 = a1->handle;
  if (v3 == 1)
    goto LABEL_10;
  if (v3 != 2)
  {
    if (v3 != 3)
    {
LABEL_199:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v108 = "nw_protocol_http1_output_finished";
      v52 = (char *)_os_log_send_and_compose_impl();
      v105[0] = OS_LOG_TYPE_ERROR;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v52, v105, type))
        goto LABEL_235;
      if (v105[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v75 = gLogObj;
        v76 = v105[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, v105[0]))
          goto LABEL_235;
        *(_DWORD *)buf = 136446210;
        v108 = "nw_protocol_http1_output_finished";
        v55 = "%{public}s called with null http1";
        goto LABEL_233;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v75 = gLogObj;
        v76 = v105[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, v105[0]))
          goto LABEL_235;
        *(_DWORD *)buf = 136446210;
        v108 = "nw_protocol_http1_output_finished";
        v55 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_233;
      }
      v97 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v75 = gLogObj;
      v76 = v105[0];
      v98 = os_log_type_enabled((os_log_t)gLogObj, v105[0]);
      if (!v97)
      {
        if (!v98)
          goto LABEL_235;
        *(_DWORD *)buf = 136446210;
        v108 = "nw_protocol_http1_output_finished";
        v55 = "%{public}s called with null http1, no backtrace";
        goto LABEL_233;
      }
      if (v98)
      {
        *(_DWORD *)buf = 136446466;
        v108 = "nw_protocol_http1_output_finished";
        v109 = 2082;
        *(_QWORD *)v110 = v97;
        _os_log_impl(&dword_182FBE000, v75, v76, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v97);
      goto LABEL_235;
    }
    v5 = *((_QWORD *)handle + 2);
    if (v5)
    {
      v4 = (_QWORD *)(v5 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_http1_get_http1_protocol";
    v71 = (char *)_os_log_send_and_compose_impl();
    v105[0] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v71, v105, type))
      goto LABEL_197;
    if (v105[0] == OS_LOG_TYPE_FAULT)
    {
      v72 = __nwlog_obj();
      v73 = v105[0];
      if (!os_log_type_enabled(v72, v105[0]))
        goto LABEL_197;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_http1_get_http1_protocol";
      v74 = "%{public}s called with null handle->http1_connection";
      goto LABEL_196;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      v72 = __nwlog_obj();
      v73 = v105[0];
      if (!os_log_type_enabled(v72, v105[0]))
        goto LABEL_197;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_http1_get_http1_protocol";
      v74 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_196;
    }
    v79 = (char *)__nw_create_backtrace_string();
    v72 = __nwlog_obj();
    v73 = v105[0];
    v89 = os_log_type_enabled(v72, v105[0]);
    if (!v79)
    {
      if (!v89)
        goto LABEL_197;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_http1_get_http1_protocol";
      v74 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_196;
    }
    if (v89)
    {
      *(_DWORD *)buf = 136446466;
      v108 = "nw_http1_get_http1_protocol";
      v109 = 2082;
      *(_QWORD *)v110 = v79;
      v81 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_160;
    }
    goto LABEL_161;
  }
  v6 = *((_QWORD *)handle + 1);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_http1_get_http1_protocol";
    v71 = (char *)_os_log_send_and_compose_impl();
    v105[0] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v71, v105, type))
      goto LABEL_197;
    if (v105[0] == OS_LOG_TYPE_FAULT)
    {
      v72 = __nwlog_obj();
      v73 = v105[0];
      if (!os_log_type_enabled(v72, v105[0]))
        goto LABEL_197;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_http1_get_http1_protocol";
      v74 = "%{public}s called with null handle->http1_stream";
      goto LABEL_196;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      v72 = __nwlog_obj();
      v73 = v105[0];
      if (!os_log_type_enabled(v72, v105[0]))
        goto LABEL_197;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_http1_get_http1_protocol";
      v74 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_196;
    }
    v79 = (char *)__nw_create_backtrace_string();
    v72 = __nwlog_obj();
    v73 = v105[0];
    v90 = os_log_type_enabled(v72, v105[0]);
    if (!v79)
    {
      if (!v90)
        goto LABEL_197;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_http1_get_http1_protocol";
      v74 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_196;
    }
    if (v90)
    {
      *(_DWORD *)buf = 136446466;
      v108 = "nw_http1_get_http1_protocol";
      v109 = 2082;
      *(_QWORD *)v110 = v79;
      v81 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_160;
    }
    goto LABEL_161;
  }
  v4 = (_QWORD *)(v6 + 248);
LABEL_10:
  if (!*v4)
    goto LABEL_199;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_protocol_http1_output_finished";
    v52 = (char *)_os_log_send_and_compose_impl();
    v105[0] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v52, v105, type))
      goto LABEL_235;
    if (v105[0] == OS_LOG_TYPE_FAULT)
    {
      v75 = __nwlog_obj();
      v76 = v105[0];
      if (!os_log_type_enabled(v75, v105[0]))
        goto LABEL_235;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_protocol_http1_output_finished";
      v55 = "%{public}s called with null other_protocol";
    }
    else if (type[0])
    {
      v58 = (char *)__nw_create_backtrace_string();
      v75 = __nwlog_obj();
      v76 = v105[0];
      v83 = os_log_type_enabled(v75, v105[0]);
      if (v58)
      {
        if (!v83)
          goto LABEL_227;
        *(_DWORD *)buf = 136446466;
        v108 = "nw_protocol_http1_output_finished";
        v109 = 2082;
        *(_QWORD *)v110 = v58;
        v60 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_225;
      }
      if (!v83)
        goto LABEL_235;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_protocol_http1_output_finished";
      v55 = "%{public}s called with null other_protocol, no backtrace";
    }
    else
    {
      v75 = __nwlog_obj();
      v76 = v105[0];
      if (!os_log_type_enabled(v75, v105[0]))
        goto LABEL_235;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_protocol_http1_output_finished";
      v55 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }
    goto LABEL_233;
  }
  if (v3 != 2)
  {
    if (v3 != 3)
    {
LABEL_217:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v108 = "nw_protocol_http1_output_finished";
      v52 = (char *)_os_log_send_and_compose_impl();
      v105[0] = OS_LOG_TYPE_ERROR;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v52, v105, type))
        goto LABEL_235;
      if (v105[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v75 = gLogObj;
        v76 = v105[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, v105[0]))
          goto LABEL_235;
        *(_DWORD *)buf = 136446210;
        v108 = "nw_protocol_http1_output_finished";
        v55 = "%{public}s called with null http1_stream";
        goto LABEL_233;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v75 = gLogObj;
        v76 = v105[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, v105[0]))
          goto LABEL_235;
        *(_DWORD *)buf = 136446210;
        v108 = "nw_protocol_http1_output_finished";
        v55 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_233;
      }
      v58 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v75 = gLogObj;
      v76 = v105[0];
      v99 = os_log_type_enabled((os_log_t)gLogObj, v105[0]);
      if (!v58)
      {
        if (!v99)
          goto LABEL_235;
        *(_DWORD *)buf = 136446210;
        v108 = "nw_protocol_http1_output_finished";
        v55 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_233;
      }
      if (!v99)
        goto LABEL_227;
      *(_DWORD *)buf = 136446466;
      v108 = "nw_protocol_http1_output_finished";
      v109 = 2082;
      *(_QWORD *)v110 = v58;
      v60 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
      goto LABEL_225;
    }
    v7 = *((_QWORD *)handle + 2);
    if (v7)
    {
      v8 = (uint64_t *)(v7 + 488);
      goto LABEL_17;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_http1_get_stream_for_protocol";
    v84 = (char *)_os_log_send_and_compose_impl();
    v105[0] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v84, v105, type))
    {
      if (v105[0] == OS_LOG_TYPE_FAULT)
      {
        v85 = __nwlog_obj();
        v86 = v105[0];
        if (!os_log_type_enabled(v85, v105[0]))
          goto LABEL_215;
        *(_DWORD *)buf = 136446210;
        v108 = "nw_http1_get_stream_for_protocol";
        v87 = "%{public}s called with null handle->http1_connection";
        goto LABEL_214;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        v85 = __nwlog_obj();
        v86 = v105[0];
        if (!os_log_type_enabled(v85, v105[0]))
          goto LABEL_215;
        *(_DWORD *)buf = 136446210;
        v108 = "nw_http1_get_stream_for_protocol";
        v87 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_214;
      }
      v91 = (char *)__nw_create_backtrace_string();
      v85 = __nwlog_obj();
      v86 = v105[0];
      v92 = os_log_type_enabled(v85, v105[0]);
      if (v91)
      {
        if (v92)
        {
          *(_DWORD *)buf = 136446466;
          v108 = "nw_http1_get_stream_for_protocol";
          v109 = 2082;
          *(_QWORD *)v110 = v91;
          _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v91);
        goto LABEL_215;
      }
      if (v92)
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_http1_get_stream_for_protocol";
        v87 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_214:
        _os_log_impl(&dword_182FBE000, v85, v86, v87, buf, 0xCu);
      }
    }
LABEL_215:
    if (v84)
      free(v84);
    goto LABEL_217;
  }
  v8 = (uint64_t *)(handle + 8);
LABEL_17:
  v9 = *v8;
  if (!*v8)
    goto LABEL_217;
  if (!*(_QWORD *)(v9 + 248))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_protocol_http1_output_finished";
    v52 = (char *)_os_log_send_and_compose_impl();
    v105[0] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v52, v105, type))
      goto LABEL_235;
    if (v105[0] == OS_LOG_TYPE_FAULT)
    {
      v75 = __nwlog_obj();
      v76 = v105[0];
      if (!os_log_type_enabled(v75, v105[0]))
        goto LABEL_235;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_protocol_http1_output_finished";
      v55 = "%{public}s called with null http1_stream->protocol_http1";
    }
    else if (type[0])
    {
      v58 = (char *)__nw_create_backtrace_string();
      v75 = __nwlog_obj();
      v76 = v105[0];
      v88 = os_log_type_enabled(v75, v105[0]);
      if (v58)
      {
        if (!v88)
          goto LABEL_227;
        *(_DWORD *)buf = 136446466;
        v108 = "nw_protocol_http1_output_finished";
        v109 = 2082;
        *(_QWORD *)v110 = v58;
        v60 = "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s";
        goto LABEL_225;
      }
      if (!v88)
        goto LABEL_235;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_protocol_http1_output_finished";
      v55 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
    }
    else
    {
      v75 = __nwlog_obj();
      v76 = v105[0];
      if (!os_log_type_enabled(v75, v105[0]))
        goto LABEL_235;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_protocol_http1_output_finished";
      v55 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
    }
    goto LABEL_233;
  }
  v10 = *(_QWORD *)(v9 + 256);
  if (!v10 || (*(_WORD *)(v9 + 428) & 0x100) == 0)
  {
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_QWORD *)(v9 + 256);
        v13 = *(_DWORD *)(*(_QWORD *)(v9 + 248) + 372);
        if (v12)
          v14 = *(_DWORD *)(v12 + 860);
        else
          v14 = 0;
        v20 = *(_DWORD *)(v9 + 424);
        v21 = HIBYTE(*(unsigned __int16 *)(v9 + 428)) & 1;
        *(_DWORD *)buf = 136448002;
        v108 = "nw_protocol_http1_output_finished";
        v109 = 2082;
        *(_QWORD *)v110 = v9 + 74;
        *(_WORD *)&v110[8] = 2080;
        *(_QWORD *)&v110[10] = " ";
        v111 = 1024;
        v112 = v13;
        v113 = 1024;
        v114 = v14;
        v115 = 1024;
        v116 = v20;
        v117 = 1024;
        *(_DWORD *)v118 = v21;
        *(_WORD *)&v118[4] = 2048;
        *(_QWORD *)&v118[6] = v12;
        v22 = "%{public}s %{public}s%s<i%u:c%u:s%u> dropping output_finished, chunked: %u, current_connection: %p";
        v23 = v11;
        v24 = 66;
LABEL_34:
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, v22, buf, v24);
        return;
      }
    }
    return;
  }
  if (*(_QWORD *)(v10 + 648))
  {
    if ((*(_BYTE *)(v10 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = gLogObj;
      v16 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
      v10 = *(_QWORD *)(v9 + 256);
      if (v16)
      {
        v17 = *(_QWORD *)(v10 + 488);
        v18 = *(_DWORD *)(*(_QWORD *)(v10 + 480) + 372);
        v19 = *(_DWORD *)(v10 + 860);
        if (v17)
          LODWORD(v17) = *(_DWORD *)(v17 + 424);
        *(_DWORD *)buf = 136447490;
        v108 = "nw_protocol_http1_output_finished";
        v109 = 2082;
        *(_QWORD *)v110 = v10 + 74;
        *(_WORD *)&v110[8] = 2080;
        *(_QWORD *)&v110[10] = " ";
        v111 = 1024;
        v112 = v18;
        v113 = 1024;
        v114 = v19;
        v115 = 1024;
        v116 = v17;
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> have pending output frames, deferring final chunk", buf, 0x32u);
        v10 = *(_QWORD *)(v9 + 256);
      }
    }
    *(_WORD *)(v10 + 872) |= 0x8000u;
    return;
  }
  if ((*(_WORD *)(v9 + 428) & 0x400) != 0)
  {
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v29 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        v30 = *(_QWORD *)(v9 + 256);
        v31 = *(_DWORD *)(*(_QWORD *)(v9 + 248) + 372);
        if (v30)
          LODWORD(v30) = *(_DWORD *)(v30 + 860);
        v32 = *(_DWORD *)(v9 + 424);
        *(_DWORD *)buf = 136447490;
        v108 = "nw_protocol_http1_output_finished";
        v109 = 2082;
        *(_QWORD *)v110 = v9 + 74;
        *(_WORD *)&v110[8] = 2080;
        *(_QWORD *)&v110[10] = " ";
        v111 = 1024;
        v112 = v31;
        v113 = 1024;
        v114 = v30;
        v115 = 1024;
        v116 = v32;
        v22 = "%{public}s %{public}s%s<i%u:c%u:s%u> dropping output_finished, outbound message already complete";
        v23 = v29;
        v24 = 50;
        goto LABEL_34;
      }
    }
    return;
  }
  if ((*(_BYTE *)(v9 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = gLogObj;
    v26 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
    v10 = *(_QWORD *)(v9 + 256);
    if (v26)
    {
      v27 = *(_DWORD *)(*(_QWORD *)(v9 + 248) + 372);
      if (v10)
        v28 = *(_DWORD *)(v10 + 860);
      else
        v28 = 0;
      v33 = *(_DWORD *)(v9 + 424);
      *(_DWORD *)buf = 136447490;
      v108 = "nw_protocol_http1_output_finished";
      v109 = 2082;
      *(_QWORD *)v110 = v9 + 74;
      *(_WORD *)&v110[8] = 2080;
      *(_QWORD *)&v110[10] = " ";
      v111 = 1024;
      v112 = v27;
      v113 = 1024;
      v114 = v28;
      v115 = 1024;
      v116 = v33;
      _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Sending final chunk immediately, no pending output", buf, 0x32u);
      v10 = *(_QWORD *)(v9 + 256);
    }
    if (!v10)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v108 = "nw_http1_connection_send_final_chunk";
      v52 = (char *)_os_log_send_and_compose_impl();
      v105[0] = OS_LOG_TYPE_ERROR;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v52, v105, type))
        goto LABEL_235;
      if (v105[0] == OS_LOG_TYPE_FAULT)
      {
        v75 = __nwlog_obj();
        v76 = v105[0];
        if (!os_log_type_enabled(v75, v105[0]))
          goto LABEL_235;
        *(_DWORD *)buf = 136446210;
        v108 = "nw_http1_connection_send_final_chunk";
        v55 = "%{public}s called with null http1_connection";
        goto LABEL_233;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        v75 = __nwlog_obj();
        v76 = v105[0];
        if (!os_log_type_enabled(v75, v105[0]))
          goto LABEL_235;
        *(_DWORD *)buf = 136446210;
        v108 = "nw_http1_connection_send_final_chunk";
        v55 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_233;
      }
      v58 = (char *)__nw_create_backtrace_string();
      v75 = __nwlog_obj();
      v76 = v105[0];
      v101 = os_log_type_enabled(v75, v105[0]);
      if (!v58)
      {
        if (v101)
        {
          *(_DWORD *)buf = 136446210;
          v108 = "nw_http1_connection_send_final_chunk";
          v55 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_233;
        }
        goto LABEL_235;
      }
      if (!v101)
        goto LABEL_227;
      *(_DWORD *)buf = 136446466;
      v108 = "nw_http1_connection_send_final_chunk";
      v109 = 2082;
      *(_QWORD *)v110 = v58;
      v60 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_225:
      v61 = v75;
      v62 = v76;
      v63 = 22;
      goto LABEL_226;
    }
  }
  if ((*(_BYTE *)(v10 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v93 = __nwlog_obj();
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
      {
        v94 = *(_QWORD *)(v10 + 488);
        v95 = *(_DWORD *)(*(_QWORD *)(v10 + 480) + 372);
        v96 = *(_DWORD *)(v10 + 860);
        if (v94)
          LODWORD(v94) = *(_DWORD *)(v94 + 424);
        *(_DWORD *)buf = 136447490;
        v108 = "nw_http1_connection_send_final_chunk";
        v109 = 2082;
        *(_QWORD *)v110 = v10 + 74;
        *(_WORD *)&v110[8] = 2080;
        *(_QWORD *)&v110[10] = " ";
        v111 = 1024;
        v112 = v95;
        v113 = 1024;
        v114 = v96;
        v115 = 1024;
        v116 = v94;
        _os_log_impl(&dword_182FBE000, v93, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> requesting new frame for final chunk", buf, 0x32u);
      }
    }
  }
  v34 = *(_QWORD *)(v10 + 32);
  if (!v34)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_http1_connection_send_final_chunk";
    v52 = (char *)_os_log_send_and_compose_impl();
    v105[0] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v52, v105, type))
      goto LABEL_235;
    if (v105[0] == OS_LOG_TYPE_FAULT)
    {
      v75 = __nwlog_obj();
      v76 = v105[0];
      if (!os_log_type_enabled(v75, v105[0]))
        goto LABEL_235;
      *(_DWORD *)buf = 136446210;
      v108 = "nw_http1_connection_send_final_chunk";
      v55 = "%{public}s called with null output_handler";
      goto LABEL_233;
    }
    if (type[0])
    {
      v58 = (char *)__nw_create_backtrace_string();
      v75 = __nwlog_obj();
      v76 = v105[0];
      v100 = os_log_type_enabled(v75, v105[0]);
      if (v58)
      {
        if (!v100)
          goto LABEL_227;
        *(_DWORD *)buf = 136446466;
        v108 = "nw_http1_connection_send_final_chunk";
        v109 = 2082;
        *(_QWORD *)v110 = v58;
        v60 = "%{public}s called with null output_handler, dumping backtrace:%{public}s";
        goto LABEL_225;
      }
      if (v100)
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_http1_connection_send_final_chunk";
        v55 = "%{public}s called with null output_handler, no backtrace";
        goto LABEL_233;
      }
LABEL_235:
      if (!v52)
        return;
      goto LABEL_236;
    }
    v75 = __nwlog_obj();
    v76 = v105[0];
    if (!os_log_type_enabled(v75, v105[0]))
      goto LABEL_235;
    *(_DWORD *)buf = 136446210;
    v108 = "nw_http1_connection_send_final_chunk";
    v55 = "%{public}s called with null output_handler, backtrace limit exceeded";
LABEL_233:
    v68 = v75;
    v69 = v76;
    v70 = 12;
    goto LABEL_234;
  }
  *(_QWORD *)v105 = 0;
  v106 = v105;
  output_frames = nw_protocol_get_output_frames(v34, v10, 5, 5, 1, (uint64_t)v105);
  v36 = output_frames;
  v37 = *(_QWORD *)v105;
  if (*(_QWORD *)v105 && output_frames)
  {
    *(_DWORD *)type = 0;
    v38 = nw_frame_unclaimed_bytes(*(uint64_t *)v105, type);
    *(_DWORD *)v38 = 218762544;
    *(_BYTE *)(v38 + 4) = 10;
    if (nw_frame_claim(v37, v39, 5, 0))
    {
      nw_frame_collapse(v37);
      nw_frame_unclaim(v37, v40, 5u, 0);
      if (nw_protocol_finalize_output_frames(v34, (uint64_t)v105))
      {
        *(_WORD *)(*(_QWORD *)(v10 + 488) + 428) |= 0x400u;
        *(_WORD *)(v10 + 872) |= 0x20u;
        nw_http_transaction_metadata_mark_outbound_message_end(*(void **)(*(_QWORD *)(v10 + 488) + 352));
        v41 = *(_QWORD *)(v10 + 488);
        if (*(_BYTE *)(v41 + 168))
        {
          if (*(_QWORD *)(v41 + 160) != *(_QWORD *)(v41 + 176))
          {
            if ((*(_BYTE *)(v41 + 158) & 1) == 0)
            {
              v42 = __nwlog_obj();
              v43 = os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
              v41 = *(_QWORD *)(v10 + 488);
              if (v43)
              {
                v44 = *(_QWORD *)(v41 + 256);
                if (v44)
                  LODWORD(v44) = *(_DWORD *)(v44 + 860);
                v45 = *(_DWORD *)(*(_QWORD *)(v41 + 248) + 372);
                v46 = *(_DWORD *)(v41 + 424);
                if (*(_BYTE *)(v41 + 168))
                  v47 = *(_QWORD *)(v41 + 160);
                else
                  v47 = -1;
                v82 = *(_QWORD *)(v41 + 176);
                *(_DWORD *)buf = 136448002;
                v108 = "nw_http1_connection_send_final_chunk";
                v109 = 2082;
                *(_QWORD *)v110 = v41 + 74;
                *(_WORD *)&v110[8] = 2080;
                *(_QWORD *)&v110[10] = " ";
                v111 = 1024;
                v112 = v45;
                v113 = 1024;
                v114 = v44;
                v115 = 1024;
                v116 = v46;
                v117 = 2048;
                *(_QWORD *)v118 = v47;
                *(_WORD *)&v118[8] = 2048;
                *(_QWORD *)&v118[10] = v82;
                _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Content length header %llu does not equal body size %llu", buf, 0x46u);
                v41 = *(_QWORD *)(v10 + 488);
              }
            }
            nw_protocol_error(*(_QWORD **)(v41 + 48), v41);
            nw_protocol_disconnected(*(_QWORD **)(*(_QWORD *)(v10 + 488) + 48), *(_QWORD *)(v10 + 488));
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    v108 = "nw_http1_connection_send_final_chunk";
    v109 = 1024;
    *(_DWORD *)v110 = 5;
    v52 = (char *)_os_log_send_and_compose_impl();
    v104 = OS_LOG_TYPE_ERROR;
    v102 = 0;
    if (!__nwlog_fault(v52, &v104, &v102))
      goto LABEL_235;
    if (v104 == OS_LOG_TYPE_FAULT)
    {
      v53 = __nwlog_obj();
      v54 = v104;
      if (!os_log_type_enabled(v53, v104))
        goto LABEL_235;
      *(_DWORD *)buf = 136446466;
      v108 = "nw_http1_connection_send_final_chunk";
      v109 = 1024;
      *(_DWORD *)v110 = 5;
      v55 = "%{public}s claiming frame with %u bytes failed";
LABEL_97:
      v68 = v53;
      v69 = v54;
      v70 = 18;
LABEL_234:
      _os_log_impl(&dword_182FBE000, v68, v69, v55, buf, v70);
      goto LABEL_235;
    }
    if (!v102)
    {
      v53 = __nwlog_obj();
      v54 = v104;
      if (!os_log_type_enabled(v53, v104))
        goto LABEL_235;
      *(_DWORD *)buf = 136446466;
      v108 = "nw_http1_connection_send_final_chunk";
      v109 = 1024;
      *(_DWORD *)v110 = 5;
      v55 = "%{public}s claiming frame with %u bytes failed, backtrace limit exceeded";
      goto LABEL_97;
    }
    v58 = (char *)__nw_create_backtrace_string();
    v53 = __nwlog_obj();
    v54 = v104;
    v59 = os_log_type_enabled(v53, v104);
    if (!v58)
    {
      if (!v59)
        goto LABEL_235;
      *(_DWORD *)buf = 136446466;
      v108 = "nw_http1_connection_send_final_chunk";
      v109 = 1024;
      *(_DWORD *)v110 = 5;
      v55 = "%{public}s claiming frame with %u bytes failed, no backtrace";
      goto LABEL_97;
    }
    if (v59)
    {
      *(_DWORD *)buf = 136446722;
      v108 = "nw_http1_connection_send_final_chunk";
      v109 = 1024;
      *(_DWORD *)v110 = 5;
      *(_WORD *)&v110[4] = 2082;
      *(_QWORD *)&v110[6] = v58;
      v60 = "%{public}s claiming frame with %u bytes failed, dumping backtrace:%{public}s";
      v61 = v53;
      v62 = v54;
      v63 = 28;
LABEL_226:
      _os_log_impl(&dword_182FBE000, v61, v62, v60, buf, v63);
    }
LABEL_227:
    free(v58);
    if (!v52)
      return;
LABEL_236:
    free(v52);
    return;
  }
  if (output_frames)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    v108 = "nw_http1_connection_send_final_chunk";
    v109 = 1024;
    *(_DWORD *)v110 = v36;
    v48 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v104 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v48, type, &v104))
      goto LABEL_88;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v49 = __nwlog_obj();
      v50 = type[0];
      if (!os_log_type_enabled(v49, type[0]))
        goto LABEL_88;
      *(_DWORD *)buf = 136446466;
      v108 = "nw_http1_connection_send_final_chunk";
      v109 = 1024;
      *(_DWORD *)v110 = v36;
      v51 = "%{public}s output handler reported %u frames to write, but array is empty";
    }
    else if (v104)
    {
      v56 = (char *)__nw_create_backtrace_string();
      v49 = __nwlog_obj();
      v50 = type[0];
      v57 = os_log_type_enabled(v49, type[0]);
      if (v56)
      {
        if (v57)
        {
          *(_DWORD *)buf = 136446722;
          v108 = "nw_http1_connection_send_final_chunk";
          v109 = 1024;
          *(_DWORD *)v110 = v36;
          *(_WORD *)&v110[4] = 2082;
          *(_QWORD *)&v110[6] = v56;
          _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s output handler reported %u frames to write, but array is empty, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(v56);
        goto LABEL_88;
      }
      if (!v57)
      {
LABEL_88:
        if (v48)
          free(v48);
        goto LABEL_90;
      }
      *(_DWORD *)buf = 136446466;
      v108 = "nw_http1_connection_send_final_chunk";
      v109 = 1024;
      *(_DWORD *)v110 = v36;
      v51 = "%{public}s output handler reported %u frames to write, but array is empty, no backtrace";
    }
    else
    {
      v49 = __nwlog_obj();
      v50 = type[0];
      if (!os_log_type_enabled(v49, type[0]))
        goto LABEL_88;
      *(_DWORD *)buf = 136446466;
      v108 = "nw_http1_connection_send_final_chunk";
      v109 = 1024;
      *(_DWORD *)v110 = v36;
      v51 = "%{public}s output handler reported %u frames to write, but array is empty, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v49, v50, v51, buf, 0x12u);
    goto LABEL_88;
  }
LABEL_90:
  if ((*(_BYTE *)(v10 + 158) & 1) == 0)
  {
    v64 = __nwlog_obj();
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
    {
      v65 = *(_QWORD *)(v10 + 488);
      v66 = *(_DWORD *)(*(_QWORD *)(v10 + 480) + 372);
      v67 = *(_DWORD *)(v10 + 860);
      if (v65)
        LODWORD(v65) = *(_DWORD *)(v65 + 424);
      *(_DWORD *)buf = 136447746;
      v108 = "nw_http1_connection_send_final_chunk";
      v109 = 2082;
      *(_QWORD *)v110 = v10 + 74;
      *(_WORD *)&v110[8] = 2080;
      *(_QWORD *)&v110[10] = " ";
      v111 = 1024;
      v112 = v66;
      v113 = 1024;
      v114 = v67;
      v115 = 1024;
      v116 = v65;
      v117 = 1024;
      *(_DWORD *)v118 = 5;
      v22 = "%{public}s %{public}s%s<i%u:c%u:s%u> output handler refused frame request for frames of length %u";
      v23 = v64;
      v24 = 56;
      goto LABEL_34;
    }
  }
}

#error "183780354: too big function (funcsize=0)"

uint64_t nw_protocol_http1_get_output_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  char *handle;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  int v24;
  const char *v25;
  uint64_t v26;
  int v27;
  int v28;
  __int16 v29;
  int v30;
  size_t v31;
  int v32;
  NSObject *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  const char *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  const char *v53;
  uint64_t frame;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  const char *v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  const char *v64;
  NSObject *v65;
  os_log_type_t v66;
  char v67;
  char v68;
  char *v69;
  _BOOL4 v70;
  const char *v71;
  int v72;
  char *v73;
  _BOOL4 v74;
  char *v75;
  NSObject *v76;
  _BOOL4 v77;
  char *v78;
  NSObject *v79;
  _BOOL4 v80;
  char *v81;
  _BOOL4 v82;
  NSObject *v83;
  _QWORD *v84;
  nw_frame **v85;
  uint64_t output_frames;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t *v89;
  nw_frame **tqh_last;
  NSObject *v91;
  os_log_type_t v92;
  uint32_t v93;
  NSObject *v94;
  NSObject *v95;
  os_log_type_t v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  const char *v100;
  const char *v101;
  _BOOL4 v102;
  char *v103;
  NSObject *v104;
  os_log_type_t v105;
  _QWORD *v106;
  nw_frame *tqh_first;
  nw_frame *v108;
  char v109;
  NSObject *v110;
  uint64_t v111;
  int v112;
  int v113;
  char *v114;
  NSObject *v115;
  os_log_type_t v116;
  const char *v117;
  char *backtrace_string;
  _BOOL4 v119;
  char *v120;
  _BOOL4 v121;
  const char *v122;
  NSObject *v123;
  uint64_t v124;
  int v125;
  int v126;
  _BOOL4 v127;
  _BOOL4 v128;
  char *v129;
  NSObject *v130;
  os_log_type_t v131;
  const char *v132;
  _BOOL4 v133;
  _BOOL4 v134;
  char *v135;
  _BOOL4 v136;
  _BOOL4 v137;
  NSObject *v138;
  uint64_t v139;
  int v140;
  int v141;
  _BOOL4 v142;
  _BOOL4 v143;
  NSObject *v145;
  uint64_t v146;
  int v147;
  int v148;
  NSObject *v149;
  uint64_t v150;
  int v151;
  int v152;
  NSObject *v153;
  int v154;
  NSObject *v155;
  int v156;
  os_log_type_t type;
  os_log_type_t typea;
  os_log_type_t typeb;
  NSObject *v160;
  NSObject *v161;
  os_log_type_t v162;
  NSObject *v163;
  int v164;
  NSObject *v165;
  const char *v166;
  uint64_t log;
  int loga;
  NSObject *logb;
  int v170;
  char *v171;
  char *v172;
  _QWORD v173[6];
  _QWORD v174[8];
  char v175;
  os_log_type_t v176;
  uint8_t buf[4];
  const char *v178;
  __int16 v179;
  _BYTE v180[18];
  __int16 v181;
  _BYTE v182[10];
  uint64_t v183;
  int v184;
  __int16 v185;
  int v186;
  __int16 v187;
  int v188;
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v178 = "nw_http1_get_http1_protocol";
    v114 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (!__nwlog_fault(v114, &v176, &v175))
      goto LABEL_299;
    if (v176 != OS_LOG_TYPE_FAULT)
    {
      if (!v175)
      {
        v115 = __nwlog_obj();
        v116 = v176;
        if (!os_log_type_enabled(v115, v176))
          goto LABEL_299;
        *(_DWORD *)buf = 136446210;
        v178 = "nw_http1_get_http1_protocol";
        v117 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_298;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v115 = __nwlog_obj();
      v116 = v176;
      v119 = os_log_type_enabled(v115, v176);
      if (!backtrace_string)
      {
        if (!v119)
          goto LABEL_299;
        *(_DWORD *)buf = 136446210;
        v178 = "nw_http1_get_http1_protocol";
        v117 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_298;
      }
      if (v119)
      {
        *(_DWORD *)buf = 136446466;
        v178 = "nw_http1_get_http1_protocol";
        v179 = 2082;
        *(_QWORD *)v180 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v115, v116, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_299;
    }
    v115 = __nwlog_obj();
    v116 = v176;
    if (!os_log_type_enabled(v115, v176))
      goto LABEL_299;
    *(_DWORD *)buf = 136446210;
    v178 = "nw_http1_get_http1_protocol";
    v117 = "%{public}s called with null protocol";
LABEL_298:
    _os_log_impl(&dword_182FBE000, v115, v116, v117, buf, 0xCu);
    goto LABEL_299;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v178 = "nw_http1_get_http1_protocol";
    v114 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (!__nwlog_fault(v114, &v176, &v175))
      goto LABEL_299;
    if (v176 != OS_LOG_TYPE_FAULT)
    {
      if (!v175)
      {
        v115 = __nwlog_obj();
        v116 = v176;
        if (!os_log_type_enabled(v115, v176))
          goto LABEL_299;
        *(_DWORD *)buf = 136446210;
        v178 = "nw_http1_get_http1_protocol";
        v117 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_298;
      }
      v120 = (char *)__nw_create_backtrace_string();
      v115 = __nwlog_obj();
      v116 = v176;
      v121 = os_log_type_enabled(v115, v176);
      if (!v120)
      {
        if (!v121)
          goto LABEL_299;
        *(_DWORD *)buf = 136446210;
        v178 = "nw_http1_get_http1_protocol";
        v117 = "%{public}s called with null handle, no backtrace";
        goto LABEL_298;
      }
      if (v121)
      {
        *(_DWORD *)buf = 136446466;
        v178 = "nw_http1_get_http1_protocol";
        v179 = 2082;
        *(_QWORD *)v180 = v120;
        v122 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_260:
        _os_log_impl(&dword_182FBE000, v115, v116, v122, buf, 0x16u);
      }
LABEL_261:
      free(v120);
      if (!v114)
      {
LABEL_301:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        v178 = "nw_protocol_http1_get_output_frames";
        v61 = (char *)_os_log_send_and_compose_impl();
        v176 = OS_LOG_TYPE_ERROR;
        v175 = 0;
        if (!__nwlog_fault(v61, &v176, &v175))
          goto LABEL_334;
        if (v176 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v62 = gLogObj;
          v63 = v176;
          if (!os_log_type_enabled((os_log_t)gLogObj, v176))
            goto LABEL_334;
          *(_DWORD *)buf = 136446210;
          v178 = "nw_protocol_http1_get_output_frames";
          v64 = "%{public}s called with null http1";
          goto LABEL_332;
        }
        if (!v175)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v62 = gLogObj;
          v63 = v176;
          if (!os_log_type_enabled((os_log_t)gLogObj, v176))
            goto LABEL_334;
          *(_DWORD *)buf = 136446210;
          v178 = "nw_protocol_http1_get_output_frames";
          v64 = "%{public}s called with null http1, backtrace limit exceeded";
          goto LABEL_332;
        }
        v69 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v62 = gLogObj;
        v63 = v176;
        v142 = os_log_type_enabled((os_log_t)gLogObj, v176);
        if (!v69)
        {
          if (!v142)
            goto LABEL_334;
          *(_DWORD *)buf = 136446210;
          v178 = "nw_protocol_http1_get_output_frames";
          v64 = "%{public}s called with null http1, no backtrace";
          goto LABEL_332;
        }
        if (v142)
        {
          *(_DWORD *)buf = 136446466;
          v178 = "nw_protocol_http1_get_output_frames";
          v179 = 2082;
          *(_QWORD *)v180 = v69;
          v71 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          goto LABEL_326;
        }
        goto LABEL_327;
      }
LABEL_300:
      free(v114);
      goto LABEL_301;
    }
    v115 = __nwlog_obj();
    v116 = v176;
    if (!os_log_type_enabled(v115, v176))
      goto LABEL_299;
    *(_DWORD *)buf = 136446210;
    v178 = "nw_http1_get_http1_protocol";
    v117 = "%{public}s called with null handle";
    goto LABEL_298;
  }
  v12 = *((_DWORD *)handle + 6);
  v13 = (uint64_t *)a1->handle;
  if (v12 == 1)
    goto LABEL_10;
  if (v12 != 2)
  {
    if (v12 != 3)
      goto LABEL_301;
    v14 = *((_QWORD *)handle + 2);
    if (v14)
    {
      v13 = (uint64_t *)(v14 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v178 = "nw_http1_get_http1_protocol";
    v114 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (__nwlog_fault(v114, &v176, &v175))
    {
      if (v176 == OS_LOG_TYPE_FAULT)
      {
        v115 = __nwlog_obj();
        v116 = v176;
        if (!os_log_type_enabled(v115, v176))
          goto LABEL_299;
        *(_DWORD *)buf = 136446210;
        v178 = "nw_http1_get_http1_protocol";
        v117 = "%{public}s called with null handle->http1_connection";
        goto LABEL_298;
      }
      if (!v175)
      {
        v115 = __nwlog_obj();
        v116 = v176;
        if (!os_log_type_enabled(v115, v176))
          goto LABEL_299;
        *(_DWORD *)buf = 136446210;
        v178 = "nw_http1_get_http1_protocol";
        v117 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_298;
      }
      v120 = (char *)__nw_create_backtrace_string();
      v115 = __nwlog_obj();
      v116 = v176;
      v133 = os_log_type_enabled(v115, v176);
      if (!v120)
      {
        if (!v133)
          goto LABEL_299;
        *(_DWORD *)buf = 136446210;
        v178 = "nw_http1_get_http1_protocol";
        v117 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_298;
      }
      if (v133)
      {
        *(_DWORD *)buf = 136446466;
        v178 = "nw_http1_get_http1_protocol";
        v179 = 2082;
        *(_QWORD *)v180 = v120;
        v122 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_260;
      }
      goto LABEL_261;
    }
LABEL_299:
    if (!v114)
      goto LABEL_301;
    goto LABEL_300;
  }
  v15 = *((_QWORD *)handle + 1);
  if (!v15)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v178 = "nw_http1_get_http1_protocol";
    v114 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (!__nwlog_fault(v114, &v176, &v175))
      goto LABEL_299;
    if (v176 == OS_LOG_TYPE_FAULT)
    {
      v115 = __nwlog_obj();
      v116 = v176;
      if (!os_log_type_enabled(v115, v176))
        goto LABEL_299;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_http1_get_http1_protocol";
      v117 = "%{public}s called with null handle->http1_stream";
      goto LABEL_298;
    }
    if (!v175)
    {
      v115 = __nwlog_obj();
      v116 = v176;
      if (!os_log_type_enabled(v115, v176))
        goto LABEL_299;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_http1_get_http1_protocol";
      v117 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_298;
    }
    v120 = (char *)__nw_create_backtrace_string();
    v115 = __nwlog_obj();
    v116 = v176;
    v134 = os_log_type_enabled(v115, v176);
    if (!v120)
    {
      if (!v134)
        goto LABEL_299;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_http1_get_http1_protocol";
      v117 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_298;
    }
    if (v134)
    {
      *(_DWORD *)buf = 136446466;
      v178 = "nw_http1_get_http1_protocol";
      v179 = 2082;
      *(_QWORD *)v180 = v120;
      v122 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_260;
    }
    goto LABEL_261;
  }
  v13 = (uint64_t *)(v15 + 248);
LABEL_10:
  v16 = *v13;
  if (!*v13)
    goto LABEL_301;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v178 = "nw_protocol_http1_get_output_frames";
    v61 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (!__nwlog_fault(v61, &v176, &v175))
      goto LABEL_334;
    if (v176 == OS_LOG_TYPE_FAULT)
    {
      v62 = __nwlog_obj();
      v63 = v176;
      if (!os_log_type_enabled(v62, v176))
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s called with null input_protocol";
      goto LABEL_332;
    }
    if (!v175)
    {
      v62 = __nwlog_obj();
      v63 = v176;
      if (!os_log_type_enabled(v62, v176))
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_332;
    }
    v69 = (char *)__nw_create_backtrace_string();
    v62 = __nwlog_obj();
    v63 = v176;
    v127 = os_log_type_enabled(v62, v176);
    if (!v69)
    {
      if (!v127)
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_332;
    }
    if (v127)
    {
      *(_DWORD *)buf = 136446466;
      v178 = "nw_protocol_http1_get_output_frames";
      v179 = 2082;
      *(_QWORD *)v180 = v69;
      v71 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_326;
    }
LABEL_327:
    free(v69);
    goto LABEL_334;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v178 = "nw_protocol_http1_get_output_frames";
    v61 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (!__nwlog_fault(v61, &v176, &v175))
      goto LABEL_334;
    if (v176 == OS_LOG_TYPE_FAULT)
    {
      v62 = __nwlog_obj();
      v63 = v176;
      if (!os_log_type_enabled(v62, v176))
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s called with null return_array";
      goto LABEL_332;
    }
    if (!v175)
    {
      v62 = __nwlog_obj();
      v63 = v176;
      if (!os_log_type_enabled(v62, v176))
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_332;
    }
    v69 = (char *)__nw_create_backtrace_string();
    v62 = __nwlog_obj();
    v63 = v176;
    v128 = os_log_type_enabled(v62, v176);
    if (!v69)
    {
      if (!v128)
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s called with null return_array, no backtrace";
      goto LABEL_332;
    }
    if (v128)
    {
      *(_DWORD *)buf = 136446466;
      v178 = "nw_protocol_http1_get_output_frames";
      v179 = 2082;
      *(_QWORD *)v180 = v69;
      v71 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
      goto LABEL_326;
    }
    goto LABEL_327;
  }
  if (v12 != 2)
  {
    if (v12 != 3)
      goto LABEL_318;
    v17 = *((_QWORD *)handle + 2);
    if (v17)
    {
      v18 = (uint64_t *)(v17 + 488);
      goto LABEL_18;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v178 = "nw_http1_get_stream_for_protocol";
    v129 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (__nwlog_fault(v129, &v176, &v175))
    {
      if (v176 == OS_LOG_TYPE_FAULT)
      {
        v130 = __nwlog_obj();
        v131 = v176;
        if (!os_log_type_enabled(v130, v176))
          goto LABEL_316;
        *(_DWORD *)buf = 136446210;
        v178 = "nw_http1_get_stream_for_protocol";
        v132 = "%{public}s called with null handle->http1_connection";
        goto LABEL_315;
      }
      if (!v175)
      {
        v130 = __nwlog_obj();
        v131 = v176;
        if (!os_log_type_enabled(v130, v176))
          goto LABEL_316;
        *(_DWORD *)buf = 136446210;
        v178 = "nw_http1_get_stream_for_protocol";
        v132 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_315;
      }
      v135 = (char *)__nw_create_backtrace_string();
      v130 = __nwlog_obj();
      v131 = v176;
      v136 = os_log_type_enabled(v130, v176);
      if (v135)
      {
        if (v136)
        {
          *(_DWORD *)buf = 136446466;
          v178 = "nw_http1_get_stream_for_protocol";
          v179 = 2082;
          *(_QWORD *)v180 = v135;
          _os_log_impl(&dword_182FBE000, v130, v131, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v135);
        goto LABEL_316;
      }
      if (v136)
      {
        *(_DWORD *)buf = 136446210;
        v178 = "nw_http1_get_stream_for_protocol";
        v132 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_315:
        _os_log_impl(&dword_182FBE000, v130, v131, v132, buf, 0xCu);
      }
    }
LABEL_316:
    if (v129)
      free(v129);
LABEL_318:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v178 = "nw_protocol_http1_get_output_frames";
    v61 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (!__nwlog_fault(v61, &v176, &v175))
      goto LABEL_334;
    if (v176 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v62 = gLogObj;
      v63 = v176;
      if (!os_log_type_enabled((os_log_t)gLogObj, v176))
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s called with null http1_stream";
      goto LABEL_332;
    }
    if (!v175)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v62 = gLogObj;
      v63 = v176;
      if (!os_log_type_enabled((os_log_t)gLogObj, v176))
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s called with null http1_stream, backtrace limit exceeded";
      goto LABEL_332;
    }
    v69 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v62 = gLogObj;
    v63 = v176;
    v143 = os_log_type_enabled((os_log_t)gLogObj, v176);
    if (!v69)
    {
      if (!v143)
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s called with null http1_stream, no backtrace";
      goto LABEL_332;
    }
    if (v143)
    {
      *(_DWORD *)buf = 136446466;
      v178 = "nw_protocol_http1_get_output_frames";
      v179 = 2082;
      *(_QWORD *)v180 = v69;
      v71 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
      goto LABEL_326;
    }
    goto LABEL_327;
  }
  v18 = (uint64_t *)(handle + 8);
LABEL_18:
  v19 = *v18;
  if (!*v18)
    goto LABEL_318;
  if ((*(_BYTE *)(v19 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v123 = __nwlog_obj();
      if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
      {
        v124 = *(_QWORD *)(v19 + 256);
        v125 = *(_DWORD *)(*(_QWORD *)(v19 + 248) + 372);
        if (v124)
          LODWORD(v124) = *(_DWORD *)(v124 + 860);
        v126 = *(_DWORD *)(v19 + 424);
        *(_DWORD *)buf = 136448258;
        v178 = "nw_protocol_http1_get_output_frames";
        v179 = 2082;
        *(_QWORD *)v180 = v19 + 74;
        *(_WORD *)&v180[8] = 2080;
        *(_QWORD *)&v180[10] = " ";
        v181 = 1024;
        *(_DWORD *)v182 = v125;
        *(_WORD *)&v182[4] = 1024;
        *(_DWORD *)&v182[6] = v124;
        LOWORD(v183) = 1024;
        *(_DWORD *)((char *)&v183 + 2) = v126;
        HIWORD(v183) = 1024;
        v184 = a3;
        v185 = 1024;
        v186 = a4;
        v187 = 1024;
        v188 = a5;
        _os_log_impl(&dword_182FBE000, v123, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called with min bytes %u, max bytes %u, max frames %u", buf, 0x44u);
      }
    }
  }
  v20 = *(uint64_t **)(v19 + 256);
  if (!v20)
  {
    if ((*(_BYTE *)(v19 + 158) & 1) != 0)
      return 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      return 0;
    v26 = *(_QWORD *)(v19 + 256);
    v27 = *(_DWORD *)(*(_QWORD *)(v19 + 248) + 372);
    if (v26)
      LODWORD(v26) = *(_DWORD *)(v26 + 860);
    v28 = *(_DWORD *)(v19 + 424);
    *(_DWORD *)buf = 136447490;
    v178 = "nw_protocol_http1_get_output_frames";
    v179 = 2082;
    *(_QWORD *)v180 = v19 + 74;
    *(_WORD *)&v180[8] = 2080;
    *(_QWORD *)&v180[10] = " ";
    v181 = 1024;
    *(_DWORD *)v182 = v27;
    *(_WORD *)&v182[4] = 1024;
    *(_DWORD *)&v182[6] = v26;
    LOWORD(v183) = 1024;
    *(_DWORD *)((char *)&v183 + 2) = v28;
    v25 = "%{public}s %{public}s%s<i%u:c%u:s%u> no connection, returning 0 frames";
    goto LABEL_33;
  }
  if (v20[81])
  {
    if ((*(_BYTE *)(v19 + 158) & 1) != 0)
      return 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      return 0;
    v22 = *(_QWORD *)(v19 + 256);
    v23 = *(_DWORD *)(*(_QWORD *)(v19 + 248) + 372);
    if (v22)
      LODWORD(v22) = *(_DWORD *)(v22 + 860);
    v24 = *(_DWORD *)(v19 + 424);
    *(_DWORD *)buf = 136447490;
    v178 = "nw_protocol_http1_get_output_frames";
    v179 = 2082;
    *(_QWORD *)v180 = v19 + 74;
    *(_WORD *)&v180[8] = 2080;
    *(_QWORD *)&v180[10] = " ";
    v181 = 1024;
    *(_DWORD *)v182 = v23;
    *(_WORD *)&v182[4] = 1024;
    *(_DWORD *)&v182[6] = v22;
    LOWORD(v183) = 1024;
    *(_DWORD *)((char *)&v183 + 2) = v24;
    v25 = "%{public}s %{public}s%s<i%u:c%u:s%u> still sending the initial frame, returning 0 frames";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, v25, buf, 0x32u);
    return 0;
  }
  v29 = *(_WORD *)(v19 + 428);
  if ((v29 & 2) == 0)
  {
    if ((v29 & 0x80) != 0)
    {
      if (*(_BYTE *)(v19 + 158) & 1 | (gLogDatapath == 0))
        return 0;
      v21 = __nwlog_obj();
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        return 0;
      v41 = *(_QWORD *)(v19 + 256);
      v42 = *(_DWORD *)(*(_QWORD *)(v19 + 248) + 372);
      if (v41)
        LODWORD(v41) = *(_DWORD *)(v41 + 860);
      v43 = *(_DWORD *)(v19 + 424);
      *(_DWORD *)buf = 136447490;
      v178 = "nw_protocol_http1_get_output_frames";
      v179 = 2082;
      *(_QWORD *)v180 = v19 + 74;
      *(_WORD *)&v180[8] = 2080;
      *(_QWORD *)&v180[10] = " ";
      v181 = 1024;
      *(_DWORD *)v182 = v42;
      *(_WORD *)&v182[4] = 1024;
      *(_DWORD *)&v182[6] = v41;
      LOWORD(v183) = 1024;
      *(_DWORD *)((char *)&v183 + 2) = v43;
      v25 = "%{public}s %{public}s%s<i%u:c%u:s%u> already vended initial outbound frame, cannot send more";
      goto LABEL_33;
    }
    if (!(*(_BYTE *)(v19 + 158) & 1 | (gLogDatapath == 0)))
    {
      v138 = __nwlog_obj();
      if (os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
      {
        v139 = *(_QWORD *)(v19 + 256);
        v140 = *(_DWORD *)(*(_QWORD *)(v19 + 248) + 372);
        if (v139)
          LODWORD(v139) = *(_DWORD *)(v139 + 860);
        v141 = *(_DWORD *)(v19 + 424);
        *(_DWORD *)buf = 136447490;
        v178 = "nw_protocol_http1_get_output_frames";
        v179 = 2082;
        *(_QWORD *)v180 = v19 + 74;
        *(_WORD *)&v180[8] = 2080;
        *(_QWORD *)&v180[10] = " ";
        v181 = 1024;
        *(_DWORD *)v182 = v140;
        *(_WORD *)&v182[4] = 1024;
        *(_DWORD *)&v182[6] = v139;
        LOWORD(v183) = 1024;
        *(_DWORD *)((char *)&v183 + 2) = v141;
        _os_log_impl(&dword_182FBE000, v138, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> outbound headers not yet complete, creating frame", buf, 0x32u);
      }
    }
    a6->tqh_first = 0;
    a6->tqh_last = &a6->tqh_first;
    if (a4 >= 0x20000)
      v30 = 0x20000;
    else
      v30 = a4;
    if (a4 > 0x20000 && (*(_BYTE *)(v16 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v153 = __nwlog_obj();
        if (os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG))
        {
          v154 = *(_DWORD *)(v16 + 372);
          *(_DWORD *)buf = 136447490;
          v178 = "nw_protocol_http1_get_output_frames";
          v179 = 2082;
          *(_QWORD *)v180 = v16 + 74;
          *(_WORD *)&v180[8] = 2080;
          *(_QWORD *)&v180[10] = " ";
          v181 = 1024;
          *(_DWORD *)v182 = v154;
          *(_WORD *)&v182[4] = 1024;
          *(_DWORD *)&v182[6] = v30;
          LOWORD(v183) = 1024;
          *(_DWORD *)((char *)&v183 + 2) = a4;
          _os_log_impl(&dword_182FBE000, v153, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> capping output frame size to %u, original request was %u", buf, 0x32u);
        }
      }
    }
    if (v30)
    {
      v31 = (v30 + 17);
      v32 = 7;
      v170 = 10;
      if ((*(_BYTE *)(v16 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v33 = __nwlog_obj();
          v170 = 10;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          {
            v34 = *(_DWORD *)(v16 + 372);
            *(_DWORD *)buf = 136447746;
            v178 = "nw_protocol_http1_get_output_frames";
            v179 = 2082;
            *(_QWORD *)v180 = v16 + 74;
            *(_WORD *)&v180[8] = 2080;
            *(_QWORD *)&v180[10] = " ";
            v181 = 1024;
            *(_DWORD *)v182 = v34;
            *(_WORD *)&v182[4] = 1024;
            *(_DWORD *)&v182[6] = v30 + 17;
            v183 = 0x4000000000A0400;
            v184 = 7;
            _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> adjusted output frame size is %u (start: %u, end: %u)", buf, 0x38u);
          }
        }
      }
    }
    else
    {
      v170 = 0;
      v32 = 0;
      v31 = 0;
    }
    frame = nw_frame_cache_create_frame(v20 + 87, v31);
    if (frame)
    {
      v56 = frame;
      if ((*(_WORD *)(frame + 204) & 4) != 0)
      {
        v68 = *(_BYTE *)(frame + 216);
        *(_QWORD *)(frame + 208) = v20;
        *(_BYTE *)(frame + 216) = v68 & 0xFC;
LABEL_136:
        if ((_DWORD)v31)
        {
          nw_frame_claim(v56, v55, v170, v32);
          if ((*(_BYTE *)(v16 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v155 = __nwlog_obj();
              if (os_log_type_enabled(v155, OS_LOG_TYPE_DEBUG))
              {
                v156 = *(_DWORD *)(v16 + 372);
                *(_DWORD *)buf = 136447746;
                v178 = "nw_protocol_http1_get_output_frames";
                v179 = 2082;
                *(_QWORD *)v180 = v16 + 74;
                *(_WORD *)&v180[8] = 2080;
                *(_QWORD *)&v180[10] = " ";
                v181 = 1024;
                *(_DWORD *)v182 = v156;
                *(_WORD *)&v182[4] = 1024;
                *(_DWORD *)&v182[6] = v170;
                LOWORD(v183) = 1024;
                *(_DWORD *)((char *)&v183 + 2) = v32;
                HIWORD(v183) = 1024;
                v184 = v31;
                _os_log_impl(&dword_182FBE000, v155, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> claiming chunked encoding size (start: %u, end: %u) from frame of %u bytes", buf, 0x38u);
              }
            }
          }
        }
        *(_QWORD *)(v56 + 16) = 0;
        v89 = (uint64_t *)v20[86];
        *(_QWORD *)(v56 + 24) = v89;
        *v89 = v56;
        v20[86] = v56 + 16;
        *(_QWORD *)(v56 + 80) = nw_http1_connection_output_frame_finalizer;
        *(_QWORD *)(v56 + 88) = v16;
        if ((*(_BYTE *)(v19 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v149 = __nwlog_obj();
            if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
            {
              v150 = *(_QWORD *)(v19 + 256);
              v151 = *(_DWORD *)(*(_QWORD *)(v19 + 248) + 372);
              if (v150)
                LODWORD(v150) = *(_DWORD *)(v150 + 860);
              v152 = *(_DWORD *)(v19 + 424);
              *(_DWORD *)buf = 136447746;
              v178 = "nw_protocol_http1_get_output_frames";
              v179 = 2082;
              *(_QWORD *)v180 = v19 + 74;
              *(_WORD *)&v180[8] = 2080;
              *(_QWORD *)&v180[10] = " ";
              v181 = 1024;
              *(_DWORD *)v182 = v151;
              *(_WORD *)&v182[4] = 1024;
              *(_DWORD *)&v182[6] = v150;
              LOWORD(v183) = 1024;
              *(_DWORD *)((char *)&v183 + 2) = v152;
              HIWORD(v183) = 1024;
              v184 = v31;
              _os_log_impl(&dword_182FBE000, v149, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> returning 1 frame of %u bytes", buf, 0x38u);
            }
          }
        }
        *(_QWORD *)(v56 + 32) = 0;
        tqh_last = a6->tqh_last;
        *(_QWORD *)(v56 + 40) = tqh_last;
        *tqh_last = (nw_frame *)v56;
        a6->tqh_last = (nw_frame **)(v56 + 32);
        *(_WORD *)(v19 + 428) |= 0x80u;
        return 1;
      }
      v164 = v32;
      loga = v31;
      __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      v178 = "nw_http1_frame_metadata_reset";
      v179 = 2048;
      *(_QWORD *)v180 = v56;
      v57 = (char *)_os_log_send_and_compose_impl();
      v176 = OS_LOG_TYPE_ERROR;
      v175 = 0;
      if (__nwlog_fault(v57, &v176, &v175))
      {
        if (v176 == OS_LOG_TYPE_FAULT)
        {
          v58 = __nwlog_obj();
          v59 = v176;
          if (os_log_type_enabled(v58, v176))
          {
            *(_DWORD *)buf = 136446466;
            v178 = "nw_http1_frame_metadata_reset";
            v179 = 2048;
            *(_QWORD *)v180 = v56;
            v60 = "%{public}s frame %p has no metadata";
LABEL_131:
            v87 = v58;
            v88 = v59;
LABEL_132:
            _os_log_impl(&dword_182FBE000, v87, v88, v60, buf, 0x16u);
          }
        }
        else if (v175)
        {
          v78 = (char *)__nw_create_backtrace_string();
          v79 = __nwlog_obj();
          type = v176;
          v80 = os_log_type_enabled(v79, v176);
          if (v78)
          {
            if (v80)
            {
              *(_DWORD *)buf = 136446722;
              v178 = "nw_http1_frame_metadata_reset";
              v179 = 2048;
              *(_QWORD *)v180 = v56;
              *(_WORD *)&v180[8] = 2082;
              *(_QWORD *)&v180[10] = v78;
              _os_log_impl(&dword_182FBE000, v79, type, "%{public}s frame %p has no metadata, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v78);
            goto LABEL_133;
          }
          if (v80)
          {
            *(_DWORD *)buf = 136446466;
            v178 = "nw_http1_frame_metadata_reset";
            v179 = 2048;
            *(_QWORD *)v180 = v56;
            v60 = "%{public}s frame %p has no metadata, no backtrace";
            v87 = v79;
            v88 = type;
            goto LABEL_132;
          }
        }
        else
        {
          v58 = __nwlog_obj();
          v59 = v176;
          if (os_log_type_enabled(v58, v176))
          {
            *(_DWORD *)buf = 136446466;
            v178 = "nw_http1_frame_metadata_reset";
            v179 = 2048;
            *(_QWORD *)v180 = v56;
            v60 = "%{public}s frame %p has no metadata, backtrace limit exceeded";
            goto LABEL_131;
          }
        }
      }
LABEL_133:
      LODWORD(v31) = loga;
      if (v57)
        free(v57);
      v32 = v164;
      goto LABEL_136;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    v178 = "nw_protocol_http1_get_output_frames";
    v179 = 1024;
    *(_DWORD *)v180 = v31;
    v61 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (__nwlog_fault(v61, &v176, &v175))
    {
      if (v176 == OS_LOG_TYPE_FAULT)
      {
        v65 = __nwlog_obj();
        v66 = v176;
        if (!os_log_type_enabled(v65, v176))
          goto LABEL_334;
        *(_DWORD *)buf = 136446466;
        v178 = "nw_protocol_http1_get_output_frames";
        v179 = 1024;
        *(_DWORD *)v180 = v31;
        v64 = "%{public}s failed to create/reuse output frame of length %u";
        goto LABEL_146;
      }
      if (!v175)
      {
        v65 = __nwlog_obj();
        v66 = v176;
        if (!os_log_type_enabled(v65, v176))
          goto LABEL_334;
        *(_DWORD *)buf = 136446466;
        v178 = "nw_protocol_http1_get_output_frames";
        v179 = 1024;
        *(_DWORD *)v180 = v31;
        v64 = "%{public}s failed to create/reuse output frame of length %u, backtrace limit exceeded";
        goto LABEL_146;
      }
      v72 = v31;
      v73 = (char *)__nw_create_backtrace_string();
      v65 = __nwlog_obj();
      v66 = v176;
      v74 = os_log_type_enabled(v65, v176);
      if (v73)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446722;
          v178 = "nw_protocol_http1_get_output_frames";
          v179 = 1024;
          *(_DWORD *)v180 = v72;
          *(_WORD *)&v180[4] = 2082;
          *(_QWORD *)&v180[6] = v73;
          _os_log_impl(&dword_182FBE000, v65, v66, "%{public}s failed to create/reuse output frame of length %u, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(v73);
        goto LABEL_334;
      }
      if (v74)
      {
        *(_DWORD *)buf = 136446466;
        v178 = "nw_protocol_http1_get_output_frames";
        v179 = 1024;
        *(_DWORD *)v180 = v72;
        v64 = "%{public}s failed to create/reuse output frame of length %u, no backtrace";
LABEL_146:
        v91 = v65;
        v92 = v66;
        v93 = 18;
LABEL_333:
        _os_log_impl(&dword_182FBE000, v91, v92, v64, buf, v93);
      }
    }
LABEL_334:
    if (v61)
      free(v61);
    return 0;
  }
  if (!(a4 | a3) && (*(_WORD *)(v19 + 428) & 0x100) != 0)
  {
    v35 = nw_frame_cache_create_frame(v20 + 87, 0);
    if (v35)
    {
      v36 = v35;
      if ((*(_WORD *)(v35 + 204) & 4) != 0)
      {
        v67 = *(_BYTE *)(v35 + 216);
        *(_QWORD *)(v35 + 208) = v20;
        *(_BYTE *)(v35 + 216) = v67 & 0xFC | 2;
LABEL_126:
        *(_QWORD *)(v36 + 16) = 0;
        v84 = (_QWORD *)v20[86];
        *(_QWORD *)(v36 + 24) = v84;
        *v84 = v36;
        v20[86] = v36 + 16;
        *(_QWORD *)(v36 + 80) = nw_http1_connection_output_frame_finalizer;
        *(_QWORD *)(v36 + 88) = v16;
        if ((*(_BYTE *)(v19 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v145 = __nwlog_obj();
            if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
            {
              v146 = *(_QWORD *)(v19 + 256);
              v147 = *(_DWORD *)(*(_QWORD *)(v19 + 248) + 372);
              if (v146)
                LODWORD(v146) = *(_DWORD *)(v146 + 860);
              v148 = *(_DWORD *)(v19 + 424);
              *(_DWORD *)buf = 136447490;
              v178 = "nw_protocol_http1_get_output_frames";
              v179 = 2082;
              *(_QWORD *)v180 = v19 + 74;
              *(_WORD *)&v180[8] = 2080;
              *(_QWORD *)&v180[10] = " ";
              v181 = 1024;
              *(_DWORD *)v182 = v147;
              *(_WORD *)&v182[4] = 1024;
              *(_DWORD *)&v182[6] = v146;
              LOWORD(v183) = 1024;
              *(_DWORD *)((char *)&v183 + 2) = v148;
              _os_log_impl(&dword_182FBE000, v145, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> returning 1 frame of 0 bytes for potential complete context", buf, 0x32u);
            }
          }
        }
        *(_QWORD *)(v36 + 32) = 0;
        v85 = a6->tqh_last;
        *(_QWORD *)(v36 + 40) = v85;
        *v85 = (nw_frame *)v36;
        a6->tqh_last = (nw_frame **)(v36 + 32);
        return 1;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      v178 = "nw_http1_frame_metadata_reset";
      v179 = 2048;
      *(_QWORD *)v180 = v36;
      v37 = (char *)_os_log_send_and_compose_impl();
      v176 = OS_LOG_TYPE_ERROR;
      v175 = 0;
      if (__nwlog_fault(v37, &v176, &v175))
      {
        if (v176 == OS_LOG_TYPE_FAULT)
        {
          v38 = __nwlog_obj();
          v39 = v176;
          if (!os_log_type_enabled(v38, v176))
            goto LABEL_124;
          *(_DWORD *)buf = 136446466;
          v178 = "nw_http1_frame_metadata_reset";
          v179 = 2048;
          *(_QWORD *)v180 = v36;
          v40 = "%{public}s frame %p has no metadata";
LABEL_122:
          v83 = v38;
LABEL_123:
          _os_log_impl(&dword_182FBE000, v83, v39, v40, buf, 0x16u);
          goto LABEL_124;
        }
        if (!v175)
        {
          v38 = __nwlog_obj();
          v39 = v176;
          if (!os_log_type_enabled(v38, v176))
            goto LABEL_124;
          *(_DWORD *)buf = 136446466;
          v178 = "nw_http1_frame_metadata_reset";
          v179 = 2048;
          *(_QWORD *)v180 = v36;
          v40 = "%{public}s frame %p has no metadata, backtrace limit exceeded";
          goto LABEL_122;
        }
        v75 = (char *)__nw_create_backtrace_string();
        v76 = __nwlog_obj();
        v39 = v176;
        logb = v76;
        v77 = os_log_type_enabled(v76, v176);
        if (v75)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446722;
            v178 = "nw_http1_frame_metadata_reset";
            v179 = 2048;
            *(_QWORD *)v180 = v36;
            *(_WORD *)&v180[8] = 2082;
            *(_QWORD *)&v180[10] = v75;
            _os_log_impl(&dword_182FBE000, logb, v39, "%{public}s frame %p has no metadata, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v75);
          goto LABEL_124;
        }
        if (v77)
        {
          *(_DWORD *)buf = 136446466;
          v178 = "nw_http1_frame_metadata_reset";
          v179 = 2048;
          *(_QWORD *)v180 = v36;
          v40 = "%{public}s frame %p has no metadata, no backtrace";
          v83 = logb;
          goto LABEL_123;
        }
      }
LABEL_124:
      if (v37)
        free(v37);
      goto LABEL_126;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v178 = "nw_protocol_http1_get_output_frames";
    v61 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (!__nwlog_fault(v61, &v176, &v175))
      goto LABEL_334;
    if (v176 == OS_LOG_TYPE_FAULT)
    {
      v62 = __nwlog_obj();
      v63 = v176;
      if (!os_log_type_enabled(v62, v176))
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s failed to create/reuse potential final output frame of length 0";
      goto LABEL_332;
    }
    if (!v175)
    {
      v62 = __nwlog_obj();
      v63 = v176;
      if (!os_log_type_enabled(v62, v176))
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s failed to create/reuse potential final output frame of length 0, backtrace limit exceeded";
      goto LABEL_332;
    }
    v69 = (char *)__nw_create_backtrace_string();
    v62 = __nwlog_obj();
    v63 = v176;
    v70 = os_log_type_enabled(v62, v176);
    if (!v69)
    {
      if (!v70)
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s failed to create/reuse potential final output frame of length 0, no backtrace";
      goto LABEL_332;
    }
    if (v70)
    {
      *(_DWORD *)buf = 136446466;
      v178 = "nw_protocol_http1_get_output_frames";
      v179 = 2082;
      *(_QWORD *)v180 = v69;
      v71 = "%{public}s failed to create/reuse potential final output frame of length 0, dumping backtrace:%{public}s";
LABEL_326:
      _os_log_impl(&dword_182FBE000, v62, v63, v71, buf, 0x16u);
      goto LABEL_327;
    }
    goto LABEL_327;
  }
  v44 = v20[4];
  if (!v44 || (v45 = *(_QWORD *)(v44 + 24)) == 0 || !*(_QWORD *)(v45 + 88))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v178 = "nw_protocol_http1_get_output_frames";
    v61 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (!__nwlog_fault(v61, &v176, &v175))
      goto LABEL_334;
    if (v176 == OS_LOG_TYPE_FAULT)
    {
      v62 = __nwlog_obj();
      v63 = v176;
      if (!os_log_type_enabled(v62, v176))
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s cannot get output frames, output handler missing callback";
      goto LABEL_332;
    }
    if (v175)
    {
      v69 = (char *)__nw_create_backtrace_string();
      v62 = __nwlog_obj();
      v63 = v176;
      v137 = os_log_type_enabled(v62, v176);
      if (v69)
      {
        if (v137)
        {
          *(_DWORD *)buf = 136446466;
          v178 = "nw_protocol_http1_get_output_frames";
          v179 = 2082;
          *(_QWORD *)v180 = v69;
          v71 = "%{public}s cannot get output frames, output handler missing callback, dumping backtrace:%{public}s";
          goto LABEL_326;
        }
        goto LABEL_327;
      }
      if (!v137)
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s cannot get output frames, output handler missing callback, no backtrace";
    }
    else
    {
      v62 = __nwlog_obj();
      v63 = v176;
      if (!os_log_type_enabled(v62, v176))
        goto LABEL_334;
      *(_DWORD *)buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      v64 = "%{public}s cannot get output frames, output handler missing callback, backtrace limit exceeded";
    }
LABEL_332:
    v91 = v62;
    v92 = v63;
    v93 = 12;
    goto LABEL_333;
  }
  if ((*(_WORD *)(v19 + 428) & 0x100) != 0)
  {
    if (!(_DWORD)a3)
      goto LABEL_158;
    v46 = 0;
    if ((_DWORD)a4)
    {
      v47 = a4;
      do
      {
        ++v46;
        v48 = v47 > 0xF;
        v47 >>= 4;
      }
      while (v48);
    }
    v49 = __CFADD__((_DWORD)a3, v46 + 9);
    a3 = (a3 + v46 + 9);
    if (!v49)
    {
LABEL_158:
      if (!(_DWORD)a4)
        goto LABEL_179;
      v97 = -1;
      v98 = a4;
      do
      {
        ++v97;
        v48 = v98 > 0xF;
        v98 >>= 4;
      }
      while (v48);
      v99 = (v97 + 10);
      v49 = __CFADD__((_DWORD)a4, (_DWORD)v99);
      a4 = (a4 + v99);
      if (!v49)
        goto LABEL_179;
      __nwlog_obj();
      *(_DWORD *)buf = 136446978;
      v178 = "nw_protocol_http1_get_output_frames";
      v179 = 2082;
      *(_QWORD *)v180 = "maximum_bytes";
      *(_WORD *)&v180[8] = 2048;
      *(_QWORD *)&v180[10] = v99;
      v181 = 2048;
      *(_QWORD *)v182 = a4;
      v100 = (const char *)_os_log_send_and_compose_impl();
      v176 = OS_LOG_TYPE_ERROR;
      v175 = 0;
      v172 = (char *)v100;
      if (__nwlog_fault(v100, &v176, &v175))
      {
        if (v176 == OS_LOG_TYPE_FAULT)
        {
          v165 = __nwlog_obj();
          v162 = v176;
          if (os_log_type_enabled(v165, v176))
          {
            *(_DWORD *)buf = 136446978;
            v178 = "nw_protocol_http1_get_output_frames";
            v179 = 2082;
            *(_QWORD *)v180 = "maximum_bytes";
            *(_WORD *)&v180[8] = 2048;
            *(_QWORD *)&v180[10] = v99;
            v181 = 2048;
            *(_QWORD *)v182 = a4;
            v101 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_174:
            v104 = v165;
            v105 = v162;
LABEL_175:
            _os_log_impl(&dword_182FBE000, v104, v105, v101, buf, 0x2Au);
          }
        }
        else if (v175)
        {
          v166 = __nw_create_backtrace_string();
          v163 = __nwlog_obj();
          typeb = v176;
          v102 = os_log_type_enabled(v163, v176);
          v103 = (char *)v166;
          if (v166)
          {
            if (v102)
            {
              *(_DWORD *)buf = 136447234;
              v178 = "nw_protocol_http1_get_output_frames";
              v179 = 2082;
              *(_QWORD *)v180 = "maximum_bytes";
              *(_WORD *)&v180[8] = 2048;
              *(_QWORD *)&v180[10] = v99;
              v181 = 2048;
              *(_QWORD *)v182 = a4;
              *(_WORD *)&v182[8] = 2082;
              v183 = (uint64_t)v166;
              _os_log_impl(&dword_182FBE000, v163, typeb, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              v103 = (char *)v166;
            }
            free(v103);
            goto LABEL_176;
          }
          if (v102)
          {
            *(_DWORD *)buf = 136446978;
            v178 = "nw_protocol_http1_get_output_frames";
            v179 = 2082;
            *(_QWORD *)v180 = "maximum_bytes";
            *(_WORD *)&v180[8] = 2048;
            *(_QWORD *)&v180[10] = v99;
            v181 = 2048;
            *(_QWORD *)v182 = a4;
            v101 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            v104 = v163;
            v105 = typeb;
            goto LABEL_175;
          }
        }
        else
        {
          v165 = __nwlog_obj();
          v162 = v176;
          if (os_log_type_enabled(v165, v176))
          {
            *(_DWORD *)buf = 136446978;
            v178 = "nw_protocol_http1_get_output_frames";
            v179 = 2082;
            *(_QWORD *)v180 = "maximum_bytes";
            *(_WORD *)&v180[8] = 2048;
            *(_QWORD *)&v180[10] = v99;
            v181 = 2048;
            *(_QWORD *)v182 = a4;
            v101 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_174;
          }
        }
      }
LABEL_176:
      if (v172)
        free(v172);
      a4 = 0xFFFFFFFFLL;
      goto LABEL_179;
    }
    v50 = (v46 + 2);
    __nwlog_obj();
    *(_DWORD *)buf = 136446978;
    v178 = "nw_protocol_http1_get_output_frames";
    v179 = 2082;
    *(_QWORD *)v180 = "minimum_bytes";
    *(_WORD *)&v180[8] = 2048;
    log = v50 + 7;
    *(_QWORD *)&v180[10] = v50 + 7;
    v181 = 2048;
    *(_QWORD *)v182 = a3;
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    v171 = (char *)_os_log_send_and_compose_impl();
    if (__nwlog_fault(v171, &v176, &v175))
    {
      if (v176 == OS_LOG_TYPE_FAULT)
      {
        v51 = __nwlog_obj();
        v52 = v176;
        v160 = v51;
        if (os_log_type_enabled(v51, v176))
        {
          *(_DWORD *)buf = 136446978;
          v178 = "nw_protocol_http1_get_output_frames";
          v179 = 2082;
          *(_QWORD *)v180 = "minimum_bytes";
          *(_WORD *)&v180[8] = 2048;
          *(_QWORD *)&v180[10] = log;
          v181 = 2048;
          *(_QWORD *)v182 = a3;
          v53 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_153:
          v95 = v160;
          v96 = v52;
LABEL_154:
          _os_log_impl(&dword_182FBE000, v95, v96, v53, buf, 0x2Au);
        }
      }
      else if (v175)
      {
        v81 = (char *)__nw_create_backtrace_string();
        v161 = __nwlog_obj();
        typea = v176;
        v82 = os_log_type_enabled(v161, v176);
        if (v81)
        {
          if (v82)
          {
            *(_DWORD *)buf = 136447234;
            v178 = "nw_protocol_http1_get_output_frames";
            v179 = 2082;
            *(_QWORD *)v180 = "minimum_bytes";
            *(_WORD *)&v180[8] = 2048;
            *(_QWORD *)&v180[10] = log;
            v181 = 2048;
            *(_QWORD *)v182 = a3;
            *(_WORD *)&v182[8] = 2082;
            v183 = (uint64_t)v81;
            _os_log_impl(&dword_182FBE000, v161, typea, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v81);
          goto LABEL_155;
        }
        if (v82)
        {
          *(_DWORD *)buf = 136446978;
          v178 = "nw_protocol_http1_get_output_frames";
          v179 = 2082;
          *(_QWORD *)v180 = "minimum_bytes";
          *(_WORD *)&v180[8] = 2048;
          *(_QWORD *)&v180[10] = log;
          v181 = 2048;
          *(_QWORD *)v182 = a3;
          v53 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          v95 = v161;
          v96 = typea;
          goto LABEL_154;
        }
      }
      else
      {
        v94 = __nwlog_obj();
        v52 = v176;
        v160 = v94;
        if (os_log_type_enabled(v94, v176))
        {
          *(_DWORD *)buf = 136446978;
          v178 = "nw_protocol_http1_get_output_frames";
          v179 = 2082;
          *(_QWORD *)v180 = "minimum_bytes";
          *(_WORD *)&v180[8] = 2048;
          *(_QWORD *)&v180[10] = log;
          v181 = 2048;
          *(_QWORD *)v182 = a3;
          v53 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_153;
        }
      }
    }
LABEL_155:
    if (v171)
      free(v171);
    a3 = 0xFFFFFFFFLL;
    goto LABEL_158;
  }
LABEL_179:
  output_frames = nw_protocol_get_output_frames(v20[4], (uint64_t)a2, a3, a4, a5, (uint64_t)a6);
  if ((*(_WORD *)(v19 + 428) & 0x100) != 0)
  {
    v174[0] = MEMORY[0x1E0C809B0];
    v174[1] = 0x40000000;
    v174[2] = ___ZL35nw_protocol_http1_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
    v174[3] = &__block_descriptor_tmp_124;
    v174[4] = v19;
    v174[5] = v20;
    v174[6] = a6;
    v174[7] = v16;
    v106 = v174;
  }
  else
  {
    v173[0] = MEMORY[0x1E0C809B0];
    v173[1] = 0x40000000;
    v173[2] = ___ZL35nw_protocol_http1_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_125;
    v173[3] = &__block_descriptor_tmp_126;
    v173[4] = v19;
    v173[5] = v20;
    v106 = v173;
  }
  tqh_first = a6->tqh_first;
  do
  {
    if (!tqh_first)
      break;
    v108 = (nw_frame *)*((_QWORD *)tqh_first + 4);
    v109 = ((uint64_t (*)(_QWORD *))v106[2])(v106);
    tqh_first = v108;
  }
  while ((v109 & 1) != 0);
  if ((*(_BYTE *)(v19 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v110 = __nwlog_obj();
      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
      {
        v111 = *(_QWORD *)(v19 + 256);
        v112 = *(_DWORD *)(*(_QWORD *)(v19 + 248) + 372);
        if (v111)
          LODWORD(v111) = *(_DWORD *)(v111 + 860);
        v113 = *(_DWORD *)(v19 + 424);
        *(_DWORD *)buf = 136447746;
        v178 = "nw_protocol_http1_get_output_frames";
        v179 = 2082;
        *(_QWORD *)v180 = v19 + 74;
        *(_WORD *)&v180[8] = 2080;
        *(_QWORD *)&v180[10] = " ";
        v181 = 1024;
        *(_DWORD *)v182 = v112;
        *(_WORD *)&v182[4] = 1024;
        *(_DWORD *)&v182[6] = v111;
        LOWORD(v183) = 1024;
        *(_DWORD *)((char *)&v183 + 2) = v113;
        HIWORD(v183) = 1024;
        v184 = output_frames;
        _os_log_impl(&dword_182FBE000, v110, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> outbound headers complete, returning %u frames from below", buf, 0x38u);
      }
    }
  }
  return output_frames;
}

uint64_t nw_protocol_http1_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  _DWORD *handle;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  nw_frame *tqh_first;
  nw_frame *v9;
  char v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  NSObject *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;
  char *v22;
  _BOOL4 v23;
  nw_frame *v24;
  nw_frame *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  const char *v37;
  char *backtrace_string;
  _BOOL4 v39;
  char *v40;
  _BOOL4 v41;
  const char *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  const char *v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  const char *v50;
  char *v51;
  _BOOL4 v52;
  const char *v53;
  char *v54;
  _BOOL4 v55;
  const char *v56;
  _BOOL4 v57;
  char *v58;
  _BOOL4 v59;
  _BOOL4 v60;
  _BOOL4 v61;
  _BOOL4 v62;
  _QWORD v64[2];
  uint64_t (*v65)(_QWORD *);
  void *v66;
  os_log_type_t *v67;
  uint64_t *v68;
  uint64_t v69;
  nw_frame_array_s *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t type[8];
  os_log_type_t *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  os_log_type_t v80;
  uint8_t buf[4];
  const char *v82;
  __int16 v83;
  char *v84;
  __int16 v85;
  const char *v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http1_get_http1_protocol";
    v30 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v71) = 0;
    if (!__nwlog_fault(v30, type, &v71))
      goto LABEL_161;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v71)
      {
        v31 = __nwlog_obj();
        v32 = type[0];
        if (!os_log_type_enabled(v31, type[0]))
          goto LABEL_161;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http1_get_http1_protocol";
        v33 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_160;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      v32 = type[0];
      v39 = os_log_type_enabled(v31, type[0]);
      if (!backtrace_string)
      {
        if (!v39)
          goto LABEL_161;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http1_get_http1_protocol";
        v33 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_160;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446466;
        v82 = "nw_http1_get_http1_protocol";
        v83 = 2082;
        v84 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_161;
    }
    v31 = __nwlog_obj();
    v32 = type[0];
    if (!os_log_type_enabled(v31, type[0]))
      goto LABEL_161;
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http1_get_http1_protocol";
    v33 = "%{public}s called with null protocol";
LABEL_160:
    _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0xCu);
    goto LABEL_161;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http1_get_http1_protocol";
    v30 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v71) = 0;
    if (!__nwlog_fault(v30, type, &v71))
      goto LABEL_161;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v71)
      {
        v31 = __nwlog_obj();
        v32 = type[0];
        if (!os_log_type_enabled(v31, type[0]))
          goto LABEL_161;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http1_get_http1_protocol";
        v33 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_160;
      }
      v40 = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      v32 = type[0];
      v41 = os_log_type_enabled(v31, type[0]);
      if (!v40)
      {
        if (!v41)
          goto LABEL_161;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http1_get_http1_protocol";
        v33 = "%{public}s called with null handle, no backtrace";
        goto LABEL_160;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        v82 = "nw_http1_get_http1_protocol";
        v83 = 2082;
        v84 = v40;
        v42 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_123:
        _os_log_impl(&dword_182FBE000, v31, v32, v42, buf, 0x16u);
      }
LABEL_124:
      free(v40);
      if (!v30)
      {
LABEL_163:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        v82 = "nw_protocol_http1_finalize_output_frames";
        v34 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v71) = 0;
        if (!__nwlog_fault(v34, type, &v71))
          goto LABEL_178;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v35 = gLogObj;
          v36 = type[0];
          if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v82 = "nw_protocol_http1_finalize_output_frames";
            v37 = "%{public}s called with null http1";
            goto LABEL_177;
          }
          goto LABEL_178;
        }
        if (!(_BYTE)v71)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v35 = gLogObj;
          v36 = type[0];
          if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v82 = "nw_protocol_http1_finalize_output_frames";
            v37 = "%{public}s called with null http1, backtrace limit exceeded";
            goto LABEL_177;
          }
          goto LABEL_178;
        }
        v51 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v35 = gLogObj;
        v36 = type[0];
        v62 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (!v51)
        {
          if (v62)
          {
            *(_DWORD *)buf = 136446210;
            v82 = "nw_protocol_http1_finalize_output_frames";
            v37 = "%{public}s called with null http1, no backtrace";
            goto LABEL_177;
          }
          goto LABEL_178;
        }
        if (v62)
        {
          *(_DWORD *)buf = 136446466;
          v82 = "nw_protocol_http1_finalize_output_frames";
          v83 = 2082;
          v84 = v51;
          v53 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          goto LABEL_171;
        }
LABEL_172:
        free(v51);
        goto LABEL_178;
      }
LABEL_162:
      free(v30);
      goto LABEL_163;
    }
    v31 = __nwlog_obj();
    v32 = type[0];
    if (!os_log_type_enabled(v31, type[0]))
      goto LABEL_161;
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http1_get_http1_protocol";
    v33 = "%{public}s called with null handle";
    goto LABEL_160;
  }
  v4 = handle[6];
  if (v4 == 1)
    goto LABEL_10;
  if (v4 != 2)
  {
    if (v4 != 3)
      goto LABEL_163;
    v5 = *((_QWORD *)handle + 2);
    if (v5)
    {
      handle = (_DWORD *)(v5 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http1_get_http1_protocol";
    v30 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v71) = 0;
    if (__nwlog_fault(v30, type, &v71))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v31 = __nwlog_obj();
        v32 = type[0];
        if (!os_log_type_enabled(v31, type[0]))
          goto LABEL_161;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http1_get_http1_protocol";
        v33 = "%{public}s called with null handle->http1_connection";
        goto LABEL_160;
      }
      if (!(_BYTE)v71)
      {
        v31 = __nwlog_obj();
        v32 = type[0];
        if (!os_log_type_enabled(v31, type[0]))
          goto LABEL_161;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http1_get_http1_protocol";
        v33 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_160;
      }
      v40 = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      v32 = type[0];
      v60 = os_log_type_enabled(v31, type[0]);
      if (!v40)
      {
        if (!v60)
          goto LABEL_161;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http1_get_http1_protocol";
        v33 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_160;
      }
      if (v60)
      {
        *(_DWORD *)buf = 136446466;
        v82 = "nw_http1_get_http1_protocol";
        v83 = 2082;
        v84 = v40;
        v42 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_123;
      }
      goto LABEL_124;
    }
LABEL_161:
    if (!v30)
      goto LABEL_163;
    goto LABEL_162;
  }
  v6 = *((_QWORD *)handle + 1);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http1_get_http1_protocol";
    v30 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v71) = 0;
    if (!__nwlog_fault(v30, type, &v71))
      goto LABEL_161;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v31 = __nwlog_obj();
      v32 = type[0];
      if (!os_log_type_enabled(v31, type[0]))
        goto LABEL_161;
      *(_DWORD *)buf = 136446210;
      v82 = "nw_http1_get_http1_protocol";
      v33 = "%{public}s called with null handle->http1_stream";
      goto LABEL_160;
    }
    if (!(_BYTE)v71)
    {
      v31 = __nwlog_obj();
      v32 = type[0];
      if (!os_log_type_enabled(v31, type[0]))
        goto LABEL_161;
      *(_DWORD *)buf = 136446210;
      v82 = "nw_http1_get_http1_protocol";
      v33 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_160;
    }
    v40 = (char *)__nw_create_backtrace_string();
    v31 = __nwlog_obj();
    v32 = type[0];
    v61 = os_log_type_enabled(v31, type[0]);
    if (!v40)
    {
      if (!v61)
        goto LABEL_161;
      *(_DWORD *)buf = 136446210;
      v82 = "nw_http1_get_http1_protocol";
      v33 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_160;
    }
    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http1_get_http1_protocol";
      v83 = 2082;
      v84 = v40;
      v42 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_123;
    }
    goto LABEL_124;
  }
  handle = (_DWORD *)(v6 + 248);
LABEL_10:
  v7 = *(_QWORD *)handle;
  if (!v7)
    goto LABEL_163;
  if (a2)
  {
    *(_QWORD *)type = 0;
    v76 = type;
    v77 = 0x2000000000;
    v78 = 0;
    v71 = 0;
    v72 = &v71;
    v73 = 0x2000000000;
    v74 = 0;
    v64[0] = MEMORY[0x1E0C809B0];
    v64[1] = 0x40000000;
    v65 = (uint64_t (*)(_QWORD *))___ZL40nw_protocol_http1_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
    v66 = &unk_1E14A19D0;
    v69 = v7;
    v70 = a2;
    v67 = type;
    v68 = &v71;
    tqh_first = a2->tqh_first;
    do
    {
      if (!tqh_first)
        break;
      v9 = (nw_frame *)*((_QWORD *)tqh_first + 4);
      v10 = v65(v64);
      tqh_first = v9;
    }
    while ((v10 & 1) != 0);
    if (!a2->tqh_first)
      goto LABEL_47;
    if (*((_QWORD *)v76 + 3))
    {
      v11 = v72[3];
      if (v11)
      {
        if ((*(_WORD *)(v11 + 428) & 2) != 0)
        {
          if ((*(_BYTE *)(v11 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v16 = __nwlog_obj();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
              {
                v17 = v72[3];
                v18 = (char *)(v17 + 74);
                v19 = *(_QWORD *)(v17 + 256);
                v20 = *(_DWORD *)(*(_QWORD *)(v17 + 248) + 372);
                if (v19)
                  LODWORD(v19) = *(_DWORD *)(v19 + 860);
                v21 = *(_DWORD *)(v17 + 424);
                *(_DWORD *)buf = 136447490;
                v82 = "nw_protocol_http1_finalize_output_frames";
                v83 = 2082;
                v84 = v18;
                v85 = 2080;
                v86 = " ";
                v87 = 1024;
                v88 = v20;
                v89 = 1024;
                v90 = v19;
                v91 = 1024;
                v92 = v21;
                _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> passing through frames", buf, 0x32u);
              }
            }
          }
LABEL_41:
          v24 = a2->tqh_first;
          do
          {
            if (!v24)
              break;
            v25 = (nw_frame *)*((_QWORD *)v24 + 4);
            v26 = ___ZL40nw_protocol_http1_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_139((uint64_t)&__block_literal_global_141, (uint64_t)v24);
            v24 = v25;
          }
          while ((v26 & 1) != 0);
          v27 = *((_QWORD *)v76 + 3);
          if (v27)
          {
            v28 = *(_QWORD *)(v27 + 32);
LABEL_46:
            nw_protocol_finalize_output_frames(v28, (uint64_t)a2);
LABEL_47:
            v29 = 1;
LABEL_48:
            _Block_object_dispose(&v71, 8);
            _Block_object_dispose(type, 8);
            return v29;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          v82 = "nw_http1_get_output_handler";
          v47 = (char *)_os_log_send_and_compose_impl();
          v80 = OS_LOG_TYPE_ERROR;
          v79 = 0;
          if (__nwlog_fault(v47, &v80, &v79))
          {
            if (v80 == OS_LOG_TYPE_FAULT)
            {
              v48 = __nwlog_obj();
              v49 = v80;
              if (os_log_type_enabled(v48, v80))
              {
                *(_DWORD *)buf = 136446210;
                v82 = "nw_http1_get_output_handler";
                v50 = "%{public}s called with null connection";
LABEL_148:
                _os_log_impl(&dword_182FBE000, v48, v49, v50, buf, 0xCu);
              }
            }
            else if (v79)
            {
              v58 = (char *)__nw_create_backtrace_string();
              v48 = __nwlog_obj();
              v49 = v80;
              v59 = os_log_type_enabled(v48, v80);
              if (v58)
              {
                if (v59)
                {
                  *(_DWORD *)buf = 136446466;
                  v82 = "nw_http1_get_output_handler";
                  v83 = 2082;
                  v84 = v58;
                  _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v58);
                goto LABEL_149;
              }
              if (v59)
              {
                *(_DWORD *)buf = 136446210;
                v82 = "nw_http1_get_output_handler";
                v50 = "%{public}s called with null connection, no backtrace";
                goto LABEL_148;
              }
            }
            else
            {
              v48 = __nwlog_obj();
              v49 = v80;
              if (os_log_type_enabled(v48, v80))
              {
                *(_DWORD *)buf = 136446210;
                v82 = "nw_http1_get_output_handler";
                v50 = "%{public}s called with null connection, backtrace limit exceeded";
                goto LABEL_148;
              }
            }
          }
LABEL_149:
          if (v47)
            free(v47);
          v28 = 0;
          goto LABEL_46;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        v82 = "nw_protocol_http1_finalize_output_frames";
        v12 = (char *)_os_log_send_and_compose_impl();
        v80 = OS_LOG_TYPE_ERROR;
        v79 = 0;
        if (__nwlog_fault(v12, &v80, &v79))
        {
          if (v80 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v13 = gLogObj;
            v14 = v80;
            if (!os_log_type_enabled((os_log_t)gLogObj, v80))
              goto LABEL_39;
            *(_DWORD *)buf = 136446210;
            v82 = "nw_protocol_http1_finalize_output_frames";
            v15 = "%{public}s haven't sent headers, but we have someone else's frames to finalize";
            goto LABEL_38;
          }
          if (!v79)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v13 = gLogObj;
            v14 = v80;
            if (!os_log_type_enabled((os_log_t)gLogObj, v80))
              goto LABEL_39;
            *(_DWORD *)buf = 136446210;
            v82 = "nw_protocol_http1_finalize_output_frames";
            v15 = "%{public}s haven't sent headers, but we have someone else's frames to finalize, backtrace limit exceeded";
            goto LABEL_38;
          }
          v22 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v13 = gLogObj;
          v14 = v80;
          v23 = os_log_type_enabled((os_log_t)gLogObj, v80);
          if (v22)
          {
            if (v23)
            {
              *(_DWORD *)buf = 136446466;
              v82 = "nw_protocol_http1_finalize_output_frames";
              v83 = 2082;
              v84 = v22;
              _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s haven't sent headers, but we have someone else's frames to finalize, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v22);
            goto LABEL_39;
          }
          if (v23)
          {
            *(_DWORD *)buf = 136446210;
            v82 = "nw_protocol_http1_finalize_output_frames";
            v15 = "%{public}s haven't sent headers, but we have someone else's frames to finalize, no backtrace";
LABEL_38:
            _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
          }
        }
LABEL_39:
        if (v12)
          free(v12);
        goto LABEL_41;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v82 = "nw_protocol_http1_finalize_output_frames";
      v43 = (char *)_os_log_send_and_compose_impl();
      v80 = OS_LOG_TYPE_ERROR;
      v79 = 0;
      if (!__nwlog_fault(v43, &v80, &v79))
        goto LABEL_143;
      if (v80 == OS_LOG_TYPE_FAULT)
      {
        v44 = __nwlog_obj();
        v45 = v80;
        if (os_log_type_enabled(v44, v80))
        {
          *(_DWORD *)buf = 136446210;
          v82 = "nw_protocol_http1_finalize_output_frames";
          v46 = "%{public}s called with null http1_stream";
          goto LABEL_142;
        }
        goto LABEL_143;
      }
      if (!v79)
      {
        v44 = __nwlog_obj();
        v45 = v80;
        if (os_log_type_enabled(v44, v80))
        {
          *(_DWORD *)buf = 136446210;
          v82 = "nw_protocol_http1_finalize_output_frames";
          v46 = "%{public}s called with null http1_stream, backtrace limit exceeded";
          goto LABEL_142;
        }
        goto LABEL_143;
      }
      v54 = (char *)__nw_create_backtrace_string();
      v44 = __nwlog_obj();
      v45 = v80;
      v57 = os_log_type_enabled(v44, v80);
      if (!v54)
      {
        if (v57)
        {
          *(_DWORD *)buf = 136446210;
          v82 = "nw_protocol_http1_finalize_output_frames";
          v46 = "%{public}s called with null http1_stream, no backtrace";
          goto LABEL_142;
        }
        goto LABEL_143;
      }
      if (v57)
      {
        *(_DWORD *)buf = 136446466;
        v82 = "nw_protocol_http1_finalize_output_frames";
        v83 = 2082;
        v84 = v54;
        v56 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
        goto LABEL_102;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v82 = "nw_protocol_http1_finalize_output_frames";
      v43 = (char *)_os_log_send_and_compose_impl();
      v80 = OS_LOG_TYPE_ERROR;
      v79 = 0;
      if (!__nwlog_fault(v43, &v80, &v79))
        goto LABEL_143;
      if (v80 == OS_LOG_TYPE_FAULT)
      {
        v44 = __nwlog_obj();
        v45 = v80;
        if (os_log_type_enabled(v44, v80))
        {
          *(_DWORD *)buf = 136446210;
          v82 = "nw_protocol_http1_finalize_output_frames";
          v46 = "%{public}s called with null http1_connection";
LABEL_142:
          _os_log_impl(&dword_182FBE000, v44, v45, v46, buf, 0xCu);
        }
LABEL_143:
        if (v43)
          free(v43);
        v29 = 0;
        goto LABEL_48;
      }
      if (!v79)
      {
        v44 = __nwlog_obj();
        v45 = v80;
        if (os_log_type_enabled(v44, v80))
        {
          *(_DWORD *)buf = 136446210;
          v82 = "nw_protocol_http1_finalize_output_frames";
          v46 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_142;
        }
        goto LABEL_143;
      }
      v54 = (char *)__nw_create_backtrace_string();
      v44 = __nwlog_obj();
      v45 = v80;
      v55 = os_log_type_enabled(v44, v80);
      if (!v54)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          v82 = "nw_protocol_http1_finalize_output_frames";
          v46 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_142;
        }
        goto LABEL_143;
      }
      if (v55)
      {
        *(_DWORD *)buf = 136446466;
        v82 = "nw_protocol_http1_finalize_output_frames";
        v83 = 2082;
        v84 = v54;
        v56 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_102:
        _os_log_impl(&dword_182FBE000, v44, v45, v56, buf, 0x16u);
      }
    }
    free(v54);
    goto LABEL_143;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v82 = "nw_protocol_http1_finalize_output_frames";
  v34 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v71) = 0;
  if (!__nwlog_fault(v34, type, &v71))
    goto LABEL_178;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    v35 = __nwlog_obj();
    v36 = type[0];
    if (os_log_type_enabled(v35, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      v82 = "nw_protocol_http1_finalize_output_frames";
      v37 = "%{public}s called with null frames";
LABEL_177:
      _os_log_impl(&dword_182FBE000, v35, v36, v37, buf, 0xCu);
      goto LABEL_178;
    }
    goto LABEL_178;
  }
  if ((_BYTE)v71)
  {
    v51 = (char *)__nw_create_backtrace_string();
    v35 = __nwlog_obj();
    v36 = type[0];
    v52 = os_log_type_enabled(v35, type[0]);
    if (!v51)
    {
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        v82 = "nw_protocol_http1_finalize_output_frames";
        v37 = "%{public}s called with null frames, no backtrace";
        goto LABEL_177;
      }
      goto LABEL_178;
    }
    if (v52)
    {
      *(_DWORD *)buf = 136446466;
      v82 = "nw_protocol_http1_finalize_output_frames";
      v83 = 2082;
      v84 = v51;
      v53 = "%{public}s called with null frames, dumping backtrace:%{public}s";
LABEL_171:
      _os_log_impl(&dword_182FBE000, v35, v36, v53, buf, 0x16u);
      goto LABEL_172;
    }
    goto LABEL_172;
  }
  v35 = __nwlog_obj();
  v36 = type[0];
  if (os_log_type_enabled(v35, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    v82 = "nw_protocol_http1_finalize_output_frames";
    v37 = "%{public}s called with null frames, backtrace limit exceeded";
    goto LABEL_177;
  }
LABEL_178:
  if (v34)
    free(v34);
  return 0;
}

BOOL nw_protocol_http1_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2, char a3)
{
  _DWORD *handle;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL8 result;
  int v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  char *v20;
  _BOOL4 v21;
  const char *v22;
  NSObject *v23;
  int v24;
  _BOOL4 v25;
  _BOOL4 v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  _BOOL4 v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_http1_get_http1_protocol";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v14, &type, &v33))
      goto LABEL_75;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v33)
      {
        v15 = __nwlog_obj();
        v16 = type;
        if (!os_log_type_enabled(v15, type))
          goto LABEL_75;
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http1_get_http1_protocol";
        v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_74;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v19 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (!v19)
          goto LABEL_75;
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http1_get_http1_protocol";
        v17 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_74;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v36 = "nw_http1_get_http1_protocol";
        v37 = 2082;
        v38 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_75;
    }
    v15 = __nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type))
      goto LABEL_75;
    *(_DWORD *)buf = 136446210;
    v36 = "nw_http1_get_http1_protocol";
    v17 = "%{public}s called with null protocol";
LABEL_74:
    _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
    goto LABEL_75;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_http1_get_http1_protocol";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v14, &type, &v33))
      goto LABEL_75;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v33)
      {
        v15 = __nwlog_obj();
        v16 = type;
        if (!os_log_type_enabled(v15, type))
          goto LABEL_75;
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http1_get_http1_protocol";
        v17 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_74;
      }
      v20 = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v21 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v21)
          goto LABEL_75;
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http1_get_http1_protocol";
        v17 = "%{public}s called with null handle, no backtrace";
        goto LABEL_74;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v36 = "nw_http1_get_http1_protocol";
        v37 = 2082;
        v38 = v20;
        v22 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_59:
        _os_log_impl(&dword_182FBE000, v15, v16, v22, buf, 0x16u);
      }
LABEL_60:
      free(v20);
      if (!v14)
      {
LABEL_77:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        v36 = "nw_protocol_http1_add_listen_handler";
        v27 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v33 = 0;
        if (!__nwlog_fault(v27, &type, &v33))
          goto LABEL_91;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v28 = gLogObj;
          v29 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_91;
          *(_DWORD *)buf = 136446210;
          v36 = "nw_protocol_http1_add_listen_handler";
          v30 = "%{public}s called with null http1";
        }
        else if (v33)
        {
          v31 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v28 = gLogObj;
          v29 = type;
          v32 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v31)
          {
            if (v32)
            {
              *(_DWORD *)buf = 136446466;
              v36 = "nw_protocol_http1_add_listen_handler";
              v37 = 2082;
              v38 = v31;
              _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v31);
            goto LABEL_91;
          }
          if (!v32)
          {
LABEL_91:
            if (v27)
              free(v27);
            return 0;
          }
          *(_DWORD *)buf = 136446210;
          v36 = "nw_protocol_http1_add_listen_handler";
          v30 = "%{public}s called with null http1, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v28 = gLogObj;
          v29 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_91;
          *(_DWORD *)buf = 136446210;
          v36 = "nw_protocol_http1_add_listen_handler";
          v30 = "%{public}s called with null http1, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
        goto LABEL_91;
      }
LABEL_76:
      free(v14);
      goto LABEL_77;
    }
    v15 = __nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type))
      goto LABEL_75;
    *(_DWORD *)buf = 136446210;
    v36 = "nw_http1_get_http1_protocol";
    v17 = "%{public}s called with null handle";
    goto LABEL_74;
  }
  v7 = handle[6];
  if (v7 == 1)
    goto LABEL_10;
  if (v7 != 2)
  {
    if (v7 != 3)
      goto LABEL_77;
    v8 = *((_QWORD *)handle + 2);
    if (v8)
    {
      handle = (_DWORD *)(v8 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_http1_get_http1_protocol";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v14, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v15 = __nwlog_obj();
        v16 = type;
        if (!os_log_type_enabled(v15, type))
          goto LABEL_75;
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http1_get_http1_protocol";
        v17 = "%{public}s called with null handle->http1_connection";
        goto LABEL_74;
      }
      if (!v33)
      {
        v15 = __nwlog_obj();
        v16 = type;
        if (!os_log_type_enabled(v15, type))
          goto LABEL_75;
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http1_get_http1_protocol";
        v17 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_74;
      }
      v20 = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v25 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v25)
          goto LABEL_75;
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http1_get_http1_protocol";
        v17 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_74;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        v36 = "nw_http1_get_http1_protocol";
        v37 = 2082;
        v38 = v20;
        v22 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
LABEL_75:
    if (!v14)
      goto LABEL_77;
    goto LABEL_76;
  }
  v9 = *((_QWORD *)handle + 1);
  if (!v9)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_http1_get_http1_protocol";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v14, &type, &v33))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_75;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_http1_get_http1_protocol";
      v17 = "%{public}s called with null handle->http1_stream";
      goto LABEL_74;
    }
    if (!v33)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_75;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_http1_get_http1_protocol";
      v17 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_74;
    }
    v20 = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type;
    v26 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v26)
        goto LABEL_75;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_http1_get_http1_protocol";
      v17 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_74;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_http1_get_http1_protocol";
      v37 = 2082;
      v38 = v20;
      v22 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_59;
    }
    goto LABEL_60;
  }
  handle = (_DWORD *)(v9 + 248);
LABEL_10:
  v10 = *(_QWORD *)handle;
  if (!*(_QWORD *)handle)
    goto LABEL_77;
  if (*(_QWORD *)(v10 + 328))
  {
    if ((*(_BYTE *)(v10 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      v13 = *(_DWORD *)(v10 + 372);
      *(_DWORD *)buf = 136446978;
      v36 = "nw_protocol_http1_add_listen_handler";
      v37 = 2082;
      v38 = (char *)(v10 + 74);
      v39 = 2080;
      v40 = " ";
      v41 = 1024;
      v42 = v13;
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> already have a listen handler, ignoring add", buf, 0x26u);
    }
    return 0;
  }
  if ((*(_BYTE *)(v10 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v23 = __nwlog_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        v24 = *(_DWORD *)(v10 + 372);
        *(_DWORD *)buf = 136446978;
        v36 = "nw_protocol_http1_add_listen_handler";
        v37 = 2082;
        v38 = (char *)(v10 + 74);
        v39 = 2080;
        v40 = " ";
        v41 = 1024;
        v42 = v24;
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> added protocol listen handler", buf, 0x26u);
      }
    }
  }
  *(_QWORD *)(v10 + 328) = a2;
  a2->protocol_handler = (nw_protocol *)v10;
  if ((a3 & 1) != 0)
    nw_protocol_remove_instance((uint64_t)a1);
  return 1;
}

uint64_t nw_protocol_http1_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  _DWORD *handle;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  int v23;
  char *backtrace_string;
  _BOOL4 v25;
  char *v26;
  _BOOL4 v27;
  const char *v28;
  _BOOL4 v29;
  _BOOL4 v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *v35;
  _BOOL4 v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  _QWORD v48[3];

  v48[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_get_http1_protocol";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v16, &type, &v37))
      goto LABEL_91;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_91;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      v19 = "%{public}s called with null protocol";
    }
    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v25 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_http1_get_http1_protocol";
          v41 = 2082;
          v42 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_91:
        if (!v16)
          goto LABEL_93;
        goto LABEL_92;
      }
      if (!v25)
        goto LABEL_91;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      v19 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_91;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      v19 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_90;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_get_http1_protocol";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v16, &type, &v37))
      goto LABEL_91;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (!os_log_type_enabled(v17, type))
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_get_http1_protocol";
        v19 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_90;
      }
      v26 = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v27 = os_log_type_enabled(v17, type);
      if (!v26)
      {
        if (!v27)
          goto LABEL_91;
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_get_http1_protocol";
        v19 = "%{public}s called with null handle, no backtrace";
        goto LABEL_90;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446466;
        v40 = "nw_http1_get_http1_protocol";
        v41 = 2082;
        v42 = v26;
        v28 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_75:
        _os_log_impl(&dword_182FBE000, v17, v18, v28, buf, 0x16u);
      }
LABEL_76:
      free(v26);
      if (!v16)
        goto LABEL_93;
LABEL_92:
      free(v16);
      goto LABEL_93;
    }
    v17 = __nwlog_obj();
    v18 = type;
    if (!os_log_type_enabled(v17, type))
      goto LABEL_91;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_get_http1_protocol";
    v19 = "%{public}s called with null handle";
LABEL_90:
    _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
    goto LABEL_91;
  }
  v4 = handle[6];
  if (v4 == 1)
    goto LABEL_10;
  if (v4 != 2)
  {
    if (v4 != 3)
      goto LABEL_93;
    v5 = *((_QWORD *)handle + 2);
    if (v5)
    {
      handle = (_DWORD *)(v5 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_get_http1_protocol";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v16, &type, &v37))
      goto LABEL_91;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_91;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      v19 = "%{public}s called with null handle->http1_connection";
      goto LABEL_90;
    }
    if (!v37)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_91;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      v19 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_90;
    }
    v26 = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v29 = os_log_type_enabled(v17, type);
    if (!v26)
    {
      if (!v29)
        goto LABEL_91;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      v19 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_90;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http1_get_http1_protocol";
      v41 = 2082;
      v42 = v26;
      v28 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    goto LABEL_76;
  }
  v6 = *((_QWORD *)handle + 1);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_get_http1_protocol";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v16, &type, &v37))
      goto LABEL_91;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_91;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      v19 = "%{public}s called with null handle->http1_stream";
      goto LABEL_90;
    }
    if (!v37)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_91;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      v19 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_90;
    }
    v26 = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v30 = os_log_type_enabled(v17, type);
    if (!v26)
    {
      if (!v30)
        goto LABEL_91;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      v19 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_90;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http1_get_http1_protocol";
      v41 = 2082;
      v42 = v26;
      v28 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    goto LABEL_76;
  }
  handle = (_DWORD *)(v6 + 248);
LABEL_10:
  v7 = *(_QWORD *)handle;
  if (*(_QWORD *)handle)
  {
    if ((*(_BYTE *)(v7 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v20 = __nwlog_obj();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          v21 = *(_DWORD *)(v7 + 372);
          *(_DWORD *)buf = 136447234;
          v40 = "nw_protocol_http1_remove_listen_handler";
          v41 = 2082;
          v42 = (char *)(v7 + 74);
          v43 = 2080;
          v44 = " ";
          v45 = 1024;
          v46 = v21;
          v47 = 2048;
          v48[0] = a2;
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called with listen_protocol %p", buf, 0x30u);
        }
      }
    }
    if (*(nw_listen_protocol **)(v7 + 328) == a2)
    {
      *(_QWORD *)(v7 + 328) = 0;
      a2->protocol_handler = 0;
      if ((*(_BYTE *)(v7 + 158) & 1) != 0)
        goto LABEL_18;
    }
    else if ((*(_BYTE *)(v7 + 158) & 1) != 0)
    {
LABEL_18:
      if ((*(_BYTE *)(v7 + 376) & 1) == 0)
      {
        *(_BYTE *)(v7 + 376) |= 8u;
        v8 = *(_QWORD *)(v7 + 208);
        while (v8)
        {
          v9 = v8;
          v8 = *(_QWORD *)(v8 + 592);
          v10 = *(_QWORD *)(v9 + 784);
          if (v10)
          {
            if (*(_QWORD *)v10)
            {
              dispatch_source_set_timer(*(dispatch_source_t *)v10, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
            }
            else
            {
              *(_OWORD *)(v10 + 32) = xmmword_183C6F190;
              if (*(_BYTE *)(v10 + 48))
              {
                if (*(_BYTE *)(v10 + 49))
                  nw_queue_source_run_timer(v10, (uint64_t)a2);
              }
            }
          }
          else if ((*(_BYTE *)(v9 + 158) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v11 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              v12 = *(_QWORD *)(v9 + 488);
              if (v12)
                LODWORD(v12) = *(_DWORD *)(v12 + 424);
              v13 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
              v14 = *(_DWORD *)(v9 + 860);
              *(_DWORD *)buf = 136447490;
              v40 = "nw_protocol_http1_remove_listen_handler";
              v41 = 2082;
              v42 = (char *)(v9 + 74);
              v43 = 2080;
              v44 = " ";
              v45 = 1024;
              v46 = v13;
              v47 = 1024;
              LODWORD(v48[0]) = v14;
              WORD2(v48[0]) = 1024;
              *(_DWORD *)((char *)v48 + 6) = v12;
              _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> no destroy timer on idle http1 connection when listen handler removed", buf, 0x32u);
            }
          }
        }
      }
      return 1;
    }
    if (gLogDatapath)
    {
      v22 = __nwlog_obj();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        v23 = *(_DWORD *)(v7 + 372);
        *(_DWORD *)buf = 136446978;
        v40 = "nw_protocol_http1_remove_listen_handler";
        v41 = 2082;
        v42 = (char *)(v7 + 74);
        v43 = 2080;
        v44 = " ";
        v45 = 1024;
        v46 = v23;
        _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> removed protocol listen handler", buf, 0x26u);
      }
    }
    goto LABEL_18;
  }
LABEL_93:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_protocol_http1_remove_listen_handler";
  v31 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v31, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v32 = gLogObj;
      v33 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_http1_remove_listen_handler";
        v34 = "%{public}s called with null http1";
LABEL_106:
        _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
      }
    }
    else if (v37)
    {
      v35 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v32 = gLogObj;
      v33 = type;
      v36 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_protocol_http1_remove_listen_handler";
          v41 = 2082;
          v42 = v35;
          _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        goto LABEL_107;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_http1_remove_listen_handler";
        v34 = "%{public}s called with null http1, no backtrace";
        goto LABEL_106;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v32 = gLogObj;
      v33 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_http1_remove_listen_handler";
        v34 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_106;
      }
    }
  }
LABEL_107:
  if (v31)
    free(v31);
  return 0;
}

void nw_protocol_http1_get_parameters(nw_protocol *a1)
{
  _DWORD *handle;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char *v12;
  _BOOL4 v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  _BOOL4 v19;
  _BOOL4 v20;
  char *v21;
  _BOOL4 v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *v27;
  _BOOL4 v28;
  int v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *v34;
  _BOOL4 v35;
  const char *v36;
  NSObject *v37;
  os_log_type_t v38;
  const char *v39;
  const char *v40;
  char v42;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_http1_protocol";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v6, &type, &v42))
      goto LABEL_81;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null protocol";
    }
    else if (v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v7 = __nwlog_obj();
      v8 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_http1_get_http1_protocol";
          v46 = 2082;
          v47 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_81:
        if (!v6)
          goto LABEL_83;
        goto LABEL_82;
      }
      if (!v11)
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_80;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_http1_protocol";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v6, &type, &v42))
      goto LABEL_81;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v42)
      {
        v7 = __nwlog_obj();
        v8 = type;
        if (!os_log_type_enabled(v7, type))
          goto LABEL_81;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_http1_protocol";
        v9 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_80;
      }
      v12 = (char *)__nw_create_backtrace_string();
      v7 = __nwlog_obj();
      v8 = type;
      v13 = os_log_type_enabled(v7, type);
      if (!v12)
      {
        if (!v13)
          goto LABEL_81;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_http1_protocol";
        v9 = "%{public}s called with null handle, no backtrace";
        goto LABEL_80;
      }
      if (!v13)
        goto LABEL_35;
      *(_DWORD *)buf = 136446466;
      v45 = "nw_http1_get_http1_protocol";
      v46 = 2082;
      v47 = v12;
      v14 = "%{public}s called with null handle, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
    v7 = __nwlog_obj();
    v8 = type;
    if (!os_log_type_enabled(v7, type))
      goto LABEL_81;
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_http1_protocol";
    v9 = "%{public}s called with null handle";
LABEL_80:
    _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
    goto LABEL_81;
  }
  v2 = handle[6];
  v3 = a1->handle;
  if (v2 == 1)
    goto LABEL_10;
  if (v2 != 2)
  {
    if (v2 != 3)
      goto LABEL_83;
    v4 = *((_QWORD *)handle + 2);
    if (v4)
    {
      v3 = (_QWORD *)(v4 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_http1_protocol";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v6, &type, &v42))
      goto LABEL_81;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null handle->http1_connection";
      goto LABEL_80;
    }
    if (!v42)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_80;
    }
    v12 = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v20 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v20)
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_80;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_http1_get_http1_protocol";
      v46 = 2082;
      v47 = v12;
      v14 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
LABEL_35:
    free(v12);
    if (!v6)
      goto LABEL_83;
LABEL_82:
    free(v6);
    goto LABEL_83;
  }
  v5 = *((_QWORD *)handle + 1);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_http1_protocol";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v6, &type, &v42))
      goto LABEL_81;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null handle->http1_stream";
      goto LABEL_80;
    }
    if (!v42)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_80;
    }
    v12 = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v19 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v19)
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_80;
    }
    if (!v19)
      goto LABEL_35;
    *(_DWORD *)buf = 136446466;
    v45 = "nw_http1_get_http1_protocol";
    v46 = 2082;
    v47 = v12;
    v14 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
LABEL_34:
    _os_log_impl(&dword_182FBE000, v7, v8, v14, buf, 0x16u);
    goto LABEL_35;
  }
  v3 = (_QWORD *)(v5 + 248);
LABEL_10:
  if (*v3)
  {
    if (v2 == 2)
      goto LABEL_14;
    if (v2 != 3)
      return;
    if (*((_QWORD *)handle + 2))
    {
LABEL_14:
      if (v2 != 2)
        return;
      goto LABEL_107;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_stream_for_protocol";
    v15 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v15, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v16 = __nwlog_obj();
        v17 = type;
        if (!os_log_type_enabled(v16, type))
          goto LABEL_103;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_stream_for_protocol";
        v18 = "%{public}s called with null handle->http1_connection";
LABEL_102:
        _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0xCu);
        goto LABEL_103;
      }
      if (!v42)
      {
        v16 = __nwlog_obj();
        v17 = type;
        if (!os_log_type_enabled(v16, type))
          goto LABEL_103;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_stream_for_protocol";
        v18 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_102;
      }
      v21 = (char *)__nw_create_backtrace_string();
      v16 = __nwlog_obj();
      v17 = type;
      v22 = os_log_type_enabled(v16, type);
      if (!v21)
      {
        if (!v22)
          goto LABEL_103;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_stream_for_protocol";
        v18 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_102;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v45 = "nw_http1_get_stream_for_protocol";
        v46 = 2082;
        v47 = v21;
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v21);
    }
LABEL_103:
    if (v15)
      free(v15);
    handle = a1->handle;
    if (handle)
    {
      v29 = handle[6];
      if (v29 != 2)
        return;
LABEL_107:
      if (*((_QWORD *)handle + 1))
        return;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_connection_for_protocol";
      v30 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v42 = 0;
      if (!__nwlog_fault(v30, &type, &v42))
        goto LABEL_122;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (!os_log_type_enabled(v31, type))
          goto LABEL_122;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_connection_for_protocol";
        v33 = "%{public}s called with null handle->http1_stream";
      }
      else if (v42)
      {
        v34 = (char *)__nw_create_backtrace_string();
        v31 = __nwlog_obj();
        v32 = type;
        v35 = os_log_type_enabled(v31, type);
        if (v34)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            v45 = "nw_http1_get_connection_for_protocol";
            v46 = 2082;
            v47 = v34;
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v34);
          goto LABEL_122;
        }
        if (!v35)
        {
LABEL_122:
          if (v30)
            free(v30);
          return;
        }
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_connection_for_protocol";
        v33 = "%{public}s called with null handle->http1_stream, no backtrace";
      }
      else
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (!os_log_type_enabled(v31, type))
          goto LABEL_122;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_connection_for_protocol";
        v33 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0xCu);
      goto LABEL_122;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_connection_for_protocol";
    v36 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    __nwlog_fault(v36, &type, &v42);
    if (type == OS_LOG_TYPE_FAULT)
    {
      v37 = __nwlog_obj();
      v38 = type;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_connection_for_protocol";
      v39 = "%{public}s called with null handle";
    }
    else
    {
      if (v42)
      {
        v40 = __nw_create_backtrace_string();
        v37 = __nwlog_obj();
        v38 = type;
        if (!v40)
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_http1_get_connection_for_protocol";
          v39 = "%{public}s called with null handle, no backtrace";
          goto LABEL_132;
        }
        *(_DWORD *)buf = 136446466;
        v45 = "nw_http1_get_connection_for_protocol";
        v46 = 2082;
        v47 = (void *)v40;
        _os_log_impl(&dword_182FBE000, v37, type, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
        __break(1u);
      }
      v37 = __nwlog_obj();
      v38 = type;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_connection_for_protocol";
      v39 = "%{public}s called with null handle, backtrace limit exceeded";
    }
LABEL_132:
    _os_log_impl(&dword_182FBE000, v37, v38, v39, buf, 0xCu);
    __break(1u);
    return;
  }
LABEL_83:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v45 = "nw_protocol_http1_get_parameters";
  v23 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v42 = 0;
  if (!__nwlog_fault(v23, &type, &v42))
    goto LABEL_97;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v24 = gLogObj;
    v25 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_97;
    *(_DWORD *)buf = 136446210;
    v45 = "nw_protocol_http1_get_parameters";
    v26 = "%{public}s called with null http1";
    goto LABEL_96;
  }
  if (!v42)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v24 = gLogObj;
    v25 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_97;
    *(_DWORD *)buf = 136446210;
    v45 = "nw_protocol_http1_get_parameters";
    v26 = "%{public}s called with null http1, backtrace limit exceeded";
    goto LABEL_96;
  }
  v27 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v24 = gLogObj;
  v25 = type;
  v28 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (v27)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_protocol_http1_get_parameters";
      v46 = 2082;
      v47 = v27;
      _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v27);
    goto LABEL_97;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446210;
    v45 = "nw_protocol_http1_get_parameters";
    v26 = "%{public}s called with null http1, no backtrace";
LABEL_96:
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
  }
LABEL_97:
  if (v23)
    free(v23);
}

void nw_protocol_http1_get_remote_endpoint(nw_protocol *a1)
{
  _DWORD *handle;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char *v12;
  _BOOL4 v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  _BOOL4 v19;
  _BOOL4 v20;
  char *v21;
  _BOOL4 v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *v27;
  _BOOL4 v28;
  int v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *v34;
  _BOOL4 v35;
  const char *v36;
  NSObject *v37;
  os_log_type_t v38;
  const char *v39;
  const char *v40;
  char v42;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_http1_protocol";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v6, &type, &v42))
      goto LABEL_81;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null protocol";
    }
    else if (v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v7 = __nwlog_obj();
      v8 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_http1_get_http1_protocol";
          v46 = 2082;
          v47 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_81:
        if (!v6)
          goto LABEL_83;
        goto LABEL_82;
      }
      if (!v11)
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_80;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_http1_protocol";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v6, &type, &v42))
      goto LABEL_81;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v42)
      {
        v7 = __nwlog_obj();
        v8 = type;
        if (!os_log_type_enabled(v7, type))
          goto LABEL_81;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_http1_protocol";
        v9 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_80;
      }
      v12 = (char *)__nw_create_backtrace_string();
      v7 = __nwlog_obj();
      v8 = type;
      v13 = os_log_type_enabled(v7, type);
      if (!v12)
      {
        if (!v13)
          goto LABEL_81;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_http1_protocol";
        v9 = "%{public}s called with null handle, no backtrace";
        goto LABEL_80;
      }
      if (!v13)
        goto LABEL_35;
      *(_DWORD *)buf = 136446466;
      v45 = "nw_http1_get_http1_protocol";
      v46 = 2082;
      v47 = v12;
      v14 = "%{public}s called with null handle, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
    v7 = __nwlog_obj();
    v8 = type;
    if (!os_log_type_enabled(v7, type))
      goto LABEL_81;
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_http1_protocol";
    v9 = "%{public}s called with null handle";
LABEL_80:
    _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
    goto LABEL_81;
  }
  v2 = handle[6];
  v3 = a1->handle;
  if (v2 == 1)
    goto LABEL_10;
  if (v2 != 2)
  {
    if (v2 != 3)
      goto LABEL_83;
    v4 = *((_QWORD *)handle + 2);
    if (v4)
    {
      v3 = (_QWORD *)(v4 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_http1_protocol";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v6, &type, &v42))
      goto LABEL_81;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null handle->http1_connection";
      goto LABEL_80;
    }
    if (!v42)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_80;
    }
    v12 = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v20 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v20)
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_80;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_http1_get_http1_protocol";
      v46 = 2082;
      v47 = v12;
      v14 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
LABEL_35:
    free(v12);
    if (!v6)
      goto LABEL_83;
LABEL_82:
    free(v6);
    goto LABEL_83;
  }
  v5 = *((_QWORD *)handle + 1);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_http1_protocol";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v6, &type, &v42))
      goto LABEL_81;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null handle->http1_stream";
      goto LABEL_80;
    }
    if (!v42)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_80;
    }
    v12 = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v19 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v19)
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_http1_protocol";
      v9 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_80;
    }
    if (!v19)
      goto LABEL_35;
    *(_DWORD *)buf = 136446466;
    v45 = "nw_http1_get_http1_protocol";
    v46 = 2082;
    v47 = v12;
    v14 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
LABEL_34:
    _os_log_impl(&dword_182FBE000, v7, v8, v14, buf, 0x16u);
    goto LABEL_35;
  }
  v3 = (_QWORD *)(v5 + 248);
LABEL_10:
  if (*v3)
  {
    if (v2 == 2)
      goto LABEL_14;
    if (v2 != 3)
      return;
    if (*((_QWORD *)handle + 2))
    {
LABEL_14:
      if (v2 != 2)
        return;
      goto LABEL_107;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_stream_for_protocol";
    v15 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v15, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v16 = __nwlog_obj();
        v17 = type;
        if (!os_log_type_enabled(v16, type))
          goto LABEL_103;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_stream_for_protocol";
        v18 = "%{public}s called with null handle->http1_connection";
LABEL_102:
        _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0xCu);
        goto LABEL_103;
      }
      if (!v42)
      {
        v16 = __nwlog_obj();
        v17 = type;
        if (!os_log_type_enabled(v16, type))
          goto LABEL_103;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_stream_for_protocol";
        v18 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_102;
      }
      v21 = (char *)__nw_create_backtrace_string();
      v16 = __nwlog_obj();
      v17 = type;
      v22 = os_log_type_enabled(v16, type);
      if (!v21)
      {
        if (!v22)
          goto LABEL_103;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_stream_for_protocol";
        v18 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_102;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v45 = "nw_http1_get_stream_for_protocol";
        v46 = 2082;
        v47 = v21;
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v21);
    }
LABEL_103:
    if (v15)
      free(v15);
    handle = a1->handle;
    if (handle)
    {
      v29 = handle[6];
      if (v29 != 2)
        return;
LABEL_107:
      if (*((_QWORD *)handle + 1))
        return;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_connection_for_protocol";
      v30 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v42 = 0;
      if (!__nwlog_fault(v30, &type, &v42))
        goto LABEL_122;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (!os_log_type_enabled(v31, type))
          goto LABEL_122;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_connection_for_protocol";
        v33 = "%{public}s called with null handle->http1_stream";
      }
      else if (v42)
      {
        v34 = (char *)__nw_create_backtrace_string();
        v31 = __nwlog_obj();
        v32 = type;
        v35 = os_log_type_enabled(v31, type);
        if (v34)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            v45 = "nw_http1_get_connection_for_protocol";
            v46 = 2082;
            v47 = v34;
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v34);
          goto LABEL_122;
        }
        if (!v35)
        {
LABEL_122:
          if (v30)
            free(v30);
          return;
        }
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_connection_for_protocol";
        v33 = "%{public}s called with null handle->http1_stream, no backtrace";
      }
      else
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (!os_log_type_enabled(v31, type))
          goto LABEL_122;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http1_get_connection_for_protocol";
        v33 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0xCu);
      goto LABEL_122;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http1_get_connection_for_protocol";
    v36 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    __nwlog_fault(v36, &type, &v42);
    if (type == OS_LOG_TYPE_FAULT)
    {
      v37 = __nwlog_obj();
      v38 = type;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_connection_for_protocol";
      v39 = "%{public}s called with null handle";
    }
    else
    {
      if (v42)
      {
        v40 = __nw_create_backtrace_string();
        v37 = __nwlog_obj();
        v38 = type;
        if (!v40)
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_http1_get_connection_for_protocol";
          v39 = "%{public}s called with null handle, no backtrace";
          goto LABEL_132;
        }
        *(_DWORD *)buf = 136446466;
        v45 = "nw_http1_get_connection_for_protocol";
        v46 = 2082;
        v47 = (void *)v40;
        _os_log_impl(&dword_182FBE000, v37, type, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
        __break(1u);
      }
      v37 = __nwlog_obj();
      v38 = type;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http1_get_connection_for_protocol";
      v39 = "%{public}s called with null handle, backtrace limit exceeded";
    }
LABEL_132:
    _os_log_impl(&dword_182FBE000, v37, v38, v39, buf, 0xCu);
    __break(1u);
    return;
  }
LABEL_83:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v45 = "nw_protocol_http1_get_remote_endpoint";
  v23 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v42 = 0;
  if (!__nwlog_fault(v23, &type, &v42))
    goto LABEL_97;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v24 = gLogObj;
    v25 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_97;
    *(_DWORD *)buf = 136446210;
    v45 = "nw_protocol_http1_get_remote_endpoint";
    v26 = "%{public}s called with null http1";
    goto LABEL_96;
  }
  if (!v42)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v24 = gLogObj;
    v25 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_97;
    *(_DWORD *)buf = 136446210;
    v45 = "nw_protocol_http1_get_remote_endpoint";
    v26 = "%{public}s called with null http1, backtrace limit exceeded";
    goto LABEL_96;
  }
  v27 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v24 = gLogObj;
  v25 = type;
  v28 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (v27)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_protocol_http1_get_remote_endpoint";
      v46 = 2082;
      v47 = v27;
      _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v27);
    goto LABEL_97;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446210;
    v45 = "nw_protocol_http1_get_remote_endpoint";
    v26 = "%{public}s called with null http1, no backtrace";
LABEL_96:
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
  }
LABEL_97:
  if (v23)
    free(v23);
}

void nw_protocol_http1_stream_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char *v14;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  _BOOL4 v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  char *v23;
  _BOOL4 v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http1_get_http1_protocol";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v8, &type, &v25))
      goto LABEL_66;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_get_http1_protocol";
      v11 = "%{public}s called with null protocol";
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http1_get_http1_protocol";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_66:
        if (!v8)
          goto LABEL_68;
        goto LABEL_67;
      }
      if (!v13)
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_get_http1_protocol";
      v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_get_http1_protocol";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_65;
  }
  v3 = *(_QWORD *)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http1_get_http1_protocol";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v8, &type, &v25))
      goto LABEL_66;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_66;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http1_get_http1_protocol";
        v11 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_65;
      }
      v14 = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v15)
          goto LABEL_66;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http1_get_http1_protocol";
        v11 = "%{public}s called with null handle, no backtrace";
        goto LABEL_65;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_http1_get_http1_protocol";
        v29 = 2082;
        v30 = v14;
        v16 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_50:
        _os_log_impl(&dword_182FBE000, v9, v10, v16, buf, 0x16u);
      }
LABEL_51:
      free(v14);
      if (!v8)
        goto LABEL_68;
LABEL_67:
      free(v8);
      goto LABEL_68;
    }
    v9 = __nwlog_obj();
    v10 = type;
    if (!os_log_type_enabled(v9, type))
      goto LABEL_66;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http1_get_http1_protocol";
    v11 = "%{public}s called with null handle";
LABEL_65:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
    goto LABEL_66;
  }
  v4 = *(_DWORD *)(v3 + 24);
  if (v4 == 1)
    goto LABEL_10;
  if (v4 != 2)
  {
    if (v4 != 3)
      goto LABEL_68;
    v5 = *(_QWORD *)(v3 + 16);
    if (v5)
    {
      v3 = v5 + 480;
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http1_get_http1_protocol";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v8, &type, &v25))
      goto LABEL_66;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_get_http1_protocol";
      v11 = "%{public}s called with null handle->http1_connection";
      goto LABEL_65;
    }
    if (!v25)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_get_http1_protocol";
      v11 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_65;
    }
    v14 = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v17 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v17)
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_get_http1_protocol";
      v11 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_65;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_http1_get_http1_protocol";
      v29 = 2082;
      v30 = v14;
      v16 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  v6 = *(_QWORD *)(v3 + 8);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http1_get_http1_protocol";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v8, &type, &v25))
      goto LABEL_66;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_get_http1_protocol";
      v11 = "%{public}s called with null handle->http1_stream";
      goto LABEL_65;
    }
    if (!v25)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_get_http1_protocol";
      v11 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_65;
    }
    v14 = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v18 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v18)
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_get_http1_protocol";
      v11 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_65;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_http1_get_http1_protocol";
      v29 = 2082;
      v30 = v14;
      v16 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  v3 = v6 + 248;
LABEL_10:
  if (*(_QWORD *)v3)
  {
    if (a3)
    {
      v7 = a3[1] & 0xFFFFFFF8;
      *a3 = -1;
      a3[1] = v7;
    }
    return;
  }
LABEL_68:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_protocol_http1_stream_get_message_properties";
  v19 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v19, &type, &v25))
    goto LABEL_82;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = gLogObj;
    v21 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_82;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_http1_stream_get_message_properties";
    v22 = "%{public}s called with null http1";
    goto LABEL_81;
  }
  if (!v25)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = gLogObj;
    v21 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_82;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_http1_stream_get_message_properties";
    v22 = "%{public}s called with null http1, backtrace limit exceeded";
    goto LABEL_81;
  }
  v23 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v20 = gLogObj;
  v21 = type;
  v24 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (v23)
  {
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_protocol_http1_stream_get_message_properties";
      v29 = 2082;
      v30 = v23;
      _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v23);
    goto LABEL_82;
  }
  if (v24)
  {
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_http1_stream_get_message_properties";
    v22 = "%{public}s called with null http1, no backtrace";
LABEL_81:
    _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
  }
LABEL_82:
  if (v19)
    free(v19);
}

void nw_protocol_http1_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  char *handle;
  nw_protocol *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint32_t v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int16 *v26;
  int v27;
  int v28;
  int v29;
  int input_frames;
  _DWORD *v31;
  int v32;
  _QWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  NSObject *v37;
  int v38;
  int v39;
  _DWORD *v40;
  int v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  NSObject *v47;
  int v48;
  int v49;
  char *v50;
  uint64_t v51;
  os_log_type_t v52;
  NSObject *v53;
  os_log_type_t v54;
  const char *v55;
  char *v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  uint64_t v60;
  os_log_type_t v61;
  NSObject *v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  uint64_t v66;
  int v67;
  int v68;
  const char *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  _DWORD *v82;
  _DWORD *v83;
  char v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  NSObject *v90;
  uint64_t v91;
  int v92;
  int v93;
  const char *v94;
  NSObject *v95;
  _BOOL4 v96;
  int v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  _BOOL4 v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  unsigned __int16 *v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  int v122;
  int v123;
  char *v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  NSObject *v132;
  os_log_type_t v133;
  uint64_t v134;
  const char *v135;
  NSObject *v136;
  uint64_t v137;
  int v138;
  int v139;
  NSObject *v140;
  uint64_t v141;
  int v142;
  int v143;
  char *v144;
  NSObject *v145;
  os_log_type_t v146;
  const char *v147;
  char *v148;
  NSObject *v149;
  os_log_type_t v150;
  const char *v151;
  char *backtrace_string;
  _BOOL4 v153;
  char *v154;
  _BOOL4 v155;
  const char *v156;
  NSObject *v157;
  uint64_t v158;
  int v159;
  int v160;
  char *v161;
  _BOOL4 v162;
  const char *v163;
  char *v164;
  NSObject *v165;
  os_log_type_t v166;
  _BOOL4 v167;
  uint64_t v168;
  char *v169;
  NSObject *v170;
  os_log_type_t v171;
  const char *v172;
  _BOOL4 v173;
  _BOOL4 v174;
  char *v175;
  _BOOL4 v176;
  uint64_t v177;
  NSObject *v178;
  os_log_type_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  NSObject *v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  char *v191;
  _BOOL4 v192;
  NSObject *v193;
  _BOOL4 v194;
  char *v195;
  NSObject *v196;
  uint64_t v197;
  int v198;
  int v199;
  char *v200;
  NSObject *v201;
  os_log_type_t v202;
  const char *v203;
  NSObject *v204;
  uint64_t v205;
  int v206;
  int v207;
  char *v208;
  NSObject *v209;
  os_log_type_t v210;
  const char *v211;
  char *v212;
  _BOOL4 v213;
  NSObject *v214;
  uint64_t v215;
  int v216;
  int v217;
  int v218;
  char *v219;
  _BOOL4 v220;
  char *v221;
  _BOOL4 v222;
  const char *v223;
  _BOOL4 v224;
  uint8_t *v225;
  NSObject *v226;
  void *v227;
  nw_protocol *v228;
  int v229;
  _WORD *v230;
  _DWORD *v231;
  _QWORD *v232;
  char v233;
  os_log_type_t type;
  _BYTE buf[44];
  _BYTE v236[18];
  _BYTE v237[22];
  uint64_t v238;

  v238 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v144 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    LOBYTE(v231) = 0;
    if (!__nwlog_fault(v144, v237, &v231))
      goto LABEL_333;
    if (v237[0] != 17)
    {
      if (!(_BYTE)v231)
      {
        v145 = __nwlog_obj();
        v146 = v237[0];
        if (!os_log_type_enabled(v145, (os_log_type_t)v237[0]))
          goto LABEL_333;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v147 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_332;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v145 = __nwlog_obj();
      v146 = v237[0];
      v153 = os_log_type_enabled(v145, (os_log_type_t)v237[0]);
      if (!backtrace_string)
      {
        if (!v153)
          goto LABEL_333;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v147 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_332;
      }
      if (v153)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v145, v146, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_333;
    }
    v145 = __nwlog_obj();
    v146 = v237[0];
    if (!os_log_type_enabled(v145, (os_log_type_t)v237[0]))
      goto LABEL_333;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v147 = "%{public}s called with null protocol";
    goto LABEL_332;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v144 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    LOBYTE(v231) = 0;
    if (!__nwlog_fault(v144, v237, &v231))
      goto LABEL_333;
    if (v237[0] != 17)
    {
      if (!(_BYTE)v231)
      {
        v145 = __nwlog_obj();
        v146 = v237[0];
        if (!os_log_type_enabled(v145, (os_log_type_t)v237[0]))
          goto LABEL_333;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v147 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_332;
      }
      v154 = (char *)__nw_create_backtrace_string();
      v145 = __nwlog_obj();
      v146 = v237[0];
      v155 = os_log_type_enabled(v145, (os_log_type_t)v237[0]);
      if (!v154)
      {
        if (!v155)
          goto LABEL_333;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v147 = "%{public}s called with null handle, no backtrace";
        goto LABEL_332;
      }
      if (!v155)
        goto LABEL_247;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v154;
      v156 = "%{public}s called with null handle, dumping backtrace:%{public}s";
      goto LABEL_246;
    }
    v145 = __nwlog_obj();
    v146 = v237[0];
    if (!os_log_type_enabled(v145, (os_log_type_t)v237[0]))
      goto LABEL_333;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v147 = "%{public}s called with null handle";
LABEL_332:
    _os_log_impl(&dword_182FBE000, v145, v146, v147, buf, 0xCu);
    goto LABEL_333;
  }
  v5 = a2;
  v6 = *((_DWORD *)handle + 6);
  v7 = a1->handle;
  if (v6 == 1)
    goto LABEL_10;
  if (v6 != 2)
  {
    if (v6 != 3)
      goto LABEL_335;
    v8 = *((_QWORD *)handle + 2);
    if (v8)
    {
      v7 = (_QWORD *)(v8 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v144 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    LOBYTE(v231) = 0;
    if (__nwlog_fault(v144, v237, &v231))
    {
      if (v237[0] == 17)
      {
        v145 = __nwlog_obj();
        v146 = v237[0];
        if (!os_log_type_enabled(v145, (os_log_type_t)v237[0]))
          goto LABEL_333;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v147 = "%{public}s called with null handle->http1_connection";
        goto LABEL_332;
      }
      if (!(_BYTE)v231)
      {
        v145 = __nwlog_obj();
        v146 = v237[0];
        if (!os_log_type_enabled(v145, (os_log_type_t)v237[0]))
          goto LABEL_333;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v147 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_332;
      }
      v154 = (char *)__nw_create_backtrace_string();
      v145 = __nwlog_obj();
      v146 = v237[0];
      v174 = os_log_type_enabled(v145, (os_log_type_t)v237[0]);
      if (!v154)
      {
        if (!v174)
          goto LABEL_333;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v147 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_332;
      }
      if (v174)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v154;
        v156 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_246;
      }
LABEL_247:
      free(v154);
      if (!v144)
      {
LABEL_335:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
        v148 = (char *)_os_log_send_and_compose_impl();
        v237[0] = 16;
        LOBYTE(v231) = 0;
        if (!__nwlog_fault(v148, v237, &v231))
          goto LABEL_371;
        if (v237[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v149 = gLogObj;
          v150 = v237[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v237[0]))
            goto LABEL_371;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
          v151 = "%{public}s called with null http1";
        }
        else if ((_BYTE)v231)
        {
          v191 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v149 = gLogObj;
          v150 = v237[0];
          v192 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v237[0]);
          if (v191)
          {
            if (v192)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v191;
              _os_log_impl(&dword_182FBE000, v149, v150, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v191);
LABEL_371:
            if (!v148)
              return;
            goto LABEL_372;
          }
          if (!v192)
            goto LABEL_371;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
          v151 = "%{public}s called with null http1, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v149 = gLogObj;
          v150 = v237[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v237[0]))
            goto LABEL_371;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
          v151 = "%{public}s called with null http1, backtrace limit exceeded";
        }
        goto LABEL_370;
      }
LABEL_334:
      free(v144);
      goto LABEL_335;
    }
LABEL_333:
    if (!v144)
      goto LABEL_335;
    goto LABEL_334;
  }
  v9 = *((_QWORD *)handle + 1);
  if (!v9)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v144 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    LOBYTE(v231) = 0;
    if (!__nwlog_fault(v144, v237, &v231))
      goto LABEL_333;
    if (v237[0] == 17)
    {
      v145 = __nwlog_obj();
      v146 = v237[0];
      if (!os_log_type_enabled(v145, (os_log_type_t)v237[0]))
        goto LABEL_333;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v147 = "%{public}s called with null handle->http1_stream";
      goto LABEL_332;
    }
    if (!(_BYTE)v231)
    {
      v145 = __nwlog_obj();
      v146 = v237[0];
      if (!os_log_type_enabled(v145, (os_log_type_t)v237[0]))
        goto LABEL_333;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v147 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_332;
    }
    v154 = (char *)__nw_create_backtrace_string();
    v145 = __nwlog_obj();
    v146 = v237[0];
    v173 = os_log_type_enabled(v145, (os_log_type_t)v237[0]);
    if (!v154)
    {
      if (!v173)
        goto LABEL_333;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v147 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_332;
    }
    if (!v173)
      goto LABEL_247;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v154;
    v156 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
LABEL_246:
    _os_log_impl(&dword_182FBE000, v145, v146, v156, buf, 0x16u);
    goto LABEL_247;
  }
  v7 = (_QWORD *)(v9 + 248);
LABEL_10:
  if (!*v7)
    goto LABEL_335;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
    v148 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    LOBYTE(v231) = 0;
    if (!__nwlog_fault(v148, v237, &v231))
      goto LABEL_371;
    if (v237[0] == 17)
    {
      v149 = __nwlog_obj();
      v150 = v237[0];
      if (!os_log_type_enabled(v149, (os_log_type_t)v237[0]))
        goto LABEL_371;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
      v151 = "%{public}s called with null other_protocol";
    }
    else if ((_BYTE)v231)
    {
      v161 = (char *)__nw_create_backtrace_string();
      v149 = __nwlog_obj();
      v150 = v237[0];
      v162 = os_log_type_enabled(v149, (os_log_type_t)v237[0]);
      if (v161)
      {
        if (!v162)
          goto LABEL_364;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v161;
        v163 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_363;
      }
      if (!v162)
        goto LABEL_371;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
      v151 = "%{public}s called with null other_protocol, no backtrace";
    }
    else
    {
      v149 = __nwlog_obj();
      v150 = v237[0];
      if (!os_log_type_enabled(v149, (os_log_type_t)v237[0]))
        goto LABEL_371;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
      v151 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }
LABEL_370:
    _os_log_impl(&dword_182FBE000, v149, v150, v151, buf, 0xCu);
    goto LABEL_371;
  }
  if (v6 == 2)
  {
    v11 = *((_QWORD *)handle + 1);
    if (v11)
    {
      v10 = (uint64_t *)(v11 + 256);
      goto LABEL_17;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
    v169 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    LOBYTE(v231) = 0;
    if (__nwlog_fault(v169, v237, &v231))
    {
      if (v237[0] == 17)
      {
        v170 = __nwlog_obj();
        v171 = v237[0];
        if (!os_log_type_enabled(v170, (os_log_type_t)v237[0]))
          goto LABEL_353;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v172 = "%{public}s called with null handle->http1_stream";
        goto LABEL_352;
      }
      if (!(_BYTE)v231)
      {
        v170 = __nwlog_obj();
        v171 = v237[0];
        if (!os_log_type_enabled(v170, (os_log_type_t)v237[0]))
          goto LABEL_353;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v172 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
        goto LABEL_352;
      }
      v175 = (char *)__nw_create_backtrace_string();
      v170 = __nwlog_obj();
      v171 = v237[0];
      v176 = os_log_type_enabled(v170, (os_log_type_t)v237[0]);
      if (v175)
      {
        if (v176)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v175;
          _os_log_impl(&dword_182FBE000, v170, v171, "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v175);
        goto LABEL_353;
      }
      if (v176)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v172 = "%{public}s called with null handle->http1_stream, no backtrace";
LABEL_352:
        _os_log_impl(&dword_182FBE000, v170, v171, v172, buf, 0xCu);
      }
    }
LABEL_353:
    if (v169)
      free(v169);
    goto LABEL_355;
  }
  if (v6 != 3)
  {
LABEL_355:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
    v148 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    LOBYTE(v231) = 0;
    if (!__nwlog_fault(v148, v237, &v231))
      goto LABEL_371;
    if (v237[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v149 = gLogObj;
      v150 = v237[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v237[0]))
        goto LABEL_371;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
      v151 = "%{public}s called with null http1_connection";
      goto LABEL_370;
    }
    if (!(_BYTE)v231)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v149 = gLogObj;
      v150 = v237[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v237[0]))
        goto LABEL_371;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
      v151 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_370;
    }
    v161 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v149 = gLogObj;
    v150 = v237[0];
    v194 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v237[0]);
    if (!v161)
    {
      if (!v194)
        goto LABEL_371;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
      v151 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_370;
    }
    if (!v194)
    {
LABEL_364:
      free(v161);
      if (!v148)
        return;
LABEL_372:
      free(v148);
      return;
    }
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v161;
    v163 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_363:
    _os_log_impl(&dword_182FBE000, v149, v150, v163, buf, 0x16u);
    goto LABEL_364;
  }
  v10 = (uint64_t *)(handle + 16);
LABEL_17:
  v12 = *v10;
  if (!*v10)
    goto LABEL_355;
  if ((*(_BYTE *)(v12 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v157 = __nwlog_obj();
      if (os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
      {
        v158 = *(_QWORD *)(v12 + 488);
        v159 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
        v160 = *(_DWORD *)(v12 + 860);
        if (v158)
          LODWORD(v158) = *(_DWORD *)(v158 + 424);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v159;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v160;
        *(_WORD *)v236 = 1024;
        *(_DWORD *)&v236[2] = v158;
        *(_WORD *)&v236[6] = 1024;
        *(_DWORD *)&v236[8] = a3;
        _os_log_impl(&dword_182FBE000, v157, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called with error %d", buf, 0x38u);
      }
    }
  }
  if (!a3)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0)
      return;
    if (!gLogDatapath)
      return;
    v22 = __nwlog_obj();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      return;
    v23 = *(_QWORD *)(v12 + 488);
    v24 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
    v25 = *(_DWORD *)(v12 + 860);
    if (v23)
      LODWORD(v23) = *(_DWORD *)(v23 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v24;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v25;
    *(_WORD *)v236 = 1024;
    *(_DWORD *)&v236[2] = v23;
    v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> suppressing error 0";
LABEL_119:
    v19 = v22;
    v20 = OS_LOG_TYPE_DEBUG;
    v21 = 50;
LABEL_27:
    _os_log_impl(&dword_182FBE000, v19, v20, v18, buf, v21);
    return;
  }
  if (*(_DWORD *)(v12 + 868))
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      return;
    v14 = *(_QWORD *)(v12 + 488);
    v15 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
    v16 = *(_DWORD *)(v12 + 860);
    if (v14)
      LODWORD(v14) = *(_DWORD *)(v14 + 424);
    v17 = *(_DWORD *)(v12 + 868);
    *(_DWORD *)buf = 136448002;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v15;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v16;
    *(_WORD *)v236 = 1024;
    *(_DWORD *)&v236[2] = v14;
    *(_WORD *)&v236[6] = 1024;
    *(_DWORD *)&v236[8] = a3;
    *(_WORD *)&v236[12] = 1024;
    *(_DWORD *)&v236[14] = v17;
    v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> suppressing received error: %d, connection error already set to: %d";
    v19 = v13;
    v20 = OS_LOG_TYPE_INFO;
    v21 = 62;
    goto LABEL_27;
  }
  *(_DWORD *)(v12 + 868) = a3;
  v26 = (unsigned __int16 *)(v12 + 872);
  v27 = *(unsigned __int16 *)(v12 + 872);
  v28 = v27 | (*(unsigned __int8 *)(v12 + 874) << 16);
  if ((v27 & 0x2000) != 0)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0)
      goto LABEL_112;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v65 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      goto LABEL_112;
    v66 = *(_QWORD *)(v12 + 488);
    v67 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
    v68 = *(_DWORD *)(v12 + 860);
    if (v66)
      LODWORD(v66) = *(_DWORD *)(v66 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http1_connection_finish_input";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v67;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v68;
    *(_WORD *)v236 = 1024;
    *(_DWORD *)&v236[2] = v66;
    v69 = "%{public}s %{public}s%s<i%u:c%u:s%u> input already finished, returning";
LABEL_111:
    _os_log_impl(&dword_182FBE000, v65, OS_LOG_TYPE_INFO, v69, buf, 0x32u);
    goto LABEL_112;
  }
  *(_BYTE *)(v12 + 874) = BYTE2(v28);
  *v26 = v28 | 0x2000;
  if ((v28 & 0x40000) != 0)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0)
      goto LABEL_112;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v65 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      goto LABEL_112;
    v70 = *(_QWORD *)(v12 + 488);
    v71 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
    v72 = *(_DWORD *)(v12 + 860);
    if (v70)
      LODWORD(v70) = *(_DWORD *)(v70 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http1_connection_finish_input";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v71;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v72;
    *(_WORD *)v236 = 1024;
    *(_DWORD *)&v236[2] = v70;
    v69 = "%{public}s %{public}s%s<i%u:c%u:s%u> already getting input frames, returning";
    goto LABEL_111;
  }
  v230 = (_WORD *)(v12 + 872);
  v228 = v5;
  v229 = a3;
  v29 = 0;
  v231 = 0;
  v232 = &v231;
  do
  {
    input_frames = nw_protocol_get_input_frames(*(_QWORD *)(v12 + 32), v12, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, (uint64_t)&v231);
    v31 = v231;
    if (!v231)
      goto LABEL_38;
    if (gLogDatapath)
    {
      v63 = __nwlog_obj();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v31;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = &v231;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v12 + 616;
        *(_WORD *)&buf[42] = 1024;
        *(_DWORD *)v236 = 1;
        *(_WORD *)&v236[4] = 1024;
        *(_DWORD *)&v236[6] = 1;
        *(_WORD *)&v236[10] = 1024;
        *(_DWORD *)&v236[12] = 1;
        _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s called: initial frame %p, source %p, destination %p, temp %u, forwards %u, append %u", buf, 0x3Cu);
      }
    }
    v32 = 0;
    *(_QWORD *)v237 = 0;
    *(_QWORD *)&v237[8] = v237;
    do
    {
      v34 = (_DWORD *)*((_QWORD *)v31 + 4);
      if (!v34 && !*((_QWORD *)v31 + 5))
        v34 = 0;
      if (gLogDatapath)
      {
        v37 = __nwlog_obj();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          v38 = v31[13];
          if (v38)
            v38 -= v31[14] + v31[15];
          if (v34)
          {
            v39 = v34[13];
            if (v39)
              v39 -= v34[14] + v34[15];
          }
          else
          {
            v39 = 0;
          }
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v31;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v38;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v34;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v39;
          _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)", buf, 0x2Cu);
        }
      }
      v35 = *((_QWORD *)v31 + 4);
      v36 = (_QWORD *)*((_QWORD *)v31 + 5);
      if (v35)
      {
        *(_QWORD *)(v35 + 40) = v36;
        v36 = (_QWORD *)*((_QWORD *)v31 + 5);
      }
      else
      {
        v232 = (_QWORD *)*((_QWORD *)v31 + 5);
      }
      *v36 = v35;
      v33 = *(_QWORD **)&v237[8];
      *((_QWORD *)v31 + 4) = 0;
      *((_QWORD *)v31 + 5) = v33;
      *v33 = v31;
      *(_QWORD *)&v237[8] = v31 + 8;
      ++v32;
      v31 = v34;
    }
    while (v34);
    if (v32)
    {
      if (gLogDatapath)
      {
        v64 = __nwlog_obj();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v32;
          _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s moving %u frames from temp array to destination array", buf, 0x12u);
        }
      }
      v40 = *(_DWORD **)v237;
      v41 = v32;
      if (!*(_QWORD *)v237)
        goto LABEL_79;
      v41 = v32;
      do
      {
        v44 = v40 + 8;
        v45 = (_DWORD *)*((_QWORD *)v40 + 4);
        if (!v45 && !*((_QWORD *)v40 + 5))
          v45 = 0;
        if (gLogDatapath)
        {
          v47 = __nwlog_obj();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            v48 = v40[13];
            if (v48)
              v48 -= v40[14] + v40[15];
            if (v45)
            {
              v49 = v45[13];
              if (v49)
                v49 -= v45[14] + v45[15];
            }
            else
            {
              v49 = 0;
            }
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v40;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v48;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v45;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v49;
            _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)", buf, 0x2Cu);
          }
        }
        v46 = *((_QWORD *)v40 + 4);
        v42 = (_QWORD *)*((_QWORD *)v40 + 5);
        if (v46)
        {
          *(_QWORD *)(v46 + 40) = v42;
          v42 = (_QWORD *)*((_QWORD *)v40 + 5);
        }
        else
        {
          *(_QWORD *)&v237[8] = *((_QWORD *)v40 + 5);
        }
        *v42 = v46;
        *v44 = 0;
        *((_QWORD *)v40 + 5) = 0;
        v43 = *(_QWORD **)(v12 + 624);
        *((_QWORD *)v40 + 5) = v43;
        *v43 = v40;
        *(_QWORD *)(v12 + 624) = v44;
        --v41;
        v40 = v45;
      }
      while (v45);
      if (v41)
      {
LABEL_79:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v41;
        v50 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v233 = 0;
        if (!__nwlog_fault(v50, &type, &v233))
          goto LABEL_93;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v51 = gLogObj;
          v52 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_93;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v41;
          v53 = v51;
          v54 = v52;
          v55 = "%{public}s failed to deliver all temp frames, remaining %u frames";
        }
        else if (v233)
        {
          v56 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v57 = gLogObj;
          v58 = type;
          v59 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v56)
          {
            if (v59)
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v41;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = v56;
              _os_log_impl(&dword_182FBE000, v57, v58, "%{public}s failed to deliver all temp frames, remaining %u frames, dumping backtrace:%{public}s", buf, 0x1Cu);
            }
            free(v56);
            goto LABEL_93;
          }
          if (!v59)
          {
LABEL_93:
            if (v50)
              free(v50);
            goto LABEL_37;
          }
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v41;
          v53 = v57;
          v54 = v58;
          v55 = "%{public}s failed to deliver all temp frames, remaining %u frames, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v60 = gLogObj;
          v61 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_93;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v41;
          v53 = v60;
          v54 = v61;
          v55 = "%{public}s failed to deliver all temp frames, remaining %u frames, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v53, v54, v55, buf, 0x12u);
        goto LABEL_93;
      }
    }
LABEL_37:
    if (gLogDatapath)
    {
      v62 = __nwlog_obj();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v32;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = &v231;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v12 + 616;
        _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_DEBUG, "%{public}s moved %u frames from %p to %p", buf, 0x26u);
      }
    }
LABEL_38:
    v29 += input_frames;
  }
  while (input_frames);
  if (gLogDatapath)
  {
    v193 = __nwlog_obj();
    if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_182FBE000, v193, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  v81 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
  *(_QWORD *)&buf[24] = &__block_descriptor_tmp_55_39648;
  *(_QWORD *)&buf[32] = &v231;
  buf[40] = 0;
  v82 = v231;
  do
  {
    if (!v82)
      break;
    v83 = (_DWORD *)*((_QWORD *)v82 + 4);
    v84 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
    v82 = v83;
  }
  while ((v84 & 1) != 0);
  v85 = (unsigned __int16)*v230;
  v86 = v85 | (*(unsigned __int8 *)(v12 + 874) << 16);
  if ((v85 & 0x6000) == 0x2000 && !*(_QWORD *)(v12 + 616))
  {
    *(_BYTE *)(v12 + 874) = BYTE2(v86);
    *v230 = v86 | 0x4000;
    if (*(_QWORD *)(v12 + 488))
    {
      if (*(_DWORD *)(v12 + 868) && llhttp_message_needs_eof(v12 + 200))
      {
        v113 = (unsigned __int16 *)(v12 + 872);
        if ((v86 & 4) == 0)
        {
          v114 = 5;
          if ((*(_BYTE *)(v12 + 158) & 1) != 0)
            goto LABEL_131;
          goto LABEL_197;
        }
LABEL_381:
        if ((*(_BYTE *)(v12 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v196 = __nwlog_obj();
            if (os_log_type_enabled(v196, OS_LOG_TYPE_DEBUG))
            {
              v197 = *(_QWORD *)(v12 + 488);
              v198 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
              v199 = *(_DWORD *)(v12 + 860);
              if (v197)
                LODWORD(v197) = *(_DWORD *)(v197 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_parser_signal_eof_if_needed";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v12 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v198;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v199;
              *(_WORD *)v236 = 1024;
              *(_DWORD *)&v236[2] = v197;
              _os_log_impl(&dword_182FBE000, v196, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> signaled eof and terminated message successfully", buf, 0x32u);
              v113 = (unsigned __int16 *)(v12 + 872);
            }
          }
        }
        *((_BYTE *)v113 + 2) = (*v113 | (*((unsigned __int8 *)v113 + 2) << 16) | 0x10000u) >> 16;
        goto LABEL_131;
      }
      v118 = llhttp_finish(v12 + 200);
      v113 = (unsigned __int16 *)(v12 + 872);
      if ((*v230 & 4) != 0)
        goto LABEL_381;
      v114 = v118;
      if (!v118)
        goto LABEL_381;
      if (v118 != 14)
        goto LABEL_196;
      v119 = *(_QWORD *)(v12 + 488);
      if (v119)
      {
        v114 = 14;
        if ((*v230 & 1) != 0
          && (*(_WORD *)(v119 + 428) & 1) == 0
          && !*(_DWORD *)(v12 + 848)
          && !*(_DWORD *)(v12 + 852)
          && !*(_DWORD *)(v12 + 856))
        {
          if ((*v230 & 2) != 0 && *(_QWORD *)(v12 + 800))
          {
            if (!*(_QWORD *)(v12 + 808))
            {
              v195 = strdup("");
              if (!v195)
              {
                v226 = __nwlog_obj();
                os_log_type_enabled(v226, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "strict_strdup";
                v227 = (void *)_os_log_send_and_compose_impl();
                if (__nwlog_abort((uint64_t)v227))
                {
                  __break(1u);
                  return;
                }
                free(v227);
              }
              *(_QWORD *)(v12 + 808) = v195;
            }
            nw_http1_on_header_value_complete(v12 + 200);
          }
          nw_http1_on_headers_complete(v12 + 200);
          nw_http1_on_message_complete(v12 + 200);
          v113 = (unsigned __int16 *)(v12 + 872);
          goto LABEL_381;
        }
LABEL_196:
        if ((*(_BYTE *)(v12 + 158) & 1) != 0)
          goto LABEL_131;
        goto LABEL_197;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
      v208 = (char *)_os_log_send_and_compose_impl();
      v237[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v208, v237, &type))
      {
        if (v237[0] == 17)
        {
          v209 = __nwlog_obj();
          v210 = v237[0];
          if (!os_log_type_enabled(v209, (os_log_type_t)v237[0]))
            goto LABEL_447;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
          v211 = "%{public}s called with null http1_stream";
LABEL_446:
          _os_log_impl(&dword_182FBE000, v209, v210, v211, buf, 0xCu);
          goto LABEL_447;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          v209 = __nwlog_obj();
          v210 = v237[0];
          if (!os_log_type_enabled(v209, (os_log_type_t)v237[0]))
            goto LABEL_447;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
          v211 = "%{public}s called with null http1_stream, backtrace limit exceeded";
          goto LABEL_446;
        }
        v219 = (char *)__nw_create_backtrace_string();
        v209 = __nwlog_obj();
        v210 = v237[0];
        v220 = os_log_type_enabled(v209, (os_log_type_t)v237[0]);
        if (!v219)
        {
          if (!v220)
            goto LABEL_447;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
          v211 = "%{public}s called with null http1_stream, no backtrace";
          goto LABEL_446;
        }
        if (v220)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v219;
          _os_log_impl(&dword_182FBE000, v209, v210, "%{public}s called with null http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v219);
      }
LABEL_447:
      if (v208)
        free(v208);
      v114 = 14;
      if ((*(_BYTE *)(v12 + 158) & 1) != 0)
        goto LABEL_131;
LABEL_197:
      v120 = __nwlog_obj();
      if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
      {
        v121 = *(_QWORD *)(v12 + 488);
        if (v121)
          LODWORD(v121) = *(_DWORD *)(v121 + 424);
        if (v114 >= 0x24)
          abort();
        v122 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
        v123 = *(_DWORD *)(v12 + 860);
        v124 = off_1E14A4C50[v114];
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http1_parser_signal_eof_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v122;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v123;
        *(_WORD *)v236 = 1024;
        *(_DWORD *)&v236[2] = v121;
        *(_WORD *)&v236[6] = 2080;
        *(_QWORD *)&v236[8] = v124;
        _os_log_impl(&dword_182FBE000, v120, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> parser eof did not terminate full message with errno: %s, deferring input error", buf, 0x3Cu);
      }
      goto LABEL_131;
    }
    if ((v86 & 0x100) != 0)
    {
      if ((*(_BYTE *)(v12 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v136 = __nwlog_obj();
          if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
          {
            v137 = *(_QWORD *)(v12 + 488);
            v138 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
            v139 = *(_DWORD *)(v12 + 860);
            if (v137)
              LODWORD(v137) = *(_DWORD *)(v137 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_close";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v138;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v139;
            *(_WORD *)v236 = 1024;
            *(_DWORD *)&v236[2] = v137;
            _os_log_impl(&dword_182FBE000, v136, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> already closed", buf, 0x32u);
          }
        }
      }
      goto LABEL_131;
    }
    *(_BYTE *)(v12 + 874) = BYTE2(v86);
    *v230 = v86 | 0x4100;
    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v204 = __nwlog_obj();
        if (os_log_type_enabled(v204, OS_LOG_TYPE_DEBUG))
        {
          v205 = *(_QWORD *)(v12 + 488);
          v206 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
          v207 = *(_DWORD *)(v12 + 860);
          if (v205)
            LODWORD(v205) = *(_DWORD *)(v205 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v206;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v207;
          *(_WORD *)v236 = 1024;
          *(_DWORD *)&v236[2] = v205;
          _os_log_impl(&dword_182FBE000, v204, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
        }
      }
    }
    v125 = *(_QWORD *)(v12 + 480);
    if (!v125)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      v200 = (char *)_os_log_send_and_compose_impl();
      v237[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v200, v237, &type))
        goto LABEL_457;
      if (v237[0] == 17)
      {
        v201 = __nwlog_obj();
        v202 = v237[0];
        if (!os_log_type_enabled(v201, (os_log_type_t)v237[0]))
          goto LABEL_457;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v203 = "%{public}s called with null http1";
      }
      else if (type)
      {
        v212 = (char *)__nw_create_backtrace_string();
        v201 = __nwlog_obj();
        v202 = v237[0];
        v213 = os_log_type_enabled(v201, (os_log_type_t)v237[0]);
        if (v212)
        {
          if (v213)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v212;
            _os_log_impl(&dword_182FBE000, v201, v202, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v212);
          goto LABEL_457;
        }
        if (!v213)
          goto LABEL_457;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v203 = "%{public}s called with null http1, no backtrace";
      }
      else
      {
        v201 = __nwlog_obj();
        v202 = v237[0];
        if (!os_log_type_enabled(v201, (os_log_type_t)v237[0]))
          goto LABEL_457;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v203 = "%{public}s called with null http1, backtrace limit exceeded";
      }
      v225 = buf;
LABEL_456:
      _os_log_impl(&dword_182FBE000, v201, v202, v203, v225, 0xCu);
      goto LABEL_457;
    }
    v126 = (unsigned __int16)*v230;
    v127 = v126 | (*(unsigned __int8 *)(v12 + 874) << 16);
    if ((v126 & 0x800) != 0)
    {
      if ((*(_BYTE *)(v12 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v140 = __nwlog_obj();
          if (os_log_type_enabled(v140, OS_LOG_TYPE_DEBUG))
          {
            v141 = *(_QWORD *)(v12 + 488);
            v142 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
            v143 = *(_DWORD *)(v12 + 860);
            if (v141)
              LODWORD(v141) = *(_DWORD *)(v141 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v142;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v143;
            *(_WORD *)v236 = 1024;
            *(_DWORD *)&v236[2] = v141;
            _os_log_impl(&dword_182FBE000, v140, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
          }
        }
      }
      goto LABEL_309;
    }
    *(_BYTE *)(v12 + 874) = BYTE2(v127);
    *v230 = v127 | 0x800;
    v128 = *(unsigned int *)(v125 + 368) + 1;
    v129 = v128 << 31 >> 31;
    *(_DWORD *)(v125 + 368) = v128;
    if (v129 == v128 && (v129 & 0x8000000000000000) == 0)
    {
LABEL_304:
      if ((*(_BYTE *)(v12 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v214 = __nwlog_obj();
          if (os_log_type_enabled(v214, OS_LOG_TYPE_DEBUG))
          {
            v215 = *(_QWORD *)(v12 + 488);
            v216 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
            v217 = *(_DWORD *)(v12 + 860);
            if (v215)
              LODWORD(v215) = *(_DWORD *)(v215 + 424);
            v218 = *(_DWORD *)(v125 + 368) + *(_DWORD *)(v125 + 364);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v216;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v217;
            *(_WORD *)v236 = 1024;
            *(_DWORD *)&v236[2] = v215;
            *(_WORD *)&v236[6] = 1024;
            *(_DWORD *)&v236[8] = v218;
            _os_log_impl(&dword_182FBE000, v214, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
          }
        }
      }
      v180 = *(void **)(v12 + 496);
      if (!v180)
      {
        __nwlog_obj();
        *(_DWORD *)v237 = 136446210;
        *(_QWORD *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        v200 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v233 = 0;
        if (!__nwlog_fault(v200, &type, &v233))
          goto LABEL_457;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v201 = __nwlog_obj();
          v202 = type;
          if (!os_log_type_enabled(v201, type))
            goto LABEL_457;
          *(_DWORD *)v237 = 136446210;
          *(_QWORD *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v203 = "%{public}s called with null http1_connection->context";
LABEL_455:
          v225 = v237;
          goto LABEL_456;
        }
        if (!v233)
        {
          v201 = __nwlog_obj();
          v202 = type;
          if (!os_log_type_enabled(v201, type))
            goto LABEL_457;
          *(_DWORD *)v237 = 136446210;
          *(_QWORD *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v203 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
          goto LABEL_455;
        }
        v221 = (char *)__nw_create_backtrace_string();
        v201 = __nwlog_obj();
        v202 = type;
        v222 = os_log_type_enabled(v201, type);
        if (!v221)
        {
          if (!v222)
            goto LABEL_457;
          *(_DWORD *)v237 = 136446210;
          *(_QWORD *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v203 = "%{public}s called with null http1_connection->context, no backtrace";
          goto LABEL_455;
        }
        if (v222)
        {
          *(_DWORD *)v237 = 136446466;
          *(_QWORD *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          *(_WORD *)&v237[12] = 2082;
          *(_QWORD *)&v237[14] = v221;
          v223 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
LABEL_430:
          _os_log_impl(&dword_182FBE000, v201, v202, v223, v237, 0x16u);
        }
LABEL_431:
        free(v221);
        if (!v200)
        {
LABEL_309:
          if (!*(_QWORD *)(v12 + 488))
          {
            v183 = *(_QWORD *)(v12 + 784);
            if (v183)
            {
              nw_queue_set_timer_values(v183, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
            }
            else
            {
              if ((*(_BYTE *)(v12 + 158) & 1) == 0)
              {
                v184 = __nwlog_obj();
                if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
                {
                  v185 = *(_QWORD *)(v12 + 488);
                  v186 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                  v187 = *(_DWORD *)(v12 + 860);
                  if (v185)
                    LODWORD(v185) = *(_DWORD *)(v185 + 424);
                  *(_DWORD *)buf = 136447490;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v12 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  *(_QWORD *)&buf[24] = " ";
                  *(_WORD *)&buf[32] = 1024;
                  *(_DWORD *)&buf[34] = v186;
                  *(_WORD *)&buf[38] = 1024;
                  *(_DWORD *)&buf[40] = v187;
                  *(_WORD *)v236 = 1024;
                  *(_DWORD *)&v236[2] = v185;
                  _os_log_impl(&dword_182FBE000, v184, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing", buf, 0x32u);
                }
              }
              v188 = *(_QWORD *)(v12 + 608);
              v189 = *(void **)(v12 + 496);
              *(_QWORD *)buf = v81;
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
              *(_QWORD *)&buf[24] = &unk_1E14A14F0;
              *(_QWORD *)&buf[32] = v188;
              nw_queue_context_async(v189, buf);
            }
          }
          goto LABEL_131;
        }
LABEL_458:
        free(v200);
        goto LABEL_309;
      }
      v181 = *(_QWORD *)(v12 + 480);
      if (v181)
      {
        v182 = *(_QWORD *)(v181 + 200);
        *(_QWORD *)buf = v81;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E14A1518;
        *(_QWORD *)&buf[32] = v182;
        nw_queue_context_async(v180, buf);
        goto LABEL_309;
      }
      __nwlog_obj();
      *(_DWORD *)v237 = 136446210;
      *(_QWORD *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
      v200 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v233 = 0;
      if (__nwlog_fault(v200, &type, &v233))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v201 = __nwlog_obj();
          v202 = type;
          if (!os_log_type_enabled(v201, type))
            goto LABEL_457;
          *(_DWORD *)v237 = 136446210;
          *(_QWORD *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v203 = "%{public}s called with null http1";
          goto LABEL_455;
        }
        if (!v233)
        {
          v201 = __nwlog_obj();
          v202 = type;
          if (!os_log_type_enabled(v201, type))
            goto LABEL_457;
          *(_DWORD *)v237 = 136446210;
          *(_QWORD *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v203 = "%{public}s called with null http1, backtrace limit exceeded";
          goto LABEL_455;
        }
        v221 = (char *)__nw_create_backtrace_string();
        v201 = __nwlog_obj();
        v202 = type;
        v224 = os_log_type_enabled(v201, type);
        if (!v221)
        {
          if (!v224)
            goto LABEL_457;
          *(_DWORD *)v237 = 136446210;
          *(_QWORD *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v203 = "%{public}s called with null http1, no backtrace";
          goto LABEL_455;
        }
        if (v224)
        {
          *(_DWORD *)v237 = 136446466;
          *(_QWORD *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          *(_WORD *)&v237[12] = 2082;
          *(_QWORD *)&v237[14] = v221;
          v223 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          goto LABEL_430;
        }
        goto LABEL_431;
      }
LABEL_457:
      if (!v200)
        goto LABEL_309;
      goto LABEL_458;
    }
    __nwlog_obj();
    v130 = *(unsigned int *)(v125 + 368);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = 1;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v130;
    v131 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v131, v237, &type))
    {
      if (v237[0] == 17)
      {
        v132 = __nwlog_obj();
        v133 = v237[0];
        if (os_log_type_enabled(v132, (os_log_type_t)v237[0]))
        {
          v134 = *(unsigned int *)(v125 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v134;
          v135 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_299:
          v178 = v132;
          v179 = v133;
LABEL_300:
          _os_log_impl(&dword_182FBE000, v178, v179, v135, buf, 0x2Au);
        }
      }
      else if (type)
      {
        v164 = (char *)__nw_create_backtrace_string();
        v165 = __nwlog_obj();
        v166 = v237[0];
        v167 = os_log_type_enabled(v165, (os_log_type_t)v237[0]);
        if (v164)
        {
          if (v167)
          {
            v168 = *(unsigned int *)(v125 + 368);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v168;
            *(_WORD *)&buf[42] = 2082;
            *(_QWORD *)v236 = v164;
            _os_log_impl(&dword_182FBE000, v165, v166, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v164);
          goto LABEL_301;
        }
        if (v167)
        {
          v190 = *(unsigned int *)(v125 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v190;
          v135 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          v178 = v165;
          v179 = v166;
          goto LABEL_300;
        }
      }
      else
      {
        v132 = __nwlog_obj();
        v133 = v237[0];
        if (os_log_type_enabled(v132, (os_log_type_t)v237[0]))
        {
          v177 = *(unsigned int *)(v125 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v177;
          v135 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_299;
        }
      }
    }
LABEL_301:
    if (v131)
      free(v131);
    *(_DWORD *)(v125 + 368) = -1;
    goto LABEL_304;
  }
LABEL_131:
  v87 = *(_QWORD *)(v12 + 616);
  v88 = *(_QWORD *)(v12 + 632);
  v26 = (unsigned __int16 *)(v12 + 872);
  v89 = *v230 & 0x204;
  if ((*v230 & 0x2000) != 0)
  {
    v100 = v87 | v88;
    v101 = (v87 | v88) == 0;
    v102 = ((*(unsigned __int16 *)(v12 + 872) | (*(unsigned __int8 *)(v12 + 874) << 16)) >> 9) & 1;
    if (v89 == 4)
      v102 = 1;
    a3 = v229;
    v5 = v228;
    if (v100 || !v102)
    {
      if (v89 == 4)
        goto LABEL_170;
      if (!v101)
        goto LABEL_170;
      *(_DWORD *)(v12 + 864) = 5;
      if ((*(_BYTE *)(v12 + 158) & 1) != 0)
        goto LABEL_170;
      v90 = __nwlog_obj();
      if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
        goto LABEL_170;
      v106 = *(_QWORD *)(v12 + 488);
      v107 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
      v108 = *(_DWORD *)(v12 + 860);
      if (v106)
        LODWORD(v106) = *(_DWORD *)(v106 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v12 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v107;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v108;
      *(_WORD *)v236 = 1024;
      *(_DWORD *)&v236[2] = v106;
      v94 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: connection error";
    }
    else
    {
      *(_DWORD *)(v12 + 864) = 4;
      if ((*(_BYTE *)(v12 + 158) & 1) != 0)
        goto LABEL_170;
      v90 = __nwlog_obj();
      if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
        goto LABEL_170;
      v103 = *(_QWORD *)(v12 + 488);
      v104 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
      v105 = *(_DWORD *)(v12 + 860);
      if (v103)
        LODWORD(v103) = *(_DWORD *)(v103 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v12 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v104;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v105;
      *(_WORD *)v236 = 1024;
      *(_DWORD *)&v236[2] = v103;
      v94 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: connection complete";
    }
LABEL_169:
    _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_DEBUG, v94, buf, 0x32u);
    goto LABEL_170;
  }
  a3 = v229;
  v5 = v228;
  if (v89 != 4)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0)
      goto LABEL_170;
    v90 = __nwlog_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
      goto LABEL_170;
    v109 = *(_QWORD *)(v12 + 488);
    v110 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
    v111 = *(_DWORD *)(v12 + 860);
    if (v109)
      LODWORD(v109) = *(_DWORD *)(v109 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v110;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v111;
    *(_WORD *)v236 = 1024;
    *(_DWORD *)&v236[2] = v109;
    v94 = "%{public}s %{public}s%s<i%u:c%u:s%u> no change to http1 connection state";
    goto LABEL_169;
  }
  if (v87 | v88)
  {
    if (!v87)
      goto LABEL_170;
    if (v88)
      goto LABEL_170;
    *(_DWORD *)(v12 + 864) = 3;
    if ((*(_BYTE *)(v12 + 158) & 1) != 0)
      goto LABEL_170;
    v90 = __nwlog_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
      goto LABEL_170;
    v115 = *(_QWORD *)(v12 + 488);
    v116 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
    v117 = *(_DWORD *)(v12 + 860);
    if (v115)
      LODWORD(v115) = *(_DWORD *)(v115 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v116;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v117;
    *(_WORD *)v236 = 1024;
    *(_DWORD *)&v236[2] = v115;
    v94 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: stream pending";
    goto LABEL_169;
  }
  *(_DWORD *)(v12 + 864) = 2;
  if ((*(_BYTE *)(v12 + 158) & 1) == 0)
  {
    v90 = __nwlog_obj();
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
    {
      v91 = *(_QWORD *)(v12 + 488);
      v92 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
      v93 = *(_DWORD *)(v12 + 860);
      if (v91)
        LODWORD(v91) = *(_DWORD *)(v91 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v12 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v92;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v93;
      *(_WORD *)v236 = 1024;
      *(_DWORD *)&v236[2] = v91;
      v94 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: stream complete";
      goto LABEL_169;
    }
  }
LABEL_170:
  if (*(_DWORD *)(v12 + 864) == 1)
  {
    if (v29)
    {
      v112 = *(_QWORD *)(v12 + 488);
      if (v112)
        nw_protocol_input_available(*(_QWORD **)(v112 + 48), v112);
    }
  }
LABEL_112:
  v73 = *(_QWORD *)(v12 + 488);
  if (!v73)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v77 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      return;
    v78 = *(_QWORD *)(v12 + 488);
    v79 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
    v80 = *(_DWORD *)(v12 + 860);
    if (v78)
      LODWORD(v78) = *(_DWORD *)(v78 + 424);
    *(_DWORD *)buf = 136447746;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v79;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v80;
    *(_WORD *)v236 = 1024;
    *(_DWORD *)&v236[2] = v78;
    *(_WORD *)&v236[6] = 1024;
    *(_DWORD *)&v236[8] = a3;
    v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> not passing up error %d, no stream";
    v19 = v77;
    v20 = OS_LOG_TYPE_DEBUG;
    v21 = 56;
    goto LABEL_27;
  }
  if (((*v26 | (*((unsigned __int8 *)v26 + 2) << 16)) & 0x10004) != 0)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        v74 = *(_QWORD *)(v12 + 488);
        v75 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
        v76 = *(_DWORD *)(v12 + 860);
        if (v74)
          LODWORD(v74) = *(_DWORD *)(v74 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v75;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v76;
        *(_WORD *)v236 = 1024;
        *(_DWORD *)&v236[2] = v74;
        v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> not passing up error because stream finished";
        goto LABEL_119;
      }
    }
  }
  else
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0)
      goto LABEL_145;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v95 = gLogObj;
    v96 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
    v73 = *(_QWORD *)(v12 + 488);
    if (v96)
    {
      v97 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
      v98 = *(_DWORD *)(v12 + 860);
      if (v73)
        LODWORD(v73) = *(_DWORD *)(v73 + 424);
      *(_DWORD *)buf = 136447746;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_error";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v12 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v97;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v98;
      *(_WORD *)v236 = 1024;
      *(_DWORD *)&v236[2] = v73;
      *(_WORD *)&v236[6] = 1024;
      *(_DWORD *)&v236[8] = a3;
      _os_log_impl(&dword_182FBE000, v95, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> passing up error: %d", buf, 0x38u);
      v73 = *(_QWORD *)(v12 + 488);
    }
    if (v73)
LABEL_145:
      v99 = *(_QWORD **)(v73 + 48);
    else
      v99 = 0;
    nw_protocol_error(v99, (uint64_t)v5);
  }
}

void nw_protocol_http1_notify(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  const char *v37;
  char *backtrace_string;
  _BOOL4 v39;
  char *v40;
  _BOOL4 v41;
  const char *v42;
  char *v43;
  _BOOL4 v44;
  const char *v45;
  _BOOL4 v46;
  _BOOL4 v47;
  _BOOL4 v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  const char *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  const char *v56;
  char *v57;
  _BOOL4 v58;
  char *v59;
  _BOOL4 v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  const char *v64;
  char *v65;
  _BOOL4 v66;
  char *v67;
  _BOOL4 v68;
  _BOOL4 v69;
  _BOOL4 v70;
  _BOOL4 v71;
  char v72;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v75;
  __int16 v76;
  char *v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  void *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v75 = "nw_http1_get_http1_protocol";
    v30 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v72 = 0;
    if (!__nwlog_fault(v30, &type, &v72))
      goto LABEL_141;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v31 = __nwlog_obj();
      v32 = type;
      if (!os_log_type_enabled(v31, type))
        goto LABEL_141;
      *(_DWORD *)buf = 136446210;
      v75 = "nw_http1_get_http1_protocol";
      v33 = "%{public}s called with null protocol";
    }
    else if (v72)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      v32 = type;
      v39 = os_log_type_enabled(v31, type);
      if (backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          v75 = "nw_http1_get_http1_protocol";
          v76 = 2082;
          v77 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_141:
        if (!v30)
          goto LABEL_143;
LABEL_142:
        free(v30);
        goto LABEL_143;
      }
      if (!v39)
        goto LABEL_141;
      *(_DWORD *)buf = 136446210;
      v75 = "nw_http1_get_http1_protocol";
      v33 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v31 = __nwlog_obj();
      v32 = type;
      if (!os_log_type_enabled(v31, type))
        goto LABEL_141;
      *(_DWORD *)buf = 136446210;
      v75 = "nw_http1_get_http1_protocol";
      v33 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_140;
  }
  v3 = *(_QWORD *)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v75 = "nw_http1_get_http1_protocol";
    v30 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v72 = 0;
    if (!__nwlog_fault(v30, &type, &v72))
      goto LABEL_141;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v72)
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (!os_log_type_enabled(v31, type))
          goto LABEL_141;
        *(_DWORD *)buf = 136446210;
        v75 = "nw_http1_get_http1_protocol";
        v33 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_140;
      }
      v40 = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      v32 = type;
      v41 = os_log_type_enabled(v31, type);
      if (!v40)
      {
        if (!v41)
          goto LABEL_141;
        *(_DWORD *)buf = 136446210;
        v75 = "nw_http1_get_http1_protocol";
        v33 = "%{public}s called with null handle, no backtrace";
        goto LABEL_140;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        v75 = "nw_http1_get_http1_protocol";
        v76 = 2082;
        v77 = v40;
        v42 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_76:
        _os_log_impl(&dword_182FBE000, v31, v32, v42, buf, 0x16u);
      }
LABEL_77:
      free(v40);
      if (!v30)
        goto LABEL_143;
      goto LABEL_142;
    }
    v31 = __nwlog_obj();
    v32 = type;
    if (!os_log_type_enabled(v31, type))
      goto LABEL_141;
    *(_DWORD *)buf = 136446210;
    v75 = "nw_http1_get_http1_protocol";
    v33 = "%{public}s called with null handle";
LABEL_140:
    _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0xCu);
    goto LABEL_141;
  }
  v5 = *(_DWORD *)(v3 + 24);
  v6 = *(_QWORD **)(a1 + 40);
  if (v5 == 1)
    goto LABEL_10;
  if (v5 != 2)
  {
    if (v5 != 3)
    {
LABEL_143:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v75 = "nw_protocol_http1_notify";
      v34 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v72 = 0;
      if (!__nwlog_fault(v34, &type, &v72))
        goto LABEL_231;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v35 = gLogObj;
        v36 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_231;
        *(_DWORD *)buf = 136446210;
        v75 = "nw_protocol_http1_notify";
        v37 = "%{public}s called with null http1";
        goto LABEL_230;
      }
      if (!v72)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v35 = gLogObj;
        v36 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_231;
        *(_DWORD *)buf = 136446210;
        v75 = "nw_protocol_http1_notify";
        v37 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_230;
      }
      v59 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v35 = gLogObj;
      v36 = type;
      v60 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v59)
      {
        if (!v60)
          goto LABEL_231;
        *(_DWORD *)buf = 136446210;
        v75 = "nw_protocol_http1_notify";
        v37 = "%{public}s called with null http1, no backtrace";
        goto LABEL_230;
      }
      if (v60)
      {
        *(_DWORD *)buf = 136446466;
        v75 = "nw_protocol_http1_notify";
        v76 = 2082;
        v77 = v59;
        _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v59);
      goto LABEL_231;
    }
    v7 = *(_QWORD *)(v3 + 16);
    if (v7)
    {
      v6 = (_QWORD *)(v7 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v75 = "nw_http1_get_http1_protocol";
    v30 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v72 = 0;
    if (!__nwlog_fault(v30, &type, &v72))
      goto LABEL_141;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v31 = __nwlog_obj();
      v32 = type;
      if (!os_log_type_enabled(v31, type))
        goto LABEL_141;
      *(_DWORD *)buf = 136446210;
      v75 = "nw_http1_get_http1_protocol";
      v33 = "%{public}s called with null handle->http1_connection";
      goto LABEL_140;
    }
    if (!v72)
    {
      v31 = __nwlog_obj();
      v32 = type;
      if (!os_log_type_enabled(v31, type))
        goto LABEL_141;
      *(_DWORD *)buf = 136446210;
      v75 = "nw_http1_get_http1_protocol";
      v33 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_140;
    }
    v40 = (char *)__nw_create_backtrace_string();
    v31 = __nwlog_obj();
    v32 = type;
    v47 = os_log_type_enabled(v31, type);
    if (!v40)
    {
      if (!v47)
        goto LABEL_141;
      *(_DWORD *)buf = 136446210;
      v75 = "nw_http1_get_http1_protocol";
      v33 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_140;
    }
    if (v47)
    {
      *(_DWORD *)buf = 136446466;
      v75 = "nw_http1_get_http1_protocol";
      v76 = 2082;
      v77 = v40;
      v42 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_76;
    }
    goto LABEL_77;
  }
  v8 = *(_QWORD *)(v3 + 8);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v75 = "nw_http1_get_http1_protocol";
    v30 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v72 = 0;
    if (!__nwlog_fault(v30, &type, &v72))
      goto LABEL_141;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v31 = __nwlog_obj();
      v32 = type;
      if (!os_log_type_enabled(v31, type))
        goto LABEL_141;
      *(_DWORD *)buf = 136446210;
      v75 = "nw_http1_get_http1_protocol";
      v33 = "%{public}s called with null handle->http1_stream";
      goto LABEL_140;
    }
    if (!v72)
    {
      v31 = __nwlog_obj();
      v32 = type;
      if (!os_log_type_enabled(v31, type))
        goto LABEL_141;
      *(_DWORD *)buf = 136446210;
      v75 = "nw_http1_get_http1_protocol";
      v33 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_140;
    }
    v40 = (char *)__nw_create_backtrace_string();
    v31 = __nwlog_obj();
    v32 = type;
    v48 = os_log_type_enabled(v31, type);
    if (!v40)
    {
      if (!v48)
        goto LABEL_141;
      *(_DWORD *)buf = 136446210;
      v75 = "nw_http1_get_http1_protocol";
      v33 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_140;
    }
    if (v48)
    {
      *(_DWORD *)buf = 136446466;
      v75 = "nw_http1_get_http1_protocol";
      v76 = 2082;
      v77 = v40;
      v42 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_76;
    }
    goto LABEL_77;
  }
  v6 = (_QWORD *)(v8 + 248);
LABEL_10:
  if (!*v6)
    goto LABEL_143;
  if (a2)
  {
    switch(a3)
    {
      case 0u:
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v75 = "nw_protocol_http1_notify";
        v34 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v72 = 0;
        if (!__nwlog_fault(v34, &type, &v72))
          goto LABEL_231;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v35 = __nwlog_obj();
          v36 = type;
          if (!os_log_type_enabled(v35, type))
            goto LABEL_231;
          *(_DWORD *)buf = 136446210;
          v75 = "nw_protocol_http1_notify";
          v37 = "%{public}s called with null type";
          goto LABEL_230;
        }
        if (v72)
        {
          v43 = (char *)__nw_create_backtrace_string();
          v35 = __nwlog_obj();
          v36 = type;
          v46 = os_log_type_enabled(v35, type);
          if (v43)
          {
            if (!v46)
              goto LABEL_224;
            *(_DWORD *)buf = 136446466;
            v75 = "nw_protocol_http1_notify";
            v76 = 2082;
            v77 = v43;
            v45 = "%{public}s called with null type, dumping backtrace:%{public}s";
            goto LABEL_223;
          }
          if (!v46)
            goto LABEL_231;
          *(_DWORD *)buf = 136446210;
          v75 = "nw_protocol_http1_notify";
          v37 = "%{public}s called with null type, no backtrace";
        }
        else
        {
          v35 = __nwlog_obj();
          v36 = type;
          if (!os_log_type_enabled(v35, type))
            goto LABEL_231;
          *(_DWORD *)buf = 136446210;
          v75 = "nw_protocol_http1_notify";
          v37 = "%{public}s called with null type, backtrace limit exceeded";
        }
        goto LABEL_230;
      case 7u:
      case 0x15u:
        return;
      case 0xDu:
      case 0x10u:
        if (v5 == 2)
        {
          v12 = (uint64_t *)(v3 + 8);
          goto LABEL_28;
        }
        if (v5 != 3)
          goto LABEL_196;
        v11 = *(_QWORD *)(v3 + 16);
        if (v11)
        {
          v12 = (uint64_t *)(v11 + 488);
LABEL_28:
          v15 = *v12;
          if (*v12)
          {
            v16 = *(_QWORD *)(v15 + 256);
            if (v16)
            {
              v17 = *(_QWORD **)(v16 + 32);
              goto LABEL_41;
            }
            if ((*(_BYTE *)(v15 + 158) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v18 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
              {
                v19 = *(_QWORD *)(v15 + 256);
                v20 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
                if (v19)
                  LODWORD(v19) = *(_DWORD *)(v19 + 860);
                v21 = off_1E14A22C8[a3];
                v22 = *(_DWORD *)(v15 + 424);
                *(_DWORD *)buf = 136447746;
                v75 = "nw_protocol_http1_notify";
                v76 = 2082;
                v77 = (char *)(v15 + 74);
                v78 = 2080;
                v79 = " ";
                v80 = 1024;
                v81 = v20;
                v82 = 1024;
                v83 = v19;
                v84 = 1024;
                v85 = v22;
                v86 = 2080;
                v87 = v21;
                goto LABEL_50;
              }
            }
            return;
          }
LABEL_196:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446210;
          v75 = "nw_protocol_http1_notify";
          v34 = (char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v72 = 0;
          if (!__nwlog_fault(v34, &type, &v72))
            goto LABEL_231;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v35 = gLogObj;
            v36 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type))
              goto LABEL_231;
            *(_DWORD *)buf = 136446210;
            v75 = "nw_protocol_http1_notify";
            v37 = "%{public}s called with null http1_stream";
            goto LABEL_230;
          }
          if (v72)
          {
            v43 = (char *)__nw_create_backtrace_string();
            v35 = __nwlog_obj();
            v36 = type;
            v70 = os_log_type_enabled(v35, type);
            if (v43)
            {
              if (!v70)
                goto LABEL_224;
              goto LABEL_186;
            }
            if (!v70)
              goto LABEL_231;
            *(_DWORD *)buf = 136446210;
            v75 = "nw_protocol_http1_notify";
            v37 = "%{public}s called with null http1_stream, no backtrace";
          }
          else
          {
            v35 = __nwlog_obj();
            v36 = type;
            if (!os_log_type_enabled(v35, type))
              goto LABEL_231;
            *(_DWORD *)buf = 136446210;
            v75 = "nw_protocol_http1_notify";
            v37 = "%{public}s called with null http1_stream, backtrace limit exceeded";
          }
LABEL_230:
          _os_log_impl(&dword_182FBE000, v35, v36, v37, buf, 0xCu);
          goto LABEL_231;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v75 = "nw_http1_get_stream_for_protocol";
        v53 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v72 = 0;
        if (!__nwlog_fault(v53, &type, &v72))
          goto LABEL_194;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v54 = __nwlog_obj();
          v55 = type;
          if (!os_log_type_enabled(v54, type))
            goto LABEL_194;
          *(_DWORD *)buf = 136446210;
          v75 = "nw_http1_get_stream_for_protocol";
          v56 = "%{public}s called with null handle->http1_connection";
        }
        else if (v72)
        {
          v65 = (char *)__nw_create_backtrace_string();
          v54 = __nwlog_obj();
          v55 = type;
          v66 = os_log_type_enabled(v54, type);
          if (v65)
          {
            if (v66)
            {
              *(_DWORD *)buf = 136446466;
              v75 = "nw_http1_get_stream_for_protocol";
              v76 = 2082;
              v77 = v65;
              _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v65);
            goto LABEL_194;
          }
          if (!v66)
          {
LABEL_194:
            if (v53)
              free(v53);
            goto LABEL_196;
          }
          *(_DWORD *)buf = 136446210;
          v75 = "nw_http1_get_stream_for_protocol";
          v56 = "%{public}s called with null handle->http1_connection, no backtrace";
        }
        else
        {
          v54 = __nwlog_obj();
          v55 = type;
          if (!os_log_type_enabled(v54, type))
            goto LABEL_194;
          *(_DWORD *)buf = 136446210;
          v75 = "nw_http1_get_stream_for_protocol";
          v56 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v54, v55, v56, buf, 0xCu);
        goto LABEL_194;
      case 0xFu:
        if (v5 == 2)
        {
          v10 = (uint64_t *)(v3 + 8);
LABEL_25:
          v14 = *v10;
          if (v14)
          {
            nw_protocol_reset(a1, *(_QWORD *)(v14 + 48));
            return;
          }
LABEL_179:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446210;
          v75 = "nw_protocol_http1_notify";
          v34 = (char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v72 = 0;
          if (__nwlog_fault(v34, &type, &v72))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v35 = gLogObj;
              v36 = type;
              if (!os_log_type_enabled((os_log_t)gLogObj, type))
                goto LABEL_231;
              *(_DWORD *)buf = 136446210;
              v75 = "nw_protocol_http1_notify";
              v37 = "%{public}s called with null http1_stream";
              goto LABEL_230;
            }
            if (!v72)
            {
              v35 = __nwlog_obj();
              v36 = type;
              if (!os_log_type_enabled(v35, type))
                goto LABEL_231;
              *(_DWORD *)buf = 136446210;
              v75 = "nw_protocol_http1_notify";
              v37 = "%{public}s called with null http1_stream, backtrace limit exceeded";
              goto LABEL_230;
            }
            v43 = (char *)__nw_create_backtrace_string();
            v35 = __nwlog_obj();
            v36 = type;
            v69 = os_log_type_enabled(v35, type);
            if (!v43)
            {
              if (!v69)
                goto LABEL_231;
              *(_DWORD *)buf = 136446210;
              v75 = "nw_protocol_http1_notify";
              v37 = "%{public}s called with null http1_stream, no backtrace";
              goto LABEL_230;
            }
            if (v69)
            {
LABEL_186:
              *(_DWORD *)buf = 136446466;
              v75 = "nw_protocol_http1_notify";
              v76 = 2082;
              v77 = v43;
              v45 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
              goto LABEL_223;
            }
            goto LABEL_224;
          }
LABEL_231:
          if (!v34)
            return;
          goto LABEL_232;
        }
        if (v5 != 3)
          goto LABEL_179;
        v9 = *(_QWORD *)(v3 + 16);
        if (v9)
        {
          v10 = (uint64_t *)(v9 + 488);
          goto LABEL_25;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v75 = "nw_http1_get_stream_for_protocol";
        v49 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v72 = 0;
        if (!__nwlog_fault(v49, &type, &v72))
          goto LABEL_177;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v50 = __nwlog_obj();
          v51 = type;
          if (!os_log_type_enabled(v50, type))
            goto LABEL_177;
          *(_DWORD *)buf = 136446210;
          v75 = "nw_http1_get_stream_for_protocol";
          v52 = "%{public}s called with null handle->http1_connection";
        }
        else if (v72)
        {
          v57 = (char *)__nw_create_backtrace_string();
          v50 = __nwlog_obj();
          v51 = type;
          v58 = os_log_type_enabled(v50, type);
          if (v57)
          {
            if (v58)
            {
              *(_DWORD *)buf = 136446466;
              v75 = "nw_http1_get_stream_for_protocol";
              v76 = 2082;
              v77 = v57;
              _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v57);
            goto LABEL_177;
          }
          if (!v58)
          {
LABEL_177:
            if (v49)
              free(v49);
            goto LABEL_179;
          }
          *(_DWORD *)buf = 136446210;
          v75 = "nw_http1_get_stream_for_protocol";
          v52 = "%{public}s called with null handle->http1_connection, no backtrace";
        }
        else
        {
          v50 = __nwlog_obj();
          v51 = type;
          if (!os_log_type_enabled(v50, type))
            goto LABEL_177;
          *(_DWORD *)buf = 136446210;
          v75 = "nw_http1_get_stream_for_protocol";
          v52 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v50, v51, v52, buf, 0xCu);
        goto LABEL_177;
      default:
        if (v5 != 2)
        {
          if (v5 != 3)
            goto LABEL_215;
          v13 = (uint64_t *)(v3 + 16);
LABEL_38:
          v24 = *v13;
          if (*v13)
          {
            v25 = *(_QWORD *)(v24 + 488);
            if (v25)
            {
              v17 = *(_QWORD **)(v25 + 48);
LABEL_41:
              nw_protocol_notify(v17, a2, a3);
            }
            else if ((*(_BYTE *)(v24 + 158) & 1) == 0)
            {
              v18 = __nwlog_obj();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
              {
                v26 = *(_QWORD *)(v24 + 488);
                if (v26)
                  LODWORD(v26) = *(_DWORD *)(v26 + 424);
                v27 = *(_DWORD *)(*(_QWORD *)(v24 + 480) + 372);
                v28 = *(_DWORD *)(v24 + 860);
                if (a3 > 0x19)
                  v29 = "unknown";
                else
                  v29 = off_1E14A22C8[a3];
                *(_DWORD *)buf = 136447746;
                v75 = "nw_protocol_http1_notify";
                v76 = 2082;
                v77 = (char *)(v24 + 74);
                v78 = 2080;
                v79 = " ";
                v80 = 1024;
                v81 = v27;
                v82 = 1024;
                v83 = v28;
                v84 = 1024;
                v85 = v26;
                v86 = 2080;
                v87 = (void *)v29;
LABEL_50:
                _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> dropping notification type %s", buf, 0x3Cu);
              }
            }
            return;
          }
LABEL_215:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446210;
          v75 = "nw_protocol_http1_notify";
          v34 = (char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v72 = 0;
          if (!__nwlog_fault(v34, &type, &v72))
            goto LABEL_231;
          if (type == OS_LOG_TYPE_FAULT)
          {
            v35 = __nwlog_obj();
            v36 = type;
            if (!os_log_type_enabled(v35, type))
              goto LABEL_231;
            *(_DWORD *)buf = 136446210;
            v75 = "nw_protocol_http1_notify";
            v37 = "%{public}s called with null http1_connection";
            goto LABEL_230;
          }
          if (!v72)
          {
            v35 = __nwlog_obj();
            v36 = type;
            if (!os_log_type_enabled(v35, type))
              goto LABEL_231;
            *(_DWORD *)buf = 136446210;
            v75 = "nw_protocol_http1_notify";
            v37 = "%{public}s called with null http1_connection, backtrace limit exceeded";
            goto LABEL_230;
          }
          v43 = (char *)__nw_create_backtrace_string();
          v35 = __nwlog_obj();
          v36 = type;
          v71 = os_log_type_enabled(v35, type);
          if (!v43)
          {
            if (!v71)
              goto LABEL_231;
            *(_DWORD *)buf = 136446210;
            v75 = "nw_protocol_http1_notify";
            v37 = "%{public}s called with null http1_connection, no backtrace";
            goto LABEL_230;
          }
          if (!v71)
            goto LABEL_224;
          *(_DWORD *)buf = 136446466;
          v75 = "nw_protocol_http1_notify";
          v76 = 2082;
          v77 = v43;
          v45 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
          goto LABEL_223;
        }
        v23 = *(_QWORD *)(v3 + 8);
        if (v23)
        {
          v13 = (uint64_t *)(v23 + 256);
          goto LABEL_38;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v75 = "nw_http1_get_connection_for_protocol";
        v61 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v72 = 0;
        if (!__nwlog_fault(v61, &type, &v72))
          goto LABEL_213;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v62 = __nwlog_obj();
          v63 = type;
          if (!os_log_type_enabled(v62, type))
            goto LABEL_213;
          *(_DWORD *)buf = 136446210;
          v75 = "nw_http1_get_connection_for_protocol";
          v64 = "%{public}s called with null handle->http1_stream";
        }
        else if (v72)
        {
          v67 = (char *)__nw_create_backtrace_string();
          v62 = __nwlog_obj();
          v63 = type;
          v68 = os_log_type_enabled(v62, type);
          if (v67)
          {
            if (v68)
            {
              *(_DWORD *)buf = 136446466;
              v75 = "nw_http1_get_connection_for_protocol";
              v76 = 2082;
              v77 = v67;
              _os_log_impl(&dword_182FBE000, v62, v63, "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v67);
            goto LABEL_213;
          }
          if (!v68)
          {
LABEL_213:
            if (v61)
              free(v61);
            goto LABEL_215;
          }
          *(_DWORD *)buf = 136446210;
          v75 = "nw_http1_get_connection_for_protocol";
          v64 = "%{public}s called with null handle->http1_stream, no backtrace";
        }
        else
        {
          v62 = __nwlog_obj();
          v63 = type;
          if (!os_log_type_enabled(v62, type))
            goto LABEL_213;
          *(_DWORD *)buf = 136446210;
          v75 = "nw_http1_get_connection_for_protocol";
          v64 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v62, v63, v64, buf, 0xCu);
        goto LABEL_213;
    }
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v75 = "nw_protocol_http1_notify";
  v34 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v72 = 0;
  if (!__nwlog_fault(v34, &type, &v72))
    goto LABEL_231;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v35 = __nwlog_obj();
    v36 = type;
    if (!os_log_type_enabled(v35, type))
      goto LABEL_231;
    *(_DWORD *)buf = 136446210;
    v75 = "nw_protocol_http1_notify";
    v37 = "%{public}s called with null other_protocol";
    goto LABEL_230;
  }
  if (!v72)
  {
    v35 = __nwlog_obj();
    v36 = type;
    if (!os_log_type_enabled(v35, type))
      goto LABEL_231;
    *(_DWORD *)buf = 136446210;
    v75 = "nw_protocol_http1_notify";
    v37 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_230;
  }
  v43 = (char *)__nw_create_backtrace_string();
  v35 = __nwlog_obj();
  v36 = type;
  v44 = os_log_type_enabled(v35, type);
  if (!v43)
  {
    if (!v44)
      goto LABEL_231;
    *(_DWORD *)buf = 136446210;
    v75 = "nw_protocol_http1_notify";
    v37 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_230;
  }
  if (v44)
  {
    *(_DWORD *)buf = 136446466;
    v75 = "nw_protocol_http1_notify";
    v76 = 2082;
    v77 = v43;
    v45 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_223:
    _os_log_impl(&dword_182FBE000, v35, v36, v45, buf, 0x16u);
  }
LABEL_224:
  free(v43);
  if (v34)
LABEL_232:
    free(v34);
}

uint64_t nw_protocol_http1_copy_info(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *backtrace_string;
  _BOOL4 v23;
  char *v24;
  _BOOL4 v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  _BOOL4 v31;
  _BOOL4 v32;
  char *v33;
  _BOOL4 v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  char *v39;
  _BOOL4 v40;
  char *v41;
  _BOOL4 v42;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  char *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_http1_get_http1_protocol";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v18, &type, &v44))
      goto LABEL_94;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v47 = "nw_http1_get_http1_protocol";
      v21 = "%{public}s called with null protocol";
    }
    else if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      v20 = type;
      v23 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v47 = "nw_http1_get_http1_protocol";
          v48 = 2082;
          v49 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_94:
        if (!v18)
          goto LABEL_96;
LABEL_95:
        free(v18);
        goto LABEL_96;
      }
      if (!v23)
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v47 = "nw_http1_get_http1_protocol";
      v21 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v47 = "nw_http1_get_http1_protocol";
      v21 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_93;
  }
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_http1_get_http1_protocol";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v18, &type, &v44))
      goto LABEL_94;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v44)
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (!os_log_type_enabled(v19, type))
          goto LABEL_94;
        *(_DWORD *)buf = 136446210;
        v47 = "nw_http1_get_http1_protocol";
        v21 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_93;
      }
      v24 = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      v20 = type;
      v25 = os_log_type_enabled(v19, type);
      if (!v24)
      {
        if (!v25)
          goto LABEL_94;
        *(_DWORD *)buf = 136446210;
        v47 = "nw_http1_get_http1_protocol";
        v21 = "%{public}s called with null handle, no backtrace";
        goto LABEL_93;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_http1_get_http1_protocol";
        v48 = 2082;
        v49 = v24;
        v26 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_71:
        _os_log_impl(&dword_182FBE000, v19, v20, v26, buf, 0x16u);
      }
LABEL_72:
      free(v24);
      if (!v18)
        goto LABEL_96;
      goto LABEL_95;
    }
    v19 = __nwlog_obj();
    v20 = type;
    if (!os_log_type_enabled(v19, type))
      goto LABEL_94;
    *(_DWORD *)buf = 136446210;
    v47 = "nw_http1_get_http1_protocol";
    v21 = "%{public}s called with null handle";
LABEL_93:
    _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
    goto LABEL_94;
  }
  v4 = *(_DWORD *)(v2 + 24);
  v5 = *(uint64_t **)(a1 + 40);
  if (v4 == 1)
    goto LABEL_10;
  if (v4 != 2)
  {
    if (v4 != 3)
    {
LABEL_96:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v47 = "nw_protocol_http1_copy_info";
      v35 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (!__nwlog_fault(v35, &type, &v44))
        goto LABEL_129;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = gLogObj;
        v37 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_129;
        *(_DWORD *)buf = 136446210;
        v47 = "nw_protocol_http1_copy_info";
        v38 = "%{public}s called with null http1";
        goto LABEL_128;
      }
      if (!v44)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = gLogObj;
        v37 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_129;
        *(_DWORD *)buf = 136446210;
        v47 = "nw_protocol_http1_copy_info";
        v38 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_128;
      }
      v39 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = gLogObj;
      v37 = type;
      v40 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v39)
      {
        if (!v40)
          goto LABEL_129;
        *(_DWORD *)buf = 136446210;
        v47 = "nw_protocol_http1_copy_info";
        v38 = "%{public}s called with null http1, no backtrace";
        goto LABEL_128;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_protocol_http1_copy_info";
        v48 = 2082;
        v49 = v39;
        _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v39);
LABEL_129:
      if (!v35)
        return 0;
LABEL_130:
      free(v35);
      return 0;
    }
    v6 = *(_QWORD *)(v2 + 16);
    if (v6)
    {
      v5 = (uint64_t *)(v6 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_http1_get_http1_protocol";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v18, &type, &v44))
      goto LABEL_94;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v47 = "nw_http1_get_http1_protocol";
      v21 = "%{public}s called with null handle->http1_connection";
      goto LABEL_93;
    }
    if (!v44)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v47 = "nw_http1_get_http1_protocol";
      v21 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_93;
    }
    v24 = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    v20 = type;
    v31 = os_log_type_enabled(v19, type);
    if (!v24)
    {
      if (!v31)
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v47 = "nw_http1_get_http1_protocol";
      v21 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_93;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v47 = "nw_http1_get_http1_protocol";
      v48 = 2082;
      v49 = v24;
      v26 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_71;
    }
    goto LABEL_72;
  }
  v7 = *(_QWORD *)(v2 + 8);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_http1_get_http1_protocol";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v18, &type, &v44))
      goto LABEL_94;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v47 = "nw_http1_get_http1_protocol";
      v21 = "%{public}s called with null handle->http1_stream";
      goto LABEL_93;
    }
    if (!v44)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v47 = "nw_http1_get_http1_protocol";
      v21 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_93;
    }
    v24 = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    v20 = type;
    v32 = os_log_type_enabled(v19, type);
    if (!v24)
    {
      if (!v32)
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v47 = "nw_http1_get_http1_protocol";
      v21 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_93;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v47 = "nw_http1_get_http1_protocol";
      v48 = 2082;
      v49 = v24;
      v26 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_71;
    }
    goto LABEL_72;
  }
  v5 = (uint64_t *)(v7 + 248);
LABEL_10:
  v8 = *v5;
  if (!v8)
    goto LABEL_96;
  if (v4 != 2)
  {
    if (v4 != 3)
      goto LABEL_114;
    v9 = *(_QWORD *)(v2 + 16);
    if (v9)
    {
      v10 = (uint64_t *)(v9 + 488);
      goto LABEL_16;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_http1_get_stream_for_protocol";
    v27 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v27, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (!os_log_type_enabled(v28, type))
          goto LABEL_112;
        *(_DWORD *)buf = 136446210;
        v47 = "nw_http1_get_stream_for_protocol";
        v30 = "%{public}s called with null handle->http1_connection";
        goto LABEL_111;
      }
      if (!v44)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (!os_log_type_enabled(v28, type))
          goto LABEL_112;
        *(_DWORD *)buf = 136446210;
        v47 = "nw_http1_get_stream_for_protocol";
        v30 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_111;
      }
      v33 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type;
      v34 = os_log_type_enabled(v28, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v47 = "nw_http1_get_stream_for_protocol";
          v48 = 2082;
          v49 = v33;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        goto LABEL_112;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_http1_get_stream_for_protocol";
        v30 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_111:
        _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
      }
    }
LABEL_112:
    if (v27)
      free(v27);
LABEL_114:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_protocol_http1_copy_info";
    v35 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v35, &type, &v44))
      goto LABEL_129;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = gLogObj;
      v37 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_129;
      *(_DWORD *)buf = 136446210;
      v47 = "nw_protocol_http1_copy_info";
      v38 = "%{public}s called with null http1_stream";
      goto LABEL_128;
    }
    if (!v44)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = gLogObj;
      v37 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_129;
      *(_DWORD *)buf = 136446210;
      v47 = "nw_protocol_http1_copy_info";
      v38 = "%{public}s called with null http1_stream, backtrace limit exceeded";
      goto LABEL_128;
    }
    v41 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v36 = gLogObj;
    v37 = type;
    v42 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v41)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_protocol_http1_copy_info";
        v48 = 2082;
        v49 = v41;
        _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s called with null http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v41);
      if (!v35)
        return 0;
      goto LABEL_130;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446210;
      v47 = "nw_protocol_http1_copy_info";
      v38 = "%{public}s called with null http1_stream, no backtrace";
LABEL_128:
      _os_log_impl(&dword_182FBE000, v36, v37, v38, buf, 0xCu);
      goto LABEL_129;
    }
    goto LABEL_129;
  }
  v10 = (uint64_t *)(v2 + 8);
LABEL_16:
  v11 = *v10;
  if (!*v10)
    goto LABEL_114;
  if (a2 == 253)
    return *(_QWORD *)(v8 + 328);
  v13 = *(_QWORD *)(v11 + 256);
  if (v13)
  {
    v14 = nw_protocol_common_copy_info(v13, a2);
    v12 = v14;
    if (a2 != 255)
      return v12;
    if (v14)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (a2 != 255)
    return 0;
LABEL_24:
  v12 = nw_array_create();
LABEL_25:
  v15 = *(_QWORD *)(v11 + 256);
  if (v15)
  {
    v16 = *(void **)(v15 + 768);
    if (v16)
      nw_array_append(v12, v16);
  }
  v17 = *(void **)(v11 + 352);
  if (v17)
    nw_array_append(v12, v17);
  return v12;
}

uint64_t nw_protocol_http1_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  char *handle;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  char *v27;
  _BOOL4 v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  _BOOL4 v34;
  _BOOL4 v35;
  char *v36;
  _BOOL4 v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  const char *v41;
  char *v42;
  _BOOL4 v43;
  const char *v44;
  _BOOL4 v45;
  char v46;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  char *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  int v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_http1_get_http1_protocol";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v21, &type, &v46))
      goto LABEL_94;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        v22 = __nwlog_obj();
        v23 = type;
        if (!os_log_type_enabled(v22, type))
          goto LABEL_94;
        *(_DWORD *)buf = 136446210;
        v49 = "nw_http1_get_http1_protocol";
        v24 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v22 = __nwlog_obj();
      v23 = type;
      v26 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (!v26)
          goto LABEL_94;
        *(_DWORD *)buf = 136446210;
        v49 = "nw_http1_get_http1_protocol";
        v24 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        v49 = "nw_http1_get_http1_protocol";
        v50 = 2082;
        v51 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_94;
    }
    v22 = __nwlog_obj();
    v23 = type;
    if (!os_log_type_enabled(v22, type))
      goto LABEL_94;
    *(_DWORD *)buf = 136446210;
    v49 = "nw_http1_get_http1_protocol";
    v24 = "%{public}s called with null protocol";
LABEL_93:
    _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
    goto LABEL_94;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_http1_get_http1_protocol";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v21, &type, &v46))
      goto LABEL_94;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        v22 = __nwlog_obj();
        v23 = type;
        if (!os_log_type_enabled(v22, type))
          goto LABEL_94;
        *(_DWORD *)buf = 136446210;
        v49 = "nw_http1_get_http1_protocol";
        v24 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_93;
      }
      v27 = (char *)__nw_create_backtrace_string();
      v22 = __nwlog_obj();
      v23 = type;
      v28 = os_log_type_enabled(v22, type);
      if (!v27)
      {
        if (!v28)
          goto LABEL_94;
        *(_DWORD *)buf = 136446210;
        v49 = "nw_http1_get_http1_protocol";
        v24 = "%{public}s called with null handle, no backtrace";
        goto LABEL_93;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        v49 = "nw_http1_get_http1_protocol";
        v50 = 2082;
        v51 = v27;
        v29 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_71:
        _os_log_impl(&dword_182FBE000, v22, v23, v29, buf, 0x16u);
      }
LABEL_72:
      free(v27);
      if (!v21)
      {
LABEL_96:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        v49 = "nw_protocol_http1_updated_path";
        v38 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v46 = 0;
        if (!__nwlog_fault(v38, &type, &v46))
          goto LABEL_128;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v39 = gLogObj;
          v40 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_128;
          *(_DWORD *)buf = 136446210;
          v49 = "nw_protocol_http1_updated_path";
          v41 = "%{public}s called with null http1";
        }
        else if (v46)
        {
          v42 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v39 = gLogObj;
          v40 = type;
          v43 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v42)
          {
            if (v43)
            {
              *(_DWORD *)buf = 136446466;
              v49 = "nw_protocol_http1_updated_path";
              v50 = 2082;
              v51 = v42;
              v44 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_121:
              _os_log_impl(&dword_182FBE000, v39, v40, v44, buf, 0x16u);
            }
LABEL_122:
            free(v42);
            goto LABEL_128;
          }
          if (!v43)
            goto LABEL_128;
          *(_DWORD *)buf = 136446210;
          v49 = "nw_protocol_http1_updated_path";
          v41 = "%{public}s called with null http1, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v39 = gLogObj;
          v40 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_128;
          *(_DWORD *)buf = 136446210;
          v49 = "nw_protocol_http1_updated_path";
          v41 = "%{public}s called with null http1, backtrace limit exceeded";
        }
LABEL_127:
        _os_log_impl(&dword_182FBE000, v39, v40, v41, buf, 0xCu);
LABEL_128:
        if (v38)
          free(v38);
        return 0;
      }
LABEL_95:
      free(v21);
      goto LABEL_96;
    }
    v22 = __nwlog_obj();
    v23 = type;
    if (!os_log_type_enabled(v22, type))
      goto LABEL_94;
    *(_DWORD *)buf = 136446210;
    v49 = "nw_http1_get_http1_protocol";
    v24 = "%{public}s called with null handle";
    goto LABEL_93;
  }
  v5 = *((_DWORD *)handle + 6);
  v6 = a1->handle;
  if (v5 == 1)
    goto LABEL_10;
  if (v5 != 2)
  {
    if (v5 != 3)
      goto LABEL_96;
    v7 = *((_QWORD *)handle + 2);
    if (v7)
    {
      v6 = (_QWORD *)(v7 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_http1_get_http1_protocol";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault(v21, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v22 = __nwlog_obj();
        v23 = type;
        if (!os_log_type_enabled(v22, type))
          goto LABEL_94;
        *(_DWORD *)buf = 136446210;
        v49 = "nw_http1_get_http1_protocol";
        v24 = "%{public}s called with null handle->http1_connection";
        goto LABEL_93;
      }
      if (!v46)
      {
        v22 = __nwlog_obj();
        v23 = type;
        if (!os_log_type_enabled(v22, type))
          goto LABEL_94;
        *(_DWORD *)buf = 136446210;
        v49 = "nw_http1_get_http1_protocol";
        v24 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_93;
      }
      v27 = (char *)__nw_create_backtrace_string();
      v22 = __nwlog_obj();
      v23 = type;
      v34 = os_log_type_enabled(v22, type);
      if (!v27)
      {
        if (!v34)
          goto LABEL_94;
        *(_DWORD *)buf = 136446210;
        v49 = "nw_http1_get_http1_protocol";
        v24 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_93;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446466;
        v49 = "nw_http1_get_http1_protocol";
        v50 = 2082;
        v51 = v27;
        v29 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_71;
      }
      goto LABEL_72;
    }
LABEL_94:
    if (!v21)
      goto LABEL_96;
    goto LABEL_95;
  }
  v8 = *((_QWORD *)handle + 1);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_http1_get_http1_protocol";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v21, &type, &v46))
      goto LABEL_94;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v49 = "nw_http1_get_http1_protocol";
      v24 = "%{public}s called with null handle->http1_stream";
      goto LABEL_93;
    }
    if (!v46)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v49 = "nw_http1_get_http1_protocol";
      v24 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_93;
    }
    v27 = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v35 = os_log_type_enabled(v22, type);
    if (!v27)
    {
      if (!v35)
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v49 = "nw_http1_get_http1_protocol";
      v24 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_93;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      v49 = "nw_http1_get_http1_protocol";
      v50 = 2082;
      v51 = v27;
      v29 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_71;
    }
    goto LABEL_72;
  }
  v6 = (_QWORD *)(v8 + 248);
LABEL_10:
  if (!*v6)
    goto LABEL_96;
  if (v5 != 2)
  {
    if (v5 != 3)
    {
LABEL_113:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_http1_updated_path";
      v38 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v46 = 0;
      if (!__nwlog_fault(v38, &type, &v46))
        goto LABEL_128;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v39 = gLogObj;
        v40 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_128;
        *(_DWORD *)buf = 136446210;
        v49 = "nw_protocol_http1_updated_path";
        v41 = "%{public}s called with null http1_stream";
        goto LABEL_127;
      }
      if (!v46)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v39 = gLogObj;
        v40 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_128;
        *(_DWORD *)buf = 136446210;
        v49 = "nw_protocol_http1_updated_path";
        v41 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_127;
      }
      v42 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v39 = gLogObj;
      v40 = type;
      v45 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v42)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          v49 = "nw_protocol_http1_updated_path";
          v50 = 2082;
          v51 = v42;
          v44 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
          goto LABEL_121;
        }
        goto LABEL_122;
      }
      if (!v45)
        goto LABEL_128;
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_http1_updated_path";
      v41 = "%{public}s called with null http1_stream, no backtrace";
      goto LABEL_127;
    }
    v9 = *((_QWORD *)handle + 2);
    if (v9)
    {
      v10 = (uint64_t *)(v9 + 488);
      goto LABEL_16;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_http1_get_stream_for_protocol";
    v30 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault(v30, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (!os_log_type_enabled(v31, type))
          goto LABEL_111;
        *(_DWORD *)buf = 136446210;
        v49 = "nw_http1_get_stream_for_protocol";
        v33 = "%{public}s called with null handle->http1_connection";
        goto LABEL_110;
      }
      if (!v46)
      {
        v31 = __nwlog_obj();
        v32 = type;
        if (!os_log_type_enabled(v31, type))
          goto LABEL_111;
        *(_DWORD *)buf = 136446210;
        v49 = "nw_http1_get_stream_for_protocol";
        v33 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_110;
      }
      v36 = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      v32 = type;
      v37 = os_log_type_enabled(v31, type);
      if (v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v49 = "nw_http1_get_stream_for_protocol";
          v50 = 2082;
          v51 = v36;
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v36);
        goto LABEL_111;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_http1_get_stream_for_protocol";
        v33 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_110:
        _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0xCu);
      }
    }
LABEL_111:
    if (v30)
      free(v30);
    goto LABEL_113;
  }
  v10 = (uint64_t *)(handle + 8);
LABEL_16:
  v11 = *v10;
  if (!*v10)
    goto LABEL_113;
  v12 = *(_QWORD *)(v11 + 256);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 864);
    v14 = *(_QWORD *)(v12 + 32);
    if ((*(_BYTE *)(v11 + 158) & 1) != 0)
      goto LABEL_25;
  }
  else
  {
    v14 = 0;
    v13 = 5;
    if ((*(_BYTE *)(v11 + 158) & 1) != 0)
      goto LABEL_25;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v15 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
  {
    v16 = *(_QWORD *)(v11 + 256);
    v17 = *(_DWORD *)(*(_QWORD *)(v11 + 248) + 372);
    if (v16)
      LODWORD(v16) = *(_DWORD *)(v16 + 860);
    v18 = *(_DWORD *)(v11 + 424);
    *(_DWORD *)buf = 136448514;
    v49 = "nw_protocol_http1_updated_path";
    v50 = 2082;
    v51 = (char *)(v11 + 74);
    v52 = 2080;
    v53 = " ";
    v54 = 1024;
    v55 = v17;
    v56 = 1024;
    v57 = v16;
    v58 = 1024;
    v59 = v18;
    v60 = 2048;
    v61 = v11;
    v62 = 2048;
    v63 = v12;
    v64 = 1024;
    v65 = v13;
    v66 = 2048;
    v67 = v14;
    _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> called for stream, protocol: %p, connection protocol: %p, connection state: %u, output_handler: %p", buf, 0x56u);
  }
LABEL_25:
  if (v12)
    v19 = v14 == 0;
  else
    v19 = 1;
  if (!v19)
    return nw_protocol_updated_path(v14, v12, (uint64_t)a3);
  return 0;
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD **)(a2 + 40);
  if (v2)
  {
    *(_QWORD *)(v2 + 40) = v3;
    v3 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v3;
  }
  *v3 = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t nw_http1_on_header_value_complete(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  int v7;
  size_t v9;
  uint64_t v10;
  int v11;
  size_t v13;
  char *v14;
  void *v15;
  size_t v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t result;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http1_on_header_value_complete";
    v26 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v26, &type, &v36))
      goto LABEL_88;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v36)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_http1_on_header_value_complete";
          v29 = "%{public}s called with null parser, backtrace limit exceeded";
          goto LABEL_87;
        }
        goto LABEL_88;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v31 = os_log_type_enabled(v27, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_http1_on_header_value_complete";
          v29 = "%{public}s called with null parser, no backtrace";
          goto LABEL_87;
        }
        goto LABEL_88;
      }
      if (!v31)
        goto LABEL_70;
      *(_DWORD *)buf = 136446466;
      v39 = "nw_http1_on_header_value_complete";
      v40 = 2082;
      v41 = backtrace_string;
      v32 = "%{public}s called with null parser, dumping backtrace:%{public}s";
      goto LABEL_69;
    }
    v27 = __nwlog_obj();
    v28 = type;
    if (!os_log_type_enabled(v27, type))
      goto LABEL_88;
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http1_on_header_value_complete";
    v29 = "%{public}s called with null parser";
LABEL_87:
    _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
    goto LABEL_88;
  }
  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http1_on_header_value_complete";
    v26 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v26, &type, &v36))
      goto LABEL_88;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v36)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_http1_on_header_value_complete";
          v29 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_87;
        }
        goto LABEL_88;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v33 = os_log_type_enabled(v27, type);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_http1_on_header_value_complete";
          v29 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_87;
        }
        goto LABEL_88;
      }
      if (!v33)
        goto LABEL_70;
      *(_DWORD *)buf = 136446466;
      v39 = "nw_http1_on_header_value_complete";
      v40 = 2082;
      v41 = backtrace_string;
      v32 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_69;
    }
    v27 = __nwlog_obj();
    v28 = type;
    if (!os_log_type_enabled(v27, type))
      goto LABEL_88;
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http1_on_header_value_complete";
    v29 = "%{public}s called with null http1_connection";
    goto LABEL_87;
  }
  v2 = *(_QWORD *)(v1 + 488);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http1_on_header_value_complete";
    v26 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v26, &type, &v36))
      goto LABEL_88;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, type))
        goto LABEL_88;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_http1_on_header_value_complete";
      v29 = "%{public}s called with null http1_stream";
      goto LABEL_87;
    }
    if (!v36)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_header_value_complete";
        v29 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_87;
      }
      goto LABEL_88;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v27 = __nwlog_obj();
    v28 = type;
    v34 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_header_value_complete";
        v29 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_87;
      }
      goto LABEL_88;
    }
    if (!v34)
      goto LABEL_70;
    *(_DWORD *)buf = 136446466;
    v39 = "nw_http1_on_header_value_complete";
    v40 = 2082;
    v41 = backtrace_string;
    v32 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
LABEL_69:
    _os_log_impl(&dword_182FBE000, v27, v28, v32, buf, 0x16u);
    goto LABEL_70;
  }
  v3 = *(void **)(v2 + 400);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http1_on_header_value_complete";
    v26 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v26, &type, &v36))
      goto LABEL_88;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_header_value_complete";
        v29 = "%{public}s called with null parsed_fields";
        goto LABEL_87;
      }
LABEL_88:
      if (v26)
        free(v26);
      return 0xFFFFFFFFLL;
    }
    if (!v36)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_header_value_complete";
        v29 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
        goto LABEL_87;
      }
      goto LABEL_88;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v27 = __nwlog_obj();
    v28 = type;
    v35 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_header_value_complete";
        v29 = "%{public}s called with null parsed_fields, no backtrace";
        goto LABEL_87;
      }
      goto LABEL_88;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      v39 = "nw_http1_on_header_value_complete";
      v40 = 2082;
      v41 = backtrace_string;
      v32 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
      goto LABEL_69;
    }
LABEL_70:
    free(backtrace_string);
    goto LABEL_88;
  }
  v4 = *(char **)(v1 + 808);
  v5 = *(unsigned int *)(v1 + 844);
  if ((_DWORD)v5)
  {
    v6 = &v4[v5];
    while (1)
    {
      v7 = *v4;
      if (v7 != 32 && v7 != 9)
        break;
      ++v4;
      LODWORD(v5) = v5 - 1;
      if (!(_DWORD)v5)
      {
        v9 = 0;
        v4 = v6;
        goto LABEL_21;
      }
    }
    while (1)
    {
      v10 = (v5 - 1);
      v11 = v4[v10];
      if (v11 != 32 && v11 != 9)
        break;
      LODWORD(v5) = v5 - 1;
      if (!v10)
        goto LABEL_20;
    }
    v9 = v5;
  }
  else
  {
LABEL_20:
    v9 = 0;
  }
LABEL_21:
  v13 = *(unsigned int *)(v1 + 840);
  if ((*(_BYTE *)(*(_QWORD *)(v1 + 480) + 376) & 1) != 0
    && (_DWORD)v13 == 4
    && !strncasecmp(*(const char **)(v1 + 800), "Host", v13))
  {
    v14 = ":authority";
    v15 = v3;
    v16 = -1;
  }
  else
  {
    v14 = *(char **)(v1 + 800);
    v15 = v3;
    v16 = v13;
  }
  if (!nw_http_parsed_fields_add(v15, v14, v16, v4, v9) && (*(_BYTE *)(v1 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(v1 + 488);
      v19 = *(_DWORD *)(*(_QWORD *)(v1 + 480) + 372);
      v20 = *(_DWORD *)(v1 + 860);
      if (v18)
        LODWORD(v18) = *(_DWORD *)(v18 + 424);
      v21 = *(_QWORD *)(v1 + 800);
      v22 = *(_QWORD *)(v1 + 808);
      *(_DWORD *)buf = 136448003;
      v39 = "nw_http1_on_header_value_complete";
      v40 = 2082;
      v41 = (char *)(v1 + 74);
      v42 = 2080;
      v43 = " ";
      v44 = 1024;
      v45 = v19;
      v46 = 1024;
      v47 = v20;
      v48 = 1024;
      v49 = v18;
      v50 = 2085;
      v51 = v21;
      v52 = 2085;
      v53 = v22;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> discarded invalid header %{sensitive}s with value %{sensitive}s", buf, 0x46u);
    }
  }
  v23 = *(void **)(v1 + 800);
  if (v23)
  {
    free(v23);
    *(_QWORD *)(v1 + 800) = 0;
  }
  *(_DWORD *)(v1 + 840) = 0;
  v24 = *(void **)(v1 + 808);
  if (v24)
  {
    free(v24);
    *(_QWORD *)(v1 + 808) = 0;
  }
  result = 0;
  *(_DWORD *)(v1 + 844) = 0;
  return result;
}

uint64_t nw_http1_on_headers_complete(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  __int16 v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  const char *v9;
  int v10;
  char v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id *metadata_for_response;
  char v17;
  void *v18;
  id v19;
  int status_code;
  void *v21;
  id *metadata_for_request;
  char v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  id v28;
  int has_method;
  NSObject *v30;
  uint64_t v31;
  int v32;
  int v33;
  const char *v34;
  uint64_t v35;
  int v36;
  int v37;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  char *backtrace_string;
  _BOOL4 v44;
  const char *v45;
  _BOOL4 v46;
  _BOOL4 v47;
  _BOOL4 v48;
  uint64_t v49;
  int v50;
  int v51;
  char v52;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  char *v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_http1_on_headers_complete";
    v39 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (!__nwlog_fault(v39, &type, &v52))
      goto LABEL_122;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (!os_log_type_enabled(v40, type))
        goto LABEL_122;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_http1_on_headers_complete";
      v42 = "%{public}s called with null parser";
      goto LABEL_121;
    }
    if (!v52)
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (!os_log_type_enabled(v40, type))
        goto LABEL_122;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_http1_on_headers_complete";
      v42 = "%{public}s called with null parser, backtrace limit exceeded";
      goto LABEL_121;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v40 = __nwlog_obj();
    v41 = type;
    v44 = os_log_type_enabled(v40, type);
    if (!backtrace_string)
    {
      if (!v44)
        goto LABEL_122;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_http1_on_headers_complete";
      v42 = "%{public}s called with null parser, no backtrace";
      goto LABEL_121;
    }
    if (!v44)
      goto LABEL_99;
    *(_DWORD *)buf = 136446466;
    v55 = "nw_http1_on_headers_complete";
    v56 = 2082;
    v57 = backtrace_string;
    v45 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_98:
    _os_log_impl(&dword_182FBE000, v40, v41, v45, buf, 0x16u);
    goto LABEL_99;
  }
  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_http1_on_headers_complete";
    v39 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (!__nwlog_fault(v39, &type, &v52))
      goto LABEL_122;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (!os_log_type_enabled(v40, type))
        goto LABEL_122;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_http1_on_headers_complete";
      v42 = "%{public}s called with null http1_connection";
      goto LABEL_121;
    }
    if (!v52)
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (!os_log_type_enabled(v40, type))
        goto LABEL_122;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_http1_on_headers_complete";
      v42 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_121;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v40 = __nwlog_obj();
    v41 = type;
    v46 = os_log_type_enabled(v40, type);
    if (!backtrace_string)
    {
      if (!v46)
        goto LABEL_122;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_http1_on_headers_complete";
      v42 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_121;
    }
    if (!v46)
      goto LABEL_99;
    *(_DWORD *)buf = 136446466;
    v55 = "nw_http1_on_headers_complete";
    v56 = 2082;
    v57 = backtrace_string;
    v45 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
    goto LABEL_98;
  }
  v2 = *(_QWORD *)(v1 + 488);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_http1_on_headers_complete";
    v39 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (!__nwlog_fault(v39, &type, &v52))
      goto LABEL_122;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (!os_log_type_enabled(v40, type))
        goto LABEL_122;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_http1_on_headers_complete";
      v42 = "%{public}s called with null http1_stream";
      goto LABEL_121;
    }
    if (!v52)
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (!os_log_type_enabled(v40, type))
        goto LABEL_122;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_http1_on_headers_complete";
      v42 = "%{public}s called with null http1_stream, backtrace limit exceeded";
      goto LABEL_121;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v40 = __nwlog_obj();
    v41 = type;
    v47 = os_log_type_enabled(v40, type);
    if (!backtrace_string)
    {
      if (!v47)
        goto LABEL_122;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_http1_on_headers_complete";
      v42 = "%{public}s called with null http1_stream, no backtrace";
      goto LABEL_121;
    }
    if (!v47)
      goto LABEL_99;
    *(_DWORD *)buf = 136446466;
    v55 = "nw_http1_on_headers_complete";
    v56 = 2082;
    v57 = backtrace_string;
    v45 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
    goto LABEL_98;
  }
  v3 = *(void **)(v2 + 400);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_http1_on_headers_complete";
    v39 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (!__nwlog_fault(v39, &type, &v52))
      goto LABEL_122;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (!os_log_type_enabled(v40, type))
        goto LABEL_122;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_http1_on_headers_complete";
      v42 = "%{public}s called with null parsed_fields";
      goto LABEL_121;
    }
    if (!v52)
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (!os_log_type_enabled(v40, type))
        goto LABEL_122;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_http1_on_headers_complete";
      v42 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
      goto LABEL_121;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v40 = __nwlog_obj();
    v41 = type;
    v48 = os_log_type_enabled(v40, type);
    if (backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446466;
        v55 = "nw_http1_on_headers_complete";
        v56 = 2082;
        v57 = backtrace_string;
        v45 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
        goto LABEL_98;
      }
LABEL_99:
      free(backtrace_string);
      goto LABEL_122;
    }
    if (!v48)
      goto LABEL_122;
    *(_DWORD *)buf = 136446210;
    v55 = "nw_http1_on_headers_complete";
    v42 = "%{public}s called with null parsed_fields, no backtrace";
LABEL_121:
    _os_log_impl(&dword_182FBE000, v40, v41, v42, buf, 0xCu);
LABEL_122:
    if (v39)
      free(v39);
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 74) && *(_BYTE *)(a1 + 75))
  {
    v4 = *(_WORD *)(a1 + 82);
    if ((v4 & 2) == 0)
      goto LABEL_16;
LABEL_10:
    if ((*(_BYTE *)(v1 + 158) & 1) != 0)
      goto LABEL_27;
    goto LABEL_11;
  }
  v4 = *(_WORD *)(a1 + 82);
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_16:
  if (*(_BYTE *)(a1 + 72) == 1
    || (v10 = *(unsigned __int16 *)(a1 + 84), (v10 - 100) < 0x64)
    || v10 == 204
    || v10 == 304
    || (v4 & 0x40) != 0)
  {
    if ((*(_BYTE *)(v1 + 158) & 1) != 0)
      goto LABEL_27;
    goto LABEL_26;
  }
  if ((v4 & 0x208) == 0x200)
    goto LABEL_10;
  if ((v4 & 0x28) != 0)
  {
    if ((*(_BYTE *)(v1 + 158) & 1) != 0)
      goto LABEL_27;
LABEL_26:
    if (gLogDatapath)
    {
      v5 = __nwlog_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        v49 = *(_QWORD *)(v1 + 488);
        v50 = *(_DWORD *)(*(_QWORD *)(v1 + 480) + 372);
        v51 = *(_DWORD *)(v1 + 860);
        if (v49)
          LODWORD(v49) = *(_DWORD *)(v49 + 424);
        *(_DWORD *)buf = 136447490;
        v55 = "nw_http1_on_headers_complete";
        v56 = 2082;
        v57 = (char *)(v1 + 74);
        v58 = 2080;
        v59 = " ";
        v60 = 1024;
        v61 = v50;
        v62 = 1024;
        v63 = v51;
        v64 = 1024;
        v65 = v49;
        v9 = "%{public}s %{public}s%s<i%u:c%u:s%u> http (headers) should keep alive";
LABEL_104:
        _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, v9, buf, 0x32u);
        goto LABEL_27;
      }
    }
    goto LABEL_27;
  }
  if ((*(_BYTE *)(v1 + 158) & 1) != 0)
    goto LABEL_27;
LABEL_11:
  if (gLogDatapath)
  {
    v5 = __nwlog_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(v1 + 488);
      v7 = *(_DWORD *)(*(_QWORD *)(v1 + 480) + 372);
      v8 = *(_DWORD *)(v1 + 860);
      if (v6)
        LODWORD(v6) = *(_DWORD *)(v6 + 424);
      *(_DWORD *)buf = 136447490;
      v55 = "nw_http1_on_headers_complete";
      v56 = 2082;
      v57 = (char *)(v1 + 74);
      v58 = 2080;
      v59 = " ";
      v60 = 1024;
      v61 = v7;
      v62 = 1024;
      v63 = v8;
      v64 = 1024;
      v65 = v6;
      v9 = "%{public}s %{public}s%s<i%u:c%u:s%u> http (headers) should not keep alive";
      goto LABEL_104;
    }
  }
LABEL_27:
  v11 = *(_BYTE *)(*(_QWORD *)(v2 + 248) + 376);
  v12 = v3;
  if ((v11 & 1) == 0)
  {
    v13 = (void *)_nw_http_parsed_fields_copy_response();

    if (v13)
    {
      if (*(_QWORD *)(v2 + 416))
      {
        v14 = v13;
        _nw_http_response_set_reason_phrase();

        v15 = *(void **)(v2 + 416);
        if (v15)
        {
          free(v15);
          *(_QWORD *)(v2 + 416) = 0;
        }
      }
      metadata_for_response = nw_http_create_metadata_for_response(v13);
      v17 = *(_BYTE *)(v2 + 376);
      if ((v17 & 1) != 0)
      {
        v18 = *(void **)(v2 + 368);
        if (v18)
        {
          os_release(v18);
          v17 = *(_BYTE *)(v2 + 376);
        }
      }
      *(_QWORD *)(v2 + 368) = metadata_for_response;
      *(_BYTE *)(v2 + 376) = v17 | 1;
      v19 = v13;
      status_code = _nw_http_response_get_status_code();

      os_release(v19);
      nw_http_metadata_set_version(*(void **)(v2 + 368), 3);
      if ((status_code - 100) <= 0x63 && status_code != 101)
        goto LABEL_44;
      goto LABEL_43;
    }
    if ((*(_BYTE *)(v1 + 158) & 1) != 0)
      return 0xFFFFFFFFLL;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v30 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return 0xFFFFFFFFLL;
    v31 = *(_QWORD *)(v1 + 488);
    v32 = *(_DWORD *)(*(_QWORD *)(v1 + 480) + 372);
    v33 = *(_DWORD *)(v1 + 860);
    if (v31)
      LODWORD(v31) = *(_DWORD *)(v31 + 424);
    *(_DWORD *)buf = 136447490;
    v55 = "nw_http1_on_headers_complete";
    v56 = 2082;
    v57 = (char *)(v1 + 74);
    v58 = 2080;
    v59 = " ";
    v60 = 1024;
    v61 = v32;
    v62 = 1024;
    v63 = v33;
    v64 = 1024;
    v65 = v31;
    v34 = "%{public}s %{public}s%s<i%u:c%u:s%u> invalid response received";
LABEL_61:
    _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_ERROR, v34, buf, 0x32u);
    return 0xFFFFFFFFLL;
  }
  v21 = (void *)_nw_http_parsed_fields_copy_request();

  if (!v21)
  {
    if ((*(_BYTE *)(v1 + 158) & 1) != 0)
      return 0xFFFFFFFFLL;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v30 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return 0xFFFFFFFFLL;
    v35 = *(_QWORD *)(v1 + 488);
    v36 = *(_DWORD *)(*(_QWORD *)(v1 + 480) + 372);
    v37 = *(_DWORD *)(v1 + 860);
    if (v35)
      LODWORD(v35) = *(_DWORD *)(v35 + 424);
    *(_DWORD *)buf = 136447490;
    v55 = "nw_http1_on_headers_complete";
    v56 = 2082;
    v57 = (char *)(v1 + 74);
    v58 = 2080;
    v59 = " ";
    v60 = 1024;
    v61 = v36;
    v62 = 1024;
    v63 = v37;
    v64 = 1024;
    v65 = v35;
    v34 = "%{public}s %{public}s%s<i%u:c%u:s%u> invalid request received";
    goto LABEL_61;
  }
  metadata_for_request = nw_http_create_metadata_for_request(v21);
  v23 = *(_BYTE *)(v2 + 376);
  if ((v23 & 1) != 0)
  {
    v24 = *(void **)(v2 + 368);
    if (v24)
    {
      os_release(v24);
      v23 = *(_BYTE *)(v2 + 376);
    }
  }
  *(_QWORD *)(v2 + 368) = metadata_for_request;
  *(_BYTE *)(v2 + 376) = v23 | 1;
  os_release(v21);
  nw_http_metadata_set_version(*(void **)(v2 + 368), 3);
LABEL_43:
  *(_WORD *)(v2 + 428) |= 1u;
LABEL_44:
  nw_http_transaction_metadata_set_inbound_message(*(void **)(v2 + 352), *(void **)(v2 + 368));
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 248) + 376) & 1) != 0)
    return 21;
  v25 = *(void **)(v2 + 384);
  if (!v25)
    return 21;
  v26 = nw_http_metadata_copy_request(v25);
  v27 = 21;
  if (v26)
  {
    v28 = v26;
    has_method = _nw_http_request_has_method((uint64_t)v28);

    os_release(v28);
    if (has_method)
      return 1;
    else
      return 21;
  }
  return v27;
}

uint64_t nw_http1_on_message_complete(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  _WORD *v4;
  __int16 v5;
  int v6;
  int v7;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  int v21;
  char *backtrace_string;
  _BOOL4 v23;
  const char *v24;
  _BOOL4 v25;
  NSObject *v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
    {
      if ((*(_BYTE *)(v2 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v14 = __nwlog_obj();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            v15 = *(_QWORD *)(v2 + 488);
            v16 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
            v17 = *(_DWORD *)(v2 + 860);
            if (v15)
              LODWORD(v15) = *(_DWORD *)(v15 + 424);
            *(_DWORD *)buf = 136447490;
            v30 = "nw_http1_on_message_complete";
            v31 = 2082;
            v32 = (char *)(v2 + 74);
            v33 = 2080;
            v34 = " ";
            v35 = 1024;
            v36 = v16;
            v37 = 1024;
            v38 = v17;
            v39 = 1024;
            v40 = v15;
            _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> message is complete", buf, 0x32u);
          }
        }
      }
      v3 = nw_http_parsed_fields_copy_trailer_fields(*(void **)(*(_QWORD *)(v2 + 488) + 400));
      if (nw_http_fields_get_count((void *)v3))
      {
        if ((*(_BYTE *)(v2 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v18 = __nwlog_obj();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
              v19 = *(_QWORD *)(v2 + 488);
              v20 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
              v21 = *(_DWORD *)(v2 + 860);
              if (v19)
                LODWORD(v19) = *(_DWORD *)(v19 + 424);
              *(_DWORD *)buf = 136447490;
              v30 = "nw_http1_on_message_complete";
              v31 = 2082;
              v32 = (char *)(v2 + 74);
              v33 = 2080;
              v34 = " ";
              v35 = 1024;
              v36 = v20;
              v37 = 1024;
              v38 = v21;
              v39 = 1024;
              v40 = v19;
              _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> received trailer fields", buf, 0x32u);
            }
          }
        }
        nw_http_metadata_set_trailer_fields(*(void **)(*(_QWORD *)(v2 + 488) + 368), (void *)v3);
      }
      v4 = (_WORD *)(v2 + 872);
      *(_WORD *)(v2 + 872) |= 4u;
      if (*(_BYTE *)(a1 + 74) && *(_BYTE *)(a1 + 75))
      {
        v5 = *(_WORD *)(a1 + 82);
        if ((v5 & 2) != 0)
          goto LABEL_14;
      }
      else
      {
        v5 = *(_WORD *)(a1 + 82);
        if ((v5 & 1) == 0)
          goto LABEL_14;
      }
      if (*(_BYTE *)(a1 + 72) == 1
        || (v7 = *(unsigned __int16 *)(a1 + 84), (v7 - 100) < 0x64)
        || v7 == 204
        || v7 == 304
        || (v5 & 0x40) != 0)
      {
        if (gLogDatapath)
          goto LABEL_60;
        goto LABEL_26;
      }
      if ((v5 & 0x208) != 0x200)
      {
        if ((v5 & 0x28) != 0)
        {
          if (gLogDatapath)
          {
LABEL_60:
            v26 = __nwlog_obj();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              v30 = "nw_http1_on_message_complete";
              _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s http should keep alive", buf, 0xCu);
            }
          }
LABEL_26:
          v6 = (unsigned __int16)*v4 | (*(unsigned __int8 *)(v2 + 874) << 16) | 8;
          goto LABEL_27;
        }
        if (gLogDatapath)
          goto LABEL_32;
        goto LABEL_15;
      }
LABEL_14:
      if (gLogDatapath)
      {
LABEL_32:
        v9 = __nwlog_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_http1_on_message_complete";
          _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s http should not keep alive", buf, 0xCu);
        }
      }
LABEL_15:
      v6 = *v4 & 0xFFF7 | (*(unsigned __int8 *)(v2 + 874) << 16);
LABEL_27:
      *v4 = v6;
      *(_BYTE *)(v2 + 874) = BYTE2(v6);
      nw_http_transaction_metadata_mark_inbound_message_end(*(void **)(*(_QWORD *)(v2 + 488) + 352));
      if (v3)
        os_release((void *)v3);
      return 0;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_http1_on_message_complete";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v10, &type, &v27))
      goto LABEL_71;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http1_on_message_complete";
        v13 = "%{public}s called with null http1_connection";
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    if (!v27)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http1_on_message_complete";
        v13 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v25 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http1_on_message_complete";
        v13 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_http1_on_message_complete";
      v31 = 2082;
      v32 = backtrace_string;
      v24 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_58;
    }
    goto LABEL_59;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_http1_on_message_complete";
  v10 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (!__nwlog_fault(v10, &type, &v27))
    goto LABEL_71;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v27)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http1_on_message_complete";
        v13 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v23 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http1_on_message_complete";
        v13 = "%{public}s called with null parser, no backtrace";
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_http1_on_message_complete";
      v31 = 2082;
      v32 = backtrace_string;
      v24 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_58:
      _os_log_impl(&dword_182FBE000, v11, v12, v24, buf, 0x16u);
    }
LABEL_59:
    free(backtrace_string);
    goto LABEL_71;
  }
  v11 = __nwlog_obj();
  v12 = type;
  if (os_log_type_enabled(v11, type))
  {
    *(_DWORD *)buf = 136446210;
    v30 = "nw_http1_on_message_complete";
    v13 = "%{public}s called with null parser";
LABEL_70:
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
  }
LABEL_71:
  if (v10)
    free(v10);
  return 0xFFFFFFFFLL;
}

void ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  _WORD *v13;
  _BYTE *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  int v22;
  int v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  NSObject *v27;
  int v28;
  const char *v29;
  int v30;
  _BYTE *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  uint64_t v36;
  _QWORD *v37;
  _OWORD *v38;
  void *v39;
  void *v40;
  _OWORD *v41;
  uint64_t v42;
  void *v43;
  char v44;
  void *v45;
  void *v46;
  char v47;
  void *v48;
  _QWORD *v49;
  id v50;
  char v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id *metadata;
  char v56;
  void *v57;
  uint64_t v58;
  char v59;
  char v60;
  NSObject *v61;
  uint64_t v62;
  int v63;
  int v64;
  NSObject **v65;
  void *v66;
  uint64_t v67;
  _BYTE *v68;
  void **v69;
  id v70;
  void *v71;
  _OWORD *v72;
  id v73;
  id v74;
  id v75;
  void *v76;
  NSObject *v77;
  NSObject *v78;
  __int16 v79;
  int v80;
  id v81;
  void *v82;
  NSObject *v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  const char *v94;
  char *backtrace_string;
  _BOOL4 v96;
  int v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  NSObject *v102;
  os_log_type_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  _BOOL4 v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  NSObject *v112;
  _BOOL4 v113;
  uint64_t v114;
  int v115;
  int v116;
  char *v117;
  _BOOL4 v118;
  uint64_t v119;
  _OWORD *v120;
  char *v121;
  _BOOL4 v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  _BYTE *v130;
  char *v131;
  NSObject *v132;
  os_log_type_t v133;
  const char *v134;
  uint64_t v135;
  _QWORD *v136;
  char *v137;
  _BOOL4 v138;
  int v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  NSObject *v144;
  os_log_type_t v145;
  uint64_t v146;
  const char *v147;
  char *v148;
  _BOOL4 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  NSObject *v155;
  os_log_type_t v156;
  uint64_t v157;
  const char *v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  NSObject *v163;
  uint64_t v164;
  int v165;
  int v166;
  NSObject *v167;
  uint64_t v168;
  int v169;
  int v170;
  char *v171;
  _BOOL4 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  char *v177;
  _BOOL4 v178;
  uint64_t v179;
  int v180;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  NSObject *v185;
  os_log_type_t v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  NSObject *v195;
  os_log_type_t v196;
  uint64_t v197;
  const char *v198;
  _OWORD *v199;
  char *v200;
  _BOOL4 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  NSObject *v207;
  os_log_type_t v208;
  uint64_t v209;
  const char *v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  NSObject *v215;
  uint64_t v216;
  int v217;
  int v218;
  NSObject *v219;
  uint64_t v220;
  int v221;
  int v222;
  _OWORD *v223;
  char *v224;
  _BOOL4 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  NSObject *v229;
  uint64_t v230;
  int v231;
  int v232;
  void *v233;
  char *v234;
  _QWORD *v235;
  _BOOL4 v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  void *v240;
  NSObject *v241;
  NSObject *v242;
  NSObject *v243;
  int v244;
  uint64_t v245;
  char *v246;
  NSObject *v247;
  os_log_type_t v248;
  uint64_t v249;
  const char *v250;
  char *v251;
  _BOOL4 v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  _BOOL4 v257;
  uint64_t v258;
  uint64_t v259;
  NSObject *v260;
  _BOOL4 v261;
  int v262;
  uint64_t v263;
  void *v264;
  void *v265;
  _OWORD *v266;
  uint64_t v267;
  uint64_t v268;
  void *v269;
  uint64_t v270;
  char v271;
  char v272;
  NSObject *v273;
  uint64_t v274;
  int v275;
  int v276;
  NSObject **v277;
  void *v278;
  uint64_t v279;
  _BYTE *v280;
  void **v281;
  id v282;
  void *v283;
  id v284;
  id v285;
  id v286;
  void *v287;
  NSObject *v288;
  NSObject *v289;
  __int16 v290;
  int v291;
  id v292;
  void *v293;
  NSObject *v294;
  _BOOL4 v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  NSObject *v302;
  os_log_type_t v303;
  uint64_t v304;
  const char *v305;
  NSObject *v306;
  uint64_t v307;
  char *v308;
  _BOOL4 v309;
  uint64_t v310;
  NSObject *v311;
  _BOOL4 is_quic;
  void *v313;
  void *v314;
  NSObject *v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  NSObject *v321;
  os_log_type_t v322;
  uint64_t v323;
  const char *v324;
  char *v325;
  _BOOL4 v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  NSObject *v335;
  os_log_type_t v336;
  uint64_t v337;
  const char *v338;
  char *v339;
  _BOOL4 v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  NSObject *v346;
  os_log_type_t v347;
  uint64_t v348;
  const char *v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  NSObject *v354;
  uint64_t v355;
  int v356;
  int v357;
  NSObject *v358;
  uint64_t v359;
  int v360;
  int v361;
  char *v362;
  _BOOL4 v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  NSObject *v367;
  uint64_t v368;
  int v369;
  int v370;
  void *v371;
  char *identifier;
  _QWORD *v373;
  _BOOL4 v374;
  uint64_t v375;
  void *v376;
  uint64_t v377;
  void *v378;
  NSObject *v379;
  NSObject *v380;
  NSObject *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  void *v385;
  NSObject *v386;
  _BOOL4 v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  int v391;
  _OWORD *v392;
  _BYTE *v393;
  NSObject *v394;
  _BOOL4 v395;
  int v396;
  char *v397;
  NSObject *v398;
  os_log_type_t v399;
  const char *v400;
  _OWORD *v401;
  _BYTE *v402;
  NSObject *v403;
  _BOOL4 v404;
  uint64_t v405;
  int v406;
  int v407;
  _BYTE *v408;
  NSObject *v409;
  _BOOL4 v410;
  int v411;
  int v412;
  _BYTE *v413;
  NSObject *v414;
  _BOOL4 v415;
  uint64_t v416;
  int v417;
  int v418;
  int v419;
  NSObject *v420;
  uint64_t v421;
  uint64_t v422;
  int v423;
  int v424;
  int v425;
  char *v426;
  _BOOL4 v427;
  _BYTE *v428;
  NSObject *v429;
  _BOOL4 v430;
  uint64_t v431;
  int v432;
  int v433;
  _OWORD *v434;
  char *v435;
  NSObject *v436;
  os_log_type_t v437;
  const char *v438;
  char *v439;
  NSObject *v440;
  os_log_type_t v441;
  const char *v442;
  NSObject *v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  int v447;
  uint64_t v448;
  NSObject *v449;
  void *v450;
  _OWORD *v451;
  char *v452;
  NSObject *v453;
  os_log_type_t v454;
  const char *v455;
  _OWORD *v456;
  char *v457;
  NSObject *v458;
  os_log_type_t v459;
  const char *v460;
  char *v461;
  NSObject *v462;
  os_log_type_t v463;
  const char *v464;
  NSObject *v465;
  uint64_t v466;
  int v467;
  int v468;
  NSObject *v469;
  uint64_t v470;
  int v471;
  int v472;
  int v473;
  _BYTE *v474;
  NSObject *v475;
  _BOOL4 v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  int v480;
  char *v481;
  NSObject *v482;
  os_log_type_t v483;
  const char *v484;
  char *v485;
  NSObject *v486;
  os_log_type_t v487;
  const char *v488;
  NSObject *v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  int v493;
  uint64_t v494;
  char *v495;
  _BOOL4 v496;
  char *v497;
  _BOOL4 v498;
  char *v499;
  _BOOL4 v500;
  const char *v501;
  NSObject *v502;
  void *v503;
  char *v504;
  NSObject *v505;
  os_log_type_t v506;
  const char *v507;
  char *v508;
  NSObject *v509;
  os_log_type_t v510;
  const char *v511;
  char *v512;
  NSObject *v513;
  os_log_type_t v514;
  const char *v515;
  _BOOL4 v516;
  NSObject *v517;
  uint64_t v518;
  int v519;
  int v520;
  NSObject *v521;
  uint64_t v522;
  int v523;
  int v524;
  int v525;
  char *v526;
  _BOOL4 v527;
  char *v528;
  _BOOL4 v529;
  char *v530;
  _BOOL4 v531;
  _BYTE *v532;
  NSObject *v533;
  _BOOL4 v534;
  int v535;
  int v536;
  char *v537;
  _BOOL4 v538;
  char *v539;
  _BOOL4 v540;
  char *v541;
  _BOOL4 v542;
  const char *v543;
  _BOOL4 v544;
  char *v545;
  _BOOL4 v546;
  char *v547;
  _BOOL4 v548;
  char *v549;
  _BOOL4 v550;
  _BYTE *v551;
  NSObject *v552;
  _BOOL4 v553;
  uint64_t v554;
  uint64_t v555;
  int v556;
  int v557;
  int v558;
  char *v559;
  NSObject *v560;
  os_log_type_t v561;
  const char *v562;
  char *v563;
  _BOOL4 v564;
  char *v565;
  NSObject *v566;
  os_log_type_t v567;
  const char *v568;
  char *v569;
  _BOOL4 v570;
  char *v571;
  NSObject *v572;
  os_log_type_t v573;
  const char *v574;
  char *v575;
  _BOOL4 v576;
  char *v577;
  NSObject *v578;
  os_log_type_t v579;
  const char *v580;
  char *v581;
  _BOOL4 v582;
  uint64_t v583;
  uint64_t v584;
  _OWORD *v585;
  _OWORD *v586;
  _OWORD *v587;
  _OWORD *v588;
  uint64_t v589;
  uint64_t v590;
  char v591;
  os_log_type_t v592;
  _QWORD v593[6];
  uint64_t aBlock;
  uint64_t v595;
  void *v596;
  void *v597;
  uint64_t *v598;
  os_log_type_t *v599;
  uint64_t v600;
  os_log_type_t type[8];
  uint64_t v602;
  uint64_t v603;
  uint64_t (*v604)(uint64_t, uint64_t);
  void (*v605)(uint64_t);
  void *v606;
  char v607;
  uint64_t v608;
  uint64_t *v609;
  uint64_t v610;
  char v611;
  _BYTE v612[24];
  uint64_t v613;
  _BYTE v614[10];
  __int16 v615;
  char *v616;
  _BYTE buf[24];
  uint64_t v618;
  _BYTE v619[44];
  uint64_t v620;

  v620 = *MEMORY[0x1E0C80C00];
  v1 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (!v1)
    return;
  v3 = v1;
  v4 = &unk_1ECD84000;
  v590 = v1;
  if ((*(_BYTE *)(v1 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v260 = __nwlog_obj();
      v261 = os_log_type_enabled(v260, OS_LOG_TYPE_DEBUG);
      v4 = &unk_1ECD84000;
      v3 = v590;
      if (v261)
      {
        v262 = *(_DWORD *)(v590 + 372);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_match_idle_connection_with_pending_stream_async_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v590 + 74;
        *(_WORD *)&buf[22] = 2080;
        v618 = (uint64_t)" ";
        *(_WORD *)v619 = 1024;
        *(_DWORD *)&v619[2] = v262;
        _os_log_impl(&dword_182FBE000, v260, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> space opened in connection pool, checking for pending streams", buf, 0x26u);
        v4 = &unk_1ECD84000;
        v3 = v590;
      }
    }
  }
  v5 = *(_QWORD *)(v3 + 248);
  if (v5)
  {
    v589 = *(_QWORD *)(v3 + 248);
    if ((*(_BYTE *)(v5 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v386 = __nwlog_obj();
        v387 = os_log_type_enabled(v386, OS_LOG_TYPE_DEBUG);
        v4 = &unk_1ECD84000;
        v3 = v590;
        if (v387)
        {
          v388 = v5 + 74;
          v389 = *(_QWORD *)(v5 + 256);
          v390 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
          if (v389)
            LODWORD(v389) = *(_DWORD *)(v389 + 860);
          v5 = v589;
          v391 = *(_DWORD *)(v589 + 424);
          *(_DWORD *)buf = 136448002;
          *(_QWORD *)&buf[4] = "nw_http1_get_next_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v388;
          *(_WORD *)&buf[22] = 2080;
          v618 = (uint64_t)" ";
          *(_WORD *)v619 = 1024;
          *(_DWORD *)&v619[2] = v390;
          *(_WORD *)&v619[6] = 1024;
          *(_DWORD *)&v619[8] = v389;
          *(_WORD *)&v619[12] = 1024;
          *(_DWORD *)&v619[14] = v391;
          *(_WORD *)&v619[18] = 1024;
          *(_DWORD *)&v619[20] = v391;
          *(_WORD *)&v619[24] = 2048;
          *(_QWORD *)&v619[26] = v589;
          _os_log_impl(&dword_182FBE000, v386, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> found stream %u (%p)", buf, 0x42u);
          v3 = v590;
          v4 = &unk_1ECD84000;
        }
      }
    }
    v6 = (_OWORD *)(v5 + 64);
    v7 = *(_QWORD *)(v3 + 208);
    if (v7)
    {
      v8 = 0;
      v9 = v3 + 74;
      do
      {
        v10 = v7;
        v7 = *(_QWORD *)(v7 + 592);
        if ((*(_WORD *)(v10 + 872) & 0x800) == 0)
        {
          if ((*(_BYTE *)(v3 + 158) & 1) != 0 || !v4[1345])
          {
            v8 = v10;
          }
          else
          {
            v583 = v9;
            v586 = v6;
            v11 = __nwlog_obj();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
            {
              v12 = *(_DWORD *)(v590 + 372);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_http1_get_next_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v583;
              *(_WORD *)&buf[22] = 2080;
              v618 = (uint64_t)" ";
              *(_WORD *)v619 = 1024;
              *(_DWORD *)&v619[2] = v12;
              *(_WORD *)&v619[6] = 2048;
              *(_QWORD *)&v619[8] = v10;
              _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> found idle connection connection %p", buf, 0x30u);
              v9 = v583;
              v3 = v590;
              v8 = v10;
              v6 = v586;
              v4 = (_BYTE *)&unk_1ECD84000;
            }
            else
            {
              v8 = v10;
              v3 = v590;
              v6 = v586;
              v4 = (_BYTE *)&unk_1ECD84000;
              v9 = v583;
            }
          }
        }
      }
      while (v7);
      v5 = v589;
      if (v8)
      {
        v584 = v9;
        if ((*(_BYTE *)(v8 + 158) & 1) == 0)
        {
          if (v4[1345])
          {
            v401 = v6;
            v402 = v4;
            v403 = __nwlog_obj();
            v404 = os_log_type_enabled(v403, OS_LOG_TYPE_DEBUG);
            v4 = v402;
            v6 = v401;
            v3 = v590;
            if (v404)
            {
              v405 = *(_QWORD *)(v8 + 488);
              v406 = *(_DWORD *)(*(_QWORD *)(v8 + 480) + 372);
              v407 = *(_DWORD *)(v8 + 860);
              if (v405)
                LODWORD(v405) = *(_DWORD *)(v405 + 424);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v8 + 74;
              *(_WORD *)&buf[22] = 2080;
              v618 = (uint64_t)" ";
              *(_WORD *)v619 = 1024;
              *(_DWORD *)&v619[2] = v406;
              *(_WORD *)&v619[6] = 1024;
              *(_DWORD *)&v619[8] = v407;
              *(_WORD *)&v619[12] = 1024;
              *(_DWORD *)&v619[14] = v405;
              *(_WORD *)&v619[18] = 2048;
              *(_QWORD *)&v619[20] = v8;
              _os_log_impl(&dword_182FBE000, v403, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection %p", buf, 0x3Cu);
              v5 = v589;
              v3 = v590;
              v6 = v401;
              v4 = v402;
            }
          }
        }
        v587 = v6;
        v13 = (_WORD *)(v8 + 872);
        if (((*(unsigned __int16 *)(v8 + 872) | (*(unsigned __int8 *)(v8 + 874) << 16)) & 0x80000) == 0)
        {
          v14 = v4;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v8;
          v15 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v15, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v16 = gLogObj;
              v17 = type[0];
              if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v8;
                v18 = "%{public}s connection %p not in idle list, cannot remove";
LABEL_150:
                _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0x16u);
              }
            }
            else if ((_BYTE)aBlock)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v16 = gLogObj;
              v17 = type[0];
              v96 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
              if (backtrace_string)
              {
                if (v96)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v8;
                  *(_WORD *)&buf[22] = 2082;
                  v618 = (uint64_t)backtrace_string;
                  _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s connection %p not in idle list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
                }
                free(backtrace_string);
                goto LABEL_151;
              }
              if (v96)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v8;
                v18 = "%{public}s connection %p not in idle list, cannot remove, no backtrace";
                goto LABEL_150;
              }
            }
            else
            {
              v16 = __nwlog_obj();
              v17 = type[0];
              if (os_log_type_enabled(v16, type[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v8;
                v18 = "%{public}s connection %p not in idle list, cannot remove, backtrace limit exceeded";
                goto LABEL_150;
              }
            }
          }
LABEL_151:
          v5 = v589;
          if (v15)
            free(v15);
          v3 = v590;
          v4 = v14;
          goto LABEL_175;
        }
        v36 = *(_QWORD *)(v8 + 592);
        v37 = *(_QWORD **)(v8 + 600);
        if (v36)
        {
          *(_QWORD *)(v36 + 600) = v37;
          v37 = *(_QWORD **)(v8 + 600);
        }
        else
        {
          *(_QWORD *)(v3 + 216) = v37;
        }
        *v37 = v36;
        *(_QWORD *)(v8 + 592) = 0;
        *(_QWORD *)(v8 + 600) = 0;
        v97 = *(_DWORD *)(v3 + 340);
        *(_DWORD *)(v3 + 340) = v97 - 1;
        if (v97)
        {
LABEL_169:
          v128 = (unsigned __int16)*v13;
          v129 = (v128 | (*(unsigned __int8 *)(v8 + 874) << 16)) & 0xFFF7FFFF;
          *v13 = v128;
          *(_BYTE *)(v8 + 874) = BYTE2(v129);
          if ((*(_BYTE *)(v8 + 158) & 1) == 0)
          {
            if (v4[1345])
            {
              v413 = v4;
              v414 = __nwlog_obj();
              v415 = os_log_type_enabled(v414, OS_LOG_TYPE_DEBUG);
              v4 = v413;
              v3 = v590;
              if (v415)
              {
                v416 = *(_QWORD *)(v8 + 488);
                v417 = *(_DWORD *)(*(_QWORD *)(v8 + 480) + 372);
                v418 = *(_DWORD *)(v8 + 860);
                if (v416)
                  LODWORD(v416) = *(_DWORD *)(v416 + 424);
                v419 = *(_DWORD *)(v590 + 340);
                *(_DWORD *)buf = 136448002;
                *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v8 + 74;
                *(_WORD *)&buf[22] = 2080;
                v618 = (uint64_t)" ";
                *(_WORD *)v619 = 1024;
                *(_DWORD *)&v619[2] = v417;
                *(_WORD *)&v619[6] = 1024;
                *(_DWORD *)&v619[8] = v418;
                *(_WORD *)&v619[12] = 1024;
                *(_DWORD *)&v619[14] = v416;
                *(_WORD *)&v619[18] = 2048;
                *(_QWORD *)&v619[20] = v8;
                *(_WORD *)&v619[28] = 1024;
                *(_DWORD *)&v619[30] = v419;
                _os_log_impl(&dword_182FBE000, v414, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed idle connection %p, now have %u idle connections", buf, 0x42u);
                v3 = v590;
                v5 = v589;
                v4 = v413;
              }
            }
          }
          if (*(_QWORD *)(v8 + 784))
          {
            if ((*(_BYTE *)(v8 + 158) & 1) == 0)
            {
              if (v4[1345])
              {
                v428 = v4;
                v429 = __nwlog_obj();
                v430 = os_log_type_enabled(v429, OS_LOG_TYPE_DEBUG);
                v4 = v428;
                if (v430)
                {
                  v431 = *(_QWORD *)(v8 + 488);
                  v432 = *(_DWORD *)(*(_QWORD *)(v8 + 480) + 372);
                  v433 = *(_DWORD *)(v8 + 860);
                  if (v431)
                    LODWORD(v431) = *(_DWORD *)(v431 + 424);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v8 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v618 = (uint64_t)" ";
                  *(_WORD *)v619 = 1024;
                  *(_DWORD *)&v619[2] = v432;
                  *(_WORD *)&v619[6] = 1024;
                  *(_DWORD *)&v619[8] = v433;
                  *(_WORD *)&v619[12] = 1024;
                  *(_DWORD *)&v619[14] = v431;
                  *(_WORD *)&v619[18] = 2048;
                  *(_QWORD *)&v619[20] = v8;
                  _os_log_impl(&dword_182FBE000, v429, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> deactivating destroy timer for connection %p", buf, 0x3Cu);
                  v5 = v589;
                  v4 = v428;
                }
              }
            }
            v130 = v4;
            nw_queue_cancel_source(*(_QWORD *)(v8 + 784), v2);
            v4 = v130;
            *(_QWORD *)(v8 + 784) = 0;
            v3 = v590;
          }
LABEL_175:
          if ((*(_BYTE *)(v3 + 158) & 1) == 0)
          {
            if (v4[1345])
            {
              v408 = v4;
              v409 = __nwlog_obj();
              v410 = os_log_type_enabled(v409, OS_LOG_TYPE_DEBUG);
              v4 = v408;
              v3 = v590;
              if (v410)
              {
                v411 = *(_DWORD *)(v590 + 372);
                v412 = *(_DWORD *)(v5 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v584;
                *(_WORD *)&buf[22] = 2080;
                v618 = (uint64_t)" ";
                *(_WORD *)v619 = 1024;
                *(_DWORD *)&v619[2] = v411;
                *(_WORD *)&v619[6] = 1024;
                *(_DWORD *)&v619[8] = v412;
                *(_WORD *)&v619[12] = 2048;
                *(_QWORD *)&v619[14] = v5;
                _os_log_impl(&dword_182FBE000, v409, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
                v4 = v408;
                v3 = v590;
              }
            }
          }
          if ((*(_WORD *)(v5 + 428) & 0x1000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v5;
            v131 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (!__nwlog_fault(v131, type, &aBlock))
              goto LABEL_205;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v132 = gLogObj;
              v133 = type[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
                goto LABEL_205;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v5;
              v134 = "%{public}s stream %p not in pending list, cannot remove";
            }
            else if ((_BYTE)aBlock)
            {
              v137 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v132 = gLogObj;
              v133 = type[0];
              v138 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
              if (v137)
              {
                if (v138)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v5;
                  *(_WORD *)&buf[22] = 2082;
                  v618 = (uint64_t)v137;
                  _os_log_impl(&dword_182FBE000, v132, v133, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
                }
                free(v137);
                goto LABEL_205;
              }
              if (!v138)
              {
LABEL_205:
                if (v131)
                  free(v131);
                goto LABEL_217;
              }
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v5;
              v134 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
            }
            else
            {
              v132 = __nwlog_obj();
              v133 = type[0];
              if (!os_log_type_enabled(v132, type[0]))
                goto LABEL_205;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v5;
              v134 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
            }
            _os_log_impl(&dword_182FBE000, v132, v133, v134, buf, 0x16u);
            goto LABEL_205;
          }
          v135 = *(_QWORD *)(v5 + 296);
          v136 = *(_QWORD **)(v5 + 304);
          if (v135)
          {
            *(_QWORD *)(v135 + 304) = v136;
            v136 = *(_QWORD **)(v5 + 304);
          }
          else
          {
            *(_QWORD *)(v3 + 256) = v136;
          }
          *v136 = v135;
          *(_QWORD *)(v5 + 296) = 0;
          *(_QWORD *)(v5 + 304) = 0;
          v139 = *(_DWORD *)(v3 + 348);
          *(_DWORD *)(v3 + 348) = v139 - 1;
          if (v139)
          {
LABEL_215:
            *(_WORD *)(v5 + 428) &= ~0x1000u;
            if ((*(_BYTE *)(v5 + 158) & 1) == 0)
            {
              if (v4[1345])
              {
                v420 = __nwlog_obj();
                if (os_log_type_enabled(v420, OS_LOG_TYPE_DEBUG))
                {
                  v421 = v5 + 74;
                  v422 = *(_QWORD *)(v5 + 256);
                  v423 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
                  if (v422)
                    LODWORD(v422) = *(_DWORD *)(v422 + 860);
                  v5 = v589;
                  v424 = *(_DWORD *)(v589 + 424);
                  v425 = *(_DWORD *)(v590 + 348);
                  *(_DWORD *)buf = 136448258;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v421;
                  *(_WORD *)&buf[22] = 2080;
                  v618 = (uint64_t)" ";
                  *(_WORD *)v619 = 1024;
                  *(_DWORD *)&v619[2] = v423;
                  *(_WORD *)&v619[6] = 1024;
                  *(_DWORD *)&v619[8] = v422;
                  *(_WORD *)&v619[12] = 1024;
                  *(_DWORD *)&v619[14] = v424;
                  *(_WORD *)&v619[18] = 1024;
                  *(_DWORD *)&v619[20] = v424;
                  *(_WORD *)&v619[24] = 2048;
                  *(_QWORD *)&v619[26] = v589;
                  *(_WORD *)&v619[34] = 1024;
                  *(_DWORD *)&v619[36] = v425;
                  _os_log_impl(&dword_182FBE000, v420, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams", buf, 0x48u);
                }
              }
            }
LABEL_217:
            if (*(_QWORD *)(v5 + 248))
            {
              if (!*(_QWORD *)(v8 + 488))
              {
                *(_QWORD *)(v5 + 256) = v8;
                *(_QWORD *)(v8 + 488) = v5;
                nw_protocol_set_output_handler(v5, *(_QWORD *)(v8 + 32));
                nw_protocol_set_input_handler(v8, *(_QWORD *)(v5 + 48));
                *(_OWORD *)v5 = *(_OWORD *)v8;
                v159 = v587[5];
                v161 = v587[2];
                v160 = v587[3];
                *(_OWORD *)(v8 + 128) = v587[4];
                *(_OWORD *)(v8 + 144) = v159;
                *(_OWORD *)(v8 + 96) = v161;
                *(_OWORD *)(v8 + 112) = v160;
                v162 = v587[1];
                *(_OWORD *)(v8 + 64) = *v587;
                *(_OWORD *)(v8 + 80) = v162;
                nw_http_transaction_metadata_set_connection_metadata(*(void **)(v5 + 352), *(void **)(v8 + 768));
                *v13 &= 0xFFD7u;
                *(_DWORD *)(v8 + 864) = 1;
                if ((*(_BYTE *)(v8 + 158) & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v163 = gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    v164 = *(_QWORD *)(v8 + 488);
                    v165 = *(_DWORD *)(*(_QWORD *)(v8 + 480) + 372);
                    v166 = *(_DWORD *)(v8 + 860);
                    if (v164)
                      LODWORD(v164) = *(_DWORD *)(v164 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v8 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v618 = (uint64_t)" ";
                    *(_WORD *)v619 = 1024;
                    *(_DWORD *)&v619[2] = v165;
                    *(_WORD *)&v619[6] = 1024;
                    *(_DWORD *)&v619[8] = v166;
                    *(_WORD *)&v619[12] = 1024;
                    *(_DWORD *)&v619[14] = v164;
                    _os_log_impl(&dword_182FBE000, v163, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                  }
                }
                if ((*(_BYTE *)(v5 + 158) & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v167 = gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                  {
                    v168 = *(_QWORD *)(v5 + 256);
                    v169 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
                    if (v168)
                      LODWORD(v168) = *(_DWORD *)(v168 + 860);
                    v170 = *(_DWORD *)(v5 + 424);
                    *(_DWORD *)buf = 136448002;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v5 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v618 = (uint64_t)" ";
                    *(_WORD *)v619 = 1024;
                    *(_DWORD *)&v619[2] = v169;
                    *(_WORD *)&v619[6] = 1024;
                    *(_DWORD *)&v619[8] = v168;
                    *(_WORD *)&v619[12] = 1024;
                    *(_DWORD *)&v619[14] = v170;
                    *(_WORD *)&v619[18] = 2048;
                    *(_QWORD *)&v619[20] = v5;
                    *(_WORD *)&v619[28] = 2048;
                    *(_QWORD *)&v619[30] = v8;
                    _os_log_impl(&dword_182FBE000, v167, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                  }
                }
                goto LABEL_245;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v153 = *(_QWORD *)(v8 + 488);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v8;
              *(_WORD *)&buf[22] = 2048;
              v618 = v153;
              v154 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (__nwlog_fault(v154, type, &aBlock))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v155 = gLogObj;
                  v156 = type[0];
                  if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
                    goto LABEL_243;
                  v157 = *(_QWORD *)(v8 + 488);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v8;
                  *(_WORD *)&buf[22] = 2048;
                  v618 = v157;
                  v158 = "%{public}s Connection %p already has a stream (%p)";
                  goto LABEL_242;
                }
                if (!(_BYTE)aBlock)
                {
                  v155 = __nwlog_obj();
                  v156 = type[0];
                  if (!os_log_type_enabled(v155, type[0]))
                    goto LABEL_243;
                  v174 = *(_QWORD *)(v8 + 488);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v8;
                  *(_WORD *)&buf[22] = 2048;
                  v618 = v174;
                  v158 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                  goto LABEL_242;
                }
                v171 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v155 = gLogObj;
                v156 = type[0];
                v172 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
                if (v171)
                {
                  if (v172)
                  {
                    v173 = *(_QWORD *)(v8 + 488);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v8;
                    *(_WORD *)&buf[22] = 2048;
                    v618 = v173;
                    *(_WORD *)v619 = 2082;
                    *(_QWORD *)&v619[2] = v171;
                    _os_log_impl(&dword_182FBE000, v155, v156, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                  }
                  free(v171);
                  goto LABEL_243;
                }
                if (v172)
                {
                  v175 = *(_QWORD *)(v8 + 488);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v8;
                  *(_WORD *)&buf[22] = 2048;
                  v618 = v175;
                  v158 = "%{public}s Connection %p already has a stream (%p), no backtrace";
LABEL_242:
                  _os_log_impl(&dword_182FBE000, v155, v156, v158, buf, 0x20u);
                }
              }
LABEL_243:
              if (v154)
                free(v154);
LABEL_245:
              *(_WORD *)(v5 + 428) |= 0x4000u;
              v176 = *(void **)(v5 + 352);
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke;
              v618 = (uint64_t)&__block_descriptor_tmp_52_39794;
              *(_QWORD *)v619 = v5;
              nw_http_transaction_metadata_set_event_handler(v176, buf);
              nw_protocol_connected(*(_QWORD **)(v5 + 48), v5);
              return;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
            v397 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v397, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v398 = __nwlog_obj();
                v399 = type[0];
                if (os_log_type_enabled(v398, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v400 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_628:
                  _os_log_impl(&dword_182FBE000, v398, v399, v400, buf, 0xCu);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v426 = (char *)__nw_create_backtrace_string();
                v398 = __nwlog_obj();
                v399 = type[0];
                v427 = os_log_type_enabled(v398, type[0]);
                if (v426)
                {
                  if (v427)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v426;
                    _os_log_impl(&dword_182FBE000, v398, v399, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v426);
                  goto LABEL_629;
                }
                if (v427)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v400 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                  goto LABEL_628;
                }
              }
              else
              {
                v398 = __nwlog_obj();
                v399 = type[0];
                if (os_log_type_enabled(v398, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v400 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                  goto LABEL_628;
                }
              }
            }
LABEL_629:
            if (v397)
              free(v397);
            v5 = v589;
            goto LABEL_245;
          }
          v140 = v4;
          v141 = v3;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v142 = *(unsigned int *)(v141 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          v618 = 1;
          *(_WORD *)v619 = 2048;
          *(_QWORD *)&v619[2] = v142;
          v143 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v143, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v144 = __nwlog_obj();
              v145 = type[0];
              if (os_log_type_enabled(v144, type[0]))
              {
                v146 = *(unsigned int *)(v590 + 348);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&buf[22] = 2048;
                v618 = 1;
                *(_WORD *)v619 = 2048;
                *(_QWORD *)&v619[2] = v146;
                v147 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_211:
                _os_log_impl(&dword_182FBE000, v144, v145, v147, buf, 0x2Au);
              }
            }
            else if ((_BYTE)aBlock)
            {
              v148 = (char *)__nw_create_backtrace_string();
              v144 = __nwlog_obj();
              v145 = type[0];
              v149 = os_log_type_enabled(v144, type[0]);
              if (v148)
              {
                if (v149)
                {
                  v150 = *(unsigned int *)(v590 + 348);
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                  *(_WORD *)&buf[22] = 2048;
                  v618 = 1;
                  *(_WORD *)v619 = 2048;
                  *(_QWORD *)&v619[2] = v150;
                  *(_WORD *)&v619[10] = 2082;
                  *(_QWORD *)&v619[12] = v148;
                  _os_log_impl(&dword_182FBE000, v144, v145, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v148);
                goto LABEL_212;
              }
              if (v149)
              {
                v152 = *(unsigned int *)(v590 + 348);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&buf[22] = 2048;
                v618 = 1;
                *(_WORD *)v619 = 2048;
                *(_QWORD *)&v619[2] = v152;
                v147 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                goto LABEL_211;
              }
            }
            else
            {
              v144 = __nwlog_obj();
              v145 = type[0];
              if (os_log_type_enabled(v144, type[0]))
              {
                v151 = *(unsigned int *)(v590 + 348);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&buf[22] = 2048;
                v618 = 1;
                *(_WORD *)v619 = 2048;
                *(_QWORD *)&v619[2] = v151;
                v147 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                goto LABEL_211;
              }
            }
          }
LABEL_212:
          if (v143)
            free(v143);
          *(_DWORD *)(v590 + 348) = 0;
          v5 = v589;
          v4 = v140;
          goto LABEL_215;
        }
        v98 = v4;
        v99 = v3;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v100 = *(unsigned int *)(v99 + 340);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->idle_connections_count";
        *(_WORD *)&buf[22] = 2048;
        v618 = 1;
        *(_WORD *)v619 = 2048;
        *(_QWORD *)&v619[2] = v100;
        v101 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(aBlock) = 0;
        if (__nwlog_fault(v101, type, &aBlock))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v102 = __nwlog_obj();
            v103 = type[0];
            if (os_log_type_enabled(v102, type[0]))
            {
              v104 = *(unsigned int *)(v590 + 340);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&buf[22] = 2048;
              v618 = 1;
              *(_WORD *)v619 = 2048;
              *(_QWORD *)&v619[2] = v104;
              v105 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_165:
              _os_log_impl(&dword_182FBE000, v102, v103, v105, buf, 0x2Au);
            }
          }
          else if ((_BYTE)aBlock)
          {
            v117 = (char *)__nw_create_backtrace_string();
            v102 = __nwlog_obj();
            v103 = type[0];
            v118 = os_log_type_enabled(v102, type[0]);
            if (v117)
            {
              if (v118)
              {
                v119 = *(unsigned int *)(v590 + 340);
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                *(_WORD *)&buf[22] = 2048;
                v618 = 1;
                *(_WORD *)v619 = 2048;
                *(_QWORD *)&v619[2] = v119;
                *(_WORD *)&v619[10] = 2082;
                *(_QWORD *)&v619[12] = v117;
                _os_log_impl(&dword_182FBE000, v102, v103, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v117);
              goto LABEL_166;
            }
            if (v118)
            {
              v127 = *(unsigned int *)(v590 + 340);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&buf[22] = 2048;
              v618 = 1;
              *(_WORD *)v619 = 2048;
              *(_QWORD *)&v619[2] = v127;
              v105 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
              goto LABEL_165;
            }
          }
          else
          {
            v102 = __nwlog_obj();
            v103 = type[0];
            if (os_log_type_enabled(v102, type[0]))
            {
              v126 = *(unsigned int *)(v590 + 340);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&buf[22] = 2048;
              v618 = 1;
              *(_WORD *)v619 = 2048;
              *(_QWORD *)&v619[2] = v126;
              v105 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
              goto LABEL_165;
            }
          }
        }
LABEL_166:
        if (v101)
          free(v101);
        v3 = v590;
        *(_DWORD *)(v590 + 340) = 0;
        v4 = v98;
        goto LABEL_169;
      }
    }
    if ((*(_BYTE *)(v3 + 158) & 1) == 0)
    {
      if (v4[1345])
      {
        v392 = v6;
        v393 = v4;
        v394 = __nwlog_obj();
        v395 = os_log_type_enabled(v394, OS_LOG_TYPE_DEBUG);
        v4 = v393;
        v6 = v392;
        v3 = v590;
        if (v395)
        {
          v396 = *(_DWORD *)(v590 + 372);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_get_next_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v590 + 74;
          *(_WORD *)&buf[22] = 2080;
          v618 = (uint64_t)" ";
          *(_WORD *)v619 = 1024;
          *(_DWORD *)&v619[2] = v396;
          _os_log_impl(&dword_182FBE000, v394, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> no idle connections", buf, 0x26u);
          v4 = v393;
          v6 = v392;
          v3 = v590;
        }
      }
    }
    if (*(_QWORD *)(v5 + 256))
    {
      if ((*(_BYTE *)(v5 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = gLogObj;
        v20 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
        v3 = v590;
        if (v20)
        {
          v21 = *(_QWORD *)(v5 + 256);
          v22 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
          if (v21)
            LODWORD(v21) = *(_DWORD *)(v21 + 860);
          v23 = *(_DWORD *)(v5 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v5 + 74;
          *(_WORD *)&buf[22] = 2080;
          v618 = (uint64_t)" ";
          *(_WORD *)v619 = 1024;
          *(_DWORD *)&v619[2] = v22;
          *(_WORD *)&v619[6] = 1024;
          *(_DWORD *)&v619[8] = v21;
          *(_WORD *)&v619[12] = 1024;
          *(_DWORD *)&v619[14] = v23;
          v24 = "%{public}s %{public}s%s<i%u:c%u:s%u> stream already has current connection, ignoring";
          v25 = v19;
          v26 = 50;
LABEL_33:
          _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, v24, buf, v26);
          v3 = v590;
          goto LABEL_34;
        }
      }
      goto LABEL_34;
    }
    v588 = v6;
    if ((*(_WORD *)(v5 + 428) & 8) == 0)
    {
      if (*(_DWORD *)(v3 + 336) + *(_DWORD *)(v3 + 352) >= (*(_DWORD *)(v3 + 368) + *(_DWORD *)(v3 + 364)))
      {
        if ((*(_BYTE *)(v5 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v106 = gLogObj;
          v107 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
          v3 = v590;
          if (v107)
          {
            v108 = *(_QWORD *)(v5 + 256);
            v109 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
            if (v108)
              LODWORD(v108) = *(_DWORD *)(v108 + 860);
            v110 = *(_DWORD *)(v5 + 424);
            v111 = *(_DWORD *)(v590 + 364);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v5 + 74;
            *(_WORD *)&buf[22] = 2080;
            v618 = (uint64_t)" ";
            *(_WORD *)v619 = 1024;
            *(_DWORD *)&v619[2] = v109;
            *(_WORD *)&v619[6] = 1024;
            *(_DWORD *)&v619[8] = v108;
            *(_WORD *)&v619[12] = 1024;
            *(_DWORD *)&v619[14] = v110;
            *(_WORD *)&v619[18] = 1024;
            *(_DWORD *)&v619[20] = v111;
            v24 = "%{public}s %{public}s%s<i%u:c%u:s%u> already at max connection width %u, cannot create new connection";
            v25 = v106;
            v26 = 56;
            goto LABEL_33;
          }
        }
LABEL_34:
        if ((*(_BYTE *)(v3 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            v28 = *(_DWORD *)(v590 + 372);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_match_idle_connection_with_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v590 + 74;
            *(_WORD *)&buf[22] = 2080;
            v618 = (uint64_t)" ";
            *(_WORD *)v619 = 1024;
            *(_DWORD *)&v619[2] = v28;
            v29 = "%{public}s %{public}s%s<i%u> cannot make new connection, waiting for other requests to finish";
LABEL_40:
            _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, v29, buf, 0x26u);
            return;
          }
        }
        return;
      }
      if ((*(_BYTE *)(v5 + 158) & 1) == 0)
      {
        if (v4[1345])
        {
          v474 = v4;
          v475 = __nwlog_obj();
          v476 = os_log_type_enabled(v475, OS_LOG_TYPE_DEBUG);
          v4 = v474;
          v3 = v590;
          if (v476)
          {
            v477 = v5 + 74;
            v478 = *(_QWORD *)(v5 + 256);
            v479 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
            if (v478)
              LODWORD(v478) = *(_DWORD *)(v478 + 860);
            v5 = v589;
            v480 = *(_DWORD *)(v589 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v477;
            *(_WORD *)&buf[22] = 2080;
            v618 = (uint64_t)" ";
            *(_WORD *)v619 = 1024;
            *(_DWORD *)&v619[2] = v479;
            *(_WORD *)&v619[6] = 1024;
            *(_DWORD *)&v619[8] = v478;
            *(_WORD *)&v619[12] = 1024;
            *(_DWORD *)&v619[14] = v480;
            _os_log_impl(&dword_182FBE000, v475, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> width allows new connection, creating", buf, 0x32u);
            v3 = v590;
            v4 = v474;
          }
        }
      }
      if ((*(_WORD *)(v5 + 428) & 0x1000) == 0)
      {
LABEL_377:
        if (*(_QWORD *)(v5 + 32))
        {
          if ((*(_BYTE *)(v5 + 158) & 1) == 0)
          {
            if (v4[1345])
            {
              v489 = __nwlog_obj();
              if (os_log_type_enabled(v489, OS_LOG_TYPE_DEBUG))
              {
                v490 = v5 + 74;
                v491 = *(_QWORD *)(v5 + 256);
                v492 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
                if (v491)
                  LODWORD(v491) = *(_DWORD *)(v491 + 860);
                v5 = v589;
                v493 = *(_DWORD *)(v589 + 424);
                v494 = *(_QWORD *)(v589 + 32);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_http1_establish_new_connection_for_stream";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v490;
                *(_WORD *)&buf[22] = 2080;
                v618 = (uint64_t)" ";
                *(_WORD *)v619 = 1024;
                *(_DWORD *)&v619[2] = v492;
                *(_WORD *)&v619[6] = 1024;
                *(_DWORD *)&v619[8] = v491;
                *(_WORD *)&v619[12] = 1024;
                *(_DWORD *)&v619[14] = v493;
                *(_WORD *)&v619[18] = 2048;
                *(_QWORD *)&v619[20] = v494;
                _os_log_impl(&dword_182FBE000, v489, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using already established output handler %p", buf, 0x3Cu);
              }
            }
          }
          v585 = *(_OWORD **)(v5 + 32);
          if (v585)
          {
            v264 = *(void **)(v5 + 336);
            if (v264)
            {
              v265 = *(void **)(v5 + 320);
              if (v265)
              {
                v266 = malloc_type_calloc(1uLL, 0x370uLL, 0xEAFB8F1AuLL);
                if (v266)
                  goto LABEL_384;
                v502 = __nwlog_obj();
                os_log_type_enabled(v502, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "strict_calloc";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = 1;
                *(_WORD *)&buf[22] = 2048;
                v618 = 880;
                v503 = (void *)_os_log_send_and_compose_impl();
                if (!__nwlog_abort((uint64_t)v503))
                {
                  free(v503);
LABEL_384:
                  bzero(v266, 0x370uLL);
                  if (nw_protocol_http1_identifier::onceToken != -1)
                    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
                  v267 = v590;
                  *((_QWORD *)v266 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
                  if (nw_protocol_http1_get_callbacks(void)::onceToken[0] != -1)
                  {
                    dispatch_once(nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39614);
                    v267 = v590;
                  }
                  *((_QWORD *)v266 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
                  *((_DWORD *)v266 + 46) = 3;
                  *((_QWORD *)v266 + 22) = v266;
                  *((_QWORD *)v266 + 5) = v266 + 10;
                  *((_QWORD *)v266 + 60) = v267;
                  nw_protocol_set_output_handler((uint64_t)v266, (uint64_t)v585);
                  *(_QWORD *)buf = os_retain(v264);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v266 + 47), buf);
                  *(_QWORD *)buf = os_retain(v265);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v266 + 46), buf);
                  *(_QWORD *)buf = nw_parameters_copy_context(v265);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v266 + 31), buf);
                  *((_QWORD *)v266 + 24) = *(_QWORD *)(v267 + 192);
                  v268 = MEMORY[0x1E0C809B0];
                  v269 = (void *)*((_QWORD *)v266 + 62);
                  *(_QWORD *)type = MEMORY[0x1E0C809B0];
                  v602 = 0x40000000;
                  v603 = (uint64_t)___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
                  v604 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39813;
                  v605 = (void (*)(uint64_t))v266;
                  *(_QWORD *)buf = nw_http_connection_create_metadata(v269, type, 0);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v266 + 48), buf);
                  nw_http_connection_metadata_set_version(*((void **)v266 + 96), 3);
                  nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v266 + 96), *(void **)(v267 + 312));
                  *((_QWORD *)v266 + 77) = 0;
                  *((_QWORD *)v266 + 78) = (char *)v266 + 616;
                  *((_QWORD *)v266 + 79) = 0;
                  *((_QWORD *)v266 + 80) = (char *)v266 + 632;
                  *((_QWORD *)v266 + 81) = 0;
                  *((_QWORD *)v266 + 82) = (char *)v266 + 648;
                  *((_QWORD *)v266 + 83) = 0;
                  *((_QWORD *)v266 + 84) = (char *)v266 + 664;
                  *((_QWORD *)v266 + 86) = (char *)v266 + 680;
                  *((_QWORD *)v266 + 85) = 0;
                  nw_frame_cache_init((uint64_t)v266 + 696, (uint64_t)v266, 256, 0x40000, 16);
                  v270 = *((_QWORD *)v266 + 60);
                  if (v270)
                  {
                    *(_OWORD *)((char *)v266 + 360) = 0u;
                    *(_OWORD *)((char *)v266 + 376) = 0u;
                    *(_OWORD *)((char *)v266 + 392) = 0u;
                    *(_OWORD *)((char *)v266 + 408) = 0u;
                    *(_OWORD *)((char *)v266 + 424) = 0u;
                    *(_OWORD *)((char *)v266 + 440) = 0u;
                    *(_OWORD *)((char *)v266 + 328) = 0u;
                    *(_OWORD *)((char *)v266 + 344) = 0u;
                    *((_QWORD *)v266 + 59) = nw_http1_on_reset;
                    *((_QWORD *)v266 + 37) = nw_http1_on_message_begin;
                    *((_QWORD *)v266 + 38) = nw_http1_on_url;
                    *((_QWORD *)v266 + 48) = nw_http1_on_message_complete;
                    *((_QWORD *)v266 + 49) = nw_http1_on_url_complete;
                    *((_QWORD *)v266 + 39) = nw_http1_on_status;
                    *((_QWORD *)v266 + 40) = nw_http1_on_method;
                    *((_QWORD *)v266 + 50) = nw_http1_on_status_complete;
                    *((_QWORD *)v266 + 51) = nw_http1_on_method_complete;
                    *((_QWORD *)v266 + 42) = nw_http1_on_header_field;
                    *((_QWORD *)v266 + 43) = nw_http1_on_header_value;
                    *((_QWORD *)v266 + 53) = nw_http1_on_header_field_complete;
                    *((_QWORD *)v266 + 54) = nw_http1_on_header_value_complete;
                    *((_QWORD *)v266 + 46) = nw_http1_on_headers_complete;
                    *((_QWORD *)v266 + 47) = nw_http1_on_body;
                    *((_QWORD *)v266 + 57) = nw_http1_on_chunk_header;
                    *((_QWORD *)v266 + 58) = nw_http1_on_chunk_complete;
                    v271 = *(_BYTE *)(v270 + 376);
                    *(_OWORD *)((char *)v266 + 248) = 0u;
                    *(_OWORD *)((char *)v266 + 200) = 0u;
                    *(_OWORD *)((char *)v266 + 264) = 0u;
                    *(_OWORD *)((char *)v266 + 232) = 0u;
                    *(_OWORD *)((char *)v266 + 216) = 0u;
                    if ((v271 & 1) != 0)
                      v272 = 1;
                    else
                      v272 = 2;
                    *((_BYTE *)v266 + 272) = v272;
                    *((_QWORD *)v266 + 35) = 0;
                    *((_QWORD *)v266 + 36) = (char *)v266 + 296;
                    *((_WORD *)v266 + 139) = 15619;
                    *((_QWORD *)v266 + 31) = v266;
                    *((_QWORD *)v266 + 32) = 238;
                    if ((*((_BYTE *)v266 + 158) & 1) == 0)
                    {
                      v273 = __nwlog_obj();
                      if (os_log_type_enabled(v273, OS_LOG_TYPE_DEBUG))
                      {
                        v274 = *((_QWORD *)v266 + 61);
                        v275 = *(_DWORD *)(*((_QWORD *)v266 + 60) + 372);
                        v276 = *((_DWORD *)v266 + 215);
                        if (v274)
                          LODWORD(v274) = *(_DWORD *)(v274 + 424);
                        *(_DWORD *)buf = 136448258;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_log_parser_version";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = (char *)v266 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v618 = (uint64_t)" ";
                        *(_WORD *)v619 = 1024;
                        *(_DWORD *)&v619[2] = v275;
                        *(_WORD *)&v619[6] = 1024;
                        *(_DWORD *)&v619[8] = v276;
                        *(_WORD *)&v619[12] = 1024;
                        *(_DWORD *)&v619[14] = v274;
                        *(_WORD *)&v619[18] = 1024;
                        *(_DWORD *)&v619[20] = 9;
                        *(_WORD *)&v619[24] = 1024;
                        *(_DWORD *)&v619[26] = 2;
                        *(_WORD *)&v619[30] = 1024;
                        *(_DWORD *)&v619[32] = 1;
                        _os_log_impl(&dword_182FBE000, v273, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u", buf, 0x44u);
                      }
                    }
                    goto LABEL_397;
                  }
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                  v504 = (char *)_os_log_send_and_compose_impl();
                  v612[0] = 16;
                  LOBYTE(v593[0]) = 0;
                  if (__nwlog_fault(v504, v612, v593))
                  {
                    if (v612[0] == 17)
                    {
                      v505 = __nwlog_obj();
                      v506 = v612[0];
                      if (!os_log_type_enabled(v505, (os_log_type_t)v612[0]))
                        goto LABEL_901;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                      v507 = "%{public}s called with null http1_connection->protocol_http1";
                      goto LABEL_900;
                    }
                    if (!LOBYTE(v593[0]))
                    {
                      v505 = __nwlog_obj();
                      v506 = v612[0];
                      if (!os_log_type_enabled(v505, (os_log_type_t)v612[0]))
                        goto LABEL_901;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                      v507 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                      goto LABEL_900;
                    }
                    v545 = (char *)__nw_create_backtrace_string();
                    v505 = __nwlog_obj();
                    v506 = v612[0];
                    v546 = os_log_type_enabled(v505, (os_log_type_t)v612[0]);
                    if (v545)
                    {
                      if (v546)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v545;
                        _os_log_impl(&dword_182FBE000, v505, v506, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                      }
                      free(v545);
                      goto LABEL_901;
                    }
                    if (v546)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                      v507 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
LABEL_900:
                      _os_log_impl(&dword_182FBE000, v505, v506, v507, buf, 0xCu);
                    }
                  }
LABEL_901:
                  if (v504)
                    free(v504);
LABEL_397:
                  *(_QWORD *)buf = 0;
                  *(_QWORD *)&buf[8] = buf;
                  *(_QWORD *)&buf[16] = 0x2000000000;
                  v618 = (uint64_t)v266;
                  aBlock = v268;
                  v595 = 0x40000000;
                  v596 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
                  v597 = &unk_1E14A14C8;
                  v598 = (uint64_t *)buf;
                  *((_QWORD *)v266 + 76) = _Block_copy(&aBlock);
                  _Block_object_dispose(buf, 8);
                  if ((*((_BYTE *)v266 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v517 = __nwlog_obj();
                      if (os_log_type_enabled(v517, OS_LOG_TYPE_DEBUG))
                      {
                        v518 = *((_QWORD *)v266 + 61);
                        v519 = *(_DWORD *)(*((_QWORD *)v266 + 60) + 372);
                        v520 = *((_DWORD *)v266 + 215);
                        if (v518)
                          LODWORD(v518) = *(_DWORD *)(v518 + 424);
                        *(_DWORD *)buf = 136447746;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = (char *)v266 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v618 = (uint64_t)" ";
                        *(_WORD *)v619 = 1024;
                        *(_DWORD *)&v619[2] = v519;
                        *(_WORD *)&v619[6] = 1024;
                        *(_DWORD *)&v619[8] = v520;
                        *(_WORD *)&v619[12] = 1024;
                        *(_DWORD *)&v619[14] = v518;
                        *(_WORD *)&v619[18] = 2048;
                        *(_QWORD *)&v619[20] = v266;
                        _os_log_impl(&dword_182FBE000, v517, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
                      }
                    }
                  }
                  v277 = (NSObject **)(v266 + 32);
                  nw_protocol_replace_input_handler((uint64_t)v585, v589, (uint64_t)v266);
                  *v266 = *v585;
                  v278 = (void *)*((_QWORD *)v266 + 92);
                  if (v278)
                  {
                    v279 = v590;
                    v280 = (_BYTE *)&unk_1ECD84000;
                    if (!*((_QWORD *)v266 + 66))
                    {
                      v281 = (void **)(v266 + 35);
                      v282 = nw_parameters_copy_context(*((void **)v266 + 92));
                      *(_QWORD *)buf = nw_path_copy_flow_registration(v282, (uint64_t)v266);
                      nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v266 + 35), buf);
                      v283 = (void *)*((_QWORD *)v266 + 70);
                      if (v283)
                      {
                        v284 = nw_path_flow_registration_copy_endpoint(v283);
                        v285 = nw_path_flow_registration_copy_parameters(*v281);
                        *(_QWORD *)buf = nw_endpoint_copy_association_with_evaluator(v284, v285, 0);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v266 + 33), buf);
                        if (*((_QWORD *)v266 + 66))
                        {
                          *(_QWORD *)buf = nw_protocol_instance_stub_create((nw_protocol *)v266);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v266 + 34), buf);
                          nw_association_register(*((void **)v266 + 66), v278, *((void **)v266 + 68), 0, &__block_literal_global_70_39832);
                          v286 = nw_association_copy_current_path(*((void **)v266 + 66), v285);
                          if (v286)
                          {
                            v287 = v286;
                            v288 = nw_path_copy_for_flow_registration(v286, *v281);
                            if (v288)
                            {
                              v289 = v288;
                              if (*v277 != v288)
                              {
                                *(_QWORD *)buf = os_retain(v288);
                                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v266 + 32), buf);
                              }
                              if (nw_path_has_flows(v289))
                                v290 = 4096;
                              else
                                v290 = 0;
                              v291 = *((_WORD *)v266 + 436) & 0xEFFF | (*((unsigned __int8 *)v266 + 874) << 16);
                              *((_WORD *)v266 + 436) = *((_WORD *)v266 + 436) & 0xEFFF | v290;
                              *((_BYTE *)v266 + 874) = BYTE2(v291);
                              v292 = nw_parameters_copy_effective_proxy_config(v278);
                              if (v292)
                              {
                                v293 = v292;
                                if (nw_path_has_proxy_config(v287, v292))
                                {
                                  *(_QWORD *)buf = os_retain(v293);
                                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v266 + 36), buf);
                                }
                                os_release(v293);
                              }
                              os_release(v289);
                            }
                            os_release(v287);
                          }
                        }
                        if (v285)
                          os_release(v285);
                        if (v284)
                          os_release(v284);
                      }
                      v279 = v590;
                      v280 = (_BYTE *)&unk_1ECD84000;
                      if (v282)
                      {
                        os_release(v282);
                        v280 = (_BYTE *)&unk_1ECD84000;
                        v279 = v590;
                      }
                    }
                    v294 = *v277;
                    if (*v277)
                    {
LABEL_423:
                      v295 = nw_path_uses_interface_type(v294, nw_interface_type_cellular);
                      v280 = (_BYTE *)&unk_1ECD84000;
                      v279 = v590;
                      if (v295)
                        *((_QWORD *)v266 + 24) = 1000;
                    }
LABEL_425:
                    v296 = *(unsigned int *)(v279 + 336) + 1;
                    v297 = v296 << 31 >> 31;
                    *(_DWORD *)(v279 + 336) = v296;
                    v298 = v589;
                    if (v297 == v296 && (v297 & 0x8000000000000000) == 0)
                      goto LABEL_464;
                    v299 = v279;
                    __nwlog_obj();
                    v300 = *(unsigned int *)(v299 + 336);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->connections_count";
                    *(_WORD *)&buf[22] = 2048;
                    v618 = 1;
                    *(_WORD *)v619 = 2048;
                    *(_QWORD *)&v619[2] = v300;
                    v301 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(aBlock) = 0;
                    if (__nwlog_fault(v301, type, &aBlock))
                    {
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        v302 = __nwlog_obj();
                        v303 = type[0];
                        if (os_log_type_enabled(v302, type[0]))
                        {
                          v304 = *(unsigned int *)(v590 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v618 = 1;
                          *(_WORD *)v619 = 2048;
                          *(_QWORD *)&v619[2] = v304;
                          v305 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_460:
                          _os_log_impl(&dword_182FBE000, v302, v303, v305, buf, 0x2Au);
                        }
                      }
                      else if ((_BYTE)aBlock)
                      {
                        v308 = (char *)__nw_create_backtrace_string();
                        v302 = __nwlog_obj();
                        v303 = type[0];
                        v309 = os_log_type_enabled(v302, type[0]);
                        if (v308)
                        {
                          if (v309)
                          {
                            v310 = *(unsigned int *)(v590 + 336);
                            *(_DWORD *)buf = 136447234;
                            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = "http1->connections_count";
                            *(_WORD *)&buf[22] = 2048;
                            v618 = 1;
                            *(_WORD *)v619 = 2048;
                            *(_QWORD *)&v619[2] = v310;
                            *(_WORD *)&v619[10] = 2082;
                            *(_QWORD *)&v619[12] = v308;
                            _os_log_impl(&dword_182FBE000, v302, v303, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                          }
                          free(v308);
                          goto LABEL_461;
                        }
                        if (v309)
                        {
                          v329 = *(unsigned int *)(v590 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v618 = 1;
                          *(_WORD *)v619 = 2048;
                          *(_QWORD *)&v619[2] = v329;
                          v305 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_460;
                        }
                      }
                      else
                      {
                        v302 = __nwlog_obj();
                        v303 = type[0];
                        if (os_log_type_enabled(v302, type[0]))
                        {
                          v328 = *(unsigned int *)(v590 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v618 = 1;
                          *(_WORD *)v619 = 2048;
                          *(_QWORD *)&v619[2] = v328;
                          v305 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_460;
                        }
                      }
                    }
LABEL_461:
                    if (v301)
                      free(v301);
                    v279 = v590;
                    *(_DWORD *)(v590 + 336) = -1;
                    v298 = v589;
                    v280 = (_BYTE *)&unk_1ECD84000;
LABEL_464:
                    v330 = *(unsigned int *)(v279 + 360) + 1;
                    v331 = v330 << 31 >> 31;
                    *(_DWORD *)(v279 + 360) = v330;
                    if (v331 == v330 && (v331 & 0x8000000000000000) == 0)
                      goto LABEL_483;
                    v332 = v279;
                    __nwlog_obj();
                    v333 = *(unsigned int *)(v332 + 360);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&buf[22] = 2048;
                    v618 = 1;
                    *(_WORD *)v619 = 2048;
                    *(_QWORD *)&v619[2] = v333;
                    v334 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(aBlock) = 0;
                    if (__nwlog_fault(v334, type, &aBlock))
                    {
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        v335 = __nwlog_obj();
                        v336 = type[0];
                        if (os_log_type_enabled(v335, type[0]))
                        {
                          v337 = *(unsigned int *)(v590 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          v618 = 1;
                          *(_WORD *)v619 = 2048;
                          *(_QWORD *)&v619[2] = v337;
                          v338 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_479:
                          _os_log_impl(&dword_182FBE000, v335, v336, v338, buf, 0x2Au);
                        }
                      }
                      else if ((_BYTE)aBlock)
                      {
                        v339 = (char *)__nw_create_backtrace_string();
                        v335 = __nwlog_obj();
                        v336 = type[0];
                        v340 = os_log_type_enabled(v335, type[0]);
                        if (v339)
                        {
                          if (v340)
                          {
                            v341 = *(unsigned int *)(v590 + 360);
                            *(_DWORD *)buf = 136447234;
                            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                            *(_WORD *)&buf[22] = 2048;
                            v618 = 1;
                            *(_WORD *)v619 = 2048;
                            *(_QWORD *)&v619[2] = v341;
                            *(_WORD *)&v619[10] = 2082;
                            *(_QWORD *)&v619[12] = v339;
                            _os_log_impl(&dword_182FBE000, v335, v336, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                          }
                          free(v339);
                          goto LABEL_480;
                        }
                        if (v340)
                        {
                          v343 = *(unsigned int *)(v590 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          v618 = 1;
                          *(_WORD *)v619 = 2048;
                          *(_QWORD *)&v619[2] = v343;
                          v338 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_479;
                        }
                      }
                      else
                      {
                        v335 = __nwlog_obj();
                        v336 = type[0];
                        if (os_log_type_enabled(v335, type[0]))
                        {
                          v342 = *(unsigned int *)(v590 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          v618 = 1;
                          *(_WORD *)v619 = 2048;
                          *(_QWORD *)&v619[2] = v342;
                          v338 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_479;
                        }
                      }
                    }
LABEL_480:
                    if (v334)
                      free(v334);
                    LODWORD(v330) = -1;
                    *(_DWORD *)(v590 + 360) = -1;
                    v298 = v589;
                    v280 = &unk_1ECD84000;
LABEL_483:
                    *((_DWORD *)v266 + 215) = v330;
                    if ((*((_BYTE *)v266 + 158) & 1) == 0)
                    {
                      if (v280[1345])
                      {
                        v521 = __nwlog_obj();
                        if (os_log_type_enabled(v521, OS_LOG_TYPE_DEBUG))
                        {
                          v522 = *((_QWORD *)v266 + 61);
                          v523 = *(_DWORD *)(*((_QWORD *)v266 + 60) + 372);
                          v524 = *((_DWORD *)v266 + 215);
                          if (v522)
                            LODWORD(v522) = *(_DWORD *)(v522 + 424);
                          v525 = *(_DWORD *)(v590 + 336);
                          *(_DWORD *)buf = 136448002;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = (char *)v266 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v618 = (uint64_t)" ";
                          *(_WORD *)v619 = 1024;
                          *(_DWORD *)&v619[2] = v523;
                          *(_WORD *)&v619[6] = 1024;
                          *(_DWORD *)&v619[8] = v524;
                          *(_WORD *)&v619[12] = 1024;
                          *(_DWORD *)&v619[14] = v522;
                          *(_WORD *)&v619[18] = 2048;
                          *(_QWORD *)&v619[20] = v266;
                          *(_WORD *)&v619[28] = 1024;
                          *(_DWORD *)&v619[30] = v525;
                          _os_log_impl(&dword_182FBE000, v521, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections", buf, 0x42u);
                          v298 = v589;
                        }
                      }
                    }
                    if (*(_QWORD *)(v298 + 248))
                    {
                      if (!*((_QWORD *)v266 + 61))
                      {
                        *(_QWORD *)(v298 + 256) = v266;
                        *((_QWORD *)v266 + 61) = v298;
                        nw_protocol_set_output_handler(v298, *((_QWORD *)v266 + 4));
                        nw_protocol_set_input_handler((uint64_t)v266, *(_QWORD *)(v298 + 48));
                        *(_OWORD *)v298 = *v266;
                        v350 = v588[5];
                        v352 = v588[2];
                        v351 = v588[3];
                        v266[8] = v588[4];
                        v266[9] = v350;
                        v266[6] = v352;
                        v266[7] = v351;
                        v353 = v588[1];
                        v266[4] = *v588;
                        v266[5] = v353;
                        nw_http_transaction_metadata_set_connection_metadata(*(void **)(v298 + 352), *((void **)v266 + 96));
                        *((_WORD *)v266 + 436) &= 0xFFD7u;
                        *((_DWORD *)v266 + 216) = 1;
                        if ((*((_BYTE *)v266 + 158) & 1) == 0)
                        {
                          v354 = __nwlog_obj();
                          if (os_log_type_enabled(v354, OS_LOG_TYPE_DEBUG))
                          {
                            v355 = *((_QWORD *)v266 + 61);
                            v356 = *(_DWORD *)(*((_QWORD *)v266 + 60) + 372);
                            v357 = *((_DWORD *)v266 + 215);
                            if (v355)
                              LODWORD(v355) = *(_DWORD *)(v355 + 424);
                            *(_DWORD *)buf = 136447490;
                            *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = (char *)v266 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            v618 = (uint64_t)" ";
                            *(_WORD *)v619 = 1024;
                            *(_DWORD *)&v619[2] = v356;
                            *(_WORD *)&v619[6] = 1024;
                            *(_DWORD *)&v619[8] = v357;
                            *(_WORD *)&v619[12] = 1024;
                            *(_DWORD *)&v619[14] = v355;
                            _os_log_impl(&dword_182FBE000, v354, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                          }
                        }
                        if ((*(_BYTE *)(v298 + 158) & 1) == 0)
                        {
                          v358 = __nwlog_obj();
                          if (os_log_type_enabled(v358, OS_LOG_TYPE_INFO))
                          {
                            v359 = *(_QWORD *)(v298 + 256);
                            v360 = *(_DWORD *)(*(_QWORD *)(v298 + 248) + 372);
                            if (v359)
                              LODWORD(v359) = *(_DWORD *)(v359 + 860);
                            v361 = *(_DWORD *)(v298 + 424);
                            *(_DWORD *)buf = 136448002;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v298 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            v618 = (uint64_t)" ";
                            *(_WORD *)v619 = 1024;
                            *(_DWORD *)&v619[2] = v360;
                            *(_WORD *)&v619[6] = 1024;
                            *(_DWORD *)&v619[8] = v359;
                            *(_WORD *)&v619[12] = 1024;
                            *(_DWORD *)&v619[14] = v361;
                            *(_WORD *)&v619[18] = 2048;
                            *(_QWORD *)&v619[20] = v298;
                            *(_WORD *)&v619[28] = 2048;
                            *(_QWORD *)&v619[30] = v266;
                            _os_log_impl(&dword_182FBE000, v358, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                            if ((*(_BYTE *)(v298 + 158) & 1) != 0)
                            {
LABEL_519:
                              nw_http_transaction_metadata_set_first_on_connection(*(void **)(v298 + 352));
                              v371 = (void *)nw_protocol_boringssl_copy_definition();
                              identifier = nw_protocol_definition_get_identifier(v371);
                              v373 = (_QWORD *)nw_protocol_get_identifier((uint64_t)v585);
                              v374 = nw_protocols_are_equal(identifier, v373);
                              if (v371)
                                os_release(v371);
                              if (v374)
                              {
                                v375 = nw_protocol_copy_info((uint64_t)v585, 255);
                                if (v375)
                                {
                                  v376 = (void *)v375;
                                  v377 = *(_QWORD *)(v375 + 24);
                                  if (*(_QWORD *)(v375 + 16) != v377)
                                  {
                                    v378 = *(void **)(v377 - 8);
                                    if (v378)
                                    {
                                      v379 = os_retain(v378);
                                      if (v379)
                                      {
                                        v380 = v379;
                                        if (nw_protocol_metadata_is_tls(v379))
                                        {
                                          v381 = v380;
                                          nw_http_connection_metadata_set_sec_metadata(*((void **)v266 + 96), v381);
                                          os_release(v381);
                                        }
                                        os_release(v380);
                                      }
                                    }
                                  }
                                  os_release(v376);
                                }
                              }
                              if (v266)
                              {
                                nw_protocol_connect((uint64_t)v585, (uint64_t)v266);
                                return;
                              }
                              __nwlog_obj();
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                              v485 = (char *)_os_log_send_and_compose_impl();
                              type[0] = OS_LOG_TYPE_ERROR;
                              LOBYTE(aBlock) = 0;
                              if (!__nwlog_fault(v485, type, &aBlock))
                                goto LABEL_853;
                              if (type[0] == OS_LOG_TYPE_FAULT)
                              {
                                v486 = __nwlog_obj();
                                v487 = type[0];
                                if (os_log_type_enabled(v486, type[0]))
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                  v488 = "%{public}s called with null connection";
LABEL_852:
                                  _os_log_impl(&dword_182FBE000, v486, v487, v488, buf, 0xCu);
                                }
                              }
                              else if ((_BYTE)aBlock)
                              {
                                v539 = (char *)__nw_create_backtrace_string();
                                v486 = __nwlog_obj();
                                v487 = type[0];
                                v540 = os_log_type_enabled(v486, type[0]);
                                if (v539)
                                {
                                  if (v540)
                                  {
                                    *(_DWORD *)buf = 136446466;
                                    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                    *(_WORD *)&buf[12] = 2082;
                                    *(_QWORD *)&buf[14] = v539;
                                    _os_log_impl(&dword_182FBE000, v486, v487, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                                  }
                                  free(v539);
                                  goto LABEL_853;
                                }
                                if (v540)
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                  v488 = "%{public}s called with null connection, no backtrace";
                                  goto LABEL_852;
                                }
                              }
                              else
                              {
                                v486 = __nwlog_obj();
                                v487 = type[0];
                                if (os_log_type_enabled(v486, type[0]))
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                  v488 = "%{public}s called with null connection, backtrace limit exceeded";
                                  goto LABEL_852;
                                }
                              }
LABEL_853:
                              if (v485)
                                free(v485);
                              nw_protocol_connect((uint64_t)v585, 0);
                              return;
                            }
LABEL_515:
                            v367 = __nwlog_obj();
                            if (os_log_type_enabled(v367, OS_LOG_TYPE_DEBUG))
                            {
                              v368 = *(_QWORD *)(v298 + 256);
                              v369 = *(_DWORD *)(*(_QWORD *)(v298 + 248) + 372);
                              if (v368)
                                LODWORD(v368) = *(_DWORD *)(v368 + 860);
                              v370 = *(_DWORD *)(v298 + 424);
                              *(_DWORD *)buf = 136448258;
                              *(_QWORD *)&buf[4] = "nw_http1_start_new_connection_for_stream";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v298 + 74;
                              *(_WORD *)&buf[22] = 2080;
                              v618 = (uint64_t)" ";
                              *(_WORD *)v619 = 1024;
                              *(_DWORD *)&v619[2] = v369;
                              *(_WORD *)&v619[6] = 1024;
                              *(_DWORD *)&v619[8] = v368;
                              *(_WORD *)&v619[12] = 1024;
                              *(_DWORD *)&v619[14] = v370;
                              *(_WORD *)&v619[18] = 2048;
                              *(_QWORD *)&v619[20] = v266;
                              *(_WORD *)&v619[28] = 1024;
                              *(_DWORD *)&v619[30] = v370;
                              *(_WORD *)&v619[34] = 2048;
                              *(_QWORD *)&v619[36] = v298;
                              _os_log_impl(&dword_182FBE000, v367, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)", buf, 0x4Cu);
                            }
                            goto LABEL_519;
                          }
                        }
LABEL_514:
                        if ((*(_BYTE *)(v298 + 158) & 1) != 0)
                          goto LABEL_519;
                        goto LABEL_515;
                      }
                      __nwlog_obj();
                      v344 = *((_QWORD *)v266 + 61);
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v266;
                      *(_WORD *)&buf[22] = 2048;
                      v618 = v344;
                      v345 = (char *)_os_log_send_and_compose_impl();
                      type[0] = OS_LOG_TYPE_ERROR;
                      LOBYTE(aBlock) = 0;
                      if (__nwlog_fault(v345, type, &aBlock))
                      {
                        if (type[0] == OS_LOG_TYPE_FAULT)
                        {
                          v346 = __nwlog_obj();
                          v347 = type[0];
                          if (!os_log_type_enabled(v346, type[0]))
                            goto LABEL_512;
                          v348 = *((_QWORD *)v266 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v266;
                          *(_WORD *)&buf[22] = 2048;
                          v618 = v348;
                          v349 = "%{public}s Connection %p already has a stream (%p)";
                          goto LABEL_511;
                        }
                        if (!(_BYTE)aBlock)
                        {
                          v346 = __nwlog_obj();
                          v347 = type[0];
                          if (!os_log_type_enabled(v346, type[0]))
                            goto LABEL_512;
                          v365 = *((_QWORD *)v266 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v266;
                          *(_WORD *)&buf[22] = 2048;
                          v618 = v365;
                          v349 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                          goto LABEL_511;
                        }
                        v362 = (char *)__nw_create_backtrace_string();
                        v346 = __nwlog_obj();
                        v347 = type[0];
                        v363 = os_log_type_enabled(v346, type[0]);
                        if (v362)
                        {
                          if (v363)
                          {
                            v364 = *((_QWORD *)v266 + 61);
                            *(_DWORD *)buf = 136446978;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2048;
                            *(_QWORD *)&buf[14] = v266;
                            *(_WORD *)&buf[22] = 2048;
                            v618 = v364;
                            *(_WORD *)v619 = 2082;
                            *(_QWORD *)&v619[2] = v362;
                            _os_log_impl(&dword_182FBE000, v346, v347, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                          }
                          free(v362);
                          goto LABEL_512;
                        }
                        if (v363)
                        {
                          v366 = *((_QWORD *)v266 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v266;
                          *(_WORD *)&buf[22] = 2048;
                          v618 = v366;
                          v349 = "%{public}s Connection %p already has a stream (%p), no backtrace";
LABEL_511:
                          _os_log_impl(&dword_182FBE000, v346, v347, v349, buf, 0x20u);
                        }
                      }
LABEL_512:
                      if (v345)
                        free(v345);
                      goto LABEL_514;
                    }
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    v512 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(aBlock) = 0;
                    if (!__nwlog_fault(v512, type, &aBlock))
                      goto LABEL_914;
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v513 = __nwlog_obj();
                      v514 = type[0];
                      if (!os_log_type_enabled(v513, type[0]))
                        goto LABEL_914;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v515 = "%{public}s called with null http1_stream->protocol_http1";
                    }
                    else if ((_BYTE)aBlock)
                    {
                      v549 = (char *)__nw_create_backtrace_string();
                      v513 = __nwlog_obj();
                      v514 = type[0];
                      v550 = os_log_type_enabled(v513, type[0]);
                      if (v549)
                      {
                        if (v550)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v549;
                          _os_log_impl(&dword_182FBE000, v513, v514, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                        }
                        free(v549);
                        goto LABEL_914;
                      }
                      if (!v550)
                      {
LABEL_914:
                        if (v512)
                          free(v512);
                        goto LABEL_896;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v515 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                    }
                    else
                    {
                      v513 = __nwlog_obj();
                      v514 = type[0];
                      if (!os_log_type_enabled(v513, type[0]))
                        goto LABEL_914;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v515 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                    }
                    _os_log_impl(&dword_182FBE000, v513, v514, v515, buf, 0xCu);
                    goto LABEL_914;
                  }
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                  v508 = (char *)_os_log_send_and_compose_impl();
                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(aBlock) = 0;
                  if (__nwlog_fault(v508, type, &aBlock))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v509 = __nwlog_obj();
                      v510 = type[0];
                      if (!os_log_type_enabled(v509, type[0]))
                        goto LABEL_907;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                      v511 = "%{public}s called with null parameters";
LABEL_906:
                      _os_log_impl(&dword_182FBE000, v509, v510, v511, buf, 0xCu);
                      goto LABEL_907;
                    }
                    if (!(_BYTE)aBlock)
                    {
                      v509 = __nwlog_obj();
                      v510 = type[0];
                      if (!os_log_type_enabled(v509, type[0]))
                        goto LABEL_907;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                      v511 = "%{public}s called with null parameters, backtrace limit exceeded";
                      goto LABEL_906;
                    }
                    v547 = (char *)__nw_create_backtrace_string();
                    v509 = __nwlog_obj();
                    v510 = type[0];
                    v548 = os_log_type_enabled(v509, type[0]);
                    if (!v547)
                    {
                      if (!v548)
                        goto LABEL_907;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                      v511 = "%{public}s called with null parameters, no backtrace";
                      goto LABEL_906;
                    }
                    if (v548)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v547;
                      _os_log_impl(&dword_182FBE000, v509, v510, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v547);
                  }
LABEL_907:
                  if (v508)
                    free(v508);
                  v279 = v590;
                  v280 = (_BYTE *)&unk_1ECD84000;
                  v294 = *v277;
                  if (*v277)
                    goto LABEL_423;
                  goto LABEL_425;
                }
LABEL_916:
                __break(1u);
                return;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_create";
              v481 = (char *)_os_log_send_and_compose_impl();
              v612[0] = 16;
              LOBYTE(v593[0]) = 0;
              if (__nwlog_fault(v481, v612, v593))
              {
                if (v612[0] == 17)
                {
                  v482 = __nwlog_obj();
                  v483 = v612[0];
                  if (!os_log_type_enabled(v482, (os_log_type_t)v612[0]))
                    goto LABEL_861;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  v484 = "%{public}s called with null parameters";
                  goto LABEL_860;
                }
                if (!LOBYTE(v593[0]))
                {
                  v482 = __nwlog_obj();
                  v483 = v612[0];
                  if (!os_log_type_enabled(v482, (os_log_type_t)v612[0]))
                    goto LABEL_861;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  v484 = "%{public}s called with null parameters, backtrace limit exceeded";
                  goto LABEL_860;
                }
                v541 = (char *)__nw_create_backtrace_string();
                v482 = __nwlog_obj();
                v483 = v612[0];
                v544 = os_log_type_enabled(v482, (os_log_type_t)v612[0]);
                if (!v541)
                {
                  if (!v544)
                    goto LABEL_861;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  v484 = "%{public}s called with null parameters, no backtrace";
                  goto LABEL_860;
                }
                if (v544)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v541;
                  v543 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
                  goto LABEL_730;
                }
                goto LABEL_731;
              }
LABEL_861:
              if (!v481)
                goto LABEL_863;
              goto LABEL_862;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v481 = (char *)_os_log_send_and_compose_impl();
            v612[0] = 16;
            LOBYTE(v593[0]) = 0;
            if (!__nwlog_fault(v481, v612, v593))
              goto LABEL_861;
            if (v612[0] != 17)
            {
              if (!LOBYTE(v593[0]))
              {
                v482 = __nwlog_obj();
                v483 = v612[0];
                if (!os_log_type_enabled(v482, (os_log_type_t)v612[0]))
                  goto LABEL_861;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                v484 = "%{public}s called with null endpoint, backtrace limit exceeded";
                goto LABEL_860;
              }
              v541 = (char *)__nw_create_backtrace_string();
              v482 = __nwlog_obj();
              v483 = v612[0];
              v542 = os_log_type_enabled(v482, (os_log_type_t)v612[0]);
              if (!v541)
              {
                if (!v542)
                  goto LABEL_861;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                v484 = "%{public}s called with null endpoint, no backtrace";
                goto LABEL_860;
              }
              if (v542)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v541;
                v543 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_730:
                _os_log_impl(&dword_182FBE000, v482, v483, v543, buf, 0x16u);
              }
LABEL_731:
              free(v541);
              if (!v481)
              {
LABEL_863:
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                v571 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (!__nwlog_fault(v571, type, &aBlock))
                  goto LABEL_877;
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v572 = __nwlog_obj();
                  v573 = type[0];
                  if (!os_log_type_enabled(v572, type[0]))
                    goto LABEL_877;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  v574 = "%{public}s called with null http1_connection";
                }
                else if ((_BYTE)aBlock)
                {
                  v575 = (char *)__nw_create_backtrace_string();
                  v572 = __nwlog_obj();
                  v573 = type[0];
                  v576 = os_log_type_enabled(v572, type[0]);
                  if (v575)
                  {
                    if (v576)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v575;
                      _os_log_impl(&dword_182FBE000, v572, v573, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v575);
LABEL_877:
                    if (v571)
                      free(v571);
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    v577 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(aBlock) = 0;
                    if (!__nwlog_fault(v577, type, &aBlock))
                      goto LABEL_893;
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v578 = __nwlog_obj();
                      v579 = type[0];
                      if (os_log_type_enabled(v578, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        v580 = "%{public}s called with null http1_connection";
LABEL_892:
                        _os_log_impl(&dword_182FBE000, v578, v579, v580, buf, 0xCu);
                      }
                    }
                    else if ((_BYTE)aBlock)
                    {
                      v581 = (char *)__nw_create_backtrace_string();
                      v578 = __nwlog_obj();
                      v579 = type[0];
                      v582 = os_log_type_enabled(v578, type[0]);
                      if (v581)
                      {
                        if (v582)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v581;
                          _os_log_impl(&dword_182FBE000, v578, v579, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                        }
                        free(v581);
                        goto LABEL_893;
                      }
                      if (v582)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        v580 = "%{public}s called with null http1_connection, no backtrace";
                        goto LABEL_892;
                      }
                    }
                    else
                    {
                      v578 = __nwlog_obj();
                      v579 = type[0];
                      if (os_log_type_enabled(v578, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        v580 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                        goto LABEL_892;
                      }
                    }
LABEL_893:
                    if (v577)
                      free(v577);
                    v266 = 0;
LABEL_896:
                    v298 = v589;
                    if ((*(_BYTE *)(v589 + 158) & 1) != 0)
                      goto LABEL_519;
                    goto LABEL_515;
                  }
                  if (!v576)
                    goto LABEL_877;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  v574 = "%{public}s called with null http1_connection, no backtrace";
                }
                else
                {
                  v572 = __nwlog_obj();
                  v573 = type[0];
                  if (!os_log_type_enabled(v572, type[0]))
                    goto LABEL_877;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  v574 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                }
                _os_log_impl(&dword_182FBE000, v572, v573, v574, buf, 0xCu);
                goto LABEL_877;
              }
LABEL_862:
              free(v481);
              goto LABEL_863;
            }
            v482 = __nwlog_obj();
            v483 = v612[0];
            if (!os_log_type_enabled(v482, (os_log_type_t)v612[0]))
              goto LABEL_861;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v484 = "%{public}s called with null endpoint";
          }
          else
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v481 = (char *)_os_log_send_and_compose_impl();
            v612[0] = 16;
            LOBYTE(v593[0]) = 0;
            if (!__nwlog_fault(v481, v612, v593))
              goto LABEL_861;
            if (v612[0] != 17)
            {
              if (!LOBYTE(v593[0]))
              {
                v482 = __nwlog_obj();
                v483 = v612[0];
                if (!os_log_type_enabled(v482, (os_log_type_t)v612[0]))
                  goto LABEL_861;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                v484 = "%{public}s called with null output_handler, backtrace limit exceeded";
                goto LABEL_860;
              }
              v537 = (char *)__nw_create_backtrace_string();
              v482 = __nwlog_obj();
              v483 = v612[0];
              v538 = os_log_type_enabled(v482, (os_log_type_t)v612[0]);
              if (!v537)
              {
                if (!v538)
                  goto LABEL_861;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                v484 = "%{public}s called with null output_handler, no backtrace";
                goto LABEL_860;
              }
              if (v538)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v537;
                _os_log_impl(&dword_182FBE000, v482, v483, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v537);
              goto LABEL_861;
            }
            v482 = __nwlog_obj();
            v483 = v612[0];
            if (!os_log_type_enabled(v482, (os_log_type_t)v612[0]))
              goto LABEL_861;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v484 = "%{public}s called with null output_handler";
          }
LABEL_860:
          _os_log_impl(&dword_182FBE000, v482, v483, v484, buf, 0xCu);
          goto LABEL_861;
        }
        v306 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(v5 + 320));
        v608 = 0;
        v609 = &v608;
        v610 = 0x2000000000;
        v611 = 0;
        *(_QWORD *)type = 0;
        v602 = (uint64_t)type;
        v603 = 0x3802000000;
        v604 = __Block_byref_object_copy__39865;
        v605 = __Block_byref_object_dispose__39866;
        v606 = 0;
        v607 |= 1u;
        v307 = MEMORY[0x1E0C809B0];
        aBlock = MEMORY[0x1E0C809B0];
        v595 = 0x40000000;
        v596 = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke;
        v597 = &unk_1E14A1688;
        v598 = &v608;
        v599 = type;
        v600 = v5;
        nw_protocol_stack_iterate_application_protocols(v306, &aBlock);
        if (*(_QWORD *)(v602 + 40))
          goto LABEL_442;
        v311 = nw_protocol_stack_copy_transport_protocol(v306);
        is_quic = nw_protocol_options_is_quic(v311);
        if (v311)
          os_release(v311);
        if (!is_quic)
        {
LABEL_442:
          *(_QWORD *)buf = nw_parameters_shallow_copy(*(void **)(v5 + 320));
          nw::retained_ptr<nw_endpoint *>::operator=(v5 + 320, buf);
        }
        else
        {
          v313 = *(void **)(v5 + 320);
          *(_QWORD *)buf = v307;
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_2;
          v618 = (uint64_t)&unk_1E14A16D8;
          *(_QWORD *)v619 = type;
          *(_QWORD *)&v619[8] = &v608;
          *(_QWORD *)&v619[16] = v5;
          *(_QWORD *)&v619[24] = v590;
          nw_parameters_enumerate_transformed_parameters(v313, buf);
        }
        v314 = *(void **)(v602 + 40);
        if (v314)
        {
          v315 = v314;
          sec_protocol_options_clear_tls_application_protocols();
          sec_protocol_options_add_tls_application_protocol(v315, "http/1.1");
          os_release(v315);
        }
        *((_BYTE *)v609 + 24) = 0;
        v316 = *(void **)(v5 + 320);
        v593[0] = v307;
        v593[1] = 0x40000000;
        v593[2] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_78;
        v593[3] = &unk_1E14A1700;
        v593[4] = &v608;
        v593[5] = v5;
        nw_parameters_remove_application_protocol_options_from_protocol_stack(v316, v593);
        *(_WORD *)(v5 + 428) |= 8u;
        v317 = *(unsigned int *)(v590 + 352) + 1;
        v318 = v317 << 31 >> 31;
        *(_DWORD *)(v590 + 352) = v317;
        if (v318 == v317 && (v318 & 0x8000000000000000) == 0)
        {
LABEL_540:
          v384 = *(_QWORD *)(v5 + 312);
          v385 = *(void **)(v5 + 264);
          *(_QWORD *)v612 = v307;
          *(_QWORD *)&v612[8] = 0x40000000;
          *(_QWORD *)&v612[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_81;
          v613 = (uint64_t)&unk_1E14A1728;
          *(_QWORD *)v614 = v384;
          nw_queue_context_async(v385, v612);
          _Block_object_dispose(type, 8);
          if ((v607 & 1) != 0 && v606)
            os_release(v606);
          _Block_object_dispose(&v608, 8);
          if (v306)
            os_release(v306);
          return;
        }
        __nwlog_obj();
        v319 = *(unsigned int *)(v590 + 352);
        *(_DWORD *)v612 = 136446978;
        *(_QWORD *)&v612[4] = "nw_http1_establish_new_connection_for_stream";
        *(_WORD *)&v612[12] = 2082;
        *(_QWORD *)&v612[14] = "http1->pending_output_handler_count";
        *(_WORD *)&v612[22] = 2048;
        v613 = 1;
        *(_WORD *)v614 = 2048;
        *(_QWORD *)&v614[2] = v319;
        v320 = (char *)_os_log_send_and_compose_impl();
        v592 = OS_LOG_TYPE_ERROR;
        v591 = 0;
        if (__nwlog_fault(v320, &v592, &v591))
        {
          if (v592 == OS_LOG_TYPE_FAULT)
          {
            v321 = __nwlog_obj();
            v322 = v592;
            if (os_log_type_enabled(v321, v592))
            {
              v323 = *(unsigned int *)(v590 + 352);
              *(_DWORD *)v612 = 136446978;
              *(_QWORD *)&v612[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v612[12] = 2082;
              *(_QWORD *)&v612[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v612[22] = 2048;
              v613 = 1;
              *(_WORD *)v614 = 2048;
              *(_QWORD *)&v614[2] = v323;
              v324 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_536:
              _os_log_impl(&dword_182FBE000, v321, v322, v324, v612, 0x2Au);
            }
          }
          else if (v591)
          {
            v325 = (char *)__nw_create_backtrace_string();
            v321 = __nwlog_obj();
            v322 = v592;
            v326 = os_log_type_enabled(v321, v592);
            if (v325)
            {
              if (v326)
              {
                v327 = *(unsigned int *)(v590 + 352);
                *(_DWORD *)v612 = 136447234;
                *(_QWORD *)&v612[4] = "nw_http1_establish_new_connection_for_stream";
                *(_WORD *)&v612[12] = 2082;
                *(_QWORD *)&v612[14] = "http1->pending_output_handler_count";
                *(_WORD *)&v612[22] = 2048;
                v613 = 1;
                *(_WORD *)v614 = 2048;
                *(_QWORD *)&v614[2] = v327;
                v615 = 2082;
                v616 = v325;
                _os_log_impl(&dword_182FBE000, v321, v322, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", v612, 0x34u);
              }
              free(v325);
              goto LABEL_537;
            }
            if (v326)
            {
              v383 = *(unsigned int *)(v590 + 352);
              *(_DWORD *)v612 = 136446978;
              *(_QWORD *)&v612[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v612[12] = 2082;
              *(_QWORD *)&v612[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v612[22] = 2048;
              v613 = 1;
              *(_WORD *)v614 = 2048;
              *(_QWORD *)&v614[2] = v383;
              v324 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_536;
            }
          }
          else
          {
            v321 = __nwlog_obj();
            v322 = v592;
            if (os_log_type_enabled(v321, v592))
            {
              v382 = *(unsigned int *)(v590 + 352);
              *(_DWORD *)v612 = 136446978;
              *(_QWORD *)&v612[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v612[12] = 2082;
              *(_QWORD *)&v612[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v612[22] = 2048;
              v613 = 1;
              *(_WORD *)v614 = 2048;
              *(_QWORD *)&v614[2] = v382;
              v324 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_536;
            }
          }
        }
LABEL_537:
        if (v320)
          free(v320);
        *(_DWORD *)(v590 + 352) = -1;
        v5 = v589;
        goto LABEL_540;
      }
      if ((*(_BYTE *)(v3 + 158) & 1) == 0)
      {
        if (v4[1345])
        {
          v532 = v4;
          v533 = __nwlog_obj();
          v534 = os_log_type_enabled(v533, OS_LOG_TYPE_DEBUG);
          v4 = v532;
          v3 = v590;
          if (v534)
          {
            v535 = *(_DWORD *)(v590 + 372);
            v536 = *(_DWORD *)(v5 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v590 + 74;
            *(_WORD *)&buf[22] = 2080;
            v618 = (uint64_t)" ";
            *(_WORD *)v619 = 1024;
            *(_DWORD *)&v619[2] = v535;
            *(_WORD *)&v619[6] = 1024;
            *(_DWORD *)&v619[8] = v536;
            *(_WORD *)&v619[12] = 2048;
            *(_QWORD *)&v619[14] = v5;
            _os_log_impl(&dword_182FBE000, v533, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
            v4 = v532;
            v3 = v590;
          }
        }
      }
      if ((*(_WORD *)(v5 + 428) & 0x1000) == 0)
      {
        v31 = v4;
        __nwlog_obj();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v5;
        v32 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(aBlock) = 0;
        if (__nwlog_fault(v32, type, &aBlock))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v33 = __nwlog_obj();
            v34 = type[0];
            if (os_log_type_enabled(v33, type[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v5;
              v35 = "%{public}s stream %p not in pending list, cannot remove";
LABEL_361:
              _os_log_impl(&dword_182FBE000, v33, v34, v35, buf, 0x16u);
            }
          }
          else if ((_BYTE)aBlock)
          {
            v177 = (char *)__nw_create_backtrace_string();
            v33 = __nwlog_obj();
            v34 = type[0];
            v178 = os_log_type_enabled(v33, type[0]);
            if (v177)
            {
              if (v178)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v5;
                *(_WORD *)&buf[22] = 2082;
                v618 = (uint64_t)v177;
                _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
              }
              free(v177);
              goto LABEL_362;
            }
            if (v178)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v5;
              v35 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
              goto LABEL_361;
            }
          }
          else
          {
            v33 = __nwlog_obj();
            v34 = type[0];
            if (os_log_type_enabled(v33, type[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v5;
              v35 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
              goto LABEL_361;
            }
          }
        }
LABEL_362:
        if (v32)
          free(v32);
        v4 = v31;
        goto LABEL_377;
      }
      v124 = *(_QWORD *)(v5 + 296);
      v125 = *(_QWORD **)(v5 + 304);
      if (v124)
      {
        *(_QWORD *)(v124 + 304) = v125;
        v125 = *(_QWORD **)(v5 + 304);
      }
      else
      {
        *(_QWORD *)(v3 + 256) = v125;
      }
      *v125 = v124;
      *(_QWORD *)(v5 + 296) = 0;
      *(_QWORD *)(v5 + 304) = 0;
      v180 = *(_DWORD *)(v3 + 348);
      *(_DWORD *)(v3 + 348) = v180 - 1;
      if (v180)
      {
LABEL_375:
        *(_WORD *)(v5 + 428) &= ~0x1000u;
        if ((*(_BYTE *)(v5 + 158) & 1) == 0)
        {
          if (v4[1345])
          {
            v551 = v4;
            v552 = __nwlog_obj();
            v553 = os_log_type_enabled(v552, OS_LOG_TYPE_DEBUG);
            v4 = v551;
            if (v553)
            {
              v554 = v5 + 74;
              v555 = *(_QWORD *)(v5 + 256);
              v556 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
              if (v555)
                LODWORD(v555) = *(_DWORD *)(v555 + 860);
              v5 = v589;
              v557 = *(_DWORD *)(v589 + 424);
              v558 = *(_DWORD *)(v590 + 348);
              *(_DWORD *)buf = 136448258;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v554;
              *(_WORD *)&buf[22] = 2080;
              v618 = (uint64_t)" ";
              *(_WORD *)v619 = 1024;
              *(_DWORD *)&v619[2] = v556;
              *(_WORD *)&v619[6] = 1024;
              *(_DWORD *)&v619[8] = v555;
              *(_WORD *)&v619[12] = 1024;
              *(_DWORD *)&v619[14] = v557;
              *(_WORD *)&v619[18] = 1024;
              *(_DWORD *)&v619[20] = v557;
              *(_WORD *)&v619[24] = 2048;
              *(_QWORD *)&v619[26] = v589;
              *(_WORD *)&v619[34] = 1024;
              *(_DWORD *)&v619[36] = v558;
              _os_log_impl(&dword_182FBE000, v552, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams", buf, 0x48u);
              v4 = v551;
            }
          }
        }
        goto LABEL_377;
      }
      v181 = v4;
      v182 = v3;
      __nwlog_obj();
      v183 = *(unsigned int *)(v182 + 348);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "http1->pending_stream_count";
      *(_WORD *)&buf[22] = 2048;
      v618 = 1;
      *(_WORD *)v619 = 2048;
      *(_QWORD *)&v619[2] = v183;
      v184 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(aBlock) = 0;
      if (__nwlog_fault(v184, type, &aBlock))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v185 = __nwlog_obj();
          v186 = type[0];
          if (os_log_type_enabled(v185, type[0]))
          {
            v187 = *(unsigned int *)(v590 + 348);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            v618 = 1;
            *(_WORD *)v619 = 2048;
            *(_QWORD *)&v619[2] = v187;
            v188 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_371:
            _os_log_impl(&dword_182FBE000, v185, v186, v188, buf, 0x2Au);
          }
        }
        else if ((_BYTE)aBlock)
        {
          v256 = (char *)__nw_create_backtrace_string();
          v185 = __nwlog_obj();
          v186 = type[0];
          v257 = os_log_type_enabled(v185, type[0]);
          if (v256)
          {
            if (v257)
            {
              v258 = *(unsigned int *)(v590 + 348);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->pending_stream_count";
              *(_WORD *)&buf[22] = 2048;
              v618 = 1;
              *(_WORD *)v619 = 2048;
              *(_QWORD *)&v619[2] = v258;
              *(_WORD *)&v619[10] = 2082;
              *(_QWORD *)&v619[12] = v256;
              _os_log_impl(&dword_182FBE000, v185, v186, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v256);
            goto LABEL_372;
          }
          if (v257)
          {
            v263 = *(unsigned int *)(v590 + 348);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            v618 = 1;
            *(_WORD *)v619 = 2048;
            *(_QWORD *)&v619[2] = v263;
            v188 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_371;
          }
        }
        else
        {
          v185 = __nwlog_obj();
          v186 = type[0];
          if (os_log_type_enabled(v185, type[0]))
          {
            v259 = *(unsigned int *)(v590 + 348);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            v618 = 1;
            *(_WORD *)v619 = 2048;
            *(_QWORD *)&v619[2] = v259;
            v188 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_371;
          }
        }
      }
LABEL_372:
      if (v184)
        free(v184);
      *(_DWORD *)(v590 + 348) = 0;
      v5 = v589;
      v4 = v181;
      goto LABEL_375;
    }
    if (!*(_QWORD *)(v5 + 32))
    {
      if (!(*(_BYTE *)(v5 + 158) & 1 | (v4[1345] == 0)))
      {
        v112 = __nwlog_obj();
        v113 = os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG);
        v3 = v590;
        if (v113)
        {
          v114 = *(_QWORD *)(v5 + 256);
          v115 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
          if (v114)
            LODWORD(v114) = *(_DWORD *)(v114 + 860);
          v116 = *(_DWORD *)(v589 + 424);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v5 + 74;
          *(_WORD *)&buf[22] = 2080;
          v618 = (uint64_t)" ";
          *(_WORD *)v619 = 1024;
          *(_DWORD *)&v619[2] = v115;
          *(_WORD *)&v619[6] = 1024;
          *(_DWORD *)&v619[8] = v114;
          *(_WORD *)&v619[12] = 1024;
          *(_DWORD *)&v619[14] = v116;
          *(_WORD *)&v619[18] = 2048;
          *(_QWORD *)&v619[20] = v589;
          v24 = "%{public}s %{public}s%s<i%u:c%u:s%u> Stream %p still awaiting new output handler";
          v25 = v112;
          v26 = 60;
          goto LABEL_33;
        }
      }
      goto LABEL_34;
    }
    if (!(*(_BYTE *)(v5 + 158) & 1 | (v4[1345] == 0)))
    {
      v443 = __nwlog_obj();
      if (os_log_type_enabled(v443, OS_LOG_TYPE_DEBUG))
      {
        v444 = v5 + 74;
        v445 = *(_QWORD *)(v5 + 256);
        v446 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
        if (v445)
          LODWORD(v445) = *(_DWORD *)(v445 + 860);
        v5 = v589;
        v447 = *(_DWORD *)(v589 + 424);
        v448 = *(_QWORD *)(v589 + 32);
        *(_DWORD *)buf = 136448002;
        *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v444;
        *(_WORD *)&buf[22] = 2080;
        v618 = (uint64_t)" ";
        *(_WORD *)v619 = 1024;
        *(_DWORD *)&v619[2] = v446;
        *(_WORD *)&v619[6] = 1024;
        *(_DWORD *)&v619[8] = v445;
        *(_WORD *)&v619[12] = 1024;
        *(_DWORD *)&v619[14] = v447;
        *(_WORD *)&v619[18] = 2048;
        *(_QWORD *)&v619[20] = v589;
        *(_WORD *)&v619[28] = 2048;
        *(_QWORD *)&v619[30] = v448;
        _os_log_impl(&dword_182FBE000, v443, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> creating connection for stream %p with new output_handler %p", buf, 0x46u);
      }
    }
    v38 = *(_OWORD **)(v5 + 32);
    if (v38)
    {
      v39 = *(void **)(v5 + 336);
      if (v39)
      {
        v40 = *(void **)(v5 + 320);
        if (v40)
        {
          v41 = malloc_type_calloc(1uLL, 0x370uLL, 0xEAFB8F1AuLL);
          if (!v41)
          {
            v449 = __nwlog_obj();
            os_log_type_enabled(v449, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "strict_calloc";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = 1;
            *(_WORD *)&buf[22] = 2048;
            v618 = 880;
            v450 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v450))
              goto LABEL_916;
            free(v450);
          }
          bzero(v41, 0x370uLL);
          if (nw_protocol_http1_identifier::onceToken != -1)
            dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
          v42 = v590;
          *((_QWORD *)v41 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
          if (nw_protocol_http1_get_callbacks(void)::onceToken[0] != -1)
          {
            dispatch_once(nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39614);
            v42 = v590;
          }
          *((_QWORD *)v41 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
          *((_DWORD *)v41 + 46) = 3;
          *((_QWORD *)v41 + 22) = v41;
          *((_QWORD *)v41 + 5) = v41 + 10;
          *((_QWORD *)v41 + 60) = v42;
          nw_protocol_set_output_handler((uint64_t)v41, (uint64_t)v38);
          v43 = os_retain(v39);
          v44 = *((_BYTE *)v41 + 760);
          if ((v44 & 1) != 0)
          {
            v45 = (void *)*((_QWORD *)v41 + 94);
            if (v45)
            {
              os_release(v45);
              v44 = *((_BYTE *)v41 + 760);
            }
          }
          *((_QWORD *)v41 + 94) = v43;
          *((_BYTE *)v41 + 760) = v44 | 1;
          v46 = os_retain(v40);
          v47 = *((_BYTE *)v41 + 744);
          if ((v47 & 1) != 0)
          {
            v48 = (void *)*((_QWORD *)v41 + 92);
            if (v48)
            {
              os_release(v48);
              v47 = *((_BYTE *)v41 + 744);
            }
          }
          *((_QWORD *)v41 + 92) = v46;
          *((_BYTE *)v41 + 744) = v47 | 1;
          v49 = v40;
          v50 = *(id *)(v49[13] + 136);

          v51 = *((_BYTE *)v41 + 504);
          v52 = v590;
          if ((v51 & 1) != 0)
          {
            v53 = (void *)*((_QWORD *)v41 + 62);
            if (v53)
            {
              os_release(v53);
              v52 = v590;
              v51 = *((_BYTE *)v41 + 504);
            }
          }
          *((_QWORD *)v41 + 62) = v50;
          *((_BYTE *)v41 + 504) = v51 | 1;
          v54 = MEMORY[0x1E0C809B0];
          *((_QWORD *)v41 + 24) = *(_QWORD *)(v52 + 192);
          *(_QWORD *)type = v54;
          v602 = 0x40000000;
          v603 = (uint64_t)___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
          v604 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39813;
          v605 = (void (*)(uint64_t))v41;
          metadata = nw_http_connection_create_metadata(v50, type, 0);
          v56 = *((_BYTE *)v41 + 776);
          if ((v56 & 1) != 0)
          {
            v57 = (void *)*((_QWORD *)v41 + 96);
            if (v57)
            {
              os_release(v57);
              v56 = *((_BYTE *)v41 + 776);
            }
          }
          *((_QWORD *)v41 + 96) = metadata;
          *((_BYTE *)v41 + 776) = v56 | 1;
          nw_http_connection_metadata_set_version(metadata, 3);
          nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v41 + 96), *(void **)(v590 + 312));
          *((_QWORD *)v41 + 77) = 0;
          *((_QWORD *)v41 + 78) = (char *)v41 + 616;
          *((_QWORD *)v41 + 79) = 0;
          *((_QWORD *)v41 + 80) = (char *)v41 + 632;
          *((_QWORD *)v41 + 81) = 0;
          *((_QWORD *)v41 + 82) = (char *)v41 + 648;
          *((_QWORD *)v41 + 83) = 0;
          *((_QWORD *)v41 + 84) = (char *)v41 + 664;
          *((_QWORD *)v41 + 86) = (char *)v41 + 680;
          *((_QWORD *)v41 + 85) = 0;
          nw_frame_cache_init((uint64_t)v41 + 696, (uint64_t)v41, 256, 0x40000, 16);
          v58 = *((_QWORD *)v41 + 60);
          if (v58)
          {
            *(_OWORD *)((char *)v41 + 360) = 0u;
            *(_OWORD *)((char *)v41 + 376) = 0u;
            *(_OWORD *)((char *)v41 + 392) = 0u;
            *(_OWORD *)((char *)v41 + 408) = 0u;
            *(_OWORD *)((char *)v41 + 424) = 0u;
            *(_OWORD *)((char *)v41 + 440) = 0u;
            *(_OWORD *)((char *)v41 + 328) = 0u;
            *(_OWORD *)((char *)v41 + 344) = 0u;
            *((_QWORD *)v41 + 59) = nw_http1_on_reset;
            *((_QWORD *)v41 + 37) = nw_http1_on_message_begin;
            *((_QWORD *)v41 + 38) = nw_http1_on_url;
            *((_QWORD *)v41 + 48) = nw_http1_on_message_complete;
            *((_QWORD *)v41 + 49) = nw_http1_on_url_complete;
            *((_QWORD *)v41 + 39) = nw_http1_on_status;
            *((_QWORD *)v41 + 40) = nw_http1_on_method;
            *((_QWORD *)v41 + 50) = nw_http1_on_status_complete;
            *((_QWORD *)v41 + 51) = nw_http1_on_method_complete;
            *((_QWORD *)v41 + 42) = nw_http1_on_header_field;
            *((_QWORD *)v41 + 43) = nw_http1_on_header_value;
            *((_QWORD *)v41 + 53) = nw_http1_on_header_field_complete;
            *((_QWORD *)v41 + 54) = nw_http1_on_header_value_complete;
            *((_QWORD *)v41 + 46) = nw_http1_on_headers_complete;
            *((_QWORD *)v41 + 47) = nw_http1_on_body;
            *((_QWORD *)v41 + 57) = nw_http1_on_chunk_header;
            *((_QWORD *)v41 + 58) = nw_http1_on_chunk_complete;
            v59 = *(_BYTE *)(v58 + 376);
            *(_OWORD *)((char *)v41 + 248) = 0u;
            *(_OWORD *)((char *)v41 + 200) = 0u;
            *(_OWORD *)((char *)v41 + 264) = 0u;
            *(_OWORD *)((char *)v41 + 232) = 0u;
            *(_OWORD *)((char *)v41 + 216) = 0u;
            if ((v59 & 1) != 0)
              v60 = 1;
            else
              v60 = 2;
            *((_BYTE *)v41 + 272) = v60;
            *((_QWORD *)v41 + 35) = 0;
            *((_QWORD *)v41 + 36) = (char *)v41 + 296;
            *((_WORD *)v41 + 139) = 15619;
            *((_QWORD *)v41 + 31) = v41;
            *((_QWORD *)v41 + 32) = 238;
            if ((*((_BYTE *)v41 + 158) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v61 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
              {
                v62 = *((_QWORD *)v41 + 61);
                v63 = *(_DWORD *)(*((_QWORD *)v41 + 60) + 372);
                v64 = *((_DWORD *)v41 + 215);
                if (v62)
                  LODWORD(v62) = *(_DWORD *)(v62 + 424);
                *(_DWORD *)buf = 136448258;
                *(_QWORD *)&buf[4] = "nw_http1_connection_log_parser_version";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = (char *)v41 + 74;
                *(_WORD *)&buf[22] = 2080;
                v618 = (uint64_t)" ";
                *(_WORD *)v619 = 1024;
                *(_DWORD *)&v619[2] = v63;
                *(_WORD *)&v619[6] = 1024;
                *(_DWORD *)&v619[8] = v64;
                *(_WORD *)&v619[12] = 1024;
                *(_DWORD *)&v619[14] = v62;
                *(_WORD *)&v619[18] = 1024;
                *(_DWORD *)&v619[20] = 9;
                *(_WORD *)&v619[24] = 1024;
                *(_DWORD *)&v619[26] = 2;
                *(_WORD *)&v619[30] = 1024;
                *(_DWORD *)&v619[32] = 1;
                _os_log_impl(&dword_182FBE000, v61, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u", buf, 0x44u);
              }
            }
            goto LABEL_86;
          }
          v451 = v38;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
          v452 = (char *)_os_log_send_and_compose_impl();
          v612[0] = 16;
          LOBYTE(v593[0]) = 0;
          if (__nwlog_fault(v452, v612, v593))
          {
            if (v612[0] == 17)
            {
              v453 = __nwlog_obj();
              v454 = v612[0];
              if (os_log_type_enabled(v453, (os_log_type_t)v612[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                v455 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_818:
                _os_log_impl(&dword_182FBE000, v453, v454, v455, buf, 0xCu);
              }
            }
            else if (LOBYTE(v593[0]))
            {
              v526 = (char *)__nw_create_backtrace_string();
              v453 = __nwlog_obj();
              v454 = v612[0];
              v527 = os_log_type_enabled(v453, (os_log_type_t)v612[0]);
              if (v526)
              {
                if (v527)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v526;
                  _os_log_impl(&dword_182FBE000, v453, v454, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v526);
                goto LABEL_819;
              }
              if (v527)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                v455 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
                goto LABEL_818;
              }
            }
            else
            {
              v453 = __nwlog_obj();
              v454 = v612[0];
              if (os_log_type_enabled(v453, (os_log_type_t)v612[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                v455 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                goto LABEL_818;
              }
            }
          }
LABEL_819:
          if (v452)
            free(v452);
          v38 = v451;
LABEL_86:
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          v618 = (uint64_t)v41;
          aBlock = v54;
          v595 = 0x40000000;
          v596 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
          v597 = &unk_1E14A14C8;
          v598 = (uint64_t *)buf;
          *((_QWORD *)v41 + 76) = _Block_copy(&aBlock);
          _Block_object_dispose(buf, 8);
          if ((*((_BYTE *)v41 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v465 = __nwlog_obj();
              if (os_log_type_enabled(v465, OS_LOG_TYPE_DEBUG))
              {
                v466 = *((_QWORD *)v41 + 61);
                v467 = *(_DWORD *)(*((_QWORD *)v41 + 60) + 372);
                v468 = *((_DWORD *)v41 + 215);
                if (v466)
                  LODWORD(v466) = *(_DWORD *)(v466 + 424);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = (char *)v41 + 74;
                *(_WORD *)&buf[22] = 2080;
                v618 = (uint64_t)" ";
                *(_WORD *)v619 = 1024;
                *(_DWORD *)&v619[2] = v467;
                *(_WORD *)&v619[6] = 1024;
                *(_DWORD *)&v619[8] = v468;
                *(_WORD *)&v619[12] = 1024;
                *(_DWORD *)&v619[14] = v466;
                *(_WORD *)&v619[18] = 2048;
                *(_QWORD *)&v619[20] = v41;
                _os_log_impl(&dword_182FBE000, v465, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
              }
            }
          }
          v65 = (NSObject **)(v41 + 32);
          nw_protocol_replace_input_handler((uint64_t)v38, v589, (uint64_t)v41);
          *v41 = *v38;
          v66 = (void *)*((_QWORD *)v41 + 92);
          if (v66)
          {
            v67 = v590;
            v68 = (_BYTE *)&unk_1ECD84000;
            if (!*((_QWORD *)v41 + 66))
            {
              v69 = (void **)(v41 + 35);
              v70 = nw_parameters_copy_context(*((void **)v41 + 92));
              *(_QWORD *)buf = nw_path_copy_flow_registration(v70, (uint64_t)v41);
              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v41 + 35), buf);
              v71 = (void *)*((_QWORD *)v41 + 70);
              if (v71)
              {
                v72 = v38;
                v73 = nw_path_flow_registration_copy_endpoint(v71);
                v74 = nw_path_flow_registration_copy_parameters(*v69);
                *(_QWORD *)buf = nw_endpoint_copy_association_with_evaluator(v73, v74, 0);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v41 + 33), buf);
                if (*((_QWORD *)v41 + 66))
                {
                  *(_QWORD *)buf = nw_protocol_instance_stub_create((nw_protocol *)v41);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v41 + 34), buf);
                  nw_association_register(*((void **)v41 + 66), v66, *((void **)v41 + 68), 0, &__block_literal_global_70_39832);
                  v75 = nw_association_copy_current_path(*((void **)v41 + 66), v74);
                  if (v75)
                  {
                    v76 = v75;
                    v77 = nw_path_copy_for_flow_registration(v75, *v69);
                    if (v77)
                    {
                      v78 = v77;
                      if (*v65 != v77)
                      {
                        *(_QWORD *)buf = os_retain(v77);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v41 + 32), buf);
                      }
                      if (nw_path_has_flows(v78))
                        v79 = 4096;
                      else
                        v79 = 0;
                      v80 = *((_WORD *)v41 + 436) & 0xEFFF | (*((unsigned __int8 *)v41 + 874) << 16);
                      *((_WORD *)v41 + 436) = *((_WORD *)v41 + 436) & 0xEFFF | v79;
                      *((_BYTE *)v41 + 874) = BYTE2(v80);
                      v81 = nw_parameters_copy_effective_proxy_config(v66);
                      if (v81)
                      {
                        v82 = v81;
                        if (nw_path_has_proxy_config(v76, v81))
                        {
                          *(_QWORD *)buf = os_retain(v82);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v41 + 36), buf);
                        }
                        os_release(v82);
                      }
                      os_release(v78);
                    }
                    os_release(v76);
                  }
                }
                if (v74)
                  os_release(v74);
                v38 = v72;
                if (v73)
                  os_release(v73);
              }
              v67 = v590;
              v68 = (_BYTE *)&unk_1ECD84000;
              if (v70)
              {
                os_release(v70);
                v68 = (_BYTE *)&unk_1ECD84000;
                v67 = v590;
              }
            }
            v83 = *v65;
            if (*v65)
            {
LABEL_112:
              v84 = nw_path_uses_interface_type(v83, nw_interface_type_cellular);
              v68 = (_BYTE *)&unk_1ECD84000;
              v67 = v590;
              if (v84)
                *((_QWORD *)v41 + 24) = 1000;
            }
LABEL_114:
            v85 = *(unsigned int *)(v67 + 336) + 1;
            v86 = v85 << 31 >> 31;
            *(_DWORD *)(v67 + 336) = v85;
            v87 = v589;
            if (v86 == v85 && (v86 & 0x8000000000000000) == 0)
              goto LABEL_266;
            v88 = v67;
            __nwlog_obj();
            v89 = *(unsigned int *)(v88 + 336);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->connections_count";
            *(_WORD *)&buf[22] = 2048;
            v618 = 1;
            *(_WORD *)v619 = 2048;
            *(_QWORD *)&v619[2] = v89;
            v90 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v90, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v91 = __nwlog_obj();
                v92 = type[0];
                if (os_log_type_enabled(v91, type[0]))
                {
                  v93 = *(unsigned int *)(v590 + 336);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  v618 = 1;
                  *(_WORD *)v619 = 2048;
                  *(_QWORD *)&v619[2] = v93;
                  v94 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_262:
                  _os_log_impl(&dword_182FBE000, v91, v92, v94, buf, 0x2Au);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v120 = v38;
                v121 = (char *)__nw_create_backtrace_string();
                v91 = __nwlog_obj();
                v92 = type[0];
                v122 = os_log_type_enabled(v91, type[0]);
                if (v121)
                {
                  if (v122)
                  {
                    v123 = *(unsigned int *)(v590 + 336);
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->connections_count";
                    *(_WORD *)&buf[22] = 2048;
                    v618 = 1;
                    *(_WORD *)v619 = 2048;
                    *(_QWORD *)&v619[2] = v123;
                    *(_WORD *)&v619[10] = 2082;
                    *(_QWORD *)&v619[12] = v121;
                    _os_log_impl(&dword_182FBE000, v91, v92, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v121);
                  v38 = v120;
                  goto LABEL_263;
                }
                v38 = v120;
                if (v122)
                {
                  v189 = *(unsigned int *)(v590 + 336);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  v618 = 1;
                  *(_WORD *)v619 = 2048;
                  *(_QWORD *)&v619[2] = v189;
                  v94 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_262;
                }
              }
              else
              {
                v91 = __nwlog_obj();
                v92 = type[0];
                if (os_log_type_enabled(v91, type[0]))
                {
                  v179 = *(unsigned int *)(v590 + 336);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  v618 = 1;
                  *(_WORD *)v619 = 2048;
                  *(_QWORD *)&v619[2] = v179;
                  v94 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_262;
                }
              }
            }
LABEL_263:
            if (v90)
              free(v90);
            v67 = v590;
            *(_DWORD *)(v590 + 336) = -1;
            v87 = v589;
            v68 = (_BYTE *)&unk_1ECD84000;
LABEL_266:
            v190 = *(unsigned int *)(v67 + 360) + 1;
            v191 = v190 << 31 >> 31;
            *(_DWORD *)(v67 + 360) = v190;
            if (v191 == v190 && (v191 & 0x8000000000000000) == 0)
              goto LABEL_285;
            v192 = v67;
            __nwlog_obj();
            v193 = *(unsigned int *)(v192 + 360);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
            *(_WORD *)&buf[22] = 2048;
            v618 = 1;
            *(_WORD *)v619 = 2048;
            *(_QWORD *)&v619[2] = v193;
            v194 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v194, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v195 = __nwlog_obj();
                v196 = type[0];
                if (os_log_type_enabled(v195, type[0]))
                {
                  v197 = *(unsigned int *)(v590 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v618 = 1;
                  *(_WORD *)v619 = 2048;
                  *(_QWORD *)&v619[2] = v197;
                  v198 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_281:
                  _os_log_impl(&dword_182FBE000, v195, v196, v198, buf, 0x2Au);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v199 = v38;
                v200 = (char *)__nw_create_backtrace_string();
                v195 = __nwlog_obj();
                v196 = type[0];
                v201 = os_log_type_enabled(v195, type[0]);
                if (v200)
                {
                  if (v201)
                  {
                    v202 = *(unsigned int *)(v590 + 360);
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&buf[22] = 2048;
                    v618 = 1;
                    *(_WORD *)v619 = 2048;
                    *(_QWORD *)&v619[2] = v202;
                    *(_WORD *)&v619[10] = 2082;
                    *(_QWORD *)&v619[12] = v200;
                    _os_log_impl(&dword_182FBE000, v195, v196, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v200);
                  v38 = v199;
                  goto LABEL_282;
                }
                v38 = v199;
                if (v201)
                {
                  v204 = *(unsigned int *)(v590 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v618 = 1;
                  *(_WORD *)v619 = 2048;
                  *(_QWORD *)&v619[2] = v204;
                  v198 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_281;
                }
              }
              else
              {
                v195 = __nwlog_obj();
                v196 = type[0];
                if (os_log_type_enabled(v195, type[0]))
                {
                  v203 = *(unsigned int *)(v590 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v618 = 1;
                  *(_WORD *)v619 = 2048;
                  *(_QWORD *)&v619[2] = v203;
                  v198 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_281;
                }
              }
            }
LABEL_282:
            if (v194)
              free(v194);
            LODWORD(v190) = -1;
            *(_DWORD *)(v590 + 360) = -1;
            v87 = v589;
            v68 = &unk_1ECD84000;
LABEL_285:
            *((_DWORD *)v41 + 215) = v190;
            if ((*((_BYTE *)v41 + 158) & 1) == 0)
            {
              if (v68[1345])
              {
                v469 = __nwlog_obj();
                if (os_log_type_enabled(v469, OS_LOG_TYPE_DEBUG))
                {
                  v470 = *((_QWORD *)v41 + 61);
                  v471 = *(_DWORD *)(*((_QWORD *)v41 + 60) + 372);
                  v472 = *((_DWORD *)v41 + 215);
                  if (v470)
                    LODWORD(v470) = *(_DWORD *)(v470 + 424);
                  v473 = *(_DWORD *)(v590 + 336);
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = (char *)v41 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v618 = (uint64_t)" ";
                  *(_WORD *)v619 = 1024;
                  *(_DWORD *)&v619[2] = v471;
                  *(_WORD *)&v619[6] = 1024;
                  *(_DWORD *)&v619[8] = v472;
                  *(_WORD *)&v619[12] = 1024;
                  *(_DWORD *)&v619[14] = v470;
                  *(_WORD *)&v619[18] = 2048;
                  *(_QWORD *)&v619[20] = v41;
                  *(_WORD *)&v619[28] = 1024;
                  *(_DWORD *)&v619[30] = v473;
                  _os_log_impl(&dword_182FBE000, v469, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections", buf, 0x42u);
                  v87 = v589;
                }
              }
            }
            if (*(_QWORD *)(v87 + 248))
            {
              if (!*((_QWORD *)v41 + 61))
              {
                *(_QWORD *)(v87 + 256) = v41;
                *((_QWORD *)v41 + 61) = v87;
                nw_protocol_set_output_handler(v87, *((_QWORD *)v41 + 4));
                nw_protocol_set_input_handler((uint64_t)v41, *(_QWORD *)(v87 + 48));
                *(_OWORD *)v87 = *v41;
                v211 = v588[5];
                v213 = v588[2];
                v212 = v588[3];
                v41[8] = v588[4];
                v41[9] = v211;
                v41[6] = v213;
                v41[7] = v212;
                v214 = v588[1];
                v41[4] = *v588;
                v41[5] = v214;
                nw_http_transaction_metadata_set_connection_metadata(*(void **)(v87 + 352), *((void **)v41 + 96));
                *((_WORD *)v41 + 436) &= 0xFFD7u;
                *((_DWORD *)v41 + 216) = 1;
                if ((*((_BYTE *)v41 + 158) & 1) == 0)
                {
                  v215 = __nwlog_obj();
                  if (os_log_type_enabled(v215, OS_LOG_TYPE_DEBUG))
                  {
                    v216 = *((_QWORD *)v41 + 61);
                    v217 = *(_DWORD *)(*((_QWORD *)v41 + 60) + 372);
                    v218 = *((_DWORD *)v41 + 215);
                    if (v216)
                      LODWORD(v216) = *(_DWORD *)(v216 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = (char *)v41 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v618 = (uint64_t)" ";
                    *(_WORD *)v619 = 1024;
                    *(_DWORD *)&v619[2] = v217;
                    *(_WORD *)&v619[6] = 1024;
                    *(_DWORD *)&v619[8] = v218;
                    *(_WORD *)&v619[12] = 1024;
                    *(_DWORD *)&v619[14] = v216;
                    _os_log_impl(&dword_182FBE000, v215, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                  }
                }
                if ((*(_BYTE *)(v87 + 158) & 1) == 0)
                {
                  v219 = __nwlog_obj();
                  if (os_log_type_enabled(v219, OS_LOG_TYPE_INFO))
                  {
                    v220 = *(_QWORD *)(v87 + 256);
                    v221 = *(_DWORD *)(*(_QWORD *)(v87 + 248) + 372);
                    if (v220)
                      LODWORD(v220) = *(_DWORD *)(v220 + 860);
                    v222 = *(_DWORD *)(v87 + 424);
                    *(_DWORD *)buf = 136448002;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v87 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v618 = (uint64_t)" ";
                    *(_WORD *)v619 = 1024;
                    *(_DWORD *)&v619[2] = v221;
                    *(_WORD *)&v619[6] = 1024;
                    *(_DWORD *)&v619[8] = v220;
                    *(_WORD *)&v619[12] = 1024;
                    *(_DWORD *)&v619[14] = v222;
                    *(_WORD *)&v619[18] = 2048;
                    *(_QWORD *)&v619[20] = v87;
                    *(_WORD *)&v619[28] = 2048;
                    *(_QWORD *)&v619[30] = v41;
                    _os_log_impl(&dword_182FBE000, v219, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                    if ((*(_BYTE *)(v87 + 158) & 1) != 0)
                    {
LABEL_321:
                      nw_http_transaction_metadata_set_first_on_connection(*(void **)(v87 + 352));
                      v233 = (void *)nw_protocol_boringssl_copy_definition();
                      v234 = nw_protocol_definition_get_identifier(v233);
                      v235 = (_QWORD *)nw_protocol_get_identifier((uint64_t)v38);
                      v236 = nw_protocols_are_equal(v234, v235);
                      if (v233)
                        os_release(v233);
                      if (v236)
                      {
                        v237 = nw_protocol_copy_info((uint64_t)v38, 255);
                        if (v237)
                        {
                          v238 = (void *)v237;
                          v239 = *(_QWORD *)(v237 + 24);
                          if (*(_QWORD *)(v237 + 16) != v239)
                          {
                            v240 = *(void **)(v239 - 8);
                            if (v240)
                            {
                              v241 = os_retain(v240);
                              if (v241)
                              {
                                v242 = v241;
                                if (nw_protocol_metadata_is_tls(v241))
                                {
                                  v243 = v242;
                                  nw_http_connection_metadata_set_sec_metadata(*((void **)v41 + 96), v243);
                                  os_release(v243);
                                }
                                os_release(v242);
                              }
                            }
                          }
                          os_release(v238);
                        }
                      }
                      if (v41)
                      {
                        nw_protocol_connect((uint64_t)v38, (uint64_t)v41);
                        goto LABEL_334;
                      }
                      __nwlog_obj();
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                      v439 = (char *)_os_log_send_and_compose_impl();
                      type[0] = OS_LOG_TYPE_ERROR;
                      LOBYTE(aBlock) = 0;
                      if (__nwlog_fault(v439, type, &aBlock))
                      {
                        if (type[0] == OS_LOG_TYPE_FAULT)
                        {
                          v440 = __nwlog_obj();
                          v441 = type[0];
                          if (os_log_type_enabled(v440, type[0]))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                            v442 = "%{public}s called with null connection";
LABEL_770:
                            _os_log_impl(&dword_182FBE000, v440, v441, v442, buf, 0xCu);
                          }
                        }
                        else if ((_BYTE)aBlock)
                        {
                          v497 = (char *)__nw_create_backtrace_string();
                          v440 = __nwlog_obj();
                          v441 = type[0];
                          v498 = os_log_type_enabled(v440, type[0]);
                          if (v497)
                          {
                            if (v498)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v497;
                              _os_log_impl(&dword_182FBE000, v440, v441, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                            }
                            free(v497);
                            goto LABEL_771;
                          }
                          if (v498)
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                            v442 = "%{public}s called with null connection, no backtrace";
                            goto LABEL_770;
                          }
                        }
                        else
                        {
                          v440 = __nwlog_obj();
                          v441 = type[0];
                          if (os_log_type_enabled(v440, type[0]))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                            v442 = "%{public}s called with null connection, backtrace limit exceeded";
                            goto LABEL_770;
                          }
                        }
                      }
LABEL_771:
                      if (v439)
                        free(v439);
                      nw_protocol_connect((uint64_t)v38, 0);
                      v87 = v589;
LABEL_334:
                      nw_protocol_set_output_handler(v590, 0);
                      *(_WORD *)(v87 + 428) &= ~8u;
                      v244 = *(_DWORD *)(v590 + 352);
                      *(_DWORD *)(v590 + 352) = v244 - 1;
                      if (v244)
                        return;
                      __nwlog_obj();
                      v245 = *(unsigned int *)(v590 + 352);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&buf[22] = 2048;
                      v618 = 1;
                      *(_WORD *)v619 = 2048;
                      *(_QWORD *)&v619[2] = v245;
                      v246 = (char *)_os_log_send_and_compose_impl();
                      type[0] = OS_LOG_TYPE_ERROR;
                      LOBYTE(aBlock) = 0;
                      if (!__nwlog_fault(v246, type, &aBlock))
                        goto LABEL_349;
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        v247 = __nwlog_obj();
                        v248 = type[0];
                        if (os_log_type_enabled(v247, type[0]))
                        {
                          v249 = *(unsigned int *)(v590 + 352);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                          *(_WORD *)&buf[22] = 2048;
                          v618 = 1;
                          *(_WORD *)v619 = 2048;
                          *(_QWORD *)&v619[2] = v249;
                          v250 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_348:
                          _os_log_impl(&dword_182FBE000, v247, v248, v250, buf, 0x2Au);
                        }
                      }
                      else if ((_BYTE)aBlock)
                      {
                        v251 = (char *)__nw_create_backtrace_string();
                        v247 = __nwlog_obj();
                        v248 = type[0];
                        v252 = os_log_type_enabled(v247, type[0]);
                        if (v251)
                        {
                          if (v252)
                          {
                            v253 = *(unsigned int *)(v590 + 352);
                            *(_DWORD *)buf = 136447234;
                            *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                            *(_WORD *)&buf[22] = 2048;
                            v618 = 1;
                            *(_WORD *)v619 = 2048;
                            *(_QWORD *)&v619[2] = v253;
                            *(_WORD *)&v619[10] = 2082;
                            *(_QWORD *)&v619[12] = v251;
                            _os_log_impl(&dword_182FBE000, v247, v248, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                          }
                          free(v251);
                          goto LABEL_349;
                        }
                        if (v252)
                        {
                          v255 = *(unsigned int *)(v590 + 352);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                          *(_WORD *)&buf[22] = 2048;
                          v618 = 1;
                          *(_WORD *)v619 = 2048;
                          *(_QWORD *)&v619[2] = v255;
                          v250 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                          goto LABEL_348;
                        }
                      }
                      else
                      {
                        v247 = __nwlog_obj();
                        v248 = type[0];
                        if (os_log_type_enabled(v247, type[0]))
                        {
                          v254 = *(unsigned int *)(v590 + 352);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                          *(_WORD *)&buf[22] = 2048;
                          v618 = 1;
                          *(_WORD *)v619 = 2048;
                          *(_QWORD *)&v619[2] = v254;
                          v250 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_348;
                        }
                      }
LABEL_349:
                      if (v246)
                        free(v246);
                      *(_DWORD *)(v590 + 352) = 0;
                      return;
                    }
LABEL_317:
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v229 = gLogObj;
                    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                    {
                      v230 = *(_QWORD *)(v87 + 256);
                      v231 = *(_DWORD *)(*(_QWORD *)(v87 + 248) + 372);
                      if (v230)
                        LODWORD(v230) = *(_DWORD *)(v230 + 860);
                      v232 = *(_DWORD *)(v87 + 424);
                      *(_DWORD *)buf = 136448258;
                      *(_QWORD *)&buf[4] = "nw_http1_start_new_connection_for_stream";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v87 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v618 = (uint64_t)" ";
                      *(_WORD *)v619 = 1024;
                      *(_DWORD *)&v619[2] = v231;
                      *(_WORD *)&v619[6] = 1024;
                      *(_DWORD *)&v619[8] = v230;
                      *(_WORD *)&v619[12] = 1024;
                      *(_DWORD *)&v619[14] = v232;
                      *(_WORD *)&v619[18] = 2048;
                      *(_QWORD *)&v619[20] = v41;
                      *(_WORD *)&v619[28] = 1024;
                      *(_DWORD *)&v619[30] = v232;
                      *(_WORD *)&v619[34] = 2048;
                      *(_QWORD *)&v619[36] = v87;
                      _os_log_impl(&dword_182FBE000, v229, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)", buf, 0x4Cu);
                    }
                    goto LABEL_321;
                  }
                }
LABEL_316:
                if ((*(_BYTE *)(v87 + 158) & 1) != 0)
                  goto LABEL_321;
                goto LABEL_317;
              }
              __nwlog_obj();
              v205 = *((_QWORD *)v41 + 61);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v41;
              *(_WORD *)&buf[22] = 2048;
              v618 = v205;
              v206 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (__nwlog_fault(v206, type, &aBlock))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v207 = __nwlog_obj();
                  v208 = type[0];
                  if (!os_log_type_enabled(v207, type[0]))
                    goto LABEL_314;
                  v209 = *((_QWORD *)v41 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v41;
                  *(_WORD *)&buf[22] = 2048;
                  v618 = v209;
                  v210 = "%{public}s Connection %p already has a stream (%p)";
                  goto LABEL_313;
                }
                if (!(_BYTE)aBlock)
                {
                  v207 = __nwlog_obj();
                  v208 = type[0];
                  if (!os_log_type_enabled(v207, type[0]))
                    goto LABEL_314;
                  v227 = *((_QWORD *)v41 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v41;
                  *(_WORD *)&buf[22] = 2048;
                  v618 = v227;
                  v210 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                  goto LABEL_313;
                }
                v223 = v38;
                v224 = (char *)__nw_create_backtrace_string();
                v207 = __nwlog_obj();
                v208 = type[0];
                v225 = os_log_type_enabled(v207, type[0]);
                if (v224)
                {
                  if (v225)
                  {
                    v226 = *((_QWORD *)v41 + 61);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v41;
                    *(_WORD *)&buf[22] = 2048;
                    v618 = v226;
                    *(_WORD *)v619 = 2082;
                    *(_QWORD *)&v619[2] = v224;
                    _os_log_impl(&dword_182FBE000, v207, v208, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                  }
                  free(v224);
                  v38 = v223;
                  goto LABEL_314;
                }
                v38 = v223;
                if (v225)
                {
                  v228 = *((_QWORD *)v41 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v41;
                  *(_WORD *)&buf[22] = 2048;
                  v618 = v228;
                  v210 = "%{public}s Connection %p already has a stream (%p), no backtrace";
LABEL_313:
                  _os_log_impl(&dword_182FBE000, v207, v208, v210, buf, 0x20u);
                }
              }
LABEL_314:
              if (v206)
                free(v206);
              goto LABEL_316;
            }
            v434 = v38;
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
            v461 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (!__nwlog_fault(v461, type, &aBlock))
              goto LABEL_832;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v462 = __nwlog_obj();
              v463 = type[0];
              if (!os_log_type_enabled(v462, type[0]))
                goto LABEL_832;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              v464 = "%{public}s called with null http1_stream->protocol_http1";
            }
            else if ((_BYTE)aBlock)
            {
              v530 = (char *)__nw_create_backtrace_string();
              v462 = __nwlog_obj();
              v463 = type[0];
              v531 = os_log_type_enabled(v462, type[0]);
              if (v530)
              {
                if (v531)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v530;
                  _os_log_impl(&dword_182FBE000, v462, v463, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v530);
                goto LABEL_832;
              }
              if (!v531)
              {
LABEL_832:
                if (v461)
                  free(v461);
                goto LABEL_814;
              }
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              v464 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
            }
            else
            {
              v462 = __nwlog_obj();
              v463 = type[0];
              if (!os_log_type_enabled(v462, type[0]))
                goto LABEL_832;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              v464 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
            }
            _os_log_impl(&dword_182FBE000, v462, v463, v464, buf, 0xCu);
            goto LABEL_832;
          }
          v456 = v38;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
          v457 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v457, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v458 = __nwlog_obj();
              v459 = type[0];
              if (!os_log_type_enabled(v458, type[0]))
                goto LABEL_825;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              v460 = "%{public}s called with null parameters";
LABEL_824:
              _os_log_impl(&dword_182FBE000, v458, v459, v460, buf, 0xCu);
              goto LABEL_825;
            }
            if (!(_BYTE)aBlock)
            {
              v458 = __nwlog_obj();
              v459 = type[0];
              if (!os_log_type_enabled(v458, type[0]))
                goto LABEL_825;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              v460 = "%{public}s called with null parameters, backtrace limit exceeded";
              goto LABEL_824;
            }
            v528 = (char *)__nw_create_backtrace_string();
            v458 = __nwlog_obj();
            v459 = type[0];
            v529 = os_log_type_enabled(v458, type[0]);
            if (!v528)
            {
              if (!v529)
                goto LABEL_825;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              v460 = "%{public}s called with null parameters, no backtrace";
              goto LABEL_824;
            }
            if (v529)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v528;
              _os_log_impl(&dword_182FBE000, v458, v459, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v528);
          }
LABEL_825:
          if (v457)
            free(v457);
          v67 = v590;
          v68 = (_BYTE *)&unk_1ECD84000;
          v38 = v456;
          v83 = *v65;
          if (*v65)
            goto LABEL_112;
          goto LABEL_114;
        }
        v434 = *(_OWORD **)(v5 + 32);
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
        v435 = (char *)_os_log_send_and_compose_impl();
        v612[0] = 16;
        LOBYTE(v593[0]) = 0;
        if (__nwlog_fault(v435, v612, v593))
        {
          if (v612[0] == 17)
          {
            v436 = __nwlog_obj();
            v437 = v612[0];
            if (!os_log_type_enabled(v436, (os_log_type_t)v612[0]))
              goto LABEL_779;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v438 = "%{public}s called with null parameters";
            goto LABEL_778;
          }
          if (!LOBYTE(v593[0]))
          {
            v436 = __nwlog_obj();
            v437 = v612[0];
            if (!os_log_type_enabled(v436, (os_log_type_t)v612[0]))
              goto LABEL_779;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v438 = "%{public}s called with null parameters, backtrace limit exceeded";
            goto LABEL_778;
          }
          v499 = (char *)__nw_create_backtrace_string();
          v436 = __nwlog_obj();
          v437 = v612[0];
          v516 = os_log_type_enabled(v436, (os_log_type_t)v612[0]);
          if (!v499)
          {
            if (!v516)
              goto LABEL_779;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v438 = "%{public}s called with null parameters, no backtrace";
            goto LABEL_778;
          }
          if (v516)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v499;
            v501 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
            goto LABEL_684;
          }
          goto LABEL_685;
        }
LABEL_779:
        if (!v435)
          goto LABEL_781;
        goto LABEL_780;
      }
      v434 = *(_OWORD **)(v5 + 32);
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v435 = (char *)_os_log_send_and_compose_impl();
      v612[0] = 16;
      LOBYTE(v593[0]) = 0;
      if (!__nwlog_fault(v435, v612, v593))
        goto LABEL_779;
      if (v612[0] != 17)
      {
        if (!LOBYTE(v593[0]))
        {
          v436 = __nwlog_obj();
          v437 = v612[0];
          if (!os_log_type_enabled(v436, (os_log_type_t)v612[0]))
            goto LABEL_779;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v438 = "%{public}s called with null endpoint, backtrace limit exceeded";
          goto LABEL_778;
        }
        v499 = (char *)__nw_create_backtrace_string();
        v436 = __nwlog_obj();
        v437 = v612[0];
        v500 = os_log_type_enabled(v436, (os_log_type_t)v612[0]);
        if (!v499)
        {
          if (!v500)
            goto LABEL_779;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v438 = "%{public}s called with null endpoint, no backtrace";
          goto LABEL_778;
        }
        if (v500)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v499;
          v501 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_684:
          _os_log_impl(&dword_182FBE000, v436, v437, v501, buf, 0x16u);
        }
LABEL_685:
        free(v499);
        if (!v435)
        {
LABEL_781:
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
          v559 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (!__nwlog_fault(v559, type, &aBlock))
            goto LABEL_795;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v560 = __nwlog_obj();
            v561 = type[0];
            if (!os_log_type_enabled(v560, type[0]))
              goto LABEL_795;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            v562 = "%{public}s called with null http1_connection";
          }
          else if ((_BYTE)aBlock)
          {
            v563 = (char *)__nw_create_backtrace_string();
            v560 = __nwlog_obj();
            v561 = type[0];
            v564 = os_log_type_enabled(v560, type[0]);
            if (v563)
            {
              if (v564)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v563;
                _os_log_impl(&dword_182FBE000, v560, v561, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v563);
LABEL_795:
              if (v559)
                free(v559);
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              v565 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (!__nwlog_fault(v565, type, &aBlock))
                goto LABEL_811;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v566 = __nwlog_obj();
                v567 = type[0];
                if (os_log_type_enabled(v566, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v568 = "%{public}s called with null http1_connection";
LABEL_810:
                  _os_log_impl(&dword_182FBE000, v566, v567, v568, buf, 0xCu);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v569 = (char *)__nw_create_backtrace_string();
                v566 = __nwlog_obj();
                v567 = type[0];
                v570 = os_log_type_enabled(v566, type[0]);
                if (v569)
                {
                  if (v570)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v569;
                    _os_log_impl(&dword_182FBE000, v566, v567, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v569);
                  goto LABEL_811;
                }
                if (v570)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v568 = "%{public}s called with null http1_connection, no backtrace";
                  goto LABEL_810;
                }
              }
              else
              {
                v566 = __nwlog_obj();
                v567 = type[0];
                if (os_log_type_enabled(v566, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v568 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                  goto LABEL_810;
                }
              }
LABEL_811:
              if (v565)
                free(v565);
              v41 = 0;
LABEL_814:
              v87 = v589;
              v38 = v434;
              if ((*(_BYTE *)(v589 + 158) & 1) != 0)
                goto LABEL_321;
              goto LABEL_317;
            }
            if (!v564)
              goto LABEL_795;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            v562 = "%{public}s called with null http1_connection, no backtrace";
          }
          else
          {
            v560 = __nwlog_obj();
            v561 = type[0];
            if (!os_log_type_enabled(v560, type[0]))
              goto LABEL_795;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            v562 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          }
          _os_log_impl(&dword_182FBE000, v560, v561, v562, buf, 0xCu);
          goto LABEL_795;
        }
LABEL_780:
        free(v435);
        goto LABEL_781;
      }
      v436 = __nwlog_obj();
      v437 = v612[0];
      if (!os_log_type_enabled(v436, (os_log_type_t)v612[0]))
        goto LABEL_779;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v438 = "%{public}s called with null endpoint";
    }
    else
    {
      v434 = 0;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v435 = (char *)_os_log_send_and_compose_impl();
      v612[0] = 16;
      LOBYTE(v593[0]) = 0;
      if (!__nwlog_fault(v435, v612, v593))
        goto LABEL_779;
      if (v612[0] != 17)
      {
        if (!LOBYTE(v593[0]))
        {
          v436 = __nwlog_obj();
          v437 = v612[0];
          if (!os_log_type_enabled(v436, (os_log_type_t)v612[0]))
            goto LABEL_779;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v438 = "%{public}s called with null output_handler, backtrace limit exceeded";
          goto LABEL_778;
        }
        v495 = (char *)__nw_create_backtrace_string();
        v436 = __nwlog_obj();
        v437 = v612[0];
        v496 = os_log_type_enabled(v436, (os_log_type_t)v612[0]);
        if (!v495)
        {
          if (!v496)
            goto LABEL_779;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v438 = "%{public}s called with null output_handler, no backtrace";
          goto LABEL_778;
        }
        if (v496)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v495;
          _os_log_impl(&dword_182FBE000, v436, v437, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v495);
        goto LABEL_779;
      }
      v436 = __nwlog_obj();
      v437 = v612[0];
      if (!os_log_type_enabled(v436, (os_log_type_t)v612[0]))
        goto LABEL_779;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v438 = "%{public}s called with null output_handler";
    }
LABEL_778:
    _os_log_impl(&dword_182FBE000, v436, v437, v438, buf, 0xCu);
    goto LABEL_779;
  }
  if ((*(_BYTE *)(v3 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v30 = *(_DWORD *)(v590 + 372);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_http1_match_idle_connection_with_pending_stream";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v590 + 74;
      *(_WORD *)&buf[22] = 2080;
      v618 = (uint64_t)" ";
      *(_WORD *)v619 = 1024;
      *(_DWORD *)&v619[2] = v30;
      v29 = "%{public}s %{public}s%s<i%u> no pending streams, nothing to do";
      goto LABEL_40;
    }
  }
}

void ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  const char *v21;
  char *backtrace_string;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  const void *v64;
  void *v65;
  char *v66;
  NSObject *v67;
  os_log_type_t v68;
  const char *v69;
  uint64_t *v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  const char *v74;
  uint64_t *v75;
  char *v76;
  NSObject *v77;
  os_log_type_t v78;
  const char *v79;
  NSObject *v80;
  uint64_t v81;
  int v82;
  int v83;
  NSObject *v84;
  NSObject *v85;
  uint64_t v86;
  int v87;
  int v88;
  NSObject *v89;
  NSObject *v90;
  uint64_t v91;
  int v92;
  int v93;
  NSObject *v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  NSObject *v99;
  int v100;
  int v101;
  NSObject *v102;
  uint64_t v103;
  int v104;
  int v105;
  NSObject *v106;
  uint64_t v107;
  int v108;
  int v109;
  NSObject *v110;
  char *v111;
  _BOOL4 v112;
  NSObject *v113;
  int v114;
  int v115;
  char *v116;
  NSObject *v117;
  _BOOL4 v118;
  char *v119;
  _BOOL4 v120;
  uint64_t *v121;
  char *v122;
  NSObject *v123;
  os_log_type_t v124;
  const char *v125;
  NSObject *v126;
  NSObject *v127;
  NSObject *v128;
  char *v129;
  _BOOL4 v130;
  NSObject *log;
  uint64_t *v132;
  char v133;
  os_log_type_t v134;
  __int128 type;
  uint64_t (*v136)(__int128 *);
  void *v137;
  uint64_t v138;
  _BYTE buf[24];
  uint64_t v140;
  _BYTE v141[28];
  __int16 v142;
  uint64_t v143;
  int v144;
  const char *v145;
  __int16 v146;
  char *v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v1 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (!v1)
    return;
  v2 = v1;
  v3 = *(_QWORD *)(v1 + 480);
  if (v3)
  {
    nw_http_connection_metadata_closed(*(void **)(v1 + 768));
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (!gLogDatapath)
        goto LABEL_5;
      v80 = __nwlog_obj();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      {
        v81 = *(_QWORD *)(v2 + 488);
        v82 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
        v83 = *(_DWORD *)(v2 + 860);
        if (v81)
          LODWORD(v81) = *(_DWORD *)(v81 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v2 + 74;
        *(_WORD *)&buf[22] = 2080;
        v140 = (uint64_t)" ";
        *(_WORD *)v141 = 1024;
        *(_DWORD *)&v141[2] = v82;
        *(_WORD *)&v141[6] = 1024;
        *(_DWORD *)&v141[8] = v83;
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = v81;
        _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing unprocessed_input_frames", buf, 0x32u);
      }
    }
    if (gLogDatapath)
    {
      v84 = __nwlog_obj();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(type) = 136446210;
        *(_QWORD *)((char *)&type + 4) = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&type, 0xCu);
      }
    }
LABEL_5:
    v4 = MEMORY[0x1E0C809B0];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
    v140 = (uint64_t)&__block_descriptor_tmp_55_39648;
    *(_QWORD *)v141 = v2 + 616;
    v141[8] = 0;
    v5 = *(_QWORD *)(v2 + 616);
    do
    {
      if (!v5)
        break;
      v6 = *(_QWORD *)(v5 + 32);
      v7 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v5 = v6;
    }
    while ((v7 & 1) != 0);
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (!gLogDatapath)
        goto LABEL_10;
      v85 = __nwlog_obj();
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
      {
        v86 = *(_QWORD *)(v2 + 488);
        v87 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
        v88 = *(_DWORD *)(v2 + 860);
        if (v86)
          LODWORD(v86) = *(_DWORD *)(v86 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v2 + 74;
        *(_WORD *)&buf[22] = 2080;
        v140 = (uint64_t)" ";
        *(_WORD *)v141 = 1024;
        *(_DWORD *)&v141[2] = v87;
        *(_WORD *)&v141[6] = 1024;
        *(_DWORD *)&v141[8] = v88;
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = v86;
        _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing processed_input_frames", buf, 0x32u);
      }
    }
    if (gLogDatapath)
    {
      v89 = __nwlog_obj();
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(type) = 136446210;
        *(_QWORD *)((char *)&type + 4) = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v89, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&type, 0xCu);
      }
    }
LABEL_10:
    *(_QWORD *)buf = v4;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
    v140 = (uint64_t)&__block_descriptor_tmp_55_39648;
    *(_QWORD *)v141 = v2 + 632;
    v141[8] = 0;
    v8 = *(_QWORD *)(v2 + 632);
    do
    {
      if (!v8)
        break;
      v9 = *(_QWORD *)(v8 + 32);
      v10 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v8 = v9;
    }
    while ((v10 & 1) != 0);
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v90 = __nwlog_obj();
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
        {
          v91 = *(_QWORD *)(v2 + 488);
          v92 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
          v93 = *(_DWORD *)(v2 + 860);
          if (v91)
            LODWORD(v91) = *(_DWORD *)(v91 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v2 + 74;
          *(_WORD *)&buf[22] = 2080;
          v140 = (uint64_t)" ";
          *(_WORD *)v141 = 1024;
          *(_DWORD *)&v141[2] = v92;
          *(_WORD *)&v141[6] = 1024;
          *(_DWORD *)&v141[8] = v93;
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = v91;
          _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removing pending_output_frames", buf, 0x32u);
        }
      }
    }
    *(_QWORD *)&type = v4;
    *((_QWORD *)&type + 1) = 0x40000000;
    v136 = (uint64_t (*)(__int128 *))___ZL29nw_http1_tear_down_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke;
    v137 = &__block_descriptor_tmp_54_39700;
    v138 = v2;
    v11 = *(_QWORD *)(v2 + 648);
    do
    {
      if (!v11)
        break;
      v12 = *(_QWORD *)(v11 + 32);
      v13 = v136(&type);
      v11 = v12;
    }
    while ((v13 & 1) != 0);
    v14 = (uint64_t *)(v2 + 696);
    nw_frame_cache_remove_all((uint64_t *)(v2 + 696));
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v94 = __nwlog_obj();
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          v95 = *(_QWORD *)(v2 + 488);
          v96 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
          v97 = *(_DWORD *)(v2 + 860);
          if (v95)
            LODWORD(v95) = *(_DWORD *)(v95 + 424);
          v98 = *(_QWORD *)(v2 + 32);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v2 + 74;
          *(_WORD *)&buf[22] = 2080;
          v140 = (uint64_t)" ";
          *(_WORD *)v141 = 1024;
          *(_DWORD *)&v141[2] = v96;
          *(_WORD *)&v141[6] = 1024;
          *(_DWORD *)&v141[8] = v97;
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = v95;
          *(_WORD *)&v141[18] = 2048;
          *(_QWORD *)&v141[20] = v98;
          _os_log_impl(&dword_182FBE000, v94, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> calling remove input handler on output handler %p", buf, 0x3Cu);
        }
      }
    }
    v15 = *(_DWORD *)(v3 + 336);
    *(_DWORD *)(v3 + 336) = v15 - 1;
    if (v15)
    {
      if ((*(_BYTE *)(v3 + 158) & 1) != 0)
        goto LABEL_41;
      goto LABEL_40;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = *(unsigned int *)(v3 + 336);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->connections_count";
    *(_WORD *)&buf[22] = 2048;
    v140 = 1;
    *(_WORD *)v141 = 2048;
    *(_QWORD *)&v141[2] = v16;
    v17 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v144) = 16;
    v134 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v17, &v144, &v134))
    {
      if (v144 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = gLogObj;
        v19 = v144;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v144))
          goto LABEL_37;
        v20 = *(unsigned int *)(v3 + 336);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v140 = 1;
        *(_WORD *)v141 = 2048;
        *(_QWORD *)&v141[2] = v20;
        v21 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_36:
        _os_log_impl(&dword_182FBE000, v18, v19, v21, buf, 0x2Au);
        goto LABEL_37;
      }
      if (v134 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = gLogObj;
        v19 = v144;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v144))
          goto LABEL_37;
        v25 = *(unsigned int *)(v3 + 336);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v140 = 1;
        *(_WORD *)v141 = 2048;
        *(_QWORD *)&v141[2] = v25;
        v21 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      v19 = v144;
      v23 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v144);
      if (!backtrace_string)
      {
        if (!v23)
          goto LABEL_37;
        v26 = *(unsigned int *)(v3 + 336);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v140 = 1;
        *(_WORD *)v141 = 2048;
        *(_QWORD *)&v141[2] = v26;
        v21 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
        goto LABEL_36;
      }
      if (v23)
      {
        v24 = *(unsigned int *)(v3 + 336);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v140 = 1;
        *(_WORD *)v141 = 2048;
        *(_QWORD *)&v141[2] = v24;
        *(_WORD *)&v141[10] = 2082;
        *(_QWORD *)&v141[12] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
      }
      free(backtrace_string);
    }
LABEL_37:
    if (v17)
      free(v17);
    *(_DWORD *)(v3 + 336) = 0;
    v4 = MEMORY[0x1E0C809B0];
    v14 = (uint64_t *)(v2 + 696);
    if ((*(_BYTE *)(v3 + 158) & 1) != 0)
    {
LABEL_41:
      if ((*(_WORD *)(v2 + 872) & 0x800) == 0)
        goto LABEL_62;
      v27 = *(_DWORD *)(v3 + 368);
      *(_DWORD *)(v3 + 368) = v27 - 1;
      if (v27)
      {
LABEL_60:
        if ((*(_BYTE *)(v3 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v113 = __nwlog_obj();
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
            {
              v114 = *(_DWORD *)(v3 + 372);
              v115 = *(_DWORD *)(v3 + 368) + *(_DWORD *)(v3 + 364);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v3 + 74;
              *(_WORD *)&buf[22] = 2080;
              v140 = (uint64_t)" ";
              *(_WORD *)v141 = 1024;
              *(_DWORD *)&v141[2] = v114;
              *(_WORD *)&v141[6] = 1024;
              *(_DWORD *)&v141[8] = v115;
              *(_WORD *)&v141[12] = 2048;
              *(_QWORD *)&v141[14] = v2;
              _os_log_impl(&dword_182FBE000, v113, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> decreased connection pool width to %u after removing non-reusable connection %p", buf, 0x36u);
            }
          }
        }
LABEL_62:
        nw_protocol_remove_input_handler(*(_QWORD *)(v2 + 32), v2);
        nw_protocol_set_output_handler(v2, 0);
        if ((*(_BYTE *)(v2 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v102 = __nwlog_obj();
            if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
            {
              v103 = *(_QWORD *)(v2 + 488);
              v104 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
              v105 = *(_DWORD *)(v2 + 860);
              if (v103)
                LODWORD(v103) = *(_DWORD *)(v103 + 424);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_http1_connection_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v2 + 74;
              *(_WORD *)&buf[22] = 2080;
              v140 = (uint64_t)" ";
              *(_WORD *)v141 = 1024;
              *(_DWORD *)&v141[2] = v104;
              *(_WORD *)&v141[6] = 1024;
              *(_DWORD *)&v141[8] = v105;
              *(_WORD *)&v141[12] = 1024;
              *(_DWORD *)&v141[14] = v103;
              *(_WORD *)&v141[18] = 2048;
              *(_QWORD *)&v141[20] = v2;
              _os_log_impl(&dword_182FBE000, v102, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> destroying %p", buf, 0x3Cu);
            }
          }
        }
        v39 = *(_BYTE *)(v2 + 760);
        if ((v39 & 1) != 0)
        {
          v40 = *(void **)(v2 + 752);
          if (v40)
          {
            os_release(v40);
            v39 = *(_BYTE *)(v2 + 760);
          }
        }
        *(_QWORD *)(v2 + 752) = 0;
        *(_BYTE *)(v2 + 760) = v39 | 1;
        v41 = *(_BYTE *)(v2 + 744);
        if ((v41 & 1) != 0)
        {
          v42 = *(void **)(v2 + 736);
          if (v42)
          {
            os_release(v42);
            v41 = *(_BYTE *)(v2 + 744);
          }
        }
        *(_QWORD *)(v2 + 736) = 0;
        *(_BYTE *)(v2 + 744) = v41 | 1;
        v43 = *(_QWORD *)(v2 + 488);
        if (!v43 || *(_QWORD *)(v43 + 256) != v2)
        {
LABEL_83:
          *(_QWORD *)(v2 + 488) = 0;
          if ((*(_BYTE *)(v2 + 158) & 1) == 0)
          {
            if (!gLogDatapath)
              goto LABEL_85;
            v106 = __nwlog_obj();
            if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
            {
              v107 = *(_QWORD *)(v2 + 488);
              v108 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
              v109 = *(_DWORD *)(v2 + 860);
              if (v107)
                LODWORD(v107) = *(_DWORD *)(v107 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_connection_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v2 + 74;
              *(_WORD *)&buf[22] = 2080;
              v140 = (uint64_t)" ";
              *(_WORD *)v141 = 1024;
              *(_DWORD *)&v141[2] = v108;
              *(_WORD *)&v141[6] = 1024;
              *(_DWORD *)&v141[8] = v109;
              *(_WORD *)&v141[12] = 1024;
              *(_DWORD *)&v141[14] = v107;
              _os_log_impl(&dword_182FBE000, v106, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing frame arrays", buf, 0x32u);
            }
          }
          if (gLogDatapath)
          {
            v110 = __nwlog_obj();
            if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
            {
              v144 = 136446210;
              v145 = "nw_protocol_finalize_master_frame_array";
              _os_log_impl(&dword_182FBE000, v110, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v144, 0xCu);
            }
          }
LABEL_85:
          *(_QWORD *)buf = v4;
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39725;
          v140 = (uint64_t)&__block_descriptor_tmp_57_39726;
          v141[0] = 0;
          v51 = *(_QWORD *)(v2 + 680);
          do
          {
            if (!v51)
              break;
            v52 = *(_QWORD *)(v51 + 16);
            v53 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            v51 = v52;
          }
          while ((v53 & 1) != 0);
          if (!*(_QWORD *)(v2 + 680))
          {
            if (!gLogDatapath)
              goto LABEL_90;
            goto LABEL_192;
          }
          v70 = v14;
          __nwlog_obj();
          v144 = 136446210;
          v145 = "nw_protocol_finalize_master_frame_array";
          v71 = (char *)_os_log_send_and_compose_impl();
          v134 = OS_LOG_TYPE_ERROR;
          v133 = 0;
          if (__nwlog_fault(v71, &v134, &v133))
          {
            if (v134 == OS_LOG_TYPE_FAULT)
            {
              v72 = __nwlog_obj();
              v73 = v134;
              if (!os_log_type_enabled(v72, v134))
                goto LABEL_189;
              v144 = 136446210;
              v145 = "nw_protocol_finalize_master_frame_array";
              v74 = "%{public}s frame array is not empty after finalize";
LABEL_187:
              v127 = v72;
LABEL_188:
              _os_log_impl(&dword_182FBE000, v127, v73, v74, (uint8_t *)&v144, 0xCu);
              goto LABEL_189;
            }
            if (!v133)
            {
              v72 = __nwlog_obj();
              v73 = v134;
              if (!os_log_type_enabled(v72, v134))
                goto LABEL_189;
              v144 = 136446210;
              v145 = "nw_protocol_finalize_master_frame_array";
              v74 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
              goto LABEL_187;
            }
            v116 = (char *)__nw_create_backtrace_string();
            v117 = __nwlog_obj();
            v73 = v134;
            log = v117;
            v118 = os_log_type_enabled(v117, v134);
            if (v116)
            {
              if (v118)
              {
                v144 = 136446466;
                v145 = "nw_protocol_finalize_master_frame_array";
                v146 = 2082;
                v147 = v116;
                _os_log_impl(&dword_182FBE000, log, v73, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", (uint8_t *)&v144, 0x16u);
              }
              free(v116);
            }
            else if (v118)
            {
              v144 = 136446210;
              v145 = "nw_protocol_finalize_master_frame_array";
              v74 = "%{public}s frame array is not empty after finalize, no backtrace";
              v127 = log;
              goto LABEL_188;
            }
          }
LABEL_189:
          if (v71)
            free(v71);
          v14 = v70;
          if (!gLogDatapath)
          {
LABEL_90:
            *(_QWORD *)buf = v4;
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39725;
            v140 = (uint64_t)&__block_descriptor_tmp_57_39726;
            v141[0] = 0;
            v54 = *(_QWORD *)(v2 + 664);
            do
            {
              if (!v54)
                break;
              v55 = *(_QWORD *)(v54 + 16);
              v56 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
              v54 = v55;
            }
            while ((v56 & 1) != 0);
            if (!*(_QWORD *)(v2 + 664))
            {
LABEL_94:
              nw_frame_cache_destroy(v14);
              v57 = *(void **)(v2 + 528);
              if (v57)
              {
                v58 = *(void **)(v2 + 544);
                if (v58)
                  nw_association_unregister(v57, v58);
              }
              v59 = *(void **)(v2 + 800);
              if (v59)
              {
                free(v59);
                *(_QWORD *)(v2 + 800) = 0;
              }
              *(_DWORD *)(v2 + 840) = 0;
              v60 = *(void **)(v2 + 808);
              if (v60)
              {
                free(v60);
                *(_QWORD *)(v2 + 808) = 0;
              }
              *(_DWORD *)(v2 + 844) = 0;
              v61 = *(void **)(v2 + 816);
              if (v61)
              {
                free(v61);
                *(_QWORD *)(v2 + 816) = 0;
              }
              *(_DWORD *)(v2 + 848) = 0;
              v62 = *(void **)(v2 + 824);
              if (v62)
              {
                free(v62);
                *(_QWORD *)(v2 + 824) = 0;
              }
              *(_DWORD *)(v2 + 852) = 0;
              v63 = *(void **)(v2 + 832);
              if (v63)
              {
                free(v63);
                *(_QWORD *)(v2 + 832) = 0;
              }
              *(_DWORD *)(v2 + 856) = 0;
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 608) + 16))(*(_QWORD *)(v2 + 608), 0);
              v64 = *(const void **)(v2 + 608);
              if (v64)
              {
                _Block_release(v64);
                *(_QWORD *)(v2 + 608) = 0;
              }
              nw_http1_connection::~nw_http1_connection((nw_http1_connection *)v2);
              free(v65);
              if (!*(_DWORD *)(v3 + 336) && !*(_DWORD *)(v3 + 344))
                nw_protocol_http1_destroy(v3, v3);
              return;
            }
            v75 = v14;
            __nwlog_obj();
            v144 = 136446210;
            v145 = "nw_protocol_finalize_master_frame_array";
            v76 = (char *)_os_log_send_and_compose_impl();
            v134 = OS_LOG_TYPE_ERROR;
            v133 = 0;
            if (__nwlog_fault(v76, &v134, &v133))
            {
              if (v134 == OS_LOG_TYPE_FAULT)
              {
                v77 = __nwlog_obj();
                v78 = v134;
                if (os_log_type_enabled(v77, v134))
                {
                  v144 = 136446210;
                  v145 = "nw_protocol_finalize_master_frame_array";
                  v79 = "%{public}s frame array is not empty after finalize";
LABEL_205:
                  _os_log_impl(&dword_182FBE000, v77, v78, v79, (uint8_t *)&v144, 0xCu);
                }
              }
              else if (v133)
              {
                v119 = (char *)__nw_create_backtrace_string();
                v77 = __nwlog_obj();
                v78 = v134;
                v120 = os_log_type_enabled(v77, v134);
                if (v119)
                {
                  if (v120)
                  {
                    v144 = 136446466;
                    v145 = "nw_protocol_finalize_master_frame_array";
                    v146 = 2082;
                    v147 = v119;
                    _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", (uint8_t *)&v144, 0x16u);
                  }
                  free(v119);
                  goto LABEL_206;
                }
                if (v120)
                {
                  v144 = 136446210;
                  v145 = "nw_protocol_finalize_master_frame_array";
                  v79 = "%{public}s frame array is not empty after finalize, no backtrace";
                  goto LABEL_205;
                }
              }
              else
              {
                v77 = __nwlog_obj();
                v78 = v134;
                if (os_log_type_enabled(v77, v134))
                {
                  v144 = 136446210;
                  v145 = "nw_protocol_finalize_master_frame_array";
                  v79 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
                  goto LABEL_205;
                }
              }
            }
LABEL_206:
            if (v76)
              free(v76);
            v14 = v75;
            goto LABEL_94;
          }
LABEL_192:
          v128 = __nwlog_obj();
          if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_finalize_master_frame_array";
            _os_log_impl(&dword_182FBE000, v128, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
          }
          goto LABEL_90;
        }
        if (*(_QWORD *)(v43 + 248))
        {
          if ((*(_BYTE *)(v43 + 158) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v44 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              v45 = *(_QWORD *)(v43 + 256);
              v46 = *(_DWORD *)(*(_QWORD *)(v43 + 248) + 372);
              if (v45)
                LODWORD(v45) = *(_DWORD *)(v45 + 860);
              v47 = *(_DWORD *)(v43 + 424);
              *(_DWORD *)buf = 136448002;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v43 + 74;
              *(_WORD *)&buf[22] = 2080;
              v140 = (uint64_t)" ";
              *(_WORD *)v141 = 1024;
              *(_DWORD *)&v141[2] = v46;
              *(_WORD *)&v141[6] = 1024;
              *(_DWORD *)&v141[8] = v45;
              *(_WORD *)&v141[12] = 1024;
              *(_DWORD *)&v141[14] = v47;
              *(_WORD *)&v141[18] = 2048;
              *(_QWORD *)&v141[20] = v43;
              v142 = 2048;
              v143 = v2;
              _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p", buf, 0x46u);
            }
          }
          if (gLogDatapath)
          {
            v126 = __nwlog_obj();
            if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
              _os_log_impl(&dword_182FBE000, v126, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }
          *(_QWORD *)buf = v4;
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
          v140 = (uint64_t)&__block_descriptor_tmp_55_39648;
          *(_QWORD *)v141 = v2 + 632;
          v141[8] = 0;
          v48 = *(_QWORD *)(v2 + 632);
          do
          {
            if (!v48)
              break;
            v49 = *(_QWORD *)(v48 + 32);
            v50 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            v48 = v49;
          }
          while ((v50 & 1) != 0);
          *(_QWORD *)(v43 + 256) = 0;
          *(_QWORD *)(v2 + 488) = 0;
          nw_protocol_set_output_handler(v43, 0);
          nw_protocol_set_input_handler(v2, 0);
          goto LABEL_83;
        }
        v121 = v14;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
        v122 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v144) = 16;
        v134 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v122, &v144, &v134))
        {
          if (v144 == 17)
          {
            v123 = __nwlog_obj();
            v124 = v144;
            if (os_log_type_enabled(v123, (os_log_type_t)v144))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v125 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_218:
              _os_log_impl(&dword_182FBE000, v123, v124, v125, buf, 0xCu);
            }
          }
          else if (v134)
          {
            v129 = (char *)__nw_create_backtrace_string();
            v123 = __nwlog_obj();
            v124 = v144;
            v130 = os_log_type_enabled(v123, (os_log_type_t)v144);
            if (v129)
            {
              if (v130)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v129;
                _os_log_impl(&dword_182FBE000, v123, v124, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v129);
              goto LABEL_219;
            }
            if (v130)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v125 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
              goto LABEL_218;
            }
          }
          else
          {
            v123 = __nwlog_obj();
            v124 = v144;
            if (os_log_type_enabled(v123, (os_log_type_t)v144))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v125 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
              goto LABEL_218;
            }
          }
        }
LABEL_219:
        if (v122)
          free(v122);
        v14 = v121;
        goto LABEL_83;
      }
      v132 = v14;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v28 = *(unsigned int *)(v3 + 368);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
      *(_WORD *)&buf[22] = 2048;
      v140 = 1;
      *(_WORD *)v141 = 2048;
      *(_QWORD *)&v141[2] = v28;
      v29 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v144) = 16;
      v134 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v29, &v144, &v134))
      {
        if (v144 == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v30 = gLogObj;
          v31 = v144;
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v144))
          {
            v32 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v140 = 1;
            *(_WORD *)v141 = 2048;
            *(_QWORD *)&v141[2] = v32;
            v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_56:
            _os_log_impl(&dword_182FBE000, v30, v31, v33, buf, 0x2Au);
          }
        }
        else if (v134)
        {
          v34 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v30 = gLogObj;
          v31 = v144;
          v35 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v144);
          if (v34)
          {
            if (v35)
            {
              v36 = *(unsigned int *)(v3 + 368);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              v140 = 1;
              *(_WORD *)v141 = 2048;
              *(_QWORD *)&v141[2] = v36;
              *(_WORD *)&v141[10] = 2082;
              *(_QWORD *)&v141[12] = v34;
              _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v34);
            goto LABEL_57;
          }
          if (v35)
          {
            v38 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v140 = 1;
            *(_WORD *)v141 = 2048;
            *(_QWORD *)&v141[2] = v38;
            v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_56;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v30 = gLogObj;
          v31 = v144;
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v144))
          {
            v37 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v140 = 1;
            *(_WORD *)v141 = 2048;
            *(_QWORD *)&v141[2] = v37;
            v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_56;
          }
        }
      }
LABEL_57:
      if (v29)
        free(v29);
      *(_DWORD *)(v3 + 368) = 0;
      v4 = MEMORY[0x1E0C809B0];
      v14 = v132;
      goto LABEL_60;
    }
LABEL_40:
    if (gLogDatapath)
    {
      v99 = __nwlog_obj();
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
      {
        v100 = *(_DWORD *)(v3 + 372);
        v101 = *(_DWORD *)(v3 + 336);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v3 + 74;
        *(_WORD *)&buf[22] = 2080;
        v140 = (uint64_t)" ";
        *(_WORD *)v141 = 1024;
        *(_DWORD *)&v141[2] = v100;
        *(_WORD *)&v141[6] = 2048;
        *(_QWORD *)&v141[8] = v2;
        *(_WORD *)&v141[16] = 1024;
        *(_DWORD *)&v141[18] = v101;
        _os_log_impl(&dword_182FBE000, v99, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> removed connection %p, now have %u connections", buf, 0x36u);
      }
    }
    goto LABEL_41;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
  v66 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(type) = 16;
  LOBYTE(v144) = 0;
  if (__nwlog_fault(v66, &type, &v144))
  {
    if (type == 17)
    {
      v67 = __nwlog_obj();
      v68 = type;
      if (!os_log_type_enabled(v67, (os_log_type_t)type))
        goto LABEL_199;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
      v69 = "%{public}s called with null http1";
      goto LABEL_198;
    }
    if (!(_BYTE)v144)
    {
      v67 = __nwlog_obj();
      v68 = type;
      if (!os_log_type_enabled(v67, (os_log_type_t)type))
        goto LABEL_199;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
      v69 = "%{public}s called with null http1, backtrace limit exceeded";
      goto LABEL_198;
    }
    v111 = (char *)__nw_create_backtrace_string();
    v67 = __nwlog_obj();
    v68 = type;
    v112 = os_log_type_enabled(v67, (os_log_type_t)type);
    if (v111)
    {
      if (v112)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v111;
        _os_log_impl(&dword_182FBE000, v67, v68, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v111);
      goto LABEL_199;
    }
    if (v112)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
      v69 = "%{public}s called with null http1, no backtrace";
LABEL_198:
      _os_log_impl(&dword_182FBE000, v67, v68, v69, buf, 0xCu);
    }
  }
LABEL_199:
  if (v66)
    free(v66);
}

uint64_t ___ZL29nw_http1_tear_down_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a2[4];
  v3 = (_QWORD *)a2[5];
  if (v2)
  {
    *(_QWORD *)(v2 + 40) = v3;
    v3 = (_QWORD *)a2[5];
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 656) = v3;
  }
  *v3 = v2;
  a2[4] = 0;
  a2[5] = 0;
  a2[10] = 0;
  a2[11] = 0;
  nw_frame_cache_return_frame(*(_QWORD *)(a1 + 32) + 696, (uint64_t)a2);
  return 1;
}

uint64_t ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39725(uint64_t a1, uint64_t a2)
{
  nw_frame_finalize(a2);
  return 1;
}

void nw_http1_connection::~nw_http1_connection(nw_http1_connection *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if ((*((_BYTE *)this + 776) & 1) != 0)
  {
    v2 = (void *)*((_QWORD *)this + 96);
    if (v2)
      os_release(v2);
  }
  *((_QWORD *)this + 96) = 0;
  if ((*((_BYTE *)this + 760) & 1) != 0)
  {
    v3 = (void *)*((_QWORD *)this + 94);
    if (v3)
      os_release(v3);
  }
  *((_QWORD *)this + 94) = 0;
  if ((*((_BYTE *)this + 744) & 1) != 0)
  {
    v4 = (void *)*((_QWORD *)this + 92);
    if (v4)
      os_release(v4);
  }
  *((_QWORD *)this + 92) = 0;
  if ((*((_BYTE *)this + 584) & 1) != 0)
  {
    v5 = (void *)*((_QWORD *)this + 72);
    if (v5)
      os_release(v5);
  }
  *((_QWORD *)this + 72) = 0;
  if ((*((_BYTE *)this + 568) & 1) != 0)
  {
    v6 = (void *)*((_QWORD *)this + 70);
    if (v6)
      os_release(v6);
  }
  *((_QWORD *)this + 70) = 0;
  if ((*((_BYTE *)this + 552) & 1) != 0)
  {
    v7 = (void *)*((_QWORD *)this + 68);
    if (v7)
      os_release(v7);
  }
  *((_QWORD *)this + 68) = 0;
  if ((*((_BYTE *)this + 536) & 1) != 0)
  {
    v8 = (void *)*((_QWORD *)this + 66);
    if (v8)
      os_release(v8);
  }
  *((_QWORD *)this + 66) = 0;
  if ((*((_BYTE *)this + 520) & 1) != 0)
  {
    v9 = (void *)*((_QWORD *)this + 64);
    if (v9)
      os_release(v9);
  }
  *((_QWORD *)this + 64) = 0;
  if ((*((_BYTE *)this + 504) & 1) != 0)
  {
    v10 = (void *)*((_QWORD *)this + 62);
    if (v10)
      os_release(v10);
  }
  *((_QWORD *)this + 62) = 0;
}

void nw_protocol_http1_destroy(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  NSObject *v8;
  int v9;
  uint64_t v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  const void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 344) || *(_DWORD *)(a2 + 336))
  {
    if ((*(_BYTE *)(a2 + 158) & 1) == 0 && gLogDatapath)
    {
      v3 = __nwlog_obj();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        v4 = *(_DWORD *)(a2 + 372);
        v5 = *(_DWORD *)(a2 + 344);
        v6 = *(_DWORD *)(a2 + 336);
        v20 = 136447746;
        v21 = "nw_protocol_http1_destroy";
        v22 = 2082;
        v23 = a2 + 74;
        v24 = 2080;
        v25 = " ";
        v26 = 1024;
        v27 = v4;
        v28 = 2048;
        v29 = a2;
        v30 = 1024;
        v31 = v5;
        v32 = 1024;
        v33 = v6;
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> not destroying http1 %p, still have %u input handlers and %u output handlers", (uint8_t *)&v20, 0x3Cu);
      }
    }
  }
  else
  {
    if ((*(_BYTE *)(a2 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        v9 = *(_DWORD *)(a2 + 372);
        v20 = 136446978;
        v21 = "nw_protocol_http1_destroy";
        v22 = 2082;
        v23 = a2 + 74;
        v24 = 2080;
        v25 = " ";
        v26 = 1024;
        v27 = v9;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> no more input handlers or output handlers, destroying", (uint8_t *)&v20, 0x26u);
      }
    }
    v10 = *(_QWORD *)(a2 + 328);
    if (v10)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 8))(v10, a2, 0);
    nw_protocol_remove_instance(a1);
    v11 = *(_BYTE *)(a2 + 288);
    if ((v11 & 1) != 0)
    {
      v12 = *(void **)(a2 + 280);
      if (v12)
      {
        os_release(v12);
        v11 = *(_BYTE *)(a2 + 288);
      }
    }
    *(_QWORD *)(a2 + 280) = 0;
    *(_BYTE *)(a2 + 288) = v11 | 1;
    v13 = *(_BYTE *)(a2 + 272);
    if ((v13 & 1) != 0)
    {
      v14 = *(void **)(a2 + 264);
      if (v14)
      {
        os_release(v14);
        v13 = *(_BYTE *)(a2 + 272);
      }
    }
    *(_QWORD *)(a2 + 264) = 0;
    *(_BYTE *)(a2 + 272) = v13 | 1;
    *(_QWORD *)(a2 + 40) = 0;
    (*(void (**)(void))(*(_QWORD *)(a2 + 200) + 16))();
    v15 = *(const void **)(a2 + 200);
    if (v15)
    {
      _Block_release(v15);
      *(_QWORD *)(a2 + 200) = 0;
    }
    if ((*(_BYTE *)(a2 + 320) & 1) != 0)
    {
      v16 = *(void **)(a2 + 312);
      if (v16)
        os_release(v16);
    }
    *(_QWORD *)(a2 + 312) = 0;
    if ((*(_BYTE *)(a2 + 304) & 1) != 0)
    {
      v17 = *(void **)(a2 + 296);
      if (v17)
        os_release(v17);
    }
    *(_QWORD *)(a2 + 296) = 0;
    if ((*(_BYTE *)(a2 + 288) & 1) != 0)
    {
      v18 = *(void **)(a2 + 280);
      if (v18)
        os_release(v18);
    }
    *(_QWORD *)(a2 + 280) = 0;
    if ((*(_BYTE *)(a2 + 272) & 1) != 0)
    {
      v19 = *(void **)(a2 + 264);
      if (v19)
        os_release(v19);
    }
    free((void *)a2);
  }
}

void ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke(uint64_t a1, void *a2, int a3)
{
  id outbound_message;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  int status_code;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  const char *v18;
  uint64_t outbound_body_size;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  const char *v27;
  id v28;
  id v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  void *v37;
  uint64_t inbound_body_size;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  id inbound_message;
  id v52;
  int v53;
  id v54;
  _QWORD *v55;
  _QWORD v56[5];
  __int16 v57;
  _QWORD v58[6];
  _QWORD v59[5];
  _QWORD v60[5];
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  switch(a3)
  {
    case 0:
      outbound_message = nw_http_transaction_metadata_get_outbound_message(a2);
      v6 = nw_http_metadata_copy_request(outbound_message);
      v7 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v60[0] = MEMORY[0x1E0C809B0];
        v60[1] = 0x40000000;
        v60[2] = ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_2;
        v60[3] = &__block_descriptor_tmp_45_40157;
        v60[4] = *(_QWORD *)(a1 + 32);
        v8 = v6;
        v9 = v60;
        _nw_http_request_access_method((uint64_t)v8, v9);

      }
      if (!v7)
        goto LABEL_25;
      v10 = v7;
      status_code = _nw_http_response_get_status_code();

      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) != 0)
        goto LABEL_24;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        goto LABEL_24;
      v13 = *(_QWORD *)(a1 + 32);
      v14 = v13 + 74;
      v15 = *(_QWORD *)(v13 + 256);
      v16 = *(_DWORD *)(*(_QWORD *)(v13 + 248) + 372);
      if (v15)
        LODWORD(v15) = *(_DWORD *)(v15 + 860);
      v17 = *(_DWORD *)(v13 + 424);
      *(_DWORD *)buf = 136447746;
      v62 = "nw_http1_match_idle_connection_with_pending_stream_block_invoke";
      v63 = 2082;
      v64 = v14;
      v65 = 2080;
      v66 = " ";
      v67 = 1024;
      v68 = v16;
      v69 = 1024;
      v70 = v15;
      v71 = 1024;
      v72 = v17;
      v73 = 1024;
      LODWORD(v74) = status_code;
      v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] sending response header {status=%hu}";
      goto LABEL_23;
    case 1:
      outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(a2);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) != 0)
        return;
      v20 = outbound_body_size;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        return;
      v22 = *(_QWORD *)(a1 + 32);
      v23 = v22 + 74;
      v24 = *(_QWORD *)(v22 + 256);
      v25 = *(_DWORD *)(*(_QWORD *)(v22 + 248) + 372);
      if (v24)
        LODWORD(v24) = *(_DWORD *)(v24 + 860);
      v26 = *(_DWORD *)(v22 + 424);
      *(_DWORD *)buf = 136447746;
      v62 = "nw_http1_match_idle_connection_with_pending_stream_block_invoke";
      v63 = 2082;
      v64 = v23;
      v65 = 2080;
      v66 = " ";
      v67 = 1024;
      v68 = v25;
      v69 = 1024;
      v70 = v24;
      v71 = 1024;
      v72 = v26;
      v73 = 2048;
      v74 = v20;
      v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] finished sending {body_bytes=%llu}";
      goto LABEL_34;
    case 2:
      outbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
      v6 = nw_http_metadata_copy_request(outbound_message);
      v28 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v59[0] = MEMORY[0x1E0C809B0];
        v59[1] = 0x40000000;
        v59[2] = ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_46;
        v59[3] = &__block_descriptor_tmp_47_40160;
        v59[4] = *(_QWORD *)(a1 + 32);
        v29 = v6;
        v30 = v59;
        _nw_http_request_access_method((uint64_t)v29, v30);

      }
      if (v28)
      {
        v10 = v28;
        v31 = _nw_http_response_get_status_code();

        if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            v32 = *(_QWORD *)(a1 + 32);
            v33 = v32 + 74;
            v34 = *(_QWORD *)(v32 + 256);
            v35 = *(_DWORD *)(*(_QWORD *)(v32 + 248) + 372);
            if (v34)
              LODWORD(v34) = *(_DWORD *)(v34 + 860);
            v36 = *(_DWORD *)(v32 + 424);
            *(_DWORD *)buf = 136447746;
            v62 = "nw_http1_match_idle_connection_with_pending_stream_block_invoke";
            v63 = 2082;
            v64 = v33;
            v65 = 2080;
            v66 = " ";
            v67 = 1024;
            v68 = v35;
            v69 = 1024;
            v70 = v34;
            v71 = 1024;
            v72 = v36;
            v73 = 1024;
            LODWORD(v74) = v31;
            v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] receiving response header {status=%hu}";
LABEL_23:
            _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, v18, buf, 0x38u);
          }
        }
LABEL_24:
        os_release(v10);
      }
LABEL_25:
      if (v6)
        os_release(v6);
      if (!outbound_message)
        return;
      v37 = outbound_message;
      goto LABEL_56;
    case 3:
      inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(a2);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) != 0)
        return;
      v39 = inbound_body_size;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        return;
      v40 = *(_QWORD *)(a1 + 32);
      v41 = v40 + 74;
      v42 = *(_QWORD *)(v40 + 256);
      v43 = *(_DWORD *)(*(_QWORD *)(v40 + 248) + 372);
      if (v42)
        LODWORD(v42) = *(_DWORD *)(v42 + 860);
      v44 = *(_DWORD *)(v40 + 424);
      *(_DWORD *)buf = 136447746;
      v62 = "nw_http1_match_idle_connection_with_pending_stream_block_invoke";
      v63 = 2082;
      v64 = v41;
      v65 = 2080;
      v66 = " ";
      v67 = 1024;
      v68 = v43;
      v69 = 1024;
      v70 = v42;
      v71 = 1024;
      v72 = v44;
      v73 = 2048;
      v74 = v39;
      v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] finished receiving {body_bytes=%llu}";
LABEL_34:
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_INFO, v27, buf, 0x3Cu);
      return;
    case 4:
      v45 = MEMORY[0x1E0C809B0];
      v58[0] = MEMORY[0x1E0C809B0];
      v58[1] = 0x40000000;
      v58[2] = ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_48;
      v58[3] = &__block_descriptor_tmp_49_40163;
      v46 = *(_QWORD *)(a1 + 32);
      v58[4] = a2;
      v58[5] = v46;
      v47 = nw_http_transaction_metadata_get_outbound_message(a2);
      v48 = v47;
      if (v47)
      {
        v49 = nw_http_metadata_copy_request(v47);
        v50 = nw_http_metadata_copy_response(v48);
        inbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
        if (!inbound_message)
          goto LABEL_44;
        if (v49)
        {
          if (v50)
            goto LABEL_45;
          goto LABEL_43;
        }
      }
      else
      {
        v52 = nw_http_transaction_metadata_get_inbound_message(a2);
        v50 = 0;
        if (!v52)
        {
          v53 = 0;
          inbound_message = 0;
          goto LABEL_59;
        }
        inbound_message = v52;
      }
      v49 = nw_http_metadata_copy_request(inbound_message);
      if (v50)
        goto LABEL_45;
LABEL_43:
      v50 = nw_http_metadata_copy_response(inbound_message);
LABEL_44:
      if (!v50)
      {
        v53 = 0;
        if (!v49)
          goto LABEL_59;
LABEL_48:
        v56[0] = v45;
        v56[1] = 0x40000000;
        v56[2] = ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_50;
        v56[3] = &unk_1E14A15A0;
        v56[4] = v58;
        v57 = v53;
        v54 = v49;
        v55 = v56;
        _nw_http_request_access_method((uint64_t)v54, v55);

        if (!inbound_message)
          goto LABEL_50;
        goto LABEL_49;
      }
LABEL_45:
      v50 = v50;
      v53 = _nw_http_response_get_status_code();

      if (v49)
        goto LABEL_48;
LABEL_59:
      ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_48((uint64_t)v58, (uint64_t)"", v53);
      v54 = 0;
      if (inbound_message)
LABEL_49:
        os_release(inbound_message);
LABEL_50:
      if (v48)
        os_release(v48);
      if (v50)
        os_release(v50);
      if (v54)
      {
        v37 = v54;
LABEL_56:
        os_release(v37);
      }
      return;
    default:
      return;
  }
}

void ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _WORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  int v24;
  NSObject *v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  void *v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  const char *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  const char *v54;
  char *v55;
  _BOOL4 v56;
  NSObject *v57;
  uint64_t v58;
  int v59;
  int v60;
  char *backtrace_string;
  _BOOL4 v62;
  NSObject *v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  char *v68;
  _BOOL4 v69;
  const char *v70;
  _BOOL4 v71;
  uint8_t *v72;
  char v73;
  os_log_type_t v74;
  _BYTE buf[24];
  uint64_t v76;
  _BYTE v77[12];
  char *v78;
  int v79;
  os_log_type_t type[4];
  const char *v81;
  __int16 v82;
  char *v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(_QWORD *)(v2 + 488);
        v5 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
        v6 = *(_DWORD *)(v2 + 860);
        if (v4)
          LODWORD(v4) = *(_DWORD *)(v4 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_connection_cancel";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v2 + 74;
        *(_WORD *)&buf[22] = 2080;
        v76 = (uint64_t)" ";
        *(_WORD *)v77 = 1024;
        *(_DWORD *)&v77[2] = v5;
        *(_WORD *)&v77[6] = 1024;
        *(_DWORD *)&v77[8] = v6;
        LOWORD(v78) = 1024;
        *(_DWORD *)((char *)&v78 + 2) = v4;
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:c%u:s%u> cancelling http1 connection", buf, 0x32u);
      }
    }
    v7 = *(unsigned __int16 *)(v2 + 872);
    v8 = v7 | (*(unsigned __int8 *)(v2 + 874) << 16);
    if ((v7 & 0x100) != 0)
    {
      if ((*(_BYTE *)(v2 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v21 = __nwlog_obj();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            v22 = *(_QWORD *)(v2 + 488);
            v23 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
            v24 = *(_DWORD *)(v2 + 860);
            if (v22)
              LODWORD(v22) = *(_DWORD *)(v22 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_close";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v2 + 74;
            *(_WORD *)&buf[22] = 2080;
            v76 = (uint64_t)" ";
            *(_WORD *)v77 = 1024;
            *(_DWORD *)&v77[2] = v23;
            *(_WORD *)&v77[6] = 1024;
            *(_DWORD *)&v77[8] = v24;
            LOWORD(v78) = 1024;
            *(_DWORD *)((char *)&v78 + 2) = v22;
            _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> already closed", buf, 0x32u);
          }
        }
      }
      goto LABEL_49;
    }
    v9 = (_WORD *)(v2 + 872);
    *(_BYTE *)(v2 + 874) = BYTE2(v8);
    *(_WORD *)(v2 + 872) = v8 | 0x100;
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v57 = __nwlog_obj();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
        {
          v58 = *(_QWORD *)(v2 + 488);
          v59 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
          v60 = *(_DWORD *)(v2 + 860);
          if (v58)
            LODWORD(v58) = *(_DWORD *)(v58 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v2 + 74;
          *(_WORD *)&buf[22] = 2080;
          v76 = (uint64_t)" ";
          *(_WORD *)v77 = 1024;
          *(_DWORD *)&v77[2] = v59;
          *(_WORD *)&v77[6] = 1024;
          *(_DWORD *)&v77[8] = v60;
          LOWORD(v78) = 1024;
          *(_DWORD *)((char *)&v78 + 2) = v58;
          _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
        }
      }
    }
    v10 = *(_QWORD *)(v2 + 480);
    if (!v10)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      v51 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v74 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v51, type, &v74))
        goto LABEL_134;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v52 = __nwlog_obj();
        v53 = type[0];
        if (!os_log_type_enabled(v52, type[0]))
          goto LABEL_134;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v54 = "%{public}s called with null http1";
      }
      else if (v74)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v52 = __nwlog_obj();
        v53 = type[0];
        v62 = os_log_type_enabled(v52, type[0]);
        if (backtrace_string)
        {
          if (v62)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_134;
        }
        if (!v62)
          goto LABEL_134;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v54 = "%{public}s called with null http1, no backtrace";
      }
      else
      {
        v52 = __nwlog_obj();
        v53 = type[0];
        if (!os_log_type_enabled(v52, type[0]))
          goto LABEL_134;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v54 = "%{public}s called with null http1, backtrace limit exceeded";
      }
      v72 = buf;
LABEL_133:
      _os_log_impl(&dword_182FBE000, v52, v53, v54, v72, 0xCu);
      goto LABEL_134;
    }
    v11 = (unsigned __int16)*v9;
    v12 = v11 | (*(unsigned __int8 *)(v2 + 874) << 16);
    if ((v11 & 0x800) != 0)
    {
      if ((*(_BYTE *)(v2 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v25 = __nwlog_obj();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            v26 = *(_QWORD *)(v2 + 488);
            v27 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
            v28 = *(_DWORD *)(v2 + 860);
            if (v26)
              LODWORD(v26) = *(_DWORD *)(v26 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v2 + 74;
            *(_WORD *)&buf[22] = 2080;
            v76 = (uint64_t)" ";
            *(_WORD *)v77 = 1024;
            *(_DWORD *)&v77[2] = v27;
            *(_WORD *)&v77[6] = 1024;
            *(_DWORD *)&v77[8] = v28;
            LOWORD(v78) = 1024;
            *(_DWORD *)((char *)&v78 + 2) = v26;
            _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
          }
        }
      }
      goto LABEL_48;
    }
    *(_BYTE *)(v2 + 874) = BYTE2(v12);
    *v9 = v12 | 0x800;
    v13 = *(unsigned int *)(v10 + 368) + 1;
    v14 = v13 << 31 >> 31;
    *(_DWORD *)(v10 + 368) = v13;
    if (v14 == v13 && (v14 & 0x8000000000000000) == 0)
    {
LABEL_43:
      if ((*(_BYTE *)(v2 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v63 = __nwlog_obj();
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
            v64 = *(_QWORD *)(v2 + 488);
            v65 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
            v66 = *(_DWORD *)(v2 + 860);
            if (v64)
              LODWORD(v64) = *(_DWORD *)(v64 + 424);
            v67 = *(_DWORD *)(v10 + 368) + *(_DWORD *)(v10 + 364);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v2 + 74;
            *(_WORD *)&buf[22] = 2080;
            v76 = (uint64_t)" ";
            *(_WORD *)v77 = 1024;
            *(_DWORD *)&v77[2] = v65;
            *(_WORD *)&v77[6] = 1024;
            *(_DWORD *)&v77[8] = v66;
            LOWORD(v78) = 1024;
            *(_DWORD *)((char *)&v78 + 2) = v64;
            HIWORD(v78) = 1024;
            v79 = v67;
            _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
          }
        }
      }
      v34 = *(void **)(v2 + 496);
      if (!v34)
      {
        __nwlog_obj();
        *(_DWORD *)type = 136446210;
        v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
        v51 = (char *)_os_log_send_and_compose_impl();
        v74 = OS_LOG_TYPE_ERROR;
        v73 = 0;
        if (!__nwlog_fault(v51, &v74, &v73))
          goto LABEL_134;
        if (v74 == OS_LOG_TYPE_FAULT)
        {
          v52 = __nwlog_obj();
          v53 = v74;
          if (!os_log_type_enabled(v52, v74))
            goto LABEL_134;
          *(_DWORD *)type = 136446210;
          v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
          v54 = "%{public}s called with null http1_connection->context";
LABEL_132:
          v72 = (uint8_t *)type;
          goto LABEL_133;
        }
        if (!v73)
        {
          v52 = __nwlog_obj();
          v53 = v74;
          if (!os_log_type_enabled(v52, v74))
            goto LABEL_134;
          *(_DWORD *)type = 136446210;
          v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
          v54 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
          goto LABEL_132;
        }
        v68 = (char *)__nw_create_backtrace_string();
        v52 = __nwlog_obj();
        v53 = v74;
        v69 = os_log_type_enabled(v52, v74);
        if (!v68)
        {
          if (!v69)
            goto LABEL_134;
          *(_DWORD *)type = 136446210;
          v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
          v54 = "%{public}s called with null http1_connection->context, no backtrace";
          goto LABEL_132;
        }
        if (v69)
        {
          *(_DWORD *)type = 136446466;
          v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
          v82 = 2082;
          v83 = v68;
          v70 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
LABEL_111:
          _os_log_impl(&dword_182FBE000, v52, v53, v70, (uint8_t *)type, 0x16u);
        }
LABEL_112:
        free(v68);
        if (!v51)
        {
LABEL_48:
          if (!*(_QWORD *)(v2 + 488))
          {
            v40 = *(_QWORD *)(v2 + 784);
            if (v40)
            {
              if (*(_QWORD *)v40)
              {
                dispatch_source_set_timer(*(dispatch_source_t *)v40, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
              }
              else
              {
                *(_OWORD *)(v40 + 32) = xmmword_183C6F190;
                if (*(_BYTE *)(v40 + 48) && *(_BYTE *)(v40 + 49))
                  nw_queue_source_run_timer(v40, a2);
              }
            }
            else
            {
              if ((*(_BYTE *)(v2 + 158) & 1) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v41 = gLogObj;
                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                {
                  v42 = *(_QWORD *)(v2 + 488);
                  v43 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
                  v44 = *(_DWORD *)(v2 + 860);
                  if (v42)
                    LODWORD(v42) = *(_DWORD *)(v42 + 424);
                  *(_DWORD *)buf = 136447490;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v2 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v76 = (uint64_t)" ";
                  *(_WORD *)v77 = 1024;
                  *(_DWORD *)&v77[2] = v43;
                  *(_WORD *)&v77[6] = 1024;
                  *(_DWORD *)&v77[8] = v44;
                  LOWORD(v78) = 1024;
                  *(_DWORD *)((char *)&v78 + 2) = v42;
                  _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing", buf, 0x32u);
                }
              }
              v45 = *(_QWORD *)(v2 + 608);
              v46 = *(void **)(v2 + 496);
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
              v76 = (uint64_t)&unk_1E14A14F0;
              *(_QWORD *)v77 = v45;
              nw_queue_context_async(v46, buf);
            }
          }
LABEL_49:
          v37 = *(_QWORD *)(v2 + 488);
          if (v37)
          {
            nw_protocol_error(*(_QWORD **)(v37 + 48), v37);
            v38 = *(_QWORD *)(v2 + 488);
            if (v38)
              v39 = *(_QWORD **)(v38 + 48);
            else
              v39 = 0;
            nw_protocol_disconnected(v39, v38);
          }
          return;
        }
LABEL_135:
        free(v51);
        goto LABEL_48;
      }
      v35 = *(_QWORD *)(v2 + 480);
      if (v35)
      {
        v36 = *(_QWORD *)(v35 + 200);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
        v76 = (uint64_t)&unk_1E14A1518;
        *(_QWORD *)v77 = v36;
        nw_queue_context_async(v34, buf);
        goto LABEL_48;
      }
      __nwlog_obj();
      *(_DWORD *)type = 136446210;
      v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
      v51 = (char *)_os_log_send_and_compose_impl();
      v74 = OS_LOG_TYPE_ERROR;
      v73 = 0;
      if (__nwlog_fault(v51, &v74, &v73))
      {
        if (v74 == OS_LOG_TYPE_FAULT)
        {
          v52 = __nwlog_obj();
          v53 = v74;
          if (!os_log_type_enabled(v52, v74))
            goto LABEL_134;
          *(_DWORD *)type = 136446210;
          v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
          v54 = "%{public}s called with null http1";
          goto LABEL_132;
        }
        if (!v73)
        {
          v52 = __nwlog_obj();
          v53 = v74;
          if (!os_log_type_enabled(v52, v74))
            goto LABEL_134;
          *(_DWORD *)type = 136446210;
          v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
          v54 = "%{public}s called with null http1, backtrace limit exceeded";
          goto LABEL_132;
        }
        v68 = (char *)__nw_create_backtrace_string();
        v52 = __nwlog_obj();
        v53 = v74;
        v71 = os_log_type_enabled(v52, v74);
        if (!v68)
        {
          if (!v71)
            goto LABEL_134;
          *(_DWORD *)type = 136446210;
          v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
          v54 = "%{public}s called with null http1, no backtrace";
          goto LABEL_132;
        }
        if (v71)
        {
          *(_DWORD *)type = 136446466;
          v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
          v82 = 2082;
          v83 = v68;
          v70 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
LABEL_134:
      if (!v51)
        goto LABEL_48;
      goto LABEL_135;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = *(unsigned int *)(v10 + 368);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
    *(_WORD *)&buf[22] = 2048;
    v76 = 1;
    *(_WORD *)v77 = 2048;
    *(_QWORD *)&v77[2] = v15;
    v16 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v74 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v16, type, &v74))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = gLogObj;
        v18 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          v19 = *(unsigned int *)(v10 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          v76 = 1;
          *(_WORD *)v77 = 2048;
          *(_QWORD *)&v77[2] = v19;
          v20 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_39:
          _os_log_impl(&dword_182FBE000, v17, v18, v20, buf, 0x2Au);
        }
      }
      else if (v74)
      {
        v29 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = gLogObj;
        v18 = type[0];
        v30 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v29)
        {
          if (v30)
          {
            v31 = *(unsigned int *)(v10 + 368);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v76 = 1;
            *(_WORD *)v77 = 2048;
            *(_QWORD *)&v77[2] = v31;
            *(_WORD *)&v77[10] = 2082;
            v78 = v29;
            _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v29);
          goto LABEL_40;
        }
        if (v30)
        {
          v33 = *(unsigned int *)(v10 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          v76 = 1;
          *(_WORD *)v77 = 2048;
          *(_QWORD *)&v77[2] = v33;
          v20 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_39;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = gLogObj;
        v18 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          v32 = *(unsigned int *)(v10 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          v76 = 1;
          *(_WORD *)v77 = 2048;
          *(_QWORD *)&v77[2] = v32;
          v20 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_39;
        }
      }
    }
LABEL_40:
    if (v16)
      free(v16);
    *(_DWORD *)(v10 + 368) = -1;
    goto LABEL_43;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_connection_cancel";
  v47 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v74 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v47, type, &v74))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v48 = __nwlog_obj();
      v49 = type[0];
      if (!os_log_type_enabled(v48, type[0]))
        goto LABEL_117;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_cancel";
      v50 = "%{public}s called with null http1_connection";
      goto LABEL_116;
    }
    if (v74 == OS_LOG_TYPE_DEFAULT)
    {
      v48 = __nwlog_obj();
      v49 = type[0];
      if (!os_log_type_enabled(v48, type[0]))
        goto LABEL_117;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_cancel";
      v50 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_116;
    }
    v55 = (char *)__nw_create_backtrace_string();
    v48 = __nwlog_obj();
    v49 = type[0];
    v56 = os_log_type_enabled(v48, type[0]);
    if (v55)
    {
      if (v56)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_connection_cancel";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v55;
        _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v55);
      goto LABEL_117;
    }
    if (v56)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_cancel";
      v50 = "%{public}s called with null http1_connection, no backtrace";
LABEL_116:
      _os_log_impl(&dword_182FBE000, v48, v49, v50, buf, 0xCu);
    }
  }
LABEL_117:
  if (v47)
    free(v47);
}

uint64_t nw_http1_on_message_begin(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char *v8;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_http1_on_message_begin";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_http1_on_message_begin";
      v5 = "%{public}s called with null parser";
    }
    else
    {
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_http1_on_message_begin";
        v5 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_http1_on_message_begin";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null parser, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v2)
          return 0xFFFFFFFFLL;
        goto LABEL_33;
      }
      if (!v7)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_http1_on_message_begin";
      v5 = "%{public}s called with null parser, no backtrace";
    }
LABEL_31:
    _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    goto LABEL_32;
  }
  if (*(_QWORD *)(a1 + 48))
    return 0;
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_http1_on_message_begin";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v2, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_http1_on_message_begin";
      v5 = "%{public}s called with null http1_connection";
      goto LABEL_31;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_http1_on_message_begin";
      v5 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_31;
    }
    v8 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v9 = os_log_type_enabled(v3, type);
    if (!v8)
    {
      if (!v9)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_http1_on_message_begin";
      v5 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_31;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_http1_on_message_begin";
      v14 = 2082;
      v15 = v8;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v8);
  }
LABEL_32:
  if (v2)
LABEL_33:
    free(v2);
  return 0xFFFFFFFFLL;
}

uint64_t nw_http1_on_reset(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  char *backtrace_string;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 48);
    if (v1)
    {
      if ((*(_BYTE *)(v1 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v7 = __nwlog_obj();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          {
            v8 = *(_QWORD *)(v1 + 488);
            v9 = *(_DWORD *)(*(_QWORD *)(v1 + 480) + 372);
            v10 = *(_DWORD *)(v1 + 860);
            if (v8)
              LODWORD(v8) = *(_DWORD *)(v8 + 424);
            *(_DWORD *)buf = 136447490;
            v18 = "nw_http1_on_reset";
            v19 = 2082;
            v20 = (char *)(v1 + 74);
            v21 = 2080;
            v22 = " ";
            v23 = 1024;
            v24 = v9;
            v25 = 1024;
            v26 = v10;
            v27 = 1024;
            v28 = v8;
            _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> parser sees more data after message_complete, pausing", buf, 0x32u);
          }
        }
      }
      *(_WORD *)(v1 + 872) |= 0x10u;
      return 21;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_http1_on_reset";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v3, &type, &v15))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http1_on_reset";
        v6 = "%{public}s called with null http1_connection";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    if (!v15)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http1_on_reset";
        v6 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v14 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http1_on_reset";
        v6 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_http1_on_reset";
      v19 = 2082;
      v20 = backtrace_string;
      v13 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_http1_on_reset";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v3, &type, &v15))
    goto LABEL_38;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http1_on_reset";
        v6 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v12 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http1_on_reset";
        v6 = "%{public}s called with null parser, no backtrace";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_http1_on_reset";
      v19 = 2082;
      v20 = backtrace_string;
      v13 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_27:
      _os_log_impl(&dword_182FBE000, v4, v5, v13, buf, 0x16u);
    }
LABEL_28:
    free(backtrace_string);
    goto LABEL_38;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v18 = "nw_http1_on_reset";
    v6 = "%{public}s called with null parser";
LABEL_37:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_38:
  if (v3)
    free(v3);
  return 0xFFFFFFFFLL;
}

uint64_t nw_http1_on_method(uint64_t a1, char *__s1, size_t __n)
{
  uint64_t v3;
  uint64_t v4;
  char *v7;
  uint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *backtrace_string;
  _BOOL4 v28;
  const char *v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  NSObject *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  size_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_method";
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v23, &type, &v37))
      goto LABEL_86;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_http1_on_method";
          v26 = "%{public}s called with null parser, backtrace limit exceeded";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v28 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_http1_on_method";
          v26 = "%{public}s called with null parser, no backtrace";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      if (!v28)
        goto LABEL_64;
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http1_on_method";
      v41 = 2082;
      v42 = backtrace_string;
      v29 = "%{public}s called with null parser, dumping backtrace:%{public}s";
      goto LABEL_63;
    }
    v24 = __nwlog_obj();
    v25 = type;
    if (!os_log_type_enabled(v24, type))
      goto LABEL_86;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_method";
    v26 = "%{public}s called with null parser";
LABEL_85:
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
    goto LABEL_86;
  }
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_method";
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v23, &type, &v37))
      goto LABEL_86;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_http1_on_method";
          v26 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v30 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_http1_on_method";
          v26 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      if (!v30)
        goto LABEL_64;
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http1_on_method";
      v41 = 2082;
      v42 = backtrace_string;
      v29 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_63;
    }
    v24 = __nwlog_obj();
    v25 = type;
    if (!os_log_type_enabled(v24, type))
      goto LABEL_86;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_method";
    v26 = "%{public}s called with null http1_connection";
    goto LABEL_85;
  }
  v4 = *(_QWORD *)(v3 + 488);
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_method";
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v23, &type, &v37))
      goto LABEL_86;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_on_method";
      v26 = "%{public}s called with null http1_stream";
      goto LABEL_85;
    }
    if (!v37)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_on_method";
        v26 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v24 = __nwlog_obj();
    v25 = type;
    v31 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_on_method";
        v26 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    if (!v31)
      goto LABEL_64;
    *(_DWORD *)buf = 136446466;
    v40 = "nw_http1_on_method";
    v41 = 2082;
    v42 = backtrace_string;
    v29 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
LABEL_63:
    _os_log_impl(&dword_182FBE000, v24, v25, v29, buf, 0x16u);
    goto LABEL_64;
  }
  if (*(_QWORD *)(v4 + 400))
  {
    if (*(_QWORD *)(v3 + 816))
    {
      nw_append_format((const char **)(v3 + 816), "%.*s", __n, __s1);
LABEL_10:
      v8 = *(unsigned int *)(v3 + 848);
      v9 = __CFADD__(v8, __n);
      v10 = v8 + __n;
      *(_DWORD *)(v3 + 848) = v10;
      if (!v9 && !HIDWORD(v10))
        return 0;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = *(unsigned int *)(v3 + 848);
      *(_DWORD *)buf = 136446978;
      v40 = "nw_http1_on_method";
      v41 = 2082;
      v42 = "http1_connection->partial_method_length";
      v43 = 2048;
      v44 = __n;
      v45 = 2048;
      v46 = v12;
      v13 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (!__nwlog_fault(v13, &type, &v37))
        goto LABEL_27;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v16 = *(unsigned int *)(v3 + 848);
          *(_DWORD *)buf = 136446978;
          v40 = "nw_http1_on_method";
          v41 = 2082;
          v42 = "http1_connection->partial_method_length";
          v43 = 2048;
          v44 = __n;
          v45 = 2048;
          v46 = v16;
          v17 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_26:
          _os_log_impl(&dword_182FBE000, v14, v15, v17, buf, 0x2Au);
        }
      }
      else if (v37)
      {
        v18 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        v19 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v18)
        {
          if (v19)
          {
            v20 = *(unsigned int *)(v3 + 848);
            *(_DWORD *)buf = 136447234;
            v40 = "nw_http1_on_method";
            v41 = 2082;
            v42 = "http1_connection->partial_method_length";
            v43 = 2048;
            v44 = __n;
            v45 = 2048;
            v46 = v20;
            v47 = 2082;
            v48 = v18;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v18);
          goto LABEL_27;
        }
        if (v19)
        {
          v22 = *(unsigned int *)(v3 + 848);
          *(_DWORD *)buf = 136446978;
          v40 = "nw_http1_on_method";
          v41 = 2082;
          v42 = "http1_connection->partial_method_length";
          v43 = 2048;
          v44 = __n;
          v45 = 2048;
          v46 = v22;
          v17 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_26;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v21 = *(unsigned int *)(v3 + 848);
          *(_DWORD *)buf = 136446978;
          v40 = "nw_http1_on_method";
          v41 = 2082;
          v42 = "http1_connection->partial_method_length";
          v43 = 2048;
          v44 = __n;
          v45 = 2048;
          v46 = v21;
          v17 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_26;
        }
      }
LABEL_27:
      if (v13)
        free(v13);
      result = 0;
      *(_DWORD *)(v3 + 848) = -1;
      return result;
    }
    if (!__s1)
    {
      v33 = __nwlog_obj();
      os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v40 = "strict_strndup";
      v34 = (void *)_os_log_send_and_compose_impl();
      result = __nwlog_abort((uint64_t)v34);
      if ((_DWORD)result)
        goto LABEL_89;
      free(v34);
    }
    v7 = strndup(__s1, __n);
    if (v7)
    {
LABEL_9:
      *(_QWORD *)(v3 + 816) = v7;
      goto LABEL_10;
    }
    v35 = __nwlog_obj();
    os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v40 = "strict_strndup";
    v36 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v36);
    if (!(_DWORD)result)
    {
      free(v36);
      goto LABEL_9;
    }
LABEL_89:
    __break(1u);
    return result;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_http1_on_method";
  v23 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (!__nwlog_fault(v23, &type, &v37))
    goto LABEL_86;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v37)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_on_method";
        v26 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v24 = __nwlog_obj();
    v25 = type;
    v32 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_on_method";
        v26 = "%{public}s called with null parsed_fields, no backtrace";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http1_on_method";
      v41 = 2082;
      v42 = backtrace_string;
      v29 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
      goto LABEL_63;
    }
LABEL_64:
    free(backtrace_string);
    goto LABEL_86;
  }
  v24 = __nwlog_obj();
  v25 = type;
  if (os_log_type_enabled(v24, type))
  {
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_method";
    v26 = "%{public}s called with null parsed_fields";
    goto LABEL_85;
  }
LABEL_86:
  if (v23)
    free(v23);
  return 0xFFFFFFFFLL;
}

uint64_t nw_http1_on_method_complete(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char *v4;
  size_t v5;
  id v6;
  int v7;
  void *v8;
  char *v9;
  id v10;
  int v11;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char *backtrace_string;
  _BOOL4 v24;
  char *v25;
  _BOOL4 v26;
  const char *v27;
  _BOOL4 v28;
  _BOOL4 v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http1_on_method_complete";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v13, &type, &v30))
      goto LABEL_74;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v33 = "nw_http1_on_method_complete";
      v16 = "%{public}s called with null parser";
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v24 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_http1_on_method_complete";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null parser, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_74:
        if (!v13)
          return 0xFFFFFFFFLL;
LABEL_75:
        free(v13);
        return 0xFFFFFFFFLL;
      }
      if (!v24)
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v33 = "nw_http1_on_method_complete";
      v16 = "%{public}s called with null parser, no backtrace";
    }
    else
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v33 = "nw_http1_on_method_complete";
      v16 = "%{public}s called with null parser, backtrace limit exceeded";
    }
    goto LABEL_73;
  }
  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http1_on_method_complete";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v13, &type, &v30))
      goto LABEL_74;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v30)
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (!os_log_type_enabled(v14, type))
          goto LABEL_74;
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http1_on_method_complete";
        v16 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_73;
      }
      v25 = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v26 = os_log_type_enabled(v14, type);
      if (!v25)
      {
        if (!v26)
          goto LABEL_74;
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http1_on_method_complete";
        v16 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_73;
      }
      if (!v26)
        goto LABEL_55;
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http1_on_method_complete";
      v34 = 2082;
      v35 = v25;
      v27 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_54;
    }
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_74;
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http1_on_method_complete";
    v16 = "%{public}s called with null http1_connection";
LABEL_73:
    _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
    goto LABEL_74;
  }
  v2 = *(_QWORD *)(v1 + 488);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http1_on_method_complete";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v13, &type, &v30))
      goto LABEL_74;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v33 = "nw_http1_on_method_complete";
      v16 = "%{public}s called with null http1_stream";
      goto LABEL_73;
    }
    if (!v30)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v33 = "nw_http1_on_method_complete";
      v16 = "%{public}s called with null http1_stream, backtrace limit exceeded";
      goto LABEL_73;
    }
    v25 = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v28 = os_log_type_enabled(v14, type);
    if (!v25)
    {
      if (!v28)
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v33 = "nw_http1_on_method_complete";
      v16 = "%{public}s called with null http1_stream, no backtrace";
      goto LABEL_73;
    }
    if (!v28)
      goto LABEL_55;
    *(_DWORD *)buf = 136446466;
    v33 = "nw_http1_on_method_complete";
    v34 = 2082;
    v35 = v25;
    v27 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
LABEL_54:
    _os_log_impl(&dword_182FBE000, v14, v15, v27, buf, 0x16u);
    goto LABEL_55;
  }
  v3 = *(void **)(v2 + 400);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http1_on_method_complete";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v13, &type, &v30))
      goto LABEL_74;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v33 = "nw_http1_on_method_complete";
      v16 = "%{public}s called with null parsed_fields";
      goto LABEL_73;
    }
    if (!v30)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v33 = "nw_http1_on_method_complete";
      v16 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
      goto LABEL_73;
    }
    v25 = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v29 = os_log_type_enabled(v14, type);
    if (!v25)
    {
      if (!v29)
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v33 = "nw_http1_on_method_complete";
      v16 = "%{public}s called with null parsed_fields, no backtrace";
      goto LABEL_73;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http1_on_method_complete";
      v34 = 2082;
      v35 = v25;
      v27 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
      goto LABEL_54;
    }
LABEL_55:
    free(v25);
    if (!v13)
      return 0xFFFFFFFFLL;
    goto LABEL_75;
  }
  if ((*(_BYTE *)(v1 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v17 = __nwlog_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        v18 = *(_QWORD *)(v1 + 488);
        v19 = *(_DWORD *)(*(_QWORD *)(v1 + 480) + 372);
        v20 = *(_DWORD *)(v1 + 860);
        if (v18)
          LODWORD(v18) = *(_DWORD *)(v18 + 424);
        v21 = *(_DWORD *)(v1 + 852);
        v22 = *(_QWORD *)(v1 + 824);
        *(_DWORD *)buf = 136448002;
        v33 = "nw_http1_on_method_complete";
        v34 = 2082;
        v35 = (char *)(v1 + 74);
        v36 = 2080;
        v37 = " ";
        v38 = 1024;
        v39 = v19;
        v40 = 1024;
        v41 = v20;
        v42 = 1024;
        v43 = v18;
        v44 = 1040;
        v45 = v21;
        v46 = 2080;
        v47 = v22;
        _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> url complete:  %.*s", buf, 0x42u);
      }
    }
  }
  v4 = *(char **)(v1 + 816);
  if (!v4)
  {
    *(_DWORD *)(v1 + 848) = 0;
    goto LABEL_13;
  }
  v5 = *(unsigned int *)(v1 + 848);
  v6 = v3;
  v7 = _nw_http_parsed_fields_add((int)v6, ":method", 0xFFFFFFFFFFFFFFFFLL, v4, v5);

  v8 = *(void **)(v1 + 816);
  if (!v8)
  {
    *(_DWORD *)(v1 + 848) = 0;
    if (v7)
      goto LABEL_13;
    return 0xFFFFFFFFLL;
  }
  free(v8);
  *(_QWORD *)(v1 + 816) = 0;
  *(_DWORD *)(v1 + 848) = 0;
  if ((v7 & 1) == 0)
    return 0xFFFFFFFFLL;
LABEL_13:
  if ((*(_BYTE *)(*(_QWORD *)(v1 + 480) + 376) & 2) != 0)
    v9 = "https";
  else
    v9 = "http";
  v10 = v3;
  v11 = _nw_http_parsed_fields_add((int)v10, ":scheme", 0xFFFFFFFFFFFFFFFFLL, v9, 0xFFFFFFFFFFFFFFFFLL);

  return (v11 - 1);
}

uint64_t nw_http1_on_url(uint64_t a1, char *__s1, size_t __n)
{
  uint64_t v3;
  uint64_t v4;
  char *v7;
  uint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *backtrace_string;
  _BOOL4 v28;
  const char *v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  NSObject *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  size_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_url";
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v23, &type, &v37))
      goto LABEL_86;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_http1_on_url";
          v26 = "%{public}s called with null parser, backtrace limit exceeded";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v28 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_http1_on_url";
          v26 = "%{public}s called with null parser, no backtrace";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      if (!v28)
        goto LABEL_64;
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http1_on_url";
      v41 = 2082;
      v42 = backtrace_string;
      v29 = "%{public}s called with null parser, dumping backtrace:%{public}s";
      goto LABEL_63;
    }
    v24 = __nwlog_obj();
    v25 = type;
    if (!os_log_type_enabled(v24, type))
      goto LABEL_86;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_url";
    v26 = "%{public}s called with null parser";
LABEL_85:
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
    goto LABEL_86;
  }
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_url";
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v23, &type, &v37))
      goto LABEL_86;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_http1_on_url";
          v26 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v30 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_http1_on_url";
          v26 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      if (!v30)
        goto LABEL_64;
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http1_on_url";
      v41 = 2082;
      v42 = backtrace_string;
      v29 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_63;
    }
    v24 = __nwlog_obj();
    v25 = type;
    if (!os_log_type_enabled(v24, type))
      goto LABEL_86;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_url";
    v26 = "%{public}s called with null http1_connection";
    goto LABEL_85;
  }
  v4 = *(_QWORD *)(v3 + 488);
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_url";
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v23, &type, &v37))
      goto LABEL_86;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_on_url";
      v26 = "%{public}s called with null http1_stream";
      goto LABEL_85;
    }
    if (!v37)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_on_url";
        v26 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v24 = __nwlog_obj();
    v25 = type;
    v31 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_on_url";
        v26 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    if (!v31)
      goto LABEL_64;
    *(_DWORD *)buf = 136446466;
    v40 = "nw_http1_on_url";
    v41 = 2082;
    v42 = backtrace_string;
    v29 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
LABEL_63:
    _os_log_impl(&dword_182FBE000, v24, v25, v29, buf, 0x16u);
    goto LABEL_64;
  }
  if (*(_QWORD *)(v4 + 400))
  {
    if (*(_QWORD *)(v3 + 824))
    {
      nw_append_format((const char **)(v3 + 824), "%.*s", __n, __s1);
LABEL_10:
      v8 = *(unsigned int *)(v3 + 852);
      v9 = __CFADD__(v8, __n);
      v10 = v8 + __n;
      *(_DWORD *)(v3 + 852) = v10;
      if (!v9 && !HIDWORD(v10))
        return 0;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = *(unsigned int *)(v3 + 852);
      *(_DWORD *)buf = 136446978;
      v40 = "nw_http1_on_url";
      v41 = 2082;
      v42 = "http1_connection->partial_url_length";
      v43 = 2048;
      v44 = __n;
      v45 = 2048;
      v46 = v12;
      v13 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (!__nwlog_fault(v13, &type, &v37))
        goto LABEL_27;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v16 = *(unsigned int *)(v3 + 852);
          *(_DWORD *)buf = 136446978;
          v40 = "nw_http1_on_url";
          v41 = 2082;
          v42 = "http1_connection->partial_url_length";
          v43 = 2048;
          v44 = __n;
          v45 = 2048;
          v46 = v16;
          v17 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_26:
          _os_log_impl(&dword_182FBE000, v14, v15, v17, buf, 0x2Au);
        }
      }
      else if (v37)
      {
        v18 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        v19 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v18)
        {
          if (v19)
          {
            v20 = *(unsigned int *)(v3 + 852);
            *(_DWORD *)buf = 136447234;
            v40 = "nw_http1_on_url";
            v41 = 2082;
            v42 = "http1_connection->partial_url_length";
            v43 = 2048;
            v44 = __n;
            v45 = 2048;
            v46 = v20;
            v47 = 2082;
            v48 = v18;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v18);
          goto LABEL_27;
        }
        if (v19)
        {
          v22 = *(unsigned int *)(v3 + 852);
          *(_DWORD *)buf = 136446978;
          v40 = "nw_http1_on_url";
          v41 = 2082;
          v42 = "http1_connection->partial_url_length";
          v43 = 2048;
          v44 = __n;
          v45 = 2048;
          v46 = v22;
          v17 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_26;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v21 = *(unsigned int *)(v3 + 852);
          *(_DWORD *)buf = 136446978;
          v40 = "nw_http1_on_url";
          v41 = 2082;
          v42 = "http1_connection->partial_url_length";
          v43 = 2048;
          v44 = __n;
          v45 = 2048;
          v46 = v21;
          v17 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_26;
        }
      }
LABEL_27:
      if (v13)
        free(v13);
      result = 0;
      *(_DWORD *)(v3 + 852) = -1;
      return result;
    }
    if (!__s1)
    {
      v33 = __nwlog_obj();
      os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v40 = "strict_strndup";
      v34 = (void *)_os_log_send_and_compose_impl();
      result = __nwlog_abort((uint64_t)v34);
      if ((_DWORD)result)
        goto LABEL_89;
      free(v34);
    }
    v7 = strndup(__s1, __n);
    if (v7)
    {
LABEL_9:
      *(_QWORD *)(v3 + 824) = v7;
      goto LABEL_10;
    }
    v35 = __nwlog_obj();
    os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v40 = "strict_strndup";
    v36 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v36);
    if (!(_DWORD)result)
    {
      free(v36);
      goto LABEL_9;
    }
LABEL_89:
    __break(1u);
    return result;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_http1_on_url";
  v23 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (!__nwlog_fault(v23, &type, &v37))
    goto LABEL_86;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v37)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_on_url";
        v26 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v24 = __nwlog_obj();
    v25 = type;
    v32 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_on_url";
        v26 = "%{public}s called with null parsed_fields, no backtrace";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http1_on_url";
      v41 = 2082;
      v42 = backtrace_string;
      v29 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
      goto LABEL_63;
    }
LABEL_64:
    free(backtrace_string);
    goto LABEL_86;
  }
  v24 = __nwlog_obj();
  v25 = type;
  if (os_log_type_enabled(v24, type))
  {
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_url";
    v26 = "%{public}s called with null parsed_fields";
    goto LABEL_85;
  }
LABEL_86:
  if (v23)
    free(v23);
  return 0xFFFFFFFFLL;
}

uint64_t nw_http1_on_url_complete(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char *v4;
  size_t v5;
  id v6;
  int v7;
  void *v8;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  char *backtrace_string;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http1_on_url_complete";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v10, &type, &v26))
      goto LABEL_67;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        v11 = __nwlog_obj();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http1_on_url_complete";
          v13 = "%{public}s called with null parser, backtrace limit exceeded";
          goto LABEL_66;
        }
        goto LABEL_67;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v21 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http1_on_url_complete";
          v13 = "%{public}s called with null parser, no backtrace";
          goto LABEL_66;
        }
        goto LABEL_67;
      }
      if (!v21)
        goto LABEL_49;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_http1_on_url_complete";
      v30 = 2082;
      v31 = backtrace_string;
      v22 = "%{public}s called with null parser, dumping backtrace:%{public}s";
      goto LABEL_48;
    }
    v11 = __nwlog_obj();
    v12 = type;
    if (!os_log_type_enabled(v11, type))
      goto LABEL_67;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http1_on_url_complete";
    v13 = "%{public}s called with null parser";
LABEL_66:
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    goto LABEL_67;
  }
  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http1_on_url_complete";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v10, &type, &v26))
      goto LABEL_67;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        v11 = __nwlog_obj();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http1_on_url_complete";
          v13 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_66;
        }
        goto LABEL_67;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v23 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http1_on_url_complete";
          v13 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_66;
        }
        goto LABEL_67;
      }
      if (!v23)
        goto LABEL_49;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_http1_on_url_complete";
      v30 = 2082;
      v31 = backtrace_string;
      v22 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_48;
    }
    v11 = __nwlog_obj();
    v12 = type;
    if (!os_log_type_enabled(v11, type))
      goto LABEL_67;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http1_on_url_complete";
    v13 = "%{public}s called with null http1_connection";
    goto LABEL_66;
  }
  v2 = *(_QWORD *)(v1 + 488);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http1_on_url_complete";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v10, &type, &v26))
      goto LABEL_67;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_http1_on_url_complete";
      v13 = "%{public}s called with null http1_stream";
      goto LABEL_66;
    }
    if (!v26)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http1_on_url_complete";
        v13 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v24 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http1_on_url_complete";
        v13 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    if (!v24)
      goto LABEL_49;
    *(_DWORD *)buf = 136446466;
    v29 = "nw_http1_on_url_complete";
    v30 = 2082;
    v31 = backtrace_string;
    v22 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
LABEL_48:
    _os_log_impl(&dword_182FBE000, v11, v12, v22, buf, 0x16u);
    goto LABEL_49;
  }
  v3 = *(void **)(v2 + 400);
  if (v3)
  {
    if ((*(_BYTE *)(v1 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v14 = __nwlog_obj();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          v15 = *(_QWORD *)(v1 + 488);
          v16 = *(_DWORD *)(*(_QWORD *)(v1 + 480) + 372);
          v17 = *(_DWORD *)(v1 + 860);
          if (v15)
            LODWORD(v15) = *(_DWORD *)(v15 + 424);
          v18 = *(_DWORD *)(v1 + 852);
          v19 = *(_QWORD *)(v1 + 824);
          *(_DWORD *)buf = 136448002;
          v29 = "nw_http1_on_url_complete";
          v30 = 2082;
          v31 = (char *)(v1 + 74);
          v32 = 2080;
          v33 = " ";
          v34 = 1024;
          v35 = v16;
          v36 = 1024;
          v37 = v17;
          v38 = 1024;
          v39 = v15;
          v40 = 1040;
          v41 = v18;
          v42 = 2080;
          v43 = v19;
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> url complete:  %.*s", buf, 0x42u);
        }
      }
    }
    v4 = *(char **)(v1 + 824);
    if (v4)
    {
      v5 = *(unsigned int *)(v1 + 852);
      v6 = v3;
      v7 = _nw_http_parsed_fields_add((int)v6, ":path", 0xFFFFFFFFFFFFFFFFLL, v4, v5);

      v4 = (char *)(v7 - 1);
      v8 = *(void **)(v1 + 824);
      if (v8)
      {
        free(v8);
        *(_QWORD *)(v1 + 824) = 0;
      }
    }
    *(_DWORD *)(v1 + 852) = 0;
    *(_WORD *)(v1 + 872) |= 1u;
    return (uint64_t)v4;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_http1_on_url_complete";
  v10 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (!__nwlog_fault(v10, &type, &v26))
    goto LABEL_67;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v26)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http1_on_url_complete";
        v13 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v25 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http1_on_url_complete";
        v13 = "%{public}s called with null parsed_fields, no backtrace";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_http1_on_url_complete";
      v30 = 2082;
      v31 = backtrace_string;
      v22 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
      goto LABEL_48;
    }
LABEL_49:
    free(backtrace_string);
    goto LABEL_67;
  }
  v11 = __nwlog_obj();
  v12 = type;
  if (os_log_type_enabled(v11, type))
  {
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http1_on_url_complete";
    v13 = "%{public}s called with null parsed_fields";
    goto LABEL_66;
  }
LABEL_67:
  if (v10)
    free(v10);
  return 0xFFFFFFFFLL;
}

uint64_t nw_http1_on_status(uint64_t a1, char *__s1, const char *__n)
{
  uint64_t v3;
  uint64_t result;
  char *v7;
  uint64_t v8;
  BOOL v9;
  const char *v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  const char *v16;
  char *backtrace_string;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  char *v26;
  _BOOL4 v27;
  const char *v28;
  _BOOL4 v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  int v33;
  NSObject *v34;
  void *v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  _BYTE v45[10];
  char *v46;
  int v47;
  __int16 v48;
  char *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (v3)
    {
      result = 0;
      if (!__s1 || !__n)
        return result;
      if ((*(_BYTE *)(v3 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v30 = __nwlog_obj();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            v31 = *(_QWORD *)(v3 + 488);
            v32 = *(_DWORD *)(*(_QWORD *)(v3 + 480) + 372);
            v33 = *(_DWORD *)(v3 + 860);
            if (v31)
              LODWORD(v31) = *(_DWORD *)(v31 + 424);
            *(_DWORD *)buf = 136448002;
            v39 = "nw_http1_on_status";
            v40 = 2082;
            v41 = (const char *)(v3 + 74);
            v42 = 2080;
            v43 = " ";
            v44 = 1024;
            *(_DWORD *)v45 = v32;
            *(_WORD *)&v45[4] = 1024;
            *(_DWORD *)&v45[6] = v33;
            LOWORD(v46) = 1024;
            *(_DWORD *)((char *)&v46 + 2) = v31;
            HIWORD(v46) = 1040;
            v47 = (int)__n;
            v48 = 2080;
            v49 = __s1;
            _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> status: %.*s", buf, 0x42u);
          }
        }
      }
      if (*(_QWORD *)(v3 + 832))
      {
        nw_append_format((const char **)(v3 + 832), "%.*s", (int)__n, __s1);
      }
      else
      {
        v7 = strndup(__s1, (size_t)__n);
        if (!v7)
        {
          v34 = __nwlog_obj();
          os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          v39 = "strict_strndup";
          v35 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v35);
          if ((_DWORD)result)
          {
            __break(1u);
            return result;
          }
          free(v35);
        }
        *(_QWORD *)(v3 + 832) = v7;
      }
      v8 = *(unsigned int *)(v3 + 856);
      v9 = __CFADD__(v8, __n);
      v10 = &__n[v8];
      *(_DWORD *)(v3 + 856) = (_DWORD)v10;
      if (!v9 && !((unint64_t)v10 >> 32))
        return 0;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = *(unsigned int *)(v3 + 856);
      *(_DWORD *)buf = 136446978;
      v39 = "nw_http1_on_status";
      v40 = 2082;
      v41 = "http1_connection->partial_status_length";
      v42 = 2048;
      v43 = __n;
      v44 = 2048;
      *(_QWORD *)v45 = v11;
      v12 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v36 = 0;
      if (!__nwlog_fault(v12, &type, &v36))
        goto LABEL_28;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = gLogObj;
        v14 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v15 = *(unsigned int *)(v3 + 856);
          *(_DWORD *)buf = 136446978;
          v39 = "nw_http1_on_status";
          v40 = 2082;
          v41 = "http1_connection->partial_status_length";
          v42 = 2048;
          v43 = __n;
          v44 = 2048;
          *(_QWORD *)v45 = v15;
          v16 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_27:
          _os_log_impl(&dword_182FBE000, v13, v14, v16, buf, 0x2Au);
        }
      }
      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = gLogObj;
        v14 = type;
        v18 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v18)
          {
            v19 = *(unsigned int *)(v3 + 856);
            *(_DWORD *)buf = 136447234;
            v39 = "nw_http1_on_status";
            v40 = 2082;
            v41 = "http1_connection->partial_status_length";
            v42 = 2048;
            v43 = __n;
            v44 = 2048;
            *(_QWORD *)v45 = v19;
            *(_WORD *)&v45[8] = 2082;
            v46 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(backtrace_string);
          goto LABEL_28;
        }
        if (v18)
        {
          v21 = *(unsigned int *)(v3 + 856);
          *(_DWORD *)buf = 136446978;
          v39 = "nw_http1_on_status";
          v40 = 2082;
          v41 = "http1_connection->partial_status_length";
          v42 = 2048;
          v43 = __n;
          v44 = 2048;
          *(_QWORD *)v45 = v21;
          v16 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_27;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = gLogObj;
        v14 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v20 = *(unsigned int *)(v3 + 856);
          *(_DWORD *)buf = 136446978;
          v39 = "nw_http1_on_status";
          v40 = 2082;
          v41 = "http1_connection->partial_status_length";
          v42 = 2048;
          v43 = __n;
          v44 = 2048;
          *(_QWORD *)v45 = v20;
          v16 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_27;
        }
      }
LABEL_28:
      if (v12)
        free(v12);
      result = 0;
      *(_DWORD *)(v3 + 856) = -1;
      return result;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http1_on_status";
    v22 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v22, &type, &v36))
      goto LABEL_65;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_status";
        v25 = "%{public}s called with null http1_connection";
        goto LABEL_64;
      }
      goto LABEL_65;
    }
    if (!v36)
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_status";
        v25 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_64;
      }
      goto LABEL_65;
    }
    v26 = (char *)__nw_create_backtrace_string();
    v23 = __nwlog_obj();
    v24 = type;
    v29 = os_log_type_enabled(v23, type);
    if (!v26)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_status";
        v25 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_64;
      }
      goto LABEL_65;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v39 = "nw_http1_on_status";
      v40 = 2082;
      v41 = v26;
      v28 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_48;
    }
    goto LABEL_49;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v39 = "nw_http1_on_status";
  v22 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (!__nwlog_fault(v22, &type, &v36))
    goto LABEL_65;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v36)
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_status";
        v25 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_64;
      }
      goto LABEL_65;
    }
    v26 = (char *)__nw_create_backtrace_string();
    v23 = __nwlog_obj();
    v24 = type;
    v27 = os_log_type_enabled(v23, type);
    if (!v26)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_status";
        v25 = "%{public}s called with null parser, no backtrace";
        goto LABEL_64;
      }
      goto LABEL_65;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v39 = "nw_http1_on_status";
      v40 = 2082;
      v41 = v26;
      v28 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_48:
      _os_log_impl(&dword_182FBE000, v23, v24, v28, buf, 0x16u);
    }
LABEL_49:
    free(v26);
    goto LABEL_65;
  }
  v23 = __nwlog_obj();
  v24 = type;
  if (os_log_type_enabled(v23, type))
  {
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http1_on_status";
    v25 = "%{public}s called with null parser";
LABEL_64:
    _os_log_impl(&dword_182FBE000, v23, v24, v25, buf, 0xCu);
  }
LABEL_65:
  if (v22)
    free(v22);
  return 0xFFFFFFFFLL;
}

uint64_t nw_http1_on_status_complete(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t result;
  NSObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char *v18;
  _BOOL4 v19;
  const char *v20;
  _BOOL4 v21;
  _BOOL4 v22;
  char v23;
  os_log_type_t type;
  char __str[4];
  const char *v26;
  __int16 v27;
  char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    v26 = "nw_http1_on_status_complete";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v12, &type, &v23))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_70;
      *(_DWORD *)__str = 136446210;
      v26 = "nw_http1_on_status_complete";
      v15 = "%{public}s called with null parser";
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)__str = 136446466;
          v26 = "nw_http1_on_status_complete";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parser, dumping backtrace:%{public}s", (uint8_t *)__str, 0x16u);
        }
        free(backtrace_string);
LABEL_70:
        if (!v12)
          return 0xFFFFFFFFLL;
LABEL_71:
        free(v12);
        return 0xFFFFFFFFLL;
      }
      if (!v17)
        goto LABEL_70;
      *(_DWORD *)__str = 136446210;
      v26 = "nw_http1_on_status_complete";
      v15 = "%{public}s called with null parser, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_70;
      *(_DWORD *)__str = 136446210;
      v26 = "nw_http1_on_status_complete";
      v15 = "%{public}s called with null parser, backtrace limit exceeded";
    }
    goto LABEL_69;
  }
  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    v26 = "nw_http1_on_status_complete";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v12, &type, &v23))
      goto LABEL_70;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v23)
      {
        v13 = __nwlog_obj();
        v14 = type;
        if (!os_log_type_enabled(v13, type))
          goto LABEL_70;
        *(_DWORD *)__str = 136446210;
        v26 = "nw_http1_on_status_complete";
        v15 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_69;
      }
      v18 = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v19 = os_log_type_enabled(v13, type);
      if (!v18)
      {
        if (!v19)
          goto LABEL_70;
        *(_DWORD *)__str = 136446210;
        v26 = "nw_http1_on_status_complete";
        v15 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_69;
      }
      if (!v19)
        goto LABEL_51;
      *(_DWORD *)__str = 136446466;
      v26 = "nw_http1_on_status_complete";
      v27 = 2082;
      v28 = v18;
      v20 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_50;
    }
    v13 = __nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type))
      goto LABEL_70;
    *(_DWORD *)__str = 136446210;
    v26 = "nw_http1_on_status_complete";
    v15 = "%{public}s called with null http1_connection";
LABEL_69:
    _os_log_impl(&dword_182FBE000, v13, v14, v15, (uint8_t *)__str, 0xCu);
    goto LABEL_70;
  }
  v2 = *(_QWORD *)(v1 + 488);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    v26 = "nw_http1_on_status_complete";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v12, &type, &v23))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_70;
      *(_DWORD *)__str = 136446210;
      v26 = "nw_http1_on_status_complete";
      v15 = "%{public}s called with null http1_stream";
      goto LABEL_69;
    }
    if (!v23)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_70;
      *(_DWORD *)__str = 136446210;
      v26 = "nw_http1_on_status_complete";
      v15 = "%{public}s called with null http1_stream, backtrace limit exceeded";
      goto LABEL_69;
    }
    v18 = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v21 = os_log_type_enabled(v13, type);
    if (!v18)
    {
      if (!v21)
        goto LABEL_70;
      *(_DWORD *)__str = 136446210;
      v26 = "nw_http1_on_status_complete";
      v15 = "%{public}s called with null http1_stream, no backtrace";
      goto LABEL_69;
    }
    if (!v21)
      goto LABEL_51;
    *(_DWORD *)__str = 136446466;
    v26 = "nw_http1_on_status_complete";
    v27 = 2082;
    v28 = v18;
    v20 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
LABEL_50:
    _os_log_impl(&dword_182FBE000, v13, v14, v20, (uint8_t *)__str, 0x16u);
    goto LABEL_51;
  }
  v3 = *(void **)(v2 + 400);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    v26 = "nw_http1_on_status_complete";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v12, &type, &v23))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_70;
      *(_DWORD *)__str = 136446210;
      v26 = "nw_http1_on_status_complete";
      v15 = "%{public}s called with null parsed_fields";
      goto LABEL_69;
    }
    if (!v23)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_70;
      *(_DWORD *)__str = 136446210;
      v26 = "nw_http1_on_status_complete";
      v15 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
      goto LABEL_69;
    }
    v18 = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v22 = os_log_type_enabled(v13, type);
    if (!v18)
    {
      if (!v22)
        goto LABEL_70;
      *(_DWORD *)__str = 136446210;
      v26 = "nw_http1_on_status_complete";
      v15 = "%{public}s called with null parsed_fields, no backtrace";
      goto LABEL_69;
    }
    if (v22)
    {
      *(_DWORD *)__str = 136446466;
      v26 = "nw_http1_on_status_complete";
      v27 = 2082;
      v28 = v18;
      v20 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
      goto LABEL_50;
    }
LABEL_51:
    free(v18);
    if (!v12)
      return 0xFFFFFFFFLL;
    goto LABEL_71;
  }
  if (*(unsigned __int16 *)(a1 + 84) > 0x3E7u)
  {
    if ((*(_BYTE *)(v1 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v9 = *(_QWORD *)(v1 + 488);
        v10 = *(_DWORD *)(*(_QWORD *)(v1 + 480) + 372);
        v11 = *(_DWORD *)(v1 + 860);
        if (v9)
          LODWORD(v9) = *(_DWORD *)(v9 + 424);
        *(_DWORD *)__str = 136447490;
        v26 = "nw_http1_on_status_complete";
        v27 = 2082;
        v28 = (char *)(v1 + 74);
        v29 = 2080;
        v30 = " ";
        v31 = 1024;
        v32 = v10;
        v33 = 1024;
        v34 = v11;
        v35 = 1024;
        v36 = v9;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> invalid status code", (uint8_t *)__str, 0x32u);
      }
    }
    return 0xFFFFFFFFLL;
  }
  snprintf(__str, 4uLL, "%03d", *(unsigned __int16 *)(a1 + 84));
  v4 = v3;
  _nw_http_parsed_fields_add((int)v4, ":status", 0xFFFFFFFFFFFFFFFFLL, __str, 3uLL);

  v5 = *(void **)(v1 + 832);
  *(_QWORD *)(v1 + 832) = 0;
  v6 = *(void **)(v2 + 416);
  if (v6 != v5)
  {
    if (v6)
      free(v6);
    *(_QWORD *)(v2 + 416) = v5;
  }
  result = 0;
  *(_QWORD *)(v1 + 832) = 0;
  *(_DWORD *)(v1 + 856) = 0;
  *(_WORD *)(v1 + 872) |= 1u;
  return result;
}

uint64_t nw_http1_on_header_field(uint64_t a1, char *__s1, size_t __n)
{
  uint64_t v3;
  int v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  const char *v18;
  char *backtrace_string;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  char *v28;
  _BOOL4 v29;
  const char *v30;
  _BOOL4 v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  size_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (v3)
    {
      v6 = *(unsigned __int16 *)(v3 + 872);
      v7 = v6 & 0xFFFFFFFD | (*(unsigned __int8 *)(v3 + 874) << 16);
      *(_WORD *)(v3 + 872) = v6 & 0xFFFD;
      *(_BYTE *)(v3 + 874) = BYTE2(v7);
      if (*(_QWORD *)(v3 + 800))
      {
        nw_append_format((const char **)(v3 + 800), "%.*s", __n, __s1);
LABEL_8:
        v9 = *(unsigned int *)(v3 + 840);
        v10 = __CFADD__(v9, __n);
        v11 = v9 + __n;
        *(_DWORD *)(v3 + 840) = v11;
        if (!v10 && !HIDWORD(v11))
          return 0;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = *(unsigned int *)(v3 + 840);
        *(_DWORD *)buf = 136446978;
        v39 = "nw_http1_on_header_field";
        v40 = 2082;
        v41 = "http1_connection->partial_field_name_length";
        v42 = 2048;
        v43 = __n;
        v44 = 2048;
        v45 = v13;
        v14 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v36 = 0;
        if (!__nwlog_fault(v14, &type, &v36))
          goto LABEL_25;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = gLogObj;
          v16 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v17 = *(unsigned int *)(v3 + 840);
            *(_DWORD *)buf = 136446978;
            v39 = "nw_http1_on_header_field";
            v40 = 2082;
            v41 = "http1_connection->partial_field_name_length";
            v42 = 2048;
            v43 = __n;
            v44 = 2048;
            v45 = v17;
            v18 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_24:
            _os_log_impl(&dword_182FBE000, v15, v16, v18, buf, 0x2Au);
          }
        }
        else if (v36)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = gLogObj;
          v16 = type;
          v20 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v20)
            {
              v21 = *(unsigned int *)(v3 + 840);
              *(_DWORD *)buf = 136447234;
              v39 = "nw_http1_on_header_field";
              v40 = 2082;
              v41 = "http1_connection->partial_field_name_length";
              v42 = 2048;
              v43 = __n;
              v44 = 2048;
              v45 = v21;
              v46 = 2082;
              v47 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(backtrace_string);
            goto LABEL_25;
          }
          if (v20)
          {
            v23 = *(unsigned int *)(v3 + 840);
            *(_DWORD *)buf = 136446978;
            v39 = "nw_http1_on_header_field";
            v40 = 2082;
            v41 = "http1_connection->partial_field_name_length";
            v42 = 2048;
            v43 = __n;
            v44 = 2048;
            v45 = v23;
            v18 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_24;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = gLogObj;
          v16 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v22 = *(unsigned int *)(v3 + 840);
            *(_DWORD *)buf = 136446978;
            v39 = "nw_http1_on_header_field";
            v40 = 2082;
            v41 = "http1_connection->partial_field_name_length";
            v42 = 2048;
            v43 = __n;
            v44 = 2048;
            v45 = v22;
            v18 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_24;
          }
        }
LABEL_25:
        if (v14)
          free(v14);
        result = 0;
        *(_DWORD *)(v3 + 840) = -1;
        return result;
      }
      if (!__s1)
      {
        v32 = __nwlog_obj();
        os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        v39 = "strict_strndup";
        v33 = (void *)_os_log_send_and_compose_impl();
        result = __nwlog_abort((uint64_t)v33);
        if ((_DWORD)result)
          goto LABEL_63;
        free(v33);
      }
      v8 = strndup(__s1, __n);
      if (v8)
      {
LABEL_7:
        *(_QWORD *)(v3 + 800) = v8;
        goto LABEL_8;
      }
      v34 = __nwlog_obj();
      os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v39 = "strict_strndup";
      v35 = (void *)_os_log_send_and_compose_impl();
      result = __nwlog_abort((uint64_t)v35);
      if (!(_DWORD)result)
      {
        free(v35);
        goto LABEL_7;
      }
LABEL_63:
      __break(1u);
      return result;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http1_on_header_field";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v24, &type, &v36))
      goto LABEL_60;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_header_field";
        v27 = "%{public}s called with null http1_connection";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (!v36)
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_header_field";
        v27 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    v28 = (char *)__nw_create_backtrace_string();
    v25 = __nwlog_obj();
    v26 = type;
    v31 = os_log_type_enabled(v25, type);
    if (!v28)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_header_field";
        v27 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v39 = "nw_http1_on_header_field";
      v40 = 2082;
      v41 = v28;
      v30 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v39 = "nw_http1_on_header_field";
  v24 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (!__nwlog_fault(v24, &type, &v36))
    goto LABEL_60;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v36)
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_header_field";
        v27 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    v28 = (char *)__nw_create_backtrace_string();
    v25 = __nwlog_obj();
    v26 = type;
    v29 = os_log_type_enabled(v25, type);
    if (!v28)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http1_on_header_field";
        v27 = "%{public}s called with null parser, no backtrace";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v39 = "nw_http1_on_header_field";
      v40 = 2082;
      v41 = v28;
      v30 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_45:
      _os_log_impl(&dword_182FBE000, v25, v26, v30, buf, 0x16u);
    }
LABEL_46:
    free(v28);
    goto LABEL_60;
  }
  v25 = __nwlog_obj();
  v26 = type;
  if (os_log_type_enabled(v25, type))
  {
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http1_on_header_field";
    v27 = "%{public}s called with null parser";
LABEL_59:
    _os_log_impl(&dword_182FBE000, v25, v26, v27, buf, 0xCu);
  }
LABEL_60:
  if (v24)
    free(v24);
  return 0xFFFFFFFFLL;
}

uint64_t nw_http1_on_header_field_complete(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 48);
    if (v1)
    {
      result = 0;
      *(_WORD *)(v1 + 872) |= 2u;
      return result;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_http1_on_header_field_complete";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_http1_on_header_field_complete";
        v6 = "%{public}s called with null http1_connection";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_http1_on_header_field_complete";
        v6 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_http1_on_header_field_complete";
        v6 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_http1_on_header_field_complete";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_http1_on_header_field_complete";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_http1_on_header_field_complete";
        v6 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_http1_on_header_field_complete";
        v6 = "%{public}s called with null parser, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_http1_on_header_field_complete";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_http1_on_header_field_complete";
    v6 = "%{public}s called with null parser";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0xFFFFFFFFLL;
}

uint64_t nw_http1_on_header_value(uint64_t a1, char *__s1, size_t __n)
{
  uint64_t v3;
  uint64_t v4;
  char *v7;
  uint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *backtrace_string;
  _BOOL4 v28;
  const char *v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  NSObject *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  size_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_header_value";
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v23, &type, &v37))
      goto LABEL_86;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_http1_on_header_value";
          v26 = "%{public}s called with null parser, backtrace limit exceeded";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v28 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_http1_on_header_value";
          v26 = "%{public}s called with null parser, no backtrace";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      if (!v28)
        goto LABEL_64;
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http1_on_header_value";
      v41 = 2082;
      v42 = backtrace_string;
      v29 = "%{public}s called with null parser, dumping backtrace:%{public}s";
      goto LABEL_63;
    }
    v24 = __nwlog_obj();
    v25 = type;
    if (!os_log_type_enabled(v24, type))
      goto LABEL_86;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_header_value";
    v26 = "%{public}s called with null parser";
LABEL_85:
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
    goto LABEL_86;
  }
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_header_value";
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v23, &type, &v37))
      goto LABEL_86;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_http1_on_header_value";
          v26 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v30 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_http1_on_header_value";
          v26 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      if (!v30)
        goto LABEL_64;
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http1_on_header_value";
      v41 = 2082;
      v42 = backtrace_string;
      v29 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_63;
    }
    v24 = __nwlog_obj();
    v25 = type;
    if (!os_log_type_enabled(v24, type))
      goto LABEL_86;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_header_value";
    v26 = "%{public}s called with null http1_connection";
    goto LABEL_85;
  }
  v4 = *(_QWORD *)(v3 + 488);
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_header_value";
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v23, &type, &v37))
      goto LABEL_86;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_on_header_value";
      v26 = "%{public}s called with null http1_stream";
      goto LABEL_85;
    }
    if (!v37)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_on_header_value";
        v26 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v24 = __nwlog_obj();
    v25 = type;
    v31 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_on_header_value";
        v26 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    if (!v31)
      goto LABEL_64;
    *(_DWORD *)buf = 136446466;
    v40 = "nw_http1_on_header_value";
    v41 = 2082;
    v42 = backtrace_string;
    v29 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
LABEL_63:
    _os_log_impl(&dword_182FBE000, v24, v25, v29, buf, 0x16u);
    goto LABEL_64;
  }
  if (*(_QWORD *)(v4 + 400))
  {
    if (*(_QWORD *)(v3 + 808))
    {
      nw_append_format((const char **)(v3 + 808), "%.*s", __n, __s1);
LABEL_10:
      v8 = *(unsigned int *)(v3 + 844);
      v9 = __CFADD__(v8, __n);
      v10 = v8 + __n;
      *(_DWORD *)(v3 + 844) = v10;
      if (!v9 && !HIDWORD(v10))
        return 0;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = *(unsigned int *)(v3 + 844);
      *(_DWORD *)buf = 136446978;
      v40 = "nw_http1_on_header_value";
      v41 = 2082;
      v42 = "http1_connection->partial_field_value_length";
      v43 = 2048;
      v44 = __n;
      v45 = 2048;
      v46 = v12;
      v13 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (!__nwlog_fault(v13, &type, &v37))
        goto LABEL_27;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v16 = *(unsigned int *)(v3 + 844);
          *(_DWORD *)buf = 136446978;
          v40 = "nw_http1_on_header_value";
          v41 = 2082;
          v42 = "http1_connection->partial_field_value_length";
          v43 = 2048;
          v44 = __n;
          v45 = 2048;
          v46 = v16;
          v17 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_26:
          _os_log_impl(&dword_182FBE000, v14, v15, v17, buf, 0x2Au);
        }
      }
      else if (v37)
      {
        v18 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        v19 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v18)
        {
          if (v19)
          {
            v20 = *(unsigned int *)(v3 + 844);
            *(_DWORD *)buf = 136447234;
            v40 = "nw_http1_on_header_value";
            v41 = 2082;
            v42 = "http1_connection->partial_field_value_length";
            v43 = 2048;
            v44 = __n;
            v45 = 2048;
            v46 = v20;
            v47 = 2082;
            v48 = v18;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v18);
          goto LABEL_27;
        }
        if (v19)
        {
          v22 = *(unsigned int *)(v3 + 844);
          *(_DWORD *)buf = 136446978;
          v40 = "nw_http1_on_header_value";
          v41 = 2082;
          v42 = "http1_connection->partial_field_value_length";
          v43 = 2048;
          v44 = __n;
          v45 = 2048;
          v46 = v22;
          v17 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_26;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v21 = *(unsigned int *)(v3 + 844);
          *(_DWORD *)buf = 136446978;
          v40 = "nw_http1_on_header_value";
          v41 = 2082;
          v42 = "http1_connection->partial_field_value_length";
          v43 = 2048;
          v44 = __n;
          v45 = 2048;
          v46 = v21;
          v17 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_26;
        }
      }
LABEL_27:
      if (v13)
        free(v13);
      result = 0;
      *(_DWORD *)(v3 + 844) = -1;
      return result;
    }
    if (!__s1)
    {
      v33 = __nwlog_obj();
      os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v40 = "strict_strndup";
      v34 = (void *)_os_log_send_and_compose_impl();
      result = __nwlog_abort((uint64_t)v34);
      if ((_DWORD)result)
        goto LABEL_89;
      free(v34);
    }
    v7 = strndup(__s1, __n);
    if (v7)
    {
LABEL_9:
      *(_QWORD *)(v3 + 808) = v7;
      goto LABEL_10;
    }
    v35 = __nwlog_obj();
    os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v40 = "strict_strndup";
    v36 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v36);
    if (!(_DWORD)result)
    {
      free(v36);
      goto LABEL_9;
    }
LABEL_89:
    __break(1u);
    return result;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_http1_on_header_value";
  v23 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (!__nwlog_fault(v23, &type, &v37))
    goto LABEL_86;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v37)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_on_header_value";
        v26 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v24 = __nwlog_obj();
    v25 = type;
    v32 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http1_on_header_value";
        v26 = "%{public}s called with null parsed_fields, no backtrace";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http1_on_header_value";
      v41 = 2082;
      v42 = backtrace_string;
      v29 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
      goto LABEL_63;
    }
LABEL_64:
    free(backtrace_string);
    goto LABEL_86;
  }
  v24 = __nwlog_obj();
  v25 = type;
  if (os_log_type_enabled(v24, type))
  {
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_on_header_value";
    v26 = "%{public}s called with null parsed_fields";
    goto LABEL_85;
  }
LABEL_86:
  if (v23)
    free(v23);
  return 0xFFFFFFFFLL;
}

uint64_t nw_http1_on_body(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  const char *v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http1_on_body";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_22;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http1_on_body";
      v11 = "%{public}s called with null parser";
      goto LABEL_21;
    }
    if (!v21)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http1_on_body";
      v11 = "%{public}s called with null parser, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v19 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v19)
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http1_on_body";
      v11 = "%{public}s called with null parser, no backtrace";
      goto LABEL_21;
    }
    if (!v19)
      goto LABEL_16;
    *(_DWORD *)buf = 136446466;
    v24 = "nw_http1_on_body";
    v25 = 2082;
    v26 = backtrace_string;
    v14 = "%{public}s called with null parser, dumping backtrace:%{public}s";
    goto LABEL_15;
  }
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http1_on_body";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_22;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http1_on_body";
      v11 = "%{public}s called with null http1_connection";
      goto LABEL_21;
    }
    if (!v21)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http1_on_body";
      v11 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v20 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v20)
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http1_on_body";
      v11 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_21;
    }
    if (!v20)
      goto LABEL_16;
    *(_DWORD *)buf = 136446466;
    v24 = "nw_http1_on_body";
    v25 = 2082;
    v26 = backtrace_string;
    v14 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
    goto LABEL_15;
  }
  if ((*(_BYTE *)(v3 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v15 = __nwlog_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v16 = *(_QWORD *)(v3 + 488);
        v17 = *(_DWORD *)(*(_QWORD *)(v3 + 480) + 372);
        v18 = *(_DWORD *)(v3 + 860);
        if (v16)
          LODWORD(v16) = *(_DWORD *)(v16 + 424);
        *(_DWORD *)buf = 136448002;
        v24 = "nw_http1_on_body";
        v25 = 2082;
        v26 = (char *)(v3 + 74);
        v27 = 2080;
        v28 = " ";
        v29 = 1024;
        v30 = v17;
        v31 = 1024;
        v32 = v18;
        v33 = 1024;
        v34 = v16;
        v35 = 2048;
        v36 = a2;
        v37 = 1024;
        v38 = a3;
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> body segment found at (%p, %u bytes)", buf, 0x42u);
      }
    }
  }
  v6 = *(_QWORD *)(v3 + 792);
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, a2, a3);
    return 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_http1_on_body";
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21))
    goto LABEL_22;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http1_on_body";
      v11 = "%{public}s no body block found";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      goto LABEL_22;
    }
    goto LABEL_22;
  }
  if (v21)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_http1_on_body";
        v11 = "%{public}s no body block found, no backtrace";
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    if (!v13)
    {
LABEL_16:
      free(backtrace_string);
      goto LABEL_22;
    }
    *(_DWORD *)buf = 136446466;
    v24 = "nw_http1_on_body";
    v25 = 2082;
    v26 = backtrace_string;
    v14 = "%{public}s no body block found, dumping backtrace:%{public}s";
LABEL_15:
    _os_log_impl(&dword_182FBE000, v9, v10, v14, buf, 0x16u);
    goto LABEL_16;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = gLogObj;
  v10 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http1_on_body";
    v11 = "%{public}s no body block found, backtrace limit exceeded";
    goto LABEL_21;
  }
LABEL_22:
  if (v8)
    free(v8);
  return 0xFFFFFFFFLL;
}

uint64_t nw_http1_on_chunk_header(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char *v8;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_http1_on_chunk_header";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_http1_on_chunk_header";
      v5 = "%{public}s called with null parser";
    }
    else
    {
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_http1_on_chunk_header";
        v5 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_http1_on_chunk_header";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null parser, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v2)
          return 0xFFFFFFFFLL;
        goto LABEL_33;
      }
      if (!v7)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_http1_on_chunk_header";
      v5 = "%{public}s called with null parser, no backtrace";
    }
LABEL_31:
    _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    goto LABEL_32;
  }
  if (*(_QWORD *)(a1 + 48))
    return 0;
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_http1_on_chunk_header";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v2, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_http1_on_chunk_header";
      v5 = "%{public}s called with null http1_connection";
      goto LABEL_31;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_http1_on_chunk_header";
      v5 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_31;
    }
    v8 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v9 = os_log_type_enabled(v3, type);
    if (!v8)
    {
      if (!v9)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_http1_on_chunk_header";
      v5 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_31;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_http1_on_chunk_header";
      v14 = 2082;
      v15 = v8;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v8);
  }
LABEL_32:
  if (v2)
LABEL_33:
    free(v2);
  return 0xFFFFFFFFLL;
}

uint64_t nw_http1_on_chunk_complete(uint64_t a1)
{
  BOOL v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  const char *v8;
  NSObject *v9;
  uint64_t result;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_http1_on_chunk_complete";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v2, &type, &v12))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http1_on_chunk_complete";
        v5 = "%{public}s called with null parser";
LABEL_38:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
LABEL_39:
      if (v2)
        free(v2);
      return 0xFFFFFFFFLL;
    }
    if (!v12)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http1_on_chunk_complete";
        v5 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http1_on_chunk_complete";
        v5 = "%{public}s called with null parser, no backtrace";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_http1_on_chunk_complete";
      v16 = 2082;
      v17 = backtrace_string;
      v8 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_28:
      _os_log_impl(&dword_182FBE000, v3, v4, v8, buf, 0x16u);
    }
LABEL_29:
    free(backtrace_string);
    goto LABEL_39;
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_http1_on_chunk_complete";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v2, &type, &v12))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http1_on_chunk_complete";
        v5 = "%{public}s called with null http1_connection";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (!v12)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http1_on_chunk_complete";
        v5 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v11 = os_log_type_enabled(v3, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http1_on_chunk_complete";
        v5 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_http1_on_chunk_complete";
      v16 = 2082;
      v17 = backtrace_string;
      v8 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  if (*(_QWORD *)(a1 + 64))
    v1 = 1;
  else
    v1 = gLogDatapath == 0;
  if (v1)
    return 0;
  v9 = __nwlog_obj();
  result = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    *(_DWORD *)buf = 136446210;
    v15 = "nw_http1_on_chunk_complete";
    _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s this is the final chunk of the body", buf, 0xCu);
    return 0;
  }
  return result;
}

uint64_t ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t __Block_byref_object_copy__39865(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__39866(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke(_QWORD *a1, void *a2)
{
  void *v2;
  uint64_t v4;
  char v5;
  void *v6;

  v2 = a2;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) && nw_protocol_options_is_tls(a2))
    {
      if (v2)
        v2 = os_retain(v2);
      v4 = *(_QWORD *)(a1[5] + 8);
      v5 = *(_BYTE *)(v4 + 48);
      if ((v5 & 1) != 0)
      {
        v6 = *(void **)(v4 + 40);
        if (v6)
        {
          os_release(v6);
          v5 = *(_BYTE *)(v4 + 48);
        }
      }
      *(_QWORD *)(v4 + 40) = v2;
      *(_BYTE *)(v4 + 48) = v5 | 1;
    }
  }
  else if (nw_protocol_options_get_protocol_handle(a2) == a1[6])
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
}

uint64_t ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_2(int8x16_t *a1, nw_parameters_t parameters)
{
  nw_parameters_t v2;
  NSObject *v4;
  NSObject *v5;
  BOOL is_quic;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  char v15;
  void *v16;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD iterate_block[4];
  int8x16_t v25;
  uint64_t v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  nw_parameters_t v40;
  uint64_t v41;

  v2 = parameters;
  v41 = *MEMORY[0x1E0C80C00];
  v4 = nw_parameters_copy_default_protocol_stack(parameters);
  v5 = nw_protocol_stack_copy_transport_protocol(v4);
  is_quic = nw_protocol_options_is_quic(v5);
  if (v5)
    os_release(v5);
  if (is_quic)
  {
    v7 = 1;
    if (!v4)
      return v7;
    goto LABEL_19;
  }
  v8 = *(_QWORD *)(a1[2].i64[0] + 8);
  v9 = *(_BYTE *)(v8 + 48);
  if ((v9 & 1) != 0)
  {
    v10 = *(void **)(v8 + 40);
    if (v10)
    {
      os_release(v10);
      v9 = *(_BYTE *)(v8 + 48);
    }
  }
  *(_QWORD *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 48) = v9 | 1;
  *(_BYTE *)(*(_QWORD *)(a1[2].i64[1] + 8) + 24) = 0;
  iterate_block[0] = MEMORY[0x1E0C809B0];
  iterate_block[1] = 0x40000000;
  iterate_block[2] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_3;
  iterate_block[3] = &unk_1E14A16B0;
  v25 = vextq_s8(a1[2], a1[2], 8uLL);
  v26 = a1[3].i64[0];
  nw_protocol_stack_iterate_application_protocols(v4, iterate_block);
  v11 = *(_QWORD *)(*(_QWORD *)(a1[2].i64[0] + 8) + 40) != 0;
  v12 = (*(_BYTE *)(a1[3].i64[1] + 376) & 2) == 0;
  v13 = v11 ^ v12;
  if (v11 != v12)
  {
    if ((*(_BYTE *)(a1[3].i64[0] + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v18 = __nwlog_obj();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          v19 = a1[3].i64[0];
          v20 = v19 + 74;
          v21 = *(_QWORD *)(v19 + 256);
          v22 = *(_DWORD *)(*(_QWORD *)(v19 + 248) + 372);
          if (v21)
            LODWORD(v21) = *(_DWORD *)(v21 + 860);
          v23 = *(_DWORD *)(v19 + 424);
          *(_DWORD *)buf = 136447746;
          v28 = "nw_http1_establish_new_connection_for_stream_block_invoke_2";
          v29 = 2082;
          v30 = v20;
          v31 = 2080;
          v32 = " ";
          v33 = 1024;
          v34 = v22;
          v35 = 1024;
          v36 = v21;
          v37 = 1024;
          v38 = v23;
          v39 = 2112;
          v40 = v2;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> saving transformed parameters %@", buf, 0x3Cu);
        }
      }
    }
    if (v2)
      v2 = (nw_parameters_t)os_retain(v2);
    v14 = a1[3].i64[0];
    v15 = *(_BYTE *)(v14 + 328);
    if ((v15 & 1) != 0)
    {
      v16 = *(void **)(v14 + 320);
      if (v16)
      {
        os_release(v16);
        v15 = *(_BYTE *)(v14 + 328);
      }
    }
    *(_QWORD *)(v14 + 320) = v2;
    *(_BYTE *)(v14 + 328) = v15 | 1;
  }
  v7 = v13 ^ 1u;
  if (v4)
LABEL_19:
    os_release(v4);
  return v7;
}

BOOL ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_78(uint64_t a1, void *a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = *(unsigned __int8 *)(v2 + 24);
  if (!*(_BYTE *)(v2 + 24))
  {
    nw_parameters_add_protocol_stack_member(*(void **)(*(_QWORD *)(a1 + 40) + 320), 5, 0xFFFFFFFF, a2);
    if (nw_protocol_options_get_protocol_handle(a2) == *(_QWORD *)(a1 + 40))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  return v3 == 0;
}

void ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_81(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v1)
  {
    v2 = v1;
    if ((*(_BYTE *)(v1 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v3 = __nwlog_obj();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
        {
          v4 = *(_QWORD *)(v2 + 256);
          v5 = *(_DWORD *)(*(_QWORD *)(v2 + 248) + 372);
          if (v4)
            LODWORD(v4) = *(_DWORD *)(v4 + 860);
          v6 = *(_DWORD *)(v2 + 424);
          v7 = 136447490;
          v8 = "nw_http1_establish_new_connection_for_stream_block_invoke";
          v9 = 2082;
          v10 = v2 + 74;
          v11 = 2080;
          v12 = " ";
          v13 = 1024;
          v14 = v5;
          v15 = 1024;
          v16 = v4;
          v17 = 1024;
          v18 = v6;
          _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> requesting new output handler from rebuild_stack", (uint8_t *)&v7, 0x32u);
        }
      }
    }
    nw_protocol_notify(*(_QWORD **)(v2 + 48), v2, 19);
  }
}

void ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_3(_QWORD *a1, void *a2)
{
  void *v2;
  uint64_t v4;
  char v5;
  void *v6;

  v2 = a2;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) && nw_protocol_options_is_tls(a2))
    {
      if (v2)
        v2 = os_retain(v2);
      v4 = *(_QWORD *)(a1[5] + 8);
      v5 = *(_BYTE *)(v4 + 48);
      if ((v5 & 1) != 0)
      {
        v6 = *(void **)(v4 + 40);
        if (v6)
        {
          os_release(v6);
          v5 = *(_BYTE *)(v4 + 48);
        }
      }
      *(_QWORD *)(v4 + 40) = v2;
      *(_BYTE *)(v4 + 48) = v5 | 1;
    }
  }
  else if (nw_protocol_options_get_protocol_handle(a2) == a1[6])
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
}

void ___ZL36nw_protocol_http1_set_up_associationP19nw_http1_connectionP13nw_parameters_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t handle;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  unsigned __int16 *v15;
  void *v16;
  unsigned __int8 v17;
  __int16 v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  const char *v50;
  NSObject *v51;
  uint64_t v52;
  int v53;
  int v54;
  char *v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  const char *v70;
  uint64_t v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  const char *v75;
  char *backtrace_string;
  _BOOL4 v77;
  char *v78;
  _BOOL4 v79;
  const char *v80;
  _BOOL4 v81;
  char *v82;
  _BOOL4 v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  const char *v87;
  char *v88;
  _BOOL4 v89;
  NSObject *v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  char *v95;
  _BOOL4 v96;
  const char *v97;
  _BOOL4 v98;
  uint8_t *v99;
  NSObject *v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  uint8_t *v105;
  char v106;
  os_log_type_t v107;
  _BYTE buf[24];
  uint64_t v109;
  _BYTE v110[12];
  char *v111;
  int v112;
  os_log_type_t type[4];
  const char *v114;
  __int16 v115;
  char *v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  handle = nw_protocol_instance_stub_get_handle(a2);
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
    v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v107 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v67, type, &v107))
      goto LABEL_146;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v107 == OS_LOG_TYPE_DEFAULT)
      {
        v68 = __nwlog_obj();
        v69 = type[0];
        if (!os_log_type_enabled(v68, type[0]))
          goto LABEL_146;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v70 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_145;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v68 = __nwlog_obj();
      v69 = type[0];
      v77 = os_log_type_enabled(v68, type[0]);
      if (!backtrace_string)
      {
        if (!v77)
          goto LABEL_146;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v70 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_145;
      }
      if (v77)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v68, v69, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_146;
    }
    v68 = __nwlog_obj();
    v69 = type[0];
    if (!os_log_type_enabled(v68, type[0]))
      goto LABEL_146;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
    v70 = "%{public}s called with null protocol";
LABEL_145:
    _os_log_impl(&dword_182FBE000, v68, v69, v70, buf, 0xCu);
    goto LABEL_146;
  }
  v5 = *(_QWORD *)(handle + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
    v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v107 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v67, type, &v107))
      goto LABEL_146;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v107 == OS_LOG_TYPE_DEFAULT)
      {
        v68 = __nwlog_obj();
        v69 = type[0];
        if (!os_log_type_enabled(v68, type[0]))
          goto LABEL_146;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v70 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_145;
      }
      v78 = (char *)__nw_create_backtrace_string();
      v68 = __nwlog_obj();
      v69 = type[0];
      v79 = os_log_type_enabled(v68, type[0]);
      if (!v78)
      {
        if (!v79)
          goto LABEL_146;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v70 = "%{public}s called with null handle, no backtrace";
        goto LABEL_145;
      }
      if (v79)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v78;
        v80 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_127:
        _os_log_impl(&dword_182FBE000, v68, v69, v80, buf, 0x16u);
      }
LABEL_128:
      free(v78);
      if (!v67)
      {
LABEL_148:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
        v84 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v107 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v84, type, &v107))
          goto LABEL_162;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v85 = gLogObj;
          v86 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
            goto LABEL_162;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
          v87 = "%{public}s called with null update_http1_connection";
        }
        else if (v107)
        {
          v88 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v85 = gLogObj;
          v86 = type[0];
          v89 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (v88)
          {
            if (v89)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v88;
              _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s called with null update_http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v88);
            goto LABEL_162;
          }
          if (!v89)
          {
LABEL_162:
            if (v84)
              free(v84);
            return;
          }
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
          v87 = "%{public}s called with null update_http1_connection, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v85 = gLogObj;
          v86 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
            goto LABEL_162;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
          v87 = "%{public}s called with null update_http1_connection, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v85, v86, v87, buf, 0xCu);
        goto LABEL_162;
      }
LABEL_147:
      free(v67);
      goto LABEL_148;
    }
    v68 = __nwlog_obj();
    v69 = type[0];
    if (!os_log_type_enabled(v68, type[0]))
      goto LABEL_146;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
    v70 = "%{public}s called with null handle";
    goto LABEL_145;
  }
  v6 = *(_DWORD *)(v5 + 24);
  if (v6 == 2)
  {
    v8 = *(_QWORD *)(v5 + 8);
    if (v8)
    {
      v7 = (uint64_t *)(v8 + 256);
      goto LABEL_8;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
    v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v107 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v67, type, &v107))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v68 = __nwlog_obj();
        v69 = type[0];
        if (!os_log_type_enabled(v68, type[0]))
          goto LABEL_146;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v70 = "%{public}s called with null handle->http1_stream";
        goto LABEL_145;
      }
      if (v107 == OS_LOG_TYPE_DEFAULT)
      {
        v68 = __nwlog_obj();
        v69 = type[0];
        if (!os_log_type_enabled(v68, type[0]))
          goto LABEL_146;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v70 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
        goto LABEL_145;
      }
      v78 = (char *)__nw_create_backtrace_string();
      v68 = __nwlog_obj();
      v69 = type[0];
      v81 = os_log_type_enabled(v68, type[0]);
      if (!v78)
      {
        if (!v81)
          goto LABEL_146;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v70 = "%{public}s called with null handle->http1_stream, no backtrace";
        goto LABEL_145;
      }
      if (v81)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v78;
        v80 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
        goto LABEL_127;
      }
      goto LABEL_128;
    }
LABEL_146:
    if (!v67)
      goto LABEL_148;
    goto LABEL_147;
  }
  if (v6 != 3)
    goto LABEL_148;
  v7 = (uint64_t *)(v5 + 16);
LABEL_8:
  v9 = *v7;
  if (!*v7)
    goto LABEL_148;
  if ((*(_WORD *)(v9 + 872) & 0x900) == 0)
  {
    v10 = (void *)nw_path_copy_for_flow_registration(a3, *(void **)(v9 + 560));
    if (v10)
    {
      v11 = v10;
      if (*(void **)(v9 + 512) != v10)
      {
        v12 = os_retain(v10);
        v13 = *(_BYTE *)(v9 + 520);
        if ((v13 & 1) != 0)
        {
          v14 = *(void **)(v9 + 512);
          if (v14)
          {
            os_release(v14);
            v13 = *(_BYTE *)(v9 + 520);
          }
        }
        *(_QWORD *)(v9 + 512) = v12;
        *(_BYTE *)(v9 + 520) = v13 | 1;
      }
      v15 = (unsigned __int16 *)(v9 + 872);
      v16 = *(void **)(v9 + 576);
      if (v16)
      {
        v17 = nw_path_has_proxy_config(v11, v16);
        v18 = *v15;
        if ((v17 & 1) == 0 && (*v15 & 0x400) == 0)
        {
          if ((*(_BYTE *)(v9 + 158) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v19 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              v20 = *(_QWORD *)(v9 + 488);
              v21 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
              v22 = *(_DWORD *)(v9 + 860);
              if (v20)
                LODWORD(v20) = *(_DWORD *)(v20 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v9 + 74;
              *(_WORD *)&buf[22] = 2080;
              v109 = (uint64_t)" ";
              *(_WORD *)v110 = 1024;
              *(_DWORD *)&v110[2] = v21;
              *(_WORD *)&v110[6] = 1024;
              *(_DWORD *)&v110[8] = v22;
              LOWORD(v111) = 1024;
              *(_DWORD *)((char *)&v111 + 2) = v20;
              _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Effective proxy configuration lost, marking do-not-reuse", buf, 0x32u);
            }
          }
          v23 = *(unsigned __int8 *)(v9 + 874);
          v24 = *v15;
          *v15 = v24 | 0x400;
          v25 = *(_QWORD *)(v9 + 480);
          if (v25)
          {
            v26 = v24 | (v23 << 16);
            if ((v26 & 0x800) == 0)
            {
              *(_BYTE *)(v9 + 874) = BYTE2(v26);
              *v15 = v26 | 0xC00;
              v27 = *(unsigned int *)(v25 + 368) + 1;
              v28 = v27 << 31 >> 31;
              *(_DWORD *)(v25 + 368) = v27;
              if (v28 == v27 && (v28 & 0x8000000000000000) == 0)
                goto LABEL_76;
              __nwlog_obj();
              v29 = *(unsigned int *)(v25 + 368);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              v109 = 1;
              *(_WORD *)v110 = 2048;
              *(_QWORD *)&v110[2] = v29;
              v30 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              v107 = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v30, type, &v107))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v31 = __nwlog_obj();
                  v32 = type[0];
                  if (os_log_type_enabled(v31, type[0]))
                  {
                    v33 = *(unsigned int *)(v25 + 368);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    v109 = 1;
                    *(_WORD *)v110 = 2048;
                    *(_QWORD *)&v110[2] = v33;
                    v34 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_72:
                    _os_log_impl(&dword_182FBE000, v31, v32, v34, buf, 0x2Au);
                  }
                }
                else if (v107)
                {
                  v55 = (char *)__nw_create_backtrace_string();
                  v31 = __nwlog_obj();
                  v32 = type[0];
                  v56 = os_log_type_enabled(v31, type[0]);
                  if (v55)
                  {
                    if (v56)
                    {
                      v57 = *(unsigned int *)(v25 + 368);
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                      *(_WORD *)&buf[22] = 2048;
                      v109 = 1;
                      *(_WORD *)v110 = 2048;
                      *(_QWORD *)&v110[2] = v57;
                      *(_WORD *)&v110[10] = 2082;
                      v111 = v55;
                      _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                    }
                    free(v55);
                    goto LABEL_73;
                  }
                  if (v56)
                  {
                    v62 = *(unsigned int *)(v25 + 368);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    v109 = 1;
                    *(_WORD *)v110 = 2048;
                    *(_QWORD *)&v110[2] = v62;
                    v34 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                    goto LABEL_72;
                  }
                }
                else
                {
                  v31 = __nwlog_obj();
                  v32 = type[0];
                  if (os_log_type_enabled(v31, type[0]))
                  {
                    v58 = *(unsigned int *)(v25 + 368);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    v109 = 1;
                    *(_WORD *)v110 = 2048;
                    *(_QWORD *)&v110[2] = v58;
                    v34 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                    goto LABEL_72;
                  }
                }
              }
LABEL_73:
              if (v30)
                free(v30);
              *(_DWORD *)(v25 + 368) = -1;
LABEL_76:
              if ((*(_BYTE *)(v9 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v90 = __nwlog_obj();
                  if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
                  {
                    v91 = *(_QWORD *)(v9 + 488);
                    v92 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
                    v93 = *(_DWORD *)(v9 + 860);
                    if (v91)
                      LODWORD(v91) = *(_DWORD *)(v91 + 424);
                    v94 = *(_DWORD *)(v25 + 368) + *(_DWORD *)(v25 + 364);
                    *(_DWORD *)buf = 136447746;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v9 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v109 = (uint64_t)" ";
                    *(_WORD *)v110 = 1024;
                    *(_DWORD *)&v110[2] = v92;
                    *(_WORD *)&v110[6] = 1024;
                    *(_DWORD *)&v110[8] = v93;
                    LOWORD(v111) = 1024;
                    *(_DWORD *)((char *)&v111 + 2) = v91;
                    HIWORD(v111) = 1024;
                    v112 = v94;
                    _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
                  }
                }
              }
              v63 = *(void **)(v9 + 496);
              if (v63)
              {
                v64 = *(_QWORD *)(v9 + 480);
                if (v64)
                {
LABEL_80:
                  v65 = *(_QWORD *)(v64 + 200);
                  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&buf[8] = 0x40000000;
                  *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
                  v109 = (uint64_t)&unk_1E14A1518;
                  *(_QWORD *)v110 = v65;
                  nw_queue_context_async(v63, buf);
LABEL_81:
                  os_release(v11);
                  return;
                }
LABEL_102:
                __nwlog_obj();
                *(_DWORD *)type = 136446210;
                v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
                v72 = (char *)_os_log_send_and_compose_impl();
                v107 = OS_LOG_TYPE_ERROR;
                v106 = 0;
                if (!__nwlog_fault(v72, &v107, &v106))
                  goto LABEL_212;
                if (v107 == OS_LOG_TYPE_FAULT)
                {
                  v73 = __nwlog_obj();
                  v74 = v107;
                  if (!os_log_type_enabled(v73, v107))
                    goto LABEL_212;
                  *(_DWORD *)type = 136446210;
                  v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v75 = "%{public}s called with null http1";
LABEL_210:
                  v105 = (uint8_t *)type;
                  goto LABEL_211;
                }
                if (!v106)
                {
                  v73 = __nwlog_obj();
                  v74 = v107;
                  if (!os_log_type_enabled(v73, v107))
                    goto LABEL_212;
                  *(_DWORD *)type = 136446210;
                  v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v75 = "%{public}s called with null http1, backtrace limit exceeded";
                  goto LABEL_210;
                }
                v95 = (char *)__nw_create_backtrace_string();
                v73 = __nwlog_obj();
                v74 = v107;
                v96 = os_log_type_enabled(v73, v107);
                if (!v95)
                {
                  if (!v96)
                    goto LABEL_212;
                  *(_DWORD *)type = 136446210;
                  v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v75 = "%{public}s called with null http1, no backtrace";
                  goto LABEL_210;
                }
                if (v96)
                {
                  *(_DWORD *)type = 136446466;
                  v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v115 = 2082;
                  v116 = v95;
                  v97 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_181:
                  v99 = (uint8_t *)type;
LABEL_182:
                  _os_log_impl(&dword_182FBE000, v73, v74, v97, v99, 0x16u);
                  goto LABEL_183;
                }
                goto LABEL_183;
              }
              goto LABEL_165;
            }
            if ((*(_BYTE *)(v9 + 158) & 1) != 0 || !gLogDatapath)
              goto LABEL_81;
LABEL_54:
            v51 = __nwlog_obj();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
            {
              v52 = *(_QWORD *)(v9 + 488);
              v53 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
              v54 = *(_DWORD *)(v9 + 860);
              if (v52)
                LODWORD(v52) = *(_DWORD *)(v52 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v9 + 74;
              *(_WORD *)&buf[22] = 2080;
              v109 = (uint64_t)" ";
              *(_WORD *)v110 = 1024;
              *(_DWORD *)&v110[2] = v53;
              *(_WORD *)&v110[6] = 1024;
              *(_DWORD *)&v110[8] = v54;
              LOWORD(v111) = 1024;
              *(_DWORD *)((char *)&v111 + 2) = v52;
              _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
            }
            goto LABEL_81;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          v72 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          v107 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v72, type, &v107))
            goto LABEL_212;
          if (type[0] != OS_LOG_TYPE_FAULT)
          {
            if (v107)
            {
              v82 = (char *)__nw_create_backtrace_string();
              v73 = __nwlog_obj();
              v74 = type[0];
              v83 = os_log_type_enabled(v73, type[0]);
              if (v82)
              {
                if (v83)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v82;
                  _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v82);
LABEL_212:
                if (!v72)
                  goto LABEL_81;
LABEL_213:
                free(v72);
                goto LABEL_81;
              }
LABEL_199:
              if (!v83)
                goto LABEL_212;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              v75 = "%{public}s called with null http1, no backtrace";
              goto LABEL_201;
            }
LABEL_197:
            v73 = __nwlog_obj();
            v74 = type[0];
            if (!os_log_type_enabled(v73, type[0]))
              goto LABEL_212;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            v75 = "%{public}s called with null http1, backtrace limit exceeded";
            goto LABEL_201;
          }
          goto LABEL_187;
        }
      }
      else
      {
        v18 = *v15;
      }
      if ((v18 & 0x1000) == 0 || nw_path_is_viable(v11) || (*v15 & 0x400) != 0)
        goto LABEL_81;
      if ((*(_BYTE *)(v9 + 158) & 1) == 0)
      {
        v35 = __nwlog_obj();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          v36 = *(_QWORD *)(v9 + 488);
          v37 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
          v38 = *(_DWORD *)(v9 + 860);
          if (v36)
            LODWORD(v36) = *(_DWORD *)(v36 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v9 + 74;
          *(_WORD *)&buf[22] = 2080;
          v109 = (uint64_t)" ";
          *(_WORD *)v110 = 1024;
          *(_DWORD *)&v110[2] = v37;
          *(_WORD *)&v110[6] = 1024;
          *(_DWORD *)&v110[8] = v38;
          LOWORD(v111) = 1024;
          *(_DWORD *)((char *)&v111 + 2) = v36;
          _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Path became nonviable, marking do-not-reuse", buf, 0x32u);
        }
      }
      v39 = *(unsigned __int8 *)(v9 + 874);
      v40 = *v15;
      *v15 = v40 | 0x400;
      v41 = *(_QWORD *)(v9 + 480);
      if (!v41)
      {
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v72 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v107 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v72, type, &v107))
          goto LABEL_212;
        if (type[0] != OS_LOG_TYPE_FAULT)
        {
          if (v107)
          {
            v95 = (char *)__nw_create_backtrace_string();
            v73 = __nwlog_obj();
            v74 = type[0];
            v83 = os_log_type_enabled(v73, type[0]);
            if (v95)
            {
              if (v83)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v95;
                v97 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                v99 = buf;
                goto LABEL_182;
              }
              goto LABEL_183;
            }
            goto LABEL_199;
          }
          goto LABEL_197;
        }
LABEL_187:
        v73 = __nwlog_obj();
        v74 = type[0];
        if (!os_log_type_enabled(v73, type[0]))
          goto LABEL_212;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v75 = "%{public}s called with null http1";
LABEL_201:
        v105 = buf;
LABEL_211:
        _os_log_impl(&dword_182FBE000, v73, v74, v75, v105, 0xCu);
        goto LABEL_212;
      }
      v42 = v40 | (v39 << 16);
      if ((v42 & 0x800) != 0)
      {
        if ((*(_BYTE *)(v9 + 158) & 1) != 0 || !gLogDatapath)
          goto LABEL_81;
        goto LABEL_54;
      }
      *(_BYTE *)(v9 + 874) = BYTE2(v42);
      *v15 = v42 | 0xC00;
      v43 = *(unsigned int *)(v41 + 368) + 1;
      v44 = v43 << 31 >> 31;
      *(_DWORD *)(v41 + 368) = v43;
      if (v44 == v43 && (v44 & 0x8000000000000000) == 0)
      {
LABEL_98:
        if ((*(_BYTE *)(v9 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v100 = __nwlog_obj();
            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
            {
              v101 = *(_QWORD *)(v9 + 488);
              v102 = *(_DWORD *)(*(_QWORD *)(v9 + 480) + 372);
              v103 = *(_DWORD *)(v9 + 860);
              if (v101)
                LODWORD(v101) = *(_DWORD *)(v101 + 424);
              v104 = *(_DWORD *)(v41 + 368) + *(_DWORD *)(v41 + 364);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v9 + 74;
              *(_WORD *)&buf[22] = 2080;
              v109 = (uint64_t)" ";
              *(_WORD *)v110 = 1024;
              *(_DWORD *)&v110[2] = v102;
              *(_WORD *)&v110[6] = 1024;
              *(_DWORD *)&v110[8] = v103;
              LOWORD(v111) = 1024;
              *(_DWORD *)((char *)&v111 + 2) = v101;
              HIWORD(v111) = 1024;
              v112 = v104;
              _os_log_impl(&dword_182FBE000, v100, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
            }
          }
        }
        v63 = *(void **)(v9 + 496);
        if (v63)
        {
          v64 = *(_QWORD *)(v9 + 480);
          if (v64)
            goto LABEL_80;
          goto LABEL_102;
        }
LABEL_165:
        __nwlog_obj();
        *(_DWORD *)type = 136446210;
        v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
        v72 = (char *)_os_log_send_and_compose_impl();
        v107 = OS_LOG_TYPE_ERROR;
        v106 = 0;
        if (!__nwlog_fault(v72, &v107, &v106))
          goto LABEL_212;
        if (v107 == OS_LOG_TYPE_FAULT)
        {
          v73 = __nwlog_obj();
          v74 = v107;
          if (!os_log_type_enabled(v73, v107))
            goto LABEL_212;
          *(_DWORD *)type = 136446210;
          v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
          v75 = "%{public}s called with null http1_connection->context";
          goto LABEL_210;
        }
        if (!v106)
        {
          v73 = __nwlog_obj();
          v74 = v107;
          if (!os_log_type_enabled(v73, v107))
            goto LABEL_212;
          *(_DWORD *)type = 136446210;
          v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
          v75 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
          goto LABEL_210;
        }
        v95 = (char *)__nw_create_backtrace_string();
        v73 = __nwlog_obj();
        v74 = v107;
        v98 = os_log_type_enabled(v73, v107);
        if (!v95)
        {
          if (!v98)
            goto LABEL_212;
          *(_DWORD *)type = 136446210;
          v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
          v75 = "%{public}s called with null http1_connection->context, no backtrace";
          goto LABEL_210;
        }
        if (v98)
        {
          *(_DWORD *)type = 136446466;
          v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
          v115 = 2082;
          v116 = v95;
          v97 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
          goto LABEL_181;
        }
LABEL_183:
        free(v95);
        if (!v72)
          goto LABEL_81;
        goto LABEL_213;
      }
      __nwlog_obj();
      v45 = *(unsigned int *)(v41 + 368);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
      *(_WORD *)&buf[22] = 2048;
      v109 = 1;
      *(_WORD *)v110 = 2048;
      *(_QWORD *)&v110[2] = v45;
      v46 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v107 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v46, type, &v107))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v47 = __nwlog_obj();
          v48 = type[0];
          if (os_log_type_enabled(v47, type[0]))
          {
            v49 = *(unsigned int *)(v41 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v109 = 1;
            *(_WORD *)v110 = 2048;
            *(_QWORD *)&v110[2] = v49;
            v50 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_94:
            _os_log_impl(&dword_182FBE000, v47, v48, v50, buf, 0x2Au);
          }
        }
        else if (v107)
        {
          v59 = (char *)__nw_create_backtrace_string();
          v47 = __nwlog_obj();
          v48 = type[0];
          v60 = os_log_type_enabled(v47, type[0]);
          if (v59)
          {
            if (v60)
            {
              v61 = *(unsigned int *)(v41 + 368);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              v109 = 1;
              *(_WORD *)v110 = 2048;
              *(_QWORD *)&v110[2] = v61;
              *(_WORD *)&v110[10] = 2082;
              v111 = v59;
              _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v59);
            goto LABEL_95;
          }
          if (v60)
          {
            v71 = *(unsigned int *)(v41 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v109 = 1;
            *(_WORD *)v110 = 2048;
            *(_QWORD *)&v110[2] = v71;
            v50 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_94;
          }
        }
        else
        {
          v47 = __nwlog_obj();
          v48 = type[0];
          if (os_log_type_enabled(v47, type[0]))
          {
            v66 = *(unsigned int *)(v41 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v109 = 1;
            *(_WORD *)v110 = 2048;
            *(_QWORD *)&v110[2] = v66;
            v50 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_94;
          }
        }
      }
LABEL_95:
      if (v46)
        free(v46);
      *(_DWORD *)(v41 + 368) = -1;
      goto LABEL_98;
    }
  }
}

double __nw_protocol_http1_identifier_block_invoke()
{
  double result;

  strcpy((char *)&nw_protocol_http1_identifier::http1_protocol_identifier, "http1");
  *(_QWORD *)&result = 0x200000004;
  qword_1EDCE51A8 = 0x200000004;
  return result;
}

void ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_2(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = v5 + 74;
      v7 = *(_QWORD *)(v5 + 256);
      v8 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      v9 = *(_DWORD *)(v5 + 424);
      v10 = 136447746;
      v11 = "nw_http1_match_idle_connection_with_pending_stream_block_invoke_2";
      v12 = 2082;
      v13 = v6;
      v14 = 2080;
      v15 = " ";
      v16 = 1024;
      v17 = v8;
      v18 = 1024;
      v19 = v7;
      v20 = 1024;
      v21 = v9;
      v22 = 2082;
      v23 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> [http] sending request header {method=\"%{public}s\"}", (uint8_t *)&v10, 0x3Cu);
    }
  }
}

void ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_46(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = v5 + 74;
      v7 = *(_QWORD *)(v5 + 256);
      v8 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      v9 = *(_DWORD *)(v5 + 424);
      v10 = 136447746;
      v11 = "nw_http1_match_idle_connection_with_pending_stream_block_invoke";
      v12 = 2082;
      v13 = v6;
      v14 = 2080;
      v15 = " ";
      v16 = 1024;
      v17 = v8;
      v18 = 1024;
      v19 = v7;
      v20 = 1024;
      v21 = v9;
      v22 = 2082;
      v23 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> [http] receiving request header {method=\"%{public}s\"}", (uint8_t *)&v10, 0x3Cu);
    }
  }
}

void ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_48(uint64_t a1, uint64_t a2, int a3)
{
  int start_reason;
  uint64_t start_time;
  uint64_t end_time;
  uint64_t outbound_message_start_time;
  uint64_t outbound_message_end_time;
  uint64_t inbound_message_start_time;
  uint64_t inbound_message_end_time;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  const char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t outbound_body_size;
  uint64_t inbound_body_size;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  start_reason = nw_http_transaction_metadata_get_start_reason(*(void **)(a1 + 32));
  start_time = nw_http_transaction_metadata_get_start_time(*(void **)(a1 + 32));
  end_time = nw_http_transaction_metadata_get_end_time(*(void **)(a1 + 32));
  outbound_message_start_time = nw_http_transaction_metadata_get_outbound_message_start_time(*(void **)(a1 + 32));
  outbound_message_end_time = nw_http_transaction_metadata_get_outbound_message_end_time(*(void **)(a1 + 32));
  inbound_message_start_time = nw_http_transaction_metadata_get_inbound_message_start_time(*(void **)(a1 + 32));
  inbound_message_end_time = nw_http_transaction_metadata_get_inbound_message_end_time(*(void **)(a1 + 32));
  outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(*(void **)(a1 + 32));
  inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(*(void **)(a1 + 32));
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 40) + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      v39 = a3;
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD *)(v13 + 256);
      if (v14)
        v34 = *(_DWORD *)(v14 + 860);
      else
        v34 = 0;
      v15 = inbound_message_end_time;
      if ((start_reason - 1) > 2)
        v16 = "initial";
      else
        v16 = off_1E14AA478[start_reason - 1];
      v35 = v16;
      v37 = *(_DWORD *)(*(_QWORD *)(v13 + 248) + 372);
      v17 = *(_DWORD *)(v13 + 424);
      v18 = -1;
      if (start_time && end_time)
      {
        v19 = nw_delta_nanos(start_time, end_time);
        v15 = inbound_message_end_time;
        if (v19 > 0xF423FFFFFFFFFLL)
          v18 = -1;
        else
          v18 = v19 / 0xF4240;
      }
      LODWORD(v20) = -1;
      v38 = v17;
      if (start_time)
      {
        if (outbound_message_start_time)
        {
          v21 = nw_delta_nanos(start_time, outbound_message_start_time);
          v15 = inbound_message_end_time;
          v20 = v21 / 0xF4240;
          if (v21 > 0xF423FFFFFFFFFLL)
            LODWORD(v20) = -1;
        }
      }
      v22 = -1;
      v36 = v20;
      if (outbound_message_start_time && outbound_message_end_time)
      {
        v23 = nw_delta_nanos(outbound_message_start_time, outbound_message_end_time);
        v15 = inbound_message_end_time;
        if (v23 > 0xF423FFFFFFFFFLL)
          v22 = -1;
        else
          v22 = v23 / 0xF4240;
      }
      v24 = v18;
      v25 = v13 + 74;
      v26 = -1;
      if (start_time)
      {
        v28 = outbound_body_size;
        v27 = inbound_body_size;
        if (inbound_message_start_time)
        {
          v29 = nw_delta_nanos(start_time, inbound_message_start_time);
          v15 = inbound_message_end_time;
          if (v29 > 0xF423FFFFFFFFFLL)
            v26 = -1;
          else
            v26 = v29 / 0xF4240;
        }
        LODWORD(v30) = -1;
        if (inbound_message_start_time)
          goto LABEL_29;
      }
      else
      {
        v28 = outbound_body_size;
        v27 = inbound_body_size;
        LODWORD(v30) = -1;
        if (inbound_message_start_time)
        {
LABEL_29:
          v31 = a2;
          v32 = v34;
          if (v15)
          {
            v33 = nw_delta_nanos(inbound_message_start_time, v15);
            v30 = v33 / 0xF4240;
            if (v33 > 0xF423FFFFFFFFFLL)
              LODWORD(v30) = -1;
          }
          goto LABEL_34;
        }
      }
      v31 = a2;
      v32 = v34;
LABEL_34:
      *(_DWORD *)buf = 136450050;
      v44 = "nw_http1_match_idle_connection_with_pending_stream_block_invoke";
      v45 = 2082;
      v46 = v25;
      v47 = 2080;
      v48 = " ";
      v49 = 1024;
      v50 = v37;
      v51 = 1024;
      v52 = v32;
      v53 = 1024;
      v54 = v38;
      v55 = 2080;
      v56 = v35;
      v57 = 1024;
      v58 = v24;
      v59 = 2082;
      v60 = v31;
      v61 = 1024;
      v62 = v39;
      v63 = 1024;
      v64 = v36;
      v65 = 1024;
      v66 = v22;
      v67 = 1024;
      v68 = v26;
      v69 = 1024;
      v70 = v30;
      v71 = 2048;
      v72 = v28;
      v73 = 2048;
      v74 = v27;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:c%u:s%u> [http] transaction summary {start_reason=\"%s\", duration_ms=%d, request_method=\"%{public}s\", response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_ms=%d, inbound_duration_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}", buf, 0x7Eu);
    }
  }
}

uint64_t ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_50(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, *(unsigned __int16 *)(a1 + 40));
}

uint64_t ___ZL40nw_protocol_http1_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(_QWORD *a1, uint64_t a2)
{
  _QWORD *finalizer_context;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  uint64_t v14;
  char *backtrace_string;
  _BOOL4 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  char *v23;
  _BOOL4 v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int is_metadata_complete;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  _BYTE *v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  const char *v48;
  int v49;
  const char *v50;
  const char *v51;
  NSObject *v52;
  os_log_type_t v53;
  const char *v54;
  const char *v55;
  char *v56;
  _BOOL4 v57;
  char *v58;
  char *v59;
  _BOOL4 v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  unsigned int v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v74;
  _BOOL4 v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  const char *v85;
  NSObject *v86;
  os_log_type_t v87;
  const char *v88;
  char *v89;
  _BOOL4 v90;
  char *v91;
  NSObject *v92;
  os_log_type_t v93;
  const char *v94;
  unsigned int v95;
  char *v96;
  NSObject *v97;
  os_log_type_t v98;
  const char *v99;
  char *v100;
  NSObject *v101;
  os_log_type_t v102;
  const char *v103;
  char *v104;
  NSObject *v105;
  os_log_type_t v106;
  const char *v107;
  NSObject *v108;
  uint64_t v109;
  char *v110;
  _BOOL4 v111;
  char *v112;
  NSObject *v113;
  _BOOL4 v114;
  char *v115;
  NSObject *v116;
  _BOOL4 v117;
  const char *v118;
  NSObject *v119;
  _BOOL4 v120;
  NSObject *v121;
  _BOOL4 v122;
  char *v123;
  _BOOL4 v124;
  const char *v125;
  _BOOL4 v126;
  NSObject *v127;
  char *v128;
  NSObject *v129;
  _BOOL4 v130;
  NSObject *v131;
  NSObject *v132;
  int log;
  NSObject *loga;
  int v135;
  os_log_type_t type[6];
  char v137;
  os_log_type_t v138;
  uint8_t buf[4];
  const char *v140;
  __int16 v141;
  const char *v142;
  __int16 v143;
  const char *v144;
  __int16 v145;
  _BYTE v146[10];
  char *v147;
  uint64_t v148;
  __int16 v149;
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  if (nw_frame_get_finalizer_context(a2) == a1[6])
  {
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD **)(a2 + 40);
    if (v8)
    {
      *(_QWORD *)(v8 + 40) = v9;
      v9 = *(_QWORD **)(a2 + 40);
    }
    else
    {
      *(_QWORD *)(a1[7] + 8) = v9;
    }
    *v9 = v8;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v14 = 1;
    nw_frame_finalize(a2);
    return v14;
  }
  finalizer_context = (_QWORD *)nw_frame_get_finalizer_context(a2);
  if (!finalizer_context)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
    v141 = 2048;
    v142 = (const char *)a2;
    v10 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v138 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v10, type, &v138))
      goto LABEL_90;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_90;
      *(_DWORD *)buf = 136446466;
      v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
      v141 = 2048;
      v142 = (const char *)a2;
      v13 = "%{public}s frame %p has no context";
      goto LABEL_89;
    }
    if (v138 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_90;
      *(_DWORD *)buf = 136446466;
      v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
      v141 = 2048;
      v142 = (const char *)a2;
      v13 = "%{public}s frame %p has no context, backtrace limit exceeded";
      goto LABEL_89;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    v12 = type[0];
    v16 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!backtrace_string)
    {
      if (!v16)
        goto LABEL_90;
      *(_DWORD *)buf = 136446466;
      v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
      v141 = 2048;
      v142 = (const char *)a2;
      v13 = "%{public}s frame %p has no context, no backtrace";
      goto LABEL_89;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446722;
      v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
      v141 = 2048;
      v142 = (const char *)a2;
      v143 = 2082;
      v144 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s frame %p has no context, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(backtrace_string);
LABEL_90:
    if (!v10)
    {
LABEL_93:
      nw_frame_finalize(a2);
      return 1;
    }
    goto LABEL_91;
  }
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = finalizer_context[1];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *finalizer_context;
  *finalizer_context = 0;
  finalizer_context[1] = 0;
  if (a2)
  {
    *(_OWORD *)(a2 + 80) = *((_OWORD *)finalizer_context + 1);
LABEL_5:
    free(finalizer_context);
    goto LABEL_6;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v140 = "nw_http1_frame_unwrap_context";
  v85 = (const char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v138 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v85, type, &v138))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v86 = __nwlog_obj();
      v87 = type[0];
      if (!os_log_type_enabled(v86, type[0]))
        goto LABEL_212;
      *(_DWORD *)buf = 136446210;
      v140 = "nw_http1_frame_unwrap_context";
      v88 = "%{public}s called with null frame";
LABEL_211:
      _os_log_impl(&dword_182FBE000, v86, v87, v88, buf, 0xCu);
      goto LABEL_212;
    }
    if (v138 == OS_LOG_TYPE_DEFAULT)
    {
      v86 = __nwlog_obj();
      v87 = type[0];
      if (!os_log_type_enabled(v86, type[0]))
        goto LABEL_212;
      *(_DWORD *)buf = 136446210;
      v140 = "nw_http1_frame_unwrap_context";
      v88 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_211;
    }
    v89 = (char *)__nw_create_backtrace_string();
    v86 = __nwlog_obj();
    v87 = type[0];
    v90 = os_log_type_enabled(v86, type[0]);
    if (!v89)
    {
      if (!v90)
        goto LABEL_212;
      *(_DWORD *)buf = 136446210;
      v140 = "nw_http1_frame_unwrap_context";
      v88 = "%{public}s called with null frame, no backtrace";
      goto LABEL_211;
    }
    if (v90)
    {
      *(_DWORD *)buf = 136446466;
      v140 = "nw_http1_frame_unwrap_context";
      v141 = 2082;
      v142 = v89;
      _os_log_impl(&dword_182FBE000, v86, v87, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v89);
  }
LABEL_212:
  if (v85)
  {
    finalizer_context = v85;
    goto LABEL_5;
  }
LABEL_6:
  v5 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
    v141 = 2048;
    v142 = (const char *)a2;
    v10 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v138 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v10, type, &v138))
      goto LABEL_90;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_90;
      *(_DWORD *)buf = 136446466;
      v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
      v141 = 2048;
      v142 = (const char *)a2;
      v13 = "%{public}s frame %p has no connection in its context";
      goto LABEL_89;
    }
    if (v138 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_90;
      *(_DWORD *)buf = 136446466;
      v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
      v141 = 2048;
      v142 = (const char *)a2;
      v13 = "%{public}s frame %p has no connection in its context, backtrace limit exceeded";
      goto LABEL_89;
    }
    v23 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    v12 = type[0];
    v24 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (v23)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446722;
        v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
        v141 = 2048;
        v142 = (const char *)a2;
        v143 = 2082;
        v144 = v23;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s frame %p has no connection in its context, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v23);
      if (!v10)
        goto LABEL_93;
LABEL_91:
      v58 = (char *)v10;
LABEL_92:
      free(v58);
      goto LABEL_93;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
      v141 = 2048;
      v142 = (const char *)a2;
      v13 = "%{public}s frame %p has no connection in its context, no backtrace";
LABEL_89:
      _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0x16u);
      goto LABEL_90;
    }
    goto LABEL_90;
  }
  v6 = *(_QWORD *)(a1[5] + 8);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7)
  {
    if ((*(_WORD *)(v7 + 428) & 0x100) == 0)
      goto LABEL_110;
LABEL_29:
    v18 = nw_frame_unclaimed_length((_DWORD *)a2);
    *(_DWORD *)type = 0;
    nw_frame_get_buffer(a2, type);
    if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
    {
      v20 = *(_DWORD *)type;
      if (*(_DWORD *)type)
      {
        v21 = 0;
        do
        {
          ++v21;
          v22 = v20 > 0xF;
          v20 >>= 4;
        }
        while (v22);
      }
      else
      {
        v21 = 0;
      }
      v25 = v21 + 2;
      v26 = 7;
      goto LABEL_44;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v140 = "nw_http1_connection_get_chunked_extra_size";
    v91 = (char *)_os_log_send_and_compose_impl();
    v138 = OS_LOG_TYPE_ERROR;
    v137 = 0;
    if (__nwlog_fault(v91, &v138, &v137))
    {
      if (v138 == OS_LOG_TYPE_FAULT)
      {
        v92 = __nwlog_obj();
        v93 = v138;
        if (os_log_type_enabled(v92, v138))
        {
          *(_DWORD *)buf = 136446210;
          v140 = "nw_http1_connection_get_chunked_extra_size";
          v94 = "%{public}s called with null http1_connection";
LABEL_251:
          _os_log_impl(&dword_182FBE000, v92, v93, v94, buf, 0xCu);
        }
      }
      else if (v137)
      {
        v110 = (char *)__nw_create_backtrace_string();
        v92 = __nwlog_obj();
        v93 = v138;
        v111 = os_log_type_enabled(v92, v138);
        if (v110)
        {
          if (v111)
          {
            *(_DWORD *)buf = 136446466;
            v140 = "nw_http1_connection_get_chunked_extra_size";
            v141 = 2082;
            v142 = v110;
            _os_log_impl(&dword_182FBE000, v92, v93, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v110);
          goto LABEL_252;
        }
        if (v111)
        {
          *(_DWORD *)buf = 136446210;
          v140 = "nw_http1_connection_get_chunked_extra_size";
          v94 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_251;
        }
      }
      else
      {
        v92 = __nwlog_obj();
        v93 = v138;
        if (os_log_type_enabled(v92, v138))
        {
          *(_DWORD *)buf = 136446210;
          v140 = "nw_http1_connection_get_chunked_extra_size";
          v94 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_251;
        }
      }
    }
LABEL_252:
    if (v91)
      free(v91);
    v25 = 0;
    v26 = 0;
LABEL_44:
    nw_frame_unclaim(a2, v19, v25, v26);
    v27 = nw_frame_unclaimed_bytes(a2, 0);
    is_metadata_complete = nw_frame_is_metadata_complete(a2);
    v30 = is_metadata_complete;
    if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
    {
      v31 = 0;
      if (v18)
      {
        v32 = v18;
        do
        {
          ++v31;
          v22 = v32 > 0xF;
          v32 >>= 4;
        }
        while (v22);
      }
      v33 = v31 + 2;
      if (is_metadata_complete)
        v34 = 7;
      else
        v34 = 2;
      v135 = v34;
      log = v33;
      goto LABEL_52;
    }
    v95 = v18;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v140 = "nw_http1_connection_get_chunked_extra_size";
    v96 = (char *)_os_log_send_and_compose_impl();
    v138 = OS_LOG_TYPE_ERROR;
    v137 = 0;
    if (__nwlog_fault(v96, &v138, &v137))
    {
      if (v138 == OS_LOG_TYPE_FAULT)
      {
        v97 = __nwlog_obj();
        v98 = v138;
        if (!os_log_type_enabled(v97, v138))
          goto LABEL_220;
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_get_chunked_extra_size";
        v99 = "%{public}s called with null http1_connection";
LABEL_218:
        v127 = v97;
LABEL_219:
        _os_log_impl(&dword_182FBE000, v127, v98, v99, buf, 0xCu);
        goto LABEL_220;
      }
      if (!v137)
      {
        v97 = __nwlog_obj();
        v98 = v138;
        if (!os_log_type_enabled(v97, v138))
          goto LABEL_220;
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_get_chunked_extra_size";
        v99 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_218;
      }
      v112 = (char *)__nw_create_backtrace_string();
      v113 = __nwlog_obj();
      v98 = v138;
      loga = v113;
      v114 = os_log_type_enabled(v113, v138);
      if (v112)
      {
        if (v114)
        {
          *(_DWORD *)buf = 136446466;
          v140 = "nw_http1_connection_get_chunked_extra_size";
          v141 = 2082;
          v142 = v112;
          _os_log_impl(&dword_182FBE000, loga, v98, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v112);
      }
      else if (v114)
      {
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_get_chunked_extra_size";
        v99 = "%{public}s called with null http1_connection, no backtrace";
        v127 = loga;
        goto LABEL_219;
      }
    }
LABEL_220:
    if (v96)
      free(v96);
    v33 = 0;
    v135 = 0;
    v18 = v95;
    log = 0;
    if (!*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v140 = "nw_http1_connection_write_chunk_header";
      v100 = (char *)_os_log_send_and_compose_impl();
      v138 = OS_LOG_TYPE_ERROR;
      v137 = 0;
      if (!__nwlog_fault(v100, &v138, &v137))
        goto LABEL_246;
      if (v138 == OS_LOG_TYPE_FAULT)
      {
        v101 = __nwlog_obj();
        v102 = v138;
        if (!os_log_type_enabled(v101, v138))
          goto LABEL_246;
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_write_chunk_header";
        v103 = "%{public}s called with null http1_connection";
        goto LABEL_244;
      }
      if (!v137)
      {
        v101 = __nwlog_obj();
        v102 = v138;
        if (!os_log_type_enabled(v101, v138))
          goto LABEL_246;
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_write_chunk_header";
        v103 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_244;
      }
      v128 = (char *)__nw_create_backtrace_string();
      v129 = __nwlog_obj();
      v102 = v138;
      v132 = v129;
      v130 = os_log_type_enabled(v129, v138);
      if (v128)
      {
        if (v130)
        {
          *(_DWORD *)buf = 136446466;
          v140 = "nw_http1_connection_write_chunk_header";
          v141 = 2082;
          v142 = v128;
          _os_log_impl(&dword_182FBE000, v132, v102, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v128);
      }
      else if (v130)
      {
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_write_chunk_header";
        v103 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_273;
      }
      goto LABEL_246;
    }
LABEL_52:
    if (v18)
    {
      if (v27)
      {
        if (v33)
        {
          v35 = v27 + v33 - 1;
          *(_WORD *)(v35 - 1) = 2573;
          v36 = (_BYTE *)(v35 - 2);
          v37 = v18;
          do
          {
            if ((v37 & 0xF) >= 0xA)
              v38 = (v37 & 0xF) + 55;
            else
              v38 = v37 & 0xF | 0x30;
            *v36-- = v38;
            v22 = v37 > 0xF;
            v37 >>= 4;
          }
          while (v22);
LABEL_60:
          v39 = v33;
          v40 = v25 - v33;
          if (v25 != v33)
            memmove((void *)(v27 + v33), (const void *)(v27 + v25), v18);
          v41 = v135;
          if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
          {
            if (v27)
            {
              v42 = v27 + v39 + v18;
              *(_WORD *)v42 = 2573;
              if (v30)
              {
                *(_BYTE *)(v42 + 6) = 10;
                *(_DWORD *)(v42 + 2) = 218762544;
              }
              goto LABEL_66;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v140 = "nw_http1_connection_write_chunk_trailer";
            v104 = (char *)_os_log_send_and_compose_impl();
            v138 = OS_LOG_TYPE_ERROR;
            v137 = 0;
            if (!__nwlog_fault(v104, &v138, &v137))
              goto LABEL_268;
            if (v138 == OS_LOG_TYPE_FAULT)
            {
              v105 = __nwlog_obj();
              v106 = v138;
              if (os_log_type_enabled(v105, v138))
              {
                *(_DWORD *)buf = 136446210;
                v140 = "nw_http1_connection_write_chunk_trailer";
                v107 = "%{public}s called with null buffer";
                goto LABEL_267;
              }
              goto LABEL_268;
            }
            if (!v137)
            {
              v105 = __nwlog_obj();
              v106 = v138;
              if (os_log_type_enabled(v105, v138))
              {
                *(_DWORD *)buf = 136446210;
                v140 = "nw_http1_connection_write_chunk_trailer";
                v107 = "%{public}s called with null buffer, backtrace limit exceeded";
                goto LABEL_267;
              }
              goto LABEL_268;
            }
            v123 = (char *)__nw_create_backtrace_string();
            v105 = __nwlog_obj();
            v106 = v138;
            v126 = os_log_type_enabled(v105, v138);
            if (!v123)
            {
              if (v126)
              {
                *(_DWORD *)buf = 136446210;
                v140 = "nw_http1_connection_write_chunk_trailer";
                v107 = "%{public}s called with null buffer, no backtrace";
                goto LABEL_267;
              }
              goto LABEL_268;
            }
            if (v126)
            {
              *(_DWORD *)buf = 136446466;
              v140 = "nw_http1_connection_write_chunk_trailer";
              v141 = 2082;
              v142 = v123;
              v125 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
              goto LABEL_207;
            }
          }
          else
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v140 = "nw_http1_connection_write_chunk_trailer";
            v104 = (char *)_os_log_send_and_compose_impl();
            v138 = OS_LOG_TYPE_ERROR;
            v137 = 0;
            if (!__nwlog_fault(v104, &v138, &v137))
              goto LABEL_268;
            if (v138 == OS_LOG_TYPE_FAULT)
            {
              v105 = __nwlog_obj();
              v106 = v138;
              if (os_log_type_enabled(v105, v138))
              {
                *(_DWORD *)buf = 136446210;
                v140 = "nw_http1_connection_write_chunk_trailer";
                v107 = "%{public}s called with null http1_connection";
LABEL_267:
                _os_log_impl(&dword_182FBE000, v105, v106, v107, buf, 0xCu);
              }
LABEL_268:
              if (v104)
                free(v104);
              v41 = v135;
LABEL_66:
              v43 = v40 + v26 - v41;
              if (!__CFADD__(v40, v26 - v41))
              {
                v49 = log;
                if (!(_DWORD)v43)
                  goto LABEL_109;
                goto LABEL_108;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              *(_DWORD *)buf = 136446978;
              v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
              v44 = v26 - (unint64_t)v41;
              v141 = 2082;
              v142 = "unused_bytes";
              v143 = 2048;
              v144 = (const char *)v44;
              v145 = 2048;
              *(_QWORD *)v146 = v43;
              v45 = (char *)_os_log_send_and_compose_impl();
              v138 = OS_LOG_TYPE_ERROR;
              v137 = 0;
              if (__nwlog_fault(v45, &v138, &v137))
              {
                if (v138 == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v46 = gLogObj;
                  v47 = v138;
                  if (!os_log_type_enabled((os_log_t)gLogObj, v138))
                    goto LABEL_106;
                  *(_DWORD *)buf = 136446978;
                  v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
                  v141 = 2082;
                  v142 = "unused_bytes";
                  v143 = 2048;
                  v144 = (const char *)v44;
                  v145 = 2048;
                  *(_QWORD *)v146 = v43;
                  v48 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
                  goto LABEL_105;
                }
                if (!v137)
                {
                  v46 = __nwlog_obj();
                  v47 = v138;
                  if (!os_log_type_enabled(v46, v138))
                    goto LABEL_106;
                  *(_DWORD *)buf = 136446978;
                  v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
                  v141 = 2082;
                  v142 = "unused_bytes";
                  v143 = 2048;
                  v144 = (const char *)v44;
                  v145 = 2048;
                  *(_QWORD *)v146 = v43;
                  v48 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_105;
                }
                v56 = (char *)__nw_create_backtrace_string();
                v46 = __nwlog_obj();
                v47 = v138;
                v57 = os_log_type_enabled(v46, v138);
                if (v56)
                {
                  if (v57)
                  {
                    *(_DWORD *)buf = 136447234;
                    v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
                    v141 = 2082;
                    v142 = "unused_bytes";
                    v143 = 2048;
                    v144 = (const char *)v44;
                    v145 = 2048;
                    *(_QWORD *)v146 = v43;
                    *(_WORD *)&v146[8] = 2082;
                    v147 = v56;
                    _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v56);
                  v41 = v135;
                  goto LABEL_106;
                }
                v41 = v135;
                if (v57)
                {
                  *(_DWORD *)buf = 136446978;
                  v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
                  v141 = 2082;
                  v142 = "unused_bytes";
                  v143 = 2048;
                  v144 = (const char *)v44;
                  v145 = 2048;
                  *(_QWORD *)v146 = v43;
                  v48 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
LABEL_105:
                  _os_log_impl(&dword_182FBE000, v46, v47, v48, buf, 0x2Au);
                }
              }
LABEL_106:
              v49 = log;
              if (v45)
                free(v45);
LABEL_108:
              nw_frame_claim(a2, v29, v49 + v18 + v41, 0);
              nw_frame_collapse(a2);
              nw_frame_unclaim(a2, v63, v49 + v18 + v41, 0);
LABEL_109:
              v7 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
              goto LABEL_110;
            }
            if (!v137)
            {
              v105 = __nwlog_obj();
              v106 = v138;
              if (os_log_type_enabled(v105, v138))
              {
                *(_DWORD *)buf = 136446210;
                v140 = "nw_http1_connection_write_chunk_trailer";
                v107 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                goto LABEL_267;
              }
              goto LABEL_268;
            }
            v123 = (char *)__nw_create_backtrace_string();
            v105 = __nwlog_obj();
            v106 = v138;
            v124 = os_log_type_enabled(v105, v138);
            if (!v123)
            {
              if (v124)
              {
                *(_DWORD *)buf = 136446210;
                v140 = "nw_http1_connection_write_chunk_trailer";
                v107 = "%{public}s called with null http1_connection, no backtrace";
                goto LABEL_267;
              }
              goto LABEL_268;
            }
            if (v124)
            {
              *(_DWORD *)buf = 136446466;
              v140 = "nw_http1_connection_write_chunk_trailer";
              v141 = 2082;
              v142 = v123;
              v125 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_207:
              _os_log_impl(&dword_182FBE000, v105, v106, v125, buf, 0x16u);
            }
          }
          free(v123);
          goto LABEL_268;
        }
        v95 = v18;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_write_chunk_header";
        v100 = (char *)_os_log_send_and_compose_impl();
        v138 = OS_LOG_TYPE_ERROR;
        v137 = 0;
        if (__nwlog_fault(v100, &v138, &v137))
        {
          if (v138 == OS_LOG_TYPE_FAULT)
          {
            v101 = __nwlog_obj();
            v102 = v138;
            if (!os_log_type_enabled(v101, v138))
              goto LABEL_246;
            *(_DWORD *)buf = 136446210;
            v140 = "nw_http1_connection_write_chunk_header";
            v103 = "%{public}s called with null usable_size";
            goto LABEL_244;
          }
          if (!v137)
          {
            v101 = __nwlog_obj();
            v102 = v138;
            if (!os_log_type_enabled(v101, v138))
              goto LABEL_246;
            *(_DWORD *)buf = 136446210;
            v140 = "nw_http1_connection_write_chunk_header";
            v103 = "%{public}s called with null usable_size, backtrace limit exceeded";
            goto LABEL_244;
          }
          v115 = (char *)__nw_create_backtrace_string();
          v121 = __nwlog_obj();
          v102 = v138;
          v132 = v121;
          v122 = os_log_type_enabled(v121, v138);
          if (v115)
          {
            if (!v122)
              goto LABEL_197;
            *(_DWORD *)buf = 136446466;
            v140 = "nw_http1_connection_write_chunk_header";
            v141 = 2082;
            v142 = v115;
            v118 = "%{public}s called with null usable_size, dumping backtrace:%{public}s";
LABEL_196:
            _os_log_impl(&dword_182FBE000, v132, v102, v118, buf, 0x16u);
LABEL_197:
            free(v115);
            if (!v100)
              goto LABEL_248;
            goto LABEL_247;
          }
          if (v122)
          {
            *(_DWORD *)buf = 136446210;
            v140 = "nw_http1_connection_write_chunk_header";
            v103 = "%{public}s called with null usable_size, no backtrace";
            goto LABEL_273;
          }
        }
LABEL_246:
        if (!v100)
        {
LABEL_248:
          v18 = v95;
          v33 = log;
          goto LABEL_60;
        }
LABEL_247:
        free(v100);
        goto LABEL_248;
      }
      v95 = v18;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v140 = "nw_http1_connection_write_chunk_header";
      v100 = (char *)_os_log_send_and_compose_impl();
      v138 = OS_LOG_TYPE_ERROR;
      v137 = 0;
      if (!__nwlog_fault(v100, &v138, &v137))
        goto LABEL_246;
      if (v138 == OS_LOG_TYPE_FAULT)
      {
        v101 = __nwlog_obj();
        v102 = v138;
        if (!os_log_type_enabled(v101, v138))
          goto LABEL_246;
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_write_chunk_header";
        v103 = "%{public}s called with null buffer";
        goto LABEL_244;
      }
      if (!v137)
      {
        v101 = __nwlog_obj();
        v102 = v138;
        if (!os_log_type_enabled(v101, v138))
          goto LABEL_246;
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_write_chunk_header";
        v103 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_244;
      }
      v115 = (char *)__nw_create_backtrace_string();
      v119 = __nwlog_obj();
      v102 = v138;
      v132 = v119;
      v120 = os_log_type_enabled(v119, v138);
      if (v115)
      {
        if (!v120)
          goto LABEL_197;
        *(_DWORD *)buf = 136446466;
        v140 = "nw_http1_connection_write_chunk_header";
        v141 = 2082;
        v142 = v115;
        v118 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
        goto LABEL_196;
      }
      if (!v120)
        goto LABEL_246;
      *(_DWORD *)buf = 136446210;
      v140 = "nw_http1_connection_write_chunk_header";
      v103 = "%{public}s called with null buffer, no backtrace";
    }
    else
    {
      v95 = 0;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v140 = "nw_http1_connection_write_chunk_header";
      v100 = (char *)_os_log_send_and_compose_impl();
      v138 = OS_LOG_TYPE_ERROR;
      v137 = 0;
      if (!__nwlog_fault(v100, &v138, &v137))
        goto LABEL_246;
      if (v138 == OS_LOG_TYPE_FAULT)
      {
        v101 = __nwlog_obj();
        v102 = v138;
        if (!os_log_type_enabled(v101, v138))
          goto LABEL_246;
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_write_chunk_header";
        v103 = "%{public}s called with null size";
LABEL_244:
        v131 = v101;
LABEL_245:
        _os_log_impl(&dword_182FBE000, v131, v102, v103, buf, 0xCu);
        goto LABEL_246;
      }
      if (!v137)
      {
        v101 = __nwlog_obj();
        v102 = v138;
        if (!os_log_type_enabled(v101, v138))
          goto LABEL_246;
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_write_chunk_header";
        v103 = "%{public}s called with null size, backtrace limit exceeded";
        goto LABEL_244;
      }
      v115 = (char *)__nw_create_backtrace_string();
      v116 = __nwlog_obj();
      v102 = v138;
      v132 = v116;
      v117 = os_log_type_enabled(v116, v138);
      if (v115)
      {
        if (!v117)
          goto LABEL_197;
        *(_DWORD *)buf = 136446466;
        v140 = "nw_http1_connection_write_chunk_header";
        v141 = 2082;
        v142 = v115;
        v118 = "%{public}s called with null size, dumping backtrace:%{public}s";
        goto LABEL_196;
      }
      if (!v117)
        goto LABEL_246;
      *(_DWORD *)buf = 136446210;
      v140 = "nw_http1_connection_write_chunk_header";
      v103 = "%{public}s called with null size, no backtrace";
    }
LABEL_273:
    v131 = v132;
    goto LABEL_245;
  }
  v17 = *(_QWORD *)(v5 + 488);
  if (!v17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v50 = *(const char **)(*(_QWORD *)(a1[4] + 8) + 24);
    *(_DWORD *)buf = 136446466;
    v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
    v141 = 2048;
    v142 = v50;
    v51 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v138 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v51, type, &v138))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v52 = __nwlog_obj();
        v53 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          v54 = *(const char **)(*(_QWORD *)(a1[4] + 8) + 24);
          *(_DWORD *)buf = 136446466;
          v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
          v141 = 2048;
          v142 = v54;
          v55 = "%{public}s stream not found for connection %p";
LABEL_130:
          _os_log_impl(&dword_182FBE000, v52, v53, v55, buf, 0x16u);
        }
      }
      else if (v138)
      {
        v59 = (char *)__nw_create_backtrace_string();
        v52 = __nwlog_obj();
        v53 = type[0];
        v60 = os_log_type_enabled(v52, type[0]);
        if (v59)
        {
          if (v60)
          {
            v61 = *(const char **)(*(_QWORD *)(a1[4] + 8) + 24);
            *(_DWORD *)buf = 136446722;
            v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
            v141 = 2048;
            v142 = v61;
            v143 = 2082;
            v144 = v59;
            _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s stream not found for connection %p, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v59);
          goto LABEL_131;
        }
        if (v60)
        {
          v84 = *(const char **)(*(_QWORD *)(a1[4] + 8) + 24);
          *(_DWORD *)buf = 136446466;
          v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
          v141 = 2048;
          v142 = v84;
          v55 = "%{public}s stream not found for connection %p, no backtrace";
          goto LABEL_130;
        }
      }
      else
      {
        v52 = __nwlog_obj();
        v53 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          v62 = *(const char **)(*(_QWORD *)(a1[4] + 8) + 24);
          *(_DWORD *)buf = 136446466;
          v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
          v141 = 2048;
          v142 = v62;
          v55 = "%{public}s stream not found for connection %p, backtrace limit exceeded";
          goto LABEL_130;
        }
      }
    }
LABEL_131:
    if (!v51)
      goto LABEL_93;
    v58 = (char *)v51;
    goto LABEL_92;
  }
  *(_QWORD *)(v6 + 24) = v17;
  v7 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  if ((*(_WORD *)(v7 + 428) & 0x100) != 0)
    goto LABEL_29;
LABEL_110:
  v64 = *(void **)(v7 + 352);
  v65 = nw_frame_unclaimed_length((_DWORD *)a2);
  nw_http_transaction_metadata_increment_outbound_body_transfer_size(v64, v65);
  v66 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  v67 = (const char *)nw_frame_unclaimed_length((_DWORD *)a2);
  v68 = *(_QWORD *)(v66 + 176);
  *(_QWORD *)(v66 + 176) = &v67[v68];
  if (__CFADD__(v68, v67))
  {
    if (gLogDatapath)
    {
      v108 = __nwlog_obj();
      if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
      {
        v109 = *(_QWORD *)(v66 + 176);
        *(_DWORD *)buf = 136446978;
        v140 = "increment_outbound_body_size";
        v141 = 2082;
        v142 = "outbound_body_size";
        v143 = 2048;
        v144 = v67;
        v145 = 2048;
        *(_QWORD *)v146 = v109;
        _os_log_impl(&dword_182FBE000, v108, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
      }
    }
    *(_QWORD *)(v66 + 176) = -1;
  }
  if (!nw_frame_is_metadata_complete(a2))
    return 1;
  v69 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  *(_WORD *)(v69 + 428) |= 0x400u;
  v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 256);
  *(_WORD *)(v70 + 872) |= 0x20u;
  nw_http_transaction_metadata_mark_outbound_message_end(*(void **)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 352));
  v71 = a1[5];
  v72 = *(_QWORD *)(*(_QWORD *)(v71 + 8) + 24);
  if (!*(_BYTE *)(v72 + 168) || *(_QWORD *)(v72 + 160) == *(_QWORD *)(v72 + 176))
    return 1;
  if ((*(_BYTE *)(v72 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v74 = gLogObj;
    v75 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    v71 = a1[5];
    if (v75)
    {
      v76 = *(_QWORD *)(*(_QWORD *)(v71 + 8) + 24);
      v77 = (const char *)(v76 + 74);
      v78 = *(_QWORD *)(v76 + 256);
      if (v78)
        LODWORD(v78) = *(_DWORD *)(v78 + 860);
      v79 = *(_DWORD *)(*(_QWORD *)(v76 + 248) + 372);
      v80 = *(_DWORD *)(v76 + 424);
      if (*(_BYTE *)(v76 + 168))
        v81 = *(_QWORD *)(v76 + 160);
      else
        v81 = -1;
      v82 = *(_QWORD *)(v76 + 176);
      *(_DWORD *)buf = 136448002;
      v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
      v141 = 2082;
      v142 = v77;
      v143 = 2080;
      v144 = " ";
      v145 = 1024;
      *(_DWORD *)v146 = v79;
      *(_WORD *)&v146[4] = 1024;
      *(_DWORD *)&v146[6] = v78;
      LOWORD(v147) = 1024;
      *(_DWORD *)((char *)&v147 + 2) = v80;
      HIWORD(v147) = 2048;
      v148 = v81;
      v149 = 2048;
      v150 = v82;
      _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Content length header %llu does not equal body size %llu", buf, 0x46u);
      v71 = a1[5];
    }
  }
  nw_protocol_error(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v71 + 8) + 24) + 48), *(_QWORD *)(*(_QWORD *)(v71 + 8) + 24));
  v83 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  nw_protocol_disconnected(*(_QWORD **)(v83 + 48), v83);
  return 0;
}

uint64_t ___ZL40nw_protocol_http1_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_139(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v3 = *(_WORD *)(a2 + 204) & 0xFFC7 | (*(unsigned __int8 *)(a2 + 206) << 16);
  *(_WORD *)(a2 + 204) &= 0xFFC7u;
  *(_BYTE *)(a2 + 206) = BYTE2(v3);
  v5 = a2 + 64;
  v4 = *(_QWORD **)(a2 + 64);
  if (v4)
  {
    v6 = (_QWORD *)(a2 + 120);
    do
    {
      v7 = (_QWORD *)*v4;
      v8 = (void *)v4[6];
      v9 = (_QWORD *)*v4;
      if (v8)
      {
        os_release(v8);
        v4[6] = 0;
        v9 = (_QWORD *)*v4;
      }
      v10 = (_QWORD *)v4[1];
      if (v9)
      {
        v9[1] = v10;
        v10 = (_QWORD *)v4[1];
      }
      else
      {
        *(_QWORD *)(a2 + 72) = v10;
      }
      *v10 = v9;
      if (v4 != v6)
        free(v4);
      v4 = v7;
    }
    while (v7);
  }
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = v5;
  v11 = *(void **)(a2 + 168);
  if (v11)
    os_release(v11);
  *(_QWORD *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  return 1;
}

void nw_http1_connection_output_frame_finalizer(nw_frame *a1, uint64_t a2, void *a3)
{
  __int16 v4;
  char *v5;
  uint64_t v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;
  void *v16;
  id v17;
  void **v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  NSObject *v23;
  uint64_t v24;
  int v25;
  int v26;
  id v27;
  void *v28;
  _BOOL8 v29;
  id *metadata_for_response;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  id v43;
  int v44;
  uint64_t v45;
  int v46;
  void *v47;
  id v48;
  void *v49;
  _BOOL4 v50;
  id v51;
  int status_code;
  int v53;
  BOOL v54;
  __int16 v55;
  BOOL v56;
  _BOOL4 v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  NSObject *v62;
  os_log_type_t v63;
  char *v64;
  NSObject *v65;
  os_log_type_t v66;
  const char *v67;
  NSObject *v68;
  os_log_type_t v69;
  NSObject *v70;
  NSObject *v71;
  const char *url;
  id v73;
  __int16 v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  const char *v79;
  _BOOL4 v80;
  NSObject *v81;
  os_log_type_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  char *v87;
  NSObject *v88;
  os_log_type_t v89;
  const char *v90;
  void *v91;
  char *v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  char *v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  int output_frames;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  char *v115;
  NSObject *v116;
  os_log_type_t v117;
  NSObject *v118;
  os_log_type_t v119;
  const char *v120;
  char *v121;
  NSObject *v122;
  os_log_type_t v123;
  _BOOL4 v124;
  NSObject *v125;
  os_log_type_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  NSObject *v132;
  uint64_t v133;
  NSObject *v134;
  uint64_t v135;
  int v136;
  int v137;
  char *v138;
  NSObject *v139;
  os_log_type_t v140;
  const char *v141;
  NSObject *v142;
  uint64_t v143;
  int v144;
  int v145;
  char *v146;
  NSObject *v147;
  os_log_type_t v148;
  _BOOL4 v149;
  NSObject *v150;
  os_log_type_t v151;
  int v152;
  char *v153;
  NSObject *v154;
  os_log_type_t v155;
  const char *v156;
  char *v157;
  NSObject *v158;
  os_log_type_t v159;
  _BOOL4 v160;
  char *v161;
  NSObject *v162;
  os_log_type_t v163;
  const char *v164;
  NSObject *v165;
  uint64_t v166;
  int v167;
  int v168;
  const char *v169;
  NSObject *v170;
  os_log_type_t v171;
  char v172;
  NSObject *v173;
  uint64_t v174;
  int v175;
  int v176;
  __int16 v177;
  NSObject *v178;
  uint64_t v179;
  int v180;
  int v181;
  uint64_t v182;
  NSObject *v183;
  uint64_t v184;
  int v185;
  int v186;
  char *backtrace_string;
  _BOOL4 v188;
  char *v189;
  _BOOL4 v190;
  const char *v191;
  _BOOL4 v192;
  _BOOL4 v193;
  NSObject *v194;
  uint64_t v195;
  int v196;
  int v197;
  NSObject *v198;
  _BOOL4 v199;
  int v200;
  int v201;
  size_t v202;
  _QWORD *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  int v210;
  char *v211;
  uint64_t v212;
  int is_metadata_complete;
  uint64_t v214;
  int v215;
  unsigned int v216;
  int v217;
  int v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  BOOL v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  size_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t *v233;
  char *v234;
  uint64_t v235;
  os_log_type_t v236;
  NSObject *v237;
  os_log_type_t v238;
  const char *v239;
  char *v240;
  NSObject *v241;
  os_log_type_t v242;
  _BOOL4 v243;
  uint64_t v244;
  os_log_type_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  NSObject *v250;
  uint64_t v251;
  NSObject *v252;
  uint64_t v253;
  int v254;
  int v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  os_log_type_t v259;
  NSObject *v260;
  os_log_type_t v261;
  const char *v262;
  int v263;
  char *v264;
  uint64_t v265;
  os_log_type_t v266;
  NSObject *v267;
  os_log_type_t v268;
  const char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  unsigned int v275;
  _BYTE *v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  BOOL v280;
  _BYTE *v281;
  char v282;
  unsigned int v283;
  uint64_t v284;
  unsigned int v285;
  char *v286;
  NSObject *v287;
  os_log_type_t v288;
  _BOOL4 v289;
  char *v290;
  NSObject *v291;
  os_log_type_t v292;
  _BOOL4 v293;
  uint64_t v294;
  char *v295;
  NSObject *v296;
  os_log_type_t v297;
  NSObject *v298;
  os_log_type_t v299;
  const char *v300;
  NSObject *v301;
  os_log_type_t v302;
  uint64_t v303;
  os_log_type_t v304;
  NSObject *v305;
  uint64_t v306;
  int v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  char *v314;
  NSObject *v315;
  os_log_type_t v316;
  _BOOL4 v317;
  NSObject *v318;
  os_log_type_t v319;
  uint64_t v320;
  char v321;
  int v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  uint64_t v328;
  os_log_type_t v329;
  NSObject *v330;
  os_log_type_t v331;
  const char *v332;
  char *v333;
  NSObject *v334;
  os_log_type_t v335;
  _BOOL4 v336;
  NSObject *v337;
  os_log_type_t v338;
  _QWORD *v339;
  uint64_t v340;
  char *v341;
  NSObject *v342;
  os_log_type_t v343;
  NSObject *v344;
  os_log_type_t v345;
  const char *v346;
  char v347;
  char *v348;
  NSObject *v349;
  os_log_type_t v350;
  _BOOL4 v351;
  NSObject *v352;
  os_log_type_t v353;
  NSObject *v354;
  uint64_t v355;
  int v356;
  int v357;
  char *v358;
  NSObject *v359;
  os_log_type_t v360;
  NSObject *v361;
  os_log_type_t v362;
  const char *v363;
  NSObject *v364;
  os_log_type_t v365;
  NSObject *v366;
  uint64_t v367;
  int v368;
  int v369;
  NSObject *v370;
  uint64_t v371;
  int v372;
  int v373;
  _QWORD *v374;
  char *v375;
  NSObject *v376;
  os_log_type_t v377;
  _BOOL4 v378;
  NSObject *v379;
  os_log_type_t v380;
  const char *v381;
  NSObject *v382;
  os_log_type_t v383;
  _BOOL4 v384;
  NSObject *v385;
  uint64_t v386;
  NSObject *v387;
  os_log_type_t v388;
  NSObject *v389;
  os_log_type_t v390;
  _QWORD *v391;
  uint64_t v392;
  char *v393;
  NSObject *v394;
  os_log_type_t v395;
  NSObject *v396;
  os_log_type_t v397;
  const char *v398;
  _QWORD *v399;
  char *v400;
  NSObject *v401;
  os_log_type_t v402;
  NSObject *v403;
  os_log_type_t v404;
  const char *v405;
  char *v406;
  NSObject *v407;
  os_log_type_t v408;
  NSObject *v409;
  os_log_type_t v410;
  const char *v411;
  char *v412;
  NSObject *v413;
  os_log_type_t v414;
  _BOOL4 v415;
  char *v416;
  NSObject *v417;
  os_log_type_t v418;
  _BOOL4 v419;
  char *v420;
  NSObject *v421;
  os_log_type_t v422;
  _BOOL4 v423;
  NSObject *v424;
  uint64_t v425;
  int v426;
  int v427;
  NSObject *v428;
  os_log_type_t v429;
  NSObject *v430;
  os_log_type_t v431;
  NSObject *v432;
  os_log_type_t v433;
  _QWORD *v434;
  char *v435;
  NSObject *v436;
  os_log_type_t v437;
  NSObject *v438;
  os_log_type_t v439;
  const char *v440;
  char *v441;
  NSObject *v442;
  os_log_type_t v443;
  _BOOL4 v444;
  NSObject *v445;
  os_log_type_t v446;
  NSObject *v447;
  uint64_t v448;
  int v449;
  int v450;
  NSObject *v451;
  _BOOL4 v452;
  uint64_t v453;
  int v454;
  int v455;
  uint64_t v456;
  size_t v457;
  uint64_t v458;
  _QWORD *v459;
  _QWORD *v460;
  int v461;
  uint64_t v462;
  _WORD *v463;
  unsigned int v464;
  uint64_t v465;
  int v466;
  int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  NSObject *v473;
  _BOOL4 v474;
  uint64_t v475;
  int v476;
  int v477;
  uint64_t v478;
  char *v479;
  NSObject *v480;
  os_log_type_t v481;
  const char *v482;
  char *v483;
  NSObject *v484;
  os_log_type_t v485;
  const char *v486;
  char *v487;
  NSObject *v488;
  os_log_type_t v489;
  _BOOL4 v490;
  char *v491;
  NSObject *v492;
  os_log_type_t v493;
  _BOOL4 v494;
  NSObject *v495;
  os_log_type_t v496;
  NSObject *v497;
  uint64_t v498;
  int v499;
  int v500;
  NSObject *v501;
  os_log_type_t v502;
  _BOOL4 v503;
  size_t v504;
  NSObject *v505;
  uint64_t v506;
  int v507;
  int v508;
  NSObject *v509;
  _BOOL4 v510;
  int v511;
  int v512;
  int v513;
  NSObject *v514;
  uint64_t v515;
  int v516;
  int v517;
  char *v518;
  NSObject *v519;
  os_log_type_t v520;
  const char *v521;
  NSObject *v522;
  uint64_t v523;
  int v524;
  int v525;
  char *v526;
  NSObject *v527;
  os_log_type_t v528;
  _BOOL4 v529;
  const char *v530;
  _BOOL4 v531;
  char *v532;
  NSObject *v533;
  os_log_type_t v534;
  _BOOL4 v535;
  char *v536;
  _BOOL4 v537;
  char *v538;
  NSObject *v539;
  os_log_type_t v540;
  const char *v541;
  char *v542;
  NSObject *v543;
  os_log_type_t v544;
  _BOOL4 v545;
  NSObject *v546;
  os_log_type_t v547;
  NSObject *v548;
  uint64_t v549;
  int v550;
  int v551;
  void *v552;
  uint64_t v553;
  _QWORD *v554;
  uint64_t v555;
  char *v556;
  NSObject *v557;
  os_log_type_t v558;
  const char *v559;
  NSObject *v560;
  uint64_t v561;
  int v562;
  int v563;
  NSObject *v564;
  os_log_type_t v565;
  NSObject *v566;
  uint64_t v567;
  int v568;
  int v569;
  char *v570;
  _BOOL4 v571;
  NSObject *v572;
  uint64_t v573;
  int v574;
  int v575;
  NSObject *v576;
  uint64_t v577;
  int v578;
  int v579;
  NSObject *v580;
  os_log_type_t v581;
  char *v582;
  NSObject *v583;
  os_log_type_t v584;
  _BOOL4 v585;
  NSObject *v586;
  uint64_t v587;
  int v588;
  int v589;
  const char *v590;
  _BOOL4 v591;
  uint64_t v592;
  char *v593;
  NSObject *v594;
  os_log_type_t v595;
  const char *v596;
  NSObject *v597;
  uint64_t v598;
  int v599;
  int v600;
  NSObject *v601;
  os_log_type_t v602;
  char *v603;
  NSObject *v604;
  os_log_type_t v605;
  _BOOL4 v606;
  char *v607;
  _BOOL4 v608;
  const char *v609;
  _BOOL4 v610;
  NSObject *v611;
  os_log_type_t v612;
  unsigned __int16 *v613;
  uint64_t v614;
  _QWORD *v615;
  char *v616;
  uint64_t *v617;
  int v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  _QWORD *v622;
  _QWORD *v623;
  _QWORD *v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  size_t v628;
  uint64_t v629;
  uint64_t v630;
  size_t __len;
  char v632;
  uint64_t v633;
  uint64_t *v634;
  os_log_type_t type[8];
  os_log_type_t *v636;
  _BYTE buf[12];
  __int16 v638;
  _BYTE v639[20];
  _BYTE v640[10];
  _BYTE v641[18];
  size_t v642;
  __int128 v643;
  uint64_t (*v644)(uint64_t, uint64_t);
  void *v645;
  __int128 *v646;
  __int128 v647;
  uint64_t v648;
  int v649;
  uint64_t v650;

  v650 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
    v161 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v643) = 16;
    LOBYTE(v647) = 0;
    if (!__nwlog_fault(v161, &v643, &v647))
      goto LABEL_896;
    if (v643 == 17)
    {
      v162 = __nwlog_obj();
      v163 = v643;
      if (!os_log_type_enabled(v162, (os_log_type_t)v643))
        goto LABEL_896;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v164 = "%{public}s called with null frame";
    }
    else if ((_BYTE)v647)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v162 = __nwlog_obj();
      v163 = v643;
      v188 = os_log_type_enabled(v162, (os_log_type_t)v643);
      if (backtrace_string)
      {
        if (v188)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
          v638 = 2082;
          *(_QWORD *)v639 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v162, v163, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_896:
        if (!v161)
          return;
        goto LABEL_897;
      }
      if (!v188)
        goto LABEL_896;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v164 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v162 = __nwlog_obj();
      v163 = v643;
      if (!os_log_type_enabled(v162, (os_log_type_t)v643))
        goto LABEL_896;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v164 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    goto LABEL_895;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
    v161 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v643) = 16;
    LOBYTE(v647) = 0;
    if (!__nwlog_fault(v161, &v643, &v647))
      goto LABEL_896;
    if (v643 != 17)
    {
      if (!(_BYTE)v647)
      {
        v162 = __nwlog_obj();
        v163 = v643;
        if (!os_log_type_enabled(v162, (os_log_type_t)v643))
          goto LABEL_896;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
        v164 = "%{public}s called with null context, backtrace limit exceeded";
        goto LABEL_895;
      }
      v189 = (char *)__nw_create_backtrace_string();
      v162 = __nwlog_obj();
      v163 = v643;
      v190 = os_log_type_enabled(v162, (os_log_type_t)v643);
      if (!v189)
      {
        if (!v190)
          goto LABEL_896;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
        v164 = "%{public}s called with null context, no backtrace";
        goto LABEL_895;
      }
      if (!v190)
        goto LABEL_843;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v638 = 2082;
      *(_QWORD *)v639 = v189;
      v191 = "%{public}s called with null context, dumping backtrace:%{public}s";
      goto LABEL_842;
    }
    v162 = __nwlog_obj();
    v163 = v643;
    if (!os_log_type_enabled(v162, (os_log_type_t)v643))
      goto LABEL_896;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
    v164 = "%{public}s called with null context";
LABEL_895:
    _os_log_impl(&dword_182FBE000, v162, v163, v164, buf, 0xCu);
    goto LABEL_896;
  }
  v4 = *((_WORD *)a1 + 102);
  if ((v4 & 4) != 0)
    v5 = (char *)a1 + 208;
  else
    v5 = 0;
  if ((v4 & 4) == 0)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
    v161 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v643) = 16;
    LOBYTE(v647) = 0;
    if (!__nwlog_fault(v161, &v643, &v647))
      goto LABEL_896;
    if (v643 != 17)
    {
      if (!(_BYTE)v647)
      {
        v162 = __nwlog_obj();
        v163 = v643;
        if (!os_log_type_enabled(v162, (os_log_type_t)v643))
          goto LABEL_896;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
        v164 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_895;
      }
      v189 = (char *)__nw_create_backtrace_string();
      v162 = __nwlog_obj();
      v163 = v643;
      v192 = os_log_type_enabled(v162, (os_log_type_t)v643);
      if (!v189)
      {
        if (!v192)
          goto LABEL_896;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
        v164 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_895;
      }
      if (!v192)
        goto LABEL_843;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v638 = 2082;
      *(_QWORD *)v639 = v189;
      v191 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
      goto LABEL_842;
    }
    v162 = __nwlog_obj();
    v163 = v643;
    if (!os_log_type_enabled(v162, (os_log_type_t)v643))
      goto LABEL_896;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
    v164 = "%{public}s called with null metadata";
    goto LABEL_895;
  }
  v6 = *(_QWORD *)v5;
  if (!*(_QWORD *)v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
    v161 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v643) = 16;
    LOBYTE(v647) = 0;
    if (!__nwlog_fault(v161, &v643, &v647))
      goto LABEL_896;
    if (v643 == 17)
    {
      v162 = __nwlog_obj();
      v163 = v643;
      if (!os_log_type_enabled(v162, (os_log_type_t)v643))
        goto LABEL_896;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v164 = "%{public}s called with null http1_connection";
      goto LABEL_895;
    }
    if (!(_BYTE)v647)
    {
      v162 = __nwlog_obj();
      v163 = v643;
      if (!os_log_type_enabled(v162, (os_log_type_t)v643))
        goto LABEL_896;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v164 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_895;
    }
    v189 = (char *)__nw_create_backtrace_string();
    v162 = __nwlog_obj();
    v163 = v643;
    v193 = os_log_type_enabled(v162, (os_log_type_t)v643);
    if (!v189)
    {
      if (!v193)
        goto LABEL_896;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v164 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_895;
    }
    if (!v193)
      goto LABEL_843;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
    v638 = 2082;
    *(_QWORD *)v639 = v189;
    v191 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_842:
    _os_log_impl(&dword_182FBE000, v162, v163, v191, buf, 0x16u);
    goto LABEL_843;
  }
  v7 = a2;
  v8 = &unk_1ECD84000;
  if ((*(_BYTE *)(v6 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v165 = __nwlog_obj();
      if (os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG))
      {
        v166 = *(_QWORD *)(v6 + 488);
        v167 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
        v168 = *(_DWORD *)(v6 + 860);
        if (v166)
          LODWORD(v166) = *(_DWORD *)(v166 + 424);
        *(_DWORD *)buf = 136448002;
        *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
        v638 = 2082;
        *(_QWORD *)v639 = v6 + 74;
        if (v7)
          v169 = "true";
        else
          v169 = "false";
        *(_WORD *)&v639[8] = 2080;
        *(_QWORD *)&v639[10] = " ";
        *(_WORD *)&v639[18] = 1024;
        *(_DWORD *)v640 = v167;
        *(_WORD *)&v640[4] = 1024;
        *(_DWORD *)&v640[6] = v168;
        *(_WORD *)v641 = 1024;
        *(_DWORD *)&v641[2] = v166;
        *(_WORD *)&v641[6] = 2048;
        *(_QWORD *)&v641[8] = a1;
        *(_WORD *)&v641[16] = 2080;
        v642 = (size_t)v169;
        _os_log_impl(&dword_182FBE000, v165, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing output frame %p, success: %s", buf, 0x46u);
      }
    }
  }
  v9 = *((_QWORD *)a1 + 2);
  v10 = (_QWORD *)*((_QWORD *)a1 + 3);
  if (v9)
  {
    *(_QWORD *)(v9 + 24) = v10;
    v10 = (_QWORD *)*((_QWORD *)a1 + 3);
  }
  else
  {
    *(_QWORD *)(v6 + 688) = v10;
  }
  *v10 = v9;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  v11 = *(_QWORD *)(v6 + 488);
  v627 = v6;
  if (!v11)
  {
LABEL_16:
    if (v7)
      goto LABEL_17;
    goto LABEL_29;
  }
  if ((*(_WORD *)(v11 + 428) & 0x80) == 0)
  {
    LODWORD(v11) = 0;
    goto LABEL_16;
  }
  if ((*(_BYTE *)(v6 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v198 = __nwlog_obj();
      v199 = os_log_type_enabled(v198, OS_LOG_TYPE_DEBUG);
      v11 = *(_QWORD *)(v6 + 488);
      if (v199)
      {
        v200 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
        v201 = *(_DWORD *)(v6 + 860);
        if (v11)
          LODWORD(v11) = *(_DWORD *)(v11 + 424);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
        v638 = 2082;
        *(_QWORD *)v639 = v6 + 74;
        *(_WORD *)&v639[8] = 2080;
        *(_QWORD *)&v639[10] = " ";
        *(_WORD *)&v639[18] = 1024;
        *(_DWORD *)v640 = v200;
        *(_WORD *)&v640[4] = 1024;
        *(_DWORD *)&v640[6] = v201;
        *(_WORD *)v641 = 1024;
        *(_DWORD *)&v641[2] = v11;
        *(_WORD *)&v641[6] = 1024;
        *(_DWORD *)&v641[8] = v7;
        _os_log_impl(&dword_182FBE000, v198, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> initial outbound frame finalized, success %u", buf, 0x38u);
        v11 = *(_QWORD *)(v6 + 488);
      }
    }
  }
  *(_WORD *)(v11 + 428) &= ~0x80u;
  LODWORD(v11) = 1;
  if (v7)
  {
LABEL_17:
    v12 = *(_QWORD *)(v6 + 488);
    if (v12)
    {
      v618 = v11;
      v13 = *(_WORD *)(v12 + 428);
      if ((v5[8] & 2) != 0 && (v13 & 2) != 0)
      {
        v14 = *((_DWORD *)a1 + 13);
        if (!v14 || v14 == *((_DWORD *)a1 + 14) + *((_DWORD *)a1 + 15))
        {
          v15 = *((_QWORD *)a1 + 8);
          if (v15)
          {
            if ((*(_BYTE *)(v15 + 66) & 0x40) != 0)
              nw_protocol_output_finished((_QWORD *)v12, *(_QWORD *)(v12 + 48));
          }
        }
        *((_QWORD *)a1 + 10) = 0;
        *((_QWORD *)a1 + 11) = 0;
        nw_frame_cache_return_frame(v6 + 696, (uint64_t)a1);
        return;
      }
      if ((v13 & 2) != 0)
      {
        if (!(*(_BYTE *)(v6 + 158) & 1 | (gLogDatapath == 0)))
        {
          v23 = __nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            v24 = *(_QWORD *)(v6 + 488);
            v25 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
            v26 = *(_DWORD *)(v6 + 860);
            if (v24)
              LODWORD(v24) = *(_DWORD *)(v24 + 424);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
            v638 = 2082;
            *(_QWORD *)v639 = v6 + 74;
            *(_WORD *)&v639[8] = 2080;
            *(_QWORD *)&v639[10] = " ";
            *(_WORD *)&v639[18] = 1024;
            *(_DWORD *)v640 = v25;
            *(_WORD *)&v640[4] = 1024;
            *(_DWORD *)&v640[6] = v26;
            *(_WORD *)v641 = 1024;
            *(_DWORD *)&v641[2] = v24;
            *(_WORD *)&v641[6] = 2048;
            *(_QWORD *)&v641[8] = a1;
            _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> outbound headers are already complete, sending contents of frame %p", buf, 0x3Cu);
          }
        }
        goto LABEL_399;
      }
      if (!(*(_BYTE *)(v6 + 158) & 1 | (gLogDatapath == 0)))
      {
        v509 = __nwlog_obj();
        v510 = os_log_type_enabled(v509, OS_LOG_TYPE_DEBUG);
        v12 = *(_QWORD *)(v6 + 488);
        if (v510)
        {
          v511 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
          v512 = *(_DWORD *)(v6 + 860);
          if (v12)
            v513 = *(_DWORD *)(v12 + 424);
          else
            v513 = 0;
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
          v638 = 2082;
          *(_QWORD *)v639 = v6 + 74;
          *(_WORD *)&v639[8] = 2080;
          *(_QWORD *)&v639[10] = " ";
          *(_WORD *)&v639[18] = 1024;
          *(_DWORD *)v640 = v511;
          *(_WORD *)&v640[4] = 1024;
          *(_DWORD *)&v640[6] = v512;
          *(_WORD *)v641 = 1024;
          *(_DWORD *)&v641[2] = v513;
          _os_log_impl(&dword_182FBE000, v509, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> sending outbound message", buf, 0x32u);
          v12 = *(_QWORD *)(v6 + 488);
        }
        if (!v12)
        {
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
          v538 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(v643) = 16;
          LOBYTE(v647) = 0;
          if (!__nwlog_fault(v538, &v643, &v647))
            goto LABEL_939;
          if (v643 == 17)
          {
            v539 = __nwlog_obj();
            v540 = v643;
            if (!os_log_type_enabled(v539, (os_log_type_t)v643))
              goto LABEL_939;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
            v541 = "%{public}s called with null http1_stream";
          }
          else
          {
            if ((_BYTE)v647)
            {
              v542 = (char *)__nw_create_backtrace_string();
              v543 = __nwlog_obj();
              v544 = v643;
              v545 = os_log_type_enabled(v543, (os_log_type_t)v643);
              if (v542)
              {
                if (v545)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
                  v638 = 2082;
                  *(_QWORD *)v639 = v542;
                  _os_log_impl(&dword_182FBE000, v543, v544, "%{public}s called with null http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v542);
                goto LABEL_939;
              }
              if (!v545)
              {
LABEL_939:
                if (v538)
                  free(v538);
                goto LABEL_941;
              }
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
              v541 = "%{public}s called with null http1_stream, no backtrace";
              v546 = v543;
              v547 = v544;
LABEL_938:
              _os_log_impl(&dword_182FBE000, v546, v547, v541, buf, 0xCu);
              goto LABEL_939;
            }
            v539 = __nwlog_obj();
            v540 = v643;
            if (!os_log_type_enabled(v539, (os_log_type_t)v643))
              goto LABEL_939;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
            v541 = "%{public}s called with null http1_stream, backtrace limit exceeded";
          }
          v546 = v539;
          v547 = v540;
          goto LABEL_938;
        }
      }
      if (nw_protocol_copy_http_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
      v17 = (id)nw_protocol_copy_http_definition_http_definition;
      v18 = (void **)(v12 + 384);
      v19 = *(_QWORD *)(v12 + 384);
      v20 = nw_frame_copy_metadata_for_protocol((uint64_t)a1, (uint64_t)v17);
      v21 = v20;
      if (v19)
      {
        v643 = 0uLL;
        nw_protocol_metadata_copy_identifier(v20, &v643);
        v647 = 0uLL;
        nw_protocol_metadata_copy_identifier(*v18, &v647);
        if (v647 == v643)
        {
          if (v21)
            os_release(v21);
          v22 = 1;
LABEL_178:
          if (v17)
            os_release(v17);
          if ((v22 & 1) == 0)
          {
LABEL_941:
            if ((*(_BYTE *)(v6 + 158) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v548 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                v549 = *(_QWORD *)(v6 + 488);
                v550 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
                v551 = *(_DWORD *)(v6 + 860);
                if (v549)
                  LODWORD(v549) = *(_DWORD *)(v549 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
                v638 = 2082;
                *(_QWORD *)v639 = v6 + 74;
                *(_WORD *)&v639[8] = 2080;
                *(_QWORD *)&v639[10] = " ";
                *(_WORD *)&v639[18] = 1024;
                *(_DWORD *)v640 = v550;
                *(_WORD *)&v640[4] = 1024;
                *(_DWORD *)&v640[6] = v551;
                *(_WORD *)v641 = 1024;
                *(_DWORD *)&v641[2] = v549;
                _os_log_impl(&dword_182FBE000, v548, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> invalid message supplied to http1_connection, dropping", buf, 0x32u);
              }
            }
            if ((*((_WORD *)a1 + 102) & 0x100) == 0
              || !g_channel_check_validity
              || g_channel_check_validity(a1, *((_QWORD *)a1 + 11)))
            {
              v552 = (void *)*((_QWORD *)a1 + 14);
              if (v552)
                free(v552);
            }
            nw_frame_reset((uint64_t)a1, 0, 0, 0, 0);
            os_release(a1);
            v553 = *(_QWORD *)(v6 + 488);
            if (v553)
              v554 = *(_QWORD **)(v553 + 48);
            else
              v554 = 0;
            nw_protocol_error(v554, v553);
            v555 = *(_QWORD *)(v6 + 488);
            if (v555)
              nw_protocol_disconnected(*(_QWORD **)(v555 + 48), v555);
            else
              nw_protocol_disconnected(0, 0);
            return;
          }
          *(_WORD *)(*(_QWORD *)(v6 + 488) + 428) |= 0x2000u;
          v83 = *((_DWORD *)a1 + 13);
          if ((!v83 || v83 == *((_DWORD *)a1 + 14) + *((_DWORD *)a1 + 15))
            && (v84 = *((_QWORD *)a1 + 8)) != 0
            && (*(_BYTE *)(v84 + 66) & 0x40) != 0)
          {
            v85 = 1;
            if ((*(_BYTE *)(v6 + 158) & 1) == 0 && gLogDatapath)
            {
              v572 = __nwlog_obj();
              if (os_log_type_enabled(v572, OS_LOG_TYPE_DEBUG))
              {
                v573 = *(_QWORD *)(v627 + 488);
                v574 = *(_DWORD *)(*(_QWORD *)(v627 + 480) + 372);
                v575 = *(_DWORD *)(v627 + 860);
                if (v573)
                  LODWORD(v573) = *(_DWORD *)(v573 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
                v638 = 2082;
                *(_QWORD *)v639 = v627 + 74;
                *(_WORD *)&v639[8] = 2080;
                *(_QWORD *)&v639[10] = " ";
                *(_WORD *)&v639[18] = 1024;
                *(_DWORD *)v640 = v574;
                *(_WORD *)&v640[4] = 1024;
                *(_DWORD *)&v640[6] = v575;
                *(_WORD *)v641 = 1024;
                *(_DWORD *)&v641[2] = v573;
                _os_log_impl(&dword_182FBE000, v572, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> outbound message is headers only, setting complete for headers", buf, 0x32u);
              }
              v6 = v627;
              v86 = *(_QWORD *)(v627 + 488);
              if (!v86)
                goto LABEL_186;
            }
            else
            {
              v86 = *(_QWORD *)(v6 + 488);
              if (!v86)
                goto LABEL_186;
            }
          }
          else
          {
            v85 = 0;
            v86 = *(_QWORD *)(v6 + 488);
            if (!v86)
            {
LABEL_186:
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
              v87 = (char *)_os_log_send_and_compose_impl();
              LOBYTE(v643) = 16;
              LOBYTE(v647) = 0;
              if (!__nwlog_fault(v87, &v643, &v647))
                goto LABEL_1005;
              if (v643 == 17)
              {
                v88 = __nwlog_obj();
                v89 = v643;
                if (!os_log_type_enabled(v88, (os_log_type_t)v643))
                  goto LABEL_1005;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
                v90 = "%{public}s called with null http1_stream";
LABEL_1003:
                v580 = v88;
                v581 = v89;
LABEL_1004:
                _os_log_impl(&dword_182FBE000, v580, v581, v90, buf, 0xCu);
                goto LABEL_1005;
              }
              if (!(_BYTE)v647)
              {
                v88 = __nwlog_obj();
                v89 = v643;
                if (!os_log_type_enabled(v88, (os_log_type_t)v643))
                  goto LABEL_1005;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
                v90 = "%{public}s called with null http1_stream, backtrace limit exceeded";
                goto LABEL_1003;
              }
              v532 = (char *)__nw_create_backtrace_string();
              v533 = __nwlog_obj();
              v534 = v643;
              v535 = os_log_type_enabled(v533, (os_log_type_t)v643);
              if (v532)
              {
                if (v535)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
                  v638 = 2082;
                  *(_QWORD *)v639 = v532;
                  _os_log_impl(&dword_182FBE000, v533, v534, "%{public}s called with null http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v532);
                goto LABEL_1005;
              }
              if (!v535)
                goto LABEL_1005;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
              v90 = "%{public}s called with null http1_stream, no backtrace";
              goto LABEL_1032;
            }
          }
          if (!*(_QWORD *)(v86 + 248))
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
            v87 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(v643) = 16;
            LOBYTE(v647) = 0;
            if (!__nwlog_fault(v87, &v643, &v647))
              goto LABEL_1005;
            if (v643 == 17)
            {
              v88 = __nwlog_obj();
              v89 = v643;
              if (!os_log_type_enabled(v88, (os_log_type_t)v643))
                goto LABEL_1005;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
              v90 = "%{public}s called with null http1_stream->protocol_http1";
              goto LABEL_1003;
            }
            if (!(_BYTE)v647)
            {
              v88 = __nwlog_obj();
              v89 = v643;
              if (!os_log_type_enabled(v88, (os_log_type_t)v643))
                goto LABEL_1005;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
              v90 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
              goto LABEL_1003;
            }
            v536 = (char *)__nw_create_backtrace_string();
            v533 = __nwlog_obj();
            v534 = v643;
            v537 = os_log_type_enabled(v533, (os_log_type_t)v643);
            if (v536)
            {
              if (v537)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
                v638 = 2082;
                *(_QWORD *)v639 = v536;
                _os_log_impl(&dword_182FBE000, v533, v534, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v536);
              if (!v87)
                goto LABEL_1007;
              goto LABEL_1006;
            }
            if (!v537)
            {
LABEL_1005:
              if (!v87)
              {
LABEL_1007:
                v6 = v627;
                v8 = &unk_1ECD84000;
                goto LABEL_398;
              }
LABEL_1006:
              free(v87);
              goto LABEL_1007;
            }
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
            v90 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
LABEL_1032:
            v580 = v533;
            v581 = v534;
            goto LABEL_1004;
          }
          if (*(_QWORD *)(v86 + 256))
          {
            if ((*(_WORD *)(v86 + 428) & 2) != 0)
            {
              if ((*(_BYTE *)(v86 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v142 = __nwlog_obj();
                  if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
                  {
                    v143 = *(_QWORD *)(v86 + 256);
                    v144 = *(_DWORD *)(*(_QWORD *)(v86 + 248) + 372);
                    if (v143)
                      LODWORD(v143) = *(_DWORD *)(v143 + 860);
                    v145 = *(_DWORD *)(v86 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
                    v638 = 2082;
                    *(_QWORD *)v639 = v86 + 74;
                    *(_WORD *)&v639[8] = 2080;
                    *(_QWORD *)&v639[10] = " ";
                    *(_WORD *)&v639[18] = 1024;
                    *(_DWORD *)v640 = v144;
                    *(_WORD *)&v640[4] = 1024;
                    *(_DWORD *)&v640[6] = v143;
                    *(_WORD *)v641 = 1024;
                    *(_DWORD *)&v641[2] = v145;
                    _os_log_impl(&dword_182FBE000, v142, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> already sent, skipping", buf, 0x32u);
                    v6 = v627;
                  }
                }
              }
              goto LABEL_398;
            }
            v91 = *(void **)(v86 + 384);
            if (v91)
            {
              __len = 0;
              v92 = (char *)nw_http_metadata_legacy_serialize(v91, (uint64_t)&__len);
              v625 = v85;
              if ((*(_BYTE *)(v86 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v576 = __nwlog_obj();
                  if (os_log_type_enabled(v576, OS_LOG_TYPE_DEBUG))
                  {
                    v577 = *(_QWORD *)(v86 + 256);
                    v578 = *(_DWORD *)(*(_QWORD *)(v86 + 248) + 372);
                    if (v577)
                      LODWORD(v577) = *(_DWORD *)(v577 + 860);
                    v579 = *(_DWORD *)(v86 + 424);
                    *(_DWORD *)buf = 136448002;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
                    v638 = 2082;
                    *(_QWORD *)v639 = v86 + 74;
                    *(_WORD *)&v639[8] = 2080;
                    *(_QWORD *)&v639[10] = " ";
                    *(_WORD *)&v639[18] = 1024;
                    *(_DWORD *)v640 = v578;
                    *(_WORD *)&v640[4] = 1024;
                    *(_DWORD *)&v640[6] = v577;
                    *(_WORD *)v641 = 1024;
                    *(_DWORD *)&v641[2] = v579;
                    *(_WORD *)&v641[6] = 2048;
                    *(_QWORD *)&v641[8] = v92;
                    *(_WORD *)&v641[16] = 2048;
                    v642 = __len;
                    _os_log_impl(&dword_182FBE000, v576, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> got buffer %p of length %zu bytes", buf, 0x46u);
                    v6 = v627;
                  }
                }
              }
              v93 = __len;
              if (!v92 || !__len)
                goto LABEL_346;
              v630 = *(_QWORD *)(v86 + 256);
              v616 = v92;
              if (v630)
              {
                if ((_DWORD)__len)
                {
                  v94 = *(_QWORD *)(v630 + 32);
                  if (v94)
                  {
                    v614 = v86;
                    v628 = __len;
                    v95 = *(_QWORD *)(v86 + 256);
                    if ((*(_BYTE *)(v630 + 158) & 1) == 0)
                    {
                      if (gLogDatapath)
                      {
                        v597 = __nwlog_obj();
                        if (os_log_type_enabled(v597, OS_LOG_TYPE_DEBUG))
                        {
                          v598 = *(_QWORD *)(v630 + 488);
                          v599 = *(_DWORD *)(*(_QWORD *)(v630 + 480) + 372);
                          v600 = *(_DWORD *)(v630 + 860);
                          if (v598)
                            LODWORD(v598) = *(_DWORD *)(v598 + 424);
                          *(_DWORD *)buf = 136447746;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                          v638 = 2082;
                          *(_QWORD *)v639 = v630 + 74;
                          *(_WORD *)&v639[8] = 2080;
                          *(_QWORD *)&v639[10] = " ";
                          *(_WORD *)&v639[18] = 1024;
                          *(_DWORD *)v640 = v599;
                          *(_WORD *)&v640[4] = 1024;
                          *(_DWORD *)&v640[6] = v600;
                          *(_WORD *)v641 = 1024;
                          *(_DWORD *)&v641[2] = v598;
                          *(_WORD *)&v641[6] = 1024;
                          v93 = v628;
                          *(_DWORD *)&v641[8] = v628;
                          _os_log_impl(&dword_182FBE000, v597, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> sending %u bytes", buf, 0x38u);
                          v95 = v630;
                        }
                      }
                    }
                    v621 = v95 + 74;
                    v96 = v93;
                    v97 = v616;
LABEL_210:
                    *(_QWORD *)type = 0;
                    v636 = type;
                    v633 = 0;
                    v634 = &v633;
                    v101 = v94;
                    output_frames = nw_protocol_get_output_frames(v94, v95, 1, v93, 0xFFFFFFFFLL, (uint64_t)type);
                    v103 = *(_QWORD *)type;
                    if (*(_QWORD *)type)
                      v104 = output_frames == 0;
                    else
                      v104 = 1;
                    if (v104)
                    {
                      v152 = output_frames;
                      if (output_frames)
                      {
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                        v638 = 1024;
                        *(_DWORD *)v639 = v152;
                        v153 = (char *)_os_log_send_and_compose_impl();
                        LOBYTE(v647) = 16;
                        v632 = 0;
                        if (!__nwlog_fault(v153, &v647, &v632))
                          goto LABEL_336;
                        if (v647 != 17)
                        {
                          if (v632)
                          {
                            v157 = (char *)__nw_create_backtrace_string();
                            v158 = __nwlog_obj();
                            v159 = v647;
                            v160 = os_log_type_enabled(v158, (os_log_type_t)v647);
                            if (v157)
                            {
                              if (v160)
                              {
                                *(_DWORD *)buf = 136446722;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                v638 = 1024;
                                *(_DWORD *)v639 = v152;
                                *(_WORD *)&v639[4] = 2082;
                                *(_QWORD *)&v639[6] = v157;
                                _os_log_impl(&dword_182FBE000, v158, v159, "%{public}s output handler reported %u frames to write, but array is empty, dumping backtrace:%{public}s", buf, 0x1Cu);
                              }
                              free(v157);
                              goto LABEL_336;
                            }
                            if (!v160)
                              goto LABEL_336;
                            *(_DWORD *)buf = 136446466;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                            v638 = 1024;
                            *(_DWORD *)v639 = v152;
                            v156 = "%{public}s output handler reported %u frames to write, but array is empty, no backtrace";
                            v170 = v158;
                            v171 = v159;
                          }
                          else
                          {
                            v154 = __nwlog_obj();
                            v155 = v647;
                            if (!os_log_type_enabled(v154, (os_log_type_t)v647))
                              goto LABEL_336;
                            *(_DWORD *)buf = 136446466;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                            v638 = 1024;
                            *(_DWORD *)v639 = v152;
                            v156 = "%{public}s output handler reported %u frames to write, but array is empty, backtrace limit exceeded";
LABEL_334:
                            v170 = v154;
                            v171 = v155;
                          }
                          _os_log_impl(&dword_182FBE000, v170, v171, v156, buf, 0x12u);
                          goto LABEL_336;
                        }
                        v154 = __nwlog_obj();
                        v155 = v647;
                        if (os_log_type_enabled(v154, (os_log_type_t)v647))
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                          v638 = 1024;
                          *(_DWORD *)v639 = v152;
                          v156 = "%{public}s output handler reported %u frames to write, but array is empty";
                          goto LABEL_334;
                        }
LABEL_336:
                        if (v153)
                          free(v153);
                        LODWORD(v93) = v628;
                        v95 = v630;
                      }
                      v172 = *(_BYTE *)(v95 + 158);
                      v6 = v627;
                      v86 = v614;
                      if ((v172 & 1) == 0)
                      {
                        v173 = __nwlog_obj();
                        if (os_log_type_enabled(v173, OS_LOG_TYPE_DEBUG))
                        {
                          v174 = *(_QWORD *)(v630 + 488);
                          v175 = *(_DWORD *)(*(_QWORD *)(v630 + 480) + 372);
                          v176 = *(_DWORD *)(v630 + 860);
                          if (v174)
                            LODWORD(v174) = *(_DWORD *)(v174 + 424);
                          *(_DWORD *)buf = 136447746;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                          v638 = 2082;
                          *(_QWORD *)v639 = v621;
                          *(_WORD *)&v639[8] = 2080;
                          *(_QWORD *)&v639[10] = " ";
                          *(_WORD *)&v639[18] = 1024;
                          *(_DWORD *)v640 = v175;
                          *(_WORD *)&v640[4] = 1024;
                          *(_DWORD *)&v640[6] = v176;
                          *(_WORD *)v641 = 1024;
                          *(_DWORD *)&v641[2] = v174;
                          *(_WORD *)&v641[6] = 1024;
                          *(_DWORD *)&v641[8] = v93;
                          _os_log_impl(&dword_182FBE000, v173, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> output handler refused frame request for frames of length %u", buf, 0x38u);
                        }
                      }
                      LODWORD(v93) = v93 - v96;
LABEL_345:
                      v93 = v93;
                      v8 = &unk_1ECD84000;
                      v92 = v616;
                      if (__len == v93)
                      {
LABEL_346:
                        nw_http_transaction_metadata_increment_outbound_header_size(*(void **)(v86 + 352), v93);
                        v177 = *(_WORD *)(v86 + 428);
                        if ((v177 & 0x800) != 0)
                        {
                          *(_QWORD *)buf = 0;
                          nw::retained_ptr<nw_endpoint *>::operator=(v86 + 384, buf);
                        }
                        else
                        {
                          *(_WORD *)(v86 + 428) = v177 | 2;
                          if (v85)
                          {
                            *(_WORD *)(v86 + 428) = v177 | 0x402;
                            *(_WORD *)(*(_QWORD *)(v86 + 256) + 872) |= 0x20u;
                            nw_http_transaction_metadata_mark_outbound_message_end(*(void **)(v86 + 352));
                            if (*(_BYTE *)(v86 + 168))
                            {
                              if (*(_QWORD *)(v86 + 160) != *(_QWORD *)(v86 + 176))
                              {
                                if ((*(_BYTE *)(v86 + 158) & 1) == 0)
                                {
                                  v178 = __nwlog_obj();
                                  if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
                                  {
                                    v179 = *(_QWORD *)(v86 + 256);
                                    if (v179)
                                      LODWORD(v179) = *(_DWORD *)(v179 + 860);
                                    v180 = *(_DWORD *)(*(_QWORD *)(v86 + 248) + 372);
                                    v181 = *(_DWORD *)(v86 + 424);
                                    if (*(_BYTE *)(v86 + 168))
                                      v182 = *(_QWORD *)(v86 + 160);
                                    else
                                      v182 = -1;
                                    v202 = *(_QWORD *)(v86 + 176);
                                    *(_DWORD *)buf = 136448002;
                                    *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
                                    v638 = 2082;
                                    *(_QWORD *)v639 = v86 + 74;
                                    *(_WORD *)&v639[8] = 2080;
                                    *(_QWORD *)&v639[10] = " ";
                                    *(_WORD *)&v639[18] = 1024;
                                    *(_DWORD *)v640 = v180;
                                    *(_WORD *)&v640[4] = 1024;
                                    *(_DWORD *)&v640[6] = v179;
                                    *(_WORD *)v641 = 1024;
                                    *(_DWORD *)&v641[2] = v181;
                                    *(_WORD *)&v641[6] = 2048;
                                    *(_QWORD *)&v641[8] = v182;
                                    *(_WORD *)&v641[16] = 2048;
                                    v642 = v202;
                                    _os_log_impl(&dword_182FBE000, v178, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Content length header %llu does not equal body size %llu", buf, 0x46u);
                                  }
                                }
                                nw_protocol_error(*(_QWORD **)(v86 + 48), v86);
                                nw_protocol_disconnected(*(_QWORD **)(v86 + 48), v86);
                              }
                            }
                          }
                        }
                      }
                      else if ((*(_BYTE *)(v86 + 158) & 1) == 0)
                      {
                        v183 = __nwlog_obj();
                        if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
                        {
                          v184 = *(_QWORD *)(v86 + 256);
                          v185 = *(_DWORD *)(*(_QWORD *)(v86 + 248) + 372);
                          if (v184)
                            LODWORD(v184) = *(_DWORD *)(v184 + 860);
                          v186 = *(_DWORD *)(v86 + 424);
                          *(_DWORD *)buf = 136447746;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
                          v638 = 2082;
                          *(_QWORD *)v639 = v86 + 74;
                          *(_WORD *)&v639[8] = 2080;
                          *(_QWORD *)&v639[10] = " ";
                          *(_WORD *)&v639[18] = 1024;
                          *(_DWORD *)v640 = v185;
                          *(_WORD *)&v640[4] = 1024;
                          *(_DWORD *)&v640[6] = v184;
                          *(_WORD *)v641 = 1024;
                          *(_DWORD *)&v641[2] = v186;
                          *(_WORD *)&v641[6] = 2048;
                          *(_QWORD *)&v641[8] = __len;
                          _os_log_impl(&dword_182FBE000, v183, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> failed to send outbound headers of length %zu", buf, 0x3Cu);
                        }
                      }
                      if (v92)
                        free(v92);
                      goto LABEL_398;
                    }
                    while (1)
                    {
                      v105 = *(_QWORD *)(v103 + 32);
                      if (v105 || *(_QWORD *)(v103 + 40))
                      {
                        v106 = *(_QWORD *)(v103 + 112);
                        if (!v106)
                          goto LABEL_224;
                      }
                      else
                      {
                        v105 = 0;
                        v106 = *(_QWORD *)(v103 + 112);
                        if (!v106)
                          goto LABEL_224;
                      }
                      if ((*(_WORD *)(v103 + 204) & 0x100) != 0
                        && g_channel_check_validity
                        && !g_channel_check_validity(v103, *(_QWORD *)(v103 + 88)))
                      {
                        LODWORD(v106) = 0;
LABEL_224:
                        v108 = 0;
                        goto LABEL_225;
                      }
                      LODWORD(v106) = *(_DWORD *)(v103 + 52);
                      v107 = *(unsigned int *)(v103 + 56);
                      if ((_DWORD)v106)
                        LODWORD(v106) = v106 - (v107 + *(_DWORD *)(v103 + 60));
                      v108 = (void *)(*(_QWORD *)(v103 + 112) + v107);
LABEL_225:
                      if (v106 >= v96)
                        v109 = v96;
                      else
                        v109 = v106;
                      memcpy(v108, v97, v109);
                      v96 -= v109;
                      v97 += v109;
                      if (!nw_frame_claim(v103, v110, v109, 0))
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                        v638 = 1024;
                        *(_DWORD *)v639 = v109;
                        v115 = (char *)_os_log_send_and_compose_impl();
                        LOBYTE(v647) = 16;
                        v632 = 0;
                        if (!__nwlog_fault(v115, &v647, &v632))
                          goto LABEL_250;
                        if (v647 == 17)
                        {
                          v116 = __nwlog_obj();
                          v117 = v647;
                          if (os_log_type_enabled(v116, (os_log_type_t)v647))
                          {
                            *(_DWORD *)buf = 136446466;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                            v638 = 1024;
                            *(_DWORD *)v639 = v109;
                            v118 = v116;
                            v119 = v117;
                            v120 = "%{public}s claiming frame with %u bytes failed";
                            goto LABEL_249;
                          }
                          goto LABEL_250;
                        }
                        if (!v632)
                        {
                          v125 = __nwlog_obj();
                          v126 = v647;
                          if (!os_log_type_enabled(v125, (os_log_type_t)v647))
                            goto LABEL_250;
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                          v638 = 1024;
                          *(_DWORD *)v639 = v109;
                          v118 = v125;
                          v119 = v126;
                          v120 = "%{public}s claiming frame with %u bytes failed, backtrace limit exceeded";
LABEL_249:
                          _os_log_impl(&dword_182FBE000, v118, v119, v120, buf, 0x12u);
                          goto LABEL_250;
                        }
                        v121 = (char *)__nw_create_backtrace_string();
                        v122 = __nwlog_obj();
                        v123 = v647;
                        v124 = os_log_type_enabled(v122, (os_log_type_t)v647);
                        if (v121)
                        {
                          if (v124)
                          {
                            *(_DWORD *)buf = 136446722;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                            v638 = 1024;
                            *(_DWORD *)v639 = v109;
                            *(_WORD *)&v639[4] = 2082;
                            *(_QWORD *)&v639[6] = v121;
                            _os_log_impl(&dword_182FBE000, v122, v123, "%{public}s claiming frame with %u bytes failed, dumping backtrace:%{public}s", buf, 0x1Cu);
                          }
                          free(v121);
                          goto LABEL_250;
                        }
                        if (v124)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                          v638 = 1024;
                          *(_DWORD *)v639 = v109;
                          v118 = v122;
                          v119 = v123;
                          v120 = "%{public}s claiming frame with %u bytes failed, no backtrace";
                          goto LABEL_249;
                        }
LABEL_250:
                        if (v115)
                          free(v115);
                        v85 = v625;
LABEL_253:
                        v127 = (uint64_t *)v634[1];
                        v128 = *v127;
                        v95 = v630;
                        if (*v127)
                        {
                          nw_frame_set_metadata(*v127, 0, 0, v85);
                          if (v85)
                          {
                            if ((*(_BYTE *)(v630 + 158) & 1) == 0)
                            {
                              if (gLogDatapath)
                              {
                                v134 = __nwlog_obj();
                                if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
                                {
                                  v135 = *(_QWORD *)(v630 + 488);
                                  if (v135)
                                    LODWORD(v135) = *(_DWORD *)(v135 + 424);
                                  v95 = v630;
                                  v136 = *(_DWORD *)(*(_QWORD *)(v630 + 480) + 372);
                                  v137 = *(_DWORD *)(v630 + 860);
                                  *(_DWORD *)buf = 136447746;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                  v638 = 2082;
                                  *(_QWORD *)v639 = v621;
                                  *(_WORD *)&v639[8] = 2080;
                                  *(_QWORD *)&v639[10] = " ";
                                  *(_WORD *)&v639[18] = 1024;
                                  *(_DWORD *)v640 = v136;
                                  *(_WORD *)&v640[4] = 1024;
                                  *(_DWORD *)&v640[6] = v137;
                                  *(_WORD *)v641 = 1024;
                                  *(_DWORD *)&v641[2] = v135;
                                  *(_WORD *)&v641[6] = 2048;
                                  *(_QWORD *)&v641[8] = v128;
                                  _os_log_impl(&dword_182FBE000, v134, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> setting complete on last output frame %p", buf, 0x3Cu);
                                  v85 = v625;
                                }
                              }
                            }
                          }
                        }
                        v94 = v101;
                        nw_protocol_finalize_output_frames(v101, (uint64_t)&v633);
                        v129 = *(_QWORD *)type;
                        v93 = v628;
                        if (*(_QWORD *)type)
                        {
                          *(_QWORD *)&v647 = 0;
                          *((_QWORD *)&v647 + 1) = &v647;
                          v649 = 0;
                          v648 = 0x2000000000;
                          *(_QWORD *)&v643 = MEMORY[0x1E0C809B0];
                          *((_QWORD *)&v643 + 1) = 0x40000000;
                          v644 = ___ZL30nw_http1_connection_send_bytesP19nw_http1_connectionPhjb_block_invoke;
                          v645 = &unk_1E14A1890;
                          v646 = &v647;
                          do
                          {
                            if (!v129)
                              break;
                            v130 = *(_QWORD *)(v129 + 32);
                            v131 = ((uint64_t (*)(__int128 *))v644)(&v643);
                            v129 = v130;
                          }
                          while ((v131 & 1) != 0);
                          v95 = v630;
                          if ((*(_BYTE *)(v630 + 158) & 1) == 0)
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            v132 = gLogObj;
                            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                            {
                              v133 = *(_QWORD *)(v630 + 488);
                              if (v133)
                                LODWORD(v133) = *(_DWORD *)(v133 + 424);
                              v98 = *(_DWORD *)(*(_QWORD *)(v630 + 480) + 372);
                              v99 = *(_DWORD *)(v630 + 860);
                              v100 = *(_DWORD *)(*((_QWORD *)&v647 + 1) + 24);
                              *(_DWORD *)buf = 136447746;
                              *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                              v638 = 2082;
                              *(_QWORD *)v639 = v621;
                              *(_WORD *)&v639[8] = 2080;
                              *(_QWORD *)&v639[10] = " ";
                              *(_WORD *)&v639[18] = 1024;
                              *(_DWORD *)v640 = v98;
                              *(_WORD *)&v640[4] = 1024;
                              *(_DWORD *)&v640[6] = v99;
                              *(_WORD *)v641 = 1024;
                              *(_DWORD *)&v641[2] = v133;
                              *(_WORD *)&v641[6] = 1024;
                              *(_DWORD *)&v641[8] = v100;
                              _os_log_impl(&dword_182FBE000, v132, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> failed to use %u frames, marking as failed", buf, 0x38u);
                            }
                          }
                          _Block_object_dispose(&v647, 8);
                        }
                        if (!v96)
                        {
                          v6 = v627;
                          v86 = v614;
                          goto LABEL_345;
                        }
                        goto LABEL_210;
                      }
                      nw_frame_collapse(v103);
                      nw_frame_unclaim(v103, v111, v109, 0);
                      v112 = *(_QWORD *)(v103 + 32);
                      v113 = *(_QWORD **)(v103 + 40);
                      if (v112)
                      {
                        *(_QWORD *)(v112 + 40) = v113;
                        v113 = *(_QWORD **)(v103 + 40);
                      }
                      else
                      {
                        v636 = *(os_log_type_t **)(v103 + 40);
                      }
                      *v113 = v112;
                      v114 = v634;
                      *(_QWORD *)(v103 + 32) = 0;
                      *(_QWORD *)(v103 + 40) = v114;
                      *v114 = v103;
                      v634 = (uint64_t *)(v103 + 32);
                      if (v105)
                      {
                        v103 = v105;
                        if (v96)
                          continue;
                      }
                      goto LABEL_253;
                    }
                  }
                  v592 = v86;
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                  v593 = (char *)_os_log_send_and_compose_impl();
                  LOBYTE(v643) = 16;
                  LOBYTE(v647) = 0;
                  if (__nwlog_fault(v593, &v643, &v647))
                  {
                    if (v643 == 17)
                    {
                      v594 = __nwlog_obj();
                      v595 = v643;
                      if (!os_log_type_enabled(v594, (os_log_type_t)v643))
                        goto LABEL_1089;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                      v596 = "%{public}s called with null output_handler";
                      goto LABEL_1087;
                    }
                    if (!(_BYTE)v647)
                    {
                      v594 = __nwlog_obj();
                      v595 = v643;
                      if (!os_log_type_enabled(v594, (os_log_type_t)v643))
                        goto LABEL_1089;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                      v596 = "%{public}s called with null output_handler, backtrace limit exceeded";
                      goto LABEL_1087;
                    }
                    v607 = (char *)__nw_create_backtrace_string();
                    v604 = __nwlog_obj();
                    v605 = v643;
                    v610 = os_log_type_enabled(v604, (os_log_type_t)v643);
                    if (v607)
                    {
                      if (!v610)
                        goto LABEL_1073;
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                      v638 = 2082;
                      *(_QWORD *)v639 = v607;
                      v609 = "%{public}s called with null output_handler, dumping backtrace:%{public}s";
LABEL_1072:
                      _os_log_impl(&dword_182FBE000, v604, v605, v609, buf, 0x16u);
LABEL_1073:
                      free(v607);
                      if (!v593)
                        goto LABEL_1091;
                      goto LABEL_1090;
                    }
                    if (v610)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                      v596 = "%{public}s called with null output_handler, no backtrace";
                      goto LABEL_1098;
                    }
                  }
LABEL_1089:
                  if (!v593)
                  {
LABEL_1091:
                    LODWORD(v93) = 0;
                    v6 = v627;
                    v86 = v592;
                    v85 = v625;
                    goto LABEL_345;
                  }
LABEL_1090:
                  free(v593);
                  goto LABEL_1091;
                }
                v592 = v86;
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                v593 = (char *)_os_log_send_and_compose_impl();
                LOBYTE(v643) = 16;
                LOBYTE(v647) = 0;
                if (!__nwlog_fault(v593, &v643, &v647))
                  goto LABEL_1089;
                if (v643 == 17)
                {
                  v594 = __nwlog_obj();
                  v595 = v643;
                  if (!os_log_type_enabled(v594, (os_log_type_t)v643))
                    goto LABEL_1089;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                  v596 = "%{public}s called with null length";
                  goto LABEL_1087;
                }
                if (!(_BYTE)v647)
                {
                  v594 = __nwlog_obj();
                  v595 = v643;
                  if (!os_log_type_enabled(v594, (os_log_type_t)v643))
                    goto LABEL_1089;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                  v596 = "%{public}s called with null length, backtrace limit exceeded";
                  goto LABEL_1087;
                }
                v607 = (char *)__nw_create_backtrace_string();
                v604 = __nwlog_obj();
                v605 = v643;
                v608 = os_log_type_enabled(v604, (os_log_type_t)v643);
                if (v607)
                {
                  if (!v608)
                    goto LABEL_1073;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                  v638 = 2082;
                  *(_QWORD *)v639 = v607;
                  v609 = "%{public}s called with null length, dumping backtrace:%{public}s";
                  goto LABEL_1072;
                }
                if (!v608)
                  goto LABEL_1089;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                v596 = "%{public}s called with null length, no backtrace";
              }
              else
              {
                v592 = v86;
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                v593 = (char *)_os_log_send_and_compose_impl();
                LOBYTE(v643) = 16;
                LOBYTE(v647) = 0;
                if (!__nwlog_fault(v593, &v643, &v647))
                  goto LABEL_1089;
                if (v643 == 17)
                {
                  v594 = __nwlog_obj();
                  v595 = v643;
                  if (!os_log_type_enabled(v594, (os_log_type_t)v643))
                    goto LABEL_1089;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                  v596 = "%{public}s called with null http1_connection";
LABEL_1087:
                  v611 = v594;
                  v612 = v595;
LABEL_1088:
                  _os_log_impl(&dword_182FBE000, v611, v612, v596, buf, 0xCu);
                  goto LABEL_1089;
                }
                if (!(_BYTE)v647)
                {
                  v594 = __nwlog_obj();
                  v595 = v643;
                  if (!os_log_type_enabled(v594, (os_log_type_t)v643))
                    goto LABEL_1089;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                  v596 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                  goto LABEL_1087;
                }
                v603 = (char *)__nw_create_backtrace_string();
                v604 = __nwlog_obj();
                v605 = v643;
                v606 = os_log_type_enabled(v604, (os_log_type_t)v643);
                if (v603)
                {
                  if (v606)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                    v638 = 2082;
                    *(_QWORD *)v639 = v603;
                    _os_log_impl(&dword_182FBE000, v604, v605, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v603);
                  goto LABEL_1089;
                }
                if (!v606)
                  goto LABEL_1089;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                v596 = "%{public}s called with null http1_connection, no backtrace";
              }
LABEL_1098:
              v611 = v604;
              v612 = v605;
              goto LABEL_1088;
            }
LABEL_398:
            if (!nw_frame_unclaimed_length(a1))
            {
              *((_QWORD *)a1 + 10) = 0;
              *((_QWORD *)a1 + 11) = 0;
              nw_frame_cache_return_frame(v6 + 696, (uint64_t)a1);
              goto LABEL_777;
            }
LABEL_399:
            if ((*(_BYTE *)(v6 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                v505 = __nwlog_obj();
                if (os_log_type_enabled(v505, OS_LOG_TYPE_DEBUG))
                {
                  v506 = *(_QWORD *)(v6 + 488);
                  v507 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
                  v508 = *(_DWORD *)(v6 + 860);
                  if (v506)
                    LODWORD(v506) = *(_DWORD *)(v506 + 424);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_enqueue_outbound_frame";
                  v638 = 2082;
                  *(_QWORD *)v639 = v6 + 74;
                  *(_WORD *)&v639[8] = 2080;
                  *(_QWORD *)&v639[10] = " ";
                  *(_WORD *)&v639[18] = 1024;
                  *(_DWORD *)v640 = v507;
                  *(_WORD *)&v640[4] = 1024;
                  *(_DWORD *)&v640[6] = v508;
                  *(_WORD *)v641 = 1024;
                  *(_DWORD *)&v641[2] = v506;
                  *(_WORD *)&v641[6] = 2048;
                  *(_QWORD *)&v641[8] = a1;
                  _os_log_impl(&dword_182FBE000, v505, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> enqueuing outbound frame %p", buf, 0x3Cu);
                  v6 = v627;
                }
              }
            }
            *((_QWORD *)a1 + 4) = 0;
            v203 = *(_QWORD **)(v6 + 656);
            *((_QWORD *)a1 + 5) = v203;
            *v203 = a1;
            *(_QWORD *)(v6 + 656) = (char *)a1 + 32;
            if ((*(_WORD *)(*(_QWORD *)(v6 + 488) + 428) & 2) == 0)
              goto LABEL_777;
            if ((*(_BYTE *)(v6 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                v522 = __nwlog_obj();
                if (os_log_type_enabled(v522, OS_LOG_TYPE_DEBUG))
                {
                  v523 = *(_QWORD *)(v6 + 488);
                  v524 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
                  v525 = *(_DWORD *)(v6 + 860);
                  if (v523)
                    LODWORD(v523) = *(_DWORD *)(v523 + 424);
                  *(_DWORD *)buf = 136447490;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                  v638 = 2082;
                  *(_QWORD *)v639 = v6 + 74;
                  *(_WORD *)&v639[8] = 2080;
                  *(_QWORD *)&v639[10] = " ";
                  *(_WORD *)&v639[18] = 1024;
                  *(_DWORD *)v640 = v524;
                  *(_WORD *)&v640[4] = 1024;
                  *(_DWORD *)&v640[6] = v525;
                  *(_WORD *)v641 = 1024;
                  *(_DWORD *)&v641[2] = v523;
                  _os_log_impl(&dword_182FBE000, v522, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> draining pending outbound frames", buf, 0x32u);
                  v6 = v627;
                }
              }
            }
            if (!*(_QWORD *)(v6 + 480))
            {
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
              v518 = (char *)_os_log_send_and_compose_impl();
              LOBYTE(v643) = 16;
              LOBYTE(v647) = 0;
              if (!__nwlog_fault(v518, &v643, &v647))
                goto LABEL_975;
              if (v643 == 17)
              {
                v519 = __nwlog_obj();
                v520 = v643;
                if (os_log_type_enabled(v519, (os_log_type_t)v643))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                  v521 = "%{public}s called with null http1_connection->protocol_http1";
                  goto LABEL_973;
                }
                goto LABEL_975;
              }
              if (!(_BYTE)v647)
              {
                v519 = __nwlog_obj();
                v520 = v643;
                if (os_log_type_enabled(v519, (os_log_type_t)v643))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                  v521 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                  goto LABEL_973;
                }
                goto LABEL_975;
              }
              v526 = (char *)__nw_create_backtrace_string();
              v527 = __nwlog_obj();
              v528 = v643;
              v529 = os_log_type_enabled(v527, (os_log_type_t)v643);
              if (v526)
              {
                if (v529)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                  v638 = 2082;
                  *(_QWORD *)v639 = v526;
                  v530 = "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s";
                  goto LABEL_906;
                }
                goto LABEL_907;
              }
              if (!v529)
                goto LABEL_975;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
              v521 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
              goto LABEL_1012;
            }
            if (!*(_QWORD *)(v6 + 488))
            {
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
              v518 = (char *)_os_log_send_and_compose_impl();
              LOBYTE(v643) = 16;
              LOBYTE(v647) = 0;
              if (!__nwlog_fault(v518, &v643, &v647))
                goto LABEL_975;
              if (v643 == 17)
              {
                v519 = __nwlog_obj();
                v520 = v643;
                if (os_log_type_enabled(v519, (os_log_type_t)v643))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                  v521 = "%{public}s called with null http1_connection->current_stream";
                  goto LABEL_973;
                }
                goto LABEL_975;
              }
              if (!(_BYTE)v647)
              {
                v519 = __nwlog_obj();
                v520 = v643;
                if (!os_log_type_enabled(v519, (os_log_type_t)v643))
                  goto LABEL_975;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                v521 = "%{public}s called with null http1_connection->current_stream, backtrace limit exceeded";
                goto LABEL_973;
              }
              v526 = (char *)__nw_create_backtrace_string();
              v527 = __nwlog_obj();
              v528 = v643;
              v531 = os_log_type_enabled(v527, (os_log_type_t)v643);
              if (v526)
              {
                if (v531)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                  v638 = 2082;
                  *(_QWORD *)v639 = v526;
                  v530 = "%{public}s called with null http1_connection->current_stream, dumping backtrace:%{public}s";
                  goto LABEL_906;
                }
LABEL_907:
                free(v526);
                goto LABEL_975;
              }
              if (!v531)
                goto LABEL_975;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
              v521 = "%{public}s called with null http1_connection->current_stream, no backtrace";
LABEL_1012:
              v564 = v527;
              v565 = v528;
LABEL_974:
              _os_log_impl(&dword_182FBE000, v564, v565, v521, buf, 0xCu);
              goto LABEL_975;
            }
            v204 = (uint64_t *)(v6 + 648);
            v205 = *(_QWORD *)(v6 + 648);
            if (!v205)
              goto LABEL_775;
            v615 = (_QWORD *)(v6 + 656);
            v613 = (unsigned __int16 *)(v6 + 872);
            v626 = v6 + 696;
            v629 = v6 + 74;
            v617 = (uint64_t *)(v6 + 648);
            while (2)
            {
              v206 = *(_QWORD *)(v205 + 32);
              v207 = *(_QWORD **)(v205 + 40);
              v208 = (_QWORD *)(v205 + 32);
              if (v206)
              {
                *(_QWORD *)(v206 + 40) = v207;
                v207 = *(_QWORD **)(v205 + 40);
              }
              else
              {
                *v615 = v207;
              }
              *v207 = v206;
              *v208 = 0;
              *(_QWORD *)(v205 + 40) = 0;
              LODWORD(__len) = 0;
              if (*(_QWORD *)(v205 + 112))
              {
                if ((*(_WORD *)(v205 + 204) & 0x100) != 0
                  && g_channel_check_validity
                  && (g_channel_check_validity(v205, *(_QWORD *)(v205 + 88)) & 1) == 0)
                {
                  v211 = 0;
                  LODWORD(__len) = 0;
                  if ((*(_BYTE *)(v6 + 158) & 1) != 0)
                    goto LABEL_422;
                }
                else
                {
                  v210 = *(_DWORD *)(v205 + 52);
                  v209 = *(unsigned int *)(v205 + 56);
                  if (v210)
                    v210 -= v209 + *(_DWORD *)(v205 + 60);
                  LODWORD(__len) = v210;
                  v211 = (char *)(*(_QWORD *)(v205 + 112) + v209);
                  if ((*(_BYTE *)(v6 + 158) & 1) != 0)
                  {
LABEL_422:
                    if (!v211 || !(_DWORD)__len)
                      goto LABEL_408;
                    if ((*(_WORD *)(*(_QWORD *)(v6 + 488) + 428) & 0x100) == 0)
                    {
LABEL_425:
                      if (nw_frame_is_metadata_complete(v205))
                      {
                        if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                        {
                          if (v8[1345])
                          {
                            v370 = __nwlog_obj();
                            if (os_log_type_enabled(v370, OS_LOG_TYPE_DEBUG))
                            {
                              v371 = *(_QWORD *)(v6 + 488);
                              if (v371)
                                LODWORD(v371) = *(_DWORD *)(v371 + 424);
                              v6 = v627;
                              v372 = *(_DWORD *)(*(_QWORD *)(v627 + 480) + 372);
                              v373 = *(_DWORD *)(v627 + 860);
                              *(_DWORD *)buf = 136447746;
                              *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                              v638 = 2082;
                              *(_QWORD *)v639 = v629;
                              *(_WORD *)&v639[8] = 2080;
                              *(_QWORD *)&v639[10] = " ";
                              *(_WORD *)&v639[18] = 1024;
                              *(_DWORD *)v640 = v372;
                              *(_WORD *)&v640[4] = 1024;
                              *(_DWORD *)&v640[6] = v373;
                              *(_WORD *)v641 = 1024;
                              *(_DWORD *)&v641[2] = v371;
                              *(_WORD *)&v641[6] = 2048;
                              *(_QWORD *)&v641[8] = v205;
                              _os_log_impl(&dword_182FBE000, v370, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> draining output frame %p, complete", buf, 0x3Cu);
                              v204 = v617;
                            }
                          }
                        }
                      }
                      v212 = __len;
                      is_metadata_complete = nw_frame_is_metadata_complete(v205);
                      v619 = v205;
                      if (v211)
                      {
                        if ((_DWORD)v212)
                        {
                          v214 = *(_QWORD *)(v6 + 32);
                          if (v214)
                          {
                            v215 = is_metadata_complete;
                            v622 = v208;
                            if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                            {
                              if (v8[1345])
                              {
                                v366 = __nwlog_obj();
                                if (os_log_type_enabled(v366, OS_LOG_TYPE_DEBUG))
                                {
                                  v367 = *(_QWORD *)(v6 + 488);
                                  if (v367)
                                    LODWORD(v367) = *(_DWORD *)(v367 + 424);
                                  v6 = v627;
                                  v368 = *(_DWORD *)(*(_QWORD *)(v627 + 480) + 372);
                                  v369 = *(_DWORD *)(v627 + 860);
                                  *(_DWORD *)buf = 136447746;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                  v638 = 2082;
                                  *(_QWORD *)v639 = v629;
                                  *(_WORD *)&v639[8] = 2080;
                                  *(_QWORD *)&v639[10] = " ";
                                  *(_WORD *)&v639[18] = 1024;
                                  *(_DWORD *)v640 = v368;
                                  *(_WORD *)&v640[4] = 1024;
                                  *(_DWORD *)&v640[6] = v369;
                                  *(_WORD *)v641 = 1024;
                                  *(_DWORD *)&v641[2] = v367;
                                  *(_WORD *)&v641[6] = 1024;
                                  *(_DWORD *)&v641[8] = v212;
                                  _os_log_impl(&dword_182FBE000, v366, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> sending %u bytes", buf, 0x38u);
                                }
                              }
                            }
                            v216 = v212;
LABEL_437:
                            *(_QWORD *)type = 0;
                            v636 = type;
                            v633 = 0;
                            v634 = &v633;
                            v221 = nw_protocol_get_output_frames(v214, v6, 1, v212, 0xFFFFFFFFLL, (uint64_t)type);
                            v222 = *(_QWORD *)type;
                            if (*(_QWORD *)type)
                              v223 = v221 == 0;
                            else
                              v223 = 1;
                            if (v223)
                            {
                              v263 = v221;
                              v204 = v617;
                              if (v221)
                              {
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                *(_DWORD *)buf = 136446466;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                v638 = 1024;
                                *(_DWORD *)v639 = v263;
                                v264 = (char *)_os_log_send_and_compose_impl();
                                LOBYTE(v647) = 16;
                                v632 = 0;
                                if (!__nwlog_fault(v264, &v647, &v632))
                                  goto LABEL_554;
                                if (v647 != 17)
                                {
                                  if (v632)
                                  {
                                    v290 = (char *)__nw_create_backtrace_string();
                                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                    networkd_settings_init();
                                    v291 = gLogObj;
                                    v292 = v647;
                                    v293 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v647);
                                    if (v290)
                                    {
                                      if (v293)
                                      {
                                        *(_DWORD *)buf = 136446722;
                                        *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                        v638 = 1024;
                                        *(_DWORD *)v639 = v263;
                                        *(_WORD *)&v639[4] = 2082;
                                        *(_QWORD *)&v639[6] = v290;
                                        _os_log_impl(&dword_182FBE000, v291, v292, "%{public}s output handler reported %u frames to write, but array is empty, dumping backtrace:%{public}s", buf, 0x1Cu);
                                      }
                                      free(v290);
                                      goto LABEL_554;
                                    }
                                    if (!v293)
                                      goto LABEL_554;
                                    *(_DWORD *)buf = 136446466;
                                    *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                    v638 = 1024;
                                    *(_DWORD *)v639 = v263;
                                    v267 = v291;
                                    v268 = v292;
                                    v269 = "%{public}s output handler reported %u frames to write, but array is empty, no backtrace";
                                  }
                                  else
                                  {
                                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                    networkd_settings_init();
                                    v303 = gLogObj;
                                    v304 = v647;
                                    if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v647))
                                      goto LABEL_554;
                                    *(_DWORD *)buf = 136446466;
                                    *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                    v638 = 1024;
                                    *(_DWORD *)v639 = v263;
                                    v267 = v303;
                                    v268 = v304;
                                    v269 = "%{public}s output handler reported %u frames to write, but array is empty, ba"
                                           "cktrace limit exceeded";
                                  }
LABEL_553:
                                  _os_log_impl(&dword_182FBE000, v267, v268, v269, buf, 0x12u);
                                  goto LABEL_554;
                                }
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                v265 = gLogObj;
                                v266 = v647;
                                if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v647))
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                  v638 = 1024;
                                  *(_DWORD *)v639 = v263;
                                  v267 = v265;
                                  v268 = v266;
                                  v269 = "%{public}s output handler reported %u frames to write, but array is empty";
                                  goto LABEL_553;
                                }
LABEL_554:
                                if (v264)
                                  free(v264);
                              }
                              v208 = v622;
                              if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                              {
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                v305 = gLogObj;
                                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                                {
                                  v306 = *(_QWORD *)(v6 + 488);
                                  if (v306)
                                    LODWORD(v306) = *(_DWORD *)(v306 + 424);
                                  v307 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
                                  v308 = *(_DWORD *)(v6 + 860);
                                  *(_DWORD *)buf = 136447746;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                  v638 = 2082;
                                  *(_QWORD *)v639 = v629;
                                  *(_WORD *)&v639[8] = 2080;
                                  *(_QWORD *)&v639[10] = " ";
                                  *(_WORD *)&v639[18] = 1024;
                                  *(_DWORD *)v640 = v307;
                                  *(_WORD *)&v640[4] = 1024;
                                  *(_DWORD *)&v640[6] = v308;
                                  *(_WORD *)v641 = 1024;
                                  *(_DWORD *)&v641[2] = v306;
                                  *(_WORD *)&v641[6] = 1024;
                                  *(_DWORD *)&v641[8] = v212;
                                  _os_log_impl(&dword_182FBE000, v305, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> output handler refused frame request for frames of length %u", buf, 0x38u);
                                }
                              }
                              LODWORD(v212) = v212 - v216;
                              v8 = &unk_1ECD84000;
LABEL_562:
                              if ((_DWORD)v212 == (_DWORD)__len)
                              {
                                nw_http_transaction_metadata_increment_outbound_body_transfer_size(*(void **)(*(_QWORD *)(v6 + 488) + 352), v212);
                                v309 = *(_QWORD *)(v6 + 488);
                                v310 = __len;
                                v311 = *(_QWORD *)(v309 + 176);
                                v280 = __CFADD__(v311, __len);
                                *(_QWORD *)(v309 + 176) = v311 + __len;
                                if (v280)
                                {
                                  if (v8[1345])
                                  {
                                    v385 = __nwlog_obj();
                                    if (os_log_type_enabled(v385, OS_LOG_TYPE_DEBUG))
                                    {
                                      v386 = *(_QWORD *)(v309 + 176);
                                      *(_DWORD *)buf = 136446978;
                                      *(_QWORD *)&buf[4] = "increment_outbound_body_size";
                                      v638 = 2082;
                                      *(_QWORD *)v639 = "outbound_body_size";
                                      *(_WORD *)&v639[8] = 2048;
                                      *(_QWORD *)&v639[10] = v310;
                                      *(_WORD *)&v639[18] = 2048;
                                      *(_QWORD *)v640 = v386;
                                      _os_log_impl(&dword_182FBE000, v385, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
                                    }
                                  }
                                  *(_QWORD *)(v309 + 176) = -1;
                                }
                                v205 = v619;
                                if (nw_frame_is_metadata_complete(v619))
                                {
                                  *(_WORD *)(*(_QWORD *)(v6 + 488) + 428) |= 0x400u;
                                  *v613 |= 0x20u;
                                  nw_http_transaction_metadata_mark_outbound_message_end(*(void **)(*(_QWORD *)(v6 + 488)
                                                                                                  + 352));
                                  v312 = *(_QWORD *)(v6 + 488);
                                  if (*(_BYTE *)(v312 + 168))
                                  {
                                    if (*(_QWORD *)(v312 + 160) != *(_QWORD *)(v312 + 176))
                                    {
                                      if ((*(_BYTE *)(v312 + 158) & 1) == 0)
                                      {
                                        v451 = __nwlog_obj();
                                        v452 = os_log_type_enabled(v451, OS_LOG_TYPE_ERROR);
                                        v312 = *(_QWORD *)(v6 + 488);
                                        if (v452)
                                        {
                                          v453 = *(_QWORD *)(v312 + 256);
                                          if (v453)
                                            LODWORD(v453) = *(_DWORD *)(v453 + 860);
                                          v454 = *(_DWORD *)(*(_QWORD *)(v312 + 248) + 372);
                                          v455 = *(_DWORD *)(v312 + 424);
                                          if (*(_BYTE *)(v312 + 168))
                                            v456 = *(_QWORD *)(v312 + 160);
                                          else
                                            v456 = -1;
                                          v457 = *(_QWORD *)(v312 + 176);
                                          *(_DWORD *)buf = 136448002;
                                          *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                                          v638 = 2082;
                                          *(_QWORD *)v639 = v312 + 74;
                                          *(_WORD *)&v639[8] = 2080;
                                          *(_QWORD *)&v639[10] = " ";
                                          *(_WORD *)&v639[18] = 1024;
                                          *(_DWORD *)v640 = v454;
                                          *(_WORD *)&v640[4] = 1024;
                                          *(_DWORD *)&v640[6] = v453;
                                          *(_WORD *)v641 = 1024;
                                          *(_DWORD *)&v641[2] = v455;
                                          *(_WORD *)&v641[6] = 2048;
                                          *(_QWORD *)&v641[8] = v456;
                                          *(_WORD *)&v641[16] = 2048;
                                          v642 = v457;
                                          _os_log_impl(&dword_182FBE000, v451, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Content length header %llu does not equal body size %llu", buf, 0x46u);
                                          v312 = *(_QWORD *)(v6 + 488);
                                        }
                                      }
                                      nw_protocol_error(*(_QWORD **)(v312 + 48), v312);
                                      nw_protocol_disconnected(*(_QWORD **)(*(_QWORD *)(v6 + 488) + 48), *(_QWORD *)(v6 + 488));
                                      goto LABEL_772;
                                    }
                                  }
                                }
LABEL_408:
                                *(_QWORD *)(v205 + 80) = 0;
                                *(_QWORD *)(v205 + 88) = 0;
                                nw_frame_cache_return_frame(v626, v205);
                                v205 = *v204;
                                if (!*v204)
                                  goto LABEL_775;
                                continue;
                              }
                              v205 = v619;
                              if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                              {
                                v447 = __nwlog_obj();
                                if (os_log_type_enabled(v447, OS_LOG_TYPE_DEFAULT))
                                {
                                  v448 = *(_QWORD *)(v6 + 488);
                                  v449 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
                                  v450 = *(_DWORD *)(v6 + 860);
                                  if (v448)
                                    LODWORD(v448) = *(_DWORD *)(v448 + 424);
                                  *(_DWORD *)buf = 136448002;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                                  v638 = 2082;
                                  *(_QWORD *)v639 = v629;
                                  *(_WORD *)&v639[8] = 2080;
                                  *(_QWORD *)&v639[10] = " ";
                                  *(_WORD *)&v639[18] = 1024;
                                  *(_DWORD *)v640 = v449;
                                  *(_WORD *)&v640[4] = 1024;
                                  *(_DWORD *)&v640[6] = v450;
                                  *(_WORD *)v641 = 1024;
                                  *(_DWORD *)&v641[2] = v448;
                                  *(_WORD *)&v641[6] = 1024;
                                  *(_DWORD *)&v641[8] = __len;
                                  *(_WORD *)&v641[12] = 1024;
                                  *(_DWORD *)&v641[14] = v212;
                                  _os_log_impl(&dword_182FBE000, v447, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:c%u:s%u> could not send pending output frame of length %u sent %u", buf, 0x3Eu);
                                }
                              }
LABEL_772:
                              nw_frame_claim(v205, v220, v212, 0);
                              v458 = *v204;
                              *(_QWORD *)(v205 + 32) = *v204;
                              v459 = (_QWORD *)(v458 + 40);
                              v54 = v458 == 0;
                              v460 = v615;
                              if (!v54)
                                v460 = v459;
                              *v460 = v208;
                              *v204 = v205;
                              *(_QWORD *)(v205 + 40) = v204;
LABEL_775:
                              v461 = *(unsigned __int16 *)(v6 + 872);
                              if ((v461 & 0x8000) == 0 || *v204)
                              {
LABEL_777:
                                if (v618)
                                {
                                  if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                                  {
                                    if (v8[1345])
                                    {
                                      v514 = __nwlog_obj();
                                      if (os_log_type_enabled(v514, OS_LOG_TYPE_DEBUG))
                                      {
                                        v515 = *(_QWORD *)(v6 + 488);
                                        v516 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
                                        v517 = *(_DWORD *)(v6 + 860);
                                        if (v515)
                                          LODWORD(v515) = *(_DWORD *)(v515 + 424);
                                        *(_DWORD *)buf = 136447490;
                                        *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
                                        v638 = 2082;
                                        *(_QWORD *)v639 = v6 + 74;
                                        *(_WORD *)&v639[8] = 2080;
                                        *(_QWORD *)&v639[10] = " ";
                                        *(_WORD *)&v639[18] = 1024;
                                        *(_DWORD *)v640 = v516;
                                        *(_WORD *)&v640[4] = 1024;
                                        *(_DWORD *)&v640[6] = v517;
                                        *(_WORD *)v641 = 1024;
                                        *(_DWORD *)&v641[2] = v515;
                                        _os_log_impl(&dword_182FBE000, v514, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> initial outbound frame finalized, triggering output_available", buf, 0x32u);
                                        v6 = v627;
                                      }
                                    }
                                  }
                                  v462 = *(_QWORD *)(v6 + 488);
                                  if (v462)
                                    nw_protocol_output_available(*(_QWORD **)(v462 + 48), v462);
                                  else
                                    nw_protocol_output_available(0, 0);
                                }
                                return;
                              }
                              v463 = (_WORD *)(v6 + 872);
                              v464 = v461 & 0xFFFF7FFF | (*(unsigned __int8 *)(v6 + 874) << 16);
                              *(_WORD *)(v6 + 872) = v461 & 0x7FFF;
                              *(_BYTE *)(v6 + 874) = BYTE2(v464);
                              if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                              {
                                if (v8[1345])
                                {
                                  v566 = __nwlog_obj();
                                  if (os_log_type_enabled(v566, OS_LOG_TYPE_DEBUG))
                                  {
                                    v567 = *(_QWORD *)(v6 + 488);
                                    v568 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
                                    v569 = *(_DWORD *)(v6 + 860);
                                    if (v567)
                                      LODWORD(v567) = *(_DWORD *)(v567 + 424);
                                    *(_DWORD *)buf = 136447490;
                                    *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                    v638 = 2082;
                                    *(_QWORD *)v639 = v6 + 74;
                                    *(_WORD *)&v639[8] = 2080;
                                    *(_QWORD *)&v639[10] = " ";
                                    *(_WORD *)&v639[18] = 1024;
                                    *(_DWORD *)v640 = v568;
                                    *(_WORD *)&v640[4] = 1024;
                                    *(_DWORD *)&v640[6] = v569;
                                    *(_WORD *)v641 = 1024;
                                    *(_DWORD *)&v641[2] = v567;
                                    _os_log_impl(&dword_182FBE000, v566, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> requesting new frame for final chunk", buf, 0x32u);
                                    v6 = v627;
                                  }
                                }
                              }
                              v465 = *(_QWORD *)(v6 + 32);
                              if (v465)
                              {
                                *(_QWORD *)&v643 = 0;
                                *((_QWORD *)&v643 + 1) = &v643;
                                v466 = nw_protocol_get_output_frames(v465, v6, 5, 5, 1, (uint64_t)&v643);
                                v467 = v466;
                                v468 = v643;
                                if ((_QWORD)v643 && v466)
                                {
                                  LODWORD(v647) = 0;
                                  v469 = nw_frame_unclaimed_bytes(v643, &v647);
                                  *(_DWORD *)v469 = 218762544;
                                  *(_BYTE *)(v469 + 4) = 10;
                                  if (nw_frame_claim(v468, v470, 5, 0))
                                  {
                                    nw_frame_collapse(v468);
                                    nw_frame_unclaim(v468, v471, 5u, 0);
                                    if (nw_protocol_finalize_output_frames(v465, (uint64_t)&v643))
                                    {
                                      *(_WORD *)(*(_QWORD *)(v6 + 488) + 428) |= 0x400u;
                                      *v463 |= 0x20u;
                                      nw_http_transaction_metadata_mark_outbound_message_end(*(void **)(*(_QWORD *)(v6 + 488) + 352));
                                      v472 = *(_QWORD *)(v6 + 488);
                                      if (*(_BYTE *)(v472 + 168))
                                      {
                                        if (*(_QWORD *)(v472 + 160) != *(_QWORD *)(v472 + 176))
                                        {
                                          if ((*(_BYTE *)(v472 + 158) & 1) == 0)
                                          {
                                            v473 = __nwlog_obj();
                                            v474 = os_log_type_enabled(v473, OS_LOG_TYPE_ERROR);
                                            v472 = *(_QWORD *)(v6 + 488);
                                            if (v474)
                                            {
                                              v475 = *(_QWORD *)(v472 + 256);
                                              if (v475)
                                                LODWORD(v475) = *(_DWORD *)(v475 + 860);
                                              v476 = *(_DWORD *)(*(_QWORD *)(v472 + 248) + 372);
                                              v477 = *(_DWORD *)(v472 + 424);
                                              if (*(_BYTE *)(v472 + 168))
                                                v478 = *(_QWORD *)(v472 + 160);
                                              else
                                                v478 = -1;
                                              v504 = *(_QWORD *)(v472 + 176);
                                              *(_DWORD *)buf = 136448002;
                                              *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                              v638 = 2082;
                                              *(_QWORD *)v639 = v472 + 74;
                                              *(_WORD *)&v639[8] = 2080;
                                              *(_QWORD *)&v639[10] = " ";
                                              *(_WORD *)&v639[18] = 1024;
                                              *(_DWORD *)v640 = v476;
                                              *(_WORD *)&v640[4] = 1024;
                                              *(_DWORD *)&v640[6] = v475;
                                              *(_WORD *)v641 = 1024;
                                              *(_DWORD *)&v641[2] = v477;
                                              *(_WORD *)&v641[6] = 2048;
                                              *(_QWORD *)&v641[8] = v478;
                                              *(_WORD *)&v641[16] = 2048;
                                              v642 = v504;
                                              _os_log_impl(&dword_182FBE000, v473, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Content length header %llu does not equal body size %llu", buf, 0x46u);
                                              v472 = *(_QWORD *)(v6 + 488);
                                            }
                                          }
                                          nw_protocol_error(*(_QWORD **)(v472 + 48), v472);
                                          nw_protocol_disconnected(*(_QWORD **)(*(_QWORD *)(v6 + 488) + 48), *(_QWORD *)(v6 + 488));
                                        }
                                      }
                                    }
                                    goto LABEL_777;
                                  }
                                  __nwlog_obj();
                                  *(_DWORD *)buf = 136446466;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                  v638 = 1024;
                                  *(_DWORD *)v639 = 5;
                                  v483 = (char *)_os_log_send_and_compose_impl();
                                  type[0] = OS_LOG_TYPE_ERROR;
                                  LOBYTE(v633) = 0;
                                  if (!__nwlog_fault(v483, type, &v633))
                                    goto LABEL_832;
                                  if (type[0] == OS_LOG_TYPE_FAULT)
                                  {
                                    v484 = __nwlog_obj();
                                    v485 = type[0];
                                    if (os_log_type_enabled(v484, type[0]))
                                    {
                                      *(_DWORD *)buf = 136446466;
                                      *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                      v638 = 1024;
                                      *(_DWORD *)v639 = 5;
                                      v486 = "%{public}s claiming frame with %u bytes failed";
                                      goto LABEL_830;
                                    }
                                    goto LABEL_832;
                                  }
                                  if ((_BYTE)v633)
                                  {
                                    v491 = (char *)__nw_create_backtrace_string();
                                    v492 = __nwlog_obj();
                                    v493 = type[0];
                                    v494 = os_log_type_enabled(v492, type[0]);
                                    if (v491)
                                    {
                                      if (v494)
                                      {
                                        *(_DWORD *)buf = 136446722;
                                        *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                        v638 = 1024;
                                        *(_DWORD *)v639 = 5;
                                        *(_WORD *)&v639[4] = 2082;
                                        *(_QWORD *)&v639[6] = v491;
                                        _os_log_impl(&dword_182FBE000, v492, v493, "%{public}s claiming frame with %u bytes failed, dumping backtrace:%{public}s", buf, 0x1Cu);
                                      }
                                      free(v491);
                                      goto LABEL_832;
                                    }
                                    if (!v494)
                                    {
LABEL_832:
                                      if (v483)
                                        free(v483);
                                      goto LABEL_777;
                                    }
                                    *(_DWORD *)buf = 136446466;
                                    *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                    v638 = 1024;
                                    *(_DWORD *)v639 = 5;
                                    v486 = "%{public}s claiming frame with %u bytes failed, no backtrace";
                                    v501 = v492;
                                    v502 = v493;
                                  }
                                  else
                                  {
                                    v484 = __nwlog_obj();
                                    v485 = type[0];
                                    if (!os_log_type_enabled(v484, type[0]))
                                      goto LABEL_832;
                                    *(_DWORD *)buf = 136446466;
                                    *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                    v638 = 1024;
                                    *(_DWORD *)v639 = 5;
                                    v486 = "%{public}s claiming frame with %u bytes failed, backtrace limit exceeded";
LABEL_830:
                                    v501 = v484;
                                    v502 = v485;
                                  }
                                  _os_log_impl(&dword_182FBE000, v501, v502, v486, buf, 0x12u);
                                  goto LABEL_832;
                                }
                                if (v466)
                                {
                                  __nwlog_obj();
                                  *(_DWORD *)buf = 136446466;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                  v638 = 1024;
                                  *(_DWORD *)v639 = v467;
                                  v479 = (char *)_os_log_send_and_compose_impl();
                                  LOBYTE(v647) = 16;
                                  type[0] = OS_LOG_TYPE_DEFAULT;
                                  if (!__nwlog_fault(v479, &v647, type))
                                    goto LABEL_821;
                                  if (v647 != 17)
                                  {
                                    if (type[0])
                                    {
                                      v487 = (char *)__nw_create_backtrace_string();
                                      v488 = __nwlog_obj();
                                      v489 = v647;
                                      v490 = os_log_type_enabled(v488, (os_log_type_t)v647);
                                      if (v487)
                                      {
                                        if (v490)
                                        {
                                          *(_DWORD *)buf = 136446722;
                                          *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                          v638 = 1024;
                                          *(_DWORD *)v639 = v467;
                                          *(_WORD *)&v639[4] = 2082;
                                          *(_QWORD *)&v639[6] = v487;
                                          _os_log_impl(&dword_182FBE000, v488, v489, "%{public}s output handler reported %u frames to write, but array is empty, dumping backtrace:%{public}s", buf, 0x1Cu);
                                        }
                                        free(v487);
                                        goto LABEL_821;
                                      }
                                      if (!v490)
                                        goto LABEL_821;
                                      *(_DWORD *)buf = 136446466;
                                      *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                      v638 = 1024;
                                      *(_DWORD *)v639 = v467;
                                      v482 = "%{public}s output handler reported %u frames to write, but array is empty, no backtrace";
                                      v495 = v488;
                                      v496 = v489;
                                    }
                                    else
                                    {
                                      v480 = __nwlog_obj();
                                      v481 = v647;
                                      if (!os_log_type_enabled(v480, (os_log_type_t)v647))
                                        goto LABEL_821;
                                      *(_DWORD *)buf = 136446466;
                                      *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                      v638 = 1024;
                                      *(_DWORD *)v639 = v467;
                                      v482 = "%{public}s output handler reported %u frames to write, but array is empty, "
                                             "backtrace limit exceeded";
LABEL_819:
                                      v495 = v480;
                                      v496 = v481;
                                    }
                                    _os_log_impl(&dword_182FBE000, v495, v496, v482, buf, 0x12u);
                                    goto LABEL_821;
                                  }
                                  v480 = __nwlog_obj();
                                  v481 = v647;
                                  if (os_log_type_enabled(v480, (os_log_type_t)v647))
                                  {
                                    *(_DWORD *)buf = 136446466;
                                    *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                    v638 = 1024;
                                    *(_DWORD *)v639 = v467;
                                    v482 = "%{public}s output handler reported %u frames to write, but array is empty";
                                    goto LABEL_819;
                                  }
LABEL_821:
                                  if (v479)
                                    free(v479);
                                }
                                if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                                {
                                  v497 = __nwlog_obj();
                                  if (os_log_type_enabled(v497, OS_LOG_TYPE_DEBUG))
                                  {
                                    v498 = *(_QWORD *)(v6 + 488);
                                    v499 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
                                    v500 = *(_DWORD *)(v6 + 860);
                                    if (v498)
                                      LODWORD(v498) = *(_DWORD *)(v498 + 424);
                                    *(_DWORD *)buf = 136447746;
                                    *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                    v638 = 2082;
                                    *(_QWORD *)v639 = v6 + 74;
                                    *(_WORD *)&v639[8] = 2080;
                                    *(_QWORD *)&v639[10] = " ";
                                    *(_WORD *)&v639[18] = 1024;
                                    *(_DWORD *)v640 = v499;
                                    *(_WORD *)&v640[4] = 1024;
                                    *(_DWORD *)&v640[6] = v500;
                                    *(_WORD *)v641 = 1024;
                                    *(_DWORD *)&v641[2] = v498;
                                    *(_WORD *)&v641[6] = 1024;
                                    *(_DWORD *)&v641[8] = 5;
                                    _os_log_impl(&dword_182FBE000, v497, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> output handler refused frame request for frames of length %u", buf, 0x38u);
                                  }
                                }
                                goto LABEL_777;
                              }
                              __nwlog_obj();
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                              v518 = (char *)_os_log_send_and_compose_impl();
                              LOBYTE(v643) = 16;
                              LOBYTE(v647) = 0;
                              if (!__nwlog_fault(v518, &v643, &v647))
                                goto LABEL_975;
                              if (v643 == 17)
                              {
                                v519 = __nwlog_obj();
                                v520 = v643;
                                if (os_log_type_enabled(v519, (os_log_type_t)v643))
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                  v521 = "%{public}s called with null output_handler";
                                  goto LABEL_973;
                                }
LABEL_975:
                                if (v518)
                                  free(v518);
                                v6 = v627;
                                goto LABEL_777;
                              }
                              if ((_BYTE)v647)
                              {
                                v526 = (char *)__nw_create_backtrace_string();
                                v527 = __nwlog_obj();
                                v528 = v643;
                                v591 = os_log_type_enabled(v527, (os_log_type_t)v643);
                                if (v526)
                                {
                                  if (v591)
                                  {
                                    *(_DWORD *)buf = 136446466;
                                    *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                    v638 = 2082;
                                    *(_QWORD *)v639 = v526;
                                    v530 = "%{public}s called with null output_handler, dumping backtrace:%{public}s";
LABEL_906:
                                    _os_log_impl(&dword_182FBE000, v527, v528, v530, buf, 0x16u);
                                  }
                                  goto LABEL_907;
                                }
                                if (!v591)
                                  goto LABEL_975;
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                                v521 = "%{public}s called with null output_handler, no backtrace";
                                goto LABEL_1012;
                              }
                              v519 = __nwlog_obj();
                              v520 = v643;
                              if (!os_log_type_enabled(v519, (os_log_type_t)v643))
                                goto LABEL_975;
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_connection_send_final_chunk";
                              v521 = "%{public}s called with null output_handler, backtrace limit exceeded";
LABEL_973:
                              v564 = v519;
                              v565 = v520;
                              goto LABEL_974;
                            }
                            while (1)
                            {
                              v224 = *(_QWORD *)(v222 + 32);
                              if (v224 || *(_QWORD *)(v222 + 40))
                              {
                                v225 = *(_QWORD *)(v222 + 112);
                                if (!v225)
                                  goto LABEL_451;
                              }
                              else
                              {
                                v224 = 0;
                                v225 = *(_QWORD *)(v222 + 112);
                                if (!v225)
                                  goto LABEL_451;
                              }
                              if ((*(_WORD *)(v222 + 204) & 0x100) != 0
                                && g_channel_check_validity
                                && !g_channel_check_validity(v222, *(_QWORD *)(v222 + 88)))
                              {
                                LODWORD(v225) = 0;
LABEL_451:
                                v227 = 0;
                                goto LABEL_452;
                              }
                              LODWORD(v225) = *(_DWORD *)(v222 + 52);
                              v226 = *(unsigned int *)(v222 + 56);
                              if ((_DWORD)v225)
                                LODWORD(v225) = v225 - (v226 + *(_DWORD *)(v222 + 60));
                              v227 = (void *)(*(_QWORD *)(v222 + 112) + v226);
LABEL_452:
                              if (v225 >= v216)
                                v228 = v216;
                              else
                                v228 = v225;
                              memcpy(v227, v211, v228);
                              v216 -= v228;
                              v211 += v228;
                              if (!nw_frame_claim(v222, v229, v228, 0))
                              {
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                *(_DWORD *)buf = 136446466;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                v638 = 1024;
                                *(_DWORD *)v639 = v228;
                                v234 = (char *)_os_log_send_and_compose_impl();
                                LOBYTE(v647) = 16;
                                v632 = 0;
                                if (!__nwlog_fault(v234, &v647, &v632))
                                  goto LABEL_477;
                                if (v647 == 17)
                                {
                                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                  networkd_settings_init();
                                  v235 = gLogObj;
                                  v236 = v647;
                                  if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v647))
                                  {
                                    *(_DWORD *)buf = 136446466;
                                    *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                    v638 = 1024;
                                    *(_DWORD *)v639 = v228;
                                    v237 = v235;
                                    v238 = v236;
                                    v239 = "%{public}s claiming frame with %u bytes failed";
                                    goto LABEL_476;
                                  }
                                  goto LABEL_477;
                                }
                                if (!v632)
                                {
                                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                  networkd_settings_init();
                                  v244 = gLogObj;
                                  v245 = v647;
                                  if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v647))
                                    goto LABEL_477;
                                  *(_DWORD *)buf = 136446466;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                  v638 = 1024;
                                  *(_DWORD *)v639 = v228;
                                  v237 = v244;
                                  v238 = v245;
                                  v239 = "%{public}s claiming frame with %u bytes failed, backtrace limit exceeded";
                                  goto LABEL_476;
                                }
                                v240 = (char *)__nw_create_backtrace_string();
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                v241 = gLogObj;
                                v242 = v647;
                                v243 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v647);
                                if (v240)
                                {
                                  if (v243)
                                  {
                                    *(_DWORD *)buf = 136446722;
                                    *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                    v638 = 1024;
                                    *(_DWORD *)v639 = v228;
                                    *(_WORD *)&v639[4] = 2082;
                                    *(_QWORD *)&v639[6] = v240;
                                    _os_log_impl(&dword_182FBE000, v241, v242, "%{public}s claiming frame with %u bytes failed, dumping backtrace:%{public}s", buf, 0x1Cu);
                                  }
                                  free(v240);
                                  v6 = v627;
                                  goto LABEL_477;
                                }
                                v6 = v627;
                                if (v243)
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                  v638 = 1024;
                                  *(_DWORD *)v639 = v228;
                                  v237 = v241;
                                  v238 = v242;
                                  v239 = "%{public}s claiming frame with %u bytes failed, no backtrace";
LABEL_476:
                                  _os_log_impl(&dword_182FBE000, v237, v238, v239, buf, 0x12u);
                                }
LABEL_477:
                                if (v234)
                                  free(v234);
LABEL_479:
                                v246 = (uint64_t *)v634[1];
                                v247 = *v246;
                                if (*v246)
                                {
                                  nw_frame_set_metadata(*v246, 0, 0, v215);
                                  if (v215)
                                  {
                                    if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                                    {
                                      if (gLogDatapath)
                                      {
                                        v252 = __nwlog_obj();
                                        if (os_log_type_enabled(v252, OS_LOG_TYPE_DEBUG))
                                        {
                                          v253 = *(_QWORD *)(v6 + 488);
                                          if (v253)
                                            LODWORD(v253) = *(_DWORD *)(v253 + 424);
                                          v254 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
                                          v255 = *(_DWORD *)(v6 + 860);
                                          *(_DWORD *)buf = 136447746;
                                          *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                          v638 = 2082;
                                          *(_QWORD *)v639 = v629;
                                          *(_WORD *)&v639[8] = 2080;
                                          *(_QWORD *)&v639[10] = " ";
                                          *(_WORD *)&v639[18] = 1024;
                                          *(_DWORD *)v640 = v254;
                                          *(_WORD *)&v640[4] = 1024;
                                          *(_DWORD *)&v640[6] = v255;
                                          *(_WORD *)v641 = 1024;
                                          *(_DWORD *)&v641[2] = v253;
                                          *(_WORD *)&v641[6] = 2048;
                                          *(_QWORD *)&v641[8] = v247;
                                          _os_log_impl(&dword_182FBE000, v252, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> setting complete on last output frame %p", buf, 0x3Cu);
                                        }
                                      }
                                    }
                                  }
                                }
                                nw_protocol_finalize_output_frames(v214, (uint64_t)&v633);
                                v220 = *(_QWORD *)type;
                                if (*(_QWORD *)type)
                                {
                                  *(_QWORD *)&v647 = 0;
                                  *((_QWORD *)&v647 + 1) = &v647;
                                  v649 = 0;
                                  v648 = 0x2000000000;
                                  *(_QWORD *)&v643 = MEMORY[0x1E0C809B0];
                                  *((_QWORD *)&v643 + 1) = 0x40000000;
                                  v644 = ___ZL30nw_http1_connection_send_bytesP19nw_http1_connectionPhjb_block_invoke;
                                  v645 = &unk_1E14A1890;
                                  v646 = &v647;
                                  do
                                  {
                                    if (!v220)
                                      break;
                                    v248 = *(_QWORD *)(v220 + 32);
                                    v249 = ((uint64_t (*)(__int128 *))v644)(&v643);
                                    v220 = v248;
                                  }
                                  while ((v249 & 1) != 0);
                                  if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                                  {
                                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                    networkd_settings_init();
                                    v250 = gLogObj;
                                    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                                    {
                                      v251 = *(_QWORD *)(v6 + 488);
                                      if (v251)
                                        LODWORD(v251) = *(_DWORD *)(v251 + 424);
                                      v217 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
                                      v218 = *(_DWORD *)(v6 + 860);
                                      v219 = *(_DWORD *)(*((_QWORD *)&v647 + 1) + 24);
                                      *(_DWORD *)buf = 136447746;
                                      *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                      v638 = 2082;
                                      *(_QWORD *)v639 = v629;
                                      *(_WORD *)&v639[8] = 2080;
                                      *(_QWORD *)&v639[10] = " ";
                                      *(_WORD *)&v639[18] = 1024;
                                      *(_DWORD *)v640 = v217;
                                      *(_WORD *)&v640[4] = 1024;
                                      *(_DWORD *)&v640[6] = v218;
                                      *(_WORD *)v641 = 1024;
                                      *(_DWORD *)&v641[2] = v251;
                                      *(_WORD *)&v641[6] = 1024;
                                      *(_DWORD *)&v641[8] = v219;
                                      _os_log_impl(&dword_182FBE000, v250, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> failed to use %u frames, marking as failed", buf, 0x38u);
                                    }
                                  }
                                  _Block_object_dispose(&v647, 8);
                                }
                                if (!v216)
                                {
                                  v8 = (_BYTE *)&unk_1ECD84000;
                                  v204 = v617;
                                  v208 = v622;
                                  goto LABEL_562;
                                }
                                goto LABEL_437;
                              }
                              nw_frame_collapse(v222);
                              nw_frame_unclaim(v222, v230, v228, 0);
                              v231 = *(_QWORD *)(v222 + 32);
                              v232 = *(_QWORD **)(v222 + 40);
                              if (v231)
                              {
                                *(_QWORD *)(v231 + 40) = v232;
                                v232 = *(_QWORD **)(v222 + 40);
                              }
                              else
                              {
                                v636 = *(os_log_type_t **)(v222 + 40);
                              }
                              *v232 = v231;
                              v233 = v634;
                              *(_QWORD *)(v222 + 32) = 0;
                              *(_QWORD *)(v222 + 40) = v233;
                              *v233 = v222;
                              v634 = (uint64_t *)(v222 + 32);
                              if (v224)
                              {
                                v222 = v224;
                                if (v216)
                                  continue;
                              }
                              goto LABEL_479;
                            }
                          }
                          v434 = v208;
                          __nwlog_obj();
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                          v435 = (char *)_os_log_send_and_compose_impl();
                          LOBYTE(v643) = 16;
                          LOBYTE(v647) = 0;
                          if (__nwlog_fault(v435, &v643, &v647))
                          {
                            if (v643 == 17)
                            {
                              v436 = __nwlog_obj();
                              v437 = v643;
                              if (os_log_type_enabled(v436, (os_log_type_t)v643))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                v438 = v436;
                                v439 = v437;
                                v440 = "%{public}s called with null output_handler";
LABEL_753:
                                _os_log_impl(&dword_182FBE000, v438, v439, v440, buf, 0xCu);
                              }
                            }
                            else if ((_BYTE)v647)
                            {
                              v441 = (char *)__nw_create_backtrace_string();
                              v442 = __nwlog_obj();
                              v443 = v643;
                              v444 = os_log_type_enabled(v442, (os_log_type_t)v643);
                              if (v441)
                              {
                                if (v444)
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                  v638 = 2082;
                                  *(_QWORD *)v639 = v441;
                                  _os_log_impl(&dword_182FBE000, v442, v443, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
                                }
                                free(v441);
                                goto LABEL_754;
                              }
                              if (v444)
                              {
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                v438 = v442;
                                v439 = v443;
                                v440 = "%{public}s called with null output_handler, no backtrace";
                                goto LABEL_753;
                              }
                            }
                            else
                            {
                              v445 = __nwlog_obj();
                              v446 = v643;
                              if (os_log_type_enabled(v445, (os_log_type_t)v643))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                                v438 = v445;
                                v439 = v446;
                                v440 = "%{public}s called with null output_handler, backtrace limit exceeded";
                                goto LABEL_753;
                              }
                            }
                          }
LABEL_754:
                          if (v435)
                            free(v435);
                          LODWORD(v212) = 0;
                          v6 = v627;
                          v204 = v617;
                          v208 = v434;
                          goto LABEL_562;
                        }
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                        v358 = (char *)_os_log_send_and_compose_impl();
                        LOBYTE(v643) = 16;
                        LOBYTE(v647) = 0;
                        if (!__nwlog_fault(v358, &v643, &v647))
                          goto LABEL_690;
                        if (v643 == 17)
                        {
                          v364 = __nwlog_obj();
                          v365 = v643;
                          if (os_log_type_enabled(v364, (os_log_type_t)v643))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                            v361 = v364;
                            v362 = v365;
                            v363 = "%{public}s called with null length";
                            goto LABEL_689;
                          }
                          goto LABEL_690;
                        }
                        v374 = v208;
                        if (!(_BYTE)v647)
                        {
                          v389 = __nwlog_obj();
                          v390 = v643;
                          if (os_log_type_enabled(v389, (os_log_type_t)v643))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                            v361 = v389;
                            v362 = v390;
                            v363 = "%{public}s called with null length, backtrace limit exceeded";
                            goto LABEL_689;
                          }
                          goto LABEL_690;
                        }
                        v375 = (char *)__nw_create_backtrace_string();
                        v382 = __nwlog_obj();
                        v383 = v643;
                        v384 = os_log_type_enabled(v382, (os_log_type_t)v643);
                        if (!v375)
                        {
                          v6 = v627;
                          v204 = v617;
                          v208 = v374;
                          if (v384)
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                            v361 = v382;
                            v362 = v383;
                            v363 = "%{public}s called with null length, no backtrace";
                            goto LABEL_689;
                          }
                          goto LABEL_690;
                        }
                        if (v384)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                          v638 = 2082;
                          *(_QWORD *)v639 = v375;
                          v379 = v382;
                          v380 = v383;
                          v381 = "%{public}s called with null length, dumping backtrace:%{public}s";
                          goto LABEL_669;
                        }
                      }
                      else
                      {
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                        v358 = (char *)_os_log_send_and_compose_impl();
                        LOBYTE(v643) = 16;
                        LOBYTE(v647) = 0;
                        if (!__nwlog_fault(v358, &v643, &v647))
                          goto LABEL_690;
                        if (v643 == 17)
                        {
                          v359 = __nwlog_obj();
                          v360 = v643;
                          if (os_log_type_enabled(v359, (os_log_type_t)v643))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                            v361 = v359;
                            v362 = v360;
                            v363 = "%{public}s called with null buffer";
LABEL_689:
                            _os_log_impl(&dword_182FBE000, v361, v362, v363, buf, 0xCu);
                          }
LABEL_690:
                          if (v358)
                            free(v358);
                          LODWORD(v212) = 0;
                          goto LABEL_562;
                        }
                        v374 = v208;
                        if (!(_BYTE)v647)
                        {
                          v387 = __nwlog_obj();
                          v388 = v643;
                          if (os_log_type_enabled(v387, (os_log_type_t)v643))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                            v361 = v387;
                            v362 = v388;
                            v363 = "%{public}s called with null buffer, backtrace limit exceeded";
                            goto LABEL_689;
                          }
                          goto LABEL_690;
                        }
                        v375 = (char *)__nw_create_backtrace_string();
                        v376 = __nwlog_obj();
                        v377 = v643;
                        v378 = os_log_type_enabled(v376, (os_log_type_t)v643);
                        if (!v375)
                        {
                          v6 = v627;
                          v204 = v617;
                          v208 = v374;
                          if (v378)
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                            v361 = v376;
                            v362 = v377;
                            v363 = "%{public}s called with null buffer, no backtrace";
                            goto LABEL_689;
                          }
                          goto LABEL_690;
                        }
                        if (v378)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_send_bytes";
                          v638 = 2082;
                          *(_QWORD *)v639 = v375;
                          v379 = v376;
                          v380 = v377;
                          v381 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_669:
                          _os_log_impl(&dword_182FBE000, v379, v380, v381, buf, 0x16u);
                        }
                      }
                      free(v375);
                      v6 = v627;
                      v204 = v617;
                      v208 = v374;
                      goto LABEL_690;
                    }
                    if ((*(_WORD *)(v205 + 204) & 4) == 0)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                      v638 = 2048;
                      v256 = v205;
                      *(_QWORD *)v639 = v205;
                      v257 = (char *)_os_log_send_and_compose_impl();
                      LOBYTE(v643) = 16;
                      LOBYTE(v647) = 0;
                      if (!__nwlog_fault(v257, &v643, &v647))
                        goto LABEL_547;
                      if (v643 == 17)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v258 = gLogObj;
                        v259 = v643;
                        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v643))
                          goto LABEL_547;
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                        v638 = 2048;
                        *(_QWORD *)v639 = v256;
                        v260 = v258;
                        v261 = v259;
                        v262 = "%{public}s frame %p has no metadata";
                      }
                      else if ((_BYTE)v647)
                      {
                        v286 = (char *)__nw_create_backtrace_string();
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v287 = gLogObj;
                        v288 = v643;
                        v289 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v643);
                        if (v286)
                        {
                          if (v289)
                          {
                            *(_DWORD *)buf = 136446722;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                            v638 = 2048;
                            *(_QWORD *)v639 = v256;
                            *(_WORD *)&v639[8] = 2082;
                            *(_QWORD *)&v639[10] = v286;
                            _os_log_impl(&dword_182FBE000, v287, v288, "%{public}s frame %p has no metadata, dumping backtrace:%{public}s", buf, 0x20u);
                          }
                          free(v286);
LABEL_547:
                          if (v257)
                            free(v257);
                          v205 = v256;
                          if (!v256)
                            goto LABEL_775;
                          continue;
                        }
                        if (!v289)
                          goto LABEL_547;
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                        v638 = 2048;
                        *(_QWORD *)v639 = v256;
                        v260 = v287;
                        v261 = v288;
                        v262 = "%{public}s frame %p has no metadata, no backtrace";
                      }
                      else
                      {
                        v301 = __nwlog_obj();
                        v302 = v643;
                        if (!os_log_type_enabled(v301, (os_log_type_t)v643))
                          goto LABEL_547;
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                        v638 = 2048;
                        *(_QWORD *)v639 = v256;
                        v260 = v301;
                        v261 = v302;
                        v262 = "%{public}s frame %p has no metadata, backtrace limit exceeded";
                      }
                      _os_log_impl(&dword_182FBE000, v260, v261, v262, buf, 0x16u);
                      goto LABEL_547;
                    }
                    if ((*(_BYTE *)(v205 + 216) & 1) != 0)
                      goto LABEL_425;
                    nw_frame_unclaim(v205, a2, 0xAu, 7u);
                    v271 = *(_QWORD *)(v205 + 112);
                    if (v271)
                    {
                      if ((*(_WORD *)(v205 + 204) & 0x100) == 0 || !g_channel_check_validity)
                      {
LABEL_512:
                        v272 = v271 + *(unsigned int *)(v205 + 56);
                        v273 = *(_QWORD *)(v205 + 64);
                        if (v273)
                          goto LABEL_513;
                        goto LABEL_535;
                      }
                      if (g_channel_check_validity(v205, *(_QWORD *)(v205 + 88)))
                      {
                        v271 = *(_QWORD *)(v205 + 112);
                        goto LABEL_512;
                      }
                    }
                    v272 = 0;
                    v273 = *(_QWORD *)(v205 + 64);
                    if (v273)
                    {
LABEL_513:
                      v274 = (*(unsigned __int8 *)(v273 + 66) >> 6) & 1;
                      v275 = __len;
                      if ((_DWORD)__len)
                      {
LABEL_514:
                        v276 = v8;
                        v277 = -1;
                        v278 = v275;
                        do
                        {
                          v279 = v277++;
                          v280 = v278 >= 0x10;
                          v278 >>= 4;
                        }
                        while (v280);
                        if (v272)
                        {
                          v281 = (_BYTE *)(v272 + v277);
                          *(_WORD *)(v281 + 1) = 2573;
                          do
                          {
                            if ((v275 & 0xF) >= 0xA)
                              v282 = (v275 & 0xF) + 55;
                            else
                              v282 = v275 & 0xF | 0x30;
                            *v281-- = v282;
                            v56 = v275 > 0xF;
                            v275 >>= 4;
                          }
                          while (v56);
                          goto LABEL_522;
                        }
                        v624 = (_QWORD *)(v205 + 32);
                        v620 = v205;
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_header";
                        v406 = (char *)_os_log_send_and_compose_impl();
                        LOBYTE(v643) = 16;
                        LOBYTE(v647) = 0;
                        if (__nwlog_fault(v406, &v643, &v647))
                        {
                          if (v643 == 17)
                          {
                            v407 = __nwlog_obj();
                            v408 = v643;
                            if (os_log_type_enabled(v407, (os_log_type_t)v643))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_header";
                              v409 = v407;
                              v410 = v408;
                              v411 = "%{public}s called with null buffer";
LABEL_736:
                              _os_log_impl(&dword_182FBE000, v409, v410, v411, buf, 0xCu);
                            }
                          }
                          else if ((_BYTE)v647)
                          {
                            v420 = (char *)__nw_create_backtrace_string();
                            v421 = __nwlog_obj();
                            v422 = v643;
                            v423 = os_log_type_enabled(v421, (os_log_type_t)v643);
                            if (v420)
                            {
                              if (v423)
                              {
                                *(_DWORD *)buf = 136446466;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_header";
                                v638 = 2082;
                                *(_QWORD *)v639 = v420;
                                _os_log_impl(&dword_182FBE000, v421, v422, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
                              }
                              free(v420);
                              goto LABEL_737;
                            }
                            if (v423)
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_header";
                              v409 = v421;
                              v410 = v422;
                              v411 = "%{public}s called with null buffer, no backtrace";
                              goto LABEL_736;
                            }
                          }
                          else
                          {
                            v432 = __nwlog_obj();
                            v433 = v643;
                            if (os_log_type_enabled(v432, (os_log_type_t)v643))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_header";
                              v409 = v432;
                              v410 = v433;
                              v411 = "%{public}s called with null buffer, backtrace limit exceeded";
                              goto LABEL_736;
                            }
                          }
                        }
LABEL_737:
                        if (v406)
                          free(v406);
                        v6 = v627;
                        v205 = v620;
                        v208 = v624;
LABEL_522:
                        v283 = v279 + 2;
                        v284 = v277 + 3;
                        if (v279 == 6)
                        {
                          v285 = 0;
                          goto LABEL_585;
                        }
LABEL_584:
                        memmove((void *)(v272 + v284), (const void *)(v272 + 10), __len);
                        v285 = 8 - v283;
LABEL_585:
                        if (v272)
                        {
                          v320 = v272 + v284 + __len;
                          *(_WORD *)v320 = 2573;
                          if (!v274)
                            goto LABEL_594;
                          *(_BYTE *)(v320 + 6) = 10;
                          *(_DWORD *)(v320 + 2) = 218762544;
LABEL_588:
                          v321 = v274 ^ 1;
                          if ((*v613 & 0x8000) == 0)
                            v321 = 1;
                          if ((v321 & 1) == 0)
                          {
                            if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                            {
                              if (v276[1345])
                              {
                                v424 = __nwlog_obj();
                                if (os_log_type_enabled(v424, OS_LOG_TYPE_DEBUG))
                                {
                                  v425 = *(_QWORD *)(v6 + 488);
                                  if (v425)
                                    LODWORD(v425) = *(_DWORD *)(v425 + 424);
                                  v6 = v627;
                                  v426 = *(_DWORD *)(*(_QWORD *)(v627 + 480) + 372);
                                  v427 = *(_DWORD *)(v627 + 860);
                                  *(_DWORD *)buf = 136447746;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                                  v638 = 2082;
                                  *(_QWORD *)v639 = v629;
                                  *(_WORD *)&v639[8] = 2080;
                                  *(_QWORD *)&v639[10] = " ";
                                  *(_WORD *)&v639[18] = 1024;
                                  *(_DWORD *)v640 = v426;
                                  *(_WORD *)&v640[4] = 1024;
                                  *(_DWORD *)&v640[6] = v427;
                                  *(_WORD *)v641 = 1024;
                                  *(_DWORD *)&v641[2] = v425;
                                  *(_WORD *)&v641[6] = 2048;
                                  *(_QWORD *)&v641[8] = v205;
                                  _os_log_impl(&dword_182FBE000, v424, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> pending final chunk written to frame %p", buf, 0x3Cu);
                                }
                              }
                            }
                            v322 = *v613;
                            v323 = v322 & 0xFFFF7FFF | (*((unsigned __int8 *)v613 + 2) << 16);
                            *v613 = v322 & 0x7FFF;
                            *((_BYTE *)v613 + 2) = BYTE2(v323);
                          }
LABEL_594:
                          if (v274)
                            v324 = 0;
                          else
                            v324 = 5;
                          v325 = v285 + v324;
                          if (!__CFADD__(v285, (_DWORD)v324))
                          {
                            v8 = v276;
                            v204 = v617;
                            if (!(_DWORD)v325)
                            {
LABEL_619:
                              v211 = (char *)nw_frame_unclaimed_bytes(v205, &__len);
                              if (v205)
                              {
                                if ((*(_WORD *)(v205 + 204) & 4) != 0)
                                {
                                  v347 = *(_BYTE *)(v205 + 216);
                                  *(_QWORD *)(v205 + 208) = v6;
                                  *(_BYTE *)(v205 + 216) = v347 & 0xFC | 1;
                                  goto LABEL_425;
                                }
LABEL_621:
                                v339 = v208;
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                *(_DWORD *)buf = 136446466;
                                *(_QWORD *)&buf[4] = "nw_http1_frame_metadata_reset";
                                v638 = 2048;
                                v340 = v205;
                                *(_QWORD *)v639 = v205;
                                v341 = (char *)_os_log_send_and_compose_impl();
                                LOBYTE(v643) = 16;
                                LOBYTE(v647) = 0;
                                if (__nwlog_fault(v341, &v643, &v647))
                                {
                                  if (v643 == 17)
                                  {
                                    v342 = __nwlog_obj();
                                    v343 = v643;
                                    if (os_log_type_enabled(v342, (os_log_type_t)v643))
                                    {
                                      *(_DWORD *)buf = 136446466;
                                      *(_QWORD *)&buf[4] = "nw_http1_frame_metadata_reset";
                                      v638 = 2048;
                                      *(_QWORD *)v639 = v340;
                                      v344 = v342;
                                      v345 = v343;
                                      v346 = "%{public}s frame %p has no metadata";
LABEL_635:
                                      _os_log_impl(&dword_182FBE000, v344, v345, v346, buf, 0x16u);
                                    }
                                  }
                                  else if ((_BYTE)v647)
                                  {
                                    v348 = (char *)__nw_create_backtrace_string();
                                    v349 = __nwlog_obj();
                                    v350 = v643;
                                    v351 = os_log_type_enabled(v349, (os_log_type_t)v643);
                                    if (v348)
                                    {
                                      if (v351)
                                      {
                                        *(_DWORD *)buf = 136446722;
                                        *(_QWORD *)&buf[4] = "nw_http1_frame_metadata_reset";
                                        v638 = 2048;
                                        *(_QWORD *)v639 = v340;
                                        *(_WORD *)&v639[8] = 2082;
                                        *(_QWORD *)&v639[10] = v348;
                                        _os_log_impl(&dword_182FBE000, v349, v350, "%{public}s frame %p has no metadata, dumping backtrace:%{public}s", buf, 0x20u);
                                      }
                                      free(v348);
                                      goto LABEL_636;
                                    }
                                    if (v351)
                                    {
                                      *(_DWORD *)buf = 136446466;
                                      *(_QWORD *)&buf[4] = "nw_http1_frame_metadata_reset";
                                      v638 = 2048;
                                      *(_QWORD *)v639 = v340;
                                      v344 = v349;
                                      v345 = v350;
                                      v346 = "%{public}s frame %p has no metadata, no backtrace";
                                      goto LABEL_635;
                                    }
                                  }
                                  else
                                  {
                                    v352 = __nwlog_obj();
                                    v353 = v643;
                                    if (os_log_type_enabled(v352, (os_log_type_t)v643))
                                    {
                                      *(_DWORD *)buf = 136446466;
                                      *(_QWORD *)&buf[4] = "nw_http1_frame_metadata_reset";
                                      v638 = 2048;
                                      *(_QWORD *)v639 = v340;
                                      v344 = v352;
                                      v345 = v353;
                                      v346 = "%{public}s frame %p has no metadata, backtrace limit exceeded";
                                      goto LABEL_635;
                                    }
                                  }
                                }
LABEL_636:
                                if (v341)
                                  free(v341);
                                v205 = v340;
                                v208 = v339;
                                goto LABEL_425;
                              }
                              v399 = v208;
                              __nwlog_obj();
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "__nw_frame_get_metadata";
                              v400 = (char *)_os_log_send_and_compose_impl();
                              LOBYTE(v643) = 16;
                              LOBYTE(v647) = 0;
                              if (__nwlog_fault(v400, &v643, &v647))
                              {
                                if (v643 == 17)
                                {
                                  v401 = __nwlog_obj();
                                  v402 = v643;
                                  if (os_log_type_enabled(v401, (os_log_type_t)v643))
                                  {
                                    *(_DWORD *)buf = 136446210;
                                    *(_QWORD *)&buf[4] = "__nw_frame_get_metadata";
                                    v403 = v401;
                                    v404 = v402;
                                    v405 = "%{public}s called with null frame";
LABEL_728:
                                    _os_log_impl(&dword_182FBE000, v403, v404, v405, buf, 0xCu);
                                  }
                                }
                                else if ((_BYTE)v647)
                                {
                                  v416 = (char *)__nw_create_backtrace_string();
                                  v417 = __nwlog_obj();
                                  v418 = v643;
                                  v419 = os_log_type_enabled(v417, (os_log_type_t)v643);
                                  if (v416)
                                  {
                                    if (v419)
                                    {
                                      *(_DWORD *)buf = 136446466;
                                      *(_QWORD *)&buf[4] = "__nw_frame_get_metadata";
                                      v638 = 2082;
                                      *(_QWORD *)v639 = v416;
                                      _os_log_impl(&dword_182FBE000, v417, v418, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
                                    }
                                    free(v416);
                                    goto LABEL_729;
                                  }
                                  if (v419)
                                  {
                                    *(_DWORD *)buf = 136446210;
                                    *(_QWORD *)&buf[4] = "__nw_frame_get_metadata";
                                    v403 = v417;
                                    v404 = v418;
                                    v405 = "%{public}s called with null frame, no backtrace";
                                    goto LABEL_728;
                                  }
                                }
                                else
                                {
                                  v430 = __nwlog_obj();
                                  v431 = v643;
                                  if (os_log_type_enabled(v430, (os_log_type_t)v643))
                                  {
                                    *(_DWORD *)buf = 136446210;
                                    *(_QWORD *)&buf[4] = "__nw_frame_get_metadata";
                                    v403 = v430;
                                    v404 = v431;
                                    v405 = "%{public}s called with null frame, backtrace limit exceeded";
                                    goto LABEL_728;
                                  }
                                }
                              }
LABEL_729:
                              if (v400)
                                free(v400);
                              v6 = v627;
                              v204 = v617;
                              v205 = 0;
                              v208 = v399;
                              goto LABEL_621;
                            }
LABEL_618:
                            nw_frame_claim(v205, v270, 0, v325);
                            goto LABEL_619;
                          }
                          v623 = v208;
                          v326 = v205;
                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                          v638 = 2082;
                          *(_QWORD *)v639 = "unused_bytes";
                          *(_WORD *)&v639[8] = 2048;
                          *(_QWORD *)&v639[10] = v324;
                          *(_WORD *)&v639[18] = 2048;
                          *(_QWORD *)v640 = v285 + v324;
                          v327 = (char *)_os_log_send_and_compose_impl();
                          LOBYTE(v643) = 16;
                          LOBYTE(v647) = 0;
                          v8 = v276;
                          v204 = v617;
                          if (__nwlog_fault(v327, &v643, &v647))
                          {
                            if (v643 == 17)
                            {
                              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                              networkd_settings_init();
                              v328 = gLogObj;
                              v329 = v643;
                              if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v643))
                              {
                                *(_DWORD *)buf = 136446978;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                                v638 = 2082;
                                *(_QWORD *)v639 = "unused_bytes";
                                *(_WORD *)&v639[8] = 2048;
                                *(_QWORD *)&v639[10] = v324;
                                *(_WORD *)&v639[18] = 2048;
                                *(_QWORD *)v640 = v325;
                                v330 = v328;
                                v331 = v329;
                                v332 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_614:
                                _os_log_impl(&dword_182FBE000, v330, v331, v332, buf, 0x2Au);
                              }
                            }
                            else if ((_BYTE)v647)
                            {
                              v333 = (char *)__nw_create_backtrace_string();
                              v334 = __nwlog_obj();
                              v335 = v643;
                              v336 = os_log_type_enabled(v334, (os_log_type_t)v643);
                              if (v333)
                              {
                                if (v336)
                                {
                                  *(_DWORD *)buf = 136447234;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                                  v638 = 2082;
                                  *(_QWORD *)v639 = "unused_bytes";
                                  *(_WORD *)&v639[8] = 2048;
                                  *(_QWORD *)&v639[10] = v324;
                                  *(_WORD *)&v639[18] = 2048;
                                  *(_QWORD *)v640 = v325;
                                  *(_WORD *)&v640[8] = 2082;
                                  *(_QWORD *)v641 = v333;
                                  _os_log_impl(&dword_182FBE000, v334, v335, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                                }
                                free(v333);
                                goto LABEL_615;
                              }
                              if (v336)
                              {
                                *(_DWORD *)buf = 136446978;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                                v638 = 2082;
                                *(_QWORD *)v639 = "unused_bytes";
                                *(_WORD *)&v639[8] = 2048;
                                *(_QWORD *)&v639[10] = v324;
                                *(_WORD *)&v639[18] = 2048;
                                *(_QWORD *)v640 = v325;
                                v330 = v334;
                                v331 = v335;
                                v332 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                                goto LABEL_614;
                              }
                            }
                            else
                            {
                              v337 = __nwlog_obj();
                              v338 = v643;
                              if (os_log_type_enabled(v337, (os_log_type_t)v643))
                              {
                                *(_DWORD *)buf = 136446978;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                                v638 = 2082;
                                *(_QWORD *)v639 = "unused_bytes";
                                *(_WORD *)&v639[8] = 2048;
                                *(_QWORD *)&v639[10] = v324;
                                *(_WORD *)&v639[18] = 2048;
                                *(_QWORD *)v640 = v325;
                                v330 = v337;
                                v331 = v338;
                                v332 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                                goto LABEL_614;
                              }
                            }
                          }
LABEL_615:
                          if (v327)
                            free(v327);
                          LODWORD(v325) = -1;
                          v205 = v326;
                          v208 = v623;
                          goto LABEL_618;
                        }
                        v391 = v208;
                        v392 = v205;
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_trailer";
                        v393 = (char *)_os_log_send_and_compose_impl();
                        LOBYTE(v643) = 16;
                        LOBYTE(v647) = 0;
                        if (__nwlog_fault(v393, &v643, &v647))
                        {
                          if (v643 == 17)
                          {
                            v394 = __nwlog_obj();
                            v395 = v643;
                            if (os_log_type_enabled(v394, (os_log_type_t)v643))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_trailer";
                              v396 = v394;
                              v397 = v395;
                              v398 = "%{public}s called with null buffer";
LABEL_722:
                              _os_log_impl(&dword_182FBE000, v396, v397, v398, buf, 0xCu);
                            }
                          }
                          else if ((_BYTE)v647)
                          {
                            v412 = (char *)__nw_create_backtrace_string();
                            v413 = __nwlog_obj();
                            v414 = v643;
                            v415 = os_log_type_enabled(v413, (os_log_type_t)v643);
                            if (v412)
                            {
                              if (v415)
                              {
                                *(_DWORD *)buf = 136446466;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_trailer";
                                v638 = 2082;
                                *(_QWORD *)v639 = v412;
                                _os_log_impl(&dword_182FBE000, v413, v414, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
                              }
                              free(v412);
                              goto LABEL_723;
                            }
                            if (v415)
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_trailer";
                              v396 = v413;
                              v397 = v414;
                              v398 = "%{public}s called with null buffer, no backtrace";
                              goto LABEL_722;
                            }
                          }
                          else
                          {
                            v428 = __nwlog_obj();
                            v429 = v643;
                            if (os_log_type_enabled(v428, (os_log_type_t)v643))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_trailer";
                              v396 = v428;
                              v397 = v429;
                              v398 = "%{public}s called with null buffer, backtrace limit exceeded";
                              goto LABEL_722;
                            }
                          }
                        }
LABEL_723:
                        if (v393)
                          free(v393);
                        v6 = v627;
                        v205 = v392;
                        v208 = v391;
                        goto LABEL_588;
                      }
LABEL_536:
                      v294 = v205;
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_header";
                      v295 = (char *)_os_log_send_and_compose_impl();
                      LOBYTE(v643) = 16;
                      LOBYTE(v647) = 0;
                      if (__nwlog_fault(v295, &v643, &v647))
                      {
                        if (v643 == 17)
                        {
                          v296 = __nwlog_obj();
                          v297 = v643;
                          if (os_log_type_enabled(v296, (os_log_type_t)v643))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_header";
                            v298 = v296;
                            v299 = v297;
                            v300 = "%{public}s called with null size";
LABEL_580:
                            _os_log_impl(&dword_182FBE000, v298, v299, v300, buf, 0xCu);
                          }
                        }
                        else if ((_BYTE)v647)
                        {
                          v313 = (_QWORD *)(v205 + 32);
                          v314 = (char *)__nw_create_backtrace_string();
                          v315 = __nwlog_obj();
                          v316 = v643;
                          v317 = os_log_type_enabled(v315, (os_log_type_t)v643);
                          if (v314)
                          {
                            if (v317)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_header";
                              v638 = 2082;
                              *(_QWORD *)v639 = v314;
                              _os_log_impl(&dword_182FBE000, v315, v316, "%{public}s called with null size, dumping backtrace:%{public}s", buf, 0x16u);
                            }
                            free(v314);
                            v208 = v313;
                            goto LABEL_581;
                          }
                          v208 = v313;
                          if (v317)
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_header";
                            v298 = v315;
                            v299 = v316;
                            v300 = "%{public}s called with null size, no backtrace";
                            goto LABEL_580;
                          }
                        }
                        else
                        {
                          v318 = __nwlog_obj();
                          v319 = v643;
                          if (os_log_type_enabled(v318, (os_log_type_t)v643))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_write_chunk_header";
                            v298 = v318;
                            v299 = v319;
                            v300 = "%{public}s called with null size, backtrace limit exceeded";
                            goto LABEL_580;
                          }
                        }
                      }
LABEL_581:
                      if (v295)
                        free(v295);
                      v276 = v8;
                      v283 = 0;
                      v284 = 2;
                      v205 = v294;
                      goto LABEL_584;
                    }
LABEL_535:
                    v274 = 0;
                    v275 = __len;
                    if ((_DWORD)__len)
                      goto LABEL_514;
                    goto LABEL_536;
                  }
                }
              }
              else
              {
                v211 = 0;
                if ((*(_BYTE *)(v6 + 158) & 1) != 0)
                  goto LABEL_422;
              }
              break;
            }
            if (v8[1345])
            {
              v354 = __nwlog_obj();
              if (os_log_type_enabled(v354, OS_LOG_TYPE_DEBUG))
              {
                v355 = *(_QWORD *)(v6 + 488);
                if (v355)
                  LODWORD(v355) = *(_DWORD *)(v355 + 424);
                v356 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
                v357 = *(_DWORD *)(v6 + 860);
                *(_DWORD *)buf = 136448002;
                *(_QWORD *)&buf[4] = "nw_http1_connection_drain_outbound_frames";
                v638 = 2082;
                *(_QWORD *)v639 = v629;
                *(_WORD *)&v639[8] = 2080;
                *(_QWORD *)&v639[10] = " ";
                *(_WORD *)&v639[18] = 1024;
                *(_DWORD *)v640 = v356;
                *(_WORD *)&v640[4] = 1024;
                *(_DWORD *)&v640[6] = v357;
                *(_WORD *)v641 = 1024;
                *(_DWORD *)&v641[2] = v355;
                *(_WORD *)&v641[6] = 2048;
                *(_QWORD *)&v641[8] = v205;
                *(_WORD *)&v641[16] = 1024;
                LODWORD(v642) = __len;
                _os_log_impl(&dword_182FBE000, v354, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> draining frame %p with length %u", buf, 0x42u);
              }
            }
            goto LABEL_422;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
          v138 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(v643) = 16;
          LOBYTE(v647) = 0;
          if (__nwlog_fault(v138, &v643, &v647))
          {
            if (v643 == 17)
            {
              v139 = __nwlog_obj();
              v140 = v643;
              if (os_log_type_enabled(v139, (os_log_type_t)v643))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
                v141 = "%{public}s Stream asked to send outbound headers without current connection";
LABEL_286:
                v150 = v139;
                v151 = v140;
LABEL_287:
                _os_log_impl(&dword_182FBE000, v150, v151, v141, buf, 0xCu);
              }
            }
            else if ((_BYTE)v647)
            {
              v146 = (char *)__nw_create_backtrace_string();
              v147 = __nwlog_obj();
              v148 = v643;
              v149 = os_log_type_enabled(v147, (os_log_type_t)v643);
              if (v146)
              {
                if (v149)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
                  v638 = 2082;
                  *(_QWORD *)v639 = v146;
                  _os_log_impl(&dword_182FBE000, v147, v148, "%{public}s Stream asked to send outbound headers without current connection, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v146);
                goto LABEL_288;
              }
              if (v149)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
                v141 = "%{public}s Stream asked to send outbound headers without current connection, no backtrace";
                v150 = v147;
                v151 = v148;
                goto LABEL_287;
              }
            }
            else
            {
              v139 = __nwlog_obj();
              v140 = v643;
              if (os_log_type_enabled(v139, (os_log_type_t)v643))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_send_outbound_headers";
                v141 = "%{public}s Stream asked to send outbound headers without current connection, backtrace limit exceeded";
                goto LABEL_286;
              }
            }
          }
LABEL_288:
          if (v138)
            free(v138);
          v8 = &unk_1ECD84000;
          goto LABEL_398;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
        v638 = 1040;
        *(_DWORD *)v639 = 16;
        *(_WORD *)&v639[4] = 2096;
        *(_QWORD *)&v639[6] = &v647;
        *(_WORD *)&v639[14] = 1040;
        *(_DWORD *)&v639[16] = 16;
        *(_WORD *)v640 = 2096;
        *(_QWORD *)&v640[2] = &v643;
        v31 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v633) = 0;
        if (__nwlog_fault(v31, type, &v633))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v32 = __nwlog_obj();
            v33 = type[0];
            if (!os_log_type_enabled(v32, type[0]))
              goto LABEL_110;
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
            v638 = 1040;
            *(_DWORD *)v639 = 16;
            *(_WORD *)&v639[4] = 2096;
            *(_QWORD *)&v639[6] = &v647;
            *(_WORD *)&v639[14] = 1040;
            *(_DWORD *)&v639[16] = 16;
            *(_WORD *)v640 = 2096;
            *(_QWORD *)&v640[2] = &v643;
            v34 = "%{public}s existing metadata identifier does not match new metadata identifier (existing %{uuid_t}.16P"
                  " != new %{uuid_t}.16P)";
LABEL_108:
            v62 = v32;
            v63 = v33;
LABEL_109:
            _os_log_impl(&dword_182FBE000, v62, v63, v34, buf, 0x2Cu);
            goto LABEL_110;
          }
          if (!(_BYTE)v633)
          {
            v32 = __nwlog_obj();
            v33 = type[0];
            if (!os_log_type_enabled(v32, type[0]))
              goto LABEL_110;
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
            v638 = 1040;
            *(_DWORD *)v639 = 16;
            *(_WORD *)&v639[4] = 2096;
            *(_QWORD *)&v639[6] = &v647;
            *(_WORD *)&v639[14] = 1040;
            *(_DWORD *)&v639[16] = 16;
            *(_WORD *)v640 = 2096;
            *(_QWORD *)&v640[2] = &v643;
            v34 = "%{public}s existing metadata identifier does not match new metadata identifier (existing %{uuid_t}.16P"
                  " != new %{uuid_t}.16P), backtrace limit exceeded";
            goto LABEL_108;
          }
          v35 = (char *)__nw_create_backtrace_string();
          v36 = __nwlog_obj();
          v37 = type[0];
          v38 = os_log_type_enabled(v36, type[0]);
          if (v35)
          {
            if (v38)
            {
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
              v638 = 1040;
              *(_DWORD *)v639 = 16;
              *(_WORD *)&v639[4] = 2096;
              *(_QWORD *)&v639[6] = &v647;
              *(_WORD *)&v639[14] = 1040;
              *(_DWORD *)&v639[16] = 16;
              *(_WORD *)v640 = 2096;
              *(_QWORD *)&v640[2] = &v643;
              *(_WORD *)v641 = 2082;
              *(_QWORD *)&v641[2] = v35;
              _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s existing metadata identifier does not match new metadata identifier (existing %{uuid_t}.16P != new %{uuid_t}.16P), dumping backtrace:%{public}s", buf, 0x36u);
            }
            free(v35);
          }
          else if (v38)
          {
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
            v638 = 1040;
            *(_DWORD *)v639 = 16;
            *(_WORD *)&v639[4] = 2096;
            *(_QWORD *)&v639[6] = &v647;
            *(_WORD *)&v639[14] = 1040;
            *(_DWORD *)&v639[16] = 16;
            *(_WORD *)v640 = 2096;
            *(_QWORD *)&v640[2] = &v643;
            v34 = "%{public}s existing metadata identifier does not match new metadata identifier (existing %{uuid_t}.16P"
                  " != new %{uuid_t}.16P), no backtrace";
            v62 = v36;
            v63 = v37;
            goto LABEL_109;
          }
        }
LABEL_110:
        if (v31)
          free(v31);
        v8 = &unk_1ECD84000;
        if (!v21)
          goto LABEL_177;
        goto LABEL_176;
      }
      if (v20)
      {
        if (nw_protocol_metadata_is_http(v20))
        {
          if ((*(_BYTE *)(*(_QWORD *)(v12 + 248) + 376) & 1) != 0)
          {
            v43 = nw_http_metadata_copy_response(v21);
            if (v43)
            {
              v28 = v43;
              v29 = nw_http_response_copy(v43);
              metadata_for_response = nw_http_create_metadata_for_response((void *)v29);
LABEL_72:
              *(_QWORD *)buf = metadata_for_response;
              nw::retained_ptr<nw_endpoint *>::operator=(v12 + 384, buf);
              if (v29)
                os_release((void *)v29);
              os_release(v28);
              if ((*(_BYTE *)(v12 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v560 = __nwlog_obj();
                  if (os_log_type_enabled(v560, OS_LOG_TYPE_DEBUG))
                  {
                    v561 = *(_QWORD *)(v12 + 256);
                    v562 = *(_DWORD *)(*(_QWORD *)(v12 + 248) + 372);
                    if (v561)
                      LODWORD(v561) = *(_DWORD *)(v561 + 860);
                    v563 = *(_DWORD *)(v12 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
                    v638 = 2082;
                    *(_QWORD *)v639 = v12 + 74;
                    *(_WORD *)&v639[8] = 2080;
                    *(_QWORD *)&v639[10] = " ";
                    *(_WORD *)&v639[18] = 1024;
                    *(_DWORD *)v640 = v562;
                    *(_WORD *)&v640[4] = 1024;
                    *(_DWORD *)&v640[6] = v561;
                    *(_WORD *)v641 = 1024;
                    *(_DWORD *)&v641[2] = v563;
                    _os_log_impl(&dword_182FBE000, v560, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> saved outbound message", buf, 0x32u);
                  }
                }
              }
              v44 = *((_DWORD *)a1 + 13);
              if ((!v44 || v44 == *((_DWORD *)a1 + 14) + *((_DWORD *)a1 + 15)) && (v45 = *((_QWORD *)a1 + 8)) != 0)
                v46 = (*(unsigned __int8 *)(v45 + 66) >> 6) & 1;
              else
                v46 = 0;
              v47 = *v18;
              if (*v18)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v12 + 248) + 376) & 1) != 0)
                {
                  v51 = nw_http_metadata_copy_response(v47);
                  status_code = nw_http_response_get_status_code(v51);
                  v53 = status_code;
                  v54 = (status_code - 200) < 0xFFFFFF9C || status_code == 101;
                  if (v54)
                    v55 = 0;
                  else
                    v55 = 2048;
                  *(_WORD *)(v12 + 428) = v55 | *(_WORD *)(v12 + 428) & 0xF7FF;
                  v56 = status_code == 101 || (status_code - 200) > 0xFFFFFF9B;
                  v50 = v56;
                  if (v51)
                    os_release(v51);
                  v57 = v53 != 101;
                }
                else
                {
                  v48 = nw_http_metadata_copy_request(v47);
                  if (v48)
                  {
                    v49 = v48;
                    v50 = nw_http_request_has_method(v48, (uint64_t)"GET")
                       || nw_http_request_has_method(v49, (uint64_t)"HEAD");
                    if ((*(_BYTE *)(*(_QWORD *)(v12 + 248) + 376) & 4) != 0)
                    {
                      v70 = nw_parameters_copy_url_endpoint(*(void **)(v12 + 320));
                      if (v70)
                      {
                        v71 = v70;
                        url = nw_endpoint_get_url(v70);
                        nw_http_request_set_path(v49, (uint64_t)url);
                        os_release(v71);
                      }
                    }
                    os_release(v49);
                  }
                  else
                  {
                    v50 = 0;
                  }
                  v57 = 1;
                }
                v73 = nw_http_metadata_copy_header_fields(*v18);
                if (!nw_http_fields_have_field_with_name(v73, (unint64_t)"Connection")
                  && (*(_WORD *)(v12 + 428) & 0x800) == 0)
                {
                  nw_http_fields_append(v73, (uint64_t)"Connection", (uint64_t)"keep-alive");
                }
                if (((v46 ^ 1 | v50) & 1) == 0
                  && !nw_http_fields_have_field_with_name(v73, (unint64_t)"Content-Length"))
                {
                  nw_http_fields_append(v73, (uint64_t)"Content-Length", (uint64_t)"0");
                }
                if ((v46 & 1) == 0)
                {
                  if ((v57 & !nw_http_fields_have_field_with_name(v73, (unint64_t)"Content-Length")) != 0)
                    v74 = 256;
                  else
                    v74 = 0;
                  *(_WORD *)(v12 + 428) = *(_WORD *)(v12 + 428) & 0xFEFF | v74;
                  if ((*(_BYTE *)(v12 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v586 = __nwlog_obj();
                      if (os_log_type_enabled(v586, OS_LOG_TYPE_DEBUG))
                      {
                        v587 = *(_QWORD *)(v12 + 256);
                        v588 = *(_DWORD *)(*(_QWORD *)(v12 + 248) + 372);
                        if (v587)
                          LODWORD(v587) = *(_DWORD *)(v587 + 860);
                        v589 = *(_DWORD *)(v12 + 424);
                        v590 = "uses";
                        if ((*(_WORD *)(v12 + 428) & 0x100) == 0)
                          v590 = "does not use";
                        *(_DWORD *)buf = 136447746;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_process_outbound_message";
                        v638 = 2082;
                        *(_QWORD *)v639 = v12 + 74;
                        *(_WORD *)&v639[8] = 2080;
                        *(_QWORD *)&v639[10] = " ";
                        *(_WORD *)&v639[18] = 1024;
                        *(_DWORD *)v640 = v588;
                        *(_WORD *)&v640[4] = 1024;
                        *(_DWORD *)&v640[6] = v587;
                        *(_WORD *)v641 = 1024;
                        *(_DWORD *)&v641[2] = v589;
                        *(_WORD *)&v641[6] = 2080;
                        *(_QWORD *)&v641[8] = v590;
                        _os_log_impl(&dword_182FBE000, v586, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> outbound data %s chunked encoding", buf, 0x3Cu);
                      }
                    }
                  }
                  if ((*(_WORD *)(v12 + 428) & 0x100) != 0)
                    nw_http_fields_set_value_by_name(v73, (uint64_t)"Transfer-Encoding", (uint64_t)"chunked");
                }
                if (v73)
                  os_release(v73);
LABEL_153:
                nw_http_transaction_metadata_set_outbound_message(*(void **)(v12 + 352), *(void **)(v12 + 384));
                nw::http::content_length_manager::set_outbound_message((nw::http::content_length_manager *)(v12 + 160), *(nw_protocol_metadata **)(v12 + 384));
                os_release(v21);
                v22 = 1;
                v6 = v627;
                v8 = &unk_1ECD84000;
                goto LABEL_178;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_process_outbound_message";
              v556 = (char *)_os_log_send_and_compose_impl();
              LOBYTE(v643) = 16;
              LOBYTE(v647) = 0;
              if (__nwlog_fault(v556, &v643, &v647))
              {
                if (v643 == 17)
                {
                  v557 = __nwlog_obj();
                  v558 = v643;
                  if (!os_log_type_enabled(v557, (os_log_type_t)v643))
                    goto LABEL_1057;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_process_outbound_message";
                  v559 = "%{public}s called with null http1_stream->outbound_message";
LABEL_1055:
                  v601 = v557;
                  v602 = v558;
LABEL_1056:
                  _os_log_impl(&dword_182FBE000, v601, v602, v559, buf, 0xCu);
                  goto LABEL_1057;
                }
                if (!(_BYTE)v647)
                {
                  v557 = __nwlog_obj();
                  v558 = v643;
                  if (!os_log_type_enabled(v557, (os_log_type_t)v643))
                    goto LABEL_1057;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_process_outbound_message";
                  v559 = "%{public}s called with null http1_stream->outbound_message, backtrace limit exceeded";
                  goto LABEL_1055;
                }
                v582 = (char *)__nw_create_backtrace_string();
                v583 = __nwlog_obj();
                v584 = v643;
                v585 = os_log_type_enabled(v583, (os_log_type_t)v643);
                if (v582)
                {
                  if (v585)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_process_outbound_message";
                    v638 = 2082;
                    *(_QWORD *)v639 = v582;
                    _os_log_impl(&dword_182FBE000, v583, v584, "%{public}s called with null http1_stream->outbound_message, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v582);
                  goto LABEL_1057;
                }
                if (v585)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_process_outbound_message";
                  v559 = "%{public}s called with null http1_stream->outbound_message, no backtrace";
                  v601 = v583;
                  v602 = v584;
                  goto LABEL_1056;
                }
              }
LABEL_1057:
              if (v556)
                free(v556);
              goto LABEL_153;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
            v64 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(v643) = 16;
            LOBYTE(v647) = 0;
            if (__nwlog_fault(v64, &v643, &v647))
            {
              if (v643 == 17)
              {
                v65 = __nwlog_obj();
                v66 = v643;
                if (!os_log_type_enabled(v65, (os_log_type_t)v643))
                  goto LABEL_173;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
                v67 = "%{public}s did not find response on frame";
                goto LABEL_171;
              }
              if (!(_BYTE)v647)
              {
                v65 = __nwlog_obj();
                v66 = v643;
                if (!os_log_type_enabled(v65, (os_log_type_t)v643))
                  goto LABEL_173;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
                v67 = "%{public}s did not find response on frame, backtrace limit exceeded";
                goto LABEL_171;
              }
              v75 = (char *)__nw_create_backtrace_string();
              v76 = __nwlog_obj();
              v77 = v643;
              v80 = os_log_type_enabled(v76, (os_log_type_t)v643);
              if (v75)
              {
                if (!v80)
                  goto LABEL_163;
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
                v638 = 2082;
                *(_QWORD *)v639 = v75;
                v79 = "%{public}s did not find response on frame, dumping backtrace:%{public}s";
LABEL_162:
                _os_log_impl(&dword_182FBE000, v76, v77, v79, buf, 0x16u);
LABEL_163:
                free(v75);
                if (!v64)
                  goto LABEL_175;
                goto LABEL_174;
              }
              if (v80)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
                v67 = "%{public}s did not find response on frame, no backtrace";
                goto LABEL_308;
              }
            }
          }
          else
          {
            v27 = nw_http_metadata_copy_request(v21);
            if (v27)
            {
              v28 = v27;
              v29 = nw_http_request_copy(v27);
              metadata_for_response = nw_http_create_metadata_for_request((void *)v29);
              goto LABEL_72;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
            v64 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(v643) = 16;
            LOBYTE(v647) = 0;
            if (__nwlog_fault(v64, &v643, &v647))
            {
              if (v643 == 17)
              {
                v65 = __nwlog_obj();
                v66 = v643;
                if (!os_log_type_enabled(v65, (os_log_type_t)v643))
                  goto LABEL_173;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
                v67 = "%{public}s did not find request on frame";
                goto LABEL_171;
              }
              if (!(_BYTE)v647)
              {
                v65 = __nwlog_obj();
                v66 = v643;
                if (!os_log_type_enabled(v65, (os_log_type_t)v643))
                  goto LABEL_173;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
                v67 = "%{public}s did not find request on frame, backtrace limit exceeded";
                goto LABEL_171;
              }
              v75 = (char *)__nw_create_backtrace_string();
              v76 = __nwlog_obj();
              v77 = v643;
              v78 = os_log_type_enabled(v76, (os_log_type_t)v643);
              if (v75)
              {
                if (!v78)
                  goto LABEL_163;
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
                v638 = 2082;
                *(_QWORD *)v639 = v75;
                v79 = "%{public}s did not find request on frame, dumping backtrace:%{public}s";
                goto LABEL_162;
              }
              if (v78)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
                v67 = "%{public}s did not find request on frame, no backtrace";
LABEL_308:
                v81 = v76;
                v82 = v77;
                goto LABEL_172;
              }
            }
          }
LABEL_173:
          if (!v64)
          {
LABEL_175:
            v8 = &unk_1ECD84000;
LABEL_176:
            os_release(v21);
LABEL_177:
            v22 = 0;
            goto LABEL_178;
          }
LABEL_174:
          free(v64);
          goto LABEL_175;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
        v64 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v643) = 16;
        LOBYTE(v647) = 0;
        if (!__nwlog_fault(v64, &v643, &v647))
          goto LABEL_173;
        if (v643 == 17)
        {
          v65 = __nwlog_obj();
          v66 = v643;
          if (!os_log_type_enabled(v65, (os_log_type_t)v643))
            goto LABEL_173;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
          v67 = "%{public}s metadata must be http";
        }
        else
        {
          if ((_BYTE)v647)
          {
            v570 = (char *)__nw_create_backtrace_string();
            v76 = __nwlog_obj();
            v77 = v643;
            v571 = os_log_type_enabled(v76, (os_log_type_t)v643);
            if (v570)
            {
              if (v571)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
                v638 = 2082;
                *(_QWORD *)v639 = v570;
                _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v570);
            }
            else if (v571)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
              v67 = "%{public}s metadata must be http, no backtrace";
              goto LABEL_308;
            }
            goto LABEL_173;
          }
          v65 = __nwlog_obj();
          v66 = v643;
          if (!os_log_type_enabled(v65, (os_log_type_t)v643))
            goto LABEL_173;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
          v67 = "%{public}s metadata must be http, backtrace limit exceeded";
        }
LABEL_171:
        v81 = v65;
        v82 = v66;
LABEL_172:
        _os_log_impl(&dword_182FBE000, v81, v82, v67, buf, 0xCu);
        goto LABEL_173;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
      v39 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v643) = 16;
      LOBYTE(v647) = 0;
      if (__nwlog_fault(v39, &v643, &v647))
      {
        if (v643 == 17)
        {
          v40 = __nwlog_obj();
          v41 = v643;
          if (!os_log_type_enabled(v40, (os_log_type_t)v643))
            goto LABEL_129;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
          v42 = "%{public}s did not find outbound message on frame, dropping";
LABEL_127:
          v68 = v40;
          v69 = v41;
LABEL_128:
          _os_log_impl(&dword_182FBE000, v68, v69, v42, buf, 0xCu);
          goto LABEL_129;
        }
        if (!(_BYTE)v647)
        {
          v40 = __nwlog_obj();
          v41 = v643;
          if (!os_log_type_enabled(v40, (os_log_type_t)v643))
            goto LABEL_129;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
          v42 = "%{public}s did not find outbound message on frame, dropping, backtrace limit exceeded";
          goto LABEL_127;
        }
        v58 = (char *)__nw_create_backtrace_string();
        v59 = __nwlog_obj();
        v60 = v643;
        v61 = os_log_type_enabled(v59, (os_log_type_t)v643);
        if (v58)
        {
          if (v61)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
            v638 = 2082;
            *(_QWORD *)v639 = v58;
            _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s did not find outbound message on frame, dropping, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v58);
          v8 = &unk_1ECD84000;
          goto LABEL_129;
        }
        v8 = &unk_1ECD84000;
        if (v61)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_save_outbound_message";
          v42 = "%{public}s did not find outbound message on frame, dropping, no backtrace";
          v68 = v59;
          v69 = v60;
          goto LABEL_128;
        }
      }
LABEL_129:
      if (v39)
        free(v39);
      goto LABEL_177;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
    v161 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v643) = 16;
    LOBYTE(v647) = 0;
    if (!__nwlog_fault(v161, &v643, &v647))
      goto LABEL_896;
    if (v643 == 17)
    {
      v162 = __nwlog_obj();
      v163 = v643;
      if (!os_log_type_enabled(v162, (os_log_type_t)v643))
        goto LABEL_896;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v164 = "%{public}s called with null http1_connection->current_stream";
      goto LABEL_895;
    }
    if (!(_BYTE)v647)
    {
      v162 = __nwlog_obj();
      v163 = v643;
      if (!os_log_type_enabled(v162, (os_log_type_t)v643))
        goto LABEL_896;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v164 = "%{public}s called with null http1_connection->current_stream, backtrace limit exceeded";
      goto LABEL_895;
    }
    v189 = (char *)__nw_create_backtrace_string();
    v162 = __nwlog_obj();
    v163 = v643;
    v503 = os_log_type_enabled(v162, (os_log_type_t)v643);
    if (!v189)
    {
      if (!v503)
        goto LABEL_896;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v164 = "%{public}s called with null http1_connection->current_stream, no backtrace";
      goto LABEL_895;
    }
    if (v503)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v638 = 2082;
      *(_QWORD *)v639 = v189;
      v191 = "%{public}s called with null http1_connection->current_stream, dumping backtrace:%{public}s";
      goto LABEL_842;
    }
LABEL_843:
    free(v189);
    if (!v161)
      return;
LABEL_897:
    free(v161);
    return;
  }
LABEL_29:
  if ((*(_BYTE *)(v6 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v194 = __nwlog_obj();
      if (os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
      {
        v195 = *(_QWORD *)(v6 + 488);
        v196 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
        v197 = *(_DWORD *)(v6 + 860);
        if (v195)
          LODWORD(v195) = *(_DWORD *)(v195 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
        v638 = 2082;
        *(_QWORD *)v639 = v6 + 74;
        *(_WORD *)&v639[8] = 2080;
        *(_QWORD *)&v639[10] = " ";
        *(_WORD *)&v639[18] = 1024;
        *(_DWORD *)v640 = v196;
        *(_WORD *)&v640[4] = 1024;
        *(_DWORD *)&v640[6] = v197;
        *(_WORD *)v641 = 1024;
        *(_DWORD *)&v641[2] = v195;
        _os_log_impl(&dword_182FBE000, v194, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> disposing of output frame, finalizer called with success == false", buf, 0x32u);
      }
    }
  }
  if ((*((_WORD *)a1 + 102) & 0x100) == 0
    || !g_channel_check_validity
    || g_channel_check_validity(a1, *((_QWORD *)a1 + 11)))
  {
    v16 = (void *)*((_QWORD *)a1 + 14);
    if (v16)
      free(v16);
  }
  nw_frame_reset((uint64_t)a1, 0, 0, 0, 0);
  os_release(a1);
}

BOOL ___ZL35nw_protocol_http1_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BOOL4 v27;
  uint64_t v28;
  _QWORD *v29;
  _BOOL8 result;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  NSObject *v35;
  void *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  const char *v40;
  char *backtrace_string;
  _BOOL4 v42;
  char *v43;
  _BOOL4 v44;
  __int128 v45;
  char v46;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  _BYTE v57[10];
  _BYTE v58[10];
  __int16 v59;
  unsigned int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_protocol_http1_get_output_frames_block_invoke";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v31, &type, &v46))
      goto LABEL_67;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_http1_get_output_frames_block_invoke";
      v34 = "%{public}s called with null frame";
    }
    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v32 = __nwlog_obj();
      v33 = type;
      v42 = os_log_type_enabled(v32, type);
      if (backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          v49 = "nw_protocol_http1_get_output_frames_block_invoke";
          v50 = 2082;
          v51 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_67;
      }
      if (!v42)
      {
LABEL_67:
        if (v31)
          free(v31);
        return a2 != 0;
      }
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_http1_get_output_frames_block_invoke";
      v34 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_http1_get_output_frames_block_invoke";
      v34 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
    goto LABEL_67;
  }
  v45 = *(_OWORD *)(a1 + 32);
  v5 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v5)
    goto LABEL_3;
  v35 = __nwlog_obj();
  os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v49 = "strict_calloc";
  v50 = 2048;
  v51 = 1;
  v52 = 2048;
  v53 = 32;
  v36 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v36);
  if (!result)
  {
    free(v36);
LABEL_3:
    v6 = *(_OWORD *)(a2 + 80);
    *v5 = v45;
    v5[1] = v6;
    *(_QWORD *)(a2 + 80) = nw_http1_wrapped_frame_finalizer;
    *(_QWORD *)(a2 + 88) = v5;
    if ((*(_WORD *)(a2 + 204) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(a2, v5))
    {
      return a2 != 0;
    }
    v7 = *(_DWORD *)(a2 + 48);
    if (!v7)
      return a2 != 0;
    if (*(_QWORD *)(a1 + 40))
    {
      v8 = -1;
      v9 = *(_DWORD *)(a2 + 48);
      do
      {
        ++v8;
        v10 = v9 > 0xF;
        v9 >>= 4;
      }
      while (v10);
      v11 = v8 + 3;
      v12 = 7;
      goto LABEL_11;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_http1_connection_get_chunked_extra_size";
    v37 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault(v37, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_http1_connection_get_chunked_extra_size";
          v40 = "%{public}s called with null http1_connection";
LABEL_73:
          _os_log_impl(&dword_182FBE000, v38, v39, v40, buf, 0xCu);
        }
      }
      else if (v46)
      {
        v43 = (char *)__nw_create_backtrace_string();
        v38 = __nwlog_obj();
        v39 = type;
        v44 = os_log_type_enabled(v38, type);
        if (v43)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            v49 = "nw_http1_connection_get_chunked_extra_size";
            v50 = 2082;
            v51 = (uint64_t)v43;
            _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v43);
          goto LABEL_74;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_http1_connection_get_chunked_extra_size";
          v40 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_73;
        }
      }
      else
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_http1_connection_get_chunked_extra_size";
          v40 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_73;
        }
      }
    }
LABEL_74:
    if (v37)
      free(v37);
    v11 = 0;
    v12 = 0;
LABEL_11:
    if (v7 >= v12 + v11)
    {
      nw_frame_claim(a2, v4, v11, v12);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v23 = __nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            v24 = *(_QWORD *)(a1 + 56);
            v25 = v24 + 74;
            LODWORD(v24) = *(_DWORD *)(v24 + 372);
            *(_DWORD *)buf = 136447746;
            v49 = "nw_protocol_http1_get_output_frames_block_invoke";
            v50 = 2082;
            v51 = v25;
            v52 = 2080;
            v53 = (uint64_t)" ";
            v54 = 1024;
            v55 = v24;
            v56 = 2048;
            *(_QWORD *)v57 = a2;
            *(_WORD *)&v57[8] = 1024;
            *(_DWORD *)v58 = v11;
            *(_WORD *)&v58[4] = 1024;
            *(_DWORD *)&v58[6] = v12;
            _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> claimed chunk header from frame %p (start: %u, end: %u)", buf, 0x3Cu);
          }
        }
      }
      return a2 != 0;
    }
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 40) + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v14 = *(_QWORD *)(a1 + 40);
        v15 = v14 + 74;
        v16 = *(_QWORD *)(v14 + 488);
        v17 = *(_DWORD *)(*(_QWORD *)(v14 + 480) + 372);
        v18 = *(_DWORD *)(v14 + 860);
        if (v16)
          LODWORD(v16) = *(_DWORD *)(v16 + 424);
        *(_DWORD *)buf = 136448514;
        v49 = "nw_protocol_http1_get_output_frames_block_invoke";
        v50 = 2082;
        v51 = v15;
        v52 = 2080;
        v53 = (uint64_t)" ";
        v54 = 1024;
        v55 = v17;
        v56 = 1024;
        *(_DWORD *)v57 = v18;
        *(_WORD *)&v57[4] = 1024;
        *(_DWORD *)&v57[6] = v16;
        *(_WORD *)v58 = 2048;
        *(_QWORD *)&v58[2] = a2;
        v59 = 1024;
        v60 = v7;
        v61 = 1024;
        v62 = v11;
        v63 = 1024;
        v64 = v12;
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> frame is too small to fit chunk header: %p, raw length: %u, start space: %u, end space: %u", buf, 0x4Eu);
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_protocol_http1_get_output_frames_block_invoke";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v19, &type, &v46))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = gLogObj;
      v21 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_protocol_http1_get_output_frames_block_invoke";
        v22 = "%{public}s frame is too small to fit chunk header";
LABEL_34:
        _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
      }
    }
    else if (v46)
    {
      v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = gLogObj;
      v21 = type;
      v27 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v26)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          v49 = "nw_protocol_http1_get_output_frames_block_invoke";
          v50 = 2082;
          v51 = (uint64_t)v26;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s frame is too small to fit chunk header, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v26);
        goto LABEL_35;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_protocol_http1_get_output_frames_block_invoke";
        v22 = "%{public}s frame is too small to fit chunk header, no backtrace";
        goto LABEL_34;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = gLogObj;
      v21 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_protocol_http1_get_output_frames_block_invoke";
        v22 = "%{public}s frame is too small to fit chunk header, backtrace limit exceeded";
        goto LABEL_34;
      }
    }
LABEL_35:
    if (v19)
      free(v19);
    v28 = *(_QWORD *)(a2 + 32);
    v29 = *(_QWORD **)(a2 + 40);
    if (v28)
    {
      *(_QWORD *)(v28 + 40) = v29;
      v29 = *(_QWORD **)(a2 + 40);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) = v29;
    }
    *v29 = v28;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    nw_frame_finalize(a2);
    return a2 != 0;
  }
  __break(1u);
  return result;
}

BOOL ___ZL35nw_protocol_http1_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_125(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  __int128 v4;
  _BOOL8 result;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  NSObject *v10;
  void *v11;
  char *backtrace_string;
  _BOOL4 v13;
  __int128 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http1_get_output_frames_block_invoke";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15))
      goto LABEL_21;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http1_get_output_frames_block_invoke";
      v9 = "%{public}s called with null frame";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v7 = __nwlog_obj();
      v8 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_http1_get_output_frames_block_invoke";
          v19 = 2082;
          v20 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_21;
      }
      if (!v13)
      {
LABEL_21:
        if (v6)
          free(v6);
        return a2 != 0;
      }
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http1_get_output_frames_block_invoke";
      v9 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http1_get_output_frames_block_invoke";
      v9 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
    goto LABEL_21;
  }
  v14 = *(_OWORD *)(a1 + 32);
  v3 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v3)
  {
LABEL_3:
    v4 = *(_OWORD *)(a2 + 80);
    *v3 = v14;
    v3[1] = v4;
    *(_QWORD *)(a2 + 80) = nw_http1_wrapped_frame_finalizer;
    *(_QWORD *)(a2 + 88) = v3;
    return a2 != 0;
  }
  v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v18 = "strict_calloc";
  v19 = 2048;
  v20 = 1;
  v21 = 2048;
  v22 = 32;
  v11 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http1_wrapped_frame_finalizer(nw_frame *a1, BOOL a2, _OWORD *a3)
{
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_http1_wrapped_frame_finalizer";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_http1_wrapped_frame_finalizer";
      v7 = "%{public}s called with null frame";
LABEL_31:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      goto LABEL_32;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_http1_wrapped_frame_finalizer";
      v7 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_http1_wrapped_frame_finalizer";
      v7 = "%{public}s called with null frame, no backtrace";
      goto LABEL_31;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_http1_wrapped_frame_finalizer";
      v16 = 2082;
      v17 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_32:
    if (!v4)
      return;
    goto LABEL_33;
  }
  if (a3)
  {
    *((_OWORD *)a1 + 5) = a3[1];
    free(a3);
    nw_frame_finalize((uint64_t)a1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http1_wrapped_frame_finalizer";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_32;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_http1_wrapped_frame_finalizer";
    v7 = "%{public}s called with null context";
    goto LABEL_31;
  }
  if (!v12)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_http1_wrapped_frame_finalizer";
    v7 = "%{public}s called with null context, backtrace limit exceeded";
    goto LABEL_31;
  }
  v10 = (char *)__nw_create_backtrace_string();
  v5 = __nwlog_obj();
  v6 = type;
  v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11)
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_http1_wrapped_frame_finalizer";
    v7 = "%{public}s called with null context, no backtrace";
    goto LABEL_31;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    v15 = "nw_http1_wrapped_frame_finalizer";
    v16 = 2082;
    v17 = v10;
    _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v4)
LABEL_33:
    free(v4);
}

void nw::http::content_length_manager::set_outbound_message(nw::http::content_length_manager *this, nw_protocol_metadata *a2)
{
  id v4;
  BOOL has_method;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char *v14;
  _BOOL4 v15;
  _QWORD v16[5];
  _QWORD v17[5];
  char v18;
  os_log_type_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "set_outbound_message";
    v8 = (char *)_os_log_send_and_compose_impl();
    v19 = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v8, &v19, &v18))
      goto LABEL_42;
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (!os_log_type_enabled(v9, v19))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "set_outbound_message";
      v11 = "%{public}s called with null metadata";
      goto LABEL_41;
    }
    if (!v18)
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (!os_log_type_enabled(v9, v19))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "set_outbound_message";
      v11 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v19;
    v13 = os_log_type_enabled(v9, v19);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "set_outbound_message";
      v11 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_41;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v21 = "set_outbound_message";
      v22 = 2082;
      v23 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_42:
    if (!v8)
      return;
    goto LABEL_43;
  }
  if (!nw_protocol_metadata_is_http(a2))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "set_outbound_message";
    v8 = (char *)_os_log_send_and_compose_impl();
    v19 = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v8, &v19, &v18))
      goto LABEL_42;
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (!os_log_type_enabled(v9, v19))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "set_outbound_message";
      v11 = "%{public}s called with null (nw_protocol_metadata_is_http(metadata))";
      goto LABEL_41;
    }
    if (!v18)
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (!os_log_type_enabled(v9, v19))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "set_outbound_message";
      v11 = "%{public}s called with null (nw_protocol_metadata_is_http(metadata)), backtrace limit exceeded";
      goto LABEL_41;
    }
    v14 = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v19;
    v15 = os_log_type_enabled(v9, v19);
    if (v14)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "set_outbound_message";
        v22 = 2082;
        v23 = v14;
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null (nw_protocol_metadata_is_http(metadata)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v14);
      if (!v8)
        return;
LABEL_43:
      free(v8);
      return;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v21 = "set_outbound_message";
      v11 = "%{public}s called with null (nw_protocol_metadata_is_http(metadata)), no backtrace";
LABEL_41:
      _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      goto LABEL_42;
    }
    goto LABEL_42;
  }
  if (*((_BYTE *)this + 48))
  {
    v4 = nw_http_metadata_copy_response(a2);
    nw_http_response_get_status_code(v4);
    if (*((_BYTE *)this + 49))
    {
      if (*((_BYTE *)this + 8))
      {
        *(_QWORD *)this = 0;
        if (!v4)
          return;
      }
      else
      {
        *((_BYTE *)this + 8) = 1;
        *(_QWORD *)this = 0;
        if (!v4)
          return;
      }
LABEL_13:
      os_release(v4);
      return;
    }
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 0x40000000;
    v17[2] = ___ZN2nw4http22content_length_manager20set_outbound_messageEP20nw_protocol_metadata_block_invoke;
    v17[3] = &__block_descriptor_tmp_136_40485;
    v17[4] = this;
    v7 = v17;
  }
  else
  {
    v4 = nw_http_metadata_copy_request(a2);
    has_method = nw_http_request_has_method(v4, (uint64_t)"HEAD");
    v6 = MEMORY[0x1E0C809B0];
    *((_BYTE *)this + 49) = has_method;
    v16[0] = v6;
    v16[1] = 0x40000000;
    v16[2] = ___ZN2nw4http22content_length_manager20set_outbound_messageEP20nw_protocol_metadata_block_invoke_2;
    v16[3] = &__block_descriptor_tmp_137_40486;
    v16[4] = this;
    v7 = v16;
  }
  nw_http_fields_access_value_by_name(v4, (unint64_t)"Content-Length", v7);
  if (v4)
    goto LABEL_13;
}

uint64_t ___ZL30nw_http1_connection_send_bytesP19nw_http1_connectionPhjb_block_invoke(uint64_t a1, uint64_t a2)
{
  nw_frame_finalize(a2);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return 1;
}

void ___ZN2nw4http22content_length_manager20set_outbound_messageEP20nw_protocol_metadata_block_invoke(uint64_t a1, char *__s)
{
  uint64_t v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string __dst;

  if (__s)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v7 = v4 | 7;
      v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_10:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        *(_QWORD *)v3 = std::stoull(&__dst, 0, 10);
        *(_BYTE *)(v3 + 8) = 1;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return;
      }
    }
    memcpy(p_dst, __s, v5);
    goto LABEL_10;
  }
}

void ___ZN2nw4http22content_length_manager20set_outbound_messageEP20nw_protocol_metadata_block_invoke_2(uint64_t a1, char *__s)
{
  uint64_t v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string __dst;

  if (__s)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v7 = v4 | 7;
      v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_10:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        *(_QWORD *)v3 = std::stoull(&__dst, 0, 10);
        *(_BYTE *)(v3 + 8) = 1;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return;
      }
    }
    memcpy(p_dst, __s, v5);
    goto LABEL_10;
  }
}

__n128 __Block_byref_object_copy__107(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

BOOL ___ZL41nw_http1_connection_fulfill_frame_requestP19nw_http1_connectionP16nw_frame_array_sS2_bbjjjPj_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  _BOOL4 v27;
  uint64_t v28;
  _BOOL8 result;
  NSObject *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  NSObject *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  int v48;
  int v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  const char *v75;
  char *v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  _BOOL4 v85;
  char *v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  int v95;
  NSObject *v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  char v106;
  os_log_type_t type[8];
  os_log_type_t v108;
  uint8_t buf[4];
  const char *v110;
  __int16 v111;
  const char *v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  _BYTE v116[10];
  char *v117;
  _BYTE v118[10];
  _BYTE v119[6];
  __int16 v120;
  int v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v4 = nw_frame_unclaimed_length((_DWORD *)a2);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 1) > *(_DWORD *)(a1 + 72))
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(_DWORD *)(v6 + 24);
  v8 = v7 + v4;
  if (__CFADD__(v7, v4))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446978;
    v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
    v111 = 2082;
    v112 = "bytes_count_with_this_frame";
    v113 = 2048;
    v114 = v5;
    v115 = 2048;
    *(_QWORD *)v116 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v108 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v9, type, &v108))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = gLogObj;
        v11 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          v111 = 2082;
          v112 = "bytes_count_with_this_frame";
          v113 = 2048;
          v114 = v5;
          v115 = 2048;
          *(_QWORD *)v116 = v8;
          v12 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_17:
          _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0x2Au);
        }
      }
      else if (v108)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = gLogObj;
        v11 = type[0];
        v14 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136447234;
            v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
            v111 = 2082;
            v112 = "bytes_count_with_this_frame";
            v113 = 2048;
            v114 = v5;
            v115 = 2048;
            *(_QWORD *)v116 = v8;
            *(_WORD *)&v116[8] = 2082;
            v117 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(backtrace_string);
          goto LABEL_18;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446978;
          v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          v111 = 2082;
          v112 = "bytes_count_with_this_frame";
          v113 = 2048;
          v114 = v5;
          v115 = 2048;
          *(_QWORD *)v116 = v8;
          v12 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_17;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = gLogObj;
        v11 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          v111 = 2082;
          v112 = "bytes_count_with_this_frame";
          v113 = 2048;
          v114 = v5;
          v115 = 2048;
          *(_QWORD *)v116 = v8;
          v12 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_17;
        }
      }
    }
LABEL_18:
    if (v9)
      free(v9);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(_DWORD *)(v6 + 24);
    LODWORD(v8) = -1;
  }
  v15 = *(_DWORD *)(a1 + 76);
  if (v8 <= v15)
  {
    *(_DWORD *)(v6 + 24) = v7 + v5;
    if (!__CFADD__(v7, v5))
      goto LABEL_77;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    *(_DWORD *)buf = 136446978;
    v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
    v111 = 2082;
    v112 = "bytes_count";
    v113 = 2048;
    v114 = v5;
    v115 = 2048;
    *(_QWORD *)v116 = v20;
    v21 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v108 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v21, type, &v108))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = gLogObj;
        v23 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          v24 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
          *(_DWORD *)buf = 136446978;
          v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          v111 = 2082;
          v112 = "bytes_count";
          v113 = 2048;
          v114 = v5;
          v115 = 2048;
          *(_QWORD *)v116 = v24;
          v25 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_73:
          _os_log_impl(&dword_182FBE000, v22, v23, v25, buf, 0x2Au);
        }
      }
      else if (v108)
      {
        v26 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = gLogObj;
        v23 = type[0];
        v27 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v26)
        {
          if (v27)
          {
            v28 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
            *(_DWORD *)buf = 136447234;
            v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
            v111 = 2082;
            v112 = "bytes_count";
            v113 = 2048;
            v114 = v5;
            v115 = 2048;
            *(_QWORD *)v116 = v28;
            *(_WORD *)&v116[8] = 2082;
            v117 = v26;
            _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v26);
          goto LABEL_74;
        }
        if (v27)
        {
          v63 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
          *(_DWORD *)buf = 136446978;
          v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          v111 = 2082;
          v112 = "bytes_count";
          v113 = 2048;
          v114 = v5;
          v115 = 2048;
          *(_QWORD *)v116 = v63;
          v25 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_73;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = gLogObj;
        v23 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          v54 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
          *(_DWORD *)buf = 136446978;
          v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          v111 = 2082;
          v112 = "bytes_count";
          v113 = 2048;
          v114 = v5;
          v115 = 2048;
          *(_QWORD *)v116 = v54;
          v25 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_73;
        }
      }
    }
LABEL_74:
    if (v21)
      free(v21);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -1;
LABEL_77:
    if (*(_BYTE *)(a1 + 80))
    {
      v65 = *(_QWORD *)(a2 + 32);
      v66 = *(_QWORD **)(a2 + 40);
      v64 = (_QWORD *)(a2 + 32);
      if (v65)
      {
        *(_QWORD *)(v65 + 40) = v66;
        **(_QWORD **)(a2 + 40) = v65;
        goto LABEL_84;
      }
    }
    else
    {
      v65 = *(_QWORD *)(a2 + 16);
      v66 = *(_QWORD **)(a2 + 24);
      v64 = (_QWORD *)(a2 + 16);
      if (v65)
      {
        *(_QWORD *)(v65 + 24) = v66;
        v66 = *(_QWORD **)(a2 + 24);
LABEL_83:
        *v66 = v65;
LABEL_84:
        *v64 = 0;
        v64[1] = 0;
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 64) + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v96 = __nwlog_obj();
            if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
            {
              v97 = *(_QWORD *)(a1 + 64);
              v98 = (const char *)(v97 + 74);
              v99 = *(_QWORD *)(v97 + 488);
              v100 = *(_DWORD *)(*(_QWORD *)(v97 + 480) + 372);
              v101 = *(_DWORD *)(v97 + 860);
              if (v99)
                LODWORD(v99) = *(_DWORD *)(v99 + 424);
              *(_DWORD *)buf = 136447746;
              v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
              v111 = 2082;
              v112 = v98;
              v113 = 2080;
              v114 = (uint64_t)" ";
              v115 = 1024;
              *(_DWORD *)v116 = v100;
              *(_WORD *)&v116[4] = 1024;
              *(_DWORD *)&v116[6] = v101;
              LOWORD(v117) = 1024;
              *(_DWORD *)((char *)&v117 + 2) = v99;
              HIWORD(v117) = 1024;
              *(_DWORD *)v118 = v5;
              _os_log_impl(&dword_182FBE000, v96, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Moving entire frame (%u bytes)", buf, 0x38u);
            }
          }
        }
        v37 = a2;
LABEL_87:
        v67 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v68 = *(unsigned int *)(v67 + 24) + 1;
        v69 = v68 << 31 >> 31;
        *(_DWORD *)(v67 + 24) = v68;
        if (v69 == v68 && (v69 & 0x8000000000000000) == 0)
        {
LABEL_106:
          v81 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
          if (*(_BYTE *)(a1 + 80))
          {
            *(_QWORD *)(v37 + 32) = 0;
            v82 = v37 + 32;
          }
          else
          {
            *(_QWORD *)(v37 + 16) = 0;
            v82 = v37 + 16;
          }
          v83 = *(uint64_t **)(v81 + 48);
          *(_QWORD *)(v82 + 8) = v83;
          *v83 = v37;
          *(_QWORD *)(v81 + 48) = v82;
          return 1;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v70 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        *(_DWORD *)buf = 136446978;
        v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
        v111 = 2082;
        v112 = "frame_count";
        v113 = 2048;
        v114 = 1;
        v115 = 2048;
        *(_QWORD *)v116 = v70;
        v71 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v108 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v71, type, &v108))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v72 = gLogObj;
            v73 = type[0];
            if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
            {
              v74 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
              v111 = 2082;
              v112 = "frame_count";
              v113 = 2048;
              v114 = 1;
              v115 = 2048;
              *(_QWORD *)v116 = v74;
              v75 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_102:
              _os_log_impl(&dword_182FBE000, v72, v73, v75, buf, 0x2Au);
            }
          }
          else if (v108)
          {
            v76 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v72 = gLogObj;
            v73 = type[0];
            v77 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
            if (v76)
            {
              if (v77)
              {
                v78 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
                *(_DWORD *)buf = 136447234;
                v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
                v111 = 2082;
                v112 = "frame_count";
                v113 = 2048;
                v114 = 1;
                v115 = 2048;
                *(_QWORD *)v116 = v78;
                *(_WORD *)&v116[8] = 2082;
                v117 = v76;
                _os_log_impl(&dword_182FBE000, v72, v73, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v76);
              goto LABEL_103;
            }
            if (v77)
            {
              v80 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
              v111 = 2082;
              v112 = "frame_count";
              v113 = 2048;
              v114 = 1;
              v115 = 2048;
              *(_QWORD *)v116 = v80;
              v75 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_102;
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v72 = gLogObj;
            v73 = type[0];
            if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
            {
              v79 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
              v111 = 2082;
              v112 = "frame_count";
              v113 = 2048;
              v114 = 1;
              v115 = 2048;
              *(_QWORD *)v116 = v79;
              v75 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_102;
            }
          }
        }
LABEL_103:
        if (v71)
          free(v71);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -1;
        goto LABEL_106;
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v66;
    goto LABEL_83;
  }
  v16 = v15 - v7;
  if (v15 <= v7)
    return 0;
  if (*(_BYTE *)(a1 + 81))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v18 = *(_QWORD *)(a2 + 32);
      v19 = *(_QWORD **)(a2 + 40);
      v17 = (_QWORD *)(a2 + 32);
      if (v18)
      {
        *(_QWORD *)(v18 + 40) = v19;
        **(_QWORD **)(a2 + 40) = v18;
        goto LABEL_48;
      }
    }
    else
    {
      v18 = *(_QWORD *)(a2 + 16);
      v19 = *(_QWORD **)(a2 + 24);
      v17 = (_QWORD *)(a2 + 16);
      if (v18)
      {
        *(_QWORD *)(v18 + 24) = v19;
        v19 = *(_QWORD **)(a2 + 24);
LABEL_47:
        *v19 = v18;
LABEL_48:
        *v17 = 0;
        v17[1] = 0;
        *(_QWORD *)type = a2;
        v36 = nw_frame_split((uint64_t *)type, v16);
        if (v36)
        {
          v37 = v36;
          v38 = *(uint64_t **)(a1 + 56);
          v39 = *(_QWORD *)type;
          v40 = v38 + 1;
          v41 = *v38;
          if (*(_BYTE *)(a1 + 80))
          {
            *(_QWORD *)(*(_QWORD *)type + 32) = v41;
            v42 = v39 + 32;
            v43 = (_QWORD *)(v41 + 40);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)type + 16) = v41;
            v42 = v39 + 16;
            v43 = (_QWORD *)(v41 + 24);
          }
          if (v41)
            v40 = v43;
          *v40 = v42;
          *v38 = v39;
          *(_QWORD *)(v42 + 8) = v38;
          v55 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v56 = *(_DWORD *)(v55 + 24);
          *(_DWORD *)(v55 + 24) = v56 + v16;
          if (!__CFADD__(v56, (_DWORD)v16))
            goto LABEL_137;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v57 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
          *(_DWORD *)buf = 136446978;
          v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          v111 = 2082;
          v112 = "bytes_count";
          v113 = 2048;
          v114 = v16;
          v115 = 2048;
          *(_QWORD *)v116 = v57;
          v58 = (char *)_os_log_send_and_compose_impl();
          v108 = OS_LOG_TYPE_ERROR;
          v106 = 0;
          if (__nwlog_fault(v58, &v108, &v106))
          {
            if (v108 == OS_LOG_TYPE_FAULT)
            {
              v59 = __nwlog_obj();
              v60 = v108;
              if (os_log_type_enabled(v59, v108))
              {
                v61 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
                *(_DWORD *)buf = 136446978;
                v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
                v111 = 2082;
                v112 = "bytes_count";
                v113 = 2048;
                v114 = v16;
                v115 = 2048;
                *(_QWORD *)v116 = v61;
                v62 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_133:
                _os_log_impl(&dword_182FBE000, v59, v60, v62, buf, 0x2Au);
              }
            }
            else if (v106)
            {
              v86 = (char *)__nw_create_backtrace_string();
              v59 = __nwlog_obj();
              v60 = v108;
              v87 = os_log_type_enabled(v59, v108);
              if (v86)
              {
                if (v87)
                {
                  v88 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
                  *(_DWORD *)buf = 136447234;
                  v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
                  v111 = 2082;
                  v112 = "bytes_count";
                  v113 = 2048;
                  v114 = v16;
                  v115 = 2048;
                  *(_QWORD *)v116 = v88;
                  *(_WORD *)&v116[8] = 2082;
                  v117 = v86;
                  _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v86);
                goto LABEL_134;
              }
              if (v87)
              {
                v90 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
                *(_DWORD *)buf = 136446978;
                v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
                v111 = 2082;
                v112 = "bytes_count";
                v113 = 2048;
                v114 = v16;
                v115 = 2048;
                *(_QWORD *)v116 = v90;
                v62 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_133;
              }
            }
            else
            {
              v59 = __nwlog_obj();
              v60 = v108;
              if (os_log_type_enabled(v59, v108))
              {
                v89 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
                *(_DWORD *)buf = 136446978;
                v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
                v111 = 2082;
                v112 = "bytes_count";
                v113 = 2048;
                v114 = v16;
                v115 = 2048;
                *(_QWORD *)v116 = v89;
                v62 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_133;
              }
            }
          }
LABEL_134:
          if (v58)
            free(v58);
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -1;
LABEL_137:
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 64) + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v91 = __nwlog_obj();
              if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
              {
                v92 = *(_QWORD *)(a1 + 64);
                v93 = (const char *)(v92 + 74);
                v94 = *(_QWORD *)(v92 + 488);
                if (v94)
                  v95 = *(_DWORD *)(v94 + 424);
                else
                  v95 = 0;
                v102 = *(_DWORD *)(*(_QWORD *)(v92 + 480) + 372);
                v103 = *(_DWORD *)(v92 + 860);
                v104 = nw_frame_unclaimed_length(*(_DWORD **)type);
                v105 = *(_DWORD *)(v37 + 52);
                if (v105)
                  v105 -= *(_DWORD *)(v37 + 56) + *(_DWORD *)(v37 + 60);
                *(_DWORD *)buf = 136448514;
                v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
                v111 = 2082;
                v112 = v93;
                v113 = 2080;
                v114 = (uint64_t)" ";
                v115 = 1024;
                *(_DWORD *)v116 = v102;
                *(_WORD *)&v116[4] = 1024;
                *(_DWORD *)&v116[6] = v103;
                LOWORD(v117) = 1024;
                *(_DWORD *)((char *)&v117 + 2) = v95;
                HIWORD(v117) = 1024;
                *(_DWORD *)v118 = v16;
                *(_WORD *)&v118[4] = 1024;
                *(_DWORD *)&v118[6] = v5;
                *(_WORD *)v119 = 1024;
                *(_DWORD *)&v119[2] = v104;
                v120 = 1024;
                v121 = v105;
                _os_log_impl(&dword_182FBE000, v91, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Moving split frame (%u bytes of %u, %u bytes remaining, delivering %u bytes)", buf, 0x4Au);
              }
            }
          }
          goto LABEL_87;
        }
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 64) + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v44 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            v45 = *(_QWORD *)(a1 + 64);
            v46 = (const char *)(v45 + 74);
            v47 = *(_QWORD *)(v45 + 488);
            v48 = *(_DWORD *)(*(_QWORD *)(v45 + 480) + 372);
            v49 = *(_DWORD *)(v45 + 860);
            if (v47)
              LODWORD(v47) = *(_DWORD *)(v47 + 424);
            *(_DWORD *)buf = 136448002;
            v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
            v111 = 2082;
            v112 = v46;
            v113 = 2080;
            v114 = (uint64_t)" ";
            v115 = 1024;
            *(_DWORD *)v116 = v48;
            *(_WORD *)&v116[4] = 1024;
            *(_DWORD *)&v116[6] = v49;
            LOWORD(v117) = 1024;
            *(_DWORD *)((char *)&v117 + 2) = v47;
            HIWORD(v117) = 2048;
            *(_QWORD *)v118 = a2;
            *(_WORD *)&v118[8] = 1024;
            *(_DWORD *)v119 = v16;
            _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> failed to split frame %p at offset %u", buf, 0x42u);
          }
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
        v50 = (char *)_os_log_send_and_compose_impl();
        v108 = OS_LOG_TYPE_ERROR;
        v106 = 0;
        if (!__nwlog_fault(v50, &v108, &v106))
          goto LABEL_127;
        if (v108 == OS_LOG_TYPE_FAULT)
        {
          v51 = __nwlog_obj();
          v52 = v108;
          if (!os_log_type_enabled(v51, v108))
            goto LABEL_127;
          *(_DWORD *)buf = 136446210;
          v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          v53 = "%{public}s nw_frame_split with partial frame failed";
        }
        else if (v106)
        {
          v84 = (char *)__nw_create_backtrace_string();
          v51 = __nwlog_obj();
          v52 = v108;
          v85 = os_log_type_enabled(v51, v108);
          if (v84)
          {
            if (v85)
            {
              *(_DWORD *)buf = 136446466;
              v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
              v111 = 2082;
              v112 = v84;
              _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s nw_frame_split with partial frame failed, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v84);
            goto LABEL_127;
          }
          if (!v85)
          {
LABEL_127:
            if (v50)
              free(v50);
            return 0;
          }
          *(_DWORD *)buf = 136446210;
          v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          v53 = "%{public}s nw_frame_split with partial frame failed, no backtrace";
        }
        else
        {
          v51 = __nwlog_obj();
          v52 = v108;
          if (!os_log_type_enabled(v51, v108))
            goto LABEL_127;
          *(_DWORD *)buf = 136446210;
          v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          v53 = "%{public}s nw_frame_split with partial frame failed, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v51, v52, v53, buf, 0xCu);
        goto LABEL_127;
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    goto LABEL_47;
  }
  result = 0;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 64) + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v30 = __nwlog_obj();
      result = os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        v31 = *(_QWORD *)(a1 + 64);
        v32 = (const char *)(v31 + 74);
        v33 = *(_QWORD *)(v31 + 488);
        v34 = *(_DWORD *)(*(_QWORD *)(v31 + 480) + 372);
        v35 = *(_DWORD *)(v31 + 860);
        if (v33)
          LODWORD(v33) = *(_DWORD *)(v33 + 424);
        *(_DWORD *)buf = 136447490;
        v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
        v111 = 2082;
        v112 = v32;
        v113 = 2080;
        v114 = (uint64_t)" ";
        v115 = 1024;
        *(_DWORD *)v116 = v34;
        *(_WORD *)&v116[4] = 1024;
        *(_DWORD *)&v116[6] = v35;
        LOWORD(v117) = 1024;
        *(_DWORD *)((char *)&v117 + 2) = v33;
        _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> skipping partial frame, split frames not allowed", buf, 0x32u);
        return 0;
      }
    }
  }
  return result;
}

uint64_t ___ZL41nw_http1_connection_fulfill_frame_requestP19nw_http1_connectionP16nw_frame_array_sS2_bbjjjPj_block_invoke_113(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  if (!a2)
    return 1;
  if (!*(_BYTE *)(a1 + 48))
  {
    v3 = a2[2];
    v4 = (_QWORD *)a2[3];
    v2 = a2 + 2;
    if (v3)
    {
      *(_QWORD *)(v3 + 24) = v4;
      v4 = (_QWORD *)a2[3];
LABEL_8:
      *v4 = v3;
      goto LABEL_9;
    }
LABEL_7:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = v4;
    goto LABEL_8;
  }
  v3 = a2[4];
  v4 = (_QWORD *)a2[5];
  v2 = a2 + 4;
  if (!v3)
    goto LABEL_7;
  *(_QWORD *)(v3 + 40) = v4;
  *(_QWORD *)a2[5] = v3;
LABEL_9:
  *v2 = 0;
  v2[1] = 0;
  v5 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 48))
  {
    a2[4] = 0;
    v6 = a2 + 4;
  }
  else
  {
    a2[2] = 0;
    v6 = a2 + 2;
  }
  v7 = *(_QWORD **)(v5 + 8);
  v6[1] = v7;
  *v7 = a2;
  *(_QWORD *)(v5 + 8) = v6;
  return 1;
}

void ___ZL40nw_http1_connection_process_input_framesP19nw_http1_connectionPjS1_P16nw_frame_array_sS3_b_block_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  _BOOL4 v25;
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  const char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  const char *v46;
  char *v47;
  _BOOL4 v48;
  uint64_t v49;
  char *v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  char *backtrace_string;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  const char *v84;
  char *v85;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  const char *v98;
  char *v99;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  _BOOL4 v105;
  const char *v106;
  uint64_t v107;
  int v108;
  int v109;
  NSObject *v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  NSObject *v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  NSObject *v124;
  _BOOL4 v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  char *v132;
  NSObject *v133;
  os_log_type_t v134;
  const char *v135;
  NSObject *v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  int v140;
  int v141;
  char *v142;
  _BOOL4 v143;
  char v144;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v147;
  __int16 v148;
  const char *v149;
  __int16 v150;
  _BYTE v151[20];
  char *v152;
  _BYTE v153[14];
  __int16 v154;
  uint64_t v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  if (a2 && a3)
  {
    v6 = *(_QWORD *)(a1 + 72);
    if ((*(_BYTE *)(v6 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v104 = __nwlog_obj();
        v105 = os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG);
        v6 = *(_QWORD *)(a1 + 72);
        if (v105)
        {
          v106 = (const char *)(v6 + 74);
          v107 = *(_QWORD *)(v6 + 488);
          v108 = *(_DWORD *)(*(_QWORD *)(v6 + 480) + 372);
          v109 = *(_DWORD *)(v6 + 860);
          if (v107)
            LODWORD(v107) = *(_DWORD *)(v107 + 424);
          *(_DWORD *)buf = 136448002;
          v147 = "nw_http1_connection_process_input_frames_block_invoke";
          v148 = 2082;
          v149 = v106;
          v150 = 2080;
          *(_QWORD *)v151 = " ";
          *(_WORD *)&v151[8] = 1024;
          *(_DWORD *)&v151[10] = v108;
          *(_WORD *)&v151[14] = 1024;
          *(_DWORD *)&v151[16] = v109;
          LOWORD(v152) = 1024;
          *(_DWORD *)((char *)&v152 + 2) = v107;
          HIWORD(v152) = 2048;
          *(_QWORD *)v153 = a2;
          *(_WORD *)&v153[8] = 1024;
          *(_DWORD *)&v153[10] = a3;
          _os_log_impl(&dword_182FBE000, v104, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> body bytes found (%p, %u bytes):", buf, 0x42u);
          v6 = *(_QWORD *)(a1 + 72);
        }
      }
    }
    v7 = *(_BYTE *)(v6 + 158) | (gLogDatapath == 0);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == a3)
    {
      if ((v7 & 1) == 0)
      {
        v110 = __nwlog_obj();
        if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
        {
          v111 = *(_QWORD *)(a1 + 72);
          v112 = (const char *)(v111 + 74);
          v113 = *(_QWORD *)(v111 + 488);
          v114 = *(_DWORD *)(*(_QWORD *)(v111 + 480) + 372);
          v115 = *(_DWORD *)(v111 + 860);
          if (v113)
            LODWORD(v113) = *(_DWORD *)(v113 + 424);
          v116 = *(_QWORD *)(a1 + 80);
          *(_DWORD *)buf = 136447746;
          v147 = "nw_http1_connection_process_input_frames_block_invoke";
          v148 = 2082;
          v149 = v112;
          v150 = 2080;
          *(_QWORD *)v151 = " ";
          *(_WORD *)&v151[8] = 1024;
          *(_DWORD *)&v151[10] = v114;
          *(_WORD *)&v151[14] = 1024;
          *(_DWORD *)&v151[16] = v115;
          LOWORD(v152) = 1024;
          *(_DWORD *)((char *)&v152 + 2) = v113;
          HIWORD(v152) = 2048;
          *(_QWORD *)v153 = v116;
          _os_log_impl(&dword_182FBE000, v110, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> entire frame is body, moving to destination array %p", buf, 0x3Cu);
        }
      }
      v8 = *(_QWORD *)(a1 + 80);
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      if (*(_BYTE *)(a1 + 88))
      {
        *(_QWORD *)(v9 + 32) = 0;
        v10 = v9 + 32;
      }
      else
      {
        *(_QWORD *)(v9 + 16) = 0;
        v10 = v9 + 16;
      }
      v37 = *(_QWORD **)(v8 + 8);
      *(_QWORD *)(v10 + 8) = v37;
      *v37 = v9;
      *(_QWORD *)(v8 + 8) = v10;
      v38 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v39 = *(unsigned int *)(v38 + 24) + 1;
      v40 = v39 << 31 >> 31;
      *(_DWORD *)(v38 + 24) = v39;
      if (v40 == v39 && (v40 & 0x8000000000000000) == 0)
      {
LABEL_70:
        v54 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v55 = *(_DWORD *)(v54 + 24);
        v56 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        *(_DWORD *)(v54 + 24) = v55 + v56;
        if (!__CFADD__(v55, v56))
        {
LABEL_89:
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
          return;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v57 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        v58 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
        *(_DWORD *)buf = 136446978;
        v147 = "nw_http1_connection_process_input_frames_block_invoke";
        v148 = 2082;
        v149 = "bytes_processed";
        v150 = 2048;
        *(_QWORD *)v151 = v57;
        *(_WORD *)&v151[8] = 2048;
        *(_QWORD *)&v151[10] = v58;
        v59 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v144 = 0;
        if (__nwlog_fault(v59, &type, &v144))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v60 = gLogObj;
            v61 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              v62 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
              v63 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              v147 = "nw_http1_connection_process_input_frames_block_invoke";
              v148 = 2082;
              v149 = "bytes_processed";
              v150 = 2048;
              *(_QWORD *)v151 = v62;
              *(_WORD *)&v151[8] = 2048;
              *(_QWORD *)&v151[10] = v63;
              v64 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_85:
              _os_log_impl(&dword_182FBE000, v60, v61, v64, buf, 0x2Au);
            }
          }
          else if (v144)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v60 = gLogObj;
            v61 = type;
            v66 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (backtrace_string)
            {
              if (v66)
              {
                v67 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
                v68 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
                *(_DWORD *)buf = 136447234;
                v147 = "nw_http1_connection_process_input_frames_block_invoke";
                v148 = 2082;
                v149 = "bytes_processed";
                v150 = 2048;
                *(_QWORD *)v151 = v67;
                *(_WORD *)&v151[8] = 2048;
                *(_QWORD *)&v151[10] = v68;
                *(_WORD *)&v151[18] = 2082;
                v152 = backtrace_string;
                _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(backtrace_string);
              goto LABEL_86;
            }
            if (v66)
            {
              v71 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
              v72 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              v147 = "nw_http1_connection_process_input_frames_block_invoke";
              v148 = 2082;
              v149 = "bytes_processed";
              v150 = 2048;
              *(_QWORD *)v151 = v71;
              *(_WORD *)&v151[8] = 2048;
              *(_QWORD *)&v151[10] = v72;
              v64 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_85;
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v60 = gLogObj;
            v61 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              v69 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
              v70 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              v147 = "nw_http1_connection_process_input_frames_block_invoke";
              v148 = 2082;
              v149 = "bytes_processed";
              v150 = 2048;
              *(_QWORD *)v151 = v69;
              *(_WORD *)&v151[8] = 2048;
              *(_QWORD *)&v151[10] = v70;
              v64 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_85;
            }
          }
        }
LABEL_86:
        if (v59)
          free(v59);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = -1;
        goto LABEL_89;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      *(_DWORD *)buf = 136446978;
      v147 = "nw_http1_connection_process_input_frames_block_invoke";
      v148 = 2082;
      v149 = "frames_processed";
      v150 = 2048;
      *(_QWORD *)v151 = 1;
      *(_WORD *)&v151[8] = 2048;
      *(_QWORD *)&v151[10] = v41;
      v42 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v144 = 0;
      if (__nwlog_fault(v42, &type, &v144))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v43 = gLogObj;
          v44 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v45 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
            *(_DWORD *)buf = 136446978;
            v147 = "nw_http1_connection_process_input_frames_block_invoke";
            v148 = 2082;
            v149 = "frames_processed";
            v150 = 2048;
            *(_QWORD *)v151 = 1;
            *(_WORD *)&v151[8] = 2048;
            *(_QWORD *)&v151[10] = v45;
            v46 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_66:
            _os_log_impl(&dword_182FBE000, v43, v44, v46, buf, 0x2Au);
          }
        }
        else if (v144)
        {
          v47 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v43 = gLogObj;
          v44 = type;
          v48 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v47)
          {
            if (v48)
            {
              v49 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
              *(_DWORD *)buf = 136447234;
              v147 = "nw_http1_connection_process_input_frames_block_invoke";
              v148 = 2082;
              v149 = "frames_processed";
              v150 = 2048;
              *(_QWORD *)v151 = 1;
              *(_WORD *)&v151[8] = 2048;
              *(_QWORD *)&v151[10] = v49;
              *(_WORD *)&v151[18] = 2082;
              v152 = v47;
              _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v47);
            goto LABEL_67;
          }
          if (v48)
          {
            v53 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
            *(_DWORD *)buf = 136446978;
            v147 = "nw_http1_connection_process_input_frames_block_invoke";
            v148 = 2082;
            v149 = "frames_processed";
            v150 = 2048;
            *(_QWORD *)v151 = 1;
            *(_WORD *)&v151[8] = 2048;
            *(_QWORD *)&v151[10] = v53;
            v46 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_66;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v43 = gLogObj;
          v44 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v52 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
            *(_DWORD *)buf = 136446978;
            v147 = "nw_http1_connection_process_input_frames_block_invoke";
            v148 = 2082;
            v149 = "frames_processed";
            v150 = 2048;
            *(_QWORD *)v151 = 1;
            *(_WORD *)&v151[8] = 2048;
            *(_QWORD *)&v151[10] = v52;
            v46 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_66;
          }
        }
      }
LABEL_67:
      if (v42)
        free(v42);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = -1;
      goto LABEL_70;
    }
    if ((v7 & 1) == 0)
    {
      v117 = __nwlog_obj();
      if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
      {
        v118 = *(_QWORD *)(a1 + 72);
        v119 = (const char *)(v118 + 74);
        v120 = *(_QWORD *)(v118 + 488);
        v121 = *(_DWORD *)(*(_QWORD *)(v118 + 480) + 372);
        v122 = *(_DWORD *)(v118 + 860);
        if (v120)
          LODWORD(v120) = *(_DWORD *)(v120 + 424);
        v123 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
        *(_DWORD *)buf = 136447746;
        v147 = "nw_http1_connection_process_input_frames_block_invoke";
        v148 = 2082;
        v149 = v119;
        v150 = 2080;
        *(_QWORD *)v151 = " ";
        *(_WORD *)&v151[8] = 1024;
        *(_DWORD *)&v151[10] = v121;
        *(_WORD *)&v151[14] = 1024;
        *(_DWORD *)&v151[16] = v122;
        LOWORD(v152) = 1024;
        *(_DWORD *)((char *)&v152 + 2) = v120;
        HIWORD(v152) = 2048;
        *(_QWORD *)v153 = v123;
        _os_log_impl(&dword_182FBE000, v117, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> partial frame is body, trimming frame %p", buf, 0x3Cu);
      }
    }
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v16 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v17 = a2 - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 158) & 1) != 0 || !gLogDatapath)
      goto LABEL_16;
    v124 = __nwlog_obj();
    v125 = os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG);
    v126 = *(_QWORD *)(a1 + 72);
    if (v125)
    {
      v127 = (const char *)(v126 + 74);
      v128 = *(_QWORD *)(v126 + 488);
      v129 = *(_DWORD *)(*(_QWORD *)(v126 + 480) + 372);
      v130 = *(_DWORD *)(v126 + 860);
      if (v128)
        LODWORD(v128) = *(_DWORD *)(v128 + 424);
      v131 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
      *(_DWORD *)buf = 136448258;
      v147 = "nw_http1_connection_process_input_frames_block_invoke";
      v148 = 2082;
      v149 = v127;
      v150 = 2080;
      *(_QWORD *)v151 = " ";
      *(_WORD *)&v151[8] = 1024;
      *(_DWORD *)&v151[10] = v129;
      *(_WORD *)&v151[14] = 1024;
      *(_DWORD *)&v151[16] = v130;
      LOWORD(v152) = 1024;
      *(_DWORD *)((char *)&v152 + 2) = v128;
      HIWORD(v152) = 1024;
      *(_DWORD *)v153 = v17;
      *(_WORD *)&v153[4] = 2048;
      *(_QWORD *)&v153[6] = v131;
      v154 = 2048;
      v155 = a2;
      _os_log_impl(&dword_182FBE000, v124, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> claiming %u bytes from beginning of frame (%p -> %p)", buf, 0x4Cu);
      v126 = *(_QWORD *)(a1 + 72);
    }
    if (v126)
    {
LABEL_16:
      nw_frame_claim(v16, a2, v17, 0);
      if (nw_frame_unclaimed_length((_DWORD *)v16) == a3)
      {
        if (!(*(_BYTE *)(*(_QWORD *)(a1 + 72) + 158) & 1 | (gLogDatapath == 0)))
        {
          v18 = __nwlog_obj();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            v19 = *(_QWORD *)(a1 + 72);
            v20 = (const char *)(v19 + 74);
            v21 = *(_QWORD *)(v19 + 488);
            v22 = *(_DWORD *)(*(_QWORD *)(v19 + 480) + 372);
            v23 = *(_DWORD *)(v19 + 860);
            if (v21)
              LODWORD(v21) = *(_DWORD *)(v21 + 424);
            *(_DWORD *)buf = 136447490;
            v147 = "nw_http1_connection_process_input_frames_block_invoke";
            v148 = 2082;
            v149 = v20;
            v150 = 2080;
            *(_QWORD *)v151 = " ";
            *(_WORD *)&v151[8] = 1024;
            *(_DWORD *)&v151[10] = v22;
            *(_WORD *)&v151[14] = 1024;
            *(_DWORD *)&v151[16] = v23;
            LOWORD(v152) = 1024;
            *(_DWORD *)((char *)&v152 + 2) = v21;
            _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> body extends to end of frame, continuing", buf, 0x32u);
          }
        }
LABEL_98:
        v73 = *(_QWORD *)(a1 + 80);
        if (*(_BYTE *)(a1 + 88))
        {
          *(_QWORD *)(v16 + 32) = 0;
          v74 = v16 + 32;
        }
        else
        {
          *(_QWORD *)(v16 + 16) = 0;
          v74 = v16 + 16;
        }
        v75 = *(uint64_t **)(v73 + 8);
        *(_QWORD *)(v74 + 8) = v75;
        *v75 = v16;
        *(_QWORD *)(v73 + 8) = v74;
        v76 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v77 = *(unsigned int *)(v76 + 24) + 1;
        v78 = v77 << 31 >> 31;
        *(_DWORD *)(v76 + 24) = v77;
        if (v78 == v77 && (v78 & 0x8000000000000000) == 0)
          goto LABEL_120;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v79 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        *(_DWORD *)buf = 136446978;
        v147 = "nw_http1_connection_process_input_frames_block_invoke";
        v148 = 2082;
        v149 = "frames_processed";
        v150 = 2048;
        *(_QWORD *)v151 = 1;
        *(_WORD *)&v151[8] = 2048;
        *(_QWORD *)&v151[10] = v79;
        v80 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v144 = 0;
        if (__nwlog_fault(v80, &type, &v144))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v81 = gLogObj;
            v82 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              v83 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              v147 = "nw_http1_connection_process_input_frames_block_invoke";
              v148 = 2082;
              v149 = "frames_processed";
              v150 = 2048;
              *(_QWORD *)v151 = 1;
              *(_WORD *)&v151[8] = 2048;
              *(_QWORD *)&v151[10] = v83;
              v84 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_116:
              _os_log_impl(&dword_182FBE000, v81, v82, v84, buf, 0x2Au);
            }
          }
          else if (v144)
          {
            v85 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v81 = gLogObj;
            v82 = type;
            v86 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (v85)
            {
              if (v86)
              {
                v87 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
                *(_DWORD *)buf = 136447234;
                v147 = "nw_http1_connection_process_input_frames_block_invoke";
                v148 = 2082;
                v149 = "frames_processed";
                v150 = 2048;
                *(_QWORD *)v151 = 1;
                *(_WORD *)&v151[8] = 2048;
                *(_QWORD *)&v151[10] = v87;
                *(_WORD *)&v151[18] = 2082;
                v152 = v85;
                _os_log_impl(&dword_182FBE000, v81, v82, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v85);
              goto LABEL_117;
            }
            if (v86)
            {
              v89 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              v147 = "nw_http1_connection_process_input_frames_block_invoke";
              v148 = 2082;
              v149 = "frames_processed";
              v150 = 2048;
              *(_QWORD *)v151 = 1;
              *(_WORD *)&v151[8] = 2048;
              *(_QWORD *)&v151[10] = v89;
              v84 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_116;
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v81 = gLogObj;
            v82 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              v88 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              v147 = "nw_http1_connection_process_input_frames_block_invoke";
              v148 = 2082;
              v149 = "frames_processed";
              v150 = 2048;
              *(_QWORD *)v151 = 1;
              *(_WORD *)&v151[8] = 2048;
              *(_QWORD *)&v151[10] = v88;
              v84 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_116;
            }
          }
        }
LABEL_117:
        if (v80)
          free(v80);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = -1;
LABEL_120:
        v90 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v91 = *(_DWORD *)(v90 + 24);
        *(_DWORD *)(v90 + 24) = v91 + a3;
        if (!__CFADD__(v91, a3))
          return;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v92 = a3;
        v93 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
        *(_DWORD *)buf = 136446978;
        v147 = "nw_http1_connection_process_input_frames_block_invoke";
        v148 = 2082;
        v149 = "bytes_processed";
        v150 = 2048;
        *(_QWORD *)v151 = a3;
        *(_WORD *)&v151[8] = 2048;
        *(_QWORD *)&v151[10] = v93;
        v94 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v144 = 0;
        if (!__nwlog_fault(v94, &type, &v144))
          goto LABEL_136;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v95 = gLogObj;
          v96 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v97 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
            *(_DWORD *)buf = 136446978;
            v147 = "nw_http1_connection_process_input_frames_block_invoke";
            v148 = 2082;
            v149 = "bytes_processed";
            v150 = 2048;
            *(_QWORD *)v151 = v92;
            *(_WORD *)&v151[8] = 2048;
            *(_QWORD *)&v151[10] = v97;
            v98 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_135:
            _os_log_impl(&dword_182FBE000, v95, v96, v98, buf, 0x2Au);
          }
        }
        else if (v144)
        {
          v99 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v95 = gLogObj;
          v96 = type;
          v100 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v99)
          {
            if (v100)
            {
              v101 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
              *(_DWORD *)buf = 136447234;
              v147 = "nw_http1_connection_process_input_frames_block_invoke";
              v148 = 2082;
              v149 = "bytes_processed";
              v150 = 2048;
              *(_QWORD *)v151 = v92;
              *(_WORD *)&v151[8] = 2048;
              *(_QWORD *)&v151[10] = v101;
              *(_WORD *)&v151[18] = 2082;
              v152 = v99;
              _os_log_impl(&dword_182FBE000, v95, v96, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v99);
            goto LABEL_136;
          }
          if (v100)
          {
            v103 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
            *(_DWORD *)buf = 136446978;
            v147 = "nw_http1_connection_process_input_frames_block_invoke";
            v148 = 2082;
            v149 = "bytes_processed";
            v150 = 2048;
            *(_QWORD *)v151 = v92;
            *(_WORD *)&v151[8] = 2048;
            *(_QWORD *)&v151[10] = v103;
            v98 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_135;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v95 = gLogObj;
          v96 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v102 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
            *(_DWORD *)buf = 136446978;
            v147 = "nw_http1_connection_process_input_frames_block_invoke";
            v148 = 2082;
            v149 = "bytes_processed";
            v150 = 2048;
            *(_QWORD *)v151 = v92;
            *(_WORD *)&v151[8] = 2048;
            *(_QWORD *)&v151[10] = v102;
            v98 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_135;
          }
        }
LABEL_136:
        if (v94)
          free(v94);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = -1;
        return;
      }
      if (!(*(_BYTE *)(*(_QWORD *)(a1 + 72) + 158) & 1 | (gLogDatapath == 0)))
      {
        v136 = __nwlog_obj();
        if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
        {
          v137 = *(_QWORD *)(a1 + 72);
          v138 = (const char *)(v137 + 74);
          v139 = *(_QWORD *)(v137 + 488);
          v140 = *(_DWORD *)(*(_QWORD *)(v137 + 480) + 372);
          v141 = *(_DWORD *)(v137 + 860);
          if (v139)
            LODWORD(v139) = *(_DWORD *)(v139 + 424);
          *(_DWORD *)buf = 136447746;
          v147 = "nw_http1_connection_process_input_frames_block_invoke";
          v148 = 2082;
          v149 = v138;
          v150 = 2080;
          *(_QWORD *)v151 = " ";
          *(_WORD *)&v151[8] = 1024;
          *(_DWORD *)&v151[10] = v140;
          *(_WORD *)&v151[14] = 1024;
          *(_DWORD *)&v151[16] = v141;
          LOWORD(v152) = 1024;
          *(_DWORD *)((char *)&v152 + 2) = v139;
          HIWORD(v152) = 2048;
          *(_QWORD *)v153 = v16;
          _os_log_impl(&dword_182FBE000, v136, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> bytes left over after trimming, splitting frame %p", buf, 0x3Cu);
        }
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v16;
      v16 = nw_frame_split((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), a3);
      if (v16)
      {
LABEL_97:
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = nw_frame_unclaimed_bytes(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40)+ 8)+ 24), (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)+ 24));
        goto LABEL_98;
      }
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v26 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          v27 = *(_QWORD *)(a1 + 72);
          v28 = (const char *)(v27 + 74);
          v29 = *(_QWORD *)(v27 + 488);
          v30 = *(_DWORD *)(*(_QWORD *)(v27 + 480) + 372);
          v31 = *(_DWORD *)(v27 + 860);
          if (v29)
            LODWORD(v29) = *(_DWORD *)(v29 + 424);
          v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
          *(_DWORD *)buf = 136448002;
          v147 = "nw_http1_connection_process_input_frames_block_invoke";
          v148 = 2082;
          v149 = v28;
          v150 = 2080;
          *(_QWORD *)v151 = " ";
          *(_WORD *)&v151[8] = 1024;
          *(_DWORD *)&v151[10] = v30;
          *(_WORD *)&v151[14] = 1024;
          *(_DWORD *)&v151[16] = v31;
          LOWORD(v152) = 1024;
          *(_DWORD *)((char *)&v152 + 2) = v29;
          HIWORD(v152) = 2048;
          *(_QWORD *)v153 = v32;
          *(_WORD *)&v153[8] = 1024;
          *(_DWORD *)&v153[10] = a3;
          _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> failed to split frame %p at offset %u", buf, 0x42u);
        }
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v147 = "nw_http1_connection_process_input_frames_block_invoke";
      v33 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v144 = 0;
      if (__nwlog_fault(v33, &type, &v144))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v34 = gLogObj;
          v35 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_95;
          *(_DWORD *)buf = 136446210;
          v147 = "nw_http1_connection_process_input_frames_block_invoke";
          v36 = "%{public}s nw_frame_split with partial frame failed";
          goto LABEL_94;
        }
        if (!v144)
        {
          v34 = __nwlog_obj();
          v35 = type;
          if (!os_log_type_enabled(v34, type))
            goto LABEL_95;
          *(_DWORD *)buf = 136446210;
          v147 = "nw_http1_connection_process_input_frames_block_invoke";
          v36 = "%{public}s nw_frame_split with partial frame failed, backtrace limit exceeded";
          goto LABEL_94;
        }
        v50 = (char *)__nw_create_backtrace_string();
        v34 = __nwlog_obj();
        v35 = type;
        v51 = os_log_type_enabled(v34, type);
        if (v50)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            v147 = "nw_http1_connection_process_input_frames_block_invoke";
            v148 = 2082;
            v149 = v50;
            _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s nw_frame_split with partial frame failed, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v50);
          goto LABEL_95;
        }
        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          v147 = "nw_http1_connection_process_input_frames_block_invoke";
          v36 = "%{public}s nw_frame_split with partial frame failed, no backtrace";
LABEL_94:
          _os_log_impl(&dword_182FBE000, v34, v35, v36, buf, 0xCu);
        }
      }
LABEL_95:
      if (v33)
        free(v33);
      goto LABEL_97;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v147 = "nw_http1_get_output_protocol";
    v132 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v144 = 0;
    if (__nwlog_fault(v132, &type, &v144))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v133 = __nwlog_obj();
        v134 = type;
        if (!os_log_type_enabled(v133, type))
          goto LABEL_175;
        *(_DWORD *)buf = 136446210;
        v147 = "nw_http1_get_output_protocol";
        v135 = "%{public}s called with null connection";
        goto LABEL_174;
      }
      if (!v144)
      {
        v133 = __nwlog_obj();
        v134 = type;
        if (!os_log_type_enabled(v133, type))
          goto LABEL_175;
        *(_DWORD *)buf = 136446210;
        v147 = "nw_http1_get_output_protocol";
        v135 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_174;
      }
      v142 = (char *)__nw_create_backtrace_string();
      v133 = __nwlog_obj();
      v134 = type;
      v143 = os_log_type_enabled(v133, type);
      if (v142)
      {
        if (v143)
        {
          *(_DWORD *)buf = 136446466;
          v147 = "nw_http1_get_output_protocol";
          v148 = 2082;
          v149 = v142;
          _os_log_impl(&dword_182FBE000, v133, v134, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v142);
        goto LABEL_175;
      }
      if (v143)
      {
        *(_DWORD *)buf = 136446210;
        v147 = "nw_http1_get_output_protocol";
        v135 = "%{public}s called with null connection, no backtrace";
LABEL_174:
        _os_log_impl(&dword_182FBE000, v133, v134, v135, buf, 0xCu);
      }
    }
LABEL_175:
    if (v132)
      free(v132);
    goto LABEL_16;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446722;
  v147 = "nw_http1_connection_process_input_frames_block_invoke";
  v148 = 2048;
  v149 = (const char *)a2;
  v150 = 1024;
  *(_DWORD *)v151 = a3;
  v11 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v144 = 0;
  if (__nwlog_fault(v11, &type, &v144))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446722;
      v147 = "nw_http1_connection_process_input_frames_block_invoke";
      v148 = 2048;
      v149 = (const char *)a2;
      v150 = 1024;
      *(_DWORD *)v151 = a3;
      v14 = "%{public}s unexpected values for body_start (%p) or body_length (%u)";
      goto LABEL_54;
    }
    if (!v144)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446722;
      v147 = "nw_http1_connection_process_input_frames_block_invoke";
      v148 = 2048;
      v149 = (const char *)a2;
      v150 = 1024;
      *(_DWORD *)v151 = a3;
      v14 = "%{public}s unexpected values for body_start (%p) or body_length (%u), backtrace limit exceeded";
      goto LABEL_54;
    }
    v24 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = gLogObj;
    v13 = type;
    v25 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v24)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446978;
        v147 = "nw_http1_connection_process_input_frames_block_invoke";
        v148 = 2048;
        v149 = (const char *)a2;
        v150 = 1024;
        *(_DWORD *)v151 = a3;
        *(_WORD *)&v151[4] = 2082;
        *(_QWORD *)&v151[6] = v24;
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s unexpected values for body_start (%p) or body_length (%u), dumping backtrace:%{public}s", buf, 0x26u);
      }
      free(v24);
      goto LABEL_55;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446722;
      v147 = "nw_http1_connection_process_input_frames_block_invoke";
      v148 = 2048;
      v149 = (const char *)a2;
      v150 = 1024;
      *(_DWORD *)v151 = a3;
      v14 = "%{public}s unexpected values for body_start (%p) or body_length (%u), no backtrace";
LABEL_54:
      _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0x1Cu);
    }
  }
LABEL_55:
  if (v11)
    free(v11);
}

uint64_t nw_http1_connection_execute_parser(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unsigned int v7;
  __int16 v10;
  uint64_t v11;
  int v12;
  __int16 *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  NSObject *v39;
  uint64_t v40;
  int v41;
  int v42;
  NSObject *v43;
  uint64_t v44;
  int v45;
  int v46;
  NSObject *v47;
  uint64_t v48;
  int v49;
  int v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  const char *v54;
  char *backtrace_string;
  _BOOL4 v56;
  const char *v57;
  _BOOL4 v58;
  _BOOL4 v59;
  _BOOL4 v60;
  char v61;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  char *v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  unsigned int v78;
  __int16 v79;
  unsigned __int8 *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_http1_connection_execute_parser";
    v51 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (!__nwlog_fault(v51, &type, &v61))
      goto LABEL_87;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v52 = __nwlog_obj();
      v53 = type;
      if (!os_log_type_enabled(v52, type))
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v64 = "nw_http1_connection_execute_parser";
      v54 = "%{public}s called with null bytes";
      goto LABEL_86;
    }
    if (!v61)
    {
      v52 = __nwlog_obj();
      v53 = type;
      if (!os_log_type_enabled(v52, type))
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v64 = "nw_http1_connection_execute_parser";
      v54 = "%{public}s called with null bytes, backtrace limit exceeded";
      goto LABEL_86;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v52 = __nwlog_obj();
    v53 = type;
    v58 = os_log_type_enabled(v52, type);
    if (!backtrace_string)
    {
      if (!v58)
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v64 = "nw_http1_connection_execute_parser";
      v54 = "%{public}s called with null bytes, no backtrace";
      goto LABEL_86;
    }
    if (!v58)
      goto LABEL_81;
    *(_DWORD *)buf = 136446466;
    v64 = "nw_http1_connection_execute_parser";
    v65 = 2082;
    v66 = backtrace_string;
    v57 = "%{public}s called with null bytes, dumping backtrace:%{public}s";
    goto LABEL_80;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_http1_connection_execute_parser";
    v51 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (!__nwlog_fault(v51, &type, &v61))
      goto LABEL_87;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v52 = __nwlog_obj();
      v53 = type;
      if (!os_log_type_enabled(v52, type))
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v64 = "nw_http1_connection_execute_parser";
      v54 = "%{public}s called with null bytes_parsed";
      goto LABEL_86;
    }
    if (!v61)
    {
      v52 = __nwlog_obj();
      v53 = type;
      if (!os_log_type_enabled(v52, type))
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v64 = "nw_http1_connection_execute_parser";
      v54 = "%{public}s called with null bytes_parsed, backtrace limit exceeded";
      goto LABEL_86;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v52 = __nwlog_obj();
    v53 = type;
    v59 = os_log_type_enabled(v52, type);
    if (!backtrace_string)
    {
      if (!v59)
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v64 = "nw_http1_connection_execute_parser";
      v54 = "%{public}s called with null bytes_parsed, no backtrace";
      goto LABEL_86;
    }
    if (!v59)
      goto LABEL_81;
    *(_DWORD *)buf = 136446466;
    v64 = "nw_http1_connection_execute_parser";
    v65 = 2082;
    v66 = backtrace_string;
    v57 = "%{public}s called with null bytes_parsed, dumping backtrace:%{public}s";
    goto LABEL_80;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_http1_connection_execute_parser";
    v51 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (!__nwlog_fault(v51, &type, &v61))
      goto LABEL_87;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v52 = __nwlog_obj();
      v53 = type;
      if (!os_log_type_enabled(v52, type))
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v64 = "nw_http1_connection_execute_parser";
      v54 = "%{public}s called with null body_block";
      goto LABEL_86;
    }
    if (!v61)
    {
      v52 = __nwlog_obj();
      v53 = type;
      if (!os_log_type_enabled(v52, type))
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v64 = "nw_http1_connection_execute_parser";
      v54 = "%{public}s called with null body_block, backtrace limit exceeded";
      goto LABEL_86;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v52 = __nwlog_obj();
    v53 = type;
    v60 = os_log_type_enabled(v52, type);
    if (!backtrace_string)
    {
      if (!v60)
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v64 = "nw_http1_connection_execute_parser";
      v54 = "%{public}s called with null body_block, no backtrace";
      goto LABEL_86;
    }
    if (!v60)
      goto LABEL_81;
    *(_DWORD *)buf = 136446466;
    v64 = "nw_http1_connection_execute_parser";
    v65 = 2082;
    v66 = backtrace_string;
    v57 = "%{public}s called with null body_block, dumping backtrace:%{public}s";
    goto LABEL_80;
  }
  v7 = a3;
  if ((*(_WORD *)(a1 + 872) & 0x200) != 0)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(a5 + 16))(a5, a2, a3);
    return 1;
  }
  *(_QWORD *)(a1 + 792) = a5;
  v10 = *(_WORD *)(*(_QWORD *)(a1 + 488) + 428);
  v11 = a3;
  v12 = *(_DWORD *)(a1 + 224);
  if (!v12)
  {
    v20 = &a2[a3];
    if (*(_QWORD *)(a1 + 208))
      *(_QWORD *)(a1 + 208) = a2;
    v21 = llhttp__internal__run(a1 + 200, a2, &a2[a3]);
    if (v21)
    {
      *(_QWORD *)(a1 + 256) = v21;
      v22 = *(_QWORD *)(a1 + 208);
      if (!v22
        || (v12 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(a1 + 216))(a1 + 200, v22, &a2[v11])) == 0)
      {
        *(_QWORD *)(a1 + 792) = 0;
        goto LABEL_50;
      }
      *(_DWORD *)(a1 + 224) = v12;
      *(_QWORD *)(a1 + 240) = v20;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 224);
    }
  }
  v13 = (__int16 *)(a1 + 872);
  *(_QWORD *)(a1 + 792) = 0;
  if (v12 == 22)
  {
    v23 = *(_QWORD *)(a1 + 240) - (_QWORD)a2;
    if ((*(_BYTE *)(a1 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v24 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        v25 = *(_QWORD *)(a1 + 488);
        v26 = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 372);
        v27 = *(_DWORD *)(a1 + 860);
        if (v25)
          LODWORD(v25) = *(_DWORD *)(v25 + 424);
        *(_DWORD *)buf = 136447746;
        v64 = "nw_http1_connection_execute_parser";
        v65 = 2082;
        v66 = (char *)(a1 + 74);
        v67 = 2080;
        v68 = " ";
        v69 = 1024;
        v70 = v26;
        v71 = 1024;
        v72 = v27;
        v73 = 1024;
        v74 = v25;
        v75 = 1024;
        LODWORD(v76) = v23;
        _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> upgraded after parsing %u bytes", buf, 0x38u);
      }
    }
    *v13 |= 0x200u;
    v11 = v23;
    if (v7 > v23)
      (*(void (**)(uint64_t, unsigned __int8 *, _QWORD))(a5 + 16))(a5, &a2[v23], v7 - v23);
    *a4 = v7;
    goto LABEL_56;
  }
  if (v12 != 21)
  {
    if (v12)
    {
      if ((*(_BYTE *)(a1 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          v15 = *(_QWORD *)(a1 + 488);
          v16 = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 372);
          v17 = *(_DWORD *)(a1 + 860);
          if (v15)
            LODWORD(v15) = *(_DWORD *)(v15 + 424);
          v18 = *(_QWORD *)(a1 + 232);
          *(_DWORD *)buf = 136448258;
          v64 = "nw_http1_connection_execute_parser";
          v65 = 2082;
          v66 = (char *)(a1 + 74);
          v67 = 2080;
          v68 = " ";
          v69 = 1024;
          v70 = v16;
          v71 = 1024;
          v72 = v17;
          v73 = 1024;
          v74 = v15;
          v75 = 2080;
          v76 = v18;
          v77 = 1040;
          v78 = v7;
          v79 = 2096;
          v80 = a2;
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Failed to parse bytes (%s): \n%{network:data}.*P", buf, 0x4Cu);
        }
      }
      result = 0;
      *a4 = 0;
      return result;
    }
LABEL_50:
    if ((*(_BYTE *)(a1 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v43 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        v44 = *(_QWORD *)(a1 + 488);
        v45 = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 372);
        v46 = *(_DWORD *)(a1 + 860);
        if (v44)
          LODWORD(v44) = *(_DWORD *)(v44 + 424);
        *(_DWORD *)buf = 136447746;
        v64 = "nw_http1_connection_execute_parser";
        v65 = 2082;
        v66 = (char *)(a1 + 74);
        v67 = 2080;
        v68 = " ";
        v69 = 1024;
        v70 = v45;
        v71 = 1024;
        v72 = v46;
        v73 = 1024;
        v74 = v44;
        v75 = 1024;
        LODWORD(v76) = v7;
        _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> parsed %u bytes", buf, 0x38u);
      }
    }
    *a4 = v7;
    if ((v10 & 1) == 0)
      goto LABEL_56;
LABEL_68:
    if (v11)
      nw_http_transaction_metadata_increment_inbound_body_transfer_size(*(void **)(*(_QWORD *)(a1 + 488) + 352), v11);
    return 1;
  }
  v28 = *(_QWORD *)(a1 + 240);
  v29 = v28 - (_DWORD)a2;
  *a4 = v28 - (_DWORD)a2;
  if ((*(_BYTE *)(a1 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v30 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v31 = *(_QWORD *)(a1 + 488);
      v32 = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 372);
      v33 = *(_DWORD *)(a1 + 860);
      if (v31)
        LODWORD(v31) = *(_DWORD *)(v31 + 424);
      v34 = *a4;
      *(_DWORD *)buf = 136447746;
      v64 = "nw_http1_connection_execute_parser";
      v65 = 2082;
      v66 = (char *)(a1 + 74);
      v67 = 2080;
      v68 = " ";
      v69 = 1024;
      v70 = v32;
      v71 = 1024;
      v72 = v33;
      v73 = 1024;
      v74 = v31;
      v75 = 1024;
      LODWORD(v76) = v34;
      _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> paused parser after processing %u bytes", buf, 0x38u);
    }
    v29 = *a4;
  }
  v11 = v29;
  v35 = *v13;
  if ((v10 & 1) == 0)
  {
    if ((v35 & 4) != 0)
    {
LABEL_56:
      if (v11)
        nw_http_transaction_metadata_increment_inbound_header_size(*(void **)(*(_QWORD *)(a1 + 488) + 352), v11);
      return 1;
    }
    v36 = *(_QWORD *)(a1 + 488);
    if ((_DWORD)v11)
    {
      nw_http_transaction_metadata_increment_inbound_header_size(*(void **)(v36 + 352), v11);
      v36 = *(_QWORD *)(a1 + 488);
    }
    v37 = *(_WORD *)(v36 + 428);
    v38 = *(_BYTE *)(a1 + 158);
    if ((v37 & 1) != 0)
    {
      if ((*(_BYTE *)(a1 + 158) & 1) == 0)
      {
        v39 = __nwlog_obj();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          v40 = *(_QWORD *)(a1 + 488);
          v41 = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 372);
          v42 = *(_DWORD *)(a1 + 860);
          if (v40)
            LODWORD(v40) = *(_DWORD *)(v40 + 424);
          *(_DWORD *)buf = 136447490;
          v64 = "nw_http1_connection_execute_parser";
          v65 = 2082;
          v66 = (char *)(a1 + 74);
          v67 = 2080;
          v68 = " ";
          v69 = 1024;
          v70 = v41;
          v71 = 1024;
          v72 = v42;
          v73 = 1024;
          v74 = v40;
          _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> resuming after processing headers", buf, 0x32u);
        }
      }
      if (*(_DWORD *)(a1 + 224) == 21)
        *(_DWORD *)(a1 + 224) = 0;
      *(_DWORD *)buf = 0;
      result = nw_http1_connection_execute_parser(a1, v28, v7 - *a4, buf, a5);
      *a4 += *(_DWORD *)buf;
      return result;
    }
LABEL_62:
    if ((v38 & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v47 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        v48 = *(_QWORD *)(a1 + 488);
        v49 = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 372);
        v50 = *(_DWORD *)(a1 + 860);
        if (v48)
          LODWORD(v48) = *(_DWORD *)(v48 + 424);
        *(_DWORD *)buf = 136447490;
        v64 = "nw_http1_connection_execute_parser";
        v65 = 2082;
        v66 = (char *)(a1 + 74);
        v67 = 2080;
        v68 = " ";
        v69 = 1024;
        v70 = v49;
        v71 = 1024;
        v72 = v50;
        v73 = 1024;
        v74 = v48;
        _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> got informational response", buf, 0x32u);
      }
    }
    *v13 |= 0x10u;
    return 1;
  }
  if ((v35 & 4) != 0)
    goto LABEL_68;
  if ((*(_WORD *)(*(_QWORD *)(a1 + 488) + 428) & 1) == 0)
  {
    v38 = *(_BYTE *)(a1 + 158);
    goto LABEL_62;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v64 = "nw_http1_connection_execute_parser";
  v51 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v61 = 0;
  if (!__nwlog_fault(v51, &type, &v61))
    goto LABEL_87;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v52 = __nwlog_obj();
    v53 = type;
    if (os_log_type_enabled(v52, type))
    {
      *(_DWORD *)buf = 136446210;
      v64 = "nw_http1_connection_execute_parser";
      v54 = "%{public}s paused in the middle of parsing the body";
LABEL_86:
      _os_log_impl(&dword_182FBE000, v52, v53, v54, buf, 0xCu);
      goto LABEL_87;
    }
    goto LABEL_87;
  }
  if (v61)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    v52 = __nwlog_obj();
    v53 = type;
    v56 = os_log_type_enabled(v52, type);
    if (!backtrace_string)
    {
      if (v56)
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_http1_connection_execute_parser";
        v54 = "%{public}s paused in the middle of parsing the body, no backtrace";
        goto LABEL_86;
      }
      goto LABEL_87;
    }
    if (!v56)
    {
LABEL_81:
      free(backtrace_string);
      goto LABEL_87;
    }
    *(_DWORD *)buf = 136446466;
    v64 = "nw_http1_connection_execute_parser";
    v65 = 2082;
    v66 = backtrace_string;
    v57 = "%{public}s paused in the middle of parsing the body, dumping backtrace:%{public}s";
LABEL_80:
    _os_log_impl(&dword_182FBE000, v52, v53, v57, buf, 0x16u);
    goto LABEL_81;
  }
  v52 = __nwlog_obj();
  v53 = type;
  if (os_log_type_enabled(v52, type))
  {
    *(_DWORD *)buf = 136446210;
    v64 = "nw_http1_connection_execute_parser";
    v54 = "%{public}s paused in the middle of parsing the body, backtrace limit exceeded";
    goto LABEL_86;
  }
LABEL_87:
  if (v51)
    free(v51);
  return 0;
}

void nw_http1_connection_inbound_frame_finalizer(nw_frame *a1, int a2, void *a3)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  int v17;
  char *backtrace_string;
  _BOOL4 v19;
  char *v20;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  nw_frame *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http1_connection_inbound_frame_finalizer";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_connection_inbound_frame_finalizer";
      v13 = "%{public}s called with null frame";
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http1_connection_inbound_frame_finalizer";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_76:
        if (!v10)
          return;
        goto LABEL_77;
      }
      if (!v19)
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_connection_inbound_frame_finalizer";
      v13 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_connection_inbound_frame_finalizer";
      v13 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    goto LABEL_75;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http1_connection_inbound_frame_finalizer";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25))
      goto LABEL_76;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        v11 = __nwlog_obj();
        v12 = type;
        if (!os_log_type_enabled(v11, type))
          goto LABEL_76;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http1_connection_inbound_frame_finalizer";
        v13 = "%{public}s called with null context, backtrace limit exceeded";
        goto LABEL_75;
      }
      v20 = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v21 = os_log_type_enabled(v11, type);
      if (!v20)
      {
        if (!v21)
          goto LABEL_76;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http1_connection_inbound_frame_finalizer";
        v13 = "%{public}s called with null context, no backtrace";
        goto LABEL_75;
      }
      if (!v21)
        goto LABEL_57;
      *(_DWORD *)buf = 136446466;
      v28 = "nw_http1_connection_inbound_frame_finalizer";
      v29 = 2082;
      v30 = v20;
      v22 = "%{public}s called with null context, dumping backtrace:%{public}s";
      goto LABEL_56;
    }
    v11 = __nwlog_obj();
    v12 = type;
    if (!os_log_type_enabled(v11, type))
      goto LABEL_76;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http1_connection_inbound_frame_finalizer";
    v13 = "%{public}s called with null context";
LABEL_75:
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    goto LABEL_76;
  }
  if ((*((_WORD *)a1 + 102) & 4) == 0)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http1_connection_inbound_frame_finalizer";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_connection_inbound_frame_finalizer";
      v13 = "%{public}s called with null metadata";
      goto LABEL_75;
    }
    if (!v25)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_connection_inbound_frame_finalizer";
      v13 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_75;
    }
    v20 = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v23 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (!v23)
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_connection_inbound_frame_finalizer";
      v13 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_75;
    }
    if (!v23)
      goto LABEL_57;
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http1_connection_inbound_frame_finalizer";
    v29 = 2082;
    v30 = v20;
    v22 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_56:
    _os_log_impl(&dword_182FBE000, v11, v12, v22, buf, 0x16u);
    goto LABEL_57;
  }
  v5 = *((_QWORD *)a1 + 26);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http1_connection_inbound_frame_finalizer";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_connection_inbound_frame_finalizer";
      v13 = "%{public}s called with null http1_connection";
      goto LABEL_75;
    }
    if (!v25)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_connection_inbound_frame_finalizer";
      v13 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_75;
    }
    v20 = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (!v24)
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http1_connection_inbound_frame_finalizer";
      v13 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_75;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_http1_connection_inbound_frame_finalizer";
      v29 = 2082;
      v30 = v20;
      v22 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_56;
    }
LABEL_57:
    free(v20);
    if (!v10)
      return;
LABEL_77:
    free(v10);
    return;
  }
  if ((*(_BYTE *)(v5 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v14 = __nwlog_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v15 = *(_QWORD *)(v5 + 488);
        v16 = *(_DWORD *)(*(_QWORD *)(v5 + 480) + 372);
        v17 = *(_DWORD *)(v5 + 860);
        if (v15)
          LODWORD(v15) = *(_DWORD *)(v15 + 424);
        *(_DWORD *)buf = 136448258;
        v28 = "nw_http1_connection_inbound_frame_finalizer";
        v29 = 2082;
        v30 = (char *)(v5 + 74);
        v31 = 2080;
        v32 = " ";
        v33 = 1024;
        v34 = v16;
        v35 = 1024;
        v36 = v17;
        v37 = 1024;
        v38 = v15;
        v39 = 2048;
        v40 = a1;
        v41 = 1024;
        v42 = a2;
        v43 = 2048;
        v44 = a3;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing input frame %p (success %u, context %p)", buf, 0x4Cu);
      }
    }
  }
  v7 = *((_QWORD *)a1 + 2);
  v8 = (_QWORD *)*((_QWORD *)a1 + 3);
  if (v7)
  {
    *(_QWORD *)(v7 + 24) = v8;
    v8 = (_QWORD *)*((_QWORD *)a1 + 3);
  }
  else
  {
    *(_QWORD *)(v5 + 672) = v8;
  }
  *v8 = v7;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 10) = 0;
  *((_QWORD *)a1 + 11) = 0;
  if (a2)
  {
    nw_frame_cache_return_frame(v5 + 696, (uint64_t)a1);
  }
  else
  {
    if ((*((_WORD *)a1 + 102) & 0x100) == 0
      || !g_channel_check_validity
      || g_channel_check_validity(a1, 0))
    {
      v9 = (void *)*((_QWORD *)a1 + 14);
      if (v9)
        free(v9);
    }
    nw_frame_reset((uint64_t)a1, 0, 0, 0, 0);
    os_release(a1);
  }
}

uint64_t ___ZL34nw_protocol_http1_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;

  v2 = *(_QWORD *)(a1 + 40);
  if ((*(_WORD *)(v2 + 872) & 4) != 0 && !*(_QWORD *)(v2 + 632))
    v3 = (**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 8) == a2) << 9;
  else
    v3 = 0;
  *(_WORD *)(*(_QWORD *)(a1 + 32) + 428) = *(_WORD *)(*(_QWORD *)(a1 + 32) + 428) & 0xFDFF | v3;
  *(_BYTE *)(a2 + 186) = *(_BYTE *)(a2 + 186) & 0x7F | ((*(_BYTE *)(a1 + 56) != 0) << 7);
  nw_frame_set_metadata(a2, *(NSObject **)(*(_QWORD *)(a1 + 32) + 368), 1, (*(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 428) >> 9) & 1);
  return 1;
}

uint64_t ___ZL22nw_http1_stream_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

void nw_http1_stream::~nw_http1_stream(nw_http1_stream *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 52) = 0;
  }
  if ((*((_BYTE *)this + 408) & 1) != 0)
  {
    v3 = (void *)*((_QWORD *)this + 50);
    if (v3)
      os_release(v3);
  }
  *((_QWORD *)this + 50) = 0;
  if ((*((_BYTE *)this + 392) & 1) != 0)
  {
    v4 = (void *)*((_QWORD *)this + 48);
    if (v4)
      os_release(v4);
  }
  *((_QWORD *)this + 48) = 0;
  if ((*((_BYTE *)this + 376) & 1) != 0)
  {
    v5 = (void *)*((_QWORD *)this + 46);
    if (v5)
      os_release(v5);
  }
  *((_QWORD *)this + 46) = 0;
  if ((*((_BYTE *)this + 360) & 1) != 0)
  {
    v6 = (void *)*((_QWORD *)this + 44);
    if (v6)
      os_release(v6);
  }
  *((_QWORD *)this + 44) = 0;
  if ((*((_BYTE *)this + 344) & 1) != 0)
  {
    v7 = (void *)*((_QWORD *)this + 42);
    if (v7)
      os_release(v7);
  }
  *((_QWORD *)this + 42) = 0;
  if ((*((_BYTE *)this + 328) & 1) != 0)
  {
    v8 = (void *)*((_QWORD *)this + 40);
    if (v8)
      os_release(v8);
  }
  *((_QWORD *)this + 40) = 0;
  if ((*((_BYTE *)this + 272) & 1) != 0)
  {
    v9 = (void *)*((_QWORD *)this + 33);
    if (v9)
      os_release(v9);
  }
  *((_QWORD *)this + 33) = 0;
}

void ___ZL23nw_protocol_http1_resetP11nw_protocolS0__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  const void *v65;
  void *v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  const char *v70;
  uint64_t v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  const char *v75;
  char *v76;
  NSObject *v77;
  os_log_type_t v78;
  const char *v79;
  NSObject *v80;
  uint64_t v81;
  int v82;
  int v83;
  NSObject *v84;
  NSObject *v85;
  uint64_t v86;
  int v87;
  int v88;
  NSObject *v89;
  NSObject *v90;
  uint64_t v91;
  int v92;
  int v93;
  NSObject *v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  NSObject *v99;
  int v100;
  int v101;
  NSObject *v102;
  uint64_t v103;
  int v104;
  int v105;
  NSObject *v106;
  uint64_t v107;
  int v108;
  int v109;
  NSObject *v110;
  NSObject *v111;
  int v112;
  int v113;
  char *v114;
  _BOOL4 v115;
  char *backtrace_string;
  _BOOL4 v117;
  char *v118;
  _BOOL4 v119;
  uint64_t v120;
  char *v121;
  NSObject *v122;
  os_log_type_t v123;
  const char *v124;
  NSObject *v125;
  NSObject *v126;
  char *v127;
  _BOOL4 v128;
  uint64_t *v129;
  char v130;
  os_log_type_t v131;
  __int128 type;
  uint64_t (*v133)(__int128 *);
  void *v134;
  uint64_t v135;
  _BYTE buf[24];
  uint64_t v137;
  _BYTE v138[28];
  __int16 v139;
  uint64_t v140;
  int v141;
  const char *v142;
  __int16 v143;
  char *v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v1 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (!v1)
    return;
  v2 = v1;
  if ((*(_WORD *)(v1 + 872) & 0x100) == 0)
  {
    nw_protocol_disconnect(*(_QWORD **)(v1 + 32), v1);
    return;
  }
  v3 = *(_QWORD *)(v1 + 480);
  if (v3)
  {
    nw_http_connection_metadata_closed(*(void **)(v1 + 768));
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (!gLogDatapath)
        goto LABEL_7;
      v80 = __nwlog_obj();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      {
        v81 = *(_QWORD *)(v2 + 488);
        v82 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
        v83 = *(_DWORD *)(v2 + 860);
        if (v81)
          LODWORD(v81) = *(_DWORD *)(v81 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v2 + 74;
        *(_WORD *)&buf[22] = 2080;
        v137 = (uint64_t)" ";
        *(_WORD *)v138 = 1024;
        *(_DWORD *)&v138[2] = v82;
        *(_WORD *)&v138[6] = 1024;
        *(_DWORD *)&v138[8] = v83;
        *(_WORD *)&v138[12] = 1024;
        *(_DWORD *)&v138[14] = v81;
        _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing unprocessed_input_frames", buf, 0x32u);
      }
    }
    if (gLogDatapath)
    {
      v84 = __nwlog_obj();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(type) = 136446210;
        *(_QWORD *)((char *)&type + 4) = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&type, 0xCu);
      }
    }
LABEL_7:
    v4 = MEMORY[0x1E0C809B0];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
    v137 = (uint64_t)&__block_descriptor_tmp_55_39648;
    *(_QWORD *)v138 = v2 + 616;
    v138[8] = 0;
    v5 = *(_QWORD *)(v2 + 616);
    do
    {
      if (!v5)
        break;
      v6 = *(_QWORD *)(v5 + 32);
      v7 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v5 = v6;
    }
    while ((v7 & 1) != 0);
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (!gLogDatapath)
        goto LABEL_12;
      v85 = __nwlog_obj();
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
      {
        v86 = *(_QWORD *)(v2 + 488);
        v87 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
        v88 = *(_DWORD *)(v2 + 860);
        if (v86)
          LODWORD(v86) = *(_DWORD *)(v86 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v2 + 74;
        *(_WORD *)&buf[22] = 2080;
        v137 = (uint64_t)" ";
        *(_WORD *)v138 = 1024;
        *(_DWORD *)&v138[2] = v87;
        *(_WORD *)&v138[6] = 1024;
        *(_DWORD *)&v138[8] = v88;
        *(_WORD *)&v138[12] = 1024;
        *(_DWORD *)&v138[14] = v86;
        _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing processed_input_frames", buf, 0x32u);
      }
    }
    if (gLogDatapath)
    {
      v89 = __nwlog_obj();
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(type) = 136446210;
        *(_QWORD *)((char *)&type + 4) = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v89, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&type, 0xCu);
      }
    }
LABEL_12:
    *(_QWORD *)buf = v4;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
    v137 = (uint64_t)&__block_descriptor_tmp_55_39648;
    *(_QWORD *)v138 = v2 + 632;
    v138[8] = 0;
    v8 = *(_QWORD *)(v2 + 632);
    do
    {
      if (!v8)
        break;
      v9 = *(_QWORD *)(v8 + 32);
      v10 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v8 = v9;
    }
    while ((v10 & 1) != 0);
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v90 = __nwlog_obj();
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
        {
          v91 = *(_QWORD *)(v2 + 488);
          v92 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
          v93 = *(_DWORD *)(v2 + 860);
          if (v91)
            LODWORD(v91) = *(_DWORD *)(v91 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v2 + 74;
          *(_WORD *)&buf[22] = 2080;
          v137 = (uint64_t)" ";
          *(_WORD *)v138 = 1024;
          *(_DWORD *)&v138[2] = v92;
          *(_WORD *)&v138[6] = 1024;
          *(_DWORD *)&v138[8] = v93;
          *(_WORD *)&v138[12] = 1024;
          *(_DWORD *)&v138[14] = v91;
          _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removing pending_output_frames", buf, 0x32u);
        }
      }
    }
    *(_QWORD *)&type = v4;
    *((_QWORD *)&type + 1) = 0x40000000;
    v133 = (uint64_t (*)(__int128 *))___ZL29nw_http1_tear_down_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke;
    v134 = &__block_descriptor_tmp_54_39700;
    v135 = v2;
    v11 = *(_QWORD *)(v2 + 648);
    do
    {
      if (!v11)
        break;
      v12 = *(_QWORD *)(v11 + 32);
      v13 = v133(&type);
      v11 = v12;
    }
    while ((v13 & 1) != 0);
    v14 = (uint64_t *)(v2 + 696);
    nw_frame_cache_remove_all((uint64_t *)(v2 + 696));
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v94 = __nwlog_obj();
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          v95 = *(_QWORD *)(v2 + 488);
          v96 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
          v97 = *(_DWORD *)(v2 + 860);
          if (v95)
            LODWORD(v95) = *(_DWORD *)(v95 + 424);
          v98 = *(_QWORD *)(v2 + 32);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v2 + 74;
          *(_WORD *)&buf[22] = 2080;
          v137 = (uint64_t)" ";
          *(_WORD *)v138 = 1024;
          *(_DWORD *)&v138[2] = v96;
          *(_WORD *)&v138[6] = 1024;
          *(_DWORD *)&v138[8] = v97;
          *(_WORD *)&v138[12] = 1024;
          *(_DWORD *)&v138[14] = v95;
          *(_WORD *)&v138[18] = 2048;
          *(_QWORD *)&v138[20] = v98;
          _os_log_impl(&dword_182FBE000, v94, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> calling remove input handler on output handler %p", buf, 0x3Cu);
        }
      }
    }
    v15 = *(_DWORD *)(v3 + 336);
    *(_DWORD *)(v3 + 336) = v15 - 1;
    if (v15)
    {
LABEL_40:
      if ((*(_BYTE *)(v3 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v99 = __nwlog_obj();
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
          {
            v100 = *(_DWORD *)(v3 + 372);
            v101 = *(_DWORD *)(v3 + 336);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v3 + 74;
            *(_WORD *)&buf[22] = 2080;
            v137 = (uint64_t)" ";
            *(_WORD *)v138 = 1024;
            *(_DWORD *)&v138[2] = v100;
            *(_WORD *)&v138[6] = 2048;
            *(_QWORD *)&v138[8] = v2;
            *(_WORD *)&v138[16] = 1024;
            *(_DWORD *)&v138[18] = v101;
            _os_log_impl(&dword_182FBE000, v99, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> removed connection %p, now have %u connections", buf, 0x36u);
          }
        }
      }
      if ((*(_WORD *)(v2 + 872) & 0x800) == 0)
      {
LABEL_63:
        nw_protocol_remove_input_handler(*(_QWORD *)(v2 + 32), v2);
        nw_protocol_set_output_handler(v2, 0);
        if ((*(_BYTE *)(v2 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v102 = __nwlog_obj();
            if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
            {
              v103 = *(_QWORD *)(v2 + 488);
              v104 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
              v105 = *(_DWORD *)(v2 + 860);
              if (v103)
                LODWORD(v103) = *(_DWORD *)(v103 + 424);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_http1_connection_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v2 + 74;
              *(_WORD *)&buf[22] = 2080;
              v137 = (uint64_t)" ";
              *(_WORD *)v138 = 1024;
              *(_DWORD *)&v138[2] = v104;
              *(_WORD *)&v138[6] = 1024;
              *(_DWORD *)&v138[8] = v105;
              *(_WORD *)&v138[12] = 1024;
              *(_DWORD *)&v138[14] = v103;
              *(_WORD *)&v138[18] = 2048;
              *(_QWORD *)&v138[20] = v2;
              _os_log_impl(&dword_182FBE000, v102, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> destroying %p", buf, 0x3Cu);
            }
          }
        }
        v40 = *(_BYTE *)(v2 + 760);
        if ((v40 & 1) != 0)
        {
          v41 = *(void **)(v2 + 752);
          if (v41)
          {
            os_release(v41);
            v40 = *(_BYTE *)(v2 + 760);
          }
        }
        *(_QWORD *)(v2 + 752) = 0;
        *(_BYTE *)(v2 + 760) = v40 | 1;
        v42 = *(_BYTE *)(v2 + 744);
        if ((v42 & 1) != 0)
        {
          v43 = *(void **)(v2 + 736);
          if (v43)
          {
            os_release(v43);
            v42 = *(_BYTE *)(v2 + 744);
          }
        }
        *(_QWORD *)(v2 + 736) = 0;
        *(_BYTE *)(v2 + 744) = v42 | 1;
        v44 = *(_QWORD *)(v2 + 488);
        if (!v44 || *(_QWORD *)(v44 + 256) != v2)
        {
LABEL_84:
          *(_QWORD *)(v2 + 488) = 0;
          if ((*(_BYTE *)(v2 + 158) & 1) == 0)
          {
            if (!gLogDatapath)
              goto LABEL_86;
            v106 = __nwlog_obj();
            if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
            {
              v107 = *(_QWORD *)(v2 + 488);
              v108 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 372);
              v109 = *(_DWORD *)(v2 + 860);
              if (v107)
                LODWORD(v107) = *(_DWORD *)(v107 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_connection_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v2 + 74;
              *(_WORD *)&buf[22] = 2080;
              v137 = (uint64_t)" ";
              *(_WORD *)v138 = 1024;
              *(_DWORD *)&v138[2] = v108;
              *(_WORD *)&v138[6] = 1024;
              *(_DWORD *)&v138[8] = v109;
              *(_WORD *)&v138[12] = 1024;
              *(_DWORD *)&v138[14] = v107;
              _os_log_impl(&dword_182FBE000, v106, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing frame arrays", buf, 0x32u);
            }
          }
          if (gLogDatapath)
          {
            v110 = __nwlog_obj();
            if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
            {
              v141 = 136446210;
              v142 = "nw_protocol_finalize_master_frame_array";
              _os_log_impl(&dword_182FBE000, v110, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v141, 0xCu);
            }
          }
LABEL_86:
          *(_QWORD *)buf = v4;
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39725;
          v137 = (uint64_t)&__block_descriptor_tmp_57_39726;
          v138[0] = 0;
          v52 = *(_QWORD *)(v2 + 680);
          do
          {
            if (!v52)
              break;
            v53 = *(_QWORD *)(v52 + 16);
            v54 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            v52 = v53;
          }
          while ((v54 & 1) != 0);
          if (!*(_QWORD *)(v2 + 680))
          {
            if (!gLogDatapath)
              goto LABEL_91;
            goto LABEL_201;
          }
          v129 = v14;
          v71 = v4;
          __nwlog_obj();
          v141 = 136446210;
          v142 = "nw_protocol_finalize_master_frame_array";
          v72 = (char *)_os_log_send_and_compose_impl();
          v131 = OS_LOG_TYPE_ERROR;
          v130 = 0;
          if (__nwlog_fault(v72, &v131, &v130))
          {
            if (v131 == OS_LOG_TYPE_FAULT)
            {
              v73 = __nwlog_obj();
              v74 = v131;
              if (!os_log_type_enabled(v73, v131))
                goto LABEL_198;
              v141 = 136446210;
              v142 = "nw_protocol_finalize_master_frame_array";
              v75 = "%{public}s frame array is not empty after finalize";
LABEL_197:
              _os_log_impl(&dword_182FBE000, v73, v74, v75, (uint8_t *)&v141, 0xCu);
              goto LABEL_198;
            }
            if (!v130)
            {
              v73 = __nwlog_obj();
              v74 = v131;
              if (!os_log_type_enabled(v73, v131))
                goto LABEL_198;
              v141 = 136446210;
              v142 = "nw_protocol_finalize_master_frame_array";
              v75 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
              goto LABEL_197;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            v73 = __nwlog_obj();
            v74 = v131;
            v117 = os_log_type_enabled(v73, v131);
            if (!backtrace_string)
            {
              if (!v117)
                goto LABEL_198;
              v141 = 136446210;
              v142 = "nw_protocol_finalize_master_frame_array";
              v75 = "%{public}s frame array is not empty after finalize, no backtrace";
              goto LABEL_197;
            }
            if (v117)
            {
              v141 = 136446466;
              v142 = "nw_protocol_finalize_master_frame_array";
              v143 = 2082;
              v144 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", (uint8_t *)&v141, 0x16u);
            }
            free(backtrace_string);
          }
LABEL_198:
          if (v72)
            free(v72);
          v4 = v71;
          v14 = v129;
          if (!gLogDatapath)
          {
LABEL_91:
            *(_QWORD *)buf = v4;
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39725;
            v137 = (uint64_t)&__block_descriptor_tmp_57_39726;
            v138[0] = 0;
            v55 = *(_QWORD *)(v2 + 664);
            do
            {
              if (!v55)
                break;
              v56 = *(_QWORD *)(v55 + 16);
              v57 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
              v55 = v56;
            }
            while ((v57 & 1) != 0);
            if (!*(_QWORD *)(v2 + 664))
            {
LABEL_95:
              nw_frame_cache_destroy(v14);
              v58 = *(void **)(v2 + 528);
              if (v58)
              {
                v59 = *(void **)(v2 + 544);
                if (v59)
                  nw_association_unregister(v58, v59);
              }
              v60 = *(void **)(v2 + 800);
              if (v60)
              {
                free(v60);
                *(_QWORD *)(v2 + 800) = 0;
              }
              *(_DWORD *)(v2 + 840) = 0;
              v61 = *(void **)(v2 + 808);
              if (v61)
              {
                free(v61);
                *(_QWORD *)(v2 + 808) = 0;
              }
              *(_DWORD *)(v2 + 844) = 0;
              v62 = *(void **)(v2 + 816);
              if (v62)
              {
                free(v62);
                *(_QWORD *)(v2 + 816) = 0;
              }
              *(_DWORD *)(v2 + 848) = 0;
              v63 = *(void **)(v2 + 824);
              if (v63)
              {
                free(v63);
                *(_QWORD *)(v2 + 824) = 0;
              }
              *(_DWORD *)(v2 + 852) = 0;
              v64 = *(void **)(v2 + 832);
              if (v64)
              {
                free(v64);
                *(_QWORD *)(v2 + 832) = 0;
              }
              *(_DWORD *)(v2 + 856) = 0;
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 608) + 16))(*(_QWORD *)(v2 + 608), 0);
              v65 = *(const void **)(v2 + 608);
              if (v65)
              {
                _Block_release(v65);
                *(_QWORD *)(v2 + 608) = 0;
              }
              nw_http1_connection::~nw_http1_connection((nw_http1_connection *)v2);
              free(v66);
              if (!*(_DWORD *)(v3 + 336) && !*(_DWORD *)(v3 + 344))
                nw_protocol_http1_destroy(v3, v3);
              return;
            }
            __nwlog_obj();
            v141 = 136446210;
            v142 = "nw_protocol_finalize_master_frame_array";
            v76 = (char *)_os_log_send_and_compose_impl();
            v131 = OS_LOG_TYPE_ERROR;
            v130 = 0;
            if (__nwlog_fault(v76, &v131, &v130))
            {
              if (v131 == OS_LOG_TYPE_FAULT)
              {
                v77 = __nwlog_obj();
                v78 = v131;
                if (!os_log_type_enabled(v77, v131))
                  goto LABEL_206;
                v141 = 136446210;
                v142 = "nw_protocol_finalize_master_frame_array";
                v79 = "%{public}s frame array is not empty after finalize";
                goto LABEL_205;
              }
              if (!v130)
              {
                v77 = __nwlog_obj();
                v78 = v131;
                if (!os_log_type_enabled(v77, v131))
                  goto LABEL_206;
                v141 = 136446210;
                v142 = "nw_protocol_finalize_master_frame_array";
                v79 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
                goto LABEL_205;
              }
              v118 = (char *)__nw_create_backtrace_string();
              v77 = __nwlog_obj();
              v78 = v131;
              v119 = os_log_type_enabled(v77, v131);
              if (v118)
              {
                if (v119)
                {
                  v141 = 136446466;
                  v142 = "nw_protocol_finalize_master_frame_array";
                  v143 = 2082;
                  v144 = v118;
                  _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", (uint8_t *)&v141, 0x16u);
                }
                free(v118);
                goto LABEL_206;
              }
              if (v119)
              {
                v141 = 136446210;
                v142 = "nw_protocol_finalize_master_frame_array";
                v79 = "%{public}s frame array is not empty after finalize, no backtrace";
LABEL_205:
                _os_log_impl(&dword_182FBE000, v77, v78, v79, (uint8_t *)&v141, 0xCu);
              }
            }
LABEL_206:
            if (v76)
              free(v76);
            goto LABEL_95;
          }
LABEL_201:
          v126 = __nwlog_obj();
          if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_finalize_master_frame_array";
            _os_log_impl(&dword_182FBE000, v126, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
          }
          goto LABEL_91;
        }
        if (*(_QWORD *)(v44 + 248))
        {
          if ((*(_BYTE *)(v44 + 158) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v45 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              v46 = *(_QWORD *)(v44 + 256);
              v47 = *(_DWORD *)(*(_QWORD *)(v44 + 248) + 372);
              if (v46)
                LODWORD(v46) = *(_DWORD *)(v46 + 860);
              v48 = *(_DWORD *)(v44 + 424);
              *(_DWORD *)buf = 136448002;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v44 + 74;
              *(_WORD *)&buf[22] = 2080;
              v137 = (uint64_t)" ";
              *(_WORD *)v138 = 1024;
              *(_DWORD *)&v138[2] = v47;
              *(_WORD *)&v138[6] = 1024;
              *(_DWORD *)&v138[8] = v46;
              *(_WORD *)&v138[12] = 1024;
              *(_DWORD *)&v138[14] = v48;
              *(_WORD *)&v138[18] = 2048;
              *(_QWORD *)&v138[20] = v44;
              v139 = 2048;
              v140 = v2;
              _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p", buf, 0x46u);
            }
          }
          if (gLogDatapath)
          {
            v125 = __nwlog_obj();
            if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
              _os_log_impl(&dword_182FBE000, v125, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }
          *(_QWORD *)buf = v4;
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
          v137 = (uint64_t)&__block_descriptor_tmp_55_39648;
          *(_QWORD *)v138 = v2 + 632;
          v138[8] = 0;
          v49 = *(_QWORD *)(v2 + 632);
          do
          {
            if (!v49)
              break;
            v50 = *(_QWORD *)(v49 + 32);
            v51 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            v49 = v50;
          }
          while ((v51 & 1) != 0);
          *(_QWORD *)(v44 + 256) = 0;
          *(_QWORD *)(v2 + 488) = 0;
          nw_protocol_set_output_handler(v44, 0);
          nw_protocol_set_input_handler(v2, 0);
          goto LABEL_84;
        }
        v120 = v4;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
        v121 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v141) = 16;
        v131 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v121, &v141, &v131))
        {
          if (v141 == 17)
          {
            v122 = __nwlog_obj();
            v123 = v141;
            if (os_log_type_enabled(v122, (os_log_type_t)v141))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v124 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_217:
              _os_log_impl(&dword_182FBE000, v122, v123, v124, buf, 0xCu);
            }
          }
          else if (v131)
          {
            v127 = (char *)__nw_create_backtrace_string();
            v122 = __nwlog_obj();
            v123 = v141;
            v128 = os_log_type_enabled(v122, (os_log_type_t)v141);
            if (v127)
            {
              if (v128)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v127;
                _os_log_impl(&dword_182FBE000, v122, v123, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v127);
              goto LABEL_218;
            }
            if (v128)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v124 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
              goto LABEL_217;
            }
          }
          else
          {
            v122 = __nwlog_obj();
            v123 = v141;
            if (os_log_type_enabled(v122, (os_log_type_t)v141))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v124 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
              goto LABEL_217;
            }
          }
        }
LABEL_218:
        if (v121)
          free(v121);
        v4 = v120;
        goto LABEL_84;
      }
      v27 = *(_DWORD *)(v3 + 368);
      *(_DWORD *)(v3 + 368) = v27 - 1;
      if (v27)
      {
LABEL_61:
        if ((*(_BYTE *)(v3 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v111 = __nwlog_obj();
            if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
            {
              v112 = *(_DWORD *)(v3 + 372);
              v113 = *(_DWORD *)(v3 + 368) + *(_DWORD *)(v3 + 364);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v3 + 74;
              *(_WORD *)&buf[22] = 2080;
              v137 = (uint64_t)" ";
              *(_WORD *)v138 = 1024;
              *(_DWORD *)&v138[2] = v112;
              *(_WORD *)&v138[6] = 1024;
              *(_DWORD *)&v138[8] = v113;
              *(_WORD *)&v138[12] = 2048;
              *(_QWORD *)&v138[14] = v2;
              _os_log_impl(&dword_182FBE000, v111, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> decreased connection pool width to %u after removing non-reusable connection %p", buf, 0x36u);
            }
          }
        }
        goto LABEL_63;
      }
      v28 = v4;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v29 = *(unsigned int *)(v3 + 368);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
      *(_WORD *)&buf[22] = 2048;
      v137 = 1;
      *(_WORD *)v138 = 2048;
      *(_QWORD *)&v138[2] = v29;
      v30 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v141) = 16;
      v131 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v30, &v141, &v131))
      {
        if (v141 == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = gLogObj;
          v32 = v141;
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v141))
          {
            v33 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v137 = 1;
            *(_WORD *)v138 = 2048;
            *(_QWORD *)&v138[2] = v33;
            v34 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_57:
            _os_log_impl(&dword_182FBE000, v31, v32, v34, buf, 0x2Au);
          }
        }
        else if (v131)
        {
          v35 = (char *)__nw_create_backtrace_string();
          v31 = __nwlog_obj();
          v32 = v141;
          v36 = os_log_type_enabled(v31, (os_log_type_t)v141);
          if (v35)
          {
            if (v36)
            {
              v37 = *(unsigned int *)(v3 + 368);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              v137 = 1;
              *(_WORD *)v138 = 2048;
              *(_QWORD *)&v138[2] = v37;
              *(_WORD *)&v138[10] = 2082;
              *(_QWORD *)&v138[12] = v35;
              _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v35);
            goto LABEL_58;
          }
          if (v36)
          {
            v39 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v137 = 1;
            *(_WORD *)v138 = 2048;
            *(_QWORD *)&v138[2] = v39;
            v34 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_57;
          }
        }
        else
        {
          v31 = __nwlog_obj();
          v32 = v141;
          if (os_log_type_enabled(v31, (os_log_type_t)v141))
          {
            v38 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v137 = 1;
            *(_WORD *)v138 = 2048;
            *(_QWORD *)&v138[2] = v38;
            v34 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_57;
          }
        }
      }
LABEL_58:
      if (v30)
        free(v30);
      *(_DWORD *)(v3 + 368) = 0;
      v4 = v28;
      goto LABEL_61;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = *(unsigned int *)(v3 + 336);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->connections_count";
    *(_WORD *)&buf[22] = 2048;
    v137 = 1;
    *(_WORD *)v138 = 2048;
    *(_QWORD *)&v138[2] = v16;
    v17 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v141) = 16;
    v131 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v17, &v141, &v131))
    {
      if (v141 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = gLogObj;
        v19 = v141;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v141))
        {
          v20 = *(unsigned int *)(v3 + 336);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->connections_count";
          *(_WORD *)&buf[22] = 2048;
          v137 = 1;
          *(_WORD *)v138 = 2048;
          *(_QWORD *)&v138[2] = v20;
          v21 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_36:
          _os_log_impl(&dword_182FBE000, v18, v19, v21, buf, 0x2Au);
        }
      }
      else if (v131)
      {
        v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = gLogObj;
        v19 = v141;
        v23 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v141);
        if (v22)
        {
          if (v23)
          {
            v24 = *(unsigned int *)(v3 + 336);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->connections_count";
            *(_WORD *)&buf[22] = 2048;
            v137 = 1;
            *(_WORD *)v138 = 2048;
            *(_QWORD *)&v138[2] = v24;
            *(_WORD *)&v138[10] = 2082;
            *(_QWORD *)&v138[12] = v22;
            _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v22);
          goto LABEL_37;
        }
        if (v23)
        {
          v26 = *(unsigned int *)(v3 + 336);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->connections_count";
          *(_WORD *)&buf[22] = 2048;
          v137 = 1;
          *(_WORD *)v138 = 2048;
          *(_QWORD *)&v138[2] = v26;
          v21 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_36;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = gLogObj;
        v19 = v141;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v141))
        {
          v25 = *(unsigned int *)(v3 + 336);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->connections_count";
          *(_WORD *)&buf[22] = 2048;
          v137 = 1;
          *(_WORD *)v138 = 2048;
          *(_QWORD *)&v138[2] = v25;
          v21 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_36;
        }
      }
    }
LABEL_37:
    if (v17)
      free(v17);
    *(_DWORD *)(v3 + 336) = 0;
    v4 = MEMORY[0x1E0C809B0];
    v14 = (uint64_t *)(v2 + 696);
    goto LABEL_40;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
  v67 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(type) = 16;
  LOBYTE(v141) = 0;
  if (__nwlog_fault(v67, &type, &v141))
  {
    if (type == 17)
    {
      v68 = __nwlog_obj();
      v69 = type;
      if (!os_log_type_enabled(v68, (os_log_type_t)type))
        goto LABEL_193;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
      v70 = "%{public}s called with null http1";
      goto LABEL_192;
    }
    if (!(_BYTE)v141)
    {
      v68 = __nwlog_obj();
      v69 = type;
      if (!os_log_type_enabled(v68, (os_log_type_t)type))
        goto LABEL_193;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
      v70 = "%{public}s called with null http1, backtrace limit exceeded";
      goto LABEL_192;
    }
    v114 = (char *)__nw_create_backtrace_string();
    v68 = __nwlog_obj();
    v69 = type;
    v115 = os_log_type_enabled(v68, (os_log_type_t)type);
    if (v114)
    {
      if (v115)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v114;
        _os_log_impl(&dword_182FBE000, v68, v69, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v114);
      goto LABEL_193;
    }
    if (v115)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
      v70 = "%{public}s called with null http1, no backtrace";
LABEL_192:
      _os_log_impl(&dword_182FBE000, v68, v69, v70, buf, 0xCu);
    }
  }
LABEL_193:
  if (v67)
    free(v67);
}

void ___ZL28nw_http1_add_idle_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  os_log_type_t v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  _BOOL4 v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint32_t v24;
  _WORD *v25;
  int v26;
  uint64_t v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  _BOOL4 v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint32_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  int v57;
  uint64_t v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  const char *v63;
  char *v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  const char *v75;
  char *v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  const void *v106;
  void *v107;
  NSObject *v108;
  os_log_type_t v109;
  char *v110;
  NSObject *v111;
  os_log_type_t v112;
  const char *v113;
  char *v114;
  NSObject *v115;
  os_log_type_t v116;
  const char *v117;
  uint64_t v118;
  char *v119;
  NSObject *v120;
  os_log_type_t v121;
  const char *v122;
  char *v123;
  NSObject *v124;
  os_log_type_t v125;
  const char *v126;
  NSObject *v127;
  uint64_t v128;
  int v129;
  int v130;
  NSObject *v131;
  uint64_t v132;
  int v133;
  int v134;
  NSObject *v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  NSObject *v140;
  int v141;
  int v142;
  NSObject *v143;
  uint64_t v144;
  int v145;
  int v146;
  NSObject *v147;
  uint64_t v148;
  int v149;
  int v150;
  NSObject *v151;
  NSObject *v152;
  uint64_t v153;
  int v154;
  int v155;
  NSObject *v156;
  NSObject *v157;
  uint64_t v158;
  int v159;
  int v160;
  NSObject *v161;
  char *backtrace_string;
  _BOOL4 v163;
  char *v164;
  _BOOL4 v165;
  char *v166;
  _BOOL4 v167;
  _BOOL4 v168;
  char *v169;
  _BOOL4 v170;
  NSObject *v171;
  uint64_t v172;
  int v173;
  int v174;
  int v175;
  NSObject *v176;
  int v177;
  int v178;
  char *v179;
  _BOOL4 v180;
  char *v181;
  _BOOL4 v182;
  NSObject *v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  char *v188;
  NSObject *v189;
  os_log_type_t v190;
  const char *v191;
  NSObject *v192;
  char *v193;
  NSObject *v194;
  os_log_type_t v195;
  const char *v196;
  char *v197;
  _BOOL4 v198;
  NSObject *v199;
  char *v200;
  _BOOL4 v201;
  char v202;
  os_log_type_t v203;
  __int128 type;
  uint64_t (*v205)(__int128 *);
  void *v206;
  uint64_t v207;
  _BYTE buf[24];
  uint64_t v209;
  _BYTE v210[28];
  __int16 v211;
  uint64_t v212;
  int v213;
  const char *v214;
  __int16 v215;
  char *v216;
  uint64_t v217;

  v217 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  if ((*(_BYTE *)(v3 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      v5 = a1[4];
      v6 = v5 + 74;
      v7 = *(_QWORD *)(v5 + 488);
      v8 = *(_DWORD *)(*(_QWORD *)(v5 + 480) + 372);
      v9 = *(_DWORD *)(v5 + 860);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 424);
      v10 = a1[5];
      *(_DWORD *)buf = 136447746;
      *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection_block_invoke";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2080;
      v209 = (uint64_t)" ";
      *(_WORD *)v210 = 1024;
      *(_DWORD *)&v210[2] = v8;
      *(_WORD *)&v210[6] = 1024;
      *(_DWORD *)&v210[8] = v9;
      *(_WORD *)&v210[12] = 1024;
      *(_DWORD *)&v210[14] = v7;
      *(_WORD *)&v210[18] = 2048;
      *(_QWORD *)&v210[20] = v10;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:c%u:s%u> idle connection timed out after %lldms, tearing down", buf, 0x3Cu);
    }
    v3 = a1[4];
  }
  v11 = a1[6];
  v12 = &unk_1ECD84000;
  if (!v11)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
    v13 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type) = 16;
    LOBYTE(v213) = 0;
    if (__nwlog_fault(v13, &type, &v213))
    {
      if (type == 17)
      {
        v108 = __nwlog_obj();
        v109 = type;
        if (os_log_type_enabled(v108, (os_log_type_t)type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          v16 = "%{public}s called with null http1";
LABEL_334:
          v36 = v108;
          v37 = v109;
          v38 = 12;
          goto LABEL_41;
        }
      }
      else if ((_BYTE)v213)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v108 = __nwlog_obj();
        v109 = type;
        v163 = os_log_type_enabled(v108, (os_log_type_t)type);
        if (backtrace_string)
        {
          if (v163)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v108, v109, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          v12 = (_BYTE *)&unk_1ECD84000;
        }
        else
        {
          v12 = (_BYTE *)&unk_1ECD84000;
          if (v163)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
            v16 = "%{public}s called with null http1, no backtrace";
            goto LABEL_334;
          }
        }
      }
      else
      {
        v108 = __nwlog_obj();
        v109 = type;
        if (os_log_type_enabled(v108, (os_log_type_t)type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          v16 = "%{public}s called with null http1, backtrace limit exceeded";
          goto LABEL_334;
        }
      }
    }
LABEL_42:
    if (!v13)
      goto LABEL_58;
    goto LABEL_43;
  }
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v127 = __nwlog_obj();
        if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
        {
          v128 = *(_QWORD *)(v3 + 488);
          v129 = *(_DWORD *)(*(_QWORD *)(v3 + 480) + 372);
          v130 = *(_DWORD *)(v3 + 860);
          if (v128)
            LODWORD(v128) = *(_DWORD *)(v128 + 424);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v3 + 74;
          *(_WORD *)&buf[22] = 2080;
          v209 = (uint64_t)" ";
          *(_WORD *)v210 = 1024;
          *(_DWORD *)&v210[2] = v129;
          *(_WORD *)&v210[6] = 1024;
          *(_DWORD *)&v210[8] = v130;
          *(_WORD *)&v210[12] = 1024;
          *(_DWORD *)&v210[14] = v128;
          *(_WORD *)&v210[18] = 2048;
          *(_QWORD *)&v210[20] = v3;
          _os_log_impl(&dword_182FBE000, v127, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection %p", buf, 0x3Cu);
        }
      }
    }
    if (((*(unsigned __int16 *)(v3 + 872) | (*(unsigned __int8 *)(v3 + 874) << 16)) & 0x80000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v3;
      v13 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(type) = 16;
      LOBYTE(v213) = 0;
      if (!__nwlog_fault(v13, &type, &v213))
        goto LABEL_42;
      if (type == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type))
          goto LABEL_42;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v3;
        v16 = "%{public}s connection %p not in idle list, cannot remove";
LABEL_40:
        v36 = v14;
        v37 = v15;
        v38 = 22;
LABEL_41:
        _os_log_impl(&dword_182FBE000, v36, v37, v16, buf, v38);
        goto LABEL_42;
      }
      if (!(_BYTE)v213)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type))
          goto LABEL_42;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v3;
        v16 = "%{public}s connection %p not in idle list, cannot remove, backtrace limit exceeded";
        goto LABEL_40;
      }
      v19 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = gLogObj;
      v15 = type;
      v20 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type);
      if (!v19)
      {
        v12 = (_BYTE *)&unk_1ECD84000;
        if (!v20)
          goto LABEL_42;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v3;
        v16 = "%{public}s connection %p not in idle list, cannot remove, no backtrace";
        goto LABEL_40;
      }
      if (!v20)
        goto LABEL_23;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v3;
      *(_WORD *)&buf[22] = 2082;
      v209 = (uint64_t)v19;
      v21 = "%{public}s connection %p not in idle list, cannot remove, dumping backtrace:%{public}s";
      v22 = v14;
      v23 = v15;
      v24 = 32;
      goto LABEL_22;
    }
    v17 = *(_QWORD *)(v3 + 592);
    v18 = *(_QWORD **)(v3 + 600);
    if (v17)
    {
      *(_QWORD *)(v17 + 600) = v18;
      v18 = *(_QWORD **)(v3 + 600);
    }
    else
    {
      *(_QWORD *)(v11 + 216) = v18;
    }
    v25 = (_WORD *)(v3 + 872);
    *v18 = v17;
    *(_QWORD *)(v3 + 592) = 0;
    *(_QWORD *)(v3 + 600) = 0;
    v26 = *(_DWORD *)(v11 + 340);
    *(_DWORD *)(v11 + 340) = v26 - 1;
    if (v26)
    {
LABEL_52:
      v41 = (unsigned __int16)*v25;
      v42 = (v41 | (*(unsigned __int8 *)(v3 + 874) << 16)) & 0xFFF7FFFF;
      *v25 = v41;
      *(_BYTE *)(v3 + 874) = BYTE2(v42);
      if ((*(_BYTE *)(v3 + 158) & 1) == 0)
      {
        if (v12[1345])
        {
          v171 = __nwlog_obj();
          if (os_log_type_enabled(v171, OS_LOG_TYPE_DEBUG))
          {
            v172 = *(_QWORD *)(v3 + 488);
            v173 = *(_DWORD *)(*(_QWORD *)(v3 + 480) + 372);
            v174 = *(_DWORD *)(v3 + 860);
            if (v172)
              LODWORD(v172) = *(_DWORD *)(v172 + 424);
            v175 = *(_DWORD *)(v11 + 340);
            *(_DWORD *)buf = 136448002;
            *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v3 + 74;
            *(_WORD *)&buf[22] = 2080;
            v209 = (uint64_t)" ";
            *(_WORD *)v210 = 1024;
            *(_DWORD *)&v210[2] = v173;
            *(_WORD *)&v210[6] = 1024;
            *(_DWORD *)&v210[8] = v174;
            *(_WORD *)&v210[12] = 1024;
            *(_DWORD *)&v210[14] = v172;
            *(_WORD *)&v210[18] = 2048;
            *(_QWORD *)&v210[20] = v3;
            v211 = 1024;
            LODWORD(v212) = v175;
            _os_log_impl(&dword_182FBE000, v171, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed idle connection %p, now have %u idle connections", buf, 0x42u);
          }
        }
      }
      if (*(_QWORD *)(v3 + 784))
      {
        if ((*(_BYTE *)(v3 + 158) & 1) == 0)
        {
          if (v12[1345])
          {
            v183 = __nwlog_obj();
            if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
            {
              v184 = *(_QWORD *)(v3 + 488);
              v185 = *(_DWORD *)(*(_QWORD *)(v3 + 480) + 372);
              v186 = *(_DWORD *)(v3 + 860);
              if (v184)
                LODWORD(v184) = *(_DWORD *)(v184 + 424);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v3 + 74;
              *(_WORD *)&buf[22] = 2080;
              v209 = (uint64_t)" ";
              *(_WORD *)v210 = 1024;
              *(_DWORD *)&v210[2] = v185;
              *(_WORD *)&v210[6] = 1024;
              *(_DWORD *)&v210[8] = v186;
              *(_WORD *)&v210[12] = 1024;
              *(_DWORD *)&v210[14] = v184;
              *(_WORD *)&v210[18] = 2048;
              *(_QWORD *)&v210[20] = v3;
              _os_log_impl(&dword_182FBE000, v183, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> deactivating destroy timer for connection %p", buf, 0x3Cu);
            }
          }
        }
        nw_queue_cancel_source(*(_QWORD *)(v3 + 784), a2);
        *(_QWORD *)(v3 + 784) = 0;
      }
      goto LABEL_58;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = *(unsigned int *)(v11 + 340);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->idle_connections_count";
    *(_WORD *)&buf[22] = 2048;
    v209 = 1;
    *(_WORD *)v210 = 2048;
    *(_QWORD *)&v210[2] = v27;
    v28 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type) = 16;
    LOBYTE(v213) = 0;
    if (__nwlog_fault(v28, &type, &v213))
    {
      if (type == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = gLogObj;
        v30 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type))
        {
          v31 = *(unsigned int *)(v11 + 340);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->idle_connections_count";
          *(_WORD *)&buf[22] = 2048;
          v209 = 1;
          *(_WORD *)v210 = 2048;
          *(_QWORD *)&v210[2] = v31;
          v32 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_48:
          _os_log_impl(&dword_182FBE000, v29, v30, v32, buf, 0x2Au);
        }
      }
      else if ((_BYTE)v213)
      {
        v33 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = gLogObj;
        v30 = type;
        v34 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type);
        if (v33)
        {
          if (v34)
          {
            v35 = *(unsigned int *)(v11 + 340);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->idle_connections_count";
            *(_WORD *)&buf[22] = 2048;
            v209 = 1;
            *(_WORD *)v210 = 2048;
            *(_QWORD *)&v210[2] = v35;
            *(_WORD *)&v210[10] = 2082;
            *(_QWORD *)&v210[12] = v33;
            _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v33);
          v12 = (_BYTE *)&unk_1ECD84000;
          goto LABEL_49;
        }
        v12 = &unk_1ECD84000;
        if (v34)
        {
          v40 = *(unsigned int *)(v11 + 340);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->idle_connections_count";
          *(_WORD *)&buf[22] = 2048;
          v209 = 1;
          *(_WORD *)v210 = 2048;
          *(_QWORD *)&v210[2] = v40;
          v32 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_48;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = gLogObj;
        v30 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type))
        {
          v39 = *(unsigned int *)(v11 + 340);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->idle_connections_count";
          *(_WORD *)&buf[22] = 2048;
          v209 = 1;
          *(_WORD *)v210 = 2048;
          *(_QWORD *)&v210[2] = v39;
          v32 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_48;
        }
      }
    }
LABEL_49:
    if (v28)
      free(v28);
    *(_DWORD *)(v11 + 340) = 0;
    goto LABEL_52;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
  v13 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(type) = 16;
  LOBYTE(v213) = 0;
  if (!__nwlog_fault(v13, &type, &v213))
    goto LABEL_42;
  if (type == 17)
  {
    v108 = __nwlog_obj();
    v109 = type;
    if (os_log_type_enabled(v108, (os_log_type_t)type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
      v16 = "%{public}s called with null http1_connection";
      goto LABEL_334;
    }
    goto LABEL_42;
  }
  if (!(_BYTE)v213)
  {
    v108 = __nwlog_obj();
    v109 = type;
    if (os_log_type_enabled(v108, (os_log_type_t)type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
      v16 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_334;
    }
    goto LABEL_42;
  }
  v19 = (char *)__nw_create_backtrace_string();
  v108 = __nwlog_obj();
  v109 = type;
  v168 = os_log_type_enabled(v108, (os_log_type_t)type);
  if (!v19)
  {
    v12 = (_BYTE *)&unk_1ECD84000;
    if (v168)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
      v16 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_334;
    }
    goto LABEL_42;
  }
  if (v168)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v19;
    v21 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
    v22 = v108;
    v23 = v109;
    v24 = 22;
LABEL_22:
    _os_log_impl(&dword_182FBE000, v22, v23, v21, buf, v24);
  }
LABEL_23:
  free(v19);
  v12 = (_BYTE *)&unk_1ECD84000;
  if (v13)
LABEL_43:
    free(v13);
LABEL_58:
  v43 = a1[4];
  if (v43)
  {
    v44 = *(_QWORD **)(v43 + 32);
    goto LABEL_60;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_get_output_handler";
  v110 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(type) = 16;
  LOBYTE(v213) = 0;
  if (__nwlog_fault(v110, &type, &v213))
  {
    if (type == 17)
    {
      v111 = __nwlog_obj();
      v112 = type;
      if (!os_log_type_enabled(v111, (os_log_type_t)type))
        goto LABEL_310;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_output_handler";
      v113 = "%{public}s called with null connection";
LABEL_309:
      _os_log_impl(&dword_182FBE000, v111, v112, v113, buf, 0xCu);
      goto LABEL_310;
    }
    if (!(_BYTE)v213)
    {
      v111 = __nwlog_obj();
      v112 = type;
      if (!os_log_type_enabled(v111, (os_log_type_t)type))
        goto LABEL_310;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_output_handler";
      v113 = "%{public}s called with null connection, backtrace limit exceeded";
      goto LABEL_309;
    }
    v164 = (char *)__nw_create_backtrace_string();
    v111 = __nwlog_obj();
    v112 = type;
    v165 = os_log_type_enabled(v111, (os_log_type_t)type);
    if (!v164)
    {
      v12 = (_BYTE *)&unk_1ECD84000;
      if (!v165)
        goto LABEL_310;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_output_handler";
      v113 = "%{public}s called with null connection, no backtrace";
      goto LABEL_309;
    }
    if (v165)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_output_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v164;
      _os_log_impl(&dword_182FBE000, v111, v112, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v164);
    v12 = (_BYTE *)&unk_1ECD84000;
  }
LABEL_310:
  if (v110)
    free(v110);
  v43 = a1[4];
  if (v43)
  {
    v44 = 0;
    goto LABEL_60;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
  v193 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(type) = 16;
  LOBYTE(v213) = 0;
  if (__nwlog_fault(v193, &type, &v213))
  {
    if (type == 17)
    {
      v194 = __nwlog_obj();
      v195 = type;
      if (os_log_type_enabled(v194, (os_log_type_t)type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
        v196 = "%{public}s called with null connection";
LABEL_328:
        _os_log_impl(&dword_182FBE000, v194, v195, v196, buf, 0xCu);
      }
    }
    else if ((_BYTE)v213)
    {
      v197 = (char *)__nw_create_backtrace_string();
      v194 = __nwlog_obj();
      v195 = type;
      v198 = os_log_type_enabled(v194, (os_log_type_t)type);
      if (v197)
      {
        if (v198)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v197;
          _os_log_impl(&dword_182FBE000, v194, v195, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v197);
        v12 = (_BYTE *)&unk_1ECD84000;
        goto LABEL_329;
      }
      v12 = (_BYTE *)&unk_1ECD84000;
      if (v198)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
        v196 = "%{public}s called with null connection, no backtrace";
        goto LABEL_328;
      }
    }
    else
    {
      v194 = __nwlog_obj();
      v195 = type;
      if (os_log_type_enabled(v194, (os_log_type_t)type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
        v196 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_328;
      }
    }
  }
LABEL_329:
  if (v193)
    free(v193);
  v44 = 0;
  v43 = 0;
LABEL_60:
  nw_protocol_output_finished(v44, v43);
  v45 = a1[6];
  if (!v45)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
    v114 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type) = 16;
    LOBYTE(v213) = 0;
    if (!__nwlog_fault(v114, &type, &v213))
      goto LABEL_338;
    if (type == 17)
    {
      v115 = __nwlog_obj();
      v116 = type;
      if (!os_log_type_enabled(v115, (os_log_type_t)type))
        goto LABEL_338;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
      v117 = "%{public}s called with null http1";
    }
    else if ((_BYTE)v213)
    {
      v166 = (char *)__nw_create_backtrace_string();
      v115 = __nwlog_obj();
      v116 = type;
      v167 = os_log_type_enabled(v115, (os_log_type_t)type);
      if (v166)
      {
        if (v167)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v166;
          _os_log_impl(&dword_182FBE000, v115, v116, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v166);
LABEL_338:
        if (!v114)
          return;
LABEL_339:
        free(v114);
        return;
      }
      if (!v167)
        goto LABEL_338;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
      v117 = "%{public}s called with null http1, no backtrace";
    }
    else
    {
      v115 = __nwlog_obj();
      v116 = type;
      if (!os_log_type_enabled(v115, (os_log_type_t)type))
        goto LABEL_338;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
      v117 = "%{public}s called with null http1, backtrace limit exceeded";
    }
LABEL_337:
    _os_log_impl(&dword_182FBE000, v115, v116, v117, buf, 0xCu);
    goto LABEL_338;
  }
  v46 = a1[4];
  if (v46)
  {
    nw_http_connection_metadata_closed(*(void **)(v46 + 768));
    if ((*(_BYTE *)(v46 + 158) & 1) == 0)
    {
      if (!v12[1345])
        goto LABEL_64;
      v147 = __nwlog_obj();
      if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG))
      {
        v148 = *(_QWORD *)(v46 + 488);
        v149 = *(_DWORD *)(*(_QWORD *)(v46 + 480) + 372);
        v150 = *(_DWORD *)(v46 + 860);
        if (v148)
          LODWORD(v148) = *(_DWORD *)(v148 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v46 + 74;
        *(_WORD *)&buf[22] = 2080;
        v209 = (uint64_t)" ";
        *(_WORD *)v210 = 1024;
        *(_DWORD *)&v210[2] = v149;
        *(_WORD *)&v210[6] = 1024;
        *(_DWORD *)&v210[8] = v150;
        *(_WORD *)&v210[12] = 1024;
        *(_DWORD *)&v210[14] = v148;
        _os_log_impl(&dword_182FBE000, v147, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing unprocessed_input_frames", buf, 0x32u);
      }
    }
    if (v12[1345])
    {
      v151 = __nwlog_obj();
      if (os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(type) = 136446210;
        *(_QWORD *)((char *)&type + 4) = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v151, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&type, 0xCu);
      }
    }
LABEL_64:
    v47 = MEMORY[0x1E0C809B0];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
    v209 = (uint64_t)&__block_descriptor_tmp_55_39648;
    *(_QWORD *)v210 = v46 + 616;
    v210[8] = 0;
    v48 = *(_QWORD *)(v46 + 616);
    do
    {
      if (!v48)
        break;
      v49 = *(_QWORD *)(v48 + 32);
      v50 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v48 = v49;
    }
    while ((v50 & 1) != 0);
    if ((*(_BYTE *)(v46 + 158) & 1) == 0)
    {
      if (!v12[1345])
        goto LABEL_69;
      v152 = __nwlog_obj();
      if (os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG))
      {
        v153 = *(_QWORD *)(v46 + 488);
        v154 = *(_DWORD *)(*(_QWORD *)(v46 + 480) + 372);
        v155 = *(_DWORD *)(v46 + 860);
        if (v153)
          LODWORD(v153) = *(_DWORD *)(v153 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v46 + 74;
        *(_WORD *)&buf[22] = 2080;
        v209 = (uint64_t)" ";
        *(_WORD *)v210 = 1024;
        *(_DWORD *)&v210[2] = v154;
        *(_WORD *)&v210[6] = 1024;
        *(_DWORD *)&v210[8] = v155;
        *(_WORD *)&v210[12] = 1024;
        *(_DWORD *)&v210[14] = v153;
        _os_log_impl(&dword_182FBE000, v152, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing processed_input_frames", buf, 0x32u);
      }
    }
    if (v12[1345])
    {
      v156 = __nwlog_obj();
      if (os_log_type_enabled(v156, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(type) = 136446210;
        *(_QWORD *)((char *)&type + 4) = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v156, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&type, 0xCu);
      }
    }
LABEL_69:
    *(_QWORD *)buf = v47;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
    v209 = (uint64_t)&__block_descriptor_tmp_55_39648;
    *(_QWORD *)v210 = v46 + 632;
    v210[8] = 0;
    v51 = *(_QWORD *)(v46 + 632);
    do
    {
      if (!v51)
        break;
      v52 = *(_QWORD *)(v51 + 32);
      v53 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v51 = v52;
    }
    while ((v53 & 1) != 0);
    if ((*(_BYTE *)(v46 + 158) & 1) == 0)
    {
      if (v12[1345])
      {
        v131 = __nwlog_obj();
        if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
        {
          v132 = *(_QWORD *)(v46 + 488);
          v133 = *(_DWORD *)(*(_QWORD *)(v46 + 480) + 372);
          v134 = *(_DWORD *)(v46 + 860);
          if (v132)
            LODWORD(v132) = *(_DWORD *)(v132 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v46 + 74;
          *(_WORD *)&buf[22] = 2080;
          v209 = (uint64_t)" ";
          *(_WORD *)v210 = 1024;
          *(_DWORD *)&v210[2] = v133;
          *(_WORD *)&v210[6] = 1024;
          *(_DWORD *)&v210[8] = v134;
          *(_WORD *)&v210[12] = 1024;
          *(_DWORD *)&v210[14] = v132;
          _os_log_impl(&dword_182FBE000, v131, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removing pending_output_frames", buf, 0x32u);
        }
      }
    }
    *(_QWORD *)&type = v47;
    *((_QWORD *)&type + 1) = 0x40000000;
    v205 = (uint64_t (*)(__int128 *))___ZL29nw_http1_tear_down_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke;
    v206 = &__block_descriptor_tmp_54_39700;
    v207 = v46;
    v54 = *(_QWORD *)(v46 + 648);
    do
    {
      if (!v54)
        break;
      v55 = *(_QWORD *)(v54 + 32);
      v56 = v205(&type);
      v54 = v55;
    }
    while ((v56 & 1) != 0);
    nw_frame_cache_remove_all((uint64_t *)(v46 + 696));
    if ((*(_BYTE *)(v46 + 158) & 1) == 0)
    {
      if (v12[1345])
      {
        v135 = __nwlog_obj();
        if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
        {
          v136 = *(_QWORD *)(v46 + 488);
          v137 = *(_DWORD *)(*(_QWORD *)(v46 + 480) + 372);
          v138 = *(_DWORD *)(v46 + 860);
          if (v136)
            LODWORD(v136) = *(_DWORD *)(v136 + 424);
          v139 = *(_QWORD *)(v46 + 32);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v46 + 74;
          *(_WORD *)&buf[22] = 2080;
          v209 = (uint64_t)" ";
          *(_WORD *)v210 = 1024;
          *(_DWORD *)&v210[2] = v137;
          *(_WORD *)&v210[6] = 1024;
          *(_DWORD *)&v210[8] = v138;
          *(_WORD *)&v210[12] = 1024;
          *(_DWORD *)&v210[14] = v136;
          *(_WORD *)&v210[18] = 2048;
          *(_QWORD *)&v210[20] = v139;
          _os_log_impl(&dword_182FBE000, v135, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> calling remove input handler on output handler %p", buf, 0x3Cu);
        }
      }
    }
    v57 = *(_DWORD *)(v45 + 336);
    *(_DWORD *)(v45 + 336) = v57 - 1;
    if (v57)
    {
      if ((*(_BYTE *)(v45 + 158) & 1) != 0)
        goto LABEL_100;
      goto LABEL_99;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v58 = *(unsigned int *)(v45 + 336);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->connections_count";
    *(_WORD *)&buf[22] = 2048;
    v209 = 1;
    *(_WORD *)v210 = 2048;
    *(_QWORD *)&v210[2] = v58;
    v59 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v213) = 16;
    v203 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v59, &v213, &v203))
    {
      if (v213 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v60 = gLogObj;
        v61 = v213;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v213))
          goto LABEL_96;
        v62 = *(unsigned int *)(v45 + 336);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v209 = 1;
        *(_WORD *)v210 = 2048;
        *(_QWORD *)&v210[2] = v62;
        v63 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_95:
        _os_log_impl(&dword_182FBE000, v60, v61, v63, buf, 0x2Au);
        goto LABEL_96;
      }
      if (v203 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v60 = gLogObj;
        v61 = v213;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v213))
          goto LABEL_96;
        v67 = *(unsigned int *)(v45 + 336);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v209 = 1;
        *(_WORD *)v210 = 2048;
        *(_QWORD *)&v210[2] = v67;
        v63 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
        goto LABEL_95;
      }
      v64 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v60 = gLogObj;
      v61 = v213;
      v65 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v213);
      if (!v64)
      {
        if (!v65)
          goto LABEL_96;
        v68 = *(unsigned int *)(v45 + 336);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v209 = 1;
        *(_WORD *)v210 = 2048;
        *(_QWORD *)&v210[2] = v68;
        v63 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
        goto LABEL_95;
      }
      if (v65)
      {
        v66 = *(unsigned int *)(v45 + 336);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v209 = 1;
        *(_WORD *)v210 = 2048;
        *(_QWORD *)&v210[2] = v66;
        *(_WORD *)&v210[10] = 2082;
        *(_QWORD *)&v210[12] = v64;
        _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
      }
      free(v64);
    }
LABEL_96:
    if (v59)
      free(v59);
    *(_DWORD *)(v45 + 336) = 0;
    v12 = &unk_1ECD84000;
    v47 = MEMORY[0x1E0C809B0];
    if ((*(_BYTE *)(v45 + 158) & 1) != 0)
    {
LABEL_100:
      if ((*(_WORD *)(v46 + 872) & 0x800) == 0)
        goto LABEL_122;
      v69 = *(_DWORD *)(v45 + 368);
      *(_DWORD *)(v45 + 368) = v69 - 1;
      if (v69)
      {
        if ((*(_BYTE *)(v45 + 158) & 1) != 0)
          goto LABEL_122;
        goto LABEL_121;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v70 = *(unsigned int *)(v45 + 368);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
      *(_WORD *)&buf[22] = 2048;
      v209 = 1;
      *(_WORD *)v210 = 2048;
      *(_QWORD *)&v210[2] = v70;
      v71 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v213) = 16;
      v203 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v71, &v213, &v203))
      {
        if (v213 == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v72 = gLogObj;
          v73 = v213;
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v213))
            goto LABEL_118;
          v74 = *(unsigned int *)(v45 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          v209 = 1;
          *(_WORD *)v210 = 2048;
          *(_QWORD *)&v210[2] = v74;
          v75 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_117:
          _os_log_impl(&dword_182FBE000, v72, v73, v75, buf, 0x2Au);
          goto LABEL_118;
        }
        if (v203 == OS_LOG_TYPE_DEFAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v72 = gLogObj;
          v73 = v213;
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v213))
            goto LABEL_118;
          v79 = *(unsigned int *)(v45 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          v209 = 1;
          *(_WORD *)v210 = 2048;
          *(_QWORD *)&v210[2] = v79;
          v75 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_117;
        }
        v76 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v72 = gLogObj;
        v73 = v213;
        v77 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v213);
        if (!v76)
        {
          if (!v77)
            goto LABEL_118;
          v80 = *(unsigned int *)(v45 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          v209 = 1;
          *(_WORD *)v210 = 2048;
          *(_QWORD *)&v210[2] = v80;
          v75 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_117;
        }
        if (v77)
        {
          v78 = *(unsigned int *)(v45 + 368);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          v209 = 1;
          *(_WORD *)v210 = 2048;
          *(_QWORD *)&v210[2] = v78;
          *(_WORD *)&v210[10] = 2082;
          *(_QWORD *)&v210[12] = v76;
          _os_log_impl(&dword_182FBE000, v72, v73, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
        }
        free(v76);
      }
LABEL_118:
      if (v71)
        free(v71);
      *(_DWORD *)(v45 + 368) = 0;
      v12 = &unk_1ECD84000;
      v47 = MEMORY[0x1E0C809B0];
      if ((*(_BYTE *)(v45 + 158) & 1) != 0)
      {
LABEL_122:
        nw_protocol_remove_input_handler(*(_QWORD *)(v46 + 32), v46);
        nw_protocol_set_output_handler(v46, 0);
        if ((*(_BYTE *)(v46 + 158) & 1) == 0)
        {
          if (v12[1345])
          {
            v143 = __nwlog_obj();
            if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
            {
              v144 = *(_QWORD *)(v46 + 488);
              v145 = *(_DWORD *)(*(_QWORD *)(v46 + 480) + 372);
              v146 = *(_DWORD *)(v46 + 860);
              if (v144)
                LODWORD(v144) = *(_DWORD *)(v144 + 424);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_http1_connection_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v46 + 74;
              *(_WORD *)&buf[22] = 2080;
              v209 = (uint64_t)" ";
              *(_WORD *)v210 = 1024;
              *(_DWORD *)&v210[2] = v145;
              *(_WORD *)&v210[6] = 1024;
              *(_DWORD *)&v210[8] = v146;
              *(_WORD *)&v210[12] = 1024;
              *(_DWORD *)&v210[14] = v144;
              *(_WORD *)&v210[18] = 2048;
              *(_QWORD *)&v210[20] = v46;
              _os_log_impl(&dword_182FBE000, v143, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> destroying %p", buf, 0x3Cu);
            }
          }
        }
        v81 = *(_BYTE *)(v46 + 760);
        if ((v81 & 1) != 0)
        {
          v82 = *(void **)(v46 + 752);
          if (v82)
          {
            os_release(v82);
            v81 = *(_BYTE *)(v46 + 760);
          }
        }
        *(_QWORD *)(v46 + 752) = 0;
        *(_BYTE *)(v46 + 760) = v81 | 1;
        v83 = *(_BYTE *)(v46 + 744);
        if ((v83 & 1) != 0)
        {
          v84 = *(void **)(v46 + 736);
          if (v84)
          {
            os_release(v84);
            v83 = *(_BYTE *)(v46 + 744);
          }
        }
        *(_QWORD *)(v46 + 736) = 0;
        *(_BYTE *)(v46 + 744) = v83 | 1;
        v85 = *(_QWORD *)(v46 + 488);
        if (!v85 || *(_QWORD *)(v85 + 256) != v46)
        {
LABEL_143:
          *(_QWORD *)(v46 + 488) = 0;
          if ((*(_BYTE *)(v46 + 158) & 1) == 0)
          {
            if (!v12[1345])
              goto LABEL_145;
            v157 = __nwlog_obj();
            if (os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
            {
              v158 = *(_QWORD *)(v46 + 488);
              v159 = *(_DWORD *)(*(_QWORD *)(v46 + 480) + 372);
              v160 = *(_DWORD *)(v46 + 860);
              if (v158)
                LODWORD(v158) = *(_DWORD *)(v158 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_connection_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v46 + 74;
              *(_WORD *)&buf[22] = 2080;
              v209 = (uint64_t)" ";
              *(_WORD *)v210 = 1024;
              *(_DWORD *)&v210[2] = v159;
              *(_WORD *)&v210[6] = 1024;
              *(_DWORD *)&v210[8] = v160;
              *(_WORD *)&v210[12] = 1024;
              *(_DWORD *)&v210[14] = v158;
              _os_log_impl(&dword_182FBE000, v157, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing frame arrays", buf, 0x32u);
            }
          }
          if (v12[1345])
          {
            v161 = __nwlog_obj();
            if (os_log_type_enabled(v161, OS_LOG_TYPE_DEBUG))
            {
              v213 = 136446210;
              v214 = "nw_protocol_finalize_master_frame_array";
              _os_log_impl(&dword_182FBE000, v161, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v213, 0xCu);
            }
          }
LABEL_145:
          *(_QWORD *)buf = v47;
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39725;
          v209 = (uint64_t)&__block_descriptor_tmp_57_39726;
          v210[0] = 0;
          v93 = *(_QWORD *)(v46 + 680);
          do
          {
            if (!v93)
              break;
            v94 = *(_QWORD *)(v93 + 16);
            v95 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            v93 = v94;
          }
          while ((v95 & 1) != 0);
          if (!*(_QWORD *)(v46 + 680))
          {
            if (!v12[1345])
              goto LABEL_150;
            goto LABEL_346;
          }
          v118 = v47;
          __nwlog_obj();
          v213 = 136446210;
          v214 = "nw_protocol_finalize_master_frame_array";
          v119 = (char *)_os_log_send_and_compose_impl();
          v203 = OS_LOG_TYPE_ERROR;
          v202 = 0;
          if (__nwlog_fault(v119, &v203, &v202))
          {
            if (v203 == OS_LOG_TYPE_FAULT)
            {
              v120 = __nwlog_obj();
              v121 = v203;
              if (!os_log_type_enabled(v120, v203))
                goto LABEL_343;
              v213 = 136446210;
              v214 = "nw_protocol_finalize_master_frame_array";
              v122 = "%{public}s frame array is not empty after finalize";
LABEL_342:
              _os_log_impl(&dword_182FBE000, v120, v121, v122, (uint8_t *)&v213, 0xCu);
              goto LABEL_343;
            }
            if (!v202)
            {
              v120 = __nwlog_obj();
              v121 = v203;
              if (!os_log_type_enabled(v120, v203))
                goto LABEL_343;
              v213 = 136446210;
              v214 = "nw_protocol_finalize_master_frame_array";
              v122 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
              goto LABEL_342;
            }
            v179 = (char *)__nw_create_backtrace_string();
            v120 = __nwlog_obj();
            v121 = v203;
            v180 = os_log_type_enabled(v120, v203);
            if (!v179)
            {
              if (!v180)
                goto LABEL_343;
              v213 = 136446210;
              v214 = "nw_protocol_finalize_master_frame_array";
              v122 = "%{public}s frame array is not empty after finalize, no backtrace";
              goto LABEL_342;
            }
            if (v180)
            {
              v213 = 136446466;
              v214 = "nw_protocol_finalize_master_frame_array";
              v215 = 2082;
              v216 = v179;
              _os_log_impl(&dword_182FBE000, v120, v121, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", (uint8_t *)&v213, 0x16u);
            }
            free(v179);
          }
LABEL_343:
          if (v119)
            free(v119);
          v47 = v118;
          if (!gLogDatapath)
          {
LABEL_150:
            *(_QWORD *)buf = v47;
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39725;
            v209 = (uint64_t)&__block_descriptor_tmp_57_39726;
            v210[0] = 0;
            v96 = *(_QWORD *)(v46 + 664);
            do
            {
              if (!v96)
                break;
              v97 = *(_QWORD *)(v96 + 16);
              v98 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
              v96 = v97;
            }
            while ((v98 & 1) != 0);
            if (!*(_QWORD *)(v46 + 664))
            {
LABEL_154:
              nw_frame_cache_destroy((uint64_t *)(v46 + 696));
              v99 = *(void **)(v46 + 528);
              if (v99)
              {
                v100 = *(void **)(v46 + 544);
                if (v100)
                  nw_association_unregister(v99, v100);
              }
              v101 = *(void **)(v46 + 800);
              if (v101)
              {
                free(v101);
                *(_QWORD *)(v46 + 800) = 0;
              }
              *(_DWORD *)(v46 + 840) = 0;
              v102 = *(void **)(v46 + 808);
              if (v102)
              {
                free(v102);
                *(_QWORD *)(v46 + 808) = 0;
              }
              *(_DWORD *)(v46 + 844) = 0;
              v103 = *(void **)(v46 + 816);
              if (v103)
              {
                free(v103);
                *(_QWORD *)(v46 + 816) = 0;
              }
              *(_DWORD *)(v46 + 848) = 0;
              v104 = *(void **)(v46 + 824);
              if (v104)
              {
                free(v104);
                *(_QWORD *)(v46 + 824) = 0;
              }
              *(_DWORD *)(v46 + 852) = 0;
              v105 = *(void **)(v46 + 832);
              if (v105)
              {
                free(v105);
                *(_QWORD *)(v46 + 832) = 0;
              }
              *(_DWORD *)(v46 + 856) = 0;
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v46 + 608) + 16))(*(_QWORD *)(v46 + 608), 0);
              v106 = *(const void **)(v46 + 608);
              if (v106)
              {
                _Block_release(v106);
                *(_QWORD *)(v46 + 608) = 0;
              }
              nw_http1_connection::~nw_http1_connection((nw_http1_connection *)v46);
              free(v107);
              if (!*(_DWORD *)(v45 + 336) && !*(_DWORD *)(v45 + 344))
                nw_protocol_http1_destroy(v45, v45);
              return;
            }
            __nwlog_obj();
            v213 = 136446210;
            v214 = "nw_protocol_finalize_master_frame_array";
            v123 = (char *)_os_log_send_and_compose_impl();
            v203 = OS_LOG_TYPE_ERROR;
            v202 = 0;
            if (__nwlog_fault(v123, &v203, &v202))
            {
              if (v203 == OS_LOG_TYPE_FAULT)
              {
                v124 = __nwlog_obj();
                v125 = v203;
                if (!os_log_type_enabled(v124, v203))
                  goto LABEL_351;
                v213 = 136446210;
                v214 = "nw_protocol_finalize_master_frame_array";
                v126 = "%{public}s frame array is not empty after finalize";
                goto LABEL_350;
              }
              if (!v202)
              {
                v124 = __nwlog_obj();
                v125 = v203;
                if (!os_log_type_enabled(v124, v203))
                  goto LABEL_351;
                v213 = 136446210;
                v214 = "nw_protocol_finalize_master_frame_array";
                v126 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
                goto LABEL_350;
              }
              v181 = (char *)__nw_create_backtrace_string();
              v124 = __nwlog_obj();
              v125 = v203;
              v182 = os_log_type_enabled(v124, v203);
              if (v181)
              {
                if (v182)
                {
                  v213 = 136446466;
                  v214 = "nw_protocol_finalize_master_frame_array";
                  v215 = 2082;
                  v216 = v181;
                  _os_log_impl(&dword_182FBE000, v124, v125, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", (uint8_t *)&v213, 0x16u);
                }
                free(v181);
                goto LABEL_351;
              }
              if (v182)
              {
                v213 = 136446210;
                v214 = "nw_protocol_finalize_master_frame_array";
                v126 = "%{public}s frame array is not empty after finalize, no backtrace";
LABEL_350:
                _os_log_impl(&dword_182FBE000, v124, v125, v126, (uint8_t *)&v213, 0xCu);
              }
            }
LABEL_351:
            if (v123)
              free(v123);
            goto LABEL_154;
          }
LABEL_346:
          v199 = __nwlog_obj();
          if (os_log_type_enabled(v199, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_finalize_master_frame_array";
            _os_log_impl(&dword_182FBE000, v199, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
          }
          goto LABEL_150;
        }
        if (*(_QWORD *)(v85 + 248))
        {
          if ((*(_BYTE *)(v85 + 158) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v86 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              v87 = *(_QWORD *)(v85 + 256);
              v88 = *(_DWORD *)(*(_QWORD *)(v85 + 248) + 372);
              if (v87)
                LODWORD(v87) = *(_DWORD *)(v87 + 860);
              v89 = *(_DWORD *)(v85 + 424);
              *(_DWORD *)buf = 136448002;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v85 + 74;
              *(_WORD *)&buf[22] = 2080;
              v209 = (uint64_t)" ";
              *(_WORD *)v210 = 1024;
              *(_DWORD *)&v210[2] = v88;
              *(_WORD *)&v210[6] = 1024;
              *(_DWORD *)&v210[8] = v87;
              *(_WORD *)&v210[12] = 1024;
              *(_DWORD *)&v210[14] = v89;
              *(_WORD *)&v210[18] = 2048;
              *(_QWORD *)&v210[20] = v85;
              v211 = 2048;
              v212 = v46;
              _os_log_impl(&dword_182FBE000, v86, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p", buf, 0x46u);
            }
          }
          if (gLogDatapath)
          {
            v192 = __nwlog_obj();
            if (os_log_type_enabled(v192, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
              _os_log_impl(&dword_182FBE000, v192, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }
          *(_QWORD *)buf = v47;
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
          v209 = (uint64_t)&__block_descriptor_tmp_55_39648;
          *(_QWORD *)v210 = v46 + 632;
          v210[8] = 0;
          v90 = *(_QWORD *)(v46 + 632);
          do
          {
            if (!v90)
              break;
            v91 = *(_QWORD *)(v90 + 32);
            v92 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            v90 = v91;
          }
          while ((v92 & 1) != 0);
          *(_QWORD *)(v85 + 256) = 0;
          *(_QWORD *)(v46 + 488) = 0;
          nw_protocol_set_output_handler(v85, 0);
          nw_protocol_set_input_handler(v46, 0);
          v12 = &unk_1ECD84000;
          goto LABEL_143;
        }
        v187 = v47;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
        v188 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v213) = 16;
        v203 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v188, &v213, &v203))
        {
          if (v213 == 17)
          {
            v189 = __nwlog_obj();
            v190 = v213;
            if (os_log_type_enabled(v189, (os_log_type_t)v213))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v191 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_362:
              _os_log_impl(&dword_182FBE000, v189, v190, v191, buf, 0xCu);
            }
          }
          else if (v203)
          {
            v200 = (char *)__nw_create_backtrace_string();
            v189 = __nwlog_obj();
            v190 = v213;
            v201 = os_log_type_enabled(v189, (os_log_type_t)v213);
            if (v200)
            {
              if (v201)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v200;
                _os_log_impl(&dword_182FBE000, v189, v190, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v200);
              goto LABEL_363;
            }
            if (v201)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v191 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
              goto LABEL_362;
            }
          }
          else
          {
            v189 = __nwlog_obj();
            v190 = v213;
            if (os_log_type_enabled(v189, (os_log_type_t)v213))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v191 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
              goto LABEL_362;
            }
          }
        }
LABEL_363:
        if (v188)
          free(v188);
        v12 = (_BYTE *)&unk_1ECD84000;
        v47 = v187;
        goto LABEL_143;
      }
LABEL_121:
      if (v12[1345])
      {
        v176 = __nwlog_obj();
        if (os_log_type_enabled(v176, OS_LOG_TYPE_DEBUG))
        {
          v177 = *(_DWORD *)(v45 + 372);
          v178 = *(_DWORD *)(v45 + 368) + *(_DWORD *)(v45 + 364);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v45 + 74;
          *(_WORD *)&buf[22] = 2080;
          v209 = (uint64_t)" ";
          *(_WORD *)v210 = 1024;
          *(_DWORD *)&v210[2] = v177;
          *(_WORD *)&v210[6] = 1024;
          *(_DWORD *)&v210[8] = v178;
          *(_WORD *)&v210[12] = 2048;
          *(_QWORD *)&v210[14] = v46;
          _os_log_impl(&dword_182FBE000, v176, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> decreased connection pool width to %u after removing non-reusable connection %p", buf, 0x36u);
        }
      }
      goto LABEL_122;
    }
LABEL_99:
    if (v12[1345])
    {
      v140 = __nwlog_obj();
      if (os_log_type_enabled(v140, OS_LOG_TYPE_DEBUG))
      {
        v141 = *(_DWORD *)(v45 + 372);
        v142 = *(_DWORD *)(v45 + 336);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v45 + 74;
        *(_WORD *)&buf[22] = 2080;
        v209 = (uint64_t)" ";
        *(_WORD *)v210 = 1024;
        *(_DWORD *)&v210[2] = v141;
        *(_WORD *)&v210[6] = 2048;
        *(_QWORD *)&v210[8] = v46;
        *(_WORD *)&v210[16] = 1024;
        *(_DWORD *)&v210[18] = v142;
        _os_log_impl(&dword_182FBE000, v140, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> removed connection %p, now have %u connections", buf, 0x36u);
      }
    }
    goto LABEL_100;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
  v114 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(type) = 16;
  LOBYTE(v213) = 0;
  if (!__nwlog_fault(v114, &type, &v213))
    goto LABEL_338;
  if (type == 17)
  {
    v115 = __nwlog_obj();
    v116 = type;
    if (!os_log_type_enabled(v115, (os_log_type_t)type))
      goto LABEL_338;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
    v117 = "%{public}s called with null http1_connection";
    goto LABEL_337;
  }
  if (!(_BYTE)v213)
  {
    v115 = __nwlog_obj();
    v116 = type;
    if (!os_log_type_enabled(v115, (os_log_type_t)type))
      goto LABEL_338;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
    v117 = "%{public}s called with null http1_connection, backtrace limit exceeded";
    goto LABEL_337;
  }
  v169 = (char *)__nw_create_backtrace_string();
  v115 = __nwlog_obj();
  v116 = type;
  v170 = os_log_type_enabled(v115, (os_log_type_t)type);
  if (!v169)
  {
    if (!v170)
      goto LABEL_338;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
    v117 = "%{public}s called with null http1_connection, no backtrace";
    goto LABEL_337;
  }
  if (v170)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v169;
    _os_log_impl(&dword_182FBE000, v115, v116, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v169);
  if (v114)
    goto LABEL_339;
}

uint64_t ___ZL35nw_protocol_http1_add_input_handlerP11nw_protocolS0__block_invoke(uint64_t a1, void *a2)
{
  uint64_t result;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    result = nw_protocol_options_is_tls(a2);
    if ((_DWORD)result)
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 376) |= 2u;
  }
  else
  {
    result = nw_protocol_options_get_protocol_handle(a2);
    if (result == *(_QWORD *)(a1 + 40))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

void ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke(uint64_t a1, void *a2, int a3)
{
  id outbound_message;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  int status_code;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  const char *v18;
  uint64_t outbound_body_size;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  const char *v27;
  id v28;
  id v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  void *v37;
  uint64_t inbound_body_size;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  id inbound_message;
  id v52;
  int v53;
  id v54;
  _QWORD *v55;
  _QWORD v56[5];
  __int16 v57;
  _QWORD v58[6];
  _QWORD v59[5];
  _QWORD v60[5];
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  switch(a3)
  {
    case 0:
      outbound_message = nw_http_transaction_metadata_get_outbound_message(a2);
      v6 = nw_http_metadata_copy_request(outbound_message);
      v7 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v60[0] = MEMORY[0x1E0C809B0];
        v60[1] = 0x40000000;
        v60[2] = ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_2;
        v60[3] = &__block_descriptor_tmp_84_40960;
        v60[4] = *(_QWORD *)(a1 + 32);
        v8 = v6;
        v9 = v60;
        _nw_http_request_access_method((uint64_t)v8, v9);

      }
      if (!v7)
        goto LABEL_25;
      v10 = v7;
      status_code = _nw_http_response_get_status_code();

      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) != 0)
        goto LABEL_24;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        goto LABEL_24;
      v13 = *(_QWORD *)(a1 + 32);
      v14 = v13 + 74;
      v15 = *(_QWORD *)(v13 + 256);
      v16 = *(_DWORD *)(*(_QWORD *)(v13 + 248) + 372);
      if (v15)
        LODWORD(v15) = *(_DWORD *)(v15 + 860);
      v17 = *(_DWORD *)(v13 + 424);
      *(_DWORD *)buf = 136447746;
      v62 = "nw_protocol_http1_connected_block_invoke";
      v63 = 2082;
      v64 = v14;
      v65 = 2080;
      v66 = " ";
      v67 = 1024;
      v68 = v16;
      v69 = 1024;
      v70 = v15;
      v71 = 1024;
      v72 = v17;
      v73 = 1024;
      LODWORD(v74) = status_code;
      v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] sending response header {status=%hu}";
      goto LABEL_23;
    case 1:
      outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(a2);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) != 0)
        return;
      v20 = outbound_body_size;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        return;
      v22 = *(_QWORD *)(a1 + 32);
      v23 = v22 + 74;
      v24 = *(_QWORD *)(v22 + 256);
      v25 = *(_DWORD *)(*(_QWORD *)(v22 + 248) + 372);
      if (v24)
        LODWORD(v24) = *(_DWORD *)(v24 + 860);
      v26 = *(_DWORD *)(v22 + 424);
      *(_DWORD *)buf = 136447746;
      v62 = "nw_protocol_http1_connected_block_invoke";
      v63 = 2082;
      v64 = v23;
      v65 = 2080;
      v66 = " ";
      v67 = 1024;
      v68 = v25;
      v69 = 1024;
      v70 = v24;
      v71 = 1024;
      v72 = v26;
      v73 = 2048;
      v74 = v20;
      v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] finished sending {body_bytes=%llu}";
      goto LABEL_34;
    case 2:
      outbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
      v6 = nw_http_metadata_copy_request(outbound_message);
      v28 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v59[0] = MEMORY[0x1E0C809B0];
        v59[1] = 0x40000000;
        v59[2] = ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_85;
        v59[3] = &__block_descriptor_tmp_86_40963;
        v59[4] = *(_QWORD *)(a1 + 32);
        v29 = v6;
        v30 = v59;
        _nw_http_request_access_method((uint64_t)v29, v30);

      }
      if (v28)
      {
        v10 = v28;
        v31 = _nw_http_response_get_status_code();

        if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            v32 = *(_QWORD *)(a1 + 32);
            v33 = v32 + 74;
            v34 = *(_QWORD *)(v32 + 256);
            v35 = *(_DWORD *)(*(_QWORD *)(v32 + 248) + 372);
            if (v34)
              LODWORD(v34) = *(_DWORD *)(v34 + 860);
            v36 = *(_DWORD *)(v32 + 424);
            *(_DWORD *)buf = 136447746;
            v62 = "nw_protocol_http1_connected_block_invoke";
            v63 = 2082;
            v64 = v33;
            v65 = 2080;
            v66 = " ";
            v67 = 1024;
            v68 = v35;
            v69 = 1024;
            v70 = v34;
            v71 = 1024;
            v72 = v36;
            v73 = 1024;
            LODWORD(v74) = v31;
            v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] receiving response header {status=%hu}";
LABEL_23:
            _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, v18, buf, 0x38u);
          }
        }
LABEL_24:
        os_release(v10);
      }
LABEL_25:
      if (v6)
        os_release(v6);
      if (!outbound_message)
        return;
      v37 = outbound_message;
      goto LABEL_56;
    case 3:
      inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(a2);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) != 0)
        return;
      v39 = inbound_body_size;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        return;
      v40 = *(_QWORD *)(a1 + 32);
      v41 = v40 + 74;
      v42 = *(_QWORD *)(v40 + 256);
      v43 = *(_DWORD *)(*(_QWORD *)(v40 + 248) + 372);
      if (v42)
        LODWORD(v42) = *(_DWORD *)(v42 + 860);
      v44 = *(_DWORD *)(v40 + 424);
      *(_DWORD *)buf = 136447746;
      v62 = "nw_protocol_http1_connected_block_invoke";
      v63 = 2082;
      v64 = v41;
      v65 = 2080;
      v66 = " ";
      v67 = 1024;
      v68 = v43;
      v69 = 1024;
      v70 = v42;
      v71 = 1024;
      v72 = v44;
      v73 = 2048;
      v74 = v39;
      v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] finished receiving {body_bytes=%llu}";
LABEL_34:
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_INFO, v27, buf, 0x3Cu);
      return;
    case 4:
      v45 = MEMORY[0x1E0C809B0];
      v58[0] = MEMORY[0x1E0C809B0];
      v58[1] = 0x40000000;
      v58[2] = ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_87;
      v58[3] = &__block_descriptor_tmp_88;
      v46 = *(_QWORD *)(a1 + 32);
      v58[4] = a2;
      v58[5] = v46;
      v47 = nw_http_transaction_metadata_get_outbound_message(a2);
      v48 = v47;
      if (v47)
      {
        v49 = nw_http_metadata_copy_request(v47);
        v50 = nw_http_metadata_copy_response(v48);
        inbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
        if (!inbound_message)
          goto LABEL_44;
        if (v49)
        {
          if (v50)
            goto LABEL_45;
          goto LABEL_43;
        }
      }
      else
      {
        v52 = nw_http_transaction_metadata_get_inbound_message(a2);
        v50 = 0;
        if (!v52)
        {
          v53 = 0;
          inbound_message = 0;
          goto LABEL_59;
        }
        inbound_message = v52;
      }
      v49 = nw_http_metadata_copy_request(inbound_message);
      if (v50)
        goto LABEL_45;
LABEL_43:
      v50 = nw_http_metadata_copy_response(inbound_message);
LABEL_44:
      if (!v50)
      {
        v53 = 0;
        if (!v49)
          goto LABEL_59;
LABEL_48:
        v56[0] = v45;
        v56[1] = 0x40000000;
        v56[2] = ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_89;
        v56[3] = &unk_1E14A17B0;
        v56[4] = v58;
        v57 = v53;
        v54 = v49;
        v55 = v56;
        _nw_http_request_access_method((uint64_t)v54, v55);

        if (!inbound_message)
          goto LABEL_50;
        goto LABEL_49;
      }
LABEL_45:
      v50 = v50;
      v53 = _nw_http_response_get_status_code();

      if (v49)
        goto LABEL_48;
LABEL_59:
      ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_87((uint64_t)v58, (uint64_t)"", v53);
      v54 = 0;
      if (inbound_message)
LABEL_49:
        os_release(inbound_message);
LABEL_50:
      if (v48)
        os_release(v48);
      if (v50)
        os_release(v50);
      if (v54)
      {
        v37 = v54;
LABEL_56:
        os_release(v37);
      }
      return;
    default:
      return;
  }
}

void ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_2(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = v5 + 74;
      v7 = *(_QWORD *)(v5 + 256);
      v8 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      v9 = *(_DWORD *)(v5 + 424);
      v10 = 136447746;
      v11 = "nw_protocol_http1_connected_block_invoke_2";
      v12 = 2082;
      v13 = v6;
      v14 = 2080;
      v15 = " ";
      v16 = 1024;
      v17 = v8;
      v18 = 1024;
      v19 = v7;
      v20 = 1024;
      v21 = v9;
      v22 = 2082;
      v23 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> [http] sending request header {method=\"%{public}s\"}", (uint8_t *)&v10, 0x3Cu);
    }
  }
}

void ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_85(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = v5 + 74;
      v7 = *(_QWORD *)(v5 + 256);
      v8 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      v9 = *(_DWORD *)(v5 + 424);
      v10 = 136447746;
      v11 = "nw_protocol_http1_connected_block_invoke";
      v12 = 2082;
      v13 = v6;
      v14 = 2080;
      v15 = " ";
      v16 = 1024;
      v17 = v8;
      v18 = 1024;
      v19 = v7;
      v20 = 1024;
      v21 = v9;
      v22 = 2082;
      v23 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> [http] receiving request header {method=\"%{public}s\"}", (uint8_t *)&v10, 0x3Cu);
    }
  }
}

void ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_87(uint64_t a1, uint64_t a2, int a3)
{
  int start_reason;
  uint64_t start_time;
  uint64_t end_time;
  uint64_t outbound_message_start_time;
  uint64_t outbound_message_end_time;
  uint64_t inbound_message_start_time;
  uint64_t inbound_message_end_time;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  const char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t outbound_body_size;
  uint64_t inbound_body_size;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  start_reason = nw_http_transaction_metadata_get_start_reason(*(void **)(a1 + 32));
  start_time = nw_http_transaction_metadata_get_start_time(*(void **)(a1 + 32));
  end_time = nw_http_transaction_metadata_get_end_time(*(void **)(a1 + 32));
  outbound_message_start_time = nw_http_transaction_metadata_get_outbound_message_start_time(*(void **)(a1 + 32));
  outbound_message_end_time = nw_http_transaction_metadata_get_outbound_message_end_time(*(void **)(a1 + 32));
  inbound_message_start_time = nw_http_transaction_metadata_get_inbound_message_start_time(*(void **)(a1 + 32));
  inbound_message_end_time = nw_http_transaction_metadata_get_inbound_message_end_time(*(void **)(a1 + 32));
  outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(*(void **)(a1 + 32));
  inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(*(void **)(a1 + 32));
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 40) + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      v39 = a3;
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD *)(v13 + 256);
      if (v14)
        v34 = *(_DWORD *)(v14 + 860);
      else
        v34 = 0;
      v15 = inbound_message_end_time;
      if ((start_reason - 1) > 2)
        v16 = "initial";
      else
        v16 = off_1E14AA478[start_reason - 1];
      v35 = v16;
      v37 = *(_DWORD *)(*(_QWORD *)(v13 + 248) + 372);
      v17 = *(_DWORD *)(v13 + 424);
      v18 = -1;
      if (start_time && end_time)
      {
        v19 = nw_delta_nanos(start_time, end_time);
        v15 = inbound_message_end_time;
        if (v19 > 0xF423FFFFFFFFFLL)
          v18 = -1;
        else
          v18 = v19 / 0xF4240;
      }
      LODWORD(v20) = -1;
      v38 = v17;
      if (start_time)
      {
        if (outbound_message_start_time)
        {
          v21 = nw_delta_nanos(start_time, outbound_message_start_time);
          v15 = inbound_message_end_time;
          v20 = v21 / 0xF4240;
          if (v21 > 0xF423FFFFFFFFFLL)
            LODWORD(v20) = -1;
        }
      }
      v22 = -1;
      v36 = v20;
      if (outbound_message_start_time && outbound_message_end_time)
      {
        v23 = nw_delta_nanos(outbound_message_start_time, outbound_message_end_time);
        v15 = inbound_message_end_time;
        if (v23 > 0xF423FFFFFFFFFLL)
          v22 = -1;
        else
          v22 = v23 / 0xF4240;
      }
      v24 = v18;
      v25 = v13 + 74;
      v26 = -1;
      if (start_time)
      {
        v28 = outbound_body_size;
        v27 = inbound_body_size;
        if (inbound_message_start_time)
        {
          v29 = nw_delta_nanos(start_time, inbound_message_start_time);
          v15 = inbound_message_end_time;
          if (v29 > 0xF423FFFFFFFFFLL)
            v26 = -1;
          else
            v26 = v29 / 0xF4240;
        }
        LODWORD(v30) = -1;
        if (inbound_message_start_time)
          goto LABEL_29;
      }
      else
      {
        v28 = outbound_body_size;
        v27 = inbound_body_size;
        LODWORD(v30) = -1;
        if (inbound_message_start_time)
        {
LABEL_29:
          v31 = a2;
          v32 = v34;
          if (v15)
          {
            v33 = nw_delta_nanos(inbound_message_start_time, v15);
            v30 = v33 / 0xF4240;
            if (v33 > 0xF423FFFFFFFFFLL)
              LODWORD(v30) = -1;
          }
          goto LABEL_34;
        }
      }
      v31 = a2;
      v32 = v34;
LABEL_34:
      *(_DWORD *)buf = 136450050;
      v44 = "nw_protocol_http1_connected_block_invoke";
      v45 = 2082;
      v46 = v25;
      v47 = 2080;
      v48 = " ";
      v49 = 1024;
      v50 = v37;
      v51 = 1024;
      v52 = v32;
      v53 = 1024;
      v54 = v38;
      v55 = 2080;
      v56 = v35;
      v57 = 1024;
      v58 = v24;
      v59 = 2082;
      v60 = v31;
      v61 = 1024;
      v62 = v39;
      v63 = 1024;
      v64 = v36;
      v65 = 1024;
      v66 = v22;
      v67 = 1024;
      v68 = v26;
      v69 = 1024;
      v70 = v30;
      v71 = 2048;
      v72 = v28;
      v73 = 2048;
      v74 = v27;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:c%u:s%u> [http] transaction summary {start_reason=\"%s\", duration_ms=%d, request_method=\"%{public}s\", response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_ms=%d, inbound_duration_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}", buf, 0x7Eu);
    }
  }
}

uint64_t ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_89(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, *(unsigned __int16 *)(a1 + 40));
}

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke(uint64_t a1, void *a2, int a3)
{
  id outbound_message;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  int status_code;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  const char *v18;
  uint64_t outbound_body_size;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  const char *v27;
  id v28;
  id v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  void *v37;
  uint64_t inbound_body_size;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  id inbound_message;
  id v52;
  int v53;
  id v54;
  _QWORD *v55;
  _QWORD v56[5];
  __int16 v57;
  _QWORD v58[6];
  _QWORD v59[5];
  _QWORD v60[5];
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  switch(a3)
  {
    case 0:
      outbound_message = nw_http_transaction_metadata_get_outbound_message(a2);
      v6 = nw_http_metadata_copy_request(outbound_message);
      v7 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v60[0] = MEMORY[0x1E0C809B0];
        v60[1] = 0x40000000;
        v60[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_2;
        v60[3] = &__block_descriptor_tmp_19_41020;
        v60[4] = *(_QWORD *)(a1 + 32);
        v8 = v6;
        v9 = v60;
        _nw_http_request_access_method((uint64_t)v8, v9);

      }
      if (!v7)
        goto LABEL_25;
      v10 = v7;
      status_code = _nw_http_response_get_status_code();

      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) != 0)
        goto LABEL_24;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        goto LABEL_24;
      v13 = *(_QWORD *)(a1 + 32);
      v14 = v13 + 74;
      v15 = *(_QWORD *)(v13 + 256);
      v16 = *(_DWORD *)(*(_QWORD *)(v13 + 248) + 372);
      if (v15)
        LODWORD(v15) = *(_DWORD *)(v15 + 860);
      v17 = *(_DWORD *)(v13 + 424);
      *(_DWORD *)buf = 136447746;
      v62 = "nw_protocol_http1_connect_block_invoke";
      v63 = 2082;
      v64 = v14;
      v65 = 2080;
      v66 = " ";
      v67 = 1024;
      v68 = v16;
      v69 = 1024;
      v70 = v15;
      v71 = 1024;
      v72 = v17;
      v73 = 1024;
      LODWORD(v74) = status_code;
      v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] sending response header {status=%hu}";
      goto LABEL_23;
    case 1:
      outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(a2);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) != 0)
        return;
      v20 = outbound_body_size;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        return;
      v22 = *(_QWORD *)(a1 + 32);
      v23 = v22 + 74;
      v24 = *(_QWORD *)(v22 + 256);
      v25 = *(_DWORD *)(*(_QWORD *)(v22 + 248) + 372);
      if (v24)
        LODWORD(v24) = *(_DWORD *)(v24 + 860);
      v26 = *(_DWORD *)(v22 + 424);
      *(_DWORD *)buf = 136447746;
      v62 = "nw_protocol_http1_connect_block_invoke";
      v63 = 2082;
      v64 = v23;
      v65 = 2080;
      v66 = " ";
      v67 = 1024;
      v68 = v25;
      v69 = 1024;
      v70 = v24;
      v71 = 1024;
      v72 = v26;
      v73 = 2048;
      v74 = v20;
      v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] finished sending {body_bytes=%llu}";
      goto LABEL_34;
    case 2:
      outbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
      v6 = nw_http_metadata_copy_request(outbound_message);
      v28 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v59[0] = MEMORY[0x1E0C809B0];
        v59[1] = 0x40000000;
        v59[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_20;
        v59[3] = &__block_descriptor_tmp_21_41023;
        v59[4] = *(_QWORD *)(a1 + 32);
        v29 = v6;
        v30 = v59;
        _nw_http_request_access_method((uint64_t)v29, v30);

      }
      if (v28)
      {
        v10 = v28;
        v31 = _nw_http_response_get_status_code();

        if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            v32 = *(_QWORD *)(a1 + 32);
            v33 = v32 + 74;
            v34 = *(_QWORD *)(v32 + 256);
            v35 = *(_DWORD *)(*(_QWORD *)(v32 + 248) + 372);
            if (v34)
              LODWORD(v34) = *(_DWORD *)(v34 + 860);
            v36 = *(_DWORD *)(v32 + 424);
            *(_DWORD *)buf = 136447746;
            v62 = "nw_protocol_http1_connect_block_invoke";
            v63 = 2082;
            v64 = v33;
            v65 = 2080;
            v66 = " ";
            v67 = 1024;
            v68 = v35;
            v69 = 1024;
            v70 = v34;
            v71 = 1024;
            v72 = v36;
            v73 = 1024;
            LODWORD(v74) = v31;
            v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] receiving response header {status=%hu}";
LABEL_23:
            _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, v18, buf, 0x38u);
          }
        }
LABEL_24:
        os_release(v10);
      }
LABEL_25:
      if (v6)
        os_release(v6);
      if (!outbound_message)
        return;
      v37 = outbound_message;
      goto LABEL_56;
    case 3:
      inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(a2);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) != 0)
        return;
      v39 = inbound_body_size;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        return;
      v40 = *(_QWORD *)(a1 + 32);
      v41 = v40 + 74;
      v42 = *(_QWORD *)(v40 + 256);
      v43 = *(_DWORD *)(*(_QWORD *)(v40 + 248) + 372);
      if (v42)
        LODWORD(v42) = *(_DWORD *)(v42 + 860);
      v44 = *(_DWORD *)(v40 + 424);
      *(_DWORD *)buf = 136447746;
      v62 = "nw_protocol_http1_connect_block_invoke";
      v63 = 2082;
      v64 = v41;
      v65 = 2080;
      v66 = " ";
      v67 = 1024;
      v68 = v43;
      v69 = 1024;
      v70 = v42;
      v71 = 1024;
      v72 = v44;
      v73 = 2048;
      v74 = v39;
      v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] finished receiving {body_bytes=%llu}";
LABEL_34:
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_INFO, v27, buf, 0x3Cu);
      return;
    case 4:
      v45 = MEMORY[0x1E0C809B0];
      v58[0] = MEMORY[0x1E0C809B0];
      v58[1] = 0x40000000;
      v58[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_22;
      v58[3] = &__block_descriptor_tmp_24_41026;
      v46 = *(_QWORD *)(a1 + 32);
      v58[4] = a2;
      v58[5] = v46;
      v47 = nw_http_transaction_metadata_get_outbound_message(a2);
      v48 = v47;
      if (v47)
      {
        v49 = nw_http_metadata_copy_request(v47);
        v50 = nw_http_metadata_copy_response(v48);
        inbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
        if (!inbound_message)
          goto LABEL_44;
        if (v49)
        {
          if (v50)
            goto LABEL_45;
          goto LABEL_43;
        }
      }
      else
      {
        v52 = nw_http_transaction_metadata_get_inbound_message(a2);
        v50 = 0;
        if (!v52)
        {
          v53 = 0;
          inbound_message = 0;
          goto LABEL_59;
        }
        inbound_message = v52;
      }
      v49 = nw_http_metadata_copy_request(inbound_message);
      if (v50)
        goto LABEL_45;
LABEL_43:
      v50 = nw_http_metadata_copy_response(inbound_message);
LABEL_44:
      if (!v50)
      {
        v53 = 0;
        if (!v49)
          goto LABEL_59;
LABEL_48:
        v56[0] = v45;
        v56[1] = 0x40000000;
        v56[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_25;
        v56[3] = &unk_1E14A13B8;
        v56[4] = v58;
        v57 = v53;
        v54 = v49;
        v55 = v56;
        _nw_http_request_access_method((uint64_t)v54, v55);

        if (!inbound_message)
          goto LABEL_50;
        goto LABEL_49;
      }
LABEL_45:
      v50 = v50;
      v53 = _nw_http_response_get_status_code();

      if (v49)
        goto LABEL_48;
LABEL_59:
      ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_22((uint64_t)v58, (uint64_t)"", v53);
      v54 = 0;
      if (inbound_message)
LABEL_49:
        os_release(inbound_message);
LABEL_50:
      if (v48)
        os_release(v48);
      if (v50)
        os_release(v50);
      if (v54)
      {
        v37 = v54;
LABEL_56:
        os_release(v37);
      }
      return;
    default:
      return;
  }
}

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_29(uint64_t a1, void *a2, int a3)
{
  id outbound_message;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  int status_code;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  const char *v18;
  uint64_t outbound_body_size;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  const char *v27;
  id v28;
  id v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  void *v37;
  uint64_t inbound_body_size;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  id inbound_message;
  id v52;
  int v53;
  id v54;
  _QWORD *v55;
  _QWORD v56[5];
  __int16 v57;
  _QWORD v58[6];
  _QWORD v59[5];
  _QWORD v60[5];
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  switch(a3)
  {
    case 0:
      outbound_message = nw_http_transaction_metadata_get_outbound_message(a2);
      v6 = nw_http_metadata_copy_request(outbound_message);
      v7 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v60[0] = MEMORY[0x1E0C809B0];
        v60[1] = 0x40000000;
        v60[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_2_30;
        v60[3] = &__block_descriptor_tmp_31_41009;
        v60[4] = *(_QWORD *)(a1 + 32);
        v8 = v6;
        v9 = v60;
        _nw_http_request_access_method((uint64_t)v8, v9);

      }
      if (!v7)
        goto LABEL_25;
      v10 = v7;
      status_code = _nw_http_response_get_status_code();

      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) != 0)
        goto LABEL_24;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        goto LABEL_24;
      v13 = *(_QWORD *)(a1 + 32);
      v14 = v13 + 74;
      v15 = *(_QWORD *)(v13 + 256);
      v16 = *(_DWORD *)(*(_QWORD *)(v13 + 248) + 372);
      if (v15)
        LODWORD(v15) = *(_DWORD *)(v15 + 860);
      v17 = *(_DWORD *)(v13 + 424);
      *(_DWORD *)buf = 136447746;
      v62 = "nw_protocol_http1_connect_block_invoke";
      v63 = 2082;
      v64 = v14;
      v65 = 2080;
      v66 = " ";
      v67 = 1024;
      v68 = v16;
      v69 = 1024;
      v70 = v15;
      v71 = 1024;
      v72 = v17;
      v73 = 1024;
      LODWORD(v74) = status_code;
      v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] sending response header {status=%hu}";
      goto LABEL_23;
    case 1:
      outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(a2);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) != 0)
        return;
      v20 = outbound_body_size;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        return;
      v22 = *(_QWORD *)(a1 + 32);
      v23 = v22 + 74;
      v24 = *(_QWORD *)(v22 + 256);
      v25 = *(_DWORD *)(*(_QWORD *)(v22 + 248) + 372);
      if (v24)
        LODWORD(v24) = *(_DWORD *)(v24 + 860);
      v26 = *(_DWORD *)(v22 + 424);
      *(_DWORD *)buf = 136447746;
      v62 = "nw_protocol_http1_connect_block_invoke";
      v63 = 2082;
      v64 = v23;
      v65 = 2080;
      v66 = " ";
      v67 = 1024;
      v68 = v25;
      v69 = 1024;
      v70 = v24;
      v71 = 1024;
      v72 = v26;
      v73 = 2048;
      v74 = v20;
      v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] finished sending {body_bytes=%llu}";
      goto LABEL_34;
    case 2:
      outbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
      v6 = nw_http_metadata_copy_request(outbound_message);
      v28 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v59[0] = MEMORY[0x1E0C809B0];
        v59[1] = 0x40000000;
        v59[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_32;
        v59[3] = &__block_descriptor_tmp_33_41012;
        v59[4] = *(_QWORD *)(a1 + 32);
        v29 = v6;
        v30 = v59;
        _nw_http_request_access_method((uint64_t)v29, v30);

      }
      if (v28)
      {
        v10 = v28;
        v31 = _nw_http_response_get_status_code();

        if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            v32 = *(_QWORD *)(a1 + 32);
            v33 = v32 + 74;
            v34 = *(_QWORD *)(v32 + 256);
            v35 = *(_DWORD *)(*(_QWORD *)(v32 + 248) + 372);
            if (v34)
              LODWORD(v34) = *(_DWORD *)(v34 + 860);
            v36 = *(_DWORD *)(v32 + 424);
            *(_DWORD *)buf = 136447746;
            v62 = "nw_protocol_http1_connect_block_invoke";
            v63 = 2082;
            v64 = v33;
            v65 = 2080;
            v66 = " ";
            v67 = 1024;
            v68 = v35;
            v69 = 1024;
            v70 = v34;
            v71 = 1024;
            v72 = v36;
            v73 = 1024;
            LODWORD(v74) = v31;
            v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] receiving response header {status=%hu}";
LABEL_23:
            _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, v18, buf, 0x38u);
          }
        }
LABEL_24:
        os_release(v10);
      }
LABEL_25:
      if (v6)
        os_release(v6);
      if (!outbound_message)
        return;
      v37 = outbound_message;
      goto LABEL_56;
    case 3:
      inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(a2);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) != 0)
        return;
      v39 = inbound_body_size;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        return;
      v40 = *(_QWORD *)(a1 + 32);
      v41 = v40 + 74;
      v42 = *(_QWORD *)(v40 + 256);
      v43 = *(_DWORD *)(*(_QWORD *)(v40 + 248) + 372);
      if (v42)
        LODWORD(v42) = *(_DWORD *)(v42 + 860);
      v44 = *(_DWORD *)(v40 + 424);
      *(_DWORD *)buf = 136447746;
      v62 = "nw_protocol_http1_connect_block_invoke";
      v63 = 2082;
      v64 = v41;
      v65 = 2080;
      v66 = " ";
      v67 = 1024;
      v68 = v43;
      v69 = 1024;
      v70 = v42;
      v71 = 1024;
      v72 = v44;
      v73 = 2048;
      v74 = v39;
      v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> [http] finished receiving {body_bytes=%llu}";
LABEL_34:
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_INFO, v27, buf, 0x3Cu);
      return;
    case 4:
      v45 = MEMORY[0x1E0C809B0];
      v58[0] = MEMORY[0x1E0C809B0];
      v58[1] = 0x40000000;
      v58[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_34;
      v58[3] = &__block_descriptor_tmp_35_41015;
      v46 = *(_QWORD *)(a1 + 32);
      v58[4] = a2;
      v58[5] = v46;
      v47 = nw_http_transaction_metadata_get_outbound_message(a2);
      v48 = v47;
      if (v47)
      {
        v49 = nw_http_metadata_copy_request(v47);
        v50 = nw_http_metadata_copy_response(v48);
        inbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
        if (!inbound_message)
          goto LABEL_44;
        if (v49)
        {
          if (v50)
            goto LABEL_45;
          goto LABEL_43;
        }
      }
      else
      {
        v52 = nw_http_transaction_metadata_get_inbound_message(a2);
        v50 = 0;
        if (!v52)
        {
          v53 = 0;
          inbound_message = 0;
          goto LABEL_59;
        }
        inbound_message = v52;
      }
      v49 = nw_http_metadata_copy_request(inbound_message);
      if (v50)
        goto LABEL_45;
LABEL_43:
      v50 = nw_http_metadata_copy_response(inbound_message);
LABEL_44:
      if (!v50)
      {
        v53 = 0;
        if (!v49)
          goto LABEL_59;
LABEL_48:
        v56[0] = v45;
        v56[1] = 0x40000000;
        v56[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_36;
        v56[3] = &unk_1E14A1460;
        v56[4] = v58;
        v57 = v53;
        v54 = v49;
        v55 = v56;
        _nw_http_request_access_method((uint64_t)v54, v55);

        if (!inbound_message)
          goto LABEL_50;
        goto LABEL_49;
      }
LABEL_45:
      v50 = v50;
      v53 = _nw_http_response_get_status_code();

      if (v49)
        goto LABEL_48;
LABEL_59:
      ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_34((uint64_t)v58, (uint64_t)"", v53);
      v54 = 0;
      if (inbound_message)
LABEL_49:
        os_release(inbound_message);
LABEL_50:
      if (v48)
        os_release(v48);
      if (v50)
        os_release(v50);
      if (v54)
      {
        v37 = v54;
LABEL_56:
        os_release(v37);
      }
      return;
    default:
      return;
  }
}

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_2_30(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = v5 + 74;
      v7 = *(_QWORD *)(v5 + 256);
      v8 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      v9 = *(_DWORD *)(v5 + 424);
      v10 = 136447746;
      v11 = "nw_protocol_http1_connect_block_invoke_2";
      v12 = 2082;
      v13 = v6;
      v14 = 2080;
      v15 = " ";
      v16 = 1024;
      v17 = v8;
      v18 = 1024;
      v19 = v7;
      v20 = 1024;
      v21 = v9;
      v22 = 2082;
      v23 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> [http] sending request header {method=\"%{public}s\"}", (uint8_t *)&v10, 0x3Cu);
    }
  }
}

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_32(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = v5 + 74;
      v7 = *(_QWORD *)(v5 + 256);
      v8 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      v9 = *(_DWORD *)(v5 + 424);
      v10 = 136447746;
      v11 = "nw_protocol_http1_connect_block_invoke";
      v12 = 2082;
      v13 = v6;
      v14 = 2080;
      v15 = " ";
      v16 = 1024;
      v17 = v8;
      v18 = 1024;
      v19 = v7;
      v20 = 1024;
      v21 = v9;
      v22 = 2082;
      v23 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> [http] receiving request header {method=\"%{public}s\"}", (uint8_t *)&v10, 0x3Cu);
    }
  }
}

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_34(uint64_t a1, uint64_t a2, int a3)
{
  int start_reason;
  uint64_t start_time;
  uint64_t end_time;
  uint64_t outbound_message_start_time;
  uint64_t outbound_message_end_time;
  uint64_t inbound_message_start_time;
  uint64_t inbound_message_end_time;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  const char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t outbound_body_size;
  uint64_t inbound_body_size;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  start_reason = nw_http_transaction_metadata_get_start_reason(*(void **)(a1 + 32));
  start_time = nw_http_transaction_metadata_get_start_time(*(void **)(a1 + 32));
  end_time = nw_http_transaction_metadata_get_end_time(*(void **)(a1 + 32));
  outbound_message_start_time = nw_http_transaction_metadata_get_outbound_message_start_time(*(void **)(a1 + 32));
  outbound_message_end_time = nw_http_transaction_metadata_get_outbound_message_end_time(*(void **)(a1 + 32));
  inbound_message_start_time = nw_http_transaction_metadata_get_inbound_message_start_time(*(void **)(a1 + 32));
  inbound_message_end_time = nw_http_transaction_metadata_get_inbound_message_end_time(*(void **)(a1 + 32));
  outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(*(void **)(a1 + 32));
  inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(*(void **)(a1 + 32));
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 40) + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      v39 = a3;
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD *)(v13 + 256);
      if (v14)
        v34 = *(_DWORD *)(v14 + 860);
      else
        v34 = 0;
      v15 = inbound_message_end_time;
      if ((start_reason - 1) > 2)
        v16 = "initial";
      else
        v16 = off_1E14AA478[start_reason - 1];
      v35 = v16;
      v37 = *(_DWORD *)(*(_QWORD *)(v13 + 248) + 372);
      v17 = *(_DWORD *)(v13 + 424);
      v18 = -1;
      if (start_time && end_time)
      {
        v19 = nw_delta_nanos(start_time, end_time);
        v15 = inbound_message_end_time;
        if (v19 > 0xF423FFFFFFFFFLL)
          v18 = -1;
        else
          v18 = v19 / 0xF4240;
      }
      LODWORD(v20) = -1;
      v38 = v17;
      if (start_time)
      {
        if (outbound_message_start_time)
        {
          v21 = nw_delta_nanos(start_time, outbound_message_start_time);
          v15 = inbound_message_end_time;
          v20 = v21 / 0xF4240;
          if (v21 > 0xF423FFFFFFFFFLL)
            LODWORD(v20) = -1;
        }
      }
      v22 = -1;
      v36 = v20;
      if (outbound_message_start_time && outbound_message_end_time)
      {
        v23 = nw_delta_nanos(outbound_message_start_time, outbound_message_end_time);
        v15 = inbound_message_end_time;
        if (v23 > 0xF423FFFFFFFFFLL)
          v22 = -1;
        else
          v22 = v23 / 0xF4240;
      }
      v24 = v18;
      v25 = v13 + 74;
      v26 = -1;
      if (start_time)
      {
        v28 = outbound_body_size;
        v27 = inbound_body_size;
        if (inbound_message_start_time)
        {
          v29 = nw_delta_nanos(start_time, inbound_message_start_time);
          v15 = inbound_message_end_time;
          if (v29 > 0xF423FFFFFFFFFLL)
            v26 = -1;
          else
            v26 = v29 / 0xF4240;
        }
        LODWORD(v30) = -1;
        if (inbound_message_start_time)
          goto LABEL_29;
      }
      else
      {
        v28 = outbound_body_size;
        v27 = inbound_body_size;
        LODWORD(v30) = -1;
        if (inbound_message_start_time)
        {
LABEL_29:
          v31 = a2;
          v32 = v34;
          if (v15)
          {
            v33 = nw_delta_nanos(inbound_message_start_time, v15);
            v30 = v33 / 0xF4240;
            if (v33 > 0xF423FFFFFFFFFLL)
              LODWORD(v30) = -1;
          }
          goto LABEL_34;
        }
      }
      v31 = a2;
      v32 = v34;
LABEL_34:
      *(_DWORD *)buf = 136450050;
      v44 = "nw_protocol_http1_connect_block_invoke";
      v45 = 2082;
      v46 = v25;
      v47 = 2080;
      v48 = " ";
      v49 = 1024;
      v50 = v37;
      v51 = 1024;
      v52 = v32;
      v53 = 1024;
      v54 = v38;
      v55 = 2080;
      v56 = v35;
      v57 = 1024;
      v58 = v24;
      v59 = 2082;
      v60 = v31;
      v61 = 1024;
      v62 = v39;
      v63 = 1024;
      v64 = v36;
      v65 = 1024;
      v66 = v22;
      v67 = 1024;
      v68 = v26;
      v69 = 1024;
      v70 = v30;
      v71 = 2048;
      v72 = v28;
      v73 = 2048;
      v74 = v27;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:c%u:s%u> [http] transaction summary {start_reason=\"%s\", duration_ms=%d, request_method=\"%{public}s\", response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_ms=%d, inbound_duration_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}", buf, 0x7Eu);
    }
  }
}

uint64_t ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_36(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, *(unsigned __int16 *)(a1 + 40));
}

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_2(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = v5 + 74;
      v7 = *(_QWORD *)(v5 + 256);
      v8 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      v9 = *(_DWORD *)(v5 + 424);
      v10 = 136447746;
      v11 = "nw_protocol_http1_connect_block_invoke_2";
      v12 = 2082;
      v13 = v6;
      v14 = 2080;
      v15 = " ";
      v16 = 1024;
      v17 = v8;
      v18 = 1024;
      v19 = v7;
      v20 = 1024;
      v21 = v9;
      v22 = 2082;
      v23 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> [http] sending request header {method=\"%{public}s\"}", (uint8_t *)&v10, 0x3Cu);
    }
  }
}

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_20(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = v5 + 74;
      v7 = *(_QWORD *)(v5 + 256);
      v8 = *(_DWORD *)(*(_QWORD *)(v5 + 248) + 372);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      v9 = *(_DWORD *)(v5 + 424);
      v10 = 136447746;
      v11 = "nw_protocol_http1_connect_block_invoke";
      v12 = 2082;
      v13 = v6;
      v14 = 2080;
      v15 = " ";
      v16 = 1024;
      v17 = v8;
      v18 = 1024;
      v19 = v7;
      v20 = 1024;
      v21 = v9;
      v22 = 2082;
      v23 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> [http] receiving request header {method=\"%{public}s\"}", (uint8_t *)&v10, 0x3Cu);
    }
  }
}

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_22(uint64_t a1, uint64_t a2, int a3)
{
  int start_reason;
  uint64_t start_time;
  uint64_t end_time;
  uint64_t outbound_message_start_time;
  uint64_t outbound_message_end_time;
  uint64_t inbound_message_start_time;
  uint64_t inbound_message_end_time;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  const char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t outbound_body_size;
  uint64_t inbound_body_size;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  start_reason = nw_http_transaction_metadata_get_start_reason(*(void **)(a1 + 32));
  start_time = nw_http_transaction_metadata_get_start_time(*(void **)(a1 + 32));
  end_time = nw_http_transaction_metadata_get_end_time(*(void **)(a1 + 32));
  outbound_message_start_time = nw_http_transaction_metadata_get_outbound_message_start_time(*(void **)(a1 + 32));
  outbound_message_end_time = nw_http_transaction_metadata_get_outbound_message_end_time(*(void **)(a1 + 32));
  inbound_message_start_time = nw_http_transaction_metadata_get_inbound_message_start_time(*(void **)(a1 + 32));
  inbound_message_end_time = nw_http_transaction_metadata_get_inbound_message_end_time(*(void **)(a1 + 32));
  outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(*(void **)(a1 + 32));
  inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(*(void **)(a1 + 32));
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 40) + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      v39 = a3;
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD *)(v13 + 256);
      if (v14)
        v34 = *(_DWORD *)(v14 + 860);
      else
        v34 = 0;
      v15 = inbound_message_end_time;
      if ((start_reason - 1) > 2)
        v16 = "initial";
      else
        v16 = off_1E14AA478[start_reason - 1];
      v35 = v16;
      v37 = *(_DWORD *)(*(_QWORD *)(v13 + 248) + 372);
      v17 = *(_DWORD *)(v13 + 424);
      v18 = -1;
      if (start_time && end_time)
      {
        v19 = nw_delta_nanos(start_time, end_time);
        v15 = inbound_message_end_time;
        if (v19 > 0xF423FFFFFFFFFLL)
          v18 = -1;
        else
          v18 = v19 / 0xF4240;
      }
      LODWORD(v20) = -1;
      v38 = v17;
      if (start_time)
      {
        if (outbound_message_start_time)
        {
          v21 = nw_delta_nanos(start_time, outbound_message_start_time);
          v15 = inbound_message_end_time;
          v20 = v21 / 0xF4240;
          if (v21 > 0xF423FFFFFFFFFLL)
            LODWORD(v20) = -1;
        }
      }
      v22 = -1;
      v36 = v20;
      if (outbound_message_start_time && outbound_message_end_time)
      {
        v23 = nw_delta_nanos(outbound_message_start_time, outbound_message_end_time);
        v15 = inbound_message_end_time;
        if (v23 > 0xF423FFFFFFFFFLL)
          v22 = -1;
        else
          v22 = v23 / 0xF4240;
      }
      v24 = v18;
      v25 = v13 + 74;
      v26 = -1;
      if (start_time)
      {
        v28 = outbound_body_size;
        v27 = inbound_body_size;
        if (inbound_message_start_time)
        {
          v29 = nw_delta_nanos(start_time, inbound_message_start_time);
          v15 = inbound_message_end_time;
          if (v29 > 0xF423FFFFFFFFFLL)
            v26 = -1;
          else
            v26 = v29 / 0xF4240;
        }
        LODWORD(v30) = -1;
        if (inbound_message_start_time)
          goto LABEL_29;
      }
      else
      {
        v28 = outbound_body_size;
        v27 = inbound_body_size;
        LODWORD(v30) = -1;
        if (inbound_message_start_time)
        {
LABEL_29:
          v31 = a2;
          v32 = v34;
          if (v15)
          {
            v33 = nw_delta_nanos(inbound_message_start_time, v15);
            v30 = v33 / 0xF4240;
            if (v33 > 0xF423FFFFFFFFFLL)
              LODWORD(v30) = -1;
          }
          goto LABEL_34;
        }
      }
      v31 = a2;
      v32 = v34;
LABEL_34:
      *(_DWORD *)buf = 136450050;
      v44 = "nw_protocol_http1_connect_block_invoke";
      v45 = 2082;
      v46 = v25;
      v47 = 2080;
      v48 = " ";
      v49 = 1024;
      v50 = v37;
      v51 = 1024;
      v52 = v32;
      v53 = 1024;
      v54 = v38;
      v55 = 2080;
      v56 = v35;
      v57 = 1024;
      v58 = v24;
      v59 = 2082;
      v60 = v31;
      v61 = 1024;
      v62 = v39;
      v63 = 1024;
      v64 = v36;
      v65 = 1024;
      v66 = v22;
      v67 = 1024;
      v68 = v26;
      v69 = 1024;
      v70 = v30;
      v71 = 2048;
      v72 = v28;
      v73 = 2048;
      v74 = v27;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:c%u:s%u> [http] transaction summary {start_reason=\"%s\", duration_ms=%d, request_method=\"%{public}s\", response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_ms=%d, inbound_duration_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}", buf, 0x7Eu);
    }
  }
}

uint64_t ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_25(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, *(unsigned __int16 *)(a1 + 40));
}

uint64_t nw_protocol_copy_replicate_definition()
{
  if (nw_protocol_copy_replicate_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_replicate_definition::onceToken, &__block_literal_global_41038);
  return nw_protocol_copy_replicate_definition::definition;
}

void __nw_protocol_copy_replicate_definition_block_invoke()
{
  if (nw_protocol_replicate_identifier(void)::onceToken != -1)
    dispatch_once(&nw_protocol_replicate_identifier(void)::onceToken, &__block_literal_global_24_41041);
  nw_protocol_copy_replicate_definition::definition = (uint64_t)nw_protocol_definition_create_with_identifier((__int128 *)&g_replicate_protocol_identifier);
  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_replicate_definition::definition, (uint64_t)nw_replicate_allocate_options, (uint64_t)nw_replicate_copy_options, (uint64_t)nw_replicate_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_replicate_definition::definition, (uint64_t)nw_replicate_option_is_equal);
  nw_protocol_definition_set_metadata_allocator((void *)nw_protocol_copy_replicate_definition::definition, (uint64_t)nw_replicate_allocate_metadata, (uint64_t)nw_replicate_deallocate_metadata);
}

uint64_t nw_replicate_allocate_options(nw_protocol_definition *a1)
{
  uint64_t v1;

  v1 = nw_calloc_type<nw_protocol_replicate_options>();
  *(_QWORD *)(v1 + 144) = nw_array_create();
  return v1;
}

uint64_t nw_replicate_copy_options(nw_protocol_definition *a1, _OWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = nw_calloc_type<nw_protocol_replicate_options>();
    *(_OWORD *)v3 = *a2;
    v4 = a2[1];
    v5 = a2[2];
    v6 = a2[4];
    *(_OWORD *)(v3 + 48) = a2[3];
    *(_OWORD *)(v3 + 64) = v6;
    *(_OWORD *)(v3 + 16) = v4;
    *(_OWORD *)(v3 + 32) = v5;
    v8 = a2[7];
    v7 = a2[8];
    v9 = a2[6];
    *(_OWORD *)(v3 + 80) = a2[5];
    *(_OWORD *)(v3 + 96) = v9;
    *(_OWORD *)(v3 + 112) = v8;
    *(_OWORD *)(v3 + 128) = v7;
    v10 = *((_QWORD *)a2 + 18);
    v11 = nw_array_create();
    v12 = v11;
    if (v10)
    {
      if (v11 == v10)
        v12 = v10;
      else
        std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v11 + 16, *(void ***)(v10 + 16), *(void ***)(v10 + 24), (uint64_t)(*(_QWORD *)(v10 + 24) - *(_QWORD *)(v10 + 16)) >> 3);
    }
    *(_QWORD *)(v3 + 144) = v12;
    return v3;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_replicate_copy_options";
  v14 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v14, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_replicate_copy_options";
        v17 = "%{public}s called with null existing_handle";
LABEL_21:
        _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_replicate_copy_options";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_22;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_replicate_copy_options";
        v17 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_21;
      }
    }
    else
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_replicate_copy_options";
        v17 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  if (v14)
    free(v14);
  return 0;
}

void nw_replicate_deallocate_options(nw_protocol_definition *a1, _QWORD *a2)
{
  void *v3;

  v3 = (void *)a2[18];
  if (v3)
    os_release(v3);
  free(a2);
}

uint64_t nw_replicate_option_is_equal(nw_protocol_definition *a1, _QWORD *a2, _QWORD *a3)
{
  BOOL v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;

  if (!a2 || !a3)
    return a2 == a3;
  if (*a2 == *a3 && a2[1] == a3[1])
  {
    v3 = a2[2] == a3[2] && a2[3] == a3[3];
    v4 = v3 && a2[4] == a3[4];
    v5 = v4 && a2[5] == a3[5];
    v6 = v5 && a2[6] == a3[6];
    v7 = v6 && a2[7] == a3[7];
    v8 = v7 && a2[8] == a3[8];
    if (v8 && a2[9] == a3[9])
    {
      v10 = a2[10] == a3[10] && a2[11] == a3[11];
      v11 = v10 && a2[12] == a3[12];
      v12 = v11 && a2[13] == a3[13];
      v13 = v12 && a2[14] == a3[14];
      v14 = v13 && a2[15] == a3[15];
      v15 = v14 && a2[16] == a3[16];
      if (v15 && a2[17] == a3[17])
        return nw_array_is_equal(a2[18], a3[18]);
    }
  }
  return 0;
}

BOOL nw_replicate_allocate_metadata(nw_protocol_definition *a1)
{
  _DWORD *v1;
  _BOOL8 result;
  NSObject *v3;
  void *v4;

  v1 = malloc_type_calloc(1uLL, 0x18uLL, 0xEAFB8F1AuLL);
  if (v1)
    goto LABEL_2;
  v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  v4 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
LABEL_2:
    v1[4] = 0;
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

void nw_replicate_deallocate_metadata(nw_protocol_definition *a1, _BYTE *a2)
{
  void *v3;

  a2[20] = 1;
  v3 = (void *)*((_QWORD *)a2 + 1);
  if (v3)
    os_release(v3);
  free(a2);
}

BOOL nw_calloc_type<nw_protocol_replicate_options>()
{
  void *v0;
  _BOOL8 result;
  NSObject *v2;
  void *v3;

  v0 = malloc_type_calloc(1uLL, 0x98uLL, 0xEAFB8F1AuLL);
  if (v0)
    return (BOOL)v0;
  v2 = __nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  v3 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
    return (BOOL)v0;
  }
  __break(1u);
  return result;
}

BOOL ___ZL32nw_protocol_replicate_identifierv_block_invoke()
{
  *(_QWORD *)&algn_1EDCF1E62[8] = 0;
  *(_QWORD *)algn_1EDCF1E62 = 0;
  strcpy((char *)&g_replicate_protocol_identifier, "replicate");
  qword_1EDCF1EC0 = (uint64_t)nw_protocol_default_input_available;
  unk_1EDCF1EC8 = nw_protocol_default_output_available;
  qword_1EDCF1F40 = (uint64_t)nw_protocol_default_output_finished;
  unk_1EDCF1F48 = nw_protocol_default_get_output_local;
  qword_1EDCF1E90 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_1EDCF1E98 = nw_protocol_default_connect;
  qword_1EDCF1EB0 = (uint64_t)nw_protocol_default_disconnected;
  unk_1EDCF1EB8 = nw_protocol_default_error;
  qword_1EDCF1F80 = (uint64_t)nw_protocol_default_reset;
  unk_1EDCF1F88 = nw_protocol_default_input_flush;
  qword_1EDCF1F30 = (uint64_t)nw_protocol_default_supports_external_data;
  unk_1EDCF1F38 = nw_protocol_default_input_finished;
  qword_1EDCF1F50 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_1EDCF1F58 = nw_protocol_default_waiting_for_output;
  qword_1EDCF1F10 = (uint64_t)nw_protocol_default_register_notification;
  unk_1EDCF1F18 = nw_protocol_default_unregister_notification;
  qword_1EDCF1F20 = (uint64_t)nw_protocol_default_notify;
  unk_1EDCF1F28 = nw_protocol_default_updated_path;
  qword_1EDCF1F70 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_1EDCF1F78 = nw_protocol_default_get_message_properties;
  g_replicate_protocol_callbacks = (uint64_t)nw_protocol_replicate_add_input_handler;
  *(_QWORD *)algn_1EDCF1E88 = nw_protocol_replicate_remove_input_handler;
  qword_1EDCF1EA0 = (uint64_t)nw_protocol_default_disconnect;
  unk_1EDCF1EA8 = nw_protocol_replicate_connected;
  qword_1EDCF1ED0 = (uint64_t)nw_protocol_replicate_get_input_frames;
  unk_1EDCF1ED8 = nw_protocol_replicate_get_output_frames;
  qword_1EDCF1F00 = (uint64_t)nw_protocol_replicate_get_local_endpoint;
  unk_1EDCF1F08 = nw_protocol_replicate_get_remote_endpoint;
  qword_1EDCF1E70 = 0;
  qword_1EDCF1EF0 = (uint64_t)nw_protocol_replicate_get_parameters;
  unk_1EDCF1EF8 = nw_protocol_default_get_path;
  qword_1EDCF1EE0 = (uint64_t)nw_protocol_replicate_finalize_output_frames;
  unk_1EDCF1EE8 = nw_protocol_default_link_state;
  qword_1EDCF1F60 = (uint64_t)nw_protocol_replicate_copy_info;
  unk_1EDCF1F68 = nw_protocol_default_add_listen_handler;
  qword_1EDCF1E78 = 0x100000000;
  return nw_protocol_register_extended(&g_replicate_protocol_identifier, (uint64_t)nw_protocol_replicate_create);
}

uint64_t nw_protocol_replicate_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  _DWORD *handle;
  void *v4;
  int nexus_protocol_level;
  void *v6;
  void *v7;
  id v8;
  id *singleton;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  _QWORD v24[6];
  char v25;
  os_log_type_t type[8];
  os_log_type_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE buf[24];
  void *v31;
  os_log_type_t *v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
      *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
      nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)handle);
      v4 = (void *)((uint64_t (*)(nw_protocol *))a2->callbacks->get_path)(a2);
      if (v4)
        nexus_protocol_level = nw_path_get_nexus_protocol_level(v4);
      else
        nexus_protocol_level = 4;
      handle[92] = nexus_protocol_level;
      v6 = (void *)((uint64_t (*)(nw_protocol *))a2->callbacks->get_remote_endpoint)(a2);
      if (v6)
        v6 = os_retain(v6);
      *((_QWORD *)handle + 9) = v6;
      v7 = (void *)((uint64_t (*)(nw_protocol *))a2->callbacks->get_parameters)(a2);
      v8 = nw_parameters_copy_context(v7);
      if (nw_protocol_copy_replicate_definition::onceToken != -1)
        dispatch_once(&nw_protocol_copy_replicate_definition::onceToken, &__block_literal_global_41038);
      singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_replicate_definition::definition);
      v10 = MEMORY[0x1E0C809B0];
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZL28nw_replicate_create_metadataP11nw_protocolP10nw_context_block_invoke;
      v31 = &__block_descriptor_tmp_28_41194;
      v32 = (os_log_type_t *)handle;
      v33 = v8;
      nw_protocol_metadata_access_handle((uint64_t)singleton, (uint64_t)buf);
      *((_QWORD *)handle + 8) = singleton;
      if (v8)
        os_release(v8);
      v11 = nw_parameters_copy_protocol_options_legacy(v7, (nw_protocol *)handle);
      if (v11)
      {
        v12 = v11;
        *(_QWORD *)type = 0;
        v27 = type;
        v28 = 0x2000000000;
        v29 = 0;
        *(_QWORD *)buf = v10;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __nw_replicate_options_get_primary_expiration_adjustment_block_invoke;
        v31 = &unk_1E14A1B58;
        v32 = type;
        nw_protocol_options_access_handle(v11, buf);
        v13 = *((_QWORD *)v27 + 3);
        _Block_object_dispose(type, 8);
        *((_QWORD *)handle + 10) = v13;
        *(_QWORD *)type = 0;
        v27 = type;
        v28 = 0x2000000000;
        v29 = 0;
        *(_QWORD *)buf = v10;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __nw_replicate_options_get_primary_maximum_expiration_block_invoke;
        v31 = &unk_1E14A1B80;
        v32 = type;
        nw_protocol_options_access_handle(v12, buf);
        v14 = *((_QWORD *)v27 + 3);
        _Block_object_dispose(type, 8);
        *((_QWORD *)handle + 11) = v14;
        if (v14)
          *((_BYTE *)handle + 372) |= 8u;
        *(_QWORD *)type = 0;
        v27 = type;
        LODWORD(v29) = 0;
        v28 = 0x2000000000;
        v24[0] = v10;
        v24[1] = 0x40000000;
        v24[2] = ___ZL39nw_protocol_replicate_add_input_handlerP11nw_protocolS0__block_invoke;
        v24[3] = &unk_1E14A1C68;
        v24[4] = type;
        v24[5] = handle;
        *(_QWORD *)buf = v10;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __nw_replicate_options_enumerate_endpoints_with_expiration_block_invoke;
        v31 = &unk_1E14A1B30;
        v32 = (os_log_type_t *)v24;
        nw_protocol_options_access_handle(v12, buf);
        os_release(v12);
        _Block_object_dispose(type, 8);
      }
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_replicate_add_input_handler";
    v16 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v16, type, &v25))
      goto LABEL_44;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_replicate_add_input_handler";
        v19 = "%{public}s called with null replicate";
        goto LABEL_43;
      }
      goto LABEL_44;
    }
    if (!v25)
    {
      v17 = __nwlog_obj();
      v18 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_replicate_add_input_handler";
        v19 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_43;
      }
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type[0];
    v23 = os_log_type_enabled(v17, type[0]);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_replicate_add_input_handler";
        v19 = "%{public}s called with null replicate, no backtrace";
        goto LABEL_43;
      }
      goto LABEL_44;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_replicate_add_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v22 = "%{public}s called with null replicate, dumping backtrace:%{public}s";
      goto LABEL_33;
    }
    goto LABEL_34;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_replicate_add_input_handler";
  v16 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v16, type, &v25))
    goto LABEL_44;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!v25)
    {
      v17 = __nwlog_obj();
      v18 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_replicate_add_input_handler";
        v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_43;
      }
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type[0];
    v21 = os_log_type_enabled(v17, type[0]);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_replicate_add_input_handler";
        v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_43;
      }
      goto LABEL_44;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_replicate_add_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_33:
      _os_log_impl(&dword_182FBE000, v17, v18, v22, buf, 0x16u);
    }
LABEL_34:
    free(backtrace_string);
    goto LABEL_44;
  }
  v17 = __nwlog_obj();
  v18 = type[0];
  if (os_log_type_enabled(v17, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_replicate_add_input_handler";
    v19 = "%{public}s called with null protocol";
LABEL_43:
    _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
  }
LABEL_44:
  if (v16)
    free(v16);
  return 0;
}

uint64_t nw_protocol_replicate_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  void *handle;
  nw_protocol *output_handler;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *backtrace_string;
  _BOOL4 v36;
  const char *v37;
  _BOOL4 v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  char *v43;
  _BOOL4 v44;
  char v45;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_protocol_replicate_remove_input_handler";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v31, &type, &v45))
      goto LABEL_86;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v45)
      {
        v32 = __nwlog_obj();
        v33 = type;
        if (!os_log_type_enabled(v32, type))
          goto LABEL_86;
        *(_DWORD *)buf = 136446210;
        v48 = "nw_protocol_replicate_remove_input_handler";
        v34 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_85;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v32 = __nwlog_obj();
      v33 = type;
      v36 = os_log_type_enabled(v32, type);
      if (!backtrace_string)
      {
        if (!v36)
          goto LABEL_86;
        *(_DWORD *)buf = 136446210;
        v48 = "nw_protocol_replicate_remove_input_handler";
        v34 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_85;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v48 = "nw_protocol_replicate_remove_input_handler";
        v49 = 2082;
        v50 = backtrace_string;
        v37 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_71:
        _os_log_impl(&dword_182FBE000, v32, v33, v37, buf, 0x16u);
      }
LABEL_72:
      free(backtrace_string);
      goto LABEL_86;
    }
    v32 = __nwlog_obj();
    v33 = type;
    if (!os_log_type_enabled(v32, type))
      goto LABEL_86;
    *(_DWORD *)buf = 136446210;
    v48 = "nw_protocol_replicate_remove_input_handler";
    v34 = "%{public}s called with null protocol";
LABEL_85:
    _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
LABEL_86:
    if (v31)
      free(v31);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_protocol_replicate_remove_input_handler";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v31, &type, &v45))
      goto LABEL_86;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_replicate_remove_input_handler";
      v34 = "%{public}s called with null replicate";
      goto LABEL_85;
    }
    if (!v45)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_replicate_remove_input_handler";
      v34 = "%{public}s called with null replicate, backtrace limit exceeded";
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v32 = __nwlog_obj();
    v33 = type;
    v38 = os_log_type_enabled(v32, type);
    if (backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        v48 = "nw_protocol_replicate_remove_input_handler";
        v49 = 2082;
        v50 = backtrace_string;
        v37 = "%{public}s called with null replicate, dumping backtrace:%{public}s";
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (!v38)
      goto LABEL_86;
    *(_DWORD *)buf = 136446210;
    v48 = "nw_protocol_replicate_remove_input_handler";
    v34 = "%{public}s called with null replicate, no backtrace";
    goto LABEL_85;
  }
  nw_protocol_set_output_handler((uint64_t)a2, 0);
  if (a1->default_input_handler != a2)
    return 0;
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  output_handler = a1->output_handler;
  if (output_handler)
    ((void (*)(void))output_handler->callbacks->remove_input_handler)();
  v9 = *((_QWORD *)handle + 14);
  if (v9)
  {
    (*(void (**)(void))(*(_QWORD *)(v9 + 24) + 8))();
    *((_QWORD *)handle + 14) = 0;
  }
  v10 = (void *)*((_QWORD *)handle + 22);
  if (v10)
  {
    os_release(v10);
    *((_QWORD *)handle + 22) = 0;
  }
  v11 = *((_QWORD *)handle + 15);
  if (v11)
  {
    (*(void (**)(void))(*(_QWORD *)(v11 + 24) + 8))();
    *((_QWORD *)handle + 15) = 0;
  }
  v12 = (void *)*((_QWORD *)handle + 23);
  if (v12)
  {
    os_release(v12);
    *((_QWORD *)handle + 23) = 0;
  }
  v13 = *((_QWORD *)handle + 16);
  if (v13)
  {
    (*(void (**)(void))(*(_QWORD *)(v13 + 24) + 8))();
    *((_QWORD *)handle + 16) = 0;
  }
  v14 = (void *)*((_QWORD *)handle + 24);
  if (v14)
  {
    os_release(v14);
    *((_QWORD *)handle + 24) = 0;
  }
  v15 = *((_QWORD *)handle + 17);
  if (v15)
  {
    (*(void (**)(void))(*(_QWORD *)(v15 + 24) + 8))();
    *((_QWORD *)handle + 17) = 0;
  }
  v16 = (void *)*((_QWORD *)handle + 25);
  if (v16)
  {
    os_release(v16);
    *((_QWORD *)handle + 25) = 0;
  }
  v17 = *((_QWORD *)handle + 18);
  if (v17)
  {
    (*(void (**)(void))(*(_QWORD *)(v17 + 24) + 8))();
    *((_QWORD *)handle + 18) = 0;
  }
  v18 = (void *)*((_QWORD *)handle + 26);
  if (v18)
  {
    os_release(v18);
    *((_QWORD *)handle + 26) = 0;
  }
  v19 = *((_QWORD *)handle + 19);
  if (v19)
  {
    (*(void (**)(void))(*(_QWORD *)(v19 + 24) + 8))();
    *((_QWORD *)handle + 19) = 0;
  }
  v20 = (void *)*((_QWORD *)handle + 27);
  if (v20)
  {
    os_release(v20);
    *((_QWORD *)handle + 27) = 0;
  }
  v21 = *((_QWORD *)handle + 20);
  if (v21)
  {
    (*(void (**)(void))(*(_QWORD *)(v21 + 24) + 8))();
    *((_QWORD *)handle + 20) = 0;
  }
  v22 = (void *)*((_QWORD *)handle + 28);
  if (v22)
  {
    os_release(v22);
    *((_QWORD *)handle + 28) = 0;
  }
  v23 = *((_QWORD *)handle + 21);
  if (v23)
  {
    (*(void (**)(void))(*(_QWORD *)(v23 + 24) + 8))();
    *((_QWORD *)handle + 21) = 0;
  }
  v24 = (void *)*((_QWORD *)handle + 29);
  if (v24)
  {
    os_release(v24);
    *((_QWORD *)handle + 29) = 0;
  }
  if (a3)
  {
    v25 = *((_QWORD *)handle + 8);
    if (!v25)
    {
LABEL_44:
      a1->handle = 0;
      v27 = (void *)*((_QWORD *)handle + 9);
      if (v27)
      {
        os_release(v27);
        *((_QWORD *)handle + 9) = 0;
      }
      v28 = (void *)*((_QWORD *)handle + 13);
      if (v28)
      {
        os_release(v28);
        *((_QWORD *)handle + 13) = 0;
      }
      v29 = (void *)*((_QWORD *)handle + 12);
      if (v29)
      {
        os_release(v29);
        *((_QWORD *)handle + 12) = 0;
      }
      v30 = (void *)*((_QWORD *)handle + 8);
      if (v30)
        os_release(v30);
      free(handle);
      return 1;
    }
    if (nw_protocol_metadata_is_replicate(*((nw_protocol_metadata **)handle + 8)))
    {
      v26 = *(_QWORD *)(v25 + 32);
      if (v26)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v26 + 16));
        *(_BYTE *)(v26 + 20) = 1;
        os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 16));
      }
      goto LABEL_44;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_replicate_metadata_invalidate";
    v39 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (__nwlog_fault(v39, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v40 = __nwlog_obj();
        v41 = type;
        if (!os_log_type_enabled(v40, type))
          goto LABEL_98;
        *(_DWORD *)buf = 136446210;
        v48 = "nw_replicate_metadata_invalidate";
        v42 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata)";
        goto LABEL_97;
      }
      if (!v45)
      {
        v40 = __nwlog_obj();
        v41 = type;
        if (!os_log_type_enabled(v40, type))
          goto LABEL_98;
        *(_DWORD *)buf = 136446210;
        v48 = "nw_replicate_metadata_invalidate";
        v42 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), backtrace limit exceeded";
        goto LABEL_97;
      }
      v43 = (char *)__nw_create_backtrace_string();
      v40 = __nwlog_obj();
      v41 = type;
      v44 = os_log_type_enabled(v40, type);
      if (v43)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          v48 = "nw_replicate_metadata_invalidate";
          v49 = 2082;
          v50 = v43;
          _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v43);
        goto LABEL_98;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_replicate_metadata_invalidate";
        v42 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), no backtrace";
LABEL_97:
        _os_log_impl(&dword_182FBE000, v40, v41, v42, buf, 0xCu);
      }
    }
LABEL_98:
    if (v39)
      free(v39);
    goto LABEL_44;
  }
  return 1;
}

void nw_protocol_replicate_connected(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *handle;
  uint64_t v4;
  nw_protocol *output_handler;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  nw_protocol *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  nw_protocol *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  nw_protocol *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  nw_protocol *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  nw_protocol *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  nw_protocol *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  nw_protocol *v33;
  uint64_t v34;
  uint64_t v35;
  nw_protocol *default_input_handler;
  void (*connected)(void);
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  const char *v41;
  char *backtrace_string;
  _BOOL4 v43;
  char *v44;
  _BOOL4 v45;
  char v46;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_protocol_replicate_connected";
    v38 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v38, &type, &v46))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (!os_log_type_enabled(v39, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_replicate_connected";
      v41 = "%{public}s called with null protocol";
    }
    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v39 = __nwlog_obj();
      v40 = type;
      v43 = os_log_type_enabled(v39, type);
      if (backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          v49 = "nw_protocol_replicate_connected";
          v50 = 2082;
          v51 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_76:
        if (!v38)
          return;
        goto LABEL_77;
      }
      if (!v43)
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_replicate_connected";
      v41 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (!os_log_type_enabled(v39, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_replicate_connected";
      v41 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_75:
    _os_log_impl(&dword_182FBE000, v39, v40, v41, buf, 0xCu);
    goto LABEL_76;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((*((_BYTE *)handle + 372) & 1) == 0)
    {
      v4 = handle[14];
      if (v4)
      {
        output_handler = a1->output_handler;
        do
        {
          v6 = (uint64_t)output_handler;
          output_handler = output_handler->output_handler;
        }
        while (output_handler);
        do
        {
          v7 = v4;
          v4 = *(_QWORD *)(v4 + 32);
        }
        while (v4);
        nw_protocol_set_output_handler(v7, v6);
      }
      v8 = handle[15];
      if (v8)
      {
        v9 = a1->output_handler;
        do
        {
          v10 = (uint64_t)v9;
          v9 = v9->output_handler;
        }
        while (v9);
        do
        {
          v11 = v8;
          v8 = *(_QWORD *)(v8 + 32);
        }
        while (v8);
        nw_protocol_set_output_handler(v11, v10);
      }
      v12 = handle[16];
      if (v12)
      {
        v13 = a1->output_handler;
        do
        {
          v14 = (uint64_t)v13;
          v13 = v13->output_handler;
        }
        while (v13);
        do
        {
          v15 = v12;
          v12 = *(_QWORD *)(v12 + 32);
        }
        while (v12);
        nw_protocol_set_output_handler(v15, v14);
      }
      v16 = handle[17];
      if (v16)
      {
        v17 = a1->output_handler;
        do
        {
          v18 = (uint64_t)v17;
          v17 = v17->output_handler;
        }
        while (v17);
        do
        {
          v19 = v16;
          v16 = *(_QWORD *)(v16 + 32);
        }
        while (v16);
        nw_protocol_set_output_handler(v19, v18);
      }
      v20 = handle[18];
      if (v20)
      {
        v21 = a1->output_handler;
        do
        {
          v22 = (uint64_t)v21;
          v21 = v21->output_handler;
        }
        while (v21);
        do
        {
          v23 = v20;
          v20 = *(_QWORD *)(v20 + 32);
        }
        while (v20);
        nw_protocol_set_output_handler(v23, v22);
      }
      v24 = handle[19];
      if (v24)
      {
        v25 = a1->output_handler;
        do
        {
          v26 = (uint64_t)v25;
          v25 = v25->output_handler;
        }
        while (v25);
        do
        {
          v27 = v24;
          v24 = *(_QWORD *)(v24 + 32);
        }
        while (v24);
        nw_protocol_set_output_handler(v27, v26);
      }
      v28 = handle[20];
      if (v28)
      {
        v29 = a1->output_handler;
        do
        {
          v30 = (uint64_t)v29;
          v29 = v29->output_handler;
        }
        while (v29);
        do
        {
          v31 = v28;
          v28 = *(_QWORD *)(v28 + 32);
        }
        while (v28);
        nw_protocol_set_output_handler(v31, v30);
      }
      v32 = handle[21];
      if (v32)
      {
        v33 = a1->output_handler;
        do
        {
          v34 = (uint64_t)v33;
          v33 = v33->output_handler;
        }
        while (v33);
        do
        {
          v35 = v32;
          v32 = *(_QWORD *)(v32 + 32);
        }
        while (v32);
        nw_protocol_set_output_handler(v35, v34);
      }
      *((_BYTE *)handle + 372) |= 1u;
    }
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      connected = (void (*)(void))default_input_handler->callbacks->connected;
      if (connected)
        connected();
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v49 = "nw_protocol_replicate_connected";
  v38 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v46 = 0;
  if (!__nwlog_fault(v38, &type, &v46))
    goto LABEL_76;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v39 = __nwlog_obj();
    v40 = type;
    if (!os_log_type_enabled(v39, type))
      goto LABEL_76;
    *(_DWORD *)buf = 136446210;
    v49 = "nw_protocol_replicate_connected";
    v41 = "%{public}s called with null replicate";
    goto LABEL_75;
  }
  if (!v46)
  {
    v39 = __nwlog_obj();
    v40 = type;
    if (!os_log_type_enabled(v39, type))
      goto LABEL_76;
    *(_DWORD *)buf = 136446210;
    v49 = "nw_protocol_replicate_connected";
    v41 = "%{public}s called with null replicate, backtrace limit exceeded";
    goto LABEL_75;
  }
  v44 = (char *)__nw_create_backtrace_string();
  v39 = __nwlog_obj();
  v40 = type;
  v45 = os_log_type_enabled(v39, type);
  if (!v44)
  {
    if (!v45)
      goto LABEL_76;
    *(_DWORD *)buf = 136446210;
    v49 = "nw_protocol_replicate_connected";
    v41 = "%{public}s called with null replicate, no backtrace";
    goto LABEL_75;
  }
  if (v45)
  {
    *(_DWORD *)buf = 136446466;
    v49 = "nw_protocol_replicate_connected";
    v50 = 2082;
    v51 = v44;
    _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s called with null replicate, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v44);
  if (v38)
LABEL_77:
    free(v38);
}

uint64_t nw_protocol_replicate_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  _QWORD *handle;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *v12;
  _BOOL4 v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return (*(uint64_t (**)(void))(*(_QWORD *)(handle[4] + 24) + 80))();
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_replicate_get_input_frames";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_replicate_get_input_frames";
        v11 = "%{public}s called with null replicate";
        goto LABEL_31;
      }
      if (!v16)
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_replicate_get_input_frames";
        v11 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_replicate_get_input_frames";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null replicate, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v8)
          return 0;
        goto LABEL_33;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_replicate_get_input_frames";
        v11 = "%{public}s called with null replicate, no backtrace";
LABEL_31:
        _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_replicate_get_input_frames";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_replicate_get_input_frames";
      v11 = "%{public}s called with null protocol";
      goto LABEL_31;
    }
    if (!v16)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_replicate_get_input_frames";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }
    v12 = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v13 = os_log_type_enabled(v9, type);
    if (!v12)
    {
      if (!v13)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_replicate_get_input_frames";
      v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_replicate_get_input_frames";
      v20 = 2082;
      v21 = v12;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v12);
  }
LABEL_32:
  if (v8)
LABEL_33:
    free(v8);
  return 0;
}

uint64_t nw_protocol_replicate_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  _QWORD *handle;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *v12;
  _BOOL4 v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return (*(uint64_t (**)(void))(*(_QWORD *)(handle[4] + 24) + 88))();
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_replicate_get_output_frames";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_replicate_get_output_frames";
        v11 = "%{public}s called with null replicate";
        goto LABEL_31;
      }
      if (!v16)
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_replicate_get_output_frames";
        v11 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_replicate_get_output_frames";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null replicate, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v8)
          return 0;
        goto LABEL_33;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_replicate_get_output_frames";
        v11 = "%{public}s called with null replicate, no backtrace";
LABEL_31:
        _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_replicate_get_output_frames";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_replicate_get_output_frames";
      v11 = "%{public}s called with null protocol";
      goto LABEL_31;
    }
    if (!v16)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_replicate_get_output_frames";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }
    v12 = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v13 = os_log_type_enabled(v9, type);
    if (!v12)
    {
      if (!v13)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_replicate_get_output_frames";
      v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_replicate_get_output_frames";
      v20 = 2082;
      v21 = v12;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v12);
  }
LABEL_32:
  if (v8)
LABEL_33:
    free(v8);
  return 0;
}

uint64_t nw_protocol_replicate_get_remote_endpoint(nw_protocol *a1)
{
  _QWORD *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((*((_BYTE *)handle + 372) & 2) != 0)
        return handle[12];
      else
        return ((uint64_t (*)(void))a1->default_input_handler->callbacks->get_remote_endpoint)();
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_replicate_get_remote_endpoint";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_replicate_get_remote_endpoint";
        v6 = "%{public}s called with null replicate";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_replicate_get_remote_endpoint";
        v6 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_replicate_get_remote_endpoint";
        v6 = "%{public}s called with null replicate, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_replicate_get_remote_endpoint";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null replicate, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_replicate_get_remote_endpoint";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_34;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_replicate_get_remote_endpoint";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_replicate_get_remote_endpoint";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_replicate_get_remote_endpoint";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_replicate_get_remote_endpoint";
    v6 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_34:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_replicate_get_local_endpoint(nw_protocol *a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1->handle)
      return ((uint64_t (*)(void))a1->default_input_handler->callbacks->get_local_endpoint)();
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_replicate_get_local_endpoint";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_replicate_get_local_endpoint";
        v5 = "%{public}s called with null replicate";
        goto LABEL_31;
      }
      if (!v10)
      {
        v3 = __nwlog_obj();
        v4 = type;
        if (!os_log_type_enabled(v3, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_replicate_get_local_endpoint";
        v5 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_replicate_get_local_endpoint";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null replicate, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v2)
          return 0;
        goto LABEL_33;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_replicate_get_local_endpoint";
        v5 = "%{public}s called with null replicate, no backtrace";
LABEL_31:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_replicate_get_local_endpoint";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_replicate_get_local_endpoint";
      v5 = "%{public}s called with null protocol";
      goto LABEL_31;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_replicate_get_local_endpoint";
      v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_replicate_get_local_endpoint";
      v5 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_protocol_replicate_get_local_endpoint";
      v14 = 2082;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_32:
  if (v2)
LABEL_33:
    free(v2);
  return 0;
}

uint64_t nw_protocol_replicate_get_parameters(nw_protocol *a1)
{
  _QWORD *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((*((_BYTE *)handle + 372) & 2) != 0)
        return handle[13];
      else
        return ((uint64_t (*)(void))a1->default_input_handler->callbacks->get_parameters)();
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_replicate_get_parameters";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_replicate_get_parameters";
        v6 = "%{public}s called with null replicate";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_replicate_get_parameters";
        v6 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_replicate_get_parameters";
        v6 = "%{public}s called with null replicate, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_replicate_get_parameters";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null replicate, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_replicate_get_parameters";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_34;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_replicate_get_parameters";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_replicate_get_parameters";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_replicate_get_parameters";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_replicate_get_parameters";
    v6 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_34:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_replicate_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  _BYTE *handle;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  nw_frame *tqh_first;
  nw_frame *v12;
  char v13;
  nw_frame *v14;
  nw_frame *v15;
  char v16;
  uint64_t v17;
  nw_frame *v18;
  nw_frame *v19;
  char v20;
  nw_frame *v22;
  nw_frame *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  char *backtrace_string;
  _BOOL4 v29;
  const char *v30;
  _BOOL4 v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t (*v34)(uint64_t, uint64_t);
  void *v35;
  uint64_t v36;
  _BYTE *v37;
  _QWORD v38[2];
  uint64_t (*v39)(_QWORD *);
  void *v40;
  os_log_type_t *v41;
  nw_protocol *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t type[8];
  os_log_type_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  _QWORD v51[2];
  uint64_t (*v52)(uint64_t);
  void *v53;
  _BYTE *v54;
  _BYTE buf[24];
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((handle[372] & 8) != 0)
        v32 = mach_absolute_time();
      else
        v32 = 0;
      v5 = 0;
      v6 = MEMORY[0x1E0C809B0];
      do
      {
        v7 = &handle[8 * v5];
        v8 = v7[14];
        if (v8)
        {
          v9 = v7[30];
          v10 = v7[38];
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          v56 = 0;
          *(_QWORD *)&buf[16] = 0x2000000000;
          v51[0] = v6;
          v51[1] = 0x40000000;
          v52 = ___ZL44nw_protocol_replicate_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
          v53 = &unk_1E14A1D28;
          v54 = buf;
          tqh_first = a2->tqh_first;
          do
          {
            if (!tqh_first)
              break;
            v12 = (nw_frame *)*((_QWORD *)tqh_first + 4);
            v13 = v52((uint64_t)v51);
            tqh_first = v12;
          }
          while ((v13 & 1) != 0);
          v50[0] = 0;
          v50[1] = v50;
          if ((*(unsigned int (**)(uint64_t, nw_protocol *, uint64_t, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)(v8 + 24) + 88))(v8, a1, 1, 0xFFFFFFFFLL, *(unsigned int *)(*(_QWORD *)&buf[8] + 24), v50))
          {
            *(_QWORD *)type = 0;
            v47 = type;
            v48 = 0x2000000000;
            v49 = v50[0];
            v38[0] = v6;
            v38[1] = 0x40000000;
            v39 = (uint64_t (*)(_QWORD *))___ZL44nw_protocol_replicate_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2;
            v40 = &unk_1E14A1D50;
            v41 = type;
            v42 = a1;
            v43 = v32;
            v44 = v9;
            v45 = v10;
            v14 = a2->tqh_first;
            do
            {
              if (!v14)
                break;
              v15 = (nw_frame *)*((_QWORD *)v14 + 4);
              v16 = v39(v38);
              v14 = v15;
            }
            while ((v16 & 1) != 0);
            (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v8 + 24) + 96))(v8, v50);
            _Block_object_dispose(type, 8);
          }
          _Block_object_dispose(buf, 8);
        }
        ++v5;
      }
      while (v5 != 8);
      if ((handle[372] & 4) != 0)
      {
        v22 = a2->tqh_first;
        if (a2->tqh_first)
        {
          do
          {
            v23 = (nw_frame *)*((_QWORD *)v22 + 4);
            nw_frame_finalize((uint64_t)v22);
            v22 = v23;
          }
          while (v23);
        }
        return 1;
      }
      else
      {
        v17 = *((_QWORD *)handle + 4);
        if (*((_QWORD *)handle + 10) || *((_QWORD *)handle + 11))
        {
          v33[0] = v6;
          v33[1] = 0x40000000;
          v34 = ___ZL44nw_protocol_replicate_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_4;
          v35 = &__block_descriptor_tmp_42_41077;
          v36 = v32;
          v37 = handle;
          v18 = a2->tqh_first;
          do
          {
            if (!v18)
              break;
            v19 = (nw_frame *)*((_QWORD *)v18 + 4);
            v20 = ((uint64_t (*)(_QWORD *))v34)(v33);
            v18 = v19;
          }
          while ((v20 & 1) != 0);
        }
        return (*(uint64_t (**)(uint64_t, nw_frame_array_s *))(*(_QWORD *)(v17 + 24) + 96))(v17, a2);
      }
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_replicate_finalize_output_frames";
    v24 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v50[0]) = 0;
    if (!__nwlog_fault(v24, type, v50))
      goto LABEL_56;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v25 = __nwlog_obj();
      v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_replicate_finalize_output_frames";
        v27 = "%{public}s called with null replicate";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    if (!LOBYTE(v50[0]))
    {
      v25 = __nwlog_obj();
      v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_replicate_finalize_output_frames";
        v27 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v25 = __nwlog_obj();
    v26 = type[0];
    v31 = os_log_type_enabled(v25, type[0]);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_replicate_finalize_output_frames";
        v27 = "%{public}s called with null replicate, no backtrace";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_replicate_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v30 = "%{public}s called with null replicate, dumping backtrace:%{public}s";
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_replicate_finalize_output_frames";
  v24 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v50[0]) = 0;
  if (!__nwlog_fault(v24, type, v50))
    goto LABEL_56;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!LOBYTE(v50[0]))
    {
      v25 = __nwlog_obj();
      v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_replicate_finalize_output_frames";
        v27 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v25 = __nwlog_obj();
    v26 = type[0];
    v29 = os_log_type_enabled(v25, type[0]);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_replicate_finalize_output_frames";
        v27 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_replicate_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v30 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_45:
      _os_log_impl(&dword_182FBE000, v25, v26, v30, buf, 0x16u);
    }
LABEL_46:
    free(backtrace_string);
    goto LABEL_56;
  }
  v25 = __nwlog_obj();
  v26 = type[0];
  if (os_log_type_enabled(v25, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_replicate_finalize_output_frames";
    v27 = "%{public}s called with null protocol";
LABEL_55:
    _os_log_impl(&dword_182FBE000, v25, v26, v27, buf, 0xCu);
  }
LABEL_56:
  if (v24)
    free(v24);
  return 0;
}

uint64_t nw_protocol_replicate_copy_info(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  void *v7;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_replicate_copy_info";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_replicate_copy_info";
        v12 = "%{public}s called with null protocol";
LABEL_39:
        _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      }
LABEL_40:
      if (v9)
        free(v9);
      return 0;
    }
    if (!v17)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_replicate_copy_info";
        v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type;
    v14 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_replicate_copy_info";
        v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v20 = "nw_protocol_replicate_copy_info";
      v21 = 2082;
      v22 = backtrace_string;
      v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_29:
      _os_log_impl(&dword_182FBE000, v10, v11, v15, buf, 0x16u);
    }
LABEL_30:
    free(backtrace_string);
    goto LABEL_40;
  }
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_replicate_copy_info";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_replicate_copy_info";
        v12 = "%{public}s called with null replicate";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (!v17)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_replicate_copy_info";
        v12 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type;
    v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_replicate_copy_info";
        v12 = "%{public}s called with null replicate, no backtrace";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v20 = "nw_protocol_replicate_copy_info";
      v21 = 2082;
      v22 = backtrace_string;
      v15 = "%{public}s called with null replicate, dumping backtrace:%{public}s";
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 && (v5 = *(uint64_t (**)(void))(*(_QWORD *)(v4 + 24) + 224)) != 0)
  {
    v6 = v5();
    if (a2 != 255)
      return v6;
  }
  else
  {
    v6 = 0;
    if (a2 != 255)
      return v6;
  }
  v7 = *(void **)(v2 + 64);
  if (v7)
  {
    if (!v6)
    {
      v6 = nw_array_create();
      v7 = *(void **)(v2 + 64);
    }
    nw_array_append(v6, v7);
  }
  return v6;
}

uint64_t nw_protocol_replicate_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t result;
  NSObject *v4;
  void *v5;
  void *memptr;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 8uLL, 0x178uLL, 0x68FF3B34uLL))
  {
    result = (uint64_t)memptr;
    if (memptr)
      goto LABEL_3;
  }
  v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v7 = 136446722;
  v8 = "strict_memalign";
  v9 = 2048;
  v10 = 8;
  v11 = 2048;
  v12 = 376;
  v5 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v5);
  if (!(_DWORD)result)
  {
    free(v5);
    result = (uint64_t)memptr;
LABEL_3:
    *(_QWORD *)(result + 368) = 0;
    *(_OWORD *)(result + 336) = 0u;
    *(_OWORD *)(result + 352) = 0u;
    *(_OWORD *)(result + 304) = 0u;
    *(_OWORD *)(result + 320) = 0u;
    *(_OWORD *)(result + 272) = 0u;
    *(_OWORD *)(result + 288) = 0u;
    *(_OWORD *)(result + 240) = 0u;
    *(_OWORD *)(result + 256) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_QWORD *)(result + 16) = &g_replicate_protocol_identifier;
    *(_QWORD *)(result + 24) = &g_replicate_protocol_callbacks;
    *(_QWORD *)(result + 40) = result;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t ___ZL44nw_protocol_replicate_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1)
{
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return 1;
}

uint64_t ___ZL44nw_protocol_replicate_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _WORD *v24;
  __int16 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  char *backtrace_string;
  _BOOL4 v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  char *v43;
  _BOOL4 v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  const char *v48;
  char *v49;
  _BOOL4 v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  const char *v54;
  char *v55;
  _BOOL4 v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  char *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
    return 1;
  v58 = 0;
  v4 = (const void *)nw_frame_unclaimed_bytes(a2, &v58);
  v57 = 0;
  v5 = (void *)nw_frame_unclaimed_bytes(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24), &v57);
  v7 = v58;
  if (v57 < v58)
  {
    v58 = v57;
    v7 = v57;
  }
  if (v7)
  {
    memcpy(v5, v4, v7);
    v8 = v58;
  }
  else
  {
    v8 = 0;
  }
  nw_frame_claim(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24), v6, v8, 0);
  nw_frame_collapse(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24));
  nw_frame_unclaim(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24), v9, v58, 0);
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v62 = "__nw_frame_get_expire_time";
    v32 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v32, &type, &v59))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v33 = __nwlog_obj();
      v34 = type;
      if (!os_log_type_enabled(v33, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v62 = "__nw_frame_get_expire_time";
      v35 = "%{public}s called with null frame";
    }
    else if (v59)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v33 = __nwlog_obj();
      v34 = type;
      v37 = os_log_type_enabled(v33, type);
      if (backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "__nw_frame_get_expire_time";
          v63 = 2082;
          v64 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_59:
        if (v32)
          free(v32);
        v26 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v62 = "__nw_frame_get_service_class";
        v45 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v59 = 0;
        if (__nwlog_fault(v45, &type, &v59))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v46 = __nwlog_obj();
            v47 = type;
            if (!os_log_type_enabled(v46, type))
              goto LABEL_75;
            *(_DWORD *)buf = 136446210;
            v62 = "__nw_frame_get_service_class";
            v48 = "%{public}s called with null frame";
LABEL_74:
            _os_log_impl(&dword_182FBE000, v46, v47, v48, buf, 0xCu);
            goto LABEL_75;
          }
          if (!v59)
          {
            v46 = __nwlog_obj();
            v47 = type;
            if (!os_log_type_enabled(v46, type))
              goto LABEL_75;
            *(_DWORD *)buf = 136446210;
            v62 = "__nw_frame_get_service_class";
            v48 = "%{public}s called with null frame, backtrace limit exceeded";
            goto LABEL_74;
          }
          v49 = (char *)__nw_create_backtrace_string();
          v46 = __nwlog_obj();
          v47 = type;
          v50 = os_log_type_enabled(v46, type);
          if (!v49)
          {
            if (!v50)
              goto LABEL_75;
            *(_DWORD *)buf = 136446210;
            v62 = "__nw_frame_get_service_class";
            v48 = "%{public}s called with null frame, no backtrace";
            goto LABEL_74;
          }
          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            v62 = "__nw_frame_get_service_class";
            v63 = 2082;
            v64 = v49;
            _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v49);
        }
LABEL_75:
        if (v45)
          free(v45);
        v27 = 0;
        if (v26)
          goto LABEL_30;
LABEL_78:
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v62 = "__nw_frame_set_service_class";
        v51 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v59 = 0;
        if (!__nwlog_fault(v51, &type, &v59))
          goto LABEL_92;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v52 = __nwlog_obj();
          v53 = type;
          if (!os_log_type_enabled(v52, type))
            goto LABEL_92;
          *(_DWORD *)buf = 136446210;
          v62 = "__nw_frame_set_service_class";
          v54 = "%{public}s called with null frame";
        }
        else if (v59)
        {
          v55 = (char *)__nw_create_backtrace_string();
          v52 = __nwlog_obj();
          v53 = type;
          v56 = os_log_type_enabled(v52, type);
          if (v55)
          {
            if (v56)
            {
              *(_DWORD *)buf = 136446466;
              v62 = "__nw_frame_set_service_class";
              v63 = 2082;
              v64 = v55;
              _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v55);
            goto LABEL_92;
          }
          if (!v56)
          {
LABEL_92:
            if (v51)
              free(v51);
            goto LABEL_31;
          }
          *(_DWORD *)buf = 136446210;
          v62 = "__nw_frame_set_service_class";
          v54 = "%{public}s called with null frame, no backtrace";
        }
        else
        {
          v52 = __nwlog_obj();
          v53 = type;
          if (!os_log_type_enabled(v52, type))
            goto LABEL_92;
          *(_DWORD *)buf = 136446210;
          v62 = "__nw_frame_set_service_class";
          v54 = "%{public}s called with null frame, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v52, v53, v54, buf, 0xCu);
        goto LABEL_92;
      }
      if (!v37)
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v62 = "__nw_frame_get_expire_time";
      v35 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v33 = __nwlog_obj();
      v34 = type;
      if (!os_log_type_enabled(v33, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v62 = "__nw_frame_get_expire_time";
      v35 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v33, v34, v35, buf, 0xCu);
    goto LABEL_59;
  }
  if ((*(_WORD *)(a2 + 204) & 0x10) == 0)
    goto LABEL_29;
  v10 = *(_QWORD *)(a2 + 152);
  if (!v10)
    goto LABEL_29;
  v12 = a1[6];
  v11 = a1[7];
  v13 = a1[8];
  v14 = dword_1ECD84D64;
  if (v11 < 0)
  {
    v17 = -1000000 * v11;
    if (!dword_1ECD84D64)
    {
      mach_timebase_info((mach_timebase_info_t)&time_base);
      v14 = dword_1ECD84D64;
    }
    v16 = time_base;
    v18 = v17 * (unint64_t)v14 / time_base;
    v19 = v10 >= v18;
    v21 = v10 - v18;
    v20 = v21 != 0 && v19;
    if (!v19)
      v21 = 0;
    if (v20)
      v10 = v21;
    if (!v12)
      goto LABEL_26;
  }
  else
  {
    v15 = 1000000 * v11;
    if (!dword_1ECD84D64)
    {
      mach_timebase_info((mach_timebase_info_t)&time_base);
      v14 = dword_1ECD84D64;
    }
    v10 += v15 * (unint64_t)v14 / time_base;
    v16 = time_base;
    if (!v12)
      goto LABEL_26;
  }
  if (!v13)
    goto LABEL_26;
  if (!v14)
  {
    mach_timebase_info((mach_timebase_info_t)&time_base);
    v16 = time_base;
    v14 = dword_1ECD84D64;
  }
  v22 = 1000000 * v13 * (unint64_t)v14 / v16 + v12;
  if (v22 >= v10)
LABEL_26:
    v22 = v10;
  v23 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (v23)
  {
    v25 = *(_WORD *)(v23 + 204);
    v24 = (_WORD *)(v23 + 204);
    *v24 = v25 | 0x10;
    *(_QWORD *)(v24 - 26) = v22;
    goto LABEL_29;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v62 = "__nw_frame_set_expire_time";
  v38 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v59 = 0;
  v39 = (char *)v38;
  if (!__nwlog_fault(v38, &type, &v59))
    goto LABEL_99;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v40 = __nwlog_obj();
    v41 = type;
    if (!os_log_type_enabled(v40, type))
      goto LABEL_99;
    *(_DWORD *)buf = 136446210;
    v62 = "__nw_frame_set_expire_time";
    v42 = "%{public}s called with null frame";
    goto LABEL_98;
  }
  if (!v59)
  {
    v40 = __nwlog_obj();
    v41 = type;
    if (!os_log_type_enabled(v40, type))
      goto LABEL_99;
    *(_DWORD *)buf = 136446210;
    v62 = "__nw_frame_set_expire_time";
    v42 = "%{public}s called with null frame, backtrace limit exceeded";
    goto LABEL_98;
  }
  v43 = (char *)__nw_create_backtrace_string();
  v40 = __nwlog_obj();
  v41 = type;
  v44 = os_log_type_enabled(v40, type);
  if (v43)
  {
    if (v44)
    {
      *(_DWORD *)buf = 136446466;
      v62 = "__nw_frame_set_expire_time";
      v63 = 2082;
      v64 = v43;
      _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v43);
    goto LABEL_99;
  }
  if (v44)
  {
    *(_DWORD *)buf = 136446210;
    v62 = "__nw_frame_set_expire_time";
    v42 = "%{public}s called with null frame, no backtrace";
LABEL_98:
    _os_log_impl(&dword_182FBE000, v40, v41, v42, buf, 0xCu);
  }
LABEL_99:
  if (v39)
    free(v39);
LABEL_29:
  v26 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v27 = *(_DWORD *)(a2 + 176);
  if (!v26)
    goto LABEL_78;
LABEL_30:
  *(_DWORD *)(v26 + 176) = v27;
LABEL_31:
  v28 = *(_QWORD *)(a1[4] + 8);
  v29 = *(_QWORD *)(v28 + 24);
  v30 = *(_QWORD *)(v29 + 32);
  if (!v30 && !*(_QWORD *)(v29 + 40))
    v30 = 0;
  *(_QWORD *)(v28 + 24) = v30;
  return 1;
}

uint64_t ___ZL44nw_protocol_replicate_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  _WORD *v17;
  __int16 v18;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  char *backtrace_string;
  _BOOL4 v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "__nw_frame_get_expire_time";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v20, &type, &v26))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      v29 = "__nw_frame_get_expire_time";
      v23 = "%{public}s called with null frame";
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type;
      v25 = os_log_type_enabled(v21, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "__nw_frame_get_expire_time";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_37;
      }
      if (!v25)
      {
LABEL_37:
        if (v20)
          free(v20);
        return 1;
      }
      *(_DWORD *)buf = 136446210;
      v29 = "__nw_frame_get_expire_time";
      v23 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      v29 = "__nw_frame_get_expire_time";
      v23 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v21, v22, v23, buf, 0xCu);
    goto LABEL_37;
  }
  if ((*(_WORD *)(a2 + 204) & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a2 + 152);
    if (v3)
    {
      v5 = *(_QWORD *)(a1 + 32);
      v4 = *(_QWORD *)(a1 + 40);
      v6 = *(_QWORD *)(v4 + 80);
      v7 = *(_QWORD *)(v4 + 88);
      v8 = dword_1ECD84D64;
      if (v6 < 0)
      {
        v11 = -1000000 * v6;
        if (!dword_1ECD84D64)
        {
          mach_timebase_info((mach_timebase_info_t)&time_base);
          v8 = dword_1ECD84D64;
        }
        v10 = time_base;
        v12 = v11 * (unint64_t)v8 / time_base;
        v13 = v3 >= v12;
        v15 = v3 - v12;
        v14 = v15 != 0 && v13;
        if (!v13)
          v15 = 0;
        if (v14)
          v3 = v15;
        if (!v5)
          goto LABEL_20;
      }
      else
      {
        v9 = 1000000 * v6;
        if (!dword_1ECD84D64)
        {
          mach_timebase_info((mach_timebase_info_t)&time_base);
          v8 = dword_1ECD84D64;
        }
        v3 += v9 * (unint64_t)v8 / time_base;
        v10 = time_base;
        if (!v5)
        {
LABEL_20:
          v16 = v3;
LABEL_21:
          v18 = *(_WORD *)(a2 + 204);
          v17 = (_WORD *)(a2 + 204);
          *v17 = v18 | 0x10;
          *(_QWORD *)(v17 - 26) = v16;
          return 1;
        }
      }
      if (v7)
      {
        if (!v8)
        {
          mach_timebase_info((mach_timebase_info_t)&time_base);
          v10 = time_base;
          v8 = dword_1ECD84D64;
        }
        v16 = 1000000 * v7 * (unint64_t)v8 / v10 + v5;
        if (v16 < v3)
          goto LABEL_21;
      }
      goto LABEL_20;
    }
  }
  return 1;
}

BOOL nw_protocol_metadata_is_replicate(nw_protocol_metadata *a1)
{
  id *v1;
  id v2;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_replicate_definition::onceToken != -1)
      dispatch_once(&nw_protocol_copy_replicate_definition::onceToken, &__block_literal_global_41038);
    return nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_replicate_definition::definition);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_protocol_metadata_is_replicate";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_metadata_is_replicate";
        v7 = "%{public}s called with null metadata";
LABEL_18:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_metadata_is_replicate";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_19;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_metadata_is_replicate";
        v7 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_18;
      }
    }
    else
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_protocol_metadata_is_replicate";
        v7 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
  }
LABEL_19:
  if (v4)
    free(v4);
  return 0;
}

uint64_t ___ZL28nw_replicate_create_metadataP11nw_protocolP10nw_context_block_invoke(uint64_t a1, _QWORD *a2)
{
  void *v3;

  *a2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  if (v3)
    v3 = os_retain(v3);
  a2[1] = v3;
  return 1;
}

uint64_t __nw_replicate_options_get_primary_expiration_adjustment_block_invoke(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

uint64_t __nw_replicate_options_get_primary_maximum_expiration_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 8);
  return 1;
}

uint64_t ___ZL39nw_protocol_replicate_add_input_handlerP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  nw_protocol_replicate_add_secondary_endpoint(*(_QWORD *)(a1 + 40), a2, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a3, a4);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return 1;
}

uint64_t __nw_replicate_options_enumerate_endpoints_with_expiration_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  _QWORD v4[6];

  v2 = *(unsigned __int8 **)(a2 + 144);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __nw_replicate_options_enumerate_endpoints_with_expiration_block_invoke_2;
  v4[3] = &unk_1E14A1B08;
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = a2;
  nw_array_apply(v2, (uint64_t)v4);
  return 1;
}

uint64_t __nw_replicate_options_enumerate_endpoints_with_expiration_block_invoke_2(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 <= 7)
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * a2 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * a2 + 80));
  else
    return 0;
}

void nw_protocol_replicate_add_secondary_endpoint(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *v27;
  _BOOL4 v28;
  char *backtrace_string;
  _BOOL4 v30;
  _QWORD v31[7];
  unsigned int v32;
  _QWORD v33[7];
  unsigned int v34;
  _QWORD v35[7];
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  uint8_t buf[4];
  const char *v42;
  _BYTE v43[24];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a3 < 8)
    {
      v10 = *(_QWORD *)(a1 + 48);
      v11 = *(_QWORD *)(a1 + 32);
      *(_BYTE *)(a1 + 372) |= 2u;
      v12 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)(v10 + 24) + 112))();
      *(_QWORD *)(a1 + 96) = a2;
      v13 = v12;
      v14 = (void *)-[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v13, 0, 0);

      *(_QWORD *)(a1 + 104) = v14;
      v15 = a1 + 8 * a3;
      *(_QWORD *)(v15 + 240) = a4;
      *(_QWORD *)(v15 + 304) = a5;
      if (a5)
        *(_BYTE *)(a1 + 372) |= 8u;
      if (!*(_QWORD *)(a1 + 96) || !v14)
      {
LABEL_14:
        *(_QWORD *)(a1 + 96) = 0;
        if (!v14)
          goto LABEL_18;
        goto LABEL_17;
      }
      if ((*(_DWORD *)(a1 + 368) - 1) >= 3)
      {
        *(_QWORD *)(a1 + 96) = 0;
LABEL_17:
        os_release(v14);
        *(_QWORD *)(a1 + 104) = 0;
LABEL_18:
        *(_BYTE *)(a1 + 372) &= ~2u;
        nw_protocol_set_output_handler(a1, v11);
        return;
      }
      *(_QWORD *)v43 = 0;
      *(_QWORD *)&v43[8] = v43;
      *(_QWORD *)&v43[16] = 0x2000000000;
      v44 = a1;
      v37 = 0;
      v38 = &v37;
      v39 = 0x2000000000;
      v40 = 0;
      v16 = MEMORY[0x1E0C809B0];
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 0x40000000;
      v35[2] = ___ZL44nw_protocol_replicate_add_secondary_endpointP21nw_protocol_replicateP11nw_endpointjxy_block_invoke;
      v35[3] = &unk_1E14A1CB0;
      v35[5] = &v37;
      v35[6] = a1;
      v36 = a3;
      v35[4] = v43;
      nw_parameters_internal_iterate_protocol_stack(v14, 3, 0, v35);
      if (*((_BYTE *)v38 + 24))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
LABEL_12:
          _Block_object_dispose(&v37, 8);
LABEL_13:
          _Block_object_dispose(v43, 8);
          v14 = *(void **)(a1 + 104);
          goto LABEL_14;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "nw_protocol_replicate_add_secondary_endpoint";
        v18 = "%{public}s Failed to attach transport protocol";
LABEL_11:
        _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0xCu);
        goto LABEL_12;
      }
      _Block_object_dispose(&v37, 8);
      if ((*(_DWORD *)(a1 + 368) - 1) <= 1)
      {
        v37 = 0;
        v38 = &v37;
        v39 = 0x2000000000;
        v40 = 0;
        v19 = *(void **)(a1 + 104);
        v33[0] = v16;
        v33[1] = 0x40000000;
        v33[2] = ___ZL44nw_protocol_replicate_add_secondary_endpointP21nw_protocol_replicateP11nw_endpointjxy_block_invoke_31;
        v33[3] = &unk_1E14A1CD8;
        v33[5] = &v37;
        v33[6] = a1;
        v34 = a3;
        v33[4] = v43;
        nw_parameters_internal_iterate_protocol_stack(v19, 2, 0, v33);
        if (*((_BYTE *)v38 + 24))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v17 = gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            goto LABEL_12;
          *(_DWORD *)buf = 136446210;
          v42 = "nw_protocol_replicate_add_secondary_endpoint";
          v18 = "%{public}s Failed to attach internet protocol";
          goto LABEL_11;
        }
        _Block_object_dispose(&v37, 8);
        if (*(_DWORD *)(a1 + 368) == 1)
        {
          v37 = 0;
          v38 = &v37;
          v39 = 0x2000000000;
          v40 = 0;
          v20 = *(void **)(a1 + 104);
          v31[0] = v16;
          v31[1] = 0x40000000;
          v31[2] = ___ZL44nw_protocol_replicate_add_secondary_endpointP21nw_protocol_replicateP11nw_endpointjxy_block_invoke_33;
          v31[3] = &unk_1E14A1D00;
          v31[5] = &v37;
          v31[6] = a1;
          v32 = a3;
          v31[4] = v43;
          nw_parameters_internal_iterate_protocol_stack(v20, 1, 0, v31);
          if (*((_BYTE *)v38 + 24))
          {
            v17 = __nwlog_obj();
            if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
              goto LABEL_12;
            *(_DWORD *)buf = 136446210;
            v42 = "nw_protocol_replicate_add_secondary_endpoint";
            v18 = "%{public}s Failed to attach link protocol";
            goto LABEL_11;
          }
          _Block_object_dispose(&v37, 8);
        }
      }
      if ((*(_BYTE *)(a1 + 372) & 1) != 0)
      {
        v21 = *(_QWORD *)(a1 + 32);
        do
        {
          v22 = v21;
          v21 = *(_QWORD *)(v21 + 32);
        }
        while (v21);
        nw_protocol_set_output_handler(*(_QWORD *)(*(_QWORD *)&v43[8] + 24), v22);
      }
      goto LABEL_13;
    }
    __nwlog_obj();
    *(_DWORD *)v43 = 136446210;
    *(_QWORD *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
    v23 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v37) = 16;
    buf[0] = 0;
    if (__nwlog_fault(v23, &v37, buf))
    {
      if (v37 == 17)
      {
        v24 = __nwlog_obj();
        v25 = v37;
        if (!os_log_type_enabled(v24, (os_log_type_t)v37))
          goto LABEL_61;
        *(_DWORD *)v43 = 136446210;
        *(_QWORD *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
        v26 = "%{public}s called with null (index < NW_PROTOCOL_REPLICATE_MAX_ENDPOINTS)";
        goto LABEL_60;
      }
      if (!buf[0])
      {
        v24 = __nwlog_obj();
        v25 = v37;
        if (!os_log_type_enabled(v24, (os_log_type_t)v37))
          goto LABEL_61;
        *(_DWORD *)v43 = 136446210;
        *(_QWORD *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
        v26 = "%{public}s called with null (index < NW_PROTOCOL_REPLICATE_MAX_ENDPOINTS), backtrace limit exceeded";
        goto LABEL_60;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = v37;
      v30 = os_log_type_enabled(v24, (os_log_type_t)v37);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)v43 = 136446466;
          *(_QWORD *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
          *(_WORD *)&v43[12] = 2082;
          *(_QWORD *)&v43[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null (index < NW_PROTOCOL_REPLICATE_MAX_ENDPOINTS), dumping backtrace:%{public}s", v43, 0x16u);
        }
        free(backtrace_string);
        if (v23)
          goto LABEL_62;
        return;
      }
      if (v30)
      {
        *(_DWORD *)v43 = 136446210;
        *(_QWORD *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
        v26 = "%{public}s called with null (index < NW_PROTOCOL_REPLICATE_MAX_ENDPOINTS), no backtrace";
LABEL_60:
        _os_log_impl(&dword_182FBE000, v24, v25, v26, v43, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)v43 = 136446210;
    *(_QWORD *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
    v23 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v37) = 16;
    buf[0] = 0;
    if (!__nwlog_fault(v23, &v37, buf))
      goto LABEL_61;
    if (v37 == 17)
    {
      v24 = __nwlog_obj();
      v25 = v37;
      if (!os_log_type_enabled(v24, (os_log_type_t)v37))
        goto LABEL_61;
      *(_DWORD *)v43 = 136446210;
      *(_QWORD *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
      v26 = "%{public}s called with null replicate";
      goto LABEL_60;
    }
    if (!buf[0])
    {
      v24 = __nwlog_obj();
      v25 = v37;
      if (!os_log_type_enabled(v24, (os_log_type_t)v37))
        goto LABEL_61;
      *(_DWORD *)v43 = 136446210;
      *(_QWORD *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
      v26 = "%{public}s called with null replicate, backtrace limit exceeded";
      goto LABEL_60;
    }
    v27 = (char *)__nw_create_backtrace_string();
    v24 = __nwlog_obj();
    v25 = v37;
    v28 = os_log_type_enabled(v24, (os_log_type_t)v37);
    if (!v27)
    {
      if (!v28)
        goto LABEL_61;
      *(_DWORD *)v43 = 136446210;
      *(_QWORD *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
      v26 = "%{public}s called with null replicate, no backtrace";
      goto LABEL_60;
    }
    if (v28)
    {
      *(_DWORD *)v43 = 136446466;
      *(_QWORD *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
      *(_WORD *)&v43[12] = 2082;
      *(_QWORD *)&v43[14] = v27;
      _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null replicate, dumping backtrace:%{public}s", v43, 0x16u);
    }
    free(v27);
  }
LABEL_61:
  if (v23)
LABEL_62:
    free(v23);
}

void sub_1837CF238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL44nw_protocol_replicate_add_secondary_endpointP21nw_protocol_replicateP11nw_endpointjxy_block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5;

  v5 = nw_protocol_replicate_attach_protocol(*(_QWORD *)(a1 + 48), a3, a4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_DWORD *)(a1 + 56));
  if (v5)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
  else
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return v5 != 0;
}

BOOL ___ZL44nw_protocol_replicate_add_secondary_endpointP21nw_protocol_replicateP11nw_endpointjxy_block_invoke_31(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5;

  v5 = nw_protocol_replicate_attach_protocol(*(_QWORD *)(a1 + 48), a3, a4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_DWORD *)(a1 + 56));
  if (v5)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
  else
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return v5 != 0;
}

BOOL ___ZL44nw_protocol_replicate_add_secondary_endpointP21nw_protocol_replicateP11nw_endpointjxy_block_invoke_33(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5;

  v5 = nw_protocol_replicate_attach_protocol(*(_QWORD *)(a1 + 48), a3, a4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_DWORD *)(a1 + 56));
  if (v5)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
  else
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return v5 != 0;
}

uint64_t nw_protocol_replicate_attach_protocol(uint64_t a1, void *a2, void *a3, uint64_t a4, unsigned int a5)
{
  char *identifier;
  uint64_t internal;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  char *v27;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  char *backtrace_string;
  _BOOL4 v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (a5 >= 8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_replicate_attach_protocol";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v29, &type, &v35))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_replicate_attach_protocol";
      v32 = "%{public}s called with null (index < 8)";
    }
    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v34 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_protocol_replicate_attach_protocol";
          v39 = 2082;
          v40 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null (index < 8), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_32;
      }
      if (!v34)
      {
LABEL_32:
        if (v29)
          free(v29);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_replicate_attach_protocol";
      v32 = "%{public}s called with null (index < 8), no backtrace";
    }
    else
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_replicate_attach_protocol";
      v32 = "%{public}s called with null (index < 8), backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v30, v31, v32, buf, 0xCu);
    goto LABEL_32;
  }
  identifier = nw_protocol_definition_get_identifier(a2);
  internal = nw_protocol_create_internal((uint64_t)identifier, *(void **)(a1 + 96), *(const char **)(a1 + 104), 1);
  if (!internal)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v24 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v38 = "nw_protocol_replicate_attach_protocol";
      v39 = 2114;
      v40 = (char *)a2;
      v25 = "%{public}s Replicate could not create protocol for %{public}@";
      v26 = v24;
LABEL_15:
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, v25, buf, 0x16u);
    }
    return 0;
  }
  v13 = internal;
  nw_parameters_set_protocol_instance(a3, v12, internal);
  v14 = (**(uint64_t (***)(uint64_t, uint64_t))(v13 + 24))(v13, a4);
  v15 = a1 + 8 * a5;
  v17 = *(_QWORD *)(v15 + 112);
  v16 = (uint64_t *)(v15 + 112);
  if (!v17)
    *v16 = v13;
  v18 = a1 + 8 * a5;
  v20 = *(_QWORD *)(v18 + 176);
  v19 = (void **)(v18 + 176);
  if (!v20)
  {
    v21 = *(void **)(a1 + 96);
    if (v21)
      *v19 = os_retain(v21);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v22 = gLogObj;
  if ((v14 & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v27 = *(char **)(a1 + 96);
      *(_DWORD *)buf = 136446466;
      v38 = "nw_protocol_replicate_attach_protocol";
      v39 = 2112;
      v40 = v27;
      v25 = "%{public}s Replicate failed to add output handler for %@";
      v26 = v22;
      goto LABEL_15;
    }
    return 0;
  }
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
  {
    v23 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)buf = 136446722;
    v38 = "nw_protocol_replicate_attach_protocol";
    v39 = 2112;
    v40 = (char *)a2;
    v41 = 2112;
    v42 = v23;
    _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_INFO, "%{public}s Replicate added output handler for %@ on %@", buf, 0x20u);
  }
  return v13;
}

NWConcrete_nw_protocol_options *nw_replicate_create_options()
{
  if (nw_protocol_copy_replicate_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_replicate_definition::onceToken, &__block_literal_global_41038);
  return nw_protocol_create_options((void *)nw_protocol_copy_replicate_definition::definition);
}

void nw_replicate_options_set_primary_expiration(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  _QWORD v9[6];
  char v10;
  os_log_type_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = __nw_replicate_options_set_primary_expiration_block_invoke;
    v9[3] = &__block_descriptor_tmp_4_41232;
    v9[4] = a2;
    v9[5] = a3;
    nw_protocol_options_access_handle(a1, v9);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_replicate_options_set_primary_expiration";
  v3 = (char *)_os_log_send_and_compose_impl();
  v11 = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v3, &v11, &v10))
  {
    if (v11 == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = v11;
      if (!os_log_type_enabled(v4, v11))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_replicate_options_set_primary_expiration";
      v6 = "%{public}s called with null options";
      goto LABEL_17;
    }
    if (!v10)
    {
      v4 = __nwlog_obj();
      v5 = v11;
      if (!os_log_type_enabled(v4, v11))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_replicate_options_set_primary_expiration";
      v6 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = v11;
    v8 = os_log_type_enabled(v4, v11);
    if (backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        v13 = "nw_replicate_options_set_primary_expiration";
        v14 = 2082;
        v15 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446210;
      v13 = "nw_replicate_options_set_primary_expiration";
      v6 = "%{public}s called with null options, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    }
  }
LABEL_18:
  if (v3)
    free(v3);
}

uint64_t __nw_replicate_options_set_primary_expiration_block_invoke(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 32);
  a2[1] = *(_QWORD *)(a1 + 40);
  return 1;
}

void nw_replicate_options_add_endpoint_with_expiration(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *v8;
  _BOOL4 v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[7];
  char v13;
  os_log_type_t v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 0x40000000;
      v12[2] = __nw_replicate_options_add_endpoint_with_expiration_block_invoke;
      v12[3] = &__block_descriptor_tmp_5_41243;
      v12[4] = a2;
      v12[5] = a3;
      v12[6] = a4;
      nw_protocol_options_access_handle(a1, v12);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_replicate_options_add_endpoint_with_expiration";
    v4 = (char *)_os_log_send_and_compose_impl();
    v14 = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v4, &v14, &v13))
    {
      if (v14 == OS_LOG_TYPE_FAULT)
      {
        v5 = __nwlog_obj();
        v6 = v14;
        if (!os_log_type_enabled(v5, v14))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_replicate_options_add_endpoint_with_expiration";
        v7 = "%{public}s called with null endpoint";
        goto LABEL_32;
      }
      if (!v13)
      {
        v5 = __nwlog_obj();
        v6 = v14;
        if (!os_log_type_enabled(v5, v14))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_replicate_options_add_endpoint_with_expiration";
        v7 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = v14;
      v11 = os_log_type_enabled(v5, v14);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_replicate_options_add_endpoint_with_expiration";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v4)
          goto LABEL_34;
        return;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_replicate_options_add_endpoint_with_expiration";
        v7 = "%{public}s called with null endpoint, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_replicate_options_add_endpoint_with_expiration";
    v4 = (char *)_os_log_send_and_compose_impl();
    v14 = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v4, &v14, &v13))
      goto LABEL_33;
    if (v14 == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = v14;
      if (!os_log_type_enabled(v5, v14))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_replicate_options_add_endpoint_with_expiration";
      v7 = "%{public}s called with null options";
      goto LABEL_32;
    }
    if (!v13)
    {
      v5 = __nwlog_obj();
      v6 = v14;
      if (!os_log_type_enabled(v5, v14))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_replicate_options_add_endpoint_with_expiration";
      v7 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_32;
    }
    v8 = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = v14;
    v9 = os_log_type_enabled(v5, v14);
    if (!v8)
    {
      if (!v9)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_replicate_options_add_endpoint_with_expiration";
      v7 = "%{public}s called with null options, no backtrace";
      goto LABEL_32;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v16 = "nw_replicate_options_add_endpoint_with_expiration";
      v17 = 2082;
      v18 = v8;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v8);
  }
LABEL_33:
  if (v4)
LABEL_34:
    free(v4);
}

uint64_t __nw_replicate_options_add_endpoint_with_expiration_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 144);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_5;
  }
  v5 = *(_QWORD *)(v4 + 24) - *(_QWORD *)(v4 + 16);
  if ((unint64_t)v5 <= 0x3F)
  {
    v6 = v5 >> 3;
LABEL_5:
    nw_array_append(v4, *(void **)(a1 + 32));
    v7 = a2 + 8 * v6;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(v7 + 80) = *(_QWORD *)(a1 + 48);
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    v10 = 136446466;
    v11 = "nw_replicate_options_add_endpoint_with_expiration_block_invoke";
    v12 = 1024;
    v13 = 8;
    _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s Cannot add more than %u endpoints to replicator", (uint8_t *)&v10, 0x12u);
  }
  return 1;
}

void nw_replicate_options_add_endpoint(void *a1, uint64_t a2)
{
  nw_replicate_options_add_endpoint_with_expiration(a1, a2, 0, 0);
}

void nw_replicate_options_enumerate_endpoints(void *a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  _QWORD v10[5];
  char v11;
  os_log_type_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 0x40000000;
      v10[2] = __nw_replicate_options_enumerate_endpoints_block_invoke;
      v10[3] = &unk_1E14A1AE0;
      v10[4] = a2;
      nw_protocol_options_access_handle(a1, v10);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_replicate_options_enumerate_endpoints";
    v2 = (char *)_os_log_send_and_compose_impl();
    v12 = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (__nwlog_fault(v2, &v12, &v11))
    {
      if (v12 == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = v12;
        if (!os_log_type_enabled(v3, v12))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_replicate_options_enumerate_endpoints";
        v5 = "%{public}s called with null enumerate_block";
        goto LABEL_32;
      }
      if (!v11)
      {
        v3 = __nwlog_obj();
        v4 = v12;
        if (!os_log_type_enabled(v3, v12))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_replicate_options_enumerate_endpoints";
        v5 = "%{public}s called with null enumerate_block, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = v12;
      v9 = os_log_type_enabled(v3, v12);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_replicate_options_enumerate_endpoints";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_replicate_options_enumerate_endpoints";
        v5 = "%{public}s called with null enumerate_block, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_replicate_options_enumerate_endpoints";
    v2 = (char *)_os_log_send_and_compose_impl();
    v12 = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v2, &v12, &v11))
      goto LABEL_33;
    if (v12 == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = v12;
      if (!os_log_type_enabled(v3, v12))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_replicate_options_enumerate_endpoints";
      v5 = "%{public}s called with null options";
      goto LABEL_32;
    }
    if (!v11)
    {
      v3 = __nwlog_obj();
      v4 = v12;
      if (!os_log_type_enabled(v3, v12))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_replicate_options_enumerate_endpoints";
      v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = v12;
    v7 = os_log_type_enabled(v3, v12);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_replicate_options_enumerate_endpoints";
      v5 = "%{public}s called with null options, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_replicate_options_enumerate_endpoints";
      v15 = 2082;
      v16 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

uint64_t __nw_replicate_options_enumerate_endpoints_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  _QWORD v4[5];

  v2 = *(unsigned __int8 **)(a2 + 144);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __nw_replicate_options_enumerate_endpoints_block_invoke_2;
  v4[3] = &unk_1E14A1AB8;
  v4[4] = *(_QWORD *)(a1 + 32);
  nw_array_apply(v2, (uint64_t)v4);
  return 1;
}

uint64_t __nw_replicate_options_enumerate_endpoints_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void nw_replicate_options_enumerate_endpoints_with_expiration(void *a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  _QWORD v10[5];
  char v11;
  os_log_type_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 0x40000000;
      v10[2] = __nw_replicate_options_enumerate_endpoints_with_expiration_block_invoke;
      v10[3] = &unk_1E14A1B30;
      v10[4] = a2;
      nw_protocol_options_access_handle(a1, v10);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
    v2 = (char *)_os_log_send_and_compose_impl();
    v12 = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (__nwlog_fault(v2, &v12, &v11))
    {
      if (v12 == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = v12;
        if (!os_log_type_enabled(v3, v12))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
        v5 = "%{public}s called with null enumerate_block";
        goto LABEL_32;
      }
      if (!v11)
      {
        v3 = __nwlog_obj();
        v4 = v12;
        if (!os_log_type_enabled(v3, v12))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
        v5 = "%{public}s called with null enumerate_block, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = v12;
      v9 = os_log_type_enabled(v3, v12);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
        v5 = "%{public}s called with null enumerate_block, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
    v2 = (char *)_os_log_send_and_compose_impl();
    v12 = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v2, &v12, &v11))
      goto LABEL_33;
    if (v12 == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = v12;
      if (!os_log_type_enabled(v3, v12))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
      v5 = "%{public}s called with null options";
      goto LABEL_32;
    }
    if (!v11)
    {
      v3 = __nwlog_obj();
      v4 = v12;
      if (!os_log_type_enabled(v3, v12))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
      v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = v12;
    v7 = os_log_type_enabled(v3, v12);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
      v5 = "%{public}s called with null options, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
      v15 = 2082;
      v16 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

uint64_t nw_replicate_options_get_primary_expiration_adjustment(void *a1)
{
  uint64_t v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  _QWORD v9[5];
  char v10;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v13 = 0;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = __nw_replicate_options_get_primary_expiration_adjustment_block_invoke;
    v9[3] = &unk_1E14A1B58;
    v9[4] = buf;
    nw_protocol_options_access_handle(a1, v9);
    v1 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    return v1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_replicate_options_get_primary_expiration_adjustment";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_replicate_options_get_primary_expiration_adjustment";
        v6 = "%{public}s called with null options";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_replicate_options_get_primary_expiration_adjustment";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_replicate_options_get_primary_expiration_adjustment";
        v6 = "%{public}s called with null options, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_replicate_options_get_primary_expiration_adjustment";
        v6 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_replicate_options_get_primary_maximum_expiration(void *a1)
{
  uint64_t v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  _QWORD v9[5];
  char v10;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v13 = 0;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = __nw_replicate_options_get_primary_maximum_expiration_block_invoke;
    v9[3] = &unk_1E14A1B80;
    v9[4] = buf;
    nw_protocol_options_access_handle(a1, v9);
    v1 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    return v1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_replicate_options_get_primary_maximum_expiration";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_replicate_options_get_primary_maximum_expiration";
        v6 = "%{public}s called with null options";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_replicate_options_get_primary_maximum_expiration";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_replicate_options_get_primary_maximum_expiration";
        v6 = "%{public}s called with null options, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_replicate_options_get_primary_maximum_expiration";
        v6 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v3)
    free(v3);
  return 0;
}

void nw_replicate_metadata_add_endpoint_with_expiration(nw_protocol_metadata *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *v12;
  _BOOL4 v13;
  char *backtrace_string;
  _BOOL4 v15;
  _QWORD v16[8];
  char v17;
  os_log_type_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (nw_protocol_metadata_is_replicate(a1))
  {
    if (a2)
    {
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 0x40000000;
      v16[2] = __nw_replicate_metadata_add_endpoint_with_expiration_block_invoke;
      v16[3] = &__block_descriptor_tmp_14_41287;
      v16[4] = a1;
      v16[5] = a2;
      v16[6] = a3;
      v16[7] = a4;
      nw_protocol_metadata_access_handle((uint64_t)a1, (uint64_t)v16);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
    v8 = (char *)_os_log_send_and_compose_impl();
    v18 = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v8, &v18, &v17))
    {
      if (v18 == OS_LOG_TYPE_FAULT)
      {
        v9 = __nwlog_obj();
        v10 = v18;
        if (!os_log_type_enabled(v9, v18))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
        v11 = "%{public}s called with null endpoint";
        goto LABEL_32;
      }
      if (!v17)
      {
        v9 = __nwlog_obj();
        v10 = v18;
        if (!os_log_type_enabled(v9, v18))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
        v11 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = v18;
      v15 = os_log_type_enabled(v9, v18);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v8)
          goto LABEL_34;
        return;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
        v11 = "%{public}s called with null endpoint, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
    v8 = (char *)_os_log_send_and_compose_impl();
    v18 = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v8, &v18, &v17))
      goto LABEL_33;
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v18;
      if (!os_log_type_enabled(v9, v18))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
      v11 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata)";
      goto LABEL_32;
    }
    if (!v17)
    {
      v9 = __nwlog_obj();
      v10 = v18;
      if (!os_log_type_enabled(v9, v18))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
      v11 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), backtrace limit exceeded";
      goto LABEL_32;
    }
    v12 = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v18;
    v13 = os_log_type_enabled(v9, v18);
    if (!v12)
    {
      if (!v13)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
      v11 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), no backtrace";
      goto LABEL_32;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
      v21 = 2082;
      v22 = v12;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v12);
  }
LABEL_33:
  if (v8)
LABEL_34:
    free(v8);
}

uint64_t __nw_replicate_metadata_add_endpoint_with_expiration_block_invoke(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  void *v6;
  void *v7;
  _BOOL4 is_inline;
  __int128 v9;
  _QWORD v10[4];
  __int128 v11;
  __int128 v12;
  BOOL v13;

  v4 = (os_unfair_lock_s *)(a2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 16));
  if (!*(_BYTE *)(a2 + 20) && *(_QWORD *)a2 && *(_QWORD *)(a2 + 8))
  {
    v6 = *(void **)(a1 + 32);
    if (v6)
      os_retain(v6);
    v7 = *(void **)(a1 + 40);
    if (v7)
      os_retain(v7);
    is_inline = nw_context_is_inline(*(void **)(a2 + 8));
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = __nw_replicate_metadata_add_endpoint_with_expiration_block_invoke_2;
    v10[3] = &__block_descriptor_tmp_13_41288;
    v13 = is_inline;
    v9 = *(_OWORD *)(a1 + 48);
    v11 = *(_OWORD *)(a1 + 32);
    v12 = v9;
    if (is_inline)
      __nw_replicate_metadata_add_endpoint_with_expiration_block_invoke_2((uint64_t)v10);
    else
      nw_queue_context_async(*(void **)(a2 + 8), v10);
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void __nw_replicate_metadata_add_endpoint_with_expiration_block_invoke_2(uint64_t a1)
{
  nw_protocol_metadata *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char *v15;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *(nw_protocol_metadata **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  if (!nw_protocol_metadata_is_replicate(v2))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
      v12 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata)";
LABEL_36:
      _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      goto LABEL_37;
    }
    if (!v17)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
      v12 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), backtrace limit exceeded";
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type;
    v14 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (!v14)
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
      v12 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), no backtrace";
      goto LABEL_36;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_37:
    if (!v9)
      goto LABEL_4;
    goto LABEL_38;
  }
  if (v3)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL43nw_replicate_metadata_add_endpoint_on_queueP20nw_protocol_metadataP11nw_endpointbxy_block_invoke;
    v20 = &__block_descriptor_tmp_43_41299;
    v24 = v4 ^ 1;
    v21 = v3;
    v22 = v5;
    v23 = v6;
    nw_protocol_metadata_access_handle((uint64_t)v2, (uint64_t)buf);
    goto LABEL_4;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
  v9 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (!__nwlog_fault(v9, &type, &v17))
    goto LABEL_37;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v10 = __nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type))
      goto LABEL_37;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
    v12 = "%{public}s called with null endpoint";
    goto LABEL_36;
  }
  if (!v17)
  {
    v10 = __nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type))
      goto LABEL_37;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
    v12 = "%{public}s called with null endpoint, backtrace limit exceeded";
    goto LABEL_36;
  }
  v15 = (char *)__nw_create_backtrace_string();
  v10 = __nwlog_obj();
  v11 = type;
  v16 = os_log_type_enabled(v10, type);
  if (!v15)
  {
    if (!v16)
      goto LABEL_37;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
    v12 = "%{public}s called with null endpoint, no backtrace";
    goto LABEL_36;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v15;
    _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v15);
  if (v9)
LABEL_38:
    free(v9);
LABEL_4:
  v7 = *(void **)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  if (v7)
    os_release(v7);
  if (v8)
    os_release(v8);
}

uint64_t ___ZL43nw_replicate_metadata_add_endpoint_on_queueP20nw_protocol_metadataP11nw_endpointbxy_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v5;
  dispatch_queue_t *v6;
  dispatch_queue_t *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  int is_equal;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  const char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 56))
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 16));
  if (!*(_BYTE *)(a2 + 20))
  {
    if (*(_QWORD *)a2)
    {
      v5 = *(void **)(a2 + 8);
      if (v5)
      {
        v6 = v5;
        v7 = v6;
        if (((_BYTE)v6[17] & 8) == 0)
          dispatch_assert_queue_V2(v6[1]);

        v8 = *(_QWORD *)(*(_QWORD *)a2 + 40);
        v9 = *(void **)(v8 + 72);
        if (v9 && nw_endpoint_is_equal(v9, *(void **)(a1 + 32), 0))
        {
          *(_BYTE *)(v8 + 372) &= ~4u;
          *(_QWORD *)(v8 + 80) = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(v8 + 88) = *(_QWORD *)(a1 + 48);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v10 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
          {
            v11 = *(_QWORD *)(a1 + 32);
            v29 = 136446466;
            v30 = "nw_replicate_metadata_add_endpoint_on_queue_block_invoke";
            v31 = 2112;
            v32 = v11;
            _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s Re-adding primary endpoint %@ for replication", (uint8_t *)&v29, 0x16u);
          }
          goto LABEL_35;
        }
        v12 = *(void **)(v8 + 176);
        v13 = v12 == 0;
        if (v12)
        {
          is_equal = nw_endpoint_is_equal(v12, *(void **)(a1 + 32), 0);
          v15 = *(void **)(v8 + 184);
          if (v15)
            goto LABEL_17;
        }
        else
        {
          is_equal = 0;
          v15 = *(void **)(v8 + 184);
          if (v15)
          {
LABEL_17:
            v16 = 0;
            is_equal |= nw_endpoint_is_equal(v15, *(void **)(a1 + 32), 0);
            v17 = *(void **)(v8 + 192);
            if (v17)
              goto LABEL_18;
            goto LABEL_29;
          }
        }
        v13 = 1;
        v16 = 1;
        v17 = *(void **)(v8 + 192);
        if (v17)
        {
LABEL_18:
          is_equal |= nw_endpoint_is_equal(v17, *(void **)(a1 + 32), 0);
          v18 = *(void **)(v8 + 200);
          if (v18)
            goto LABEL_19;
          goto LABEL_30;
        }
LABEL_29:
        v16 = 2;
        v13 = 1;
        v18 = *(void **)(v8 + 200);
        if (v18)
        {
LABEL_19:
          is_equal |= nw_endpoint_is_equal(v18, *(void **)(a1 + 32), 0);
          v19 = *(void **)(v8 + 208);
          if (v19)
            goto LABEL_20;
          goto LABEL_31;
        }
LABEL_30:
        v16 = 3;
        v13 = 1;
        v19 = *(void **)(v8 + 208);
        if (v19)
        {
LABEL_20:
          is_equal |= nw_endpoint_is_equal(v19, *(void **)(a1 + 32), 0);
          v20 = *(void **)(v8 + 216);
          if (v20)
            goto LABEL_21;
          goto LABEL_32;
        }
LABEL_31:
        v16 = 4;
        v13 = 1;
        v20 = *(void **)(v8 + 216);
        if (v20)
        {
LABEL_21:
          is_equal |= nw_endpoint_is_equal(v20, *(void **)(a1 + 32), 0);
          v21 = *(void **)(v8 + 224);
          if (v21)
            goto LABEL_22;
          goto LABEL_33;
        }
LABEL_32:
        v16 = 5;
        v13 = 1;
        v21 = *(void **)(v8 + 224);
        if (v21)
        {
LABEL_22:
          is_equal |= nw_endpoint_is_equal(v21, *(void **)(a1 + 32), 0);
          v22 = *(void **)(v8 + 232);
          if (v22)
            goto LABEL_23;
          goto LABEL_34;
        }
LABEL_33:
        v16 = 6;
        v13 = 1;
        v22 = *(void **)(v8 + 232);
        if (v22)
        {
LABEL_23:
          if (((nw_endpoint_is_equal(v22, *(void **)(a1 + 32), 0) | is_equal) & 1) == 0)
          {
            if (!v13)
            {
              v23 = __nwlog_obj();
              if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
                goto LABEL_4;
              v24 = *(_QWORD *)(a1 + 32);
              v29 = 136446466;
              v30 = "nw_replicate_metadata_add_endpoint_on_queue_block_invoke";
              v31 = 2112;
              v32 = v24;
              v25 = "%{public}s Will not add endpoint %@ for replication, no room for more endpoints";
LABEL_37:
              _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&v29, 0x16u);
              goto LABEL_4;
            }
            goto LABEL_39;
          }
          goto LABEL_35;
        }
LABEL_34:
        if (!is_equal)
        {
          v16 = 7;
LABEL_39:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
          {
            v28 = *(_QWORD *)(a1 + 32);
            v29 = 136446466;
            v30 = "nw_replicate_metadata_add_endpoint_on_queue_block_invoke";
            v31 = 2112;
            v32 = v28;
            _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s Adding endpoint %@ for replication", (uint8_t *)&v29, 0x16u);
          }
          nw_protocol_replicate_add_secondary_endpoint(v8, *(_QWORD *)(a1 + 32), v16, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
          goto LABEL_4;
        }
LABEL_35:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v23 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          goto LABEL_4;
        v26 = *(_QWORD *)(a1 + 32);
        v29 = 136446466;
        v30 = "nw_replicate_metadata_add_endpoint_on_queue_block_invoke";
        v31 = 2112;
        v32 = v26;
        v25 = "%{public}s Will not add endpoint %@ for replication, already covered";
        goto LABEL_37;
      }
    }
  }
LABEL_4:
  if (*(_BYTE *)(a1 + 56))
    os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 16));
  return 1;
}

void sub_1837D1A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_replicate_metadata_add_endpoint(nw_protocol_metadata *a1, uint64_t a2)
{
  nw_replicate_metadata_add_endpoint_with_expiration(a1, a2, 0, 0);
}

void nw_replicate_metadata_remove_endpoint(nw_protocol_metadata *a1, uint64_t a2)
{
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *v8;
  _BOOL4 v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[6];
  char v13;
  os_log_type_t v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (nw_protocol_metadata_is_replicate(a1))
  {
    if (a2)
    {
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 0x40000000;
      v12[2] = __nw_replicate_metadata_remove_endpoint_block_invoke;
      v12[3] = &__block_descriptor_tmp_16_41314;
      v12[4] = a1;
      v12[5] = a2;
      nw_protocol_metadata_access_handle((uint64_t)a1, (uint64_t)v12);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_replicate_metadata_remove_endpoint";
    v4 = (char *)_os_log_send_and_compose_impl();
    v14 = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v4, &v14, &v13))
    {
      if (v14 == OS_LOG_TYPE_FAULT)
      {
        v5 = __nwlog_obj();
        v6 = v14;
        if (!os_log_type_enabled(v5, v14))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_replicate_metadata_remove_endpoint";
        v7 = "%{public}s called with null endpoint";
        goto LABEL_32;
      }
      if (!v13)
      {
        v5 = __nwlog_obj();
        v6 = v14;
        if (!os_log_type_enabled(v5, v14))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_replicate_metadata_remove_endpoint";
        v7 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = v14;
      v11 = os_log_type_enabled(v5, v14);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_replicate_metadata_remove_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v4)
          goto LABEL_34;
        return;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_replicate_metadata_remove_endpoint";
        v7 = "%{public}s called with null endpoint, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_replicate_metadata_remove_endpoint";
    v4 = (char *)_os_log_send_and_compose_impl();
    v14 = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v4, &v14, &v13))
      goto LABEL_33;
    if (v14 == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = v14;
      if (!os_log_type_enabled(v5, v14))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_replicate_metadata_remove_endpoint";
      v7 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata)";
      goto LABEL_32;
    }
    if (!v13)
    {
      v5 = __nwlog_obj();
      v6 = v14;
      if (!os_log_type_enabled(v5, v14))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_replicate_metadata_remove_endpoint";
      v7 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), backtrace limit exceeded";
      goto LABEL_32;
    }
    v8 = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = v14;
    v9 = os_log_type_enabled(v5, v14);
    if (!v8)
    {
      if (!v9)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_replicate_metadata_remove_endpoint";
      v7 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), no backtrace";
      goto LABEL_32;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v16 = "nw_replicate_metadata_remove_endpoint";
      v17 = 2082;
      v18 = v8;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v8);
  }
LABEL_33:
  if (v4)
LABEL_34:
    free(v4);
}

uint64_t __nw_replicate_metadata_remove_endpoint_block_invoke(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  void *v6;
  void *v7;
  _BOOL4 is_inline;
  _QWORD v9[4];
  __int128 v10;
  BOOL v11;

  v4 = (os_unfair_lock_s *)(a2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 16));
  if (!*(_BYTE *)(a2 + 20) && *(_QWORD *)a2 && *(_QWORD *)(a2 + 8))
  {
    v6 = *(void **)(a1 + 32);
    if (v6)
      os_retain(v6);
    v7 = *(void **)(a1 + 40);
    if (v7)
      os_retain(v7);
    is_inline = nw_context_is_inline(*(void **)(a2 + 8));
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = __nw_replicate_metadata_remove_endpoint_block_invoke_2;
    v9[3] = &__block_descriptor_tmp_15_41315;
    v10 = *(_OWORD *)(a1 + 32);
    v11 = is_inline;
    if (is_inline)
      __nw_replicate_metadata_remove_endpoint_block_invoke_2((uint64_t)v9);
    else
      nw_queue_context_async(*(void **)(a2 + 8), v9);
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void __nw_replicate_metadata_remove_endpoint_block_invoke_2(uint64_t a1)
{
  nw_protocol_metadata *v2;
  uint64_t v3;
  char v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  _BYTE buf[24];
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(nw_protocol_metadata **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  if (!nw_protocol_metadata_is_replicate(v2))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
      v10 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata)";
LABEL_36:
      _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      goto LABEL_37;
    }
    if (!v15)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
      v10 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), backtrace limit exceeded";
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = type;
    v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (!v12)
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
      v10 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), no backtrace";
      goto LABEL_36;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_37:
    if (!v7)
      goto LABEL_4;
    goto LABEL_38;
  }
  if (v3)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL46nw_replicate_metadata_remove_endpoint_on_queueP20nw_protocol_metadataP11nw_endpointb_block_invoke;
    v18 = &__block_descriptor_tmp_44_41326;
    v20 = v4 ^ 1;
    v19 = v3;
    nw_protocol_metadata_access_handle((uint64_t)v2, (uint64_t)buf);
    goto LABEL_4;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15))
    goto LABEL_37;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v8 = __nwlog_obj();
    v9 = type;
    if (!os_log_type_enabled(v8, type))
      goto LABEL_37;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
    v10 = "%{public}s called with null endpoint";
    goto LABEL_36;
  }
  if (!v15)
  {
    v8 = __nwlog_obj();
    v9 = type;
    if (!os_log_type_enabled(v8, type))
      goto LABEL_37;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
    v10 = "%{public}s called with null endpoint, backtrace limit exceeded";
    goto LABEL_36;
  }
  v13 = (char *)__nw_create_backtrace_string();
  v8 = __nwlog_obj();
  v9 = type;
  v14 = os_log_type_enabled(v8, type);
  if (!v13)
  {
    if (!v14)
      goto LABEL_37;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
    v10 = "%{public}s called with null endpoint, no backtrace";
    goto LABEL_36;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v13;
    _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7)
LABEL_38:
    free(v7);
LABEL_4:
  v5 = *(void **)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  if (v5)
    os_release(v5);
  if (v6)
    os_release(v6);
}

uint64_t ___ZL46nw_replicate_metadata_remove_endpoint_on_queueP20nw_protocol_metadataP11nw_endpointb_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v5;
  dispatch_queue_t *v6;
  dispatch_queue_t *v7;
  uint64_t v8;
  void *v9;
  char v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  unsigned __int8 is_equal;
  void *v15;
  unsigned int v16;
  void *v17;
  int v18;
  void *v19;
  int v20;
  void *v21;
  int v22;
  void *v23;
  int v24;
  void *v25;
  int v26;
  void *v27;
  int v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  NSObject *v40;
  uint64_t v41;
  int v42;
  const char *v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 16));
  if (*(_BYTE *)(a2 + 20))
    goto LABEL_4;
  if (!*(_QWORD *)a2)
    goto LABEL_4;
  v5 = *(void **)(a2 + 8);
  if (!v5)
    goto LABEL_4;
  v6 = v5;
  v7 = v6;
  if (((_BYTE)v6[17] & 8) == 0)
    dispatch_assert_queue_V2(v6[1]);

  v8 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  v9 = *(void **)(v8 + 72);
  if (v9)
  {
    v10 = 0;
    if (nw_endpoint_is_equal(v9, *(void **)(a1 + 32), 0))
    {
      *(_BYTE *)(v8 + 372) |= 4u;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 32);
        v42 = 136446466;
        v43 = "nw_replicate_metadata_remove_endpoint_on_queue_block_invoke";
        v44 = 2112;
        v45 = v12;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s Removing primary endpoint %@ for replication", (uint8_t *)&v42, 0x16u);
      }
      v10 = 1;
    }
    v13 = *(void **)(v8 + 176);
    if (v13)
    {
LABEL_17:
      is_equal = nw_endpoint_is_equal(v13, *(void **)(a1 + 32), 0);
      v15 = *(void **)(v8 + 184);
      if (v15)
        goto LABEL_18;
      goto LABEL_45;
    }
  }
  else
  {
    v10 = 0;
    v13 = *(void **)(v8 + 176);
    if (v13)
      goto LABEL_17;
  }
  is_equal = 0;
  v15 = *(void **)(v8 + 184);
  if (v15)
  {
LABEL_18:
    v16 = nw_endpoint_is_equal(v15, *(void **)(a1 + 32), 0);
    is_equal |= v16;
    v17 = *(void **)(v8 + 192);
    if (v17)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_45:
  v16 = 0;
  v17 = *(void **)(v8 + 192);
  if (v17)
  {
LABEL_19:
    v18 = nw_endpoint_is_equal(v17, *(void **)(a1 + 32), 0);
    is_equal |= v18;
    if (v18)
      v16 = 2;
  }
LABEL_21:
  v19 = *(void **)(v8 + 200);
  if (v19)
  {
    v20 = nw_endpoint_is_equal(v19, *(void **)(a1 + 32), 0);
    is_equal |= v20;
    if (v20)
      v16 = 3;
  }
  v21 = *(void **)(v8 + 208);
  if (v21)
  {
    v22 = nw_endpoint_is_equal(v21, *(void **)(a1 + 32), 0);
    is_equal |= v22;
    if (v22)
      v16 = 4;
  }
  v23 = *(void **)(v8 + 216);
  if (v23)
  {
    v24 = nw_endpoint_is_equal(v23, *(void **)(a1 + 32), 0);
    is_equal |= v24;
    if (v24)
      v16 = 5;
  }
  v25 = *(void **)(v8 + 224);
  if (v25)
  {
    v26 = nw_endpoint_is_equal(v25, *(void **)(a1 + 32), 0);
    is_equal |= v26;
    if (v26)
      v16 = 6;
  }
  v27 = *(void **)(v8 + 232);
  if (v27)
  {
    v28 = nw_endpoint_is_equal(v27, *(void **)(a1 + 32), 0);
    if (v28)
      v16 = 7;
    if (((v28 | is_equal) & 1) != 0)
      goto LABEL_37;
  }
  else if ((is_equal & 1) != 0)
  {
LABEL_37:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v29 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      v30 = *(_QWORD *)(a1 + 32);
      v42 = 136446466;
      v43 = "nw_replicate_metadata_remove_endpoint_on_queue_block_invoke";
      v44 = 2112;
      v45 = v30;
      _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s Removing endpoint %@ for replication", (uint8_t *)&v42, 0x16u);
    }
    v31 = v16;
    v32 = v8 + 8 * v16;
    v35 = *(_QWORD *)(v32 + 112);
    v34 = (_QWORD *)(v32 + 112);
    v33 = v35;
    if (v35)
    {
      (*(void (**)(void))(*(_QWORD *)(v33 + 24) + 8))();
      *v34 = 0;
    }
    v36 = v8 + 8 * v31;
    v39 = *(void **)(v36 + 176);
    v38 = (_QWORD *)(v36 + 176);
    v37 = v39;
    if (v39)
    {
      os_release(v37);
      *v38 = 0;
    }
    goto LABEL_4;
  }
  if ((v10 & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v40 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v41 = *(_QWORD *)(a1 + 32);
      v42 = 136446466;
      v43 = "nw_replicate_metadata_remove_endpoint_on_queue_block_invoke";
      v44 = 2112;
      v45 = v41;
      _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_ERROR, "%{public}s Will not remove endpoint %@ for replication, not found", (uint8_t *)&v42, 0x16u);
    }
  }
LABEL_4:
  if (*(_BYTE *)(a1 + 40))
    os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 16));
  return 1;
}

void sub_1837D27B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_host_endpoint_matches_hostname(void *a1, const char *a2, int a3, int a4, int a5)
{
  id v9;
  void *v10;
  id v11;
  int v12;
  unsigned __int16 *v13;
  const char *v14;
  unsigned __int16 *v15;
  _DWORD *v16;
  int v17;
  id v18;
  id v19;
  int v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  id v24;
  int v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  id v29;
  int v30;
  uint64_t v31;
  os_log_type_t v32;
  id v33;
  int v34;
  id v35;
  int v36;
  char *v37;
  void *v38;
  const char *v39;
  NSObject *v40;
  os_log_type_t v41;
  void *v42;
  os_log_type_t v43;
  char *backtrace_string;
  os_log_type_t v45;
  _BOOL4 v46;
  void *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  os_log_type_t v51;
  _BOOL4 v52;
  char *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  os_log_type_t v56;
  os_log_type_t v57;
  os_log_type_t v58;
  uint64_t v60;
  char v61;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  _WORD v66[17];

  *(_QWORD *)&v66[13] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_endpoint_host_endpoint_matches_hostname";
    v39 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (__nwlog_fault(v39, &type, &v61))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_endpoint_host_endpoint_matches_hostname";
          _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null endpoint", buf, 0xCu);
        }
        goto LABEL_78;
      }
      if (!v61)
      {
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v56 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_endpoint_host_endpoint_matches_hostname";
          _os_log_impl(&dword_182FBE000, v40, v56, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_78;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      v45 = type;
      v46 = os_log_type_enabled(v40, type);
      if (!backtrace_string)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_endpoint_host_endpoint_matches_hostname";
          _os_log_impl(&dword_182FBE000, v40, v45, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_78;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446466;
        v64 = "nw_endpoint_host_endpoint_matches_hostname";
        v65 = 2082;
        *(_QWORD *)v66 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v40, v45, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_61:

      free(backtrace_string);
    }
LABEL_79:
    if (!v39)
      goto LABEL_36;
    v37 = (char *)v39;
    goto LABEL_35;
  }
  if (!a2)
  {
    __nwlog_obj();
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_endpoint_host_endpoint_matches_hostname";
    v39 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (__nwlog_fault(v39, &type, &v61))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_endpoint_host_endpoint_matches_hostname";
          _os_log_impl(&dword_182FBE000, v40, v43, "%{public}s called with null hostname", buf, 0xCu);
        }
LABEL_78:

        goto LABEL_79;
      }
      if (!v61)
      {
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v57 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_endpoint_host_endpoint_matches_hostname";
          _os_log_impl(&dword_182FBE000, v40, v57, "%{public}s called with null hostname, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_78;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      v51 = type;
      v52 = os_log_type_enabled(v40, type);
      if (!backtrace_string)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_endpoint_host_endpoint_matches_hostname";
          _os_log_impl(&dword_182FBE000, v40, v51, "%{public}s called with null hostname, no backtrace", buf, 0xCu);
        }
        goto LABEL_78;
      }
      if (v52)
      {
        *(_DWORD *)buf = 136446466;
        v64 = "nw_endpoint_host_endpoint_matches_hostname";
        v65 = 2082;
        *(_QWORD *)v66 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v40, v51, "%{public}s called with null hostname, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_61;
    }
    goto LABEL_79;
  }
  v11 = v9;
  v12 = objc_msgSend(v11, "type");

  if (v12 == 2)
  {
    v13 = (unsigned __int16 *)v11;
    v14 = (const char *)*((_QWORD *)v13 + 29);
    if (v14)
    {
      if (a5)
      {
        v15 = v13;
        v16 = *((id *)v15 + 2);

        if (v16)
          v17 = v16[2];
        else
          v17 = 0;

        v14 = (const char *)*((_QWORD *)v15 + 29);
      }
      else
      {
        v17 = 0;
      }
      if (!strcmp(v14, a2) && v13[120] == a3)
      {
        if (v17 == a4)
          v31 = 1;
        else
          v31 = a5 ^ 1u;
        goto LABEL_90;
      }
LABEL_89:
      v31 = 0;
LABEL_90:

      goto LABEL_91;
    }
    __nwlog_obj();
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_endpoint_host_endpoint_matches_hostname";
    v48 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (__nwlog_fault(v48, &type, &v61))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v49 = objc_claimAutoreleasedReturnValue();
        v50 = type;
        if (os_log_type_enabled(v49, type))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_endpoint_host_endpoint_matches_hostname";
          _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s called with null self->hostname", buf, 0xCu);
        }
      }
      else if (v61)
      {
        v53 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v49 = objc_claimAutoreleasedReturnValue();
        v54 = type;
        v55 = os_log_type_enabled(v49, type);
        if (v53)
        {
          if (v55)
          {
            *(_DWORD *)buf = 136446466;
            v64 = "nw_endpoint_host_endpoint_matches_hostname";
            v65 = 2082;
            *(_QWORD *)v66 = v53;
            _os_log_impl(&dword_182FBE000, v49, v54, "%{public}s called with null self->hostname, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v53);
          goto LABEL_87;
        }
        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_endpoint_host_endpoint_matches_hostname";
          _os_log_impl(&dword_182FBE000, v49, v54, "%{public}s called with null self->hostname, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v49 = objc_claimAutoreleasedReturnValue();
        v58 = type;
        if (os_log_type_enabled(v49, type))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_endpoint_host_endpoint_matches_hostname";
          _os_log_impl(&dword_182FBE000, v49, v58, "%{public}s called with null self->hostname, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_87:
    if (v48)
      free(v48);
    goto LABEL_89;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v18 = (id)gLogObj;
  v19 = v11;
  v20 = objc_msgSend(v19, "type");

  *(_DWORD *)buf = 136446466;
  v64 = "nw_endpoint_host_endpoint_matches_hostname";
  v65 = 1024;
  *(_DWORD *)v66 = v20;
  LODWORD(v60) = 18;
  v21 = (const char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v61 = 0;
  if (__nwlog_fault(v21, &type, &v61))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        v24 = v19;
        v25 = objc_msgSend(v24, "type", buf, v60);

        *(_DWORD *)buf = 136446466;
        v64 = "nw_endpoint_host_endpoint_matches_hostname";
        v65 = 1024;
        *(_DWORD *)v66 = v25;
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s incorrect endpoint type %u", buf, 0x12u);
      }
    }
    else if (v61)
    {
      v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      v27 = type;
      v28 = os_log_type_enabled(v22, type);
      if (v26)
      {
        if (v28)
        {
          v29 = v19;
          v30 = objc_msgSend(v29, "type", buf, v60);

          *(_DWORD *)buf = 136446722;
          v64 = "nw_endpoint_host_endpoint_matches_hostname";
          v65 = 1024;
          *(_DWORD *)v66 = v30;
          v66[2] = 2082;
          *(_QWORD *)&v66[3] = v26;
          _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        free(v26);
        if (!v21)
          goto LABEL_36;
        goto LABEL_34;
      }
      if (v28)
      {
        v35 = v19;
        v36 = objc_msgSend(v35, "type", buf, v60);

        *(_DWORD *)buf = 136446466;
        v64 = "nw_endpoint_host_endpoint_matches_hostname";
        v65 = 1024;
        *(_DWORD *)v66 = v36;
        _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      v32 = type;
      if (os_log_type_enabled(v22, type))
      {
        v33 = v19;
        v34 = objc_msgSend(v33, "type", buf, v60);

        *(_DWORD *)buf = 136446466;
        v64 = "nw_endpoint_host_endpoint_matches_hostname";
        v65 = 1024;
        *(_DWORD *)v66 = v34;
        _os_log_impl(&dword_182FBE000, v22, v32, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
      }
    }

  }
  if (v21)
  {
LABEL_34:
    v37 = (char *)v21;
LABEL_35:
    free(v37);
  }
LABEL_36:
  v31 = 0;
LABEL_91:

  return v31;
}

void sub_1837D3C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_protocol_http_retry_create(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  char *v6;
  char v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  id v12;
  char v13;
  void *v14;
  id v15;
  unsigned __int8 *v16;
  id v17;
  unsigned __int8 *v18;
  void *v19;
  char v20;
  const void *v21;
  id v22;
  _BOOL8 result;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = (char *)malloc_type_calloc(1uLL, 0x2A8uLL, 0xEAFB8F1AuLL);
  if (!v6)
  {
    v24 = __nwlog_obj();
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v28 = "strict_calloc";
    v29 = 2048;
    v30 = 1;
    v31 = 2048;
    v32 = 680;
    v25 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v25);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v25);
  }
  bzero(v6, 0x2A8uLL);
  if (gLogDatapath)
  {
    v26 = __nwlog_obj();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v28 = "nw_protocol_http_retry_create";
      v29 = 2082;
      v30 = (uint64_t)(v6 + 114);
      v31 = 2080;
      v32 = (uint64_t)" ";
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }
  if (nw_protocol_http_retry_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http_retry_identifier::onceToken, &__block_literal_global_41545);
  *((_QWORD *)v6 + 2) = nw_protocol_http_retry_identifier::protocol_identifier;
  if (nw_protocol_http_retry_get_callbacks(void)::onceToken != -1)
    dispatch_once(&nw_protocol_http_retry_get_callbacks(void)::onceToken, &__block_literal_global_27_41546);
  *((_QWORD *)v6 + 3) = &nw_protocol_http_retry_get_callbacks(void)::protocol_callbacks;
  *((_QWORD *)v6 + 5) = v6;
  if (a3)
    a3 = os_retain(a3);
  v7 = v6[632];
  if ((v7 & 1) != 0)
  {
    v8 = (void *)*((_QWORD *)v6 + 78);
    if (v8)
    {
      os_release(v8);
      v7 = v6[632];
    }
  }
  *((_QWORD *)v6 + 78) = a3;
  v6[632] = v7 | 1;
  if (!a4)
  {
    v9 = 0;
    v10 = v6[648];
    if ((v10 & 1) == 0)
      goto LABEL_18;
LABEL_16:
    v11 = (void *)*((_QWORD *)v6 + 80);
    if (v11)
    {
      os_release(v11);
      v10 = v6[648];
    }
    goto LABEL_18;
  }
  v9 = os_retain(a4);
  v10 = v6[648];
  if ((v10 & 1) != 0)
    goto LABEL_16;
LABEL_18:
  *((_QWORD *)v6 + 80) = v9;
  v6[648] = v10 | 1;
  v12 = nw_parameters_copy_context(a4);
  v13 = v6[664];
  if ((v13 & 1) != 0)
  {
    v14 = (void *)*((_QWORD *)v6 + 82);
    if (v14)
    {
      os_release(v14);
      v13 = v6[664];
    }
  }
  *((_QWORD *)v6 + 82) = v12;
  v6[664] = v13 | 1;
  v6[676] = v6[676] & 0xFE | nw_parameters_get_server_mode(a4);
  if (nw_protocol_copy_http_retry_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_32_73077);
  v15 = (id)nw_protocol_copy_http_retry_definition_http_retry_definition;
  v16 = nw_parameters_copy_protocol_options_for_definition(a4, v15);
  *((_DWORD *)v6 + 168) = nw_http_retry_options_get_limit(v16);
  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  v17 = (id)nw_protocol_copy_http_client_definition_definition;
  v18 = nw_parameters_copy_protocol_options_for_definition(a4, v17);
  v19 = nw_http_client_options_copy_retry_with_h1_handler(v18);
  v20 = v6[616];
  if ((v20 & 1) != 0)
  {
    v21 = (const void *)*((_QWORD *)v6 + 76);
    if (v21)
    {
      _Block_release(v21);
      v20 = v6[616];
    }
  }
  *((_QWORD *)v6 + 25) = 0;
  *((_QWORD *)v6 + 76) = v19;
  v6[616] = v20 | 1;
  *((_QWORD *)v6 + 9) = v6 + 200;
  *((_QWORD *)v6 + 26) = v6 + 200;
  *((_QWORD *)v6 + 27) = 0;
  *((_QWORD *)v6 + 28) = v6 + 216;
  *((_QWORD *)v6 + 29) = 0;
  *((_QWORD *)v6 + 30) = v6 + 232;
  v6[340] = 2;
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  v22 = (id)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_plugin_metadata_set_callbacks((uint64_t)v6, v22, (uint64_t)nw_protocol_http_retry_create::$_0::__invoke, (uint64_t)nw_protocol_http_retry_create::$_1::__invoke);
  if (v22)
    os_release(v22);
  *((_QWORD *)v6 + 10) = v6 + 344;
  nw_protocol_plugin_reset_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_retry_create::$_2::__invoke);
  *((_QWORD *)v6 + 11) = v6 + 360;
  nw_protocol_plugin_retry_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_retry_create::$_3::__invoke, (uint64_t)nw_protocol_http_retry_create::$_4::__invoke, (uint64_t)nw_protocol_http_retry_create::$_5::__invoke, (uint64_t)nw_protocol_http_retry_create::$_6::__invoke);
  *((_QWORD *)v6 + 8) = v6 + 104;
  nw_protocol_plugin_name_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_retry_create::$_7::__invoke);
  if (v18)
    os_release(v18);
  if (v17)
    os_release(v17);
  if (v16)
    os_release(v16);
  if (v15)
    os_release(v15);
  return (BOOL)v6;
}

void nw_protocol_http_retry_create::$_0::__invoke(uint64_t a1, uint64_t a2, void *object, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  char *backtrace_string;
  _BOOL4 v22;
  char *v23;
  _BOOL4 v24;
  const char *v25;
  _BOOL4 v26;
  _BOOL4 v27;
  _BOOL4 v28;
  char *v29;
  _BOOL4 v30;
  NSObject *v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v35 = "operator()";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_99;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (!os_log_type_enabled(v14, type))
          goto LABEL_99;
        *(_DWORD *)buf = 136446210;
        v35 = "operator()";
        v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_98;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v22 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (!v22)
          goto LABEL_99;
        *(_DWORD *)buf = 136446210;
        v35 = "operator()";
        v16 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_98;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v35 = "operator()";
        v36 = 2082;
        v37 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
LABEL_99:
      if (v13)
        goto LABEL_100;
      return;
    }
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_99;
    *(_DWORD *)buf = 136446210;
    v35 = "operator()";
    v16 = "%{public}s called with null protocol";
    goto LABEL_98;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v35 = "operator()";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_99;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (!os_log_type_enabled(v14, type))
          goto LABEL_99;
        *(_DWORD *)buf = 136446210;
        v35 = "operator()";
        v16 = "%{public}s called with null http_retry, backtrace limit exceeded";
        goto LABEL_98;
      }
      v23 = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v24 = os_log_type_enabled(v14, type);
      if (!v23)
      {
        if (!v24)
          goto LABEL_99;
        *(_DWORD *)buf = 136446210;
        v35 = "operator()";
        v16 = "%{public}s called with null http_retry, no backtrace";
        goto LABEL_98;
      }
      if (!v24)
        goto LABEL_67;
      *(_DWORD *)buf = 136446466;
      v35 = "operator()";
      v36 = 2082;
      v37 = v23;
      v25 = "%{public}s called with null http_retry, dumping backtrace:%{public}s";
      goto LABEL_66;
    }
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_99;
    *(_DWORD *)buf = 136446210;
    v35 = "operator()";
    v16 = "%{public}s called with null http_retry";
LABEL_98:
    _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
    goto LABEL_99;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v35 = "operator()";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_99;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (!os_log_type_enabled(v14, type))
          goto LABEL_99;
        *(_DWORD *)buf = 136446210;
        v35 = "operator()";
        v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_98;
      }
      v23 = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v26 = os_log_type_enabled(v14, type);
      if (!v23)
      {
        if (!v26)
          goto LABEL_99;
        *(_DWORD *)buf = 136446210;
        v35 = "operator()";
        v16 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_98;
      }
      if (!v26)
        goto LABEL_67;
      *(_DWORD *)buf = 136446466;
      v35 = "operator()";
      v36 = 2082;
      v37 = v23;
      v25 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_66;
    }
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_99;
    *(_DWORD *)buf = 136446210;
    v35 = "operator()";
    v16 = "%{public}s called with null other_protocol";
    goto LABEL_98;
  }
  if (!object)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v35 = "operator()";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_99;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_99;
      *(_DWORD *)buf = 136446210;
      v35 = "operator()";
      v16 = "%{public}s called with null metadata";
      goto LABEL_98;
    }
    if (!v32)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_99;
      *(_DWORD *)buf = 136446210;
      v35 = "operator()";
      v16 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_98;
    }
    v23 = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (!v27)
        goto LABEL_99;
      *(_DWORD *)buf = 136446210;
      v35 = "operator()";
      v16 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_98;
    }
    if (!v27)
      goto LABEL_67;
    *(_DWORD *)buf = 136446466;
    v35 = "operator()";
    v36 = 2082;
    v37 = v23;
    v25 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_66:
    _os_log_impl(&dword_182FBE000, v14, v15, v25, buf, 0x16u);
    goto LABEL_67;
  }
  if (a5)
  {
    if (*(_QWORD *)(v5 + 576))
    {
      v8 = os_retain(object);
      v9 = *(_BYTE *)(v5 + 600);
      if ((v9 & 1) != 0)
      {
        v10 = *(void **)(v5 + 592);
        if (v10)
        {
          os_release(v10);
          v9 = *(_BYTE *)(v5 + 600);
        }
      }
      *(_QWORD *)(v5 + 592) = v8;
      *(_BYTE *)(v5 + 600) = v9 | 1;
      if ((*(_BYTE *)(v5 + 676) & 8) != 0)
      {
        (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 3, object);
        return;
      }
      if ((*(_BYTE *)(v5 + 676) & 5) == 0)
      {
        if (*(_DWORD *)(v5 + 672))
        {
          v11 = *(void **)(v5 + 576);
          if (v11)
          {
            v12 = nw_http_metadata_copy_request(v11);
            if (v12)
              os_release(v12);
          }
        }
      }
      if ((*(_BYTE *)(v5 + 198) & 1) == 0 && gLogDatapath)
      {
        v31 = __nwlog_obj();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v35 = "nw_http_retry_process";
          v36 = 2082;
          v37 = (char *)(v5 + 114);
          v38 = 2080;
          v39 = " ";
          _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sCannot retry request on stream", buf, 0x20u);
        }
      }
      goto LABEL_14;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_http_retry_process";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (__nwlog_fault(v17, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (!os_log_type_enabled(v18, type))
          goto LABEL_104;
        *(_DWORD *)buf = 136446210;
        v35 = "nw_http_retry_process";
        v20 = "%{public}s called with null http_retry->request_metadata";
        goto LABEL_103;
      }
      if (!v32)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (!os_log_type_enabled(v18, type))
          goto LABEL_104;
        *(_DWORD *)buf = 136446210;
        v35 = "nw_http_retry_process";
        v20 = "%{public}s called with null http_retry->request_metadata, backtrace limit exceeded";
        goto LABEL_103;
      }
      v29 = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v30 = os_log_type_enabled(v18, type);
      if (v29)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_http_retry_process";
          v36 = 2082;
          v37 = v29;
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null http_retry->request_metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v29);
        goto LABEL_104;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_http_retry_process";
        v20 = "%{public}s called with null http_retry->request_metadata, no backtrace";
LABEL_103:
        _os_log_impl(&dword_182FBE000, v18, v19, v20, buf, 0xCu);
      }
    }
LABEL_104:
    if (v17)
      free(v17);
LABEL_14:
    (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, object);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v35 = "operator()";
  v13 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v32 = 0;
  if (!__nwlog_fault(v13, &type, &v32))
    goto LABEL_99;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_99;
    *(_DWORD *)buf = 136446210;
    v35 = "operator()";
    v16 = "%{public}s called with null completion";
    goto LABEL_98;
  }
  if (!v32)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_99;
    *(_DWORD *)buf = 136446210;
    v35 = "operator()";
    v16 = "%{public}s called with null completion, backtrace limit exceeded";
    goto LABEL_98;
  }
  v23 = (char *)__nw_create_backtrace_string();
  v14 = __nwlog_obj();
  v15 = type;
  v28 = os_log_type_enabled(v14, type);
  if (!v23)
  {
    if (!v28)
      goto LABEL_99;
    *(_DWORD *)buf = 136446210;
    v35 = "operator()";
    v16 = "%{public}s called with null completion, no backtrace";
    goto LABEL_98;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    v35 = "operator()";
    v36 = 2082;
    v37 = v23;
    v25 = "%{public}s called with null completion, dumping backtrace:%{public}s";
    goto LABEL_66;
  }
LABEL_67:
  free(v23);
  if (v13)
LABEL_100:
    free(v13);
}

void nw_protocol_http_retry_create::$_1::__invoke(uint64_t a1, int a2, void *object, int a4, uint64_t a5)
{
  uint64_t v5;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *backtrace_string;
  _BOOL4 v18;
  char *v19;
  _BOOL4 v20;
  const char *v21;
  _BOOL4 v22;
  _BOOL4 v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "operator()";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v13, &type, &v24))
      goto LABEL_65;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v27 = "operator()";
      v16 = "%{public}s called with null protocol";
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "operator()";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_65:
        if (!v13)
          return;
        goto LABEL_66;
      }
      if (!v18)
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v27 = "operator()";
      v16 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v27 = "operator()";
      v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_64;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "operator()";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v13, &type, &v24))
      goto LABEL_65;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (!os_log_type_enabled(v14, type))
          goto LABEL_65;
        *(_DWORD *)buf = 136446210;
        v27 = "operator()";
        v16 = "%{public}s called with null http_retry, backtrace limit exceeded";
        goto LABEL_64;
      }
      v19 = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v20 = os_log_type_enabled(v14, type);
      if (!v19)
      {
        if (!v20)
          goto LABEL_65;
        *(_DWORD *)buf = 136446210;
        v27 = "operator()";
        v16 = "%{public}s called with null http_retry, no backtrace";
        goto LABEL_64;
      }
      if (!v20)
        goto LABEL_46;
      *(_DWORD *)buf = 136446466;
      v27 = "operator()";
      v28 = 2082;
      v29 = v19;
      v21 = "%{public}s called with null http_retry, dumping backtrace:%{public}s";
      goto LABEL_45;
    }
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_65;
    *(_DWORD *)buf = 136446210;
    v27 = "operator()";
    v16 = "%{public}s called with null http_retry";
LABEL_64:
    _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
    goto LABEL_65;
  }
  if (!object)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "operator()";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v13, &type, &v24))
      goto LABEL_65;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v27 = "operator()";
      v16 = "%{public}s called with null metadata";
      goto LABEL_64;
    }
    if (!v24)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v27 = "operator()";
      v16 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_64;
    }
    v19 = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v22 = os_log_type_enabled(v14, type);
    if (!v19)
    {
      if (!v22)
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v27 = "operator()";
      v16 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_64;
    }
    if (!v22)
      goto LABEL_46;
    *(_DWORD *)buf = 136446466;
    v27 = "operator()";
    v28 = 2082;
    v29 = v19;
    v21 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_45:
    _os_log_impl(&dword_182FBE000, v14, v15, v21, buf, 0x16u);
    goto LABEL_46;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "operator()";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v13, &type, &v24))
      goto LABEL_65;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v27 = "operator()";
      v16 = "%{public}s called with null completion";
      goto LABEL_64;
    }
    if (!v24)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v27 = "operator()";
      v16 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_64;
    }
    v19 = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v23 = os_log_type_enabled(v14, type);
    if (!v19)
    {
      if (!v23)
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v27 = "operator()";
      v16 = "%{public}s called with null completion, no backtrace";
      goto LABEL_64;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v27 = "operator()";
      v28 = 2082;
      v29 = v19;
      v21 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_45;
    }
LABEL_46:
    free(v19);
    if (!v13)
      return;
LABEL_66:
    free(v13);
    return;
  }
  v9 = os_retain(object);
  v10 = *(_BYTE *)(v5 + 584);
  if ((v10 & 1) != 0)
  {
    v11 = *(void **)(v5 + 576);
    if (v11)
    {
      os_release(v11);
      v10 = *(_BYTE *)(v5 + 584);
    }
  }
  *(_QWORD *)(v5 + 576) = v9;
  *(_BYTE *)(v5 + 584) = v10 | 1;
  if (a4)
    v12 = 0;
  else
    v12 = 2;
  *(_BYTE *)(v5 + 676) = *(_BYTE *)(v5 + 676) & 0xFD | v12;
  (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, object);
}

void nw_protocol_http_retry_create::$_2::__invoke(nw_protocol_http_retry_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v3;
  char v4;
  void *v5;
  char v6;
  void *v7;
  unsigned __int8 *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char *v15;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "operator()";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_39;
      *(_DWORD *)buf = 136446210;
      v20 = "operator()";
      v12 = "%{public}s called with null protocol";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "operator()";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_39:
        if (!v9)
          return;
        goto LABEL_40;
      }
      if (!v14)
        goto LABEL_39;
      *(_DWORD *)buf = 136446210;
      v20 = "operator()";
      v12 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_39;
      *(_DWORD *)buf = 136446210;
      v20 = "operator()";
      v12 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_38:
    _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
    goto LABEL_39;
  }
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(_BYTE *)(v3 + 584);
    if ((v4 & 1) != 0)
    {
      v5 = *(void **)(v3 + 576);
      if (v5)
      {
        os_release(v5);
        v4 = *(_BYTE *)(v3 + 584);
      }
    }
    *(_QWORD *)(v3 + 576) = 0;
    *(_BYTE *)(v3 + 584) = v4 | 1;
    v6 = *(_BYTE *)(v3 + 600);
    if ((v6 & 1) != 0)
    {
      v7 = *(void **)(v3 + 592);
      if (v7)
      {
        os_release(v7);
        v6 = *(_BYTE *)(v3 + 600);
      }
    }
    *(_QWORD *)(v3 + 592) = 0;
    *(_BYTE *)(v3 + 600) = v6 | 1;
    v8 = nw_parameters_copy_protocol_options_legacy(*(void **)(v3 + 640), (nw_protocol *)v3);
    *(_DWORD *)(v3 + 672) = nw_http_retry_options_get_limit(v8);
    *(_BYTE *)(v3 + 676) &= 0xF9u;
    if (v8)
      os_release(v8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v20 = "operator()";
  v9 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (!__nwlog_fault(v9, &type, &v17))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v10 = __nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type))
      goto LABEL_39;
    *(_DWORD *)buf = 136446210;
    v20 = "operator()";
    v12 = "%{public}s called with null http_retry";
    goto LABEL_38;
  }
  if (!v17)
  {
    v10 = __nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type))
      goto LABEL_39;
    *(_DWORD *)buf = 136446210;
    v20 = "operator()";
    v12 = "%{public}s called with null http_retry, backtrace limit exceeded";
    goto LABEL_38;
  }
  v15 = (char *)__nw_create_backtrace_string();
  v10 = __nwlog_obj();
  v11 = type;
  v16 = os_log_type_enabled(v10, type);
  if (!v15)
  {
    if (!v16)
      goto LABEL_39;
    *(_DWORD *)buf = 136446210;
    v20 = "operator()";
    v12 = "%{public}s called with null http_retry, no backtrace";
    goto LABEL_38;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v20 = "operator()";
    v21 = 2082;
    v22 = v15;
    _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null http_retry, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v15);
  if (v9)
LABEL_40:
    free(v9);
}

uint64_t nw_protocol_http_retry_create::$_3::__invoke(nw_protocol_http_retry_create::$_3 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  char has_method;
  id v8;
  int v9;
  void *v10;
  NSObject *v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  NSObject *v21;
  const char *v22;
  char *v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *parameters;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  id *metadata_for_request;
  uint64_t v34;
  void *v35;
  void *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  const char *v40;
  char *backtrace_string;
  _BOOL4 v42;
  const char *v43;
  _BOOL4 v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  const char *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  const char *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  const char *v56;
  char *v57;
  _BOOL4 v58;
  char *v59;
  _BOOL4 v60;
  char *v61;
  _BOOL4 v62;
  _QWORD v63[5];
  os_log_type_t v64[8];
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t *);
  void *v67;
  os_log_type_t *v68;
  uint64_t v69;
  os_log_type_t type[8];
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  void (*v74)(uint64_t);
  void *object;
  char v76;
  _BYTE v77[24];
  void *v78;
  _BYTE *v79;
  os_log_type_t *v80;
  uint64_t v81;
  _BYTE buf[24];
  uint64_t v83;
  _BYTE v84[20];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v37 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v77[0] = 0;
    if (!__nwlog_fault(v37, type, v77))
      goto LABEL_98;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v77[0])
      {
        v38 = __nwlog_obj();
        v39 = type[0];
        if (!os_log_type_enabled(v38, type[0]))
          goto LABEL_98;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v40 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_97;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v38 = __nwlog_obj();
      v39 = type[0];
      v42 = os_log_type_enabled(v38, type[0]);
      if (!backtrace_string)
      {
        if (!v42)
          goto LABEL_98;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v40 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_97;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "operator()";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v43 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_87:
        _os_log_impl(&dword_182FBE000, v38, v39, v43, buf, 0x16u);
      }
LABEL_88:
      free(backtrace_string);
      goto LABEL_98;
    }
    v38 = __nwlog_obj();
    v39 = type[0];
    if (!os_log_type_enabled(v38, type[0]))
      goto LABEL_98;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v40 = "%{public}s called with null protocol";
LABEL_97:
    _os_log_impl(&dword_182FBE000, v38, v39, v40, buf, 0xCu);
LABEL_98:
    if (v37)
      free(v37);
    return 0;
  }
  v3 = *((_QWORD *)this + 5);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v37 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v77[0] = 0;
    if (!__nwlog_fault(v37, type, v77))
      goto LABEL_98;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v38 = __nwlog_obj();
      v39 = type[0];
      if (!os_log_type_enabled(v38, type[0]))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v40 = "%{public}s called with null http_retry";
      goto LABEL_97;
    }
    if (!v77[0])
    {
      v38 = __nwlog_obj();
      v39 = type[0];
      if (!os_log_type_enabled(v38, type[0]))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v40 = "%{public}s called with null http_retry, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v38 = __nwlog_obj();
    v39 = type[0];
    v44 = os_log_type_enabled(v38, type[0]);
    if (backtrace_string)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "operator()";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v43 = "%{public}s called with null http_retry, dumping backtrace:%{public}s";
        goto LABEL_87;
      }
      goto LABEL_88;
    }
    if (!v44)
      goto LABEL_98;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v40 = "%{public}s called with null http_retry, no backtrace";
    goto LABEL_97;
  }
  if ((*(_BYTE *)(v3 + 676) & 8) == 0)
  {
    if ((*(_BYTE *)(v3 + 676) & 5) == 0 && *(_DWORD *)(v3 + 672))
    {
      result = *(_QWORD *)(v3 + 576);
      if (!result)
        return result;
      v5 = *(_QWORD *)(v3 + 592);
      result = (uint64_t)nw_http_metadata_copy_request((void *)result);
      if (v5 || !result)
      {
        if (!result)
          return result;
      }
      else
      {
        v6 = (id)result;
        has_method = _nw_http_request_has_method((uint64_t)v6);

        if ((has_method & 1) != 0
          || (v8 = v6, v9 = _nw_http_request_has_method((uint64_t)v8), v8, v9))
        {
          if ((*(_BYTE *)(v3 + 198) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v21 = __nwlog_obj();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_http_retry_can_retry";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v3 + 114;
                *(_WORD *)&buf[22] = 2080;
                v83 = (uint64_t)" ";
                v22 = "%{public}s %{public}s%sidempotent request has not received any response, able to retry";
                goto LABEL_106;
              }
            }
          }
LABEL_14:
          os_release(v6);
          v10 = *(void **)(v3 + 576);
          if (v10)
          {
            if ((*(_BYTE *)(v3 + 198) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v11 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
              {
                v12 = *(_DWORD *)(v3 + 672);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http_retry_reissue";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v3 + 114;
                *(_WORD *)&buf[22] = 2080;
                v83 = (uint64_t)" ";
                *(_WORD *)v84 = 1024;
                *(_DWORD *)&v84[2] = v12;
                _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sretrying, remaining limit %u", buf, 0x26u);
              }
            }
            v13 = *(_DWORD *)(v3 + 672);
            *(_DWORD *)(v3 + 672) = v13 - 1;
            if (v13)
            {
LABEL_49:
              *(_BYTE *)(v3 + 676) |= 8u;
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = buf;
              *(_QWORD *)&buf[16] = 0x3802000000;
              v83 = (uint64_t)__Block_byref_object_copy__41589;
              *(_QWORD *)v84 = __Block_byref_object_dispose__41590;
              parameters = (void *)nw_protocol_get_parameters(v3);
              if (parameters)
                parameters = os_retain(parameters);
              *(_QWORD *)&v84[8] = parameters;
              v84[16] |= 1u;
              if (*(_DWORD *)(v3 + 536) == 43)
              {
                v29 = *(_QWORD *)(v3 + 608);
                if (!v29
                  || (*(_QWORD *)type = MEMORY[0x1E0C809B0],
                      v71 = 0x40000000,
                      v72 = (uint64_t)___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke,
                      v73 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_13_41591,
                      v74 = (void (*)(uint64_t))v3,
                      ((*(uint64_t (**)(uint64_t, _QWORD, os_log_type_t *))(v29 + 16))(v29, *(_QWORD *)(*(_QWORD *)&buf[8] + 40), type) & 1) == 0))
                {
                  nw_protocol_error(*(_QWORD **)(v3 + 48), v3);
                  nw_protocol_disconnected(*(_QWORD **)(v3 + 48), v3);
                }
LABEL_65:
                *(_BYTE *)(v3 + 676) &= ~8u;
LABEL_66:
                _Block_object_dispose(buf, 8);
                if ((v84[16] & 1) != 0)
                {
                  if (*(_QWORD *)&v84[8])
                    os_release(*(void **)&v84[8]);
                }
                return 1;
              }
              nw_http_messaging_options_create_transaction_in_parameters(*(void **)(*(_QWORD *)&buf[8] + 40), v3, 3);
              nw_protocol_plugin_metadata_prepare_for_reissue(v3 + 200);
              *(_QWORD *)type = 0;
              v71 = (uint64_t)type;
              v72 = 0x3802000000;
              v73 = __Block_byref_object_copy__14_41592;
              v74 = __Block_byref_object_dispose__15_41593;
              v30 = nw_http_metadata_copy_request(v10);
              if (v30)
              {
                v31 = v30;
                v32 = (void *)_nw_http_fields_copy((uint64_t)v31);

                metadata_for_request = nw_http_create_metadata_for_request(v32);
                if (v32)
                  os_release(v32);
                os_release(v31);
                goto LABEL_59;
              }
              __nwlog_obj();
              *(_DWORD *)v77 = 136446210;
              *(_QWORD *)&v77[4] = "nw_http_retry_copy_metadata";
              v49 = (char *)_os_log_send_and_compose_impl();
              v64[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v63[0]) = 0;
              if (__nwlog_fault(v49, v64, v63))
              {
                if (v64[0] == OS_LOG_TYPE_FAULT)
                {
                  v50 = __nwlog_obj();
                  v51 = v64[0];
                  if (os_log_type_enabled(v50, v64[0]))
                  {
                    *(_DWORD *)v77 = 136446210;
                    *(_QWORD *)&v77[4] = "nw_http_retry_copy_metadata";
                    v52 = "%{public}s called with null orig_request";
LABEL_143:
                    _os_log_impl(&dword_182FBE000, v50, v51, v52, v77, 0xCu);
                  }
                }
                else if (LOBYTE(v63[0]))
                {
                  v59 = (char *)__nw_create_backtrace_string();
                  v50 = __nwlog_obj();
                  v51 = v64[0];
                  v60 = os_log_type_enabled(v50, v64[0]);
                  if (v59)
                  {
                    if (v60)
                    {
                      *(_DWORD *)v77 = 136446466;
                      *(_QWORD *)&v77[4] = "nw_http_retry_copy_metadata";
                      *(_WORD *)&v77[12] = 2082;
                      *(_QWORD *)&v77[14] = v59;
                      _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null orig_request, dumping backtrace:%{public}s", v77, 0x16u);
                    }
                    free(v59);
                    goto LABEL_144;
                  }
                  if (v60)
                  {
                    *(_DWORD *)v77 = 136446210;
                    *(_QWORD *)&v77[4] = "nw_http_retry_copy_metadata";
                    v52 = "%{public}s called with null orig_request, no backtrace";
                    goto LABEL_143;
                  }
                }
                else
                {
                  v50 = __nwlog_obj();
                  v51 = v64[0];
                  if (os_log_type_enabled(v50, v64[0]))
                  {
                    *(_DWORD *)v77 = 136446210;
                    *(_QWORD *)&v77[4] = "nw_http_retry_copy_metadata";
                    v52 = "%{public}s called with null orig_request, backtrace limit exceeded";
                    goto LABEL_143;
                  }
                }
              }
LABEL_144:
              if (v49)
                free(v49);
              metadata_for_request = 0;
LABEL_59:
              object = metadata_for_request;
              v76 |= 1u;
              v34 = *(_QWORD *)(v71 + 40);
              if (v34)
              {
                v35 = *(void **)(v3 + 656);
                v36 = *(void **)(v3 + 624);
                *(_QWORD *)v64 = MEMORY[0x1E0C809B0];
                v65 = 0x40000000;
                v66 = ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_16;
                v67 = &unk_1E14A1E60;
                v68 = type;
                v69 = v3;
                *(_QWORD *)v77 = MEMORY[0x1E0C809B0];
                *(_QWORD *)&v77[8] = 0x40000000;
                *(_QWORD *)&v77[16] = ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_3;
                v78 = &unk_1E14A1EB0;
                v80 = type;
                v81 = v3;
                v79 = buf;
                v63[0] = MEMORY[0x1E0C809B0];
                v63[1] = 0x40000000;
                v63[2] = ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_5;
                v63[3] = &__block_descriptor_tmp_25_41606;
                v63[4] = v3;
                nw_protocol_plugin_retry_reissue_output_frames(v3 + 360, v3, v35, v36, 0, 2, 1, v64, v77, (uint64_t)v63);
                goto LABEL_61;
              }
              __nwlog_obj();
              *(_DWORD *)v77 = 136446210;
              *(_QWORD *)&v77[4] = "nw_http_retry_reissue";
              v53 = (char *)_os_log_send_and_compose_impl();
              v64[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v63[0]) = 0;
              if (__nwlog_fault(v53, v64, v63))
              {
                if (v64[0] == OS_LOG_TYPE_FAULT)
                {
                  v54 = __nwlog_obj();
                  v55 = v64[0];
                  if (!os_log_type_enabled(v54, v64[0]))
                    goto LABEL_150;
                  *(_DWORD *)v77 = 136446210;
                  *(_QWORD *)&v77[4] = "nw_http_retry_reissue";
                  v56 = "%{public}s called with null request_metadata";
                  goto LABEL_149;
                }
                if (!LOBYTE(v63[0]))
                {
                  v54 = __nwlog_obj();
                  v55 = v64[0];
                  if (!os_log_type_enabled(v54, v64[0]))
                    goto LABEL_150;
                  *(_DWORD *)v77 = 136446210;
                  *(_QWORD *)&v77[4] = "nw_http_retry_reissue";
                  v56 = "%{public}s called with null request_metadata, backtrace limit exceeded";
                  goto LABEL_149;
                }
                v61 = (char *)__nw_create_backtrace_string();
                v54 = __nwlog_obj();
                v55 = v64[0];
                v62 = os_log_type_enabled(v54, v64[0]);
                if (v61)
                {
                  if (v62)
                  {
                    *(_DWORD *)v77 = 136446466;
                    *(_QWORD *)&v77[4] = "nw_http_retry_reissue";
                    *(_WORD *)&v77[12] = 2082;
                    *(_QWORD *)&v77[14] = v61;
                    _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s called with null request_metadata, dumping backtrace:%{public}s", v77, 0x16u);
                  }
                  free(v61);
                  goto LABEL_150;
                }
                if (v62)
                {
                  *(_DWORD *)v77 = 136446210;
                  *(_QWORD *)&v77[4] = "nw_http_retry_reissue";
                  v56 = "%{public}s called with null request_metadata, no backtrace";
LABEL_149:
                  _os_log_impl(&dword_182FBE000, v54, v55, v56, v77, 0xCu);
                }
              }
LABEL_150:
              if (v53)
                free(v53);
LABEL_61:
              _Block_object_dispose(type, 8);
              if ((v76 & 1) != 0 && object)
                os_release(object);
              if (!v34)
                goto LABEL_66;
              goto LABEL_65;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v14 = *(unsigned int *)(v3 + 672);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http_retry_reissue";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http_retry->limit";
            *(_WORD *)&buf[22] = 2048;
            v83 = 1;
            *(_WORD *)v84 = 2048;
            *(_QWORD *)&v84[2] = v14;
            v15 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            v77[0] = 0;
            if (__nwlog_fault(v15, type, v77))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v16 = gLogObj;
                v17 = type[0];
                if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
                {
                  v18 = *(unsigned int *)(v3 + 672);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http_retry_reissue";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http_retry->limit";
                  *(_WORD *)&buf[22] = 2048;
                  v83 = 1;
                  *(_WORD *)v84 = 2048;
                  *(_QWORD *)&v84[2] = v18;
                  v19 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_45:
                  _os_log_impl(&dword_182FBE000, v16, v17, v19, buf, 0x2Au);
                }
              }
              else if (v77[0])
              {
                v23 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v16 = gLogObj;
                v17 = type[0];
                v24 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
                if (v23)
                {
                  if (v24)
                  {
                    v25 = *(unsigned int *)(v3 + 672);
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_http_retry_reissue";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http_retry->limit";
                    *(_WORD *)&buf[22] = 2048;
                    v83 = 1;
                    *(_WORD *)v84 = 2048;
                    *(_QWORD *)&v84[2] = v25;
                    *(_WORD *)&v84[10] = 2082;
                    *(_QWORD *)&v84[12] = v23;
                    _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v23);
                  goto LABEL_46;
                }
                if (v24)
                {
                  v27 = *(unsigned int *)(v3 + 672);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http_retry_reissue";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http_retry->limit";
                  *(_WORD *)&buf[22] = 2048;
                  v83 = 1;
                  *(_WORD *)v84 = 2048;
                  *(_QWORD *)&v84[2] = v27;
                  v19 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                  goto LABEL_45;
                }
              }
              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v16 = gLogObj;
                v17 = type[0];
                if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
                {
                  v26 = *(unsigned int *)(v3 + 672);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http_retry_reissue";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http_retry->limit";
                  *(_WORD *)&buf[22] = 2048;
                  v83 = 1;
                  *(_WORD *)v84 = 2048;
                  *(_QWORD *)&v84[2] = v26;
                  v19 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_45;
                }
              }
            }
LABEL_46:
            if (v15)
              free(v15);
            *(_DWORD *)(v3 + 672) = 0;
            goto LABEL_49;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_retry_reissue";
          v45 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          v77[0] = 0;
          if (__nwlog_fault(v45, type, v77))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v46 = __nwlog_obj();
              v47 = type[0];
              if (!os_log_type_enabled(v46, type[0]))
                goto LABEL_135;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_retry_reissue";
              v48 = "%{public}s called with null _request_metadata";
              goto LABEL_134;
            }
            if (!v77[0])
            {
              v46 = __nwlog_obj();
              v47 = type[0];
              if (!os_log_type_enabled(v46, type[0]))
                goto LABEL_135;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_retry_reissue";
              v48 = "%{public}s called with null _request_metadata, backtrace limit exceeded";
              goto LABEL_134;
            }
            v57 = (char *)__nw_create_backtrace_string();
            v46 = __nwlog_obj();
            v47 = type[0];
            v58 = os_log_type_enabled(v46, type[0]);
            if (v57)
            {
              if (v58)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http_retry_reissue";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v57;
                _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null _request_metadata, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v57);
              goto LABEL_135;
            }
            if (v58)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_retry_reissue";
              v48 = "%{public}s called with null _request_metadata, no backtrace";
LABEL_134:
              _os_log_impl(&dword_182FBE000, v46, v47, v48, buf, 0xCu);
            }
          }
LABEL_135:
          if (v45)
            free(v45);
          return 1;
        }
        v20 = *(_DWORD *)(v3 + 536);
        if (v20 == 35)
        {
          if ((*(_BYTE *)(v3 + 198) & 1) != 0)
            goto LABEL_14;
          if (!gLogDatapath)
            goto LABEL_14;
          v21 = __nwlog_obj();
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            goto LABEL_14;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http_retry_can_retry";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v3 + 114;
          *(_WORD *)&buf[22] = 2080;
          v83 = (uint64_t)" ";
          v22 = "%{public}s %{public}s%srequest received no response and EAGAIN, able to retry";
LABEL_106:
          _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, v22, buf, 0x20u);
          goto LABEL_14;
        }
        if (v20 == 43)
        {
          if ((*(_BYTE *)(v3 + 198) & 1) != 0)
            goto LABEL_14;
          if (!gLogDatapath)
            goto LABEL_14;
          v21 = __nwlog_obj();
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            goto LABEL_14;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http_retry_can_retry";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v3 + 114;
          *(_WORD *)&buf[22] = 2080;
          v83 = (uint64_t)" ";
          v22 = "%{public}s %{public}s%srequest received no response, should retry using HTTP/1.1";
          goto LABEL_106;
        }
        result = (uint64_t)v8;
      }
      os_release((void *)result);
      return 0;
    }
    return 0;
  }
  return 1;
}

uint64_t nw_protocol_http_retry_create::$_4::__invoke(nw_protocol_http_retry_create::$_4 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_retry_create::$_5::__invoke(nw_protocol_http_retry_create::$_5 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v3;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  const char *v11;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v3 = *((_QWORD *)this + 5);
    if (v3)
    {
      *(_BYTE *)(v3 + 676) |= 4u;
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "operator()";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "operator()";
        v8 = "%{public}s called with null http_retry";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v13)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "operator()";
        v8 = "%{public}s called with null http_retry, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v12 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "operator()";
        v8 = "%{public}s called with null http_retry, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v16 = "operator()";
      v17 = 2082;
      v18 = backtrace_string;
      v11 = "%{public}s called with null http_retry, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "operator()";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v13)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "operator()";
        v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "operator()";
        v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v16 = "operator()";
      v17 = 2082;
      v18 = backtrace_string;
      v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v6, v7, v11, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v6 = __nwlog_obj();
  v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)buf = 136446210;
    v16 = "operator()";
    v8 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
  }
LABEL_32:
  if (v5)
    free(v5);
  return 0;
}

uint64_t nw_protocol_http_retry_create::$_6::__invoke(nw_protocol_http_retry_create::$_6 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_retry_create::$_7::__invoke(nw_protocol_http_retry_create::$_7 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t __Block_byref_object_copy__41589(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__41590(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 572) |= 0x10u;
  return result;
}

uint64_t __Block_byref_object_copy__14_41592(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__15_41593(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_16(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v6[2];
  uint64_t (*v7)(uint64_t, uint64_t);
  void *v8;
  __int128 v9;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v7 = ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_2;
  v8 = &unk_1E14A1E38;
  v9 = *(_OWORD *)(a1 + 32);
  v2 = *a2;
  do
  {
    if (!v2)
      break;
    v3 = *(_QWORD *)(v2 + 32);
    v4 = ((uint64_t (*)(_QWORD *))v7)(v6);
    v2 = v3;
  }
  while ((v4 & 1) != 0);
  return 1;
}

uint64_t ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_3(_QWORD *a1)
{
  id v2;
  char *identifier;
  uint64_t v4;
  unsigned __int8 *v5;
  void *v6;
  _BOOL8 v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  v2 = (id)nw_protocol_copy_http_client_definition_definition;
  identifier = nw_protocol_definition_get_identifier(v2);
  if (v2)
    os_release(v2);
  v4 = a1[6];
  do
  {
    v4 = *(_QWORD *)(v4 + 48);
    if (!v4)
      return 1;
  }
  while (!nw_protocols_are_equal(*(_QWORD **)(v4 + 16), identifier));
  v5 = nw_parameters_copy_protocol_options_legacy(*(void **)(*(_QWORD *)(a1[4] + 8) + 40), (nw_protocol *)v4);
  v6 = nw_http_client_options_copy_resend_handler(v5);
  v7 = v6 == 0;
  if (v6)
  {
    v8 = v6;
    v9 = a1[5];
    v10 = *(_QWORD *)(a1[4] + 8);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_4;
    v12[3] = &unk_1E14A1E88;
    v12[4] = v9;
    (*((void (**)(void *, _QWORD, _QWORD *))v6 + 2))(v6, *(_QWORD *)(v10 + 40), v12);
    _Block_release(v8);
  }
  if (v5)
    os_release(v5);
  return v7;
}

void ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_5(uint64_t a1)
{
  nw_http_retry_destroy(*(_QWORD *)(a1 + 32));
}

void nw_http_retry_destroy(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  const void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  int v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v13 = 136446722;
        v14 = "nw_http_retry_destroy";
        v15 = 2082;
        v16 = a1 + 114;
        v17 = 2080;
        v18 = " ";
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v13, 0x20u);
      }
    }
  }
  if (*(_DWORD *)(a1 + 568))
  {
    *(_BYTE *)(a1 + 572) |= 0x40u;
    if ((*(_BYTE *)(a1 + 198) & 1) == 0 && gLogDatapath)
    {
      v2 = __nwlog_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        v13 = 136446722;
        v14 = "nw_http_retry_destroy";
        v15 = 2082;
        v16 = a1 + 114;
        v17 = 2080;
        v18 = " ";
        _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sdeferring destroy because the request is being reissued", (uint8_t *)&v13, 0x20u);
      }
    }
  }
  else
  {
    if ((*(_BYTE *)(a1 + 664) & 1) != 0)
    {
      v3 = *(void **)(a1 + 656);
      if (v3)
        os_release(v3);
    }
    *(_QWORD *)(a1 + 656) = 0;
    if ((*(_BYTE *)(a1 + 648) & 1) != 0)
    {
      v4 = *(void **)(a1 + 640);
      if (v4)
        os_release(v4);
    }
    *(_QWORD *)(a1 + 640) = 0;
    if ((*(_BYTE *)(a1 + 632) & 1) != 0)
    {
      v5 = *(void **)(a1 + 624);
      if (v5)
        os_release(v5);
    }
    *(_QWORD *)(a1 + 624) = 0;
    if ((*(_BYTE *)(a1 + 616) & 1) != 0)
    {
      v6 = *(const void **)(a1 + 608);
      if (v6)
        _Block_release(v6);
    }
    *(_QWORD *)(a1 + 608) = 0;
    if ((*(_BYTE *)(a1 + 600) & 1) != 0)
    {
      v7 = *(void **)(a1 + 592);
      if (v7)
        os_release(v7);
    }
    *(_QWORD *)(a1 + 592) = 0;
    if ((*(_BYTE *)(a1 + 584) & 1) != 0)
    {
      v8 = *(void **)(a1 + 576);
      if (v8)
        os_release(v8);
    }
    *(_QWORD *)(a1 + 576) = 0;
    nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(a1 + 360));
    if ((*(_BYTE *)(a1 + 288) & 1) != 0)
    {
      v9 = *(void **)(a1 + 280);
      if (v9)
        os_release(v9);
    }
    *(_QWORD *)(a1 + 280) = 0;
    if ((*(_BYTE *)(a1 + 272) & 1) != 0)
    {
      v10 = *(void **)(a1 + 264);
      if (v10)
        os_release(v10);
    }
    *(_QWORD *)(a1 + 264) = 0;
    if ((*(_BYTE *)(a1 + 256) & 1) != 0)
    {
      v11 = *(void **)(a1 + 248);
      if (v11)
        os_release(v11);
    }
    free((void *)a1);
  }
}

void ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_4(uint64_t a1, nw_content_context_t context)
{
  nw_content_context_set_metadata_for_protocol(context, *(nw_protocol_metadata_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

uint64_t ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_2(uint64_t a1, uint64_t a2)
{
  nw_frame_set_metadata(a2, *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), 0, (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 676) & 2) == 0);
  return 1;
}

void ___ZL36nw_protocol_http_retry_get_callbacksv_block_invoke()
{
  qword_1EDCE4130 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_1EDCE4138 = nw_protocol_common_get_output_frames;
  qword_1EDCE4150 = (uint64_t)nw_protocol_common_get_parameters;
  unk_1EDCE4158 = nw_protocol_common_get_path;
  qword_1EDCE4160 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_1EDCE4168 = nw_protocol_common_get_remote_endpoint;
  qword_1EDCE40F0 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_1EDCE40F8 = nw_protocol_common_connect;
  qword_1EDCE4100 = (uint64_t)nw_protocol_common_disconnect;
  unk_1EDCE4108 = nw_protocol_common_connected;
  qword_1EDCE4120 = (uint64_t)nw_protocol_common_input_available;
  unk_1EDCE4128 = nw_protocol_common_output_available;
  qword_1EDCE41A0 = (uint64_t)nw_protocol_common_output_finished;
  unk_1EDCE41A8 = nw_protocol_common_get_output_local_endpoint;
  qword_1EDCE41E8 = (uint64_t)nw_protocol_common_input_flush;
  qword_1EDCE4110 = (uint64_t)nw_protocol_common_disconnected;
  unk_1EDCE4118 = nw_protocol_common_error;
  qword_1EDCE41D8 = (uint64_t)nw_protocol_common_get_message_properties;
  unk_1EDCE41E0 = nw_protocol_common_reset;
  qword_1EDCE41C0 = (uint64_t)nw_protocol_common_copy_info;
  qword_1EDCE4190 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_1EDCE4198 = nw_protocol_common_input_finished;
  qword_1EDCE41B0 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_1EDCE41B8 = nw_protocol_common_waiting_for_output;
  qword_1EDCE4170 = (uint64_t)nw_protocol_common_register_notification;
  unk_1EDCE4178 = nw_protocol_common_unregister_notification;
  qword_1EDCE4180 = (uint64_t)nw_protocol_common_notify;
  unk_1EDCE4188 = nw_protocol_common_updated_path;
  qword_1EDCE4140 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_1EDCE4148 = nw_protocol_common_link_state;
  nw_protocol_http_retry_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  *(_QWORD *)algn_1EDCE40E8 = nw_protocol_http_retry_remove_input_handler;
}

uint64_t nw_protocol_http_retry_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  _BYTE *handle;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  NSObject *v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  _BOOL4 v16;
  _QWORD v17[5];
  char v18;
  _QWORD v19[5];
  char v20;
  os_log_type_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((handle[198] & 1) == 0 && gLogDatapath)
      {
        v12 = __nwlog_obj();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v23 = "nw_protocol_http_retry_remove_input_handler";
          v24 = 2082;
          v25 = handle + 114;
          v26 = 2080;
          v27 = " ";
          _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 0x40000000;
      v19[2] = ___ZL43nw_protocol_http_retry_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v19[3] = &__block_descriptor_tmp_28_41712;
      v19[4] = handle;
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 0x40000000;
      v17[2] = ___ZL43nw_protocol_http_retry_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
      v17[3] = &__block_descriptor_tmp_29_41713;
      v18 = a3;
      v17[4] = handle;
      return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v19, (uint64_t)v17);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http_retry_remove_input_handler";
    v8 = (char *)_os_log_send_and_compose_impl();
    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v8, &v21, &v20))
      goto LABEL_36;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v21;
      if (os_log_type_enabled(v9, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http_retry_remove_input_handler";
        v11 = "%{public}s called with null http_retry";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v20)
    {
      v9 = __nwlog_obj();
      v10 = v21;
      if (os_log_type_enabled(v9, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http_retry_remove_input_handler";
        v11 = "%{public}s called with null http_retry, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v21;
    v16 = os_log_type_enabled(v9, v21);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http_retry_remove_input_handler";
        v11 = "%{public}s called with null http_retry, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_http_retry_remove_input_handler";
      v24 = 2082;
      v25 = backtrace_string;
      v15 = "%{public}s called with null http_retry, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_protocol_http_retry_remove_input_handler";
  v8 = (char *)_os_log_send_and_compose_impl();
  v21 = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v8, &v21, &v20))
    goto LABEL_36;
  if (v21 != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      v9 = __nwlog_obj();
      v10 = v21;
      if (os_log_type_enabled(v9, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http_retry_remove_input_handler";
        v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v21;
    v14 = os_log_type_enabled(v9, v21);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http_retry_remove_input_handler";
        v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_http_retry_remove_input_handler";
      v24 = 2082;
      v25 = backtrace_string;
      v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v9, v10, v15, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    goto LABEL_36;
  }
  v9 = __nwlog_obj();
  v10 = v21;
  if (os_log_type_enabled(v9, v21))
  {
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http_retry_remove_input_handler";
    v11 = "%{public}s called with null protocol";
LABEL_35:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
  }
LABEL_36:
  if (v8)
    free(v8);
  return 0;
}

void ___ZL43nw_protocol_http_retry_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  const void *v5;
  char v6;
  const void *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v9 = 136446210;
      v10 = "nw_protocol_plugin_metadata_teardown";
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v9, 0xCu);
    }
  }
  nw_protocol_plugin_metadata_reset((uint64_t *)(v2 + 200));
  *(_QWORD *)(v2 + 328) = 0;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(v3 + 480);
  if ((v4 & 1) != 0)
  {
    v5 = *(const void **)(v3 + 472);
    if (v5)
    {
      _Block_release(v5);
      v4 = *(_BYTE *)(v3 + 480);
    }
  }
  *(_QWORD *)(v3 + 472) = 0;
  *(_BYTE *)(v3 + 480) = v4 | 1;
  v6 = *(_BYTE *)(v3 + 528);
  if ((v6 & 1) != 0)
  {
    v7 = *(const void **)(v3 + 520);
    if (v7)
    {
      _Block_release(v7);
      v6 = *(_BYTE *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = 0;
  *(_BYTE *)(v3 + 528) = v6 | 1;
}

void ___ZL43nw_protocol_http_retry_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
    nw_http_retry_destroy(*(_QWORD *)(a1 + 32));
}

double __nw_protocol_http_retry_identifier_block_invoke()
{
  double result;

  strcpy((char *)nw_protocol_http_retry_identifier::protocol_identifier, "http_retry");
  *(_QWORD *)&result = 0x100000005;
  qword_1EDCE4050 = 0x100000005;
  return result;
}

uint64_t nw_content_context_get_expiration_milliseconds(nw_content_context_t context)
{
  nw_content_context_t v1;
  nw_content_context_t v2;
  uint64_t isa;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = context;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_content_context_get_expiration_milliseconds";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_content_context_get_expiration_milliseconds";
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_content_context_get_expiration_milliseconds";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_content_context_get_expiration_milliseconds";
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_content_context_get_expiration_milliseconds";
          _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_24:
    if (v5)
      free(v5);
    goto LABEL_26;
  }
  isa = 0;
  if (v1 != (nw_content_context_t)&__block_literal_global_5_41741
    && v1 != (nw_content_context_t)&__block_literal_global_4
    && v1 != (nw_content_context_t)&__block_literal_global_3_41726
    && v1 != (nw_content_context_t)&__block_literal_global_41718)
  {
    if ((BYTE6(v1[14].isa) & 1) == 0)
    {
      isa = (uint64_t)v1[8].isa;
      goto LABEL_27;
    }
LABEL_26:
    isa = 0;
  }
LABEL_27:

  return isa;
}

void nw_content_context_set_expiration_milliseconds(nw_content_context_t context, uint64_t expiration_milliseconds)
{
  nw_content_context_t v3;
  nw_content_context_t v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = context;
  v4 = v3;
  if (v3)
  {
    if (v3 != (nw_content_context_t)&__block_literal_global_5_41741
      && v3 != (nw_content_context_t)&__block_literal_global_4
      && v3 != (nw_content_context_t)&__block_literal_global_3_41726
      && v3 != (nw_content_context_t)&__block_literal_global_41718)
    {
      v3[8].isa = (Class)expiration_milliseconds;
    }
    goto LABEL_7;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_content_context_set_expiration_milliseconds";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_set_expiration_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_content_context_set_expiration_milliseconds";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_set_expiration_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_set_expiration_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v6)
    free(v6);
LABEL_7:

}

double nw_content_context_get_relative_priority(nw_content_context_t context)
{
  nw_content_context_t v1;
  nw_content_context_t v2;
  double v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = context;
  v2 = v1;
  if (v1)
  {
    v3 = 0.5;
    if (v1 != (nw_content_context_t)&__block_literal_global_5_41741
      && v1 != (nw_content_context_t)&__block_literal_global_4
      && v1 != (nw_content_context_t)&__block_literal_global_3_41726
      && v1 != (nw_content_context_t)&__block_literal_global_41718
      && (BYTE6(v1[14].isa) & 1) == 0)
    {
      v3 = *(double *)&v1[10].isa;
    }
    goto LABEL_8;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_content_context_get_relative_priority";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_get_relative_priority";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_content_context_get_relative_priority";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_get_relative_priority";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_get_relative_priority";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v6)
    free(v6);
  v3 = 0.5;
LABEL_8:

  return v3;
}

void nw_content_context_set_relative_priority(nw_content_context_t context, double relative_priority)
{
  nw_content_context_t v3;
  nw_content_context_t v4;
  void *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  char *v10;
  os_log_type_t v12;
  char *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = context;
  v4 = v3;
  if (v3)
  {
    if (relative_priority >= 0.0 && relative_priority <= 1.0)
    {
      if (v3 != (nw_content_context_t)&__block_literal_global_5_41741
        && v3 != (nw_content_context_t)&__block_literal_global_4
        && v3 != (nw_content_context_t)&__block_literal_global_3_41726
        && v3 != (nw_content_context_t)&__block_literal_global_41718)
      {
        *(double *)&v3[10].isa = relative_priority;
      }
      goto LABEL_12;
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_content_context_set_relative_priority";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v10, &type, &v21))
      goto LABEL_46;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_content_context_set_relative_priority";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null (relative_priority >= 0.0 && relative_priority <= 1.0)", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_content_context_set_relative_priority";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null (relative_priority >= 0.0 && relative_priority <= 1.0), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (v10)
          goto LABEL_47;
        goto LABEL_12;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_content_context_set_relative_priority";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null (relative_priority >= 0.0 && relative_priority <= 1.0), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_content_context_set_relative_priority";
        _os_log_impl(&dword_182FBE000, v7, v20, "%{public}s called with null (relative_priority >= 0.0 && relative_priority <= 1.0), backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_45;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_content_context_set_relative_priority";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v10, &type, &v21))
    goto LABEL_46;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_content_context_set_relative_priority";
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null context", buf, 0xCu);
    }
LABEL_45:

    goto LABEL_46;
  }
  if (!v21)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_content_context_set_relative_priority";
      _os_log_impl(&dword_182FBE000, v7, v19, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_45;
  }
  v13 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v14 = type;
  v15 = os_log_type_enabled(v7, type);
  if (!v13)
  {
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_content_context_set_relative_priority";
      _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s called with null context, no backtrace", buf, 0xCu);
    }
    goto LABEL_45;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_content_context_set_relative_priority";
    v25 = 2082;
    v26 = v13;
    _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v13);
LABEL_46:
  if (v10)
LABEL_47:
    free(v10);
LABEL_12:

}

void nw_content_context_set_antecedent(nw_content_context_t context, nw_content_context_t antecedent_context)
{
  nw_content_context_t v3;
  NSObject *v4;
  NSObject *v5;
  id *v6;
  id *v7;
  id *v8;
  id *v9;
  NSObject *v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  nw_content_context_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = context;
  v4 = antecedent_context;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_content_context_set_antecedent";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_content_context_set_antecedent";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v22 = "nw_content_context_set_antecedent";
            v23 = 2082;
            v24 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_35;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_content_context_set_antecedent";
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_content_context_set_antecedent";
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_35:
    if (v12)
      free(v12);
    goto LABEL_18;
  }
  if (v3 != (nw_content_context_t)&__block_literal_global_5_41741
    && v3 != (nw_content_context_t)&__block_literal_global_4
    && v3 != (nw_content_context_t)&__block_literal_global_3_41726
    && v3 != (nw_content_context_t)&__block_literal_global_41718
    && v4 != &__block_literal_global_5_41741
    && v4 != &__block_literal_global_4
    && v4 != &__block_literal_global_3_41726
    && v4 != &__block_literal_global_41718)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v3[14]);
    v6 = v5;
    if (v6)
    {
      v7 = v6;
      v8 = v6;
      while (v8 != (id *)v3)
      {
        v9 = (id *)v8[7];

        v8 = v9;
        if (!v9)
          goto LABEL_14;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v22 = "nw_content_context_set_antecedent";
        v23 = 2114;
        v24 = (char *)v7;
        v25 = 2114;
        v26 = v3;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s Cannot create antecedent loops (%{public}@ introduces loop to %{public}@)", buf, 0x20u);
      }

      os_unfair_lock_unlock((os_unfair_lock_t)&v3[14]);
    }
    else
    {
LABEL_14:
      objc_storeStrong((id *)&v3[7].isa, antecedent_context);
      os_unfair_lock_unlock((os_unfair_lock_t)&v3[14]);
    }
  }
LABEL_18:

}

nw_content_context_t nw_content_context_copy_antecedent(nw_content_context_t context)
{
  nw_content_context_t v1;
  nw_content_context_t v2;
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = context;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_content_context_copy_antecedent";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_content_context_copy_antecedent";
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_content_context_copy_antecedent";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_content_context_copy_antecedent";
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_content_context_copy_antecedent";
          _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_24:
    if (v5)
      free(v5);
    goto LABEL_26;
  }
  v3 = 0;
  if (v1 != (nw_content_context_t)&__block_literal_global_5_41741
    && v1 != (nw_content_context_t)&__block_literal_global_4
    && v1 != (nw_content_context_t)&__block_literal_global_3_41726
    && v1 != (nw_content_context_t)&__block_literal_global_41718)
  {
    if ((BYTE6(v1[14].isa) & 1) == 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&v1[14]);
      v3 = v2[7].isa;
      os_unfair_lock_unlock((os_unfair_lock_t)&v2[14]);
      goto LABEL_27;
    }
LABEL_26:
    v3 = 0;
  }
LABEL_27:

  return v3;
}

uint64_t __Block_byref_object_copy__41932(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__41933(uint64_t a1)
{

}

uint64_t nw_content_context_supports_replies(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (v1 == (os_unfair_lock_s *)&__block_literal_global_5_41741)
    {
      v3 = 1;
    }
    else
    {
      v3 = 0;
      if (v1 != (os_unfair_lock_s *)&__block_literal_global_4
        && v1 != (os_unfair_lock_s *)&__block_literal_global_3_41726
        && v1 != (os_unfair_lock_s *)&__block_literal_global_41718)
      {
        os_unfair_lock_lock(v1 + 28);
        v3 = (BYTE2(v2[29]._os_unfair_lock_opaque) >> 6) & 1;
        os_unfair_lock_unlock(v2 + 28);
      }
    }
    goto LABEL_8;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_content_context_supports_replies";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_supports_replies";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_content_context_supports_replies";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_supports_replies";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_supports_replies";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_8:

  return v3;
}

void nw_content_context_set_packet_id(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_content_context_set_packet_id";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_content_context_set_packet_id";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_content_context_set_packet_id";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v6)
          goto LABEL_8;
LABEL_43:
        free(v6);
        goto LABEL_8;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_content_context_set_packet_id";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_content_context_set_packet_id";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (a2)
  {
    if (v3 != (char *)&__block_literal_global_5_41741
      && v3 != (char *)&__block_literal_global_4
      && v3 != (char *)&__block_literal_global_3_41726
      && v3 != (char *)&__block_literal_global_41718)
    {
      v3[118] |= 8u;
      *(_OWORD *)(v3 + 8) = *a2;
    }
    goto LABEL_8;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_content_context_set_packet_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_content_context_set_packet_id";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null packet_id", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_content_context_set_packet_id";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null packet_id, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_content_context_set_packet_id";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null packet_id, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_content_context_set_packet_id";
    v23 = 2082;
    v24 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null packet_id, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_43;
LABEL_8:

}

void nw_content_context_set_app_metadata(void *a1, char a2, char a3)
{
  id v5;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    if (v5 != &__block_literal_global_5_41741
      && v5 != &__block_literal_global_4
      && v5 != &__block_literal_global_3_41726
      && v5 != &__block_literal_global_41718)
    {
      *((_BYTE *)v5 + 119) |= 1u;
      *((_BYTE *)v5 + 116) = a2;
      *((_BYTE *)v5 + 117) = a3;
    }
    goto LABEL_7;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_content_context_set_app_metadata";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_content_context_set_app_metadata";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_content_context_set_app_metadata";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_content_context_set_app_metadata";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_content_context_set_app_metadata";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v8)
    free(v8);
LABEL_7:

}

uint64_t nw_content_context_copy_local_endpoint(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  v2 = v1;
  if (v1 == (os_unfair_lock_s *)&__block_literal_global_5_41741
    || v1 == (os_unfair_lock_s *)&__block_literal_global_4
    || v1 == (os_unfair_lock_s *)&__block_literal_global_3_41726
    || v1 == (os_unfair_lock_s *)&__block_literal_global_41718)
  {
    v7 = 0;
  }
  else
  {
    os_unfair_lock_lock(v1 + 28);
    if ((v2[29]._os_unfair_lock_opaque & 0x200000) != 0
      && (v6 = *(_QWORD *)&v2[26]._os_unfair_lock_opaque) != 0
      && *(_QWORD *)(v6 + 24) != *(_QWORD *)(v6 + 16))
    {
      nw_array_get_object_at_index(v6, 0);
      v7 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = 0;
    }
    os_unfair_lock_unlock(v2 + 28);
  }

  return v7;
}

uint64_t nw_content_context_copy_remote_endpoint(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  v2 = v1;
  if (v1 == (os_unfair_lock_s *)&__block_literal_global_5_41741
    || v1 == (os_unfair_lock_s *)&__block_literal_global_4
    || v1 == (os_unfair_lock_s *)&__block_literal_global_3_41726
    || v1 == (os_unfair_lock_s *)&__block_literal_global_41718)
  {
    v7 = 0;
  }
  else
  {
    os_unfair_lock_lock(v1 + 28);
    if ((v2[29]._os_unfair_lock_opaque & 0x200000) != 0
      && (v6 = *(_QWORD *)&v2[26]._os_unfair_lock_opaque) != 0
      && *(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16) >= 9uLL)
    {
      nw_array_get_object_at_index(v6, 1uLL);
      v7 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = 0;
    }
    os_unfair_lock_unlock(v2 + 28);
  }

  return v7;
}

uint64_t nw_content_context_copy_interface(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  v2 = v1;
  if (v1 == (os_unfair_lock_s *)&__block_literal_global_5_41741
    || v1 == (os_unfair_lock_s *)&__block_literal_global_4
    || v1 == (os_unfair_lock_s *)&__block_literal_global_3_41726
    || v1 == (os_unfair_lock_s *)&__block_literal_global_41718)
  {
    v7 = 0;
  }
  else
  {
    os_unfair_lock_lock(v1 + 28);
    if ((v2[29]._os_unfair_lock_opaque & 0x200000) != 0
      && (v6 = *(_QWORD *)&v2[26]._os_unfair_lock_opaque) != 0
      && *(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16) >= 0x11uLL)
    {
      nw_array_get_object_at_index(v6, 2uLL);
      v7 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = 0;
    }
    os_unfair_lock_unlock(v2 + 28);
  }

  return v7;
}

uint64_t llhttp__after_headers_complete(uint64_t a1)
{
  __int16 v1;
  _BOOL4 v2;
  int v3;
  int v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;

  v1 = *(_WORD *)(a1 + 82);
  if ((v1 & 8) != 0)
  {
    v2 = 1;
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_9;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 64) != 0;
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_9;
  }
  if (*(_BYTE *)(a1 + 73) == 5)
    return 1;
  if ((v1 & 0x40) != 0)
    v2 = 0;
  if (!v2)
    return 1;
LABEL_9:
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 == 2)
  {
    v4 = *(unsigned __int16 *)(a1 + 84);
    if (v4 == 101)
      return 1;
    v7 = 0;
    if ((v1 & 0x40) != 0)
      return v7;
    if (v4 == 100)
      return v7;
    v7 = 0;
    if ((v4 - 102) < 2 || v4 == 204 || v4 == 304)
      return v7;
  }
  else if ((v1 & 0x40) != 0)
  {
    return 0;
  }
  if ((v1 & 8) != 0)
    return 2;
  if ((*(_WORD *)(a1 + 82) & 0x200) == 0)
  {
    if ((v1 & 0x20) != 0)
    {
      if (*(_QWORD *)(a1 + 64))
        return 3;
      else
        return 0;
    }
    else
    {
      if (v3 == 1)
        return 0;
      v6 = *(unsigned __int16 *)(a1 + 84);
      if ((v6 - 100) < 0x64)
        return 0;
      v7 = 0;
      if (v6 != 204 && v6 != 304)
      {
        if ((v1 & 0x40) == 0)
        {
          v8 = v1 & 0x208;
          v9 = 4 * ((v1 & 0x28) == 0);
          if (v8 == 512)
            return 4;
          else
            return v9;
        }
        return 0;
      }
    }
    return v7;
  }
  if (v3 == 1 && (*(_WORD *)(a1 + 78) & 0xA) == 0)
    return 5;
  else
    return 4;
}

BOOL llhttp_message_needs_eof(uint64_t a1)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  _BOOL4 v5;

  if (*(_BYTE *)(a1 + 72) == 1)
    return 0;
  v2 = *(unsigned __int16 *)(a1 + 84);
  if ((v2 - 100) < 0x64)
    return 0;
  v3 = 0;
  if (v2 != 204 && v2 != 304)
  {
    v4 = *(_WORD *)(a1 + 82);
    v5 = (v4 & 0x208) == 0x200 || (v4 & 0x28) == 0;
    return (v4 & 0x40) == 0 && v5;
  }
  return v3;
}

void sub_1837DBA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__42417(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__42418(uint64_t a1)
{

}

void sub_1837E0C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t connectionMatchesEntitlementGroup(void *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  _BOOL4 value;
  uint64_t v16;
  id obj;
  uint64_t v19;
  uint64_t v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v21 = a1;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  obj = a2;
  v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
  if (v20)
  {
    v19 = *(_QWORD *)v23;
    while (2)
    {
      v3 = 0;
      while (2)
      {
        if (*(_QWORD *)v23 != v19)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v3);
        v5 = v21;
        v6 = v4;
        v26 = 0u;
        v27 = 0u;
        v28 = 0u;
        v29 = 0u;
        v7 = v6;
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
        if (!v8)
        {
LABEL_21:

          v16 = 1;
          goto LABEL_22;
        }
        v9 = v8;
        v10 = *(_QWORD *)v27;
LABEL_10:
        v11 = 0;
        while (1)
        {
          if (*(_QWORD *)v27 != v10)
            objc_enumerationMutation(v7);
          v12 = *(id *)(*((_QWORD *)&v26 + 1) + 8 * v11);
          v13 = v5;
          objc_msgSend(v12, "UTF8String");
          v14 = (void *)xpc_connection_copy_entitlement_value();

          if (!v14 || object_getClass(v14) != (Class)MEMORY[0x1E0C812D0])
            break;
          value = xpc_BOOL_get_value(v14);

          if (!value)
            goto LABEL_5;
          if (v9 == ++v11)
          {
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
            if (v9)
              goto LABEL_10;
            goto LABEL_21;
          }
        }

LABEL_5:
        if (++v3 != v20)
          continue;
        break;
      }
      v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
      if (v20)
        continue;
      break;
    }
  }
  v16 = 0;
LABEL_22:

  return v16;
}

uint64_t getMainQueue()
{
  uint64_t v0;
  id v1;

  v0 = MEMORY[0x1E0C80D38];
  v1 = MEMORY[0x1E0C80D38];
  return v0;
}

void sub_1837E28E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__42647(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__42648(uint64_t a1)
{

}

uint64_t handleOpportunistic(void *a1)
{
  id v1;
  void *v2;
  const char *string;
  int v4;
  int v5;
  void *v6;
  _BOOL4 v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  int v12;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  NSObject *v33;
  os_log_type_t v34;
  void *v35;
  uint8_t *v37;
  uint64_t v38;
  char v39;
  os_log_type_t v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  _BYTE v44[20];
  int v45;
  __int16 v46;
  uint64_t v47;
  os_log_type_t type[16];
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "request");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  string = xpc_dictionary_get_string(v2, (const char *)networkd_privileged_key_opportunistic_ifname);

  if (!string)
  {
    v8 = 0;
    v11 = 22;
    goto LABEL_52;
  }
  v4 = socket(2, 2, 0);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = v4;
    objc_msgSend(v1, "request");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = xpc_dictionary_get_BOOL(v6, (const char *)networkd_privileged_key_opportunistic_disable);

    *(_OWORD *)type = 0u;
    v49 = 0u;
    __strlcpy_chk();
    LODWORD(v49) = v7;
    if (ioctl(v5, 0xC020698BuLL, type) != -1)
    {
      v8 = DWORD1(v49);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        if (v7)
          v10 = "";
        else
          v10 = "un";
        *(_DWORD *)buf = 136447234;
        v42 = "handleOpportunistic";
        v43 = 2082;
        *(_QWORD *)v44 = v10;
        *(_WORD *)&v44[8] = 2082;
        *(_QWORD *)&v44[10] = string;
        *(_WORD *)&v44[18] = 1024;
        v45 = objc_msgSend(v1, "pid");
        v46 = 2048;
        v47 = v8;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully %{public}sblocked opportunistic for \"%{public}s\" from %d count=%llu", buf, 0x30u);
      }

      v11 = 0;
LABEL_51:
      close(v5);
      goto LABEL_52;
    }
    v18 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    v20 = v19;
    if (v18 == 6)
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v42 = "handleOpportunistic";
        v43 = 1024;
        *(_DWORD *)v44 = v5;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = 6;
        _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s ioctl(%d, SIOCSIFOPPORTUNISTIC, ...) failed %{darwin.errno}d", buf, 0x18u);
      }

      v8 = 0;
      v11 = 6;
      goto LABEL_51;
    }
    *(_DWORD *)buf = 136446722;
    v42 = "handleOpportunistic";
    v43 = 1024;
    *(_DWORD *)v44 = v5;
    *(_WORD *)&v44[4] = 1024;
    *(_DWORD *)&v44[6] = v18;
    LODWORD(v38) = 24;
    v37 = buf;
    v24 = (void *)_os_log_send_and_compose_impl();

    v40 = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault((const char *)v24, &v40, &v39))
    {
LABEL_48:
      v11 = v18;
      if (v24)
        free(v24);
      v8 = 0;
      goto LABEL_51;
    }
    if (v40 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (id)gLogObj;
      v26 = v40;
      if (os_log_type_enabled(v25, v40))
      {
        *(_DWORD *)buf = 136446722;
        v42 = "handleOpportunistic";
        v43 = 1024;
        *(_DWORD *)v44 = v5;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = v18;
        v27 = "%{public}s ioctl(%d, SIOCSIFOPPORTUNISTIC, ...) failed %{darwin.errno}d";
LABEL_45:
        v33 = v25;
        v34 = v26;
LABEL_46:
        _os_log_impl(&dword_182FBE000, v33, v34, v27, buf, 0x18u);
      }
    }
    else
    {
      if (v39)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        v31 = v40;
        v32 = os_log_type_enabled(v25, v40);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446978;
            v42 = "handleOpportunistic";
            v43 = 1024;
            *(_DWORD *)v44 = v5;
            *(_WORD *)&v44[4] = 1024;
            *(_DWORD *)&v44[6] = v18;
            *(_WORD *)&v44[10] = 2082;
            *(_QWORD *)&v44[12] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v25, v31, "%{public}s ioctl(%d, SIOCSIFOPPORTUNISTIC, ...) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x22u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (!v32)
          goto LABEL_47;
        *(_DWORD *)buf = 136446722;
        v42 = "handleOpportunistic";
        v43 = 1024;
        *(_DWORD *)v44 = v5;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = v18;
        v27 = "%{public}s ioctl(%d, SIOCSIFOPPORTUNISTIC, ...) failed %{darwin.errno}d, no backtrace";
        v33 = v25;
        v34 = v31;
        goto LABEL_46;
      }
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = v40;
      if (os_log_type_enabled(v25, v40))
      {
        *(_DWORD *)buf = 136446722;
        v42 = "handleOpportunistic";
        v43 = 1024;
        *(_DWORD *)v44 = v5;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = v18;
        v27 = "%{public}s ioctl(%d, SIOCSIFOPPORTUNISTIC, ...) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_45;
      }
    }
LABEL_47:

    goto LABEL_48;
  }
  v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v42 = "handleOpportunistic";
  v43 = 1024;
  *(_DWORD *)v44 = v12;
  LODWORD(v38) = 18;
  v37 = buf;
  v14 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v40 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v14, type, &v40))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v42 = "handleOpportunistic";
        v43 = 1024;
        *(_DWORD *)v44 = v12;
        v17 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d";
LABEL_30:
        v28 = v15;
        v29 = v16;
LABEL_31:
        _os_log_impl(&dword_182FBE000, v28, v29, v17, buf, 0x12u);
      }
    }
    else
    {
      if (v40)
      {
        v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        v22 = type[0];
        v23 = os_log_type_enabled(v15, type[0]);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446722;
            v42 = "handleOpportunistic";
            v43 = 1024;
            *(_DWORD *)v44 = v12;
            *(_WORD *)&v44[4] = 2082;
            *(_QWORD *)&v44[6] = v21;
            _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          goto LABEL_33;
        }
        if (!v23)
          goto LABEL_32;
        *(_DWORD *)buf = 136446466;
        v42 = "handleOpportunistic";
        v43 = 1024;
        *(_DWORD *)v44 = v12;
        v17 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, no backtrace";
        v28 = v15;
        v29 = v22;
        goto LABEL_31;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v42 = "handleOpportunistic";
        v43 = 1024;
        *(_DWORD *)v44 = v12;
        v17 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_30;
      }
    }
LABEL_32:

  }
LABEL_33:
  v11 = v12;
  if (v14)
    free(v14);
  v8 = 0;
LABEL_52:
  objc_msgSend(v1, "reply", v37, v38);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_uint64(v35, (const char *)networkd_privileged_key_opportunistic_inuse, v8);

  return v11;
}

uint64_t handleCreateNetworkAgentKernelSocket(void *a1)
{
  return internalHandleCreateKernelSocket(a1, (uint64_t)"com.apple.net.netagent");
}

uint64_t handleCreateNetworkAdvisoryKernelSocket(void *a1)
{
  return internalHandleCreateKernelSocket(a1, (uint64_t)"com.apple.network.advisory");
}

uint64_t handleSetNetworkAgentOnInterface(void *a1)
{
  return internalHandleSetNetworkAgentOnInterface(a1, 0);
}

uint64_t handleSetPersistentNetworkAgentOnInterface(void *a1)
{
  return internalHandleSetNetworkAgentOnInterface(a1, 1);
}

uint64_t handleReloadManagedNetworkSettings()
{
  NSObject *v0;
  id v1;
  id v2;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136446210;
    v5 = "handleReloadManagedNetworkSettings";
    _os_log_impl(&dword_182FBE000, v0, OS_LOG_TYPE_DEFAULT, "%{public}s Reloading managed network settings", (uint8_t *)&v4, 0xCu);
  }

  v1 = +[ManagedNetworkSettings sharedMNS](ManagedNetworkSettings, "sharedMNS");
  objc_msgSend(v1, "reloadNetworkdSettings");

  v2 = +[ManagedNetworkSettings sharedMNS](ManagedNetworkSettings, "sharedMNS");
  objc_msgSend(v2, "reloadMNS");

  return 0;
}

uint64_t handleCheckMobileAsset()
{
  uint64_t v0;
  NSObject *v1;
  double v2;
  id v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  double v11;
  char v12;
  void *v13;
  id v14;
  void *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  NSObject *v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  NSObject *v23;
  os_log_type_t v24;
  NSObject *v25;
  void *v26;
  id v27;
  NSObject *v28;
  char v30;
  os_log_type_t type;
  _BYTE buf[24];
  const __CFString *v33;
  _QWORD v34[4];

  v34[3] = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v1 = (id)gLogObj;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nwphCheckMobileAsset";
    _os_log_impl(&dword_182FBE000, v1, OS_LOG_TYPE_DEBUG, "%{public}s starting mobile asset check", buf, 0xCu);
  }

  gotLoadHelper_x26__OBJC_CLASS___MAAsset(v2);
  if (objc_opt_class())
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithContentsOfFile:", CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist"));
    v3 = (id)objc_claimAutoreleasedReturnValue();
    if (!v3)
      v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v4 = (void *)MEMORY[0x1E0C99D68];
    v5 = v3;
    objc_msgSend(v4, "date");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LastAttempt"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LastSuccess"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("PollFrequencySeconds"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      v10 = objc_msgSend(v9, "longLongValue");
      v11 = 86400.0;
      if ((unint64_t)(v10 - 3600) < 0x277EF1)
        v11 = (double)v10;
    }
    else
    {
      v11 = 86400.0;
    }
    v12 = nwphShouldRunCheck(v6, v7, v8, 1, 3600.0, v11);

    if ((v12 & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwphCheckMobileAsset";
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s skipping Mobile Asset attempt", buf, 0xCu);
      }
      goto LABEL_37;
    }
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v13, CFSTR("LastAttempt"));

    if ((-[NSObject writeToFile:atomically:](v5, "writeToFile:atomically:", CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist"), 1) & 1) != 0)
    {
LABEL_34:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (id)gLogObj;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwphCheckMobileAsset";
        _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s starting mobile asset catalog download", buf, 0xCu);
      }

      v26 = *(void **)(v0 + 64);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nwphCheckMobileAsset_block_invoke;
      v33 = (const __CFString *)&unk_1E149D540;
      v34[0] = v5;
      objc_msgSend(v26, "startCatalogDownload:then:", CFSTR("com.apple.MobileAsset.network.networknomicon"), buf);
      v19 = v34[0];
LABEL_37:

      goto LABEL_38;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nwphCheckMobileAsset";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v5;
    *(_WORD *)&buf[22] = 2114;
    v33 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
    v15 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault((const char *)v15, &type, &v30))
    {
LABEL_32:
      if (v15)
        free(v15);
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nwphCheckMobileAsset";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2114;
        v33 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
        v18 = "%{public}s Failed to save mobile asset networknomicon attempt %{public}@ to \"%{public}@\"";
LABEL_29:
        v23 = v16;
        v24 = v17;
LABEL_30:
        _os_log_impl(&dword_182FBE000, v23, v24, v18, buf, 0x20u);
      }
    }
    else
    {
      if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v21 = type;
        v22 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nwphCheckMobileAsset";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v5;
            *(_WORD *)&buf[22] = 2114;
            v33 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
            LOWORD(v34[0]) = 2082;
            *(_QWORD *)((char *)v34 + 2) = backtrace_string;
            _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s Failed to save mobile asset networknomicon attempt %{public}@ to \"%{public}@\", dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (!v22)
          goto LABEL_31;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nwphCheckMobileAsset";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2114;
        v33 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
        v18 = "%{public}s Failed to save mobile asset networknomicon attempt %{public}@ to \"%{public}@\", no backtrace";
        v23 = v16;
        v24 = v21;
        goto LABEL_30;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nwphCheckMobileAsset";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2114;
        v33 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
        v18 = "%{public}s Failed to save mobile asset networknomicon attempt %{public}@ to \"%{public}@\", backtrace limit exceeded";
        goto LABEL_29;
      }
    }
LABEL_31:

    goto LABEL_32;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nwphCheckMobileAsset";
    _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "%{public}s Mobile Asset not available", buf, 0xCu);
  }
LABEL_38:

  v27 = +[ManagedNetworkSettings sharedMNS](ManagedNetworkSettings, "sharedMNS");
  objc_msgSend(v27, "queue");
  v28 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v28, &__block_literal_global_368);

  return 0;
}

uint64_t handleSetNetworkdSetting(void *a1)
{
  id v1;
  void *v2;
  const char *string;
  void *v4;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *v27;
  _BOOL4 v28;
  int v29;
  id v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *backtrace_string;
  _BOOL4 v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  _BYTE v42[24];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "request");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  string = xpc_dictionary_get_string(v2, (const char *)networkd_privileged_key_settings_key);

  if (string)
  {
    objc_msgSend(v1, "request");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = xpc_dictionary_get_string(v4, (const char *)networkd_privileged_key_settings_file_prefix);

    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3780], "characterSetWithCharactersInString:", CFSTR("_-"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3500], "alphanumericCharacterSet");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "formUnionWithCharacterSet:", v8);

      objc_msgSend(v7, "invertedSet");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v6, "rangeOfCharacterFromSet:", v9) != 0x7FFFFFFFFFFFFFFFLL)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          v40 = "handleSetNetworkdSetting";
          v41 = 1024;
          *(_DWORD *)v42 = objc_msgSend(v1, "pid");
          *(_WORD *)&v42[4] = 2082;
          *(_QWORD *)&v42[6] = v5;
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s pid %d sent us file_prefix \"%{public}s\" containing invalid characters", buf, 0x1Cu);
        }

        v10 = 0;
        v11 = 22;
        goto LABEL_33;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@%@"), CFSTR("/Library/Preferences/com.apple.networkd."), v6, CFSTR(".plist"));
      v10 = objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_file_path_settings);
      v10 = objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v1, "request");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    xpc_dictionary_get_value(v12, (const char *)networkd_privileged_key_settings_value);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithContentsOfFile:", v10);
    v13 = objc_claimAutoreleasedReturnValue();
    if (v6)
      v7 = (void *)_CFXPCCreateCFObjectFromXPCObject();
    else
      v7 = 0;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", string);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      if (!v13)
      {
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v13 = objc_claimAutoreleasedReturnValue();
      }
      -[NSObject objectForKeyedSubscript:](v13, "objectForKeyedSubscript:", v9);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v7, "isEqual:", v15);

      if ((v16 & 1) == 0)
      {
        -[NSObject setObject:forKeyedSubscript:](v13, "setObject:forKeyedSubscript:", v7, v9);
        if (!v13)
          goto LABEL_45;
        goto LABEL_25;
      }
    }
    else if (v13)
    {
      -[NSObject objectForKeyedSubscript:](v13, "objectForKeyedSubscript:", v9);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      if (v17)
      {
        -[NSObject removeObjectForKey:](v13, "removeObjectForKey:", v9);
        if (!-[NSObject count](v13, "count"))
        {

LABEL_45:
          if (unlink((const char *)-[NSObject UTF8String](v10, "UTF8String")))
          {
            v29 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v30 = (id)gLogObj;
            *(_DWORD *)buf = 136446722;
            v40 = "handleSetNetworkdSetting";
            v41 = 2114;
            *(_QWORD *)v42 = v10;
            *(_WORD *)&v42[8] = 1024;
            *(_DWORD *)&v42[10] = v29;
            v31 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v37 = 0;
            if (!__nwlog_fault(v31, &type, &v37))
              goto LABEL_72;
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v32 = (id)gLogObj;
              v33 = type;
              if (os_log_type_enabled(v32, type))
              {
                *(_DWORD *)buf = 136446722;
                v40 = "handleSetNetworkdSetting";
                v41 = 2114;
                *(_QWORD *)v42 = v10;
                *(_WORD *)&v42[8] = 1024;
                *(_DWORD *)&v42[10] = v29;
                v34 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d";
LABEL_70:
                _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0x1Cu);
              }
            }
            else
            {
              if (v37)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v32 = objc_claimAutoreleasedReturnValue();
                v33 = type;
                v36 = os_log_type_enabled(v32, type);
                if (backtrace_string)
                {
                  if (v36)
                  {
                    *(_DWORD *)buf = 136446978;
                    v40 = "handleSetNetworkdSetting";
                    v41 = 2114;
                    *(_QWORD *)v42 = v10;
                    *(_WORD *)&v42[8] = 1024;
                    *(_DWORD *)&v42[10] = v29;
                    *(_WORD *)&v42[14] = 2082;
                    *(_QWORD *)&v42[16] = backtrace_string;
                    _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s unlink(%{public}@) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
                  }

                  free(backtrace_string);
                  goto LABEL_72;
                }
                if (!v36)
                  goto LABEL_71;
                *(_DWORD *)buf = 136446722;
                v40 = "handleSetNetworkdSetting";
                v41 = 2114;
                *(_QWORD *)v42 = v10;
                *(_WORD *)&v42[8] = 1024;
                *(_DWORD *)&v42[10] = v29;
                v34 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d, no backtrace";
                goto LABEL_70;
              }
              __nwlog_obj();
              v32 = objc_claimAutoreleasedReturnValue();
              v33 = type;
              if (os_log_type_enabled(v32, type))
              {
                *(_DWORD *)buf = 136446722;
                v40 = "handleSetNetworkdSetting";
                v41 = 2114;
                *(_QWORD *)v42 = v10;
                *(_WORD *)&v42[8] = 1024;
                *(_DWORD *)&v42[10] = v29;
                v34 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d, backtrace limit exceeded";
                goto LABEL_70;
              }
            }
LABEL_71:

LABEL_72:
            v11 = v29;
            if (v31)
              free(v31);
            goto LABEL_33;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v13 = (id)gLogObj;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v40 = "handleSetNetworkdSetting";
            v41 = 2114;
            *(_QWORD *)v42 = v9;
            _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully removed value of setting %{public}@", buf, 0x16u);
          }
LABEL_32:

          fixFilePermissions(v10);
          v11 = 0;
LABEL_33:

          goto LABEL_34;
        }
LABEL_25:
        v18 = -[NSObject writeToFile:atomically:](v13, "writeToFile:atomically:", v10, 1);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v20 = v19;
        if ((v18 & 1) != 0)
        {
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v40 = "handleSetNetworkdSetting";
            v41 = 2114;
            *(_QWORD *)v42 = v9;
            _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully changed value of setting %{public}@", buf, 0x16u);
          }

          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446466;
        v40 = "handleSetNetworkdSetting";
        v41 = 2114;
        *(_QWORD *)v42 = v10;
        v23 = (void *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v37 = 0;
        if (!__nwlog_fault((const char *)v23, &type, &v37))
        {
LABEL_65:
          if (v23)
            free(v23);

          v11 = 5;
          goto LABEL_33;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v24 = (id)gLogObj;
          v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)buf = 136446466;
            v40 = "handleSetNetworkdSetting";
            v41 = 2114;
            *(_QWORD *)v42 = v10;
            v26 = "%{public}s settings writeToFile:\"%{public}@\" failed";
LABEL_63:
            _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0x16u);
          }
        }
        else
        {
          if (v37)
          {
            v27 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v24 = objc_claimAutoreleasedReturnValue();
            v25 = type;
            v28 = os_log_type_enabled(v24, type);
            if (v27)
            {
              if (v28)
              {
                *(_DWORD *)buf = 136446722;
                v40 = "handleSetNetworkdSetting";
                v41 = 2114;
                *(_QWORD *)v42 = v10;
                *(_WORD *)&v42[8] = 2082;
                *(_QWORD *)&v42[10] = v27;
                _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s settings writeToFile:\"%{public}@\" failed, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(v27);
              goto LABEL_65;
            }
            if (!v28)
              goto LABEL_64;
            *(_DWORD *)buf = 136446466;
            v40 = "handleSetNetworkdSetting";
            v41 = 2114;
            *(_QWORD *)v42 = v10;
            v26 = "%{public}s settings writeToFile:\"%{public}@\" failed, no backtrace";
            goto LABEL_63;
          }
          __nwlog_obj();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)buf = 136446466;
            v40 = "handleSetNetworkdSetting";
            v41 = 2114;
            *(_QWORD *)v42 = v10;
            v26 = "%{public}s settings writeToFile:\"%{public}@\" failed, backtrace limit exceeded";
            goto LABEL_63;
          }
        }
LABEL_64:

        goto LABEL_65;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v40 = "handleSetNetworkdSetting";
      v41 = 2114;
      *(_QWORD *)v42 = v9;
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s new value is the same, will not save settings for %{public}@", buf, 0x16u);
    }

    goto LABEL_32;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v40 = "handleSetNetworkdSetting";
    v41 = 1024;
    *(_DWORD *)v42 = objc_msgSend(v1, "pid");
    _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s pid %d sent us NULL settings key", buf, 0x12u);
  }
  v11 = 22;
LABEL_34:

  return v11;
}

uint64_t handleConstrained(void *a1)
{
  id v1;
  void *v2;
  const char *string;
  uint64_t v4;
  void *v5;
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  int v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  int v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  NSObject *v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  _BOOL4 v31;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  _BYTE v38[20];
  int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "request");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  string = xpc_dictionary_get_string(v2, (const char *)networkd_privileged_key_interface_name);

  v40 = 0u;
  v41 = 0u;
  if (!string || strlen(string) > 0x10)
  {
    v4 = 22;
    goto LABEL_56;
  }
  __strlcpy_chk();
  objc_msgSend(v1, "request");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v41) = xpc_dictionary_get_BOOL(v5, (const char *)networkd_privileged_key_constrained);

  v6 = socket(2, 2, 0);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = v6;
    if (ioctl(v6, 0xC02069CDuLL, &v40) != -1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v36 = "handleConstrained";
        *(_DWORD *)buf = 136446722;
        if ((_DWORD)v41)
          v9 = "Set";
        else
          v9 = "Cleared";
        v37 = 2082;
        *(_QWORD *)v38 = v9;
        *(_WORD *)&v38[8] = 2082;
        *(_QWORD *)&v38[10] = &v40;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully %{public}s constrained on %{public}s", buf, 0x20u);
      }

      v4 = 0;
LABEL_55:
      close(v7);
      goto LABEL_56;
    }
    v16 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = "set";
      v36 = "handleConstrained";
      *(_DWORD *)buf = 136446978;
      v37 = 2082;
      if (!(_DWORD)v41)
        v18 = "clear";
      *(_QWORD *)v38 = v18;
      *(_WORD *)&v38[8] = 2082;
      *(_QWORD *)&v38[10] = &v40;
      *(_WORD *)&v38[18] = 1024;
      v39 = v16;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Failed to %{public}s constrained on %{public}s: %{darwin.errno}d", buf, 0x26u);
    }
    v4 = v16;

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    v20 = v19;
    if (v16 == 6)
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v36 = "handleConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v7;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = 6;
        _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d", buf, 0x18u);
      }

      goto LABEL_55;
    }
    *(_DWORD *)buf = 136446722;
    v36 = "handleConstrained";
    v37 = 1024;
    *(_DWORD *)v38 = v7;
    *(_WORD *)&v38[4] = 1024;
    *(_DWORD *)&v38[6] = v16;
    v24 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault((const char *)v24, &type, &v33))
    {
LABEL_53:
      if (v24)
        free(v24);
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446722;
        v36 = "handleConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v7;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v16;
        v27 = "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d";
LABEL_51:
        _os_log_impl(&dword_182FBE000, v25, v26, v27, buf, 0x18u);
      }
    }
    else
    {
      if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        v31 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446978;
            v36 = "handleConstrained";
            v37 = 1024;
            *(_DWORD *)v38 = v7;
            *(_WORD *)&v38[4] = 1024;
            *(_DWORD *)&v38[6] = v16;
            *(_WORD *)&v38[10] = 2082;
            *(_QWORD *)&v38[12] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x22u);
          }

          free(backtrace_string);
          goto LABEL_53;
        }
        if (!v31)
          goto LABEL_52;
        *(_DWORD *)buf = 136446722;
        v36 = "handleConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v7;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v16;
        v27 = "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d, no backtrace";
        goto LABEL_51;
      }
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446722;
        v36 = "handleConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v7;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v16;
        v27 = "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_51;
      }
    }
LABEL_52:

    goto LABEL_53;
  }
  v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v36 = "handleConstrained";
  v37 = 1024;
  *(_DWORD *)v38 = v10;
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (__nwlog_fault(v12, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v36 = "handleConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d";
LABEL_35:
        v28 = v13;
        v29 = v14;
LABEL_36:
        _os_log_impl(&dword_182FBE000, v28, v29, v15, buf, 0x12u);
      }
    }
    else
    {
      if (v33)
      {
        v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v22 = type;
        v23 = os_log_type_enabled(v13, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446722;
            v36 = "handleConstrained";
            v37 = 1024;
            *(_DWORD *)v38 = v10;
            *(_WORD *)&v38[4] = 2082;
            *(_QWORD *)&v38[6] = v21;
            _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          goto LABEL_38;
        }
        if (!v23)
          goto LABEL_37;
        *(_DWORD *)buf = 136446466;
        v36 = "handleConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, no backtrace";
        v28 = v13;
        v29 = v22;
        goto LABEL_36;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v36 = "handleConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_35;
      }
    }
LABEL_37:

  }
LABEL_38:
  v4 = v10;
  if (v12)
    free(v12);
LABEL_56:

  return v4;
}

uint64_t handleUltraConstrained(void *a1)
{
  id v1;
  void *v2;
  const char *string;
  uint64_t v4;
  void *v5;
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  int v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  int v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  NSObject *v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  _BOOL4 v31;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  _BYTE v38[20];
  int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "request");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  string = xpc_dictionary_get_string(v2, (const char *)networkd_privileged_key_interface_name);

  v40 = 0u;
  v41 = 0u;
  if (!string || strlen(string) > 0x10)
  {
    v4 = 22;
    goto LABEL_56;
  }
  __strlcpy_chk();
  objc_msgSend(v1, "request");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v41) = xpc_dictionary_get_BOOL(v5, (const char *)networkd_privileged_key_constrained);

  v6 = socket(2, 2, 0);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = v6;
    if (ioctl(v6, 0xC02069DBuLL, &v40) != -1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v36 = "handleUltraConstrained";
        *(_DWORD *)buf = 136446722;
        if ((_DWORD)v41)
          v9 = "Set";
        else
          v9 = "Cleared";
        v37 = 2082;
        *(_QWORD *)v38 = v9;
        *(_WORD *)&v38[8] = 2082;
        *(_QWORD *)&v38[10] = &v40;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully %{public}s ultra constrained on %{public}s", buf, 0x20u);
      }

      v4 = 0;
LABEL_55:
      close(v7);
      goto LABEL_56;
    }
    v16 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = "set";
      v36 = "handleUltraConstrained";
      *(_DWORD *)buf = 136446978;
      v37 = 2082;
      if (!(_DWORD)v41)
        v18 = "clear";
      *(_QWORD *)v38 = v18;
      *(_WORD *)&v38[8] = 2082;
      *(_QWORD *)&v38[10] = &v40;
      *(_WORD *)&v38[18] = 1024;
      v39 = v16;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Failed to %{public}s ultra constrained on %{public}s: %{darwin.errno}d", buf, 0x26u);
    }
    v4 = v16;

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    v20 = v19;
    if (v16 == 6)
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v36 = "handleUltraConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v7;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = 6;
        _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s ioctl(%d, SIOCSIFULTRACONSTRAINED, ...) failed %{darwin.errno}d", buf, 0x18u);
      }

      goto LABEL_55;
    }
    *(_DWORD *)buf = 136446722;
    v36 = "handleUltraConstrained";
    v37 = 1024;
    *(_DWORD *)v38 = v7;
    *(_WORD *)&v38[4] = 1024;
    *(_DWORD *)&v38[6] = v16;
    v24 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault((const char *)v24, &type, &v33))
    {
LABEL_53:
      if (v24)
        free(v24);
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446722;
        v36 = "handleUltraConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v7;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v16;
        v27 = "%{public}s ioctl(%d, SIOCSIFULTRACONSTRAINED, ...) failed %{darwin.errno}d";
LABEL_51:
        _os_log_impl(&dword_182FBE000, v25, v26, v27, buf, 0x18u);
      }
    }
    else
    {
      if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        v31 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446978;
            v36 = "handleUltraConstrained";
            v37 = 1024;
            *(_DWORD *)v38 = v7;
            *(_WORD *)&v38[4] = 1024;
            *(_DWORD *)&v38[6] = v16;
            *(_WORD *)&v38[10] = 2082;
            *(_QWORD *)&v38[12] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s ioctl(%d, SIOCSIFULTRACONSTRAINED, ...) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x22u);
          }

          free(backtrace_string);
          goto LABEL_53;
        }
        if (!v31)
          goto LABEL_52;
        *(_DWORD *)buf = 136446722;
        v36 = "handleUltraConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v7;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v16;
        v27 = "%{public}s ioctl(%d, SIOCSIFULTRACONSTRAINED, ...) failed %{darwin.errno}d, no backtrace";
        goto LABEL_51;
      }
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446722;
        v36 = "handleUltraConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v7;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v16;
        v27 = "%{public}s ioctl(%d, SIOCSIFULTRACONSTRAINED, ...) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_51;
      }
    }
LABEL_52:

    goto LABEL_53;
  }
  v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v36 = "handleUltraConstrained";
  v37 = 1024;
  *(_DWORD *)v38 = v10;
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (__nwlog_fault(v12, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v36 = "handleUltraConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d";
LABEL_35:
        v28 = v13;
        v29 = v14;
LABEL_36:
        _os_log_impl(&dword_182FBE000, v28, v29, v15, buf, 0x12u);
      }
    }
    else
    {
      if (v33)
      {
        v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v22 = type;
        v23 = os_log_type_enabled(v13, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446722;
            v36 = "handleUltraConstrained";
            v37 = 1024;
            *(_DWORD *)v38 = v10;
            *(_WORD *)&v38[4] = 2082;
            *(_QWORD *)&v38[6] = v21;
            _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          goto LABEL_38;
        }
        if (!v23)
          goto LABEL_37;
        *(_DWORD *)buf = 136446466;
        v36 = "handleUltraConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, no backtrace";
        v28 = v13;
        v29 = v22;
        goto LABEL_36;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v36 = "handleUltraConstrained";
        v37 = 1024;
        *(_DWORD *)v38 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_35;
      }
    }
LABEL_37:

  }
LABEL_38:
  v4 = v10;
  if (v12)
    free(v12);
LABEL_56:

  return v4;
}

uint64_t handleExpensive(void *a1)
{
  id v1;
  void *v2;
  const char *string;
  uint64_t v4;
  void *v5;
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  int v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  int v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  NSObject *v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  _BOOL4 v31;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  _BYTE v38[20];
  int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "request");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  string = xpc_dictionary_get_string(v2, (const char *)networkd_privileged_key_interface_name);

  v40 = 0u;
  v41 = 0u;
  if (!string || strlen(string) > 0x10)
  {
    v4 = 22;
    goto LABEL_56;
  }
  __strlcpy_chk();
  objc_msgSend(v1, "request");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v41) = xpc_dictionary_get_BOOL(v5, (const char *)networkd_privileged_key_expensive);

  v6 = socket(2, 2, 0);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = v6;
    if (ioctl(v6, 0xC02069A1uLL, &v40) != -1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v36 = "handleExpensive";
        *(_DWORD *)buf = 136446722;
        if ((_DWORD)v41)
          v9 = "Set";
        else
          v9 = "Cleared";
        v37 = 2082;
        *(_QWORD *)v38 = v9;
        *(_WORD *)&v38[8] = 2082;
        *(_QWORD *)&v38[10] = &v40;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully %{public}s expensive on %{public}s", buf, 0x20u);
      }

      v4 = 0;
LABEL_55:
      close(v7);
      goto LABEL_56;
    }
    v16 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = "set";
      v36 = "handleExpensive";
      *(_DWORD *)buf = 136446978;
      v37 = 2082;
      if (!(_DWORD)v41)
        v18 = "clear";
      *(_QWORD *)v38 = v18;
      *(_WORD *)&v38[8] = 2082;
      *(_QWORD *)&v38[10] = &v40;
      *(_WORD *)&v38[18] = 1024;
      v39 = v16;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Failed to %{public}s expensive on %{public}s: %{darwin.errno}d", buf, 0x26u);
    }
    v4 = v16;

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    v20 = v19;
    if (v16 == 6)
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v36 = "handleExpensive";
        v37 = 1024;
        *(_DWORD *)v38 = v7;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = 6;
        _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s ioctl(%d, SIOCSIFEXPENSIVE, ...) failed %{darwin.errno}d", buf, 0x18u);
      }

      goto LABEL_55;
    }
    *(_DWORD *)buf = 136446722;
    v36 = "handleExpensive";
    v37 = 1024;
    *(_DWORD *)v38 = v7;
    *(_WORD *)&v38[4] = 1024;
    *(_DWORD *)&v38[6] = v16;
    v24 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault((const char *)v24, &type, &v33))
    {
LABEL_53:
      if (v24)
        free(v24);
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446722;
        v36 = "handleExpensive";
        v37 = 1024;
        *(_DWORD *)v38 = v7;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v16;
        v27 = "%{public}s ioctl(%d, SIOCSIFEXPENSIVE, ...) failed %{darwin.errno}d";
LABEL_51:
        _os_log_impl(&dword_182FBE000, v25, v26, v27, buf, 0x18u);
      }
    }
    else
    {
      if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        v31 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446978;
            v36 = "handleExpensive";
            v37 = 1024;
            *(_DWORD *)v38 = v7;
            *(_WORD *)&v38[4] = 1024;
            *(_DWORD *)&v38[6] = v16;
            *(_WORD *)&v38[10] = 2082;
            *(_QWORD *)&v38[12] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s ioctl(%d, SIOCSIFEXPENSIVE, ...) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x22u);
          }

          free(backtrace_string);
          goto LABEL_53;
        }
        if (!v31)
          goto LABEL_52;
        *(_DWORD *)buf = 136446722;
        v36 = "handleExpensive";
        v37 = 1024;
        *(_DWORD *)v38 = v7;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v16;
        v27 = "%{public}s ioctl(%d, SIOCSIFEXPENSIVE, ...) failed %{darwin.errno}d, no backtrace";
        goto LABEL_51;
      }
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446722;
        v36 = "handleExpensive";
        v37 = 1024;
        *(_DWORD *)v38 = v7;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v16;
        v27 = "%{public}s ioctl(%d, SIOCSIFEXPENSIVE, ...) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_51;
      }
    }
LABEL_52:

    goto LABEL_53;
  }
  v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v36 = "handleExpensive";
  v37 = 1024;
  *(_DWORD *)v38 = v10;
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (__nwlog_fault(v12, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v36 = "handleExpensive";
        v37 = 1024;
        *(_DWORD *)v38 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d";
LABEL_35:
        v28 = v13;
        v29 = v14;
LABEL_36:
        _os_log_impl(&dword_182FBE000, v28, v29, v15, buf, 0x12u);
      }
    }
    else
    {
      if (v33)
      {
        v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v22 = type;
        v23 = os_log_type_enabled(v13, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446722;
            v36 = "handleExpensive";
            v37 = 1024;
            *(_DWORD *)v38 = v10;
            *(_WORD *)&v38[4] = 2082;
            *(_QWORD *)&v38[6] = v21;
            _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          goto LABEL_38;
        }
        if (!v23)
          goto LABEL_37;
        *(_DWORD *)buf = 136446466;
        v36 = "handleExpensive";
        v37 = 1024;
        *(_DWORD *)v38 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, no backtrace";
        v28 = v13;
        v29 = v22;
        goto LABEL_36;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v36 = "handleExpensive";
        v37 = 1024;
        *(_DWORD *)v38 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_35;
      }
    }
LABEL_37:

  }
LABEL_38:
  v4 = v10;
  if (v12)
    free(v12);
LABEL_56:

  return v4;
}

uint64_t handleSetupFakeEthernetPair(void *a1)
{
  id v1;
  void *v2;
  const char *string;
  void *v4;
  const char *v5;
  uint64_t v6;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  id v13;
  void *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *v18;
  _BOOL4 v19;
  void *v20;
  void *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  char v27;
  os_log_type_t v28;
  os_log_type_t type[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  char *v40;
  uint8_t buf[32];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];
  uint8_t *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "request");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  string = xpc_dictionary_get_string(v2, (const char *)networkd_privileged_key_interface_name);

  if (string)
  {
    if (strlen(string) <= 0x10)
    {
      objc_msgSend(v1, "request");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = xpc_dictionary_get_string(v4, (const char *)networkd_privileged_key_second_interface_name);

      if (v5)
      {
        if (strlen(v5) <= 0x10)
        {
          v8 = socket(2, 2, 0);
          if ((v8 & 0x80000000) == 0)
          {
            v9 = v8;
            LODWORD(v6) = setupFakeEthernet(v8, (uint64_t)string);
            if ((_DWORD)v6)
            {
LABEL_23:
              close(v9);
LABEL_32:
              v6 = (int)v6;
              goto LABEL_6;
            }
            v10 = setupFakeEthernet(v9, (uint64_t)v5);
            if (v10)
            {
              LODWORD(v6) = v10;
              v11 = v9;
              v12 = (uint64_t)string;
LABEL_11:
              teardownFakeEthernet(v11, v12);
              goto LABEL_23;
            }
            v50[0] = 0u;
            v48 = 0u;
            v49 = 0u;
            v46 = 0u;
            v47 = 0u;
            v44 = 0u;
            v45 = 0u;
            v42 = 0u;
            v43 = 0u;
            memset(buf, 0, sizeof(buf));
            __strlcpy_chk();
            v50[1] = xmmword_183C6F1A0;
            v51 = buf;
            __strlcpy_chk();
            if ((ioctl(v9, 0x8028697BuLL, v50) & 0x80000000) == 0)
            {
              LODWORD(v6) = 0;
              goto LABEL_23;
            }
            LODWORD(v6) = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
            __nwlog_obj();
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)type = 136447234;
            v30 = "handleSetupFakeEthernetPair";
            v31 = 1024;
            v32 = v9;
            v33 = 2082;
            v34 = string;
            v35 = 2082;
            v36 = v5;
            v37 = 1024;
            v38 = v6;
            v21 = (void *)_os_log_send_and_compose_impl();

            v28 = OS_LOG_TYPE_ERROR;
            v27 = 0;
            if (!__nwlog_fault((const char *)v21, &v28, &v27))
            {
LABEL_48:
              if (v21)
                free(v21);
              teardownFakeEthernet(v9, (uint64_t)string);
              v11 = v9;
              v12 = (uint64_t)v5;
              goto LABEL_11;
            }
            if (v28 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v22 = objc_claimAutoreleasedReturnValue();
              v23 = v28;
              if (os_log_type_enabled(v22, v28))
              {
                *(_DWORD *)type = 136447234;
                v30 = "handleSetupFakeEthernetPair";
                v31 = 1024;
                v32 = v9;
                v33 = 2082;
                v34 = string;
                v35 = 2082;
                v36 = v5;
                v37 = 1024;
                v38 = v6;
                v24 = "%{public}s ioctl(%d, SIOCSDRVSPEC, %{public}s<->%{public}s) failed %{darwin.errno}d";
LABEL_46:
                _os_log_impl(&dword_182FBE000, v22, v23, v24, (uint8_t *)type, 0x2Cu);
              }
            }
            else
            {
              if (v27)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v22 = objc_claimAutoreleasedReturnValue();
                v23 = v28;
                v26 = os_log_type_enabled(v22, v28);
                if (backtrace_string)
                {
                  if (v26)
                  {
                    *(_DWORD *)type = 136447490;
                    v30 = "handleSetupFakeEthernetPair";
                    v31 = 1024;
                    v32 = v9;
                    v33 = 2082;
                    v34 = string;
                    v35 = 2082;
                    v36 = v5;
                    v37 = 1024;
                    v38 = v6;
                    v39 = 2082;
                    v40 = backtrace_string;
                    _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s ioctl(%d, SIOCSDRVSPEC, %{public}s<->%{public}s) failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)type, 0x36u);
                  }

                  free(backtrace_string);
                  goto LABEL_48;
                }
                if (!v26)
                  goto LABEL_47;
                *(_DWORD *)type = 136447234;
                v30 = "handleSetupFakeEthernetPair";
                v31 = 1024;
                v32 = v9;
                v33 = 2082;
                v34 = string;
                v35 = 2082;
                v36 = v5;
                v37 = 1024;
                v38 = v6;
                v24 = "%{public}s ioctl(%d, SIOCSDRVSPEC, %{public}s<->%{public}s) failed %{darwin.errno}d, no backtrace";
                goto LABEL_46;
              }
              __nwlog_obj();
              v22 = objc_claimAutoreleasedReturnValue();
              v23 = v28;
              if (os_log_type_enabled(v22, v28))
              {
                *(_DWORD *)type = 136447234;
                v30 = "handleSetupFakeEthernetPair";
                v31 = 1024;
                v32 = v9;
                v33 = 2082;
                v34 = string;
                v35 = 2082;
                v36 = v5;
                v37 = 1024;
                v38 = v6;
                v24 = "%{public}s ioctl(%d, SIOCSDRVSPEC, %{public}s<->%{public}s) failed %{darwin.errno}d, backtrace limit exceeded";
                goto LABEL_46;
              }
            }
LABEL_47:

            goto LABEL_48;
          }
          LODWORD(v6) = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v13 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "handleSetupFakeEthernetPair";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v6;
          v14 = (void *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v50[0]) = 0;
          if (!__nwlog_fault((const char *)v14, type, v50))
          {
LABEL_30:
            if (v14)
              free(v14);
            goto LABEL_32;
          }
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v15 = objc_claimAutoreleasedReturnValue();
            v16 = type[0];
            if (os_log_type_enabled(v15, type[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "handleSetupFakeEthernetPair";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v6;
              v17 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d";
LABEL_28:
              _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0x12u);
            }
          }
          else
          {
            if (LOBYTE(v50[0]))
            {
              v18 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v15 = objc_claimAutoreleasedReturnValue();
              v16 = type[0];
              v19 = os_log_type_enabled(v15, type[0]);
              if (v18)
              {
                if (v19)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "handleSetupFakeEthernetPair";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v6;
                  *(_WORD *)&buf[18] = 2082;
                  *(_QWORD *)&buf[20] = v18;
                  _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
                }

                free(v18);
                goto LABEL_30;
              }
              if (!v19)
                goto LABEL_29;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "handleSetupFakeEthernetPair";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v6;
              v17 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, no backtrace";
              goto LABEL_28;
            }
            __nwlog_obj();
            v15 = objc_claimAutoreleasedReturnValue();
            v16 = type[0];
            if (os_log_type_enabled(v15, type[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "handleSetupFakeEthernetPair";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v6;
              v17 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, backtrace limit exceeded";
              goto LABEL_28;
            }
          }
LABEL_29:

          goto LABEL_30;
        }
      }
    }
  }
  v6 = 22;
LABEL_6:

  return v6;
}

uint64_t handleTeardownFakeEthernetPair(void *a1)
{
  id v1;
  void *v2;
  const char *string;
  void *v4;
  const char *v5;
  uint64_t v6;
  int v8;
  int v9;
  int v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "request");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  string = xpc_dictionary_get_string(v2, (const char *)networkd_privileged_key_interface_name);

  if (!string
    || strlen(string) > 0x10
    || (objc_msgSend(v1, "request"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = xpc_dictionary_get_string(v4, (const char *)networkd_privileged_key_second_interface_name),
        v4,
        !v5)
    || strlen(v5) > 0x10)
  {
    v6 = 22;
    goto LABEL_6;
  }
  v8 = socket(2, 2, 0);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = v8;
    teardownFakeEthernet(v8, (uint64_t)string);
    teardownFakeEthernet(v9, (uint64_t)v5);
    close(v9);
    v6 = 0;
    goto LABEL_6;
  }
  v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v21 = "handleTeardownFakeEthernetPair";
  v22 = 1024;
  v23 = v10;
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v12, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v21 = "handleTeardownFakeEthernetPair";
        v22 = 1024;
        v23 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d";
LABEL_22:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0x12u);
      }
    }
    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446722;
            v21 = "handleTeardownFakeEthernetPair";
            v22 = 1024;
            v23 = v10;
            v24 = 2082;
            v25 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v17)
          goto LABEL_23;
        *(_DWORD *)buf = 136446466;
        v21 = "handleTeardownFakeEthernetPair";
        v22 = 1024;
        v23 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, no backtrace";
        goto LABEL_22;
      }
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v21 = "handleTeardownFakeEthernetPair";
        v22 = 1024;
        v23 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_23:

  }
LABEL_24:
  v6 = v10;
  if (v12)
    free(v12);
LABEL_6:

  return v6;
}

uint64_t handleThroughputEstimates(void *a1)
{
  id v1;
  void *v2;
  const char *string;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  _BOOL4 v30;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  _BYTE v37[20];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "request");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  string = xpc_dictionary_get_string(v2, (const char *)networkd_privileged_key_interface_name);

  v38 = 0u;
  v39 = 0u;
  if (!string || strlen(string) > 0x10)
  {
    v4 = 22;
    goto LABEL_51;
  }
  __strlcpy_chk();
  objc_msgSend(v1, "request");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v39) = xpc_dictionary_get_uint64(v5, (const char *)networkd_privileged_key_upload);

  objc_msgSend(v1, "request");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  BYTE1(v39) = xpc_dictionary_get_uint64(v6, (const char *)networkd_privileged_key_download);

  v7 = socket(2, 2, 0);
  if ((v7 & 0x80000000) == 0)
  {
    v8 = v7;
    if (ioctl(v7, 0xC02069D4uLL, &v38) != -1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v35 = "handleThroughputEstimates";
        v36 = 2082;
        *(_QWORD *)v37 = &v38;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully set throughput estimate on %{public}s", buf, 0x16u);
      }

      v4 = 0;
LABEL_50:
      close(v8);
      goto LABEL_51;
    }
    v16 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      v35 = "handleThroughputEstimates";
      v36 = 2082;
      *(_QWORD *)v37 = &v38;
      *(_WORD *)&v37[8] = 1024;
      *(_DWORD *)&v37[10] = v16;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Failed to set throughput estimate on %{public}s: %{darwin.errno}d", buf, 0x1Cu);
    }
    v4 = v16;

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    v19 = v18;
    if (v16 == 6)
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v35 = "handleThroughputEstimates";
        v36 = 1024;
        *(_DWORD *)v37 = v8;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = 6;
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d", buf, 0x18u);
      }

      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446722;
    v35 = "handleThroughputEstimates";
    v36 = 1024;
    *(_DWORD *)v37 = v8;
    *(_WORD *)&v37[4] = 1024;
    *(_DWORD *)&v37[6] = v16;
    v23 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault((const char *)v23, &type, &v32))
    {
LABEL_48:
      if (v23)
        free(v23);
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446722;
        v35 = "handleThroughputEstimates";
        v36 = 1024;
        *(_DWORD *)v37 = v8;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = v16;
        v26 = "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d";
LABEL_46:
        _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0x18u);
      }
    }
    else
    {
      if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        v30 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446978;
            v35 = "handleThroughputEstimates";
            v36 = 1024;
            *(_DWORD *)v37 = v8;
            *(_WORD *)&v37[4] = 1024;
            *(_DWORD *)&v37[6] = v16;
            *(_WORD *)&v37[10] = 2082;
            *(_QWORD *)&v37[12] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x22u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (!v30)
          goto LABEL_47;
        *(_DWORD *)buf = 136446722;
        v35 = "handleThroughputEstimates";
        v36 = 1024;
        *(_DWORD *)v37 = v8;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = v16;
        v26 = "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d, no backtrace";
        goto LABEL_46;
      }
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446722;
        v35 = "handleThroughputEstimates";
        v36 = 1024;
        *(_DWORD *)v37 = v8;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = v16;
        v26 = "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_46;
      }
    }
LABEL_47:

    goto LABEL_48;
  }
  v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v35 = "handleThroughputEstimates";
  v36 = 1024;
  *(_DWORD *)v37 = v10;
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v32 = 0;
  if (__nwlog_fault(v12, &type, &v32))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v35 = "handleThroughputEstimates";
        v36 = 1024;
        *(_DWORD *)v37 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d";
LABEL_30:
        v27 = v13;
        v28 = v14;
LABEL_31:
        _os_log_impl(&dword_182FBE000, v27, v28, v15, buf, 0x12u);
      }
    }
    else
    {
      if (v32)
      {
        v20 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v21 = type;
        v22 = os_log_type_enabled(v13, type);
        if (v20)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446722;
            v35 = "handleThroughputEstimates";
            v36 = 1024;
            *(_DWORD *)v37 = v10;
            *(_WORD *)&v37[4] = 2082;
            *(_QWORD *)&v37[6] = v20;
            _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v20);
          goto LABEL_33;
        }
        if (!v22)
          goto LABEL_32;
        *(_DWORD *)buf = 136446466;
        v35 = "handleThroughputEstimates";
        v36 = 1024;
        *(_DWORD *)v37 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, no backtrace";
        v27 = v13;
        v28 = v21;
        goto LABEL_31;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v35 = "handleThroughputEstimates";
        v36 = 1024;
        *(_DWORD *)v37 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_30;
      }
    }
LABEL_32:

  }
LABEL_33:
  v4 = v10;
  if (v12)
    free(v12);
LABEL_51:

  return v4;
}

uint64_t handleRadioType(void *a1)
{
  id v1;
  void *v2;
  const char *string;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  _BOOL4 v30;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  _BYTE v37[20];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "request");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  string = xpc_dictionary_get_string(v2, (const char *)networkd_privileged_key_interface_name);

  v38 = 0u;
  v39 = 0u;
  if (!string || strlen(string) > 0x10)
  {
    v4 = 22;
    goto LABEL_51;
  }
  __strlcpy_chk();
  objc_msgSend(v1, "request");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v39) = xpc_dictionary_get_uint64(v5, (const char *)networkd_privileged_key_radio_type);

  objc_msgSend(v1, "request");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  BYTE1(v39) = xpc_dictionary_get_uint64(v6, (const char *)networkd_privileged_key_radio_channel);

  v7 = socket(2, 2, 0);
  if ((v7 & 0x80000000) == 0)
  {
    v8 = v7;
    if (ioctl(v7, 0xC02069D5uLL, &v38) != -1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v35 = "handleRadioType";
        v36 = 2082;
        *(_QWORD *)v37 = &v38;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully set radio type on %{public}s", buf, 0x16u);
      }

      v4 = 0;
LABEL_50:
      close(v8);
      goto LABEL_51;
    }
    v16 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      v35 = "handleRadioType";
      v36 = 2082;
      *(_QWORD *)v37 = &v38;
      *(_WORD *)&v37[8] = 1024;
      *(_DWORD *)&v37[10] = v16;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Failed to set radio type on %{public}s: %{darwin.errno}d", buf, 0x1Cu);
    }
    v4 = v16;

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    v19 = v18;
    if (v16 == 6)
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v35 = "handleRadioType";
        v36 = 1024;
        *(_DWORD *)v37 = v8;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = 6;
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d", buf, 0x18u);
      }

      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446722;
    v35 = "handleRadioType";
    v36 = 1024;
    *(_DWORD *)v37 = v8;
    *(_WORD *)&v37[4] = 1024;
    *(_DWORD *)&v37[6] = v16;
    v23 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault((const char *)v23, &type, &v32))
    {
LABEL_48:
      if (v23)
        free(v23);
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446722;
        v35 = "handleRadioType";
        v36 = 1024;
        *(_DWORD *)v37 = v8;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = v16;
        v26 = "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d";
LABEL_46:
        _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0x18u);
      }
    }
    else
    {
      if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        v30 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446978;
            v35 = "handleRadioType";
            v36 = 1024;
            *(_DWORD *)v37 = v8;
            *(_WORD *)&v37[4] = 1024;
            *(_DWORD *)&v37[6] = v16;
            *(_WORD *)&v37[10] = 2082;
            *(_QWORD *)&v37[12] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x22u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (!v30)
          goto LABEL_47;
        *(_DWORD *)buf = 136446722;
        v35 = "handleRadioType";
        v36 = 1024;
        *(_DWORD *)v37 = v8;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = v16;
        v26 = "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d, no backtrace";
        goto LABEL_46;
      }
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446722;
        v35 = "handleRadioType";
        v36 = 1024;
        *(_DWORD *)v37 = v8;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = v16;
        v26 = "%{public}s ioctl(%d, SIOCSIFCONSTRAINED, ...) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_46;
      }
    }
LABEL_47:

    goto LABEL_48;
  }
  v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v35 = "handleRadioType";
  v36 = 1024;
  *(_DWORD *)v37 = v10;
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v32 = 0;
  if (__nwlog_fault(v12, &type, &v32))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v35 = "handleRadioType";
        v36 = 1024;
        *(_DWORD *)v37 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d";
LABEL_30:
        v27 = v13;
        v28 = v14;
LABEL_31:
        _os_log_impl(&dword_182FBE000, v27, v28, v15, buf, 0x12u);
      }
    }
    else
    {
      if (v32)
      {
        v20 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v21 = type;
        v22 = os_log_type_enabled(v13, type);
        if (v20)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446722;
            v35 = "handleRadioType";
            v36 = 1024;
            *(_DWORD *)v37 = v10;
            *(_WORD *)&v37[4] = 2082;
            *(_QWORD *)&v37[6] = v20;
            _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v20);
          goto LABEL_33;
        }
        if (!v22)
          goto LABEL_32;
        *(_DWORD *)buf = 136446466;
        v35 = "handleRadioType";
        v36 = 1024;
        *(_DWORD *)v37 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, no backtrace";
        v27 = v13;
        v28 = v21;
        goto LABEL_31;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v35 = "handleRadioType";
        v36 = 1024;
        *(_DWORD *)v37 = v10;
        v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_30;
      }
    }
LABEL_32:

  }
LABEL_33:
  v4 = v10;
  if (v12)
    free(v12);
LABEL_51:

  return v4;
}

uint64_t handleRunProbes()
{
  void *v0;
  NSObject *v1;
  id v2;
  id v3;
  NSObject *v4;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  NSObject *v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  void *v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v0 = (void *)os_transaction_create();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v1 = (id)gLogObj;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "handleRunProbes";
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v0;
    _os_log_impl(&dword_182FBE000, v1, OS_LOG_TYPE_DEFAULT, "%{public}s created transaction %@", buf, 0x16u);
  }

  v2 = v0;
  if (v2)
  {
    v3 = +[ManagedNetworkSettings sharedMNS](ManagedNetworkSettings, "sharedMNS");
    objc_msgSend(v3, "queue");
    v4 = objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __runProbes_block_invoke;
    v19 = &unk_1E14ACFD0;
    v20 = v2;
    dispatch_async(v4, buf);

    goto LABEL_5;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "runProbes";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "runProbes";
        v10 = "%{public}s called with null transaction";
LABEL_17:
        v14 = v8;
        v15 = v9;
LABEL_18:
        _os_log_impl(&dword_182FBE000, v14, v15, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v12 = type;
        v13 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "runProbes";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s called with null transaction, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v13)
          goto LABEL_19;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "runProbes";
        v10 = "%{public}s called with null transaction, no backtrace";
        v14 = v8;
        v15 = v12;
        goto LABEL_18;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "runProbes";
        v10 = "%{public}s called with null transaction, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_19:

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_5:

  return 0;
}

void teardownFakeEthernet(int a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint32_t v8;
  int v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  NSObject *v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  int v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  _BYTE v26[14];
  __int16 v27;
  int v28;
  __int16 v29;
  char *v30;
  _OWORD v31[2];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  if (sysctlbyname("net.link.fake.nxattach", 0, 0, &v22, 4uLL))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "teardownFakeEthernet";
      v5 = "%{public}s Failed to clear sysctl to attach fake ethernet";
      v6 = v4;
      v7 = OS_LOG_TYPE_ERROR;
      v8 = 12;
LABEL_7:
      _os_log_impl(&dword_182FBE000, v6, v7, v5, buf, v8);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  memset(v31, 0, sizeof(v31));
  __strlcpy_chk();
  if ((ioctl(a1, 0x80206979uLL, v31) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v24 = "teardownFakeEthernet";
      v25 = 2082;
      *(_QWORD *)v26 = v31;
      v5 = "%{public}s Successfully destroyed interface %{public}s";
      v6 = v4;
      v7 = OS_LOG_TYPE_DEFAULT;
      v8 = 22;
      goto LABEL_7;
    }
LABEL_8:

    return;
  }
  v9 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  *(_DWORD *)buf = 136446978;
  v24 = "teardownFakeEthernet";
  v25 = 1024;
  *(_DWORD *)v26 = a1;
  *(_WORD *)&v26[4] = 2082;
  *(_QWORD *)&v26[6] = a2;
  v27 = 1024;
  v28 = v9;
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v11, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446978;
        v24 = "teardownFakeEthernet";
        v25 = 1024;
        *(_DWORD *)v26 = a1;
        *(_WORD *)&v26[4] = 2082;
        *(_QWORD *)&v26[6] = a2;
        v27 = 1024;
        v28 = v9;
        v14 = "%{public}s ioctl(%d, SIOCIFDESTROY, %{public}s) failed %{darwin.errno}d";
LABEL_21:
        v18 = v12;
        v19 = v13;
LABEL_22:
        _os_log_impl(&dword_182FBE000, v18, v19, v14, buf, 0x22u);
      }
    }
    else
    {
      if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v16 = type;
        v17 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136447234;
            v24 = "teardownFakeEthernet";
            v25 = 1024;
            *(_DWORD *)v26 = a1;
            *(_WORD *)&v26[4] = 2082;
            *(_QWORD *)&v26[6] = a2;
            v27 = 1024;
            v28 = v9;
            v29 = 2082;
            v30 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v16, "%{public}s ioctl(%d, SIOCIFDESTROY, %{public}s) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x2Cu);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v17)
          goto LABEL_23;
        *(_DWORD *)buf = 136446978;
        v24 = "teardownFakeEthernet";
        v25 = 1024;
        *(_DWORD *)v26 = a1;
        *(_WORD *)&v26[4] = 2082;
        *(_QWORD *)&v26[6] = a2;
        v27 = 1024;
        v28 = v9;
        v14 = "%{public}s ioctl(%d, SIOCIFDESTROY, %{public}s) failed %{darwin.errno}d, no backtrace";
        v18 = v12;
        v19 = v16;
        goto LABEL_22;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446978;
        v24 = "teardownFakeEthernet";
        v25 = 1024;
        *(_DWORD *)v26 = a1;
        *(_WORD *)&v26[4] = 2082;
        *(_QWORD *)&v26[6] = a2;
        v27 = 1024;
        v28 = v9;
        v14 = "%{public}s ioctl(%d, SIOCIFDESTROY, %{public}s) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
LABEL_23:

  }
LABEL_24:
  if (v11)
    free(v11);
}

uint64_t setupFakeEthernet(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  id v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  const char *v18;
  id v19;
  _BOOL4 v20;
  char *v21;
  _BOOL4 v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *v26;
  _BOOL4 v27;
  char v29;
  os_log_type_t type;
  int v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  _BYTE v35[14];
  __int16 v36;
  int v37;
  __int16 v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v31 = 1;
  v4 = sysctlbyname("net.link.fake.nxattach", 0, 0, &v31, 4uLL);
  if ((_DWORD)v4)
  {
    v5 = v4;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v33 = "setupFakeEthernet";
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s Failed to set sysctl to attach fake ethernet", buf, 0xCu);
    }

    return v5;
  }
  v40 = 0u;
  v41 = 0u;
  __strlcpy_chk();
  if (ioctl(a1, 0xC0206978uLL, &v40) < 0)
  {
    v5 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446978;
    v33 = "setupFakeEthernet";
    v34 = 1024;
    *(_DWORD *)v35 = a1;
    *(_WORD *)&v35[4] = 2082;
    *(_QWORD *)&v35[6] = a2;
    v36 = 1024;
    v37 = v5;
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v10, &type, &v29))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_72;
      *(_DWORD *)buf = 136446978;
      v33 = "setupFakeEthernet";
      v34 = 1024;
      *(_DWORD *)v35 = a1;
      *(_WORD *)&v35[4] = 2082;
      *(_QWORD *)&v35[6] = a2;
      v36 = 1024;
      v37 = v5;
      v13 = "%{public}s ioctl(%d, SIOCIFCREATE, %{public}s) failed %{darwin.errno}d";
LABEL_70:
      v24 = v11;
      v25 = v12;
      goto LABEL_71;
    }
    if (!v29)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_72;
      *(_DWORD *)buf = 136446978;
      v33 = "setupFakeEthernet";
      v34 = 1024;
      *(_DWORD *)v35 = a1;
      *(_WORD *)&v35[4] = 2082;
      *(_QWORD *)&v35[6] = a2;
      v36 = 1024;
      v37 = v5;
      v13 = "%{public}s ioctl(%d, SIOCIFCREATE, %{public}s) failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_70;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v16 = type;
    v17 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (!v17)
        goto LABEL_36;
      *(_DWORD *)buf = 136447234;
      v33 = "setupFakeEthernet";
      v34 = 1024;
      *(_DWORD *)v35 = a1;
      *(_WORD *)&v35[4] = 2082;
      *(_QWORD *)&v35[6] = a2;
      v36 = 1024;
      v37 = v5;
      v38 = 2082;
      v39 = backtrace_string;
      v18 = "%{public}s ioctl(%d, SIOCIFCREATE, %{public}s) failed %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_35;
    }
    if (!v17)
      goto LABEL_72;
    *(_DWORD *)buf = 136446978;
    v33 = "setupFakeEthernet";
    v34 = 1024;
    *(_DWORD *)v35 = a1;
    *(_WORD *)&v35[4] = 2082;
    *(_QWORD *)&v35[6] = a2;
    v36 = 1024;
    v37 = v5;
    v13 = "%{public}s ioctl(%d, SIOCIFCREATE, %{public}s) failed %{darwin.errno}d, no backtrace";
LABEL_56:
    v24 = v11;
    v25 = v16;
LABEL_71:
    _os_log_impl(&dword_182FBE000, v24, v25, v13, buf, 0x22u);
    goto LABEL_72;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v33 = "setupFakeEthernet";
    v34 = 2082;
    *(_QWORD *)v35 = &v40;
    _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully created interface %{public}s", buf, 0x16u);
  }

  if (ioctl(a1, 0xC0206950uLL, &v40) < 0)
  {
    v5 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446978;
    v33 = "setupFakeEthernet";
    v34 = 1024;
    *(_DWORD *)v35 = a1;
    *(_WORD *)&v35[4] = 2082;
    *(_QWORD *)&v35[6] = a2;
    v36 = 1024;
    v37 = v5;
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v10, &type, &v29))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_72;
      *(_DWORD *)buf = 136446978;
      v33 = "setupFakeEthernet";
      v34 = 1024;
      *(_DWORD *)v35 = a1;
      *(_WORD *)&v35[4] = 2082;
      *(_QWORD *)&v35[6] = a2;
      v36 = 1024;
      v37 = v5;
      v13 = "%{public}s ioctl(%d, SIOCPROTOATTACH, %{public}s) failed %{darwin.errno}d";
      goto LABEL_70;
    }
    if (!v29)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446978;
        v33 = "setupFakeEthernet";
        v34 = 1024;
        *(_DWORD *)v35 = a1;
        *(_WORD *)&v35[4] = 2082;
        *(_QWORD *)&v35[6] = a2;
        v36 = 1024;
        v37 = v5;
        v13 = "%{public}s ioctl(%d, SIOCPROTOATTACH, %{public}s) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_70;
      }
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v16 = type;
    v20 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (!v20)
        goto LABEL_36;
      *(_DWORD *)buf = 136447234;
      v33 = "setupFakeEthernet";
      v34 = 1024;
      *(_DWORD *)v35 = a1;
      *(_WORD *)&v35[4] = 2082;
      *(_QWORD *)&v35[6] = a2;
      v36 = 1024;
      v37 = v5;
      v38 = 2082;
      v39 = backtrace_string;
      v18 = "%{public}s ioctl(%d, SIOCPROTOATTACH, %{public}s) failed %{darwin.errno}d, dumping backtrace:%{public}s";
LABEL_35:
      _os_log_impl(&dword_182FBE000, v11, v16, v18, buf, 0x2Cu);
LABEL_36:

      free(backtrace_string);
      if (!v10)
        return v5;
      goto LABEL_74;
    }
    if (!v20)
      goto LABEL_72;
    *(_DWORD *)buf = 136446978;
    v33 = "setupFakeEthernet";
    v34 = 1024;
    *(_DWORD *)v35 = a1;
    *(_WORD *)&v35[4] = 2082;
    *(_QWORD *)&v35[6] = a2;
    v36 = 1024;
    v37 = v5;
    v13 = "%{public}s ioctl(%d, SIOCPROTOATTACH, %{public}s) failed %{darwin.errno}d, no backtrace";
    goto LABEL_56;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v8 = (id)gLogObj;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v33 = "setupFakeEthernet";
    v34 = 2082;
    *(_QWORD *)v35 = &v40;
    _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully attach proto to interface %{public}s", buf, 0x16u);
  }

  v40 = 0u;
  v41 = 0u;
  __strlcpy_chk();
  if ((ioctl(a1, 0xC0206911uLL, &v40) & 0x80000000) == 0)
  {
    if ((v41 & 1) != 0)
      return 0;
    LOWORD(v41) = v41 | 1;
    if ((ioctl(a1, 0x80206910uLL, &v40) & 0x80000000) == 0)
      return 0;
    v5 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446978;
    v33 = "setupFakeEthernet";
    v34 = 1024;
    *(_DWORD *)v35 = a1;
    *(_WORD *)&v35[4] = 2082;
    *(_QWORD *)&v35[6] = a2;
    v36 = 1024;
    v37 = v5;
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v10, &type, &v29))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446978;
        v33 = "setupFakeEthernet";
        v34 = 1024;
        *(_DWORD *)v35 = a1;
        *(_WORD *)&v35[4] = 2082;
        *(_QWORD *)&v35[6] = a2;
        v36 = 1024;
        v37 = v5;
        v13 = "%{public}s ioctl(%d, SIOCSIFFLAGS, %{public}s) failed %{darwin.errno}d";
        goto LABEL_70;
      }
    }
    else if (v29)
    {
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v27 = os_log_type_enabled(v11, type);
      if (v26)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136447234;
          v33 = "setupFakeEthernet";
          v34 = 1024;
          *(_DWORD *)v35 = a1;
          *(_WORD *)&v35[4] = 2082;
          *(_QWORD *)&v35[6] = a2;
          v36 = 1024;
          v37 = v5;
          v38 = 2082;
          v39 = v26;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s ioctl(%d, SIOCSIFFLAGS, %{public}s) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x2Cu);
        }

        free(v26);
LABEL_73:
        if (!v10)
          return v5;
LABEL_74:
        free(v10);
        return v5;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446978;
        v33 = "setupFakeEthernet";
        v34 = 1024;
        *(_DWORD *)v35 = a1;
        *(_WORD *)&v35[4] = 2082;
        *(_QWORD *)&v35[6] = a2;
        v36 = 1024;
        v37 = v5;
        v13 = "%{public}s ioctl(%d, SIOCSIFFLAGS, %{public}s) failed %{darwin.errno}d, no backtrace";
        goto LABEL_70;
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446978;
        v33 = "setupFakeEthernet";
        v34 = 1024;
        *(_DWORD *)v35 = a1;
        *(_WORD *)&v35[4] = 2082;
        *(_QWORD *)&v35[6] = a2;
        v36 = 1024;
        v37 = v5;
        v13 = "%{public}s ioctl(%d, SIOCSIFFLAGS, %{public}s) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_70;
      }
    }
LABEL_72:

    goto LABEL_73;
  }
  v5 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v19 = (id)gLogObj;
  *(_DWORD *)buf = 136446978;
  v33 = "setupFakeEthernet";
  v34 = 1024;
  *(_DWORD *)v35 = a1;
  *(_WORD *)&v35[4] = 2082;
  *(_QWORD *)&v35[6] = a2;
  v36 = 1024;
  v37 = v5;
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (!__nwlog_fault(v10, &type, &v29))
    goto LABEL_73;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v12 = type;
    if (!os_log_type_enabled(v11, type))
      goto LABEL_72;
    *(_DWORD *)buf = 136446978;
    v33 = "setupFakeEthernet";
    v34 = 1024;
    *(_DWORD *)v35 = a1;
    *(_WORD *)&v35[4] = 2082;
    *(_QWORD *)&v35[6] = a2;
    v36 = 1024;
    v37 = v5;
    v13 = "%{public}s ioctl(%d, SIOCGIFFLAGS, %{public}s) failed %{darwin.errno}d";
    goto LABEL_70;
  }
  if (!v29)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446978;
      v33 = "setupFakeEthernet";
      v34 = 1024;
      *(_DWORD *)v35 = a1;
      *(_WORD *)&v35[4] = 2082;
      *(_QWORD *)&v35[6] = a2;
      v36 = 1024;
      v37 = v5;
      v13 = "%{public}s ioctl(%d, SIOCGIFFLAGS, %{public}s) failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_70;
    }
    goto LABEL_72;
  }
  v21 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = type;
  v22 = os_log_type_enabled(v11, type);
  if (!v21)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446978;
      v33 = "setupFakeEthernet";
      v34 = 1024;
      *(_DWORD *)v35 = a1;
      *(_WORD *)&v35[4] = 2082;
      *(_QWORD *)&v35[6] = a2;
      v36 = 1024;
      v37 = v5;
      v13 = "%{public}s ioctl(%d, SIOCGIFFLAGS, %{public}s) failed %{darwin.errno}d, no backtrace";
      goto LABEL_70;
    }
    goto LABEL_72;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136447234;
    v33 = "setupFakeEthernet";
    v34 = 1024;
    *(_DWORD *)v35 = a1;
    *(_WORD *)&v35[4] = 2082;
    *(_QWORD *)&v35[6] = a2;
    v36 = 1024;
    v37 = v5;
    v38 = 2082;
    v39 = v21;
    _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s ioctl(%d, SIOCGIFFLAGS, %{public}s) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x2Cu);
  }

  free(v21);
  if (v10)
    goto LABEL_74;
  return v5;
}

uint64_t internalHandleSetNetworkAgentOnInterface(void *a1, int a2)
{
  id v3;
  void *v4;
  const uint8_t *uuid;
  void *v6;
  const char *string;
  void *v8;
  _BOOL4 v9;
  _BOOL8 v10;
  void *v11;
  const char *data;
  const char *v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  id v17;
  char *v18;
  NSObject *v19;
  unsigned __int8 v20;
  int v21;
  const char *v22;
  id v23;
  unsigned __int8 v24;
  int v25;
  const char *v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  int v30;
  const char *v31;
  _BOOL4 v32;
  int v33;
  int v34;
  int v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  int v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  int v43;
  uint64_t v45;
  char v46;
  _BYTE length[12];
  __int16 v48;
  int v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  const char *v55;
  os_log_type_t uu[24];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_msgSend(v3, "request");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  uuid = xpc_dictionary_get_uuid(v4, (const char *)networkd_privileged_key_agent_uuid);

  if (!uuid)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    *(_DWORD *)length = 136446466;
    *(_QWORD *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
    v48 = 1024;
    v49 = objc_msgSend(v3, "pid");
    LODWORD(v45) = 18;
    v18 = (char *)_os_log_send_and_compose_impl();

    uu[0] = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v18, uu, &v46))
      goto LABEL_51;
    if (uu[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v20 = uu[0];
      if (!os_log_type_enabled(v19, uu[0]))
        goto LABEL_42;
      v21 = objc_msgSend(v3, "pid", length, v45);
      *(_DWORD *)length = 136446466;
      *(_QWORD *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
      v48 = 1024;
      v49 = v21;
      v22 = "%{public}s Unable to extract agent UUID bytes from agent request from pid %d";
    }
    else
    {
      if (v46)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v28 = uu[0];
        v29 = os_log_type_enabled(v19, uu[0]);
        if (backtrace_string)
        {
          if (v29)
          {
            v30 = objc_msgSend(v3, "pid", length, v45);
            *(_DWORD *)length = 136446722;
            *(_QWORD *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
            v48 = 1024;
            v49 = v30;
            v50 = 2082;
            v51 = backtrace_string;
            v31 = "%{public}s Unable to extract agent UUID bytes from agent request from pid %d, dumping backtrace:%{public}s";
LABEL_29:
            _os_log_impl(&dword_182FBE000, v19, v28, v31, length, 0x1Cu);
          }
LABEL_30:

          free(backtrace_string);
          goto LABEL_51;
        }
        if (!v29)
        {
LABEL_42:

          if (!v18)
            goto LABEL_53;
          goto LABEL_52;
        }
        v38 = objc_msgSend(v3, "pid", length, v45);
        *(_DWORD *)length = 136446466;
        *(_QWORD *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
        v48 = 1024;
        v49 = v38;
        v22 = "%{public}s Unable to extract agent UUID bytes from agent request from pid %d, no backtrace";
        v36 = v19;
        v37 = v28;
LABEL_41:
        _os_log_impl(&dword_182FBE000, v36, v37, v22, length, 0x12u);
        goto LABEL_42;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v20 = uu[0];
      if (!os_log_type_enabled(v19, uu[0]))
        goto LABEL_42;
      v35 = objc_msgSend(v3, "pid", length, v45);
      *(_DWORD *)length = 136446466;
      *(_QWORD *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
      v48 = 1024;
      v49 = v35;
      v22 = "%{public}s Unable to extract agent UUID bytes from agent request from pid %d, backtrace limit exceeded";
    }
    v36 = v19;
    v37 = v20;
    goto LABEL_41;
  }
  objc_msgSend(v3, "request");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  string = xpc_dictionary_get_string(v6, (const char *)networkd_privileged_key_interface_name);

  if (!string)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = (id)gLogObj;
    *(_DWORD *)length = 136446466;
    *(_QWORD *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
    v48 = 1024;
    v49 = objc_msgSend(v3, "pid");
    LODWORD(v45) = 18;
    v18 = (char *)_os_log_send_and_compose_impl();

    uu[0] = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v18, uu, &v46))
      goto LABEL_51;
    if (uu[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v24 = uu[0];
      if (os_log_type_enabled(v19, uu[0]))
      {
        v25 = objc_msgSend(v3, "pid", length, v45);
        *(_DWORD *)length = 136446466;
        *(_QWORD *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
        v48 = 1024;
        v49 = v25;
        v26 = "%{public}s Unable to extract interface name from agent request from pid %d";
LABEL_48:
        v40 = v19;
        v41 = v24;
LABEL_49:
        _os_log_impl(&dword_182FBE000, v40, v41, v26, length, 0x12u);
        goto LABEL_50;
      }
      goto LABEL_50;
    }
    if (!v46)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v24 = uu[0];
      if (os_log_type_enabled(v19, uu[0]))
      {
        v39 = objc_msgSend(v3, "pid", length, v45);
        *(_DWORD *)length = 136446466;
        *(_QWORD *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
        v48 = 1024;
        v49 = v39;
        v26 = "%{public}s Unable to extract interface name from agent request from pid %d, backtrace limit exceeded";
        goto LABEL_48;
      }
LABEL_50:

LABEL_51:
      if (!v18)
      {
LABEL_53:
        v16 = 22;
        goto LABEL_61;
      }
LABEL_52:
      free(v18);
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    v28 = uu[0];
    v32 = os_log_type_enabled(v19, uu[0]);
    if (!backtrace_string)
    {
      if (!v32)
        goto LABEL_50;
      v42 = objc_msgSend(v3, "pid", length, v45);
      *(_DWORD *)length = 136446466;
      *(_QWORD *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
      v48 = 1024;
      v49 = v42;
      v26 = "%{public}s Unable to extract interface name from agent request from pid %d, no backtrace";
      v40 = v19;
      v41 = v28;
      goto LABEL_49;
    }
    if (v32)
    {
      v33 = objc_msgSend(v3, "pid", length, v45);
      *(_DWORD *)length = 136446722;
      *(_QWORD *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
      v48 = 1024;
      v49 = v33;
      v50 = 2082;
      v51 = backtrace_string;
      v31 = "%{public}s Unable to extract interface name from agent request from pid %d, dumping backtrace:%{public}s";
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  objc_msgSend(v3, "request");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = xpc_dictionary_get_BOOL(v8, (const char *)networkd_privileged_key_remove);

  *(_OWORD *)uu = *(_OWORD *)uuid;
  if (a2)
  {
    v10 = nw_network_agent_copy_dictionary_for_uuid((const unsigned __int8 *)uu);
    v11 = (void *)v10;
    if (!v10)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)length = 136446466;
        *(_QWORD *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
        v48 = 1024;
        v49 = objc_msgSend(v3, "pid");
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s Failed to find agent for request from pid %d", length, 0x12u);
      }
      v16 = 2;
      goto LABEL_37;
    }
    *(_QWORD *)length = 0;
    data = (const char *)xpc_dictionary_get_data((xpc_object_t)v10, "data", (size_t *)length);
    if (!data || *(_QWORD *)length < 0xD8uLL || (v13 = data, *(_QWORD *)length != *((unsigned int *)data + 53) + 216))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v34 = objc_msgSend(v3, "pid");
        *(_DWORD *)length = 136446466;
        *(_QWORD *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
        v48 = 1024;
        v49 = v34;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s Failed to parse agent for request from pid %d", length, 0x12u);
      }
      v16 = -1006;
      goto LABEL_37;
    }
    if (strncmp(data + 16, "Persistent", 0x20uLL) || strncmp(v13 + 48, "Persistent", 0x20uLL))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = objc_msgSend(v3, "pid");
        *(_DWORD *)length = 136447234;
        *(_QWORD *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
        v48 = 1024;
        v49 = v15;
        v50 = 2082;
        v51 = (void *)string;
        v52 = 2082;
        v53 = v13 + 16;
        v54 = 2082;
        v55 = v13 + 48;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s Client pid %d not allowed to modify agent on %{public}s (domain:%{public}s, type:%{public}s)", length, 0x30u);
      }
      v16 = 1;
LABEL_37:

      goto LABEL_61;
    }

  }
  if (v9)
    v43 = nw_network_agent_remove_from_interface((uint64_t)string, (unsigned __int8 *)uu);
  else
    v43 = nw_network_agent_add_to_interface((uint64_t)string, (unsigned __int8 *)uu);
  v16 = v43;
LABEL_61:

  return v16;
}

uint64_t internalHandleCreateKernelSocket(void *a1, uint64_t a2)
{
  id v3;
  int v4;
  int v5;
  int v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  int v12;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  int v18;
  id v19;
  os_log_type_t v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  id v28;
  void *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  char *backtrace_string;
  _BOOL4 v34;
  char *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  const char *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint32_t v47;
  char *v48;
  _BOOL4 v49;
  char *v50;
  _BOOL4 v51;
  xpc_object_t v52;
  NSObject *v53;
  NSObject *v54;
  int v55;
  void *v56;
  void *v57;
  NSObject *v58;
  os_log_type_t v59;
  const char *v60;
  char *v61;
  _BOOL4 v62;
  int v64;
  char v65;
  _BYTE v66[20];
  uint64_t v67;
  int v68;
  os_log_type_t type;
  os_log_type_t v70[4];
  const char *v71;
  __int16 v72;
  _BYTE v73[20];
  __int16 v74;
  _QWORD v75[3];
  uint8_t buf[48];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = socket(32, 2, 2);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = v4;
    v80 = 0;
    v78 = 0u;
    v79 = 0u;
    v77 = 0u;
    memset(buf, 0, sizeof(buf));
    __strlcpy_chk();
    if (ioctl(v5, 0xC0644E03uLL, buf) != -1)
    {
      *(_QWORD *)&v66[12] = 0;
      v67 = 0;
      v68 = 0;
      *(_DWORD *)v66 = 139296;
      *(_DWORD *)&v66[4] = *(_DWORD *)buf;
      *(_DWORD *)&v66[8] = 0;
      if (connect(v5, (const sockaddr *)v66, 0x20u))
      {
        v6 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        *(_DWORD *)v70 = 136447234;
        v71 = "createKernelSocket";
        v72 = 1024;
        *(_DWORD *)v73 = *(_DWORD *)buf;
        *(_WORD *)&v73[4] = 2082;
        *(_QWORD *)&v73[6] = &buf[4];
        *(_WORD *)&v73[14] = 1024;
        *(_DWORD *)&v73[16] = v5;
        v74 = 1024;
        LODWORD(v75[0]) = v6;
        v8 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v65 = 0;
        if (!__nwlog_fault(v8, &type, &v65))
          goto LABEL_64;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v9 = (id)gLogObj;
          v10 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)v70 = 136447234;
            v71 = "createKernelSocket";
            v72 = 1024;
            *(_DWORD *)v73 = *(_DWORD *)buf;
            *(_WORD *)&v73[4] = 2082;
            *(_QWORD *)&v73[6] = &buf[4];
            *(_WORD *)&v73[14] = 1024;
            *(_DWORD *)&v73[16] = v5;
            v74 = 1024;
            LODWORD(v75[0]) = v6;
            v11 = "%{public}s unable to connect to id %u for socket control name %{public}s on fd %d %{darwin.errno}d";
LABEL_61:
            v45 = v9;
            v46 = v10;
            v47 = 40;
            goto LABEL_62;
          }
        }
        else
        {
          if (v65)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v9 = (id)gLogObj;
            v10 = type;
            v34 = os_log_type_enabled(v9, type);
            if (backtrace_string)
            {
              if (v34)
              {
                *(_DWORD *)v70 = 136447490;
                v71 = "createKernelSocket";
                v72 = 1024;
                *(_DWORD *)v73 = *(_DWORD *)buf;
                *(_WORD *)&v73[4] = 2082;
                *(_QWORD *)&v73[6] = &buf[4];
                *(_WORD *)&v73[14] = 1024;
                *(_DWORD *)&v73[16] = v5;
                v74 = 1024;
                LODWORD(v75[0]) = v6;
                WORD2(v75[0]) = 2082;
                *(_QWORD *)((char *)v75 + 6) = backtrace_string;
                _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s unable to connect to id %u for socket control name %{public}s on fd %d %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)v70, 0x32u);
              }

              free(backtrace_string);
              if (!v8)
                goto LABEL_66;
              goto LABEL_65;
            }
            if (!v34)
              goto LABEL_63;
            *(_DWORD *)v70 = 136447234;
            v71 = "createKernelSocket";
            v72 = 1024;
            *(_DWORD *)v73 = *(_DWORD *)buf;
            *(_WORD *)&v73[4] = 2082;
            *(_QWORD *)&v73[6] = &buf[4];
            *(_WORD *)&v73[14] = 1024;
            *(_DWORD *)&v73[16] = v5;
            v74 = 1024;
            LODWORD(v75[0]) = v6;
            v11 = "%{public}s unable to connect to id %u for socket control name %{public}s on fd %d %{darwin.errno}d, no backtrace";
            goto LABEL_61;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v9 = (id)gLogObj;
          v10 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)v70 = 136447234;
            v71 = "createKernelSocket";
            v72 = 1024;
            *(_DWORD *)v73 = *(_DWORD *)buf;
            *(_WORD *)&v73[4] = 2082;
            *(_QWORD *)&v73[6] = &buf[4];
            *(_WORD *)&v73[14] = 1024;
            *(_DWORD *)&v73[16] = v5;
            v74 = 1024;
            LODWORD(v75[0]) = v6;
            v11 = "%{public}s unable to connect to id %u for socket control name %{public}s on fd %d %{darwin.errno}d, ba"
                  "cktrace limit exceeded";
            goto LABEL_61;
          }
        }
LABEL_63:

        goto LABEL_64;
      }
      v25 = fcntl(v5, 3, 0);
      if (v25 != -1)
      {
        v26 = v25;
        if (fcntl(v5, 4, v25 | 4u) != -1)
          goto LABEL_89;
        v27 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v28 = (id)gLogObj;
        *(_DWORD *)v70 = 136447234;
        v71 = "createKernelSocket";
        v72 = 1024;
        *(_DWORD *)v73 = v5;
        *(_WORD *)&v73[4] = 1024;
        *(_DWORD *)&v73[6] = v26;
        *(_WORD *)&v73[10] = 2082;
        *(_QWORD *)&v73[12] = &buf[4];
        v74 = 1024;
        LODWORD(v75[0]) = v27;
        v29 = (void *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v65 = 0;
        if (__nwlog_fault((const char *)v29, &type, &v65))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v30 = objc_claimAutoreleasedReturnValue();
            v31 = type;
            if (!os_log_type_enabled(v30, type))
              goto LABEL_118;
            *(_DWORD *)v70 = 136447234;
            v71 = "createKernelSocket";
            v72 = 1024;
            *(_DWORD *)v73 = v5;
            *(_WORD *)&v73[4] = 1024;
            *(_DWORD *)&v73[6] = v26;
            *(_WORD *)&v73[10] = 2082;
            *(_QWORD *)&v73[12] = &buf[4];
            v74 = 1024;
            LODWORD(v75[0]) = v27;
            v32 = "%{public}s fcntl(%d, F_SETFL, %d | O_NONBLOCK) failed for socket control name %{public}s %{darwin.errno}d";
            goto LABEL_117;
          }
          if (!v65)
          {
            __nwlog_obj();
            v30 = objc_claimAutoreleasedReturnValue();
            v31 = type;
            if (!os_log_type_enabled(v30, type))
              goto LABEL_118;
            *(_DWORD *)v70 = 136447234;
            v71 = "createKernelSocket";
            v72 = 1024;
            *(_DWORD *)v73 = v5;
            *(_WORD *)&v73[4] = 1024;
            *(_DWORD *)&v73[6] = v26;
            *(_WORD *)&v73[10] = 2082;
            *(_QWORD *)&v73[12] = &buf[4];
            v74 = 1024;
            LODWORD(v75[0]) = v27;
            v32 = "%{public}s fcntl(%d, F_SETFL, %d | O_NONBLOCK) failed for socket control name %{public}s %{darwin.errn"
                  "o}d, backtrace limit exceeded";
            goto LABEL_117;
          }
          v64 = v27;
          v50 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v31 = type;
          v51 = os_log_type_enabled(v30, type);
          if (!v50)
          {
            if (!v51)
              goto LABEL_118;
            *(_DWORD *)v70 = 136447234;
            v71 = "createKernelSocket";
            v72 = 1024;
            *(_DWORD *)v73 = v5;
            *(_WORD *)&v73[4] = 1024;
            *(_DWORD *)&v73[6] = v26;
            *(_WORD *)&v73[10] = 2082;
            *(_QWORD *)&v73[12] = &buf[4];
            v74 = 1024;
            LODWORD(v75[0]) = v64;
            v32 = "%{public}s fcntl(%d, F_SETFL, %d | O_NONBLOCK) failed for socket control name %{public}s %{darwin.errn"
                  "o}d, no backtrace";
LABEL_117:
            _os_log_impl(&dword_182FBE000, v30, v31, v32, (uint8_t *)v70, 0x28u);
LABEL_118:

            if (!v29)
              goto LABEL_89;
LABEL_88:
            free(v29);
            goto LABEL_89;
          }
          if (v51)
          {
            *(_DWORD *)v70 = 136447490;
            v71 = "createKernelSocket";
            v72 = 1024;
            *(_DWORD *)v73 = v5;
            *(_WORD *)&v73[4] = 1024;
            *(_DWORD *)&v73[6] = v26;
            *(_WORD *)&v73[10] = 2082;
            *(_QWORD *)&v73[12] = &buf[4];
            v74 = 1024;
            LODWORD(v75[0]) = v64;
            WORD2(v75[0]) = 2082;
            *(_QWORD *)((char *)v75 + 6) = v50;
            _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s fcntl(%d, F_SETFL, %d | O_NONBLOCK) failed for socket control name %{public}s %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)v70, 0x32u);
          }

          free(v50);
          if (v29)
            goto LABEL_88;
LABEL_89:
          v52 = xpc_fd_create(v5);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v53 = (id)gLogObj;
          v54 = v53;
          if (v52)
          {
            if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
            {
              v55 = objc_msgSend(v3, "pid");
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "internalHandleCreateKernelSocket";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v5;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = a2;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v55;
              _os_log_impl(&dword_182FBE000, v54, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully created kernel socket %d with name \"%{public}s\" for pid %d", buf, 0x22u);
            }

            objc_msgSend(v3, "reply");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            xpc_dictionary_set_value(v56, (const char *)networkd_privileged_key_kernel_socket_fd, v52);

            v24 = 0;
LABEL_113:
            close(v5);

            goto LABEL_114;
          }
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "internalHandleCreateKernelSocket";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v5;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = a2;
          v57 = (void *)_os_log_send_and_compose_impl();

          v70[0] = OS_LOG_TYPE_ERROR;
          v66[0] = 0;
          if (!__nwlog_fault((const char *)v57, v70, v66))
          {
LABEL_110:
            if (v57)
              free(v57);
            v24 = -1005;
            goto LABEL_113;
          }
          if (v70[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v58 = (id)gLogObj;
            v59 = v70[0];
            if (os_log_type_enabled(v58, v70[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "internalHandleCreateKernelSocket";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v5;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = a2;
              v60 = "%{public}s xpc_fd_create(%d) name \"%{public}s\" failed";
LABEL_108:
              _os_log_impl(&dword_182FBE000, v58, v59, v60, buf, 0x1Cu);
            }
          }
          else
          {
            if (v66[0])
            {
              v61 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v58 = objc_claimAutoreleasedReturnValue();
              v59 = v70[0];
              v62 = os_log_type_enabled(v58, v70[0]);
              if (v61)
              {
                if (v62)
                {
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "internalHandleCreateKernelSocket";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v5;
                  *(_WORD *)&buf[18] = 2082;
                  *(_QWORD *)&buf[20] = a2;
                  *(_WORD *)&buf[28] = 2082;
                  *(_QWORD *)&buf[30] = v61;
                  _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s xpc_fd_create(%d) name \"%{public}s\" failed, dumping backtrace:%{public}s", buf, 0x26u);
                }

                free(v61);
                goto LABEL_110;
              }
              if (!v62)
                goto LABEL_109;
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "internalHandleCreateKernelSocket";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v5;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = a2;
              v60 = "%{public}s xpc_fd_create(%d) name \"%{public}s\" failed, no backtrace";
              goto LABEL_108;
            }
            __nwlog_obj();
            v58 = objc_claimAutoreleasedReturnValue();
            v59 = v70[0];
            if (os_log_type_enabled(v58, v70[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "internalHandleCreateKernelSocket";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v5;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = a2;
              v60 = "%{public}s xpc_fd_create(%d) name \"%{public}s\" failed, backtrace limit exceeded";
              goto LABEL_108;
            }
          }
LABEL_109:

          goto LABEL_110;
        }
LABEL_87:
        if (!v29)
          goto LABEL_89;
        goto LABEL_88;
      }
      v40 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = (id)gLogObj;
      *(_DWORD *)v70 = 136446978;
      v71 = "createKernelSocket";
      v72 = 2082;
      *(_QWORD *)v73 = &buf[4];
      *(_WORD *)&v73[8] = 1024;
      *(_DWORD *)&v73[10] = v5;
      *(_WORD *)&v73[14] = 1024;
      *(_DWORD *)&v73[16] = v40;
      v29 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v65 = 0;
      if (!__nwlog_fault((const char *)v29, &type, &v65))
        goto LABEL_87;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v42 = (id)gLogObj;
        v43 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)v70 = 136446978;
          v71 = "createKernelSocket";
          v72 = 2082;
          *(_QWORD *)v73 = &buf[4];
          *(_WORD *)&v73[8] = 1024;
          *(_DWORD *)&v73[10] = v5;
          *(_WORD *)&v73[14] = 1024;
          *(_DWORD *)&v73[16] = v40;
          v44 = "%{public}s get flags failed for socket control name %{public}s on fd %d %{darwin.errno}d";
LABEL_85:
          _os_log_impl(&dword_182FBE000, v42, v43, v44, (uint8_t *)v70, 0x22u);
        }
      }
      else
      {
        if (v65)
        {
          v48 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = type;
          v49 = os_log_type_enabled(v42, type);
          if (v48)
          {
            if (v49)
            {
              *(_DWORD *)v70 = 136447234;
              v71 = "createKernelSocket";
              v72 = 2082;
              *(_QWORD *)v73 = &buf[4];
              *(_WORD *)&v73[8] = 1024;
              *(_DWORD *)&v73[10] = v5;
              *(_WORD *)&v73[14] = 1024;
              *(_DWORD *)&v73[16] = v40;
              v74 = 2082;
              v75[0] = v48;
              _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s get flags failed for socket control name %{public}s on fd %d %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)v70, 0x2Cu);
            }

            free(v48);
            if (v29)
              goto LABEL_88;
            goto LABEL_89;
          }
          if (!v49)
            goto LABEL_86;
          *(_DWORD *)v70 = 136446978;
          v71 = "createKernelSocket";
          v72 = 2082;
          *(_QWORD *)v73 = &buf[4];
          *(_WORD *)&v73[8] = 1024;
          *(_DWORD *)&v73[10] = v5;
          *(_WORD *)&v73[14] = 1024;
          *(_DWORD *)&v73[16] = v40;
          v44 = "%{public}s get flags failed for socket control name %{public}s on fd %d %{darwin.errno}d, no backtrace";
          goto LABEL_85;
        }
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)v70 = 136446978;
          v71 = "createKernelSocket";
          v72 = 2082;
          *(_QWORD *)v73 = &buf[4];
          *(_WORD *)&v73[8] = 1024;
          *(_DWORD *)&v73[10] = v5;
          *(_WORD *)&v73[14] = 1024;
          *(_DWORD *)&v73[16] = v40;
          v44 = "%{public}s get flags failed for socket control name %{public}s on fd %d %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_85;
        }
      }
LABEL_86:

      goto LABEL_87;
    }
    v18 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    *(_DWORD *)v70 = 136446978;
    v71 = "createKernelSocket";
    v72 = 2082;
    *(_QWORD *)v73 = &buf[4];
    *(_WORD *)&v73[8] = 1024;
    *(_DWORD *)&v73[10] = v5;
    *(_WORD *)&v73[14] = 1024;
    *(_DWORD *)&v73[16] = v18;
    v8 = (char *)_os_log_send_and_compose_impl();

    v66[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v8, v66, &type))
      goto LABEL_64;
    if (v66[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v20 = v66[0];
      if (!os_log_type_enabled(v9, (os_log_type_t)v66[0]))
        goto LABEL_63;
      *(_DWORD *)v70 = 136446978;
      v71 = "createKernelSocket";
      v72 = 2082;
      *(_QWORD *)v73 = &buf[4];
      *(_WORD *)&v73[8] = 1024;
      *(_DWORD *)&v73[10] = v5;
      *(_WORD *)&v73[14] = 1024;
      *(_DWORD *)&v73[16] = v18;
      v11 = "%{public}s unable to look up socket control name %{public}s on fd %d %{darwin.errno}d";
    }
    else
    {
      if (type)
      {
        v35 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v36 = v66[0];
        v37 = os_log_type_enabled(v9, (os_log_type_t)v66[0]);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)v70 = 136447234;
            v71 = "createKernelSocket";
            v72 = 2082;
            *(_QWORD *)v73 = &buf[4];
            *(_WORD *)&v73[8] = 1024;
            *(_DWORD *)&v73[10] = v5;
            *(_WORD *)&v73[14] = 1024;
            *(_DWORD *)&v73[16] = v18;
            v74 = 2082;
            v75[0] = v35;
            _os_log_impl(&dword_182FBE000, v9, v36, "%{public}s unable to look up socket control name %{public}s on fd %d %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)v70, 0x2Cu);
          }

          free(v35);
LABEL_64:
          if (!v8)
          {
LABEL_66:
            close(v5);
            v24 = -1004;
            goto LABEL_114;
          }
LABEL_65:
          free(v8);
          goto LABEL_66;
        }
        if (!v37)
          goto LABEL_63;
        *(_DWORD *)v70 = 136446978;
        v71 = "createKernelSocket";
        v72 = 2082;
        *(_QWORD *)v73 = &buf[4];
        *(_WORD *)&v73[8] = 1024;
        *(_DWORD *)&v73[10] = v5;
        *(_WORD *)&v73[14] = 1024;
        *(_DWORD *)&v73[16] = v18;
        v11 = "%{public}s unable to look up socket control name %{public}s on fd %d %{darwin.errno}d, no backtrace";
        v45 = v9;
        v46 = v36;
LABEL_58:
        v47 = 34;
LABEL_62:
        _os_log_impl(&dword_182FBE000, v45, v46, v11, (uint8_t *)v70, v47);
        goto LABEL_63;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v20 = v66[0];
      if (!os_log_type_enabled(v9, (os_log_type_t)v66[0]))
        goto LABEL_63;
      *(_DWORD *)v70 = 136446978;
      v71 = "createKernelSocket";
      v72 = 2082;
      *(_QWORD *)v73 = &buf[4];
      *(_WORD *)&v73[8] = 1024;
      *(_DWORD *)&v73[10] = v5;
      *(_WORD *)&v73[14] = 1024;
      *(_DWORD *)&v73[16] = v18;
      v11 = "%{public}s unable to look up socket control name %{public}s on fd %d %{darwin.errno}d, backtrace limit exceeded";
    }
    v45 = v9;
    v46 = v20;
    goto LABEL_58;
  }
  v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  *(_QWORD *)&buf[4] = "createKernelSocket";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  v14 = (char *)_os_log_send_and_compose_impl();

  v70[0] = OS_LOG_TYPE_ERROR;
  v66[0] = 0;
  if (__nwlog_fault(v14, v70, v66))
  {
    if (v70[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v16 = v70[0];
      if (!os_log_type_enabled(v15, v70[0]))
        goto LABEL_45;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "createKernelSocket";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      v17 = "%{public}s socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) failed %{darwin.errno}d";
LABEL_43:
      v38 = v15;
      v39 = v16;
      goto LABEL_44;
    }
    if (!v66[0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v16 = v70[0];
      if (!os_log_type_enabled(v15, v70[0]))
        goto LABEL_45;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "createKernelSocket";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      v17 = "%{public}s socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_43;
    }
    v21 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    v22 = v70[0];
    v23 = os_log_type_enabled(v15, v70[0]);
    if (!v21)
    {
      if (!v23)
      {
LABEL_45:

        if (!v14)
          goto LABEL_23;
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "createKernelSocket";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      v17 = "%{public}s socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) failed %{darwin.errno}d, no backtrace";
      v38 = v15;
      v39 = v22;
LABEL_44:
      _os_log_impl(&dword_182FBE000, v38, v39, v17, buf, 0x12u);
      goto LABEL_45;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "createKernelSocket";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v21;
      _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
    }

    free(v21);
  }
  if (v14)
LABEL_22:
    free(v14);
LABEL_23:
  v24 = -1004;
LABEL_114:

  return v24;
}

void NWPrivilegedHelperStart(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  _QWORD block[4];
  id v7;

  v1 = a1;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __NWPrivilegedHelperStart_block_invoke;
  block[3] = &unk_1E14ACFD0;
  v7 = v1;
  v2 = NWPrivilegedHelperStart_onceToken;
  v3 = v1;
  v5 = v3;
  if (v2 == -1)
  {
    v4 = v3;
  }
  else
  {
    dispatch_once(&NWPrivilegedHelperStart_onceToken, block);
    v4 = v7;
  }

}

void NWPrivilegedHelperHandleEvent(void *a1, const char *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  _QWORD block[4];
  id v7;

  v3 = a1;
  if (!strcmp(a2, "com.apple.fsevents.matching"))
  {
    v4 = +[ManagedNetworkSettings sharedMNS](ManagedNetworkSettings, "sharedMNS");
    objc_msgSend(v4, "queue");
    v5 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __handleEventForManagedNetworkSettings_block_invoke;
    block[3] = &unk_1E14ACFD0;
    v7 = v3;
    dispatch_async(v5, block);

  }
}

void sub_1837EB570(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1837EBBFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1837EFB10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL nw_remote_director_write_request(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  id v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  NSObject *v52;
  os_log_type_t v53;
  const char *v54;
  void *v55;
  os_log_type_t v56;
  _BYTE *v57;
  char *backtrace_string;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  NSObject *v62;
  os_log_type_t v63;
  const char *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  os_log_type_t v67;
  os_log_type_t v68;
  NSObject *v69;
  os_log_type_t v70;
  const char *v71;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  os_log_type_t type[8];
  uint64_t v82;
  _BYTE buf[28];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v75 = a1;
  v76 = a2;
  while (1)
  {
    objc_msgSend(v5, "data", v73, v74);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "length");

    objc_msgSend(v5, "data");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "clientID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v8;
    v11 = v9;
    v12 = objc_msgSend(v10, "length");
    v13 = objc_msgSend(v10, "bytes");
    if (!a1)
    {
      __nwlog_obj();
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_remote_director_write_one";
      LODWORD(v74) = 12;
      v73 = buf;
      v49 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v79) = 0;
      if (!__nwlog_fault(v49, type, &v79))
        goto LABEL_87;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v51 = type[0];
        if (os_log_type_enabled(v50, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_remote_director_write_one";
          v52 = v50;
          v53 = v51;
          v54 = "%{public}s called with null protocol";
LABEL_85:
          _os_log_impl(&dword_182FBE000, v52, v53, v54, buf, 0xCu);
        }
LABEL_86:

LABEL_87:
        if (!v49)
        {
LABEL_55:
          v20 = 0;
          goto LABEL_59;
        }
LABEL_88:
        free(v49);
        goto LABEL_55;
      }
      if (!(_BYTE)v79)
      {
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v67 = type[0];
        if (os_log_type_enabled(v50, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_remote_director_write_one";
          v52 = v50;
          v53 = v67;
          v54 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      v57 = v11;
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v59 = objc_claimAutoreleasedReturnValue();
      v60 = type[0];
      v61 = os_log_type_enabled(v59, type[0]);
      if (backtrace_string)
      {
        if (!v61)
          goto LABEL_79;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_remote_director_write_one";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v62 = v59;
        v63 = v60;
        v64 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_78;
      }
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_remote_director_write_one";
        v69 = v59;
        v70 = v60;
        v71 = "%{public}s called with null protocol, no backtrace";
LABEL_93:
        _os_log_impl(&dword_182FBE000, v69, v70, v71, buf, 0xCu);
      }
LABEL_94:

      v11 = v57;
      if (!v49)
        goto LABEL_55;
      goto LABEL_88;
    }
    if (!a2)
    {
      __nwlog_obj();
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_remote_director_write_one";
      LODWORD(v74) = 12;
      v73 = buf;
      v49 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v79) = 0;
      if (!__nwlog_fault(v49, type, &v79))
        goto LABEL_87;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v56 = type[0];
        if (os_log_type_enabled(v50, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_remote_director_write_one";
          v52 = v50;
          v53 = v56;
          v54 = "%{public}s called with null output_handler";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      if (!(_BYTE)v79)
      {
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v68 = type[0];
        if (os_log_type_enabled(v50, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_remote_director_write_one";
          v52 = v50;
          v53 = v68;
          v54 = "%{public}s called with null output_handler, backtrace limit exceeded";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      v57 = v11;
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v59 = objc_claimAutoreleasedReturnValue();
      v65 = type[0];
      v66 = os_log_type_enabled(v59, type[0]);
      if (backtrace_string)
      {
        if (!v66)
          goto LABEL_79;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_remote_director_write_one";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v62 = v59;
        v63 = v65;
        v64 = "%{public}s called with null output_handler, dumping backtrace:%{public}s";
LABEL_78:
        _os_log_impl(&dword_182FBE000, v62, v63, v64, buf, 0x16u);
LABEL_79:

        free(backtrace_string);
        v11 = v57;
        if (!v49)
          goto LABEL_55;
        goto LABEL_88;
      }
      if (v66)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_remote_director_write_one";
        v69 = v59;
        v70 = v65;
        v71 = "%{public}s called with null output_handler, no backtrace";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    v14 = v13;
    *(_QWORD *)type = 0;
    v82 = 0;
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, os_log_type_t *))(*(_QWORD *)(a2 + 24)
                                                                                                  + 88))(a2, a1, 1, v12, 1, type);
    v16 = *(void **)type;
    if (!*(_QWORD *)type || !v15)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v43 = (id)gLogObj;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_remote_director_write_one";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v12;
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v11;
        _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s Failed to write %u bytes for %{public}@", buf, 0x1Cu);
      }

      goto LABEL_55;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v77 = v11;
    v78 = v7;
    if (v11)
    {
      v17 = v11;
      v11 = buf;
      objc_msgSend(v17, "getUUIDBytes:", buf);
      v16 = *(void **)type;
    }
    v79 = 0;
    v80 = &v79;
    v18 = v16;
    if (v18)
    {
      v19 = (uint64_t)v18;
      v20 = 0;
      if (!v11)
      {
        while (1)
        {
          v33 = *(void **)(v19 + 32);
          if (!v33 && !*(_QWORD *)(v19 + 40))
            v33 = 0;
          v34 = v33;
          v35 = *(_QWORD *)(v19 + 112);
          if (v35)
          {
            if ((*(_WORD *)(v19 + 204) & 0x100) == 0
              || !g_channel_check_validity
              || g_channel_check_validity(v19, *(_QWORD *)(v19 + 88)))
            {
              LODWORD(v35) = *(_DWORD *)(v19 + 52);
              v36 = *(unsigned int *)(v19 + 56);
              if ((_DWORD)v35)
                LODWORD(v35) = v35 - (v36 + *(_DWORD *)(v19 + 60));
              v37 = (void *)(*(_QWORD *)(v19 + 112) + v36);
              goto LABEL_47;
            }
            LODWORD(v35) = 0;
          }
          v37 = 0;
LABEL_47:
          if (v35 >= v12 - v20)
            v38 = v12 - v20;
          else
            v38 = v35;
          memcpy(v37, (const void *)(v14 + v20), v38);
          nw_frame_claim(v19, v39, v38, 0);
          nw_frame_collapse(v19);
          nw_frame_unclaim(v19, v40, v38, 0);
          v41 = *(_QWORD *)(v19 + 32);
          v42 = *(_QWORD **)(v19 + 40);
          if (v41)
          {
            *(_QWORD *)(v41 + 40) = v42;
            v42 = *(_QWORD **)(v19 + 40);
          }
          else
          {
            v82 = *(_QWORD *)(v19 + 40);
          }
          v20 += v38;
          *v42 = v41;
          v32 = v80;
          *(_QWORD *)(v19 + 32) = 0;
          *(_QWORD *)(v19 + 40) = v32;
          *v32 = v19;
          v80 = (uint64_t *)(v19 + 32);

          v19 = (uint64_t)v34;
          if (!v34)
            goto LABEL_57;
        }
      }
      while (2)
      {
        v22 = *(void **)(v19 + 32);
        if (!v22 && !*(_QWORD *)(v19 + 40))
          v22 = 0;
        v23 = v22;
        if ((*(_WORD *)(v19 + 204) & 0x100) != 0 && g_channel_set_flow_handler)
          g_channel_set_flow_handler(v19, v11);
        v24 = *(_QWORD *)(v19 + 112);
        if (v24)
        {
          if ((*(_WORD *)(v19 + 204) & 0x100) == 0
            || !g_channel_check_validity
            || g_channel_check_validity(v19, *(_QWORD *)(v19 + 88)))
          {
            LODWORD(v24) = *(_DWORD *)(v19 + 52);
            v25 = *(unsigned int *)(v19 + 56);
            if ((_DWORD)v24)
              LODWORD(v24) = v24 - (v25 + *(_DWORD *)(v19 + 60));
            v26 = (void *)(*(_QWORD *)(v19 + 112) + v25);
LABEL_28:
            if (v24 >= v12 - v20)
              v27 = v12 - v20;
            else
              v27 = v24;
            memcpy(v26, (const void *)(v14 + v20), v27);
            nw_frame_claim(v19, v28, v27, 0);
            nw_frame_collapse(v19);
            nw_frame_unclaim(v19, v29, v27, 0);
            v30 = *(_QWORD *)(v19 + 32);
            v31 = *(_QWORD **)(v19 + 40);
            if (v30)
            {
              *(_QWORD *)(v30 + 40) = v31;
              v31 = *(_QWORD **)(v19 + 40);
            }
            else
            {
              v82 = *(_QWORD *)(v19 + 40);
            }
            v20 += v27;
            *v31 = v30;
            v21 = v80;
            *(_QWORD *)(v19 + 32) = 0;
            *(_QWORD *)(v19 + 40) = v21;
            *v21 = v19;
            v80 = (uint64_t *)(v19 + 32);

            v19 = (uint64_t)v23;
            if (!v23)
              goto LABEL_57;
            continue;
          }
          LODWORD(v24) = 0;
        }
        break;
      }
      v26 = 0;
      goto LABEL_28;
    }
    v20 = 0;
LABEL_57:
    a2 = v76;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(v76 + 24) + 96))(v76, &v79);
    v44 = *(_QWORD *)type;
    a1 = v75;
    v11 = v77;
    v7 = v78;
    if (*(_QWORD *)type)
    {
      do
      {
        v45 = *(_QWORD *)(v44 + 32);
        nw_frame_finalize(v44);
        v44 = v45;
      }
      while (v45);
    }
LABEL_59:

    if (!v20 || v7 <= v20)
      break;
    objc_msgSend(v5, "data");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "subdataWithRange:", v20, v7 - v20);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setData:", v47);

  }
  return v20 != 0;
}

uint64_t nw_remote_director_input_available(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  unsigned int (*v12)(uint64_t, _QWORD);
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v2 = a1;
  v40 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v37 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id *))(*(_QWORD *)(a2 + 24) + 80))(a2, a1, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, &v36);
  if ((_DWORD)result)
  {
    v4 = (_QWORD *)&unk_1ECD85000;
    v30 = v2;
    do
    {
      v35 = *(id *)(v2 + 40);
      v32 = objc_msgSend(v35, "maximumDataChunkSize");
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v36;
      v39 = 0uLL;
      if (!v8)
      {
        v5 = 0;
        goto LABEL_4;
      }
      v9 = (uint64_t)v8;
      v6 = 0;
      v34 = 0;
      v5 = 0;
      do
      {
        v10 = *(void **)(v9 + 32);
        if (!v10 && !*(_QWORD *)(v9 + 40))
          v10 = 0;
        v11 = v10;
        if (!*(_QWORD *)(v9 + 112))
          goto LABEL_43;
        if ((*(_WORD *)(v9 + 204) & 0x100) != 0)
        {
          v12 = (unsigned int (*)(uint64_t, _QWORD))v4[19];
          if (v12)
          {
            if (!v12(v9, *(_QWORD *)(v9 + 88)))
              goto LABEL_43;
          }
        }
        v13 = *(_DWORD *)(v9 + 52);
        if (!v13)
          goto LABEL_43;
        v14 = *(unsigned int *)(v9 + 56);
        v15 = v14 + *(_DWORD *)(v9 + 60);
        v16 = (v13 - v15);
        if (v13 == v15)
          goto LABEL_43;
        v17 = *(_QWORD *)(v9 + 112);
        if (!v17)
          goto LABEL_43;
        v18 = 0;
        v38 = 0uLL;
        if ((*(_WORD *)(v9 + 204) & 0x100) != 0)
        {
          v19 = 0;
          if (g_channel_get_flow_handler)
          {
            g_channel_get_flow_handler(v9, &v38);
            v18 = *((_QWORD *)&v38 + 1);
            v19 = v38;
          }
        }
        else
        {
          v19 = 0;
        }
        v20 = v19 == (_QWORD)v39 && v18 == *((_QWORD *)&v39 + 1);
        v21 = v20;
        if (v20 && objc_msgSend(v6, "length") + (unint64_t)v16 <= v32)
          goto LABEL_37;
        if (v6 && v5)
        {
          objc_msgSend(v35, "createSendDataMessageForClientID:data:receiveWindow:", v5, v6, 0);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "addObject:", v22);

          v6 = 0;
        }
        if ((v21 & 1) != 0)
        {
LABEL_37:
          v23 = v34;
        }
        else
        {
          v39 = v38;
          v24 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", &v39);

          v23 = objc_msgSend(v35, "dataModeForFlowID:", v24);
          v5 = (void *)v24;
        }
        v34 = v23;
        v4 = &unk_1ECD85000;
        if (v23 == 2)
        {
          if (!v6)
          {
            objc_msgSend(MEMORY[0x1E0C99DF0], "data");
            v6 = (void *)objc_claimAutoreleasedReturnValue();
          }
          objc_msgSend(v6, "appendBytes:length:", v17 + v14, v16, v30);
LABEL_43:
          v25 = *(_QWORD *)(v9 + 32);
          v26 = *(_QWORD **)(v9 + 40);
          if (!v25)
            goto LABEL_8;
          goto LABEL_44;
        }
        objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v17 + v14, v16);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "createSendDataMessageForClientID:data:receiveWindow:", v5, v27, 0);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "addObject:", v28);

        v25 = *(_QWORD *)(v9 + 32);
        v26 = *(_QWORD **)(v9 + 40);
        if (!v25)
        {
LABEL_8:
          v37 = v26;
          goto LABEL_9;
        }
LABEL_44:
        *(_QWORD *)(v25 + 40) = v26;
        v26 = *(_QWORD **)(v9 + 40);
LABEL_9:
        *v26 = v25;
        *(_QWORD *)(v9 + 32) = 0;
        *(_QWORD *)(v9 + 40) = 0;
        nw_frame_finalize(v9);

        v9 = (uint64_t)v11;
      }
      while (v11);
      if (v6)
      {
        v2 = v30;
        if (v5)
        {
          objc_msgSend(v35, "createSendDataMessageForClientID:data:receiveWindow:", v5, v6, 0);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "addObject:", v29);

LABEL_4:
          v6 = 0;
        }
      }
      else
      {
        v2 = v30;
      }
      objc_msgSend(v35, "delegate", v30);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "sendRemoteCommands:", v33);

      v36 = 0;
      v37 = 0;
      result = (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 24) + 80))();
    }
    while ((_DWORD)result);
  }
  return result;
}

void nw_remote_director_output_available(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id obj;

  obj = *(id *)(a1 + 40);
  objc_sync_enter(obj);
  while (1)
  {
    objc_msgSend(obj, "writeRequests");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "count");

    if (!v5)
      break;
    objc_msgSend(obj, "writeRequests");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "firstObject");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!nw_remote_director_write_request(a1, a2, v7))
    {

      break;
    }
    objc_msgSend(obj, "writeRequests");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "removeObjectAtIndex:", 0);

  }
  objc_sync_exit(obj);

}

void sub_1837F0AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t areNSSetsEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (!objc_msgSend(v3, "count"))
  {

    v3 = 0;
  }
  if (objc_msgSend(v4, "count"))
  {
    v5 = v3 == v4;
    if (v3 != v4 && v4 && v3)
      v5 = objc_msgSend(v3, "isEqualToSet:", v4);
  }
  else
  {

    v4 = 0;
    v5 = v3 == 0;
  }

  return v5;
}

void sub_1837F2B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F2D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F2F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F30C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F325C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F33F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F35BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F3844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F3A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F3C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F3E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F4058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F4244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F44C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F4710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F4910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F4AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1837F4CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__43487(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__43488(uint64_t a1)
{

}

void sub_1837F4FC0(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1837F4FD4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void __isWebKitNetworking_block_invoke()
{
  void *v0;
  void *v1;
  int v2;

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "bundleIdentifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "hasPrefix:", CFSTR("com.apple.WebKit.Networking"));

  if (v2)
    isWebKitNetworking_result = 1;
}

uint64_t nw_protocol_registrar_get_accept_function_for_identifier(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v7;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_registrar_get_accept_function_for_identifier";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v9, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_protocol_registrar_get_accept_function_for_identifier";
          v12 = "%{public}s called with null identifier";
LABEL_35:
          _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v10 = __nwlog_obj();
        v11 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_protocol_registrar_get_accept_function_for_identifier";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_36;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_protocol_registrar_get_accept_function_for_identifier";
          v12 = "%{public}s called with null identifier, no backtrace";
          goto LABEL_35;
        }
      }
      else
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_protocol_registrar_get_accept_function_for_identifier";
          v12 = "%{public}s called with null identifier, backtrace limit exceeded";
          goto LABEL_35;
        }
      }
    }
LABEL_36:
    if (v9)
      free(v9);
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v2 = &g_registration_list;
  while (1)
  {
    v2 = (uint64_t *)*v2;
    if (!v2)
      break;
    if (*a1 == v2[4] && a1[1] == v2[5] && a1[2] == v2[6] && a1[3] == v2[7] && a1[4] == v2[8])
    {
      v7 = v2[13];
      goto LABEL_20;
    }
  }
  v7 = 0;
LABEL_20:
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  return v7;
}

BOOL nw_protocol_register_many_to_one(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  _BOOL8 v7;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  char *backtrace_string;
  _BOOL4 v27;
  char *v28;
  _BOOL4 v29;
  _BOOL8 result;
  NSObject *v31;
  void *v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  nw_allow_use_of_dispatch_internal();
  if (*(_DWORD *)(a1 + 36) != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v36 = "nw_protocol_register_many_to_one";
    v37 = 2082;
    v38 = a1;
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v16, &type, &v33))
      goto LABEL_51;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_51;
      *(_DWORD *)buf = 136446466;
      v36 = "nw_protocol_register_many_to_one";
      v37 = 2082;
      v38 = a1;
      v19 = "%{public}s Protocol identifier %{public}s is not a many-to-one protocol";
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      v18 = type;
      v27 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446722;
          v36 = "nw_protocol_register_many_to_one";
          v37 = 2082;
          v38 = a1;
          v39 = 2082;
          v40 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s Protocol identifier %{public}s is not a many-to-one protocol, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(backtrace_string);
LABEL_51:
        if (v16)
          free(v16);
        return 0;
      }
      if (!v27)
        goto LABEL_51;
      *(_DWORD *)buf = 136446466;
      v36 = "nw_protocol_register_many_to_one";
      v37 = 2082;
      v38 = a1;
      v19 = "%{public}s Protocol identifier %{public}s is not a many-to-one protocol, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_51;
      *(_DWORD *)buf = 136446466;
      v36 = "nw_protocol_register_many_to_one";
      v37 = 2082;
      v38 = a1;
      v19 = "%{public}s Protocol identifier %{public}s is not a many-to-one protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0x16u);
    goto LABEL_51;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v6 = &g_registration_list;
  while (1)
  {
    v6 = (uint64_t *)*v6;
    v7 = v6 == 0;
    if (!v6)
      break;
    if (*(_QWORD *)a1 == v6[4]
      && *(_QWORD *)(a1 + 8) == v6[5]
      && *(_QWORD *)(a1 + 16) == v6[6]
      && *(_QWORD *)(a1 + 24) == v6[7]
      && *(_QWORD *)(a1 + 32) == v6[8])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      v36 = "nw_protocol_register_many_to_one";
      v37 = 2082;
      v38 = a1;
      v12 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v33 = 0;
      if (!__nwlog_fault(v12, &type, &v33))
        goto LABEL_59;
      if (type != OS_LOG_TYPE_FAULT)
      {
        if (v33)
        {
          v28 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v13 = gLogObj;
          v14 = type;
          v29 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v28)
          {
            if (v29)
            {
              *(_DWORD *)buf = 136446722;
              v36 = "nw_protocol_register_many_to_one";
              v37 = 2082;
              v38 = a1;
              v39 = 2082;
              v40 = (uint64_t)v28;
              _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s Protocol identifier %{public}s is already registered, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v28);
            goto LABEL_59;
          }
          if (!v29)
            goto LABEL_59;
          *(_DWORD *)buf = 136446466;
          v36 = "nw_protocol_register_many_to_one";
          v37 = 2082;
          v38 = a1;
          v15 = "%{public}s Protocol identifier %{public}s is already registered, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v13 = gLogObj;
          v14 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_59;
          *(_DWORD *)buf = 136446466;
          v36 = "nw_protocol_register_many_to_one";
          v37 = 2082;
          v38 = a1;
          v15 = "%{public}s Protocol identifier %{public}s is already registered, backtrace limit exceeded";
        }
LABEL_58:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0x16u);
        goto LABEL_59;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = gLogObj;
      v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v36 = "nw_protocol_register_many_to_one";
        v37 = 2082;
        v38 = a1;
        v15 = "%{public}s Protocol identifier %{public}s is already registered";
        goto LABEL_58;
      }
LABEL_59:
      if (v12)
        free(v12);
LABEL_61:
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
      return v7;
    }
  }
  v20 = malloc_type_calloc(1uLL, 0x78uLL, 0xEAFB8F1AuLL);
  if (v20)
  {
LABEL_27:
    v21 = *(_OWORD *)a1;
    v22 = *(_OWORD *)(a1 + 16);
    v20[8] = *(_QWORD *)(a1 + 32);
    *((_OWORD *)v20 + 2) = v21;
    *((_OWORD *)v20 + 3) = v22;
    v20[11] = a2;
    v20[13] = a3;
    v23 = g_registration_list;
    *v20 = g_registration_list;
    if (v23)
      *(_QWORD *)(v23 + 8) = v20;
    g_registration_list = (uint64_t)v20;
    v20[1] = &g_registration_list;
    if (a3)
    {
      v24 = g_many_to_one_list;
      v20[2] = g_many_to_one_list;
      if (v24)
        *(_QWORD *)(v24 + 24) = v20 + 2;
      g_many_to_one_list = (uint64_t)v20;
      v20[3] = &g_many_to_one_list;
    }
    v20[9] = nw_array_create();
    if (gLogDatapath)
    {
      v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v36 = "nw_protocol_register_many_to_one";
        v37 = 2080;
        v38 = a1;
        _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s created new registration for many-to-one protocol %s", buf, 0x16u);
      }
    }
    goto LABEL_61;
  }
  v31 = __nwlog_obj();
  os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v36 = "strict_calloc";
  v37 = 2048;
  v38 = 1;
  v39 = 2048;
  v40 = 120;
  v32 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v32);
  if (!result)
  {
    free(v32);
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

BOOL nw_protocol_unregister(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  int v12;
  const char *v13;
  __int16 v14;
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  nw_allow_use_of_dispatch_internal();
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v2 = &g_registration_list;
  while (1)
  {
    v2 = (uint64_t *)*v2;
    if (!v2)
      break;
    if (*a1 == v2[4] && a1[1] == v2[5] && a1[2] == v2[6] && a1[3] == v2[7] && a1[4] == v2[8])
    {
      v7 = *v2;
      if (*v2)
        *(_QWORD *)(v7 + 8) = v2[1];
      *(_QWORD *)v2[1] = v7;
      v8 = v2[2];
      if (v8)
        *(_QWORD *)(v8 + 24) = v2[3];
      *(_QWORD *)v2[3] = v8;
      v9 = (void *)v2[14];
      if (v9)
      {
        os_release(v9);
        v2[14] = 0;
      }
      free(v2);
      goto LABEL_26;
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    v12 = 136446466;
    v13 = "nw_protocol_unregister";
    v14 = 2082;
    v15 = a1;
    _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s Protocol %{public}s is not registered", (uint8_t *)&v12, 0x16u);
  }
LABEL_26:
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  return v2 != 0;
}

BOOL nw_protocol_is_registered(_QWORD *a1)
{
  uint64_t *v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  _BOOL8 v7;

  nw_allow_use_of_dispatch_internal();
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v2 = &g_registration_list;
  do
  {
    v2 = (uint64_t *)*v2;
    if (!v2)
      break;
    v3 = *a1 == v2[4] && a1[1] == v2[5];
    v4 = v3 && a1[2] == v2[6];
    v5 = v4 && a1[3] == v2[7];
  }
  while (!v5 || a1[4] != v2[8]);
  v7 = v2 != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  return v7;
}

uint64_t nw_protocol_create(uint64_t a1, void *a2, const char *a3)
{
  return nw_protocol_create_internal(a1, a2, a3, 1);
}

uint64_t nw_protocol_copy_shared_connection_state(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  dispatch_queue_t *v7;
  dispatch_queue_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  char *backtrace_string;
  _BOOL4 v25;
  const char *v26;
  _BOOL4 v27;
  _QWORD v28[9];
  char v29;
  char v30;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_copy_shared_connection_state";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v20, &type, &v30))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_copy_shared_connection_state";
        v23 = "%{public}s called with null protocol";
LABEL_54:
        _os_log_impl(&dword_182FBE000, v21, v22, v23, buf, 0xCu);
      }
LABEL_55:
      if (v20)
        free(v20);
      return 0;
    }
    if (!v30)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_copy_shared_connection_state";
        v23 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type;
    v25 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_copy_shared_connection_state";
        v23 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_copy_shared_connection_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v26 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v21, v22, v26, buf, 0x16u);
    }
LABEL_45:
    free(backtrace_string);
    goto LABEL_55;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_copy_shared_connection_state";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v20, &type, &v30))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_copy_shared_connection_state";
        v23 = "%{public}s called with null context";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (!v30)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_copy_shared_connection_state";
        v23 = "%{public}s called with null context, backtrace limit exceeded";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type;
    v27 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_copy_shared_connection_state";
        v23 = "%{public}s called with null context, no backtrace";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_copy_shared_connection_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v26 = "%{public}s called with null context, dumping backtrace:%{public}s";
      goto LABEL_44;
    }
    goto LABEL_45;
  }
  v7 = a3;
  v8 = v7;
  if (((_BYTE)v7[17] & 8) == 0)
    dispatch_assert_queue_V2(v7[1]);

  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  v33 = 0;
  v9 = MEMORY[0x1E0C809B0];
  v10 = a1;
  do
  {
    if (*(_QWORD *)(*(_QWORD *)&buf[8] + 24))
      break;
    v11 = *(_QWORD *)(v10 + 16);
    if (*(_DWORD *)(v11 + 36) == 2)
    {
      v12 = &g_registration_list;
      while (1)
      {
        v12 = (uint64_t *)*v12;
        if (!v12)
          break;
        if (*(_QWORD *)v11 == v12[4]
          && *(_QWORD *)(v11 + 8) == v12[5]
          && *(_QWORD *)(v11 + 16) == v12[6]
          && *(_QWORD *)(v11 + 24) == v12[7]
          && *(_QWORD *)(v11 + 32) == v12[8])
        {
          v17 = (unsigned __int8 *)v12[9];
          v28[0] = v9;
          v28[1] = 0x40000000;
          v28[2] = __nw_protocol_copy_shared_connection_state_block_invoke;
          v28[3] = &unk_1E14A2280;
          v28[4] = buf;
          v28[5] = v10;
          v28[6] = a1;
          v28[7] = a2;
          v28[8] = v8;
          v29 = a4;
          nw_array_apply(v17, (uint64_t)v28);
          break;
        }
      }
    }
    v10 = *(_QWORD *)(v10 + 32);
  }
  while (v10);
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v18 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
  _Block_object_dispose(buf, 8);
  return v18;
}

void sub_1837F9324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL __nw_protocol_copy_shared_connection_state_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char v8;
  os_unfair_lock_s *v9;
  id v10;
  id v11;
  void *v12;
  dispatch_queue_t *v13;
  dispatch_queue_t *v14;
  void (**v15)(_QWORD);
  id v16;
  id v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  id v22;
  os_log_type_t v23;
  id v24;
  os_log_type_t v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  _BOOL4 v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  os_log_type_t type[8];
  os_log_type_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;
  char v43;
  _BYTE aBlock[24];
  void *v45;
  os_unfair_lock_s *v46;
  dispatch_queue_t *v47;
  id v48;
  os_log_type_t *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = nw_endpoint_copy_registrar_for_identifier(a3, *(__int128 **)(*(_QWORD *)(a1 + 40) + 16), 0);
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 48);
    v5 = *(void **)(a1 + 56);
    v7 = *(void **)(a1 + 64);
    v8 = *(_BYTE *)(a1 + 72);
    v9 = (os_unfair_lock_s *)v4;
    v10 = v5;
    v11 = v7;
    v12 = v11;
    if (v6)
    {
      if (v10)
      {
        if (v11)
        {
          v13 = (dispatch_queue_t *)v11;
          v14 = v13;
          if (((_BYTE)v13[17] & 8) == 0)
            dispatch_assert_queue_V2(v13[1]);

          *(_QWORD *)type = 0;
          v38 = type;
          v39 = 0x3032000000;
          v40 = __Block_byref_object_copy__3855;
          v41 = __Block_byref_object_dispose__3856;
          v42 = 0;
          *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
          *(_QWORD *)&aBlock[8] = 3221225472;
          *(_QWORD *)&aBlock[16] = __nw_protocol_instance_registrar_copy_shared_connection_state_block_invoke;
          v45 = &unk_1E149AB10;
          v46 = v9;
          v50 = v6;
          v51 = v8;
          v47 = v14;
          v48 = v10;
          v49 = type;
          v15 = (void (**)(_QWORD))_Block_copy(aBlock);
          os_unfair_lock_lock(v9 + 2);
          v15[2](v15);
          os_unfair_lock_unlock(v9 + 2);

          v16 = *((id *)v38 + 5);
          _Block_object_dispose(type, 8);

          goto LABEL_8;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
        v19 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v43 = 0;
        if (__nwlog_fault(v19, type, &v43))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v20 = (id)gLogObj;
            v25 = type[0];
            if (os_log_type_enabled(v20, type[0]))
            {
              *(_DWORD *)aBlock = 136446210;
              *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
              _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null context", aBlock, 0xCu);
            }
LABEL_58:

            goto LABEL_59;
          }
          if (!v43)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v20 = (id)gLogObj;
            v36 = type[0];
            if (os_log_type_enabled(v20, type[0]))
            {
              *(_DWORD *)aBlock = 136446210;
              *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
              _os_log_impl(&dword_182FBE000, v20, v36, "%{public}s called with null context, backtrace limit exceeded", aBlock, 0xCu);
            }
            goto LABEL_58;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v20 = (id)gLogObj;
          v32 = type[0];
          v33 = os_log_type_enabled(v20, type[0]);
          if (!backtrace_string)
          {
            if (v33)
            {
              *(_DWORD *)aBlock = 136446210;
              *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
              _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null context, no backtrace", aBlock, 0xCu);
            }
            goto LABEL_58;
          }
          if (v33)
          {
            *(_DWORD *)aBlock = 136446466;
            *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
            *(_WORD *)&aBlock[12] = 2082;
            *(_QWORD *)&aBlock[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null context, dumping backtrace:%{public}s", aBlock, 0x16u);
          }

          free(backtrace_string);
        }
LABEL_59:
        if (!v19)
        {
LABEL_61:
          v16 = 0;
LABEL_8:

          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v16;
          os_release(v9);
          return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
        }
LABEL_60:
        free(v19);
        goto LABEL_61;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      *(_DWORD *)aBlock = 136446210;
      *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
      v19 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v43 = 0;
      if (!__nwlog_fault(v19, type, &v43))
        goto LABEL_59;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v23 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)aBlock = 136446210;
          *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
          _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null definition", aBlock, 0xCu);
        }
        goto LABEL_58;
      }
      if (!v43)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v35 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)aBlock = 136446210;
          *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
          _os_log_impl(&dword_182FBE000, v20, v35, "%{public}s called with null definition, backtrace limit exceeded", aBlock, 0xCu);
        }
        goto LABEL_58;
      }
      v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      v29 = type[0];
      v30 = os_log_type_enabled(v20, type[0]);
      if (!v26)
      {
        if (v30)
        {
          *(_DWORD *)aBlock = 136446210;
          *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
          _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s called with null definition, no backtrace", aBlock, 0xCu);
        }
        goto LABEL_58;
      }
      if (v30)
      {
        *(_DWORD *)aBlock = 136446466;
        *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
        *(_WORD *)&aBlock[12] = 2082;
        *(_QWORD *)&aBlock[14] = v26;
        _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s called with null definition, dumping backtrace:%{public}s", aBlock, 0x16u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      *(_DWORD *)aBlock = 136446210;
      *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
      v19 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v43 = 0;
      if (!__nwlog_fault(v19, type, &v43))
        goto LABEL_59;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v21 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)aBlock = 136446210;
          *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null protocol", aBlock, 0xCu);
        }
        goto LABEL_58;
      }
      if (!v43)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v34 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)aBlock = 136446210;
          *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
          _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null protocol, backtrace limit exceeded", aBlock, 0xCu);
        }
        goto LABEL_58;
      }
      v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      v27 = type[0];
      v28 = os_log_type_enabled(v20, type[0]);
      if (!v26)
      {
        if (v28)
        {
          *(_DWORD *)aBlock = 136446210;
          *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
          _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null protocol, no backtrace", aBlock, 0xCu);
        }
        goto LABEL_58;
      }
      if (v28)
      {
        *(_DWORD *)aBlock = 136446466;
        *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
        *(_WORD *)&aBlock[12] = 2082;
        *(_QWORD *)&aBlock[14] = v26;
        _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null protocol, dumping backtrace:%{public}s", aBlock, 0x16u);
      }
    }

    free(v26);
    if (!v19)
      goto LABEL_61;
    goto LABEL_60;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_1837F9CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25,id a26,id a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Block_object_dispose(&a14, 8);
  _Unwind_Resume(a1);
}

void nw_protocol_enumerate_instances(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char *v16;
  _BOOL4 v17;
  _QWORD v18[6];
  char v19;
  os_log_type_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_enumerate_instances";
    v10 = (char *)_os_log_send_and_compose_impl();
    v20 = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v10, &v20, &v19))
      goto LABEL_49;
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = v20;
      if (!os_log_type_enabled(v11, v20))
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_enumerate_instances";
      v13 = "%{public}s called with null identifier";
      goto LABEL_48;
    }
    if (!v19)
    {
      v11 = __nwlog_obj();
      v12 = v20;
      if (!os_log_type_enabled(v11, v20))
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_enumerate_instances";
      v13 = "%{public}s called with null identifier, backtrace limit exceeded";
      goto LABEL_48;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = v20;
    v15 = os_log_type_enabled(v11, v20);
    if (!backtrace_string)
    {
      if (!v15)
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_enumerate_instances";
      v13 = "%{public}s called with null identifier, no backtrace";
      goto LABEL_48;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_enumerate_instances";
      v23 = 2082;
      v24 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_49:
    if (!v10)
      return;
    goto LABEL_50;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_enumerate_instances";
    v10 = (char *)_os_log_send_and_compose_impl();
    v20 = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v10, &v20, &v19))
      goto LABEL_49;
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = v20;
      if (!os_log_type_enabled(v11, v20))
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_enumerate_instances";
      v13 = "%{public}s called with null enumerator";
      goto LABEL_48;
    }
    if (!v19)
    {
      v11 = __nwlog_obj();
      v12 = v20;
      if (!os_log_type_enabled(v11, v20))
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_enumerate_instances";
      v13 = "%{public}s called with null enumerator, backtrace limit exceeded";
      goto LABEL_48;
    }
    v16 = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = v20;
    v17 = os_log_type_enabled(v11, v20);
    if (v16)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v22 = "nw_protocol_enumerate_instances";
        v23 = 2082;
        v24 = v16;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v16);
      if (!v10)
        return;
LABEL_50:
      free(v10);
      return;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_enumerate_instances";
      v13 = "%{public}s called with null enumerator, no backtrace";
LABEL_48:
      _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
      goto LABEL_49;
    }
    goto LABEL_49;
  }
  nw_allow_use_of_dispatch_internal();
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v4 = &g_registration_list;
  while (1)
  {
    v4 = (uint64_t *)*v4;
    if (!v4)
      break;
    if (*a1 == v4[4] && a1[1] == v4[5] && a1[2] == v4[6] && a1[3] == v4[7] && a1[4] == v4[8])
    {
      v9 = (unsigned __int8 *)v4[9];
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 0x40000000;
      v18[2] = __nw_protocol_enumerate_instances_block_invoke;
      v18[3] = &unk_1E14A22A8;
      v18[4] = a2;
      v18[5] = a1;
      nw_array_apply(v9, (uint64_t)v18);
      break;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
}

uint64_t __nw_protocol_enumerate_instances_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  __int128 *v4;
  id v5;
  id v6;
  void *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  void (**v10)(_QWORD);
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  id v16;
  os_log_type_t v17;
  id v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  _BYTE aBlock[24];
  void *v34;
  os_unfair_lock_s *v35;
  id v36;
  __int128 *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(a1 + 32);
  v4 = *(__int128 **)(a1 + 40);
  v5 = a3;
  v6 = v3;
  v7 = v6;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    *(_DWORD *)aBlock = 136446210;
    *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null registered_endpoint", aBlock, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v21 = type;
      v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)aBlock = 136446466;
          *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
          *(_WORD *)&aBlock[12] = 2082;
          *(_QWORD *)&aBlock[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null registered_endpoint, dumping backtrace:%{public}s", aBlock, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v13)
          goto LABEL_7;
LABEL_58:
        free(v13);
        goto LABEL_7;
      }
      if (v22)
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null registered_endpoint, no backtrace", aBlock, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null registered_endpoint, backtrace limit exceeded", aBlock, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    *(_DWORD *)aBlock = 136446210;
    *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null identifier", aBlock, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null identifier, backtrace limit exceeded", aBlock, 0xCu);
      }
      goto LABEL_56;
    }
    v23 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v24 = type;
    v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null identifier, no backtrace", aBlock, 0xCu);
      }
      goto LABEL_56;
    }
    if (v25)
    {
      *(_DWORD *)aBlock = 136446466;
      *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
      *(_WORD *)&aBlock[12] = 2082;
      *(_QWORD *)&aBlock[14] = v23;
      _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null identifier, dumping backtrace:%{public}s", aBlock, 0x16u);
    }
    goto LABEL_37;
  }
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    *(_DWORD *)aBlock = 136446210;
    *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null enumerator", aBlock, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
        _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null enumerator, backtrace limit exceeded", aBlock, 0xCu);
      }
      goto LABEL_56;
    }
    v23 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v26 = type;
    v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null enumerator, no backtrace", aBlock, 0xCu);
      }
      goto LABEL_56;
    }
    if (v27)
    {
      *(_DWORD *)aBlock = 136446466;
      *(_QWORD *)&aBlock[4] = "nw_protocol_instance_registrar_enumerate_instances";
      *(_WORD *)&aBlock[12] = 2082;
      *(_QWORD *)&aBlock[14] = v23;
      _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null enumerator, dumping backtrace:%{public}s", aBlock, 0x16u);
    }
LABEL_37:

    free(v23);
    if (!v13)
      goto LABEL_7;
    goto LABEL_58;
  }
  v8 = (os_unfair_lock_s *)nw_endpoint_copy_registrar_for_identifier(v5, v4, 0);
  v9 = v8;
  if (v8)
  {
    *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock[8] = 3221225472;
    *(_QWORD *)&aBlock[16] = __nw_protocol_instance_registrar_enumerate_instances_block_invoke;
    v34 = &unk_1E14AAAF0;
    v35 = v8;
    v37 = v4;
    v36 = v7;
    v10 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v9 + 2);
    v10[2](v10);
    os_unfair_lock_unlock(v9 + 2);

  }
LABEL_7:

  return 1;
}

void sub_1837FAA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

BOOL nw_protocol_register_parameter_modifier(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BOOL8 result;
  NSObject *v5;
  void *v6;

  nw_allow_use_of_dispatch_internal();
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_modify_lock);
  v2 = malloc_type_calloc(1uLL, 0x18uLL, 0xEAFB8F1AuLL);
  if (!v2)
  {
    v5 = __nwlog_obj();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    v6 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v6);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v6);
  }
  v2[2] = a1;
  v3 = g_modifier_list;
  *v2 = g_modifier_list;
  if (v3)
    *(_QWORD *)(v3 + 8) = v2;
  g_modifier_list = (uint64_t)v2;
  v2[1] = &g_modifier_list;
  has_modifiers = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_modify_lock);
  return 1;
}

const char *nw_protocol_notification_type_to_string(unsigned int a1)
{
  if (a1 > 0x19)
    return "unknown";
  else
    return off_1E14A22C8[a1];
}

BOOL nw_protocol_input_handler_is_connection_flow(uint64_t a1)
{
  const char *v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v12 = "nw_protocol_input_handler_is_connection_flow";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v9 = 0;
    if (!__nwlog_fault(v3, &type, &v9))
      goto LABEL_20;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v12 = "nw_protocol_input_handler_is_connection_flow";
      v6 = "%{public}s called with null input_handler";
    }
    else if (v9)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v12 = "nw_protocol_input_handler_is_connection_flow";
          v13 = 2082;
          v14 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null input_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_20;
      }
      if (!v8)
      {
LABEL_20:
        if (v3)
          free(v3);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v12 = "nw_protocol_input_handler_is_connection_flow";
      v6 = "%{public}s called with null input_handler, no backtrace";
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v12 = "nw_protocol_input_handler_is_connection_flow";
      v6 = "%{public}s called with null input_handler, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_20;
  }
  v1 = *(const char **)(a1 + 16);
  if (!v1)
    return 0;
  return !strcmp(*(const char **)(a1 + 16), "endpoint_flow") || strcmp(v1, "flow_replay") == 0;
}

const char *nw_protocol_input_handler_is_flow_replay(uint64_t a1)
{
  const char *result;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    result = *(const char **)(a1 + 16);
    if (result)
      return (const char *)(strcmp(result, "flow_replay") == 0);
    return result;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "nw_protocol_input_handler_is_flow_replay";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_protocol_input_handler_is_flow_replay";
        v5 = "%{public}s called with null input_handler";
LABEL_18:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "nw_protocol_input_handler_is_flow_replay";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null input_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_19;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_protocol_input_handler_is_flow_replay";
        v5 = "%{public}s called with null input_handler, no backtrace";
        goto LABEL_18;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_protocol_input_handler_is_flow_replay";
        v5 = "%{public}s called with null input_handler, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
  }
LABEL_19:
  if (v2)
    free(v2);
  return 0;
}

void __nw_utilities_set_log_intercept_block_invoke(uint64_t a1)
{
  BOOL v1;
  BOOL v2;
  void *v3;
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint8_t buf[4];
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 32))
    v1 = nw_utilities_set_log_intercept::stream == 0;
  else
    v1 = 0;
  if (v1)
  {
    if (nw_utilities_get_log_event_source(void)::once != -1)
      dispatch_once(&nw_utilities_get_log_event_source(void)::once, &__block_literal_global_35_43778);
    v4 = (id)nw_utilities_get_log_event_source(void)::source;
    if (v4)
    {
      gotLoadHelper_x8__OBJC_CLASS___OSLogEventLiveStream(v5);
      v7 = objc_msgSend(objc_alloc(*(Class *)(v6 + 1664)), "initWithLiveSource:", v4);
      v8 = (void *)nw_utilities_set_log_intercept::stream;
      nw_utilities_set_log_intercept::stream = v7;

      objc_msgSend((id)nw_utilities_set_log_intercept::stream, "setFlags:", 7);
      objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("processIdentifier == %d && subsystem == \"com.apple.network\""), getpid());
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)nw_utilities_set_log_intercept::stream, "setFilterPredicate:", v9);

      objc_msgSend((id)nw_utilities_set_log_intercept::stream, "setStreamHandler:", &__block_literal_global_43781);
      objc_msgSend((id)nw_utilities_set_log_intercept::stream, "activate");
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_utilities_set_log_intercept_block_invoke";
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s Unable to start intercept, no log source", buf, 0xCu);
      }

    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 32))
      v2 = 1;
    else
      v2 = nw_utilities_set_log_intercept::stream == 0;
    if (!v2)
    {
      objc_msgSend((id)nw_utilities_set_log_intercept::stream, "invalidate");
      v3 = (void *)nw_utilities_set_log_intercept::stream;
      nw_utilities_set_log_intercept::stream = 0;

    }
  }
}

void sub_1837FB274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void __nw_utilities_set_log_intercept_block_invoke_3(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v3 = a2;
  objc_msgSend(v3, "composedMessage");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  __nwlog_handle_composed(objc_msgSend(v2, "UTF8String"), objc_msgSend(v3, "unixDate"));

}

void sub_1837FB2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL33nw_utilities_get_log_event_sourcev_block_invoke(double a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  gotLoadHelper_x19__OBJC_CLASS___OSLogEventLiveSource(a1);
  if (objc_opt_class())
  {
    v2 = objc_alloc_init(*(Class *)(v1 + 1640));
    v3 = (void *)nw_utilities_get_log_event_source(void)::source;
    nw_utilities_get_log_event_source(void)::source = (uint64_t)v2;

  }
}

void *nw_utilities_public_key_info_for_sec_identity(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  __SecIdentity *v3;
  __SecIdentity *v4;
  OSStatus v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  SecKeyRef v14;
  void *v15;
  id v16;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  void *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  _BOOL4 v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  os_log_type_t v47;
  os_log_type_t v48;
  os_log_type_t v49;
  os_log_type_t v50;
  char v51;
  SecKeyRef privateKeyRef;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  char *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_utilities_public_key_info_for_sec_identity";
    v19 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(privateKeyRef) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v19, &privateKeyRef, &type))
      goto LABEL_112;
    if (privateKeyRef == 17)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = privateKeyRef;
      if (os_log_type_enabled(v20, (os_log_type_t)privateKeyRef))
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null identity", buf, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v34 = privateKeyRef;
      v35 = os_log_type_enabled(v20, (os_log_type_t)privateKeyRef);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v55 = "nw_utilities_public_key_info_for_sec_identity";
          v56 = 2082;
          v57 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null identity, dumping backtrace:%{public}s", buf, 0x16u);
        }

LABEL_78:
        free(backtrace_string);
        if (!v19)
          goto LABEL_114;
        goto LABEL_113;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null identity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v46 = privateKeyRef;
      if (os_log_type_enabled(v20, (os_log_type_t)privateKeyRef))
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_182FBE000, v20, v46, "%{public}s called with null identity, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_105:

    goto LABEL_112;
  }
  v3 = sec_identity_copy_ref(v1);
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_utilities_public_key_info_for_sec_identity";
    v19 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(privateKeyRef) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v19, &privateKeyRef, &type))
      goto LABEL_112;
    if (privateKeyRef == 17)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v23 = privateKeyRef;
      if (os_log_type_enabled(v20, (os_log_type_t)privateKeyRef))
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null secIdentity", buf, 0xCu);
      }
    }
    else if (type)
    {
      v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v37 = privateKeyRef;
      v38 = os_log_type_enabled(v20, (os_log_type_t)privateKeyRef);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          v55 = "nw_utilities_public_key_info_for_sec_identity";
          v56 = 2082;
          v57 = v36;
          _os_log_impl(&dword_182FBE000, v20, v37, "%{public}s called with null secIdentity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
LABEL_112:
        if (!v19)
        {
LABEL_114:
          v15 = 0;
          goto LABEL_32;
        }
LABEL_113:
        free(v19);
        goto LABEL_114;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_182FBE000, v20, v37, "%{public}s called with null secIdentity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v47 = privateKeyRef;
      if (os_log_type_enabled(v20, (os_log_type_t)privateKeyRef))
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_182FBE000, v20, v47, "%{public}s called with null secIdentity, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_105;
  }
  privateKeyRef = 0;
  v5 = SecIdentityCopyPrivateKey(v3, &privateKeyRef);
  CFRelease(v4);
  if (!v5)
    goto LABEL_25;
  if (privateKeyRef)
  {
    CFRelease(privateKeyRef);
    privateKeyRef = 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v55 = "nw_utilities_public_key_info_for_sec_identity";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v51 = 0;
  if (!__nwlog_fault(v7, &type, &v51))
  {
LABEL_23:
    if (!v7)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    v9 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v55 = "nw_utilities_public_key_info_for_sec_identity";
      _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s SecIdentityCopyPrivateKey failed", buf, 0xCu);
    }
LABEL_22:

    goto LABEL_23;
  }
  if (!v51)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    v13 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v55 = "nw_utilities_public_key_info_for_sec_identity";
      _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s SecIdentityCopyPrivateKey failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_22;
  }
  v10 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v8 = (id)gLogObj;
  v11 = type;
  v12 = os_log_type_enabled(v8, type);
  if (!v10)
  {
    if (v12)
    {
      *(_DWORD *)buf = 136446210;
      v55 = "nw_utilities_public_key_info_for_sec_identity";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s SecIdentityCopyPrivateKey failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_22;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    v55 = "nw_utilities_public_key_info_for_sec_identity";
    v56 = 2082;
    v57 = v10;
    _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s SecIdentityCopyPrivateKey failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v10);
  if (v7)
LABEL_24:
    free(v7);
LABEL_25:
  if (!privateKeyRef)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_utilities_public_key_info_for_sec_identity";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v19, &type, &v51))
      goto LABEL_112;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null privateKey", buf, 0xCu);
      }
      goto LABEL_111;
    }
    if (!v51)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v48 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_182FBE000, v25, v48, "%{public}s called with null privateKey, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_111;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    v39 = type;
    v40 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_182FBE000, v25, v39, "%{public}s called with null privateKey, no backtrace", buf, 0xCu);
      }
      goto LABEL_111;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      v55 = "nw_utilities_public_key_info_for_sec_identity";
      v56 = 2082;
      v57 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v25, v39, "%{public}s called with null privateKey, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_77:

    goto LABEL_78;
  }
  v14 = SecKeyCopyPublicKey(privateKeyRef);
  if (privateKeyRef)
  {
    CFRelease(privateKeyRef);
    privateKeyRef = 0;
  }
  if (!v14)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_utilities_public_key_info_for_sec_identity";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v19, &type, &v51))
      goto LABEL_112;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null publicKey", buf, 0xCu);
      }
LABEL_111:

      goto LABEL_112;
    }
    if (!v51)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v49 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_182FBE000, v25, v49, "%{public}s called with null publicKey, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_111;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    v41 = type;
    v42 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_182FBE000, v25, v41, "%{public}s called with null publicKey, no backtrace", buf, 0xCu);
      }
      goto LABEL_111;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446466;
      v55 = "nw_utilities_public_key_info_for_sec_identity";
      v56 = 2082;
      v57 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v25, v41, "%{public}s called with null publicKey, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_77;
  }
  v15 = (void *)SecKeyCopySubjectPublicKeyInfo();
  CFRelease(v14);
  if (!v15)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_utilities_public_key_info_for_sec_identity";
    v30 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (__nwlog_fault(v30, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_utilities_public_key_info_for_sec_identity";
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null result", buf, 0xCu);
        }
      }
      else if (v51)
      {
        v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v44 = type;
        v45 = os_log_type_enabled(v31, type);
        if (v43)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            v55 = "nw_utilities_public_key_info_for_sec_identity";
            v56 = 2082;
            v57 = v43;
            _os_log_impl(&dword_182FBE000, v31, v44, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v43);
          goto LABEL_118;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_utilities_public_key_info_for_sec_identity";
          _os_log_impl(&dword_182FBE000, v31, v44, "%{public}s called with null result, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v50 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_utilities_public_key_info_for_sec_identity";
          _os_log_impl(&dword_182FBE000, v31, v50, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_118:
    if (v30)
      free(v30);
    goto LABEL_31;
  }
  v16 = v15;
LABEL_31:

LABEL_32:
  return v15;
}

void sub_1837FC0C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

sec_identity_t nw_utilities_identity_for_key_pair(__SecKey *a1)
{
  SecKeyRef v1;
  const void *SelfSignedCertificate;
  __SecIdentity *v3;
  sec_identity_t v4;
  id v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  id v9;
  os_log_type_t v10;
  id v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  os_log_type_t v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v1 = SecKeyCopyPublicKey(a1);
  SelfSignedCertificate = (const void *)SecGenerateSelfSignedCertificate();
  if (v1)
    CFRelease(v1);
  if (!SelfSignedCertificate)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v30 = "nw_utilities_identity_for_key_pair";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v6, &type, &v27))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v10 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_utilities_identity_for_key_pair";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s SecGenerateSelfSignedCertificate failed", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (!v27)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v22 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_utilities_identity_for_key_pair";
        _os_log_impl(&dword_182FBE000, v7, v22, "%{public}s SecGenerateSelfSignedCertificate failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    v14 = type;
    v15 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_utilities_identity_for_key_pair";
        _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s SecGenerateSelfSignedCertificate failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_utilities_identity_for_key_pair";
      v31 = 2082;
      v32 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s SecGenerateSelfSignedCertificate failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_30;
  }
  v3 = (__SecIdentity *)SecIdentityCreate();
  CFRelease(SelfSignedCertificate);
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v30 = "nw_utilities_identity_for_key_pair";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v6, &type, &v27))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_utilities_identity_for_key_pair";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s SecIdentityCreate failed", buf, 0xCu);
      }
LABEL_55:

LABEL_56:
      if (!v6)
        return 0;
LABEL_57:
      free(v6);
      return 0;
    }
    if (!v27)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v23 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_utilities_identity_for_key_pair";
        _os_log_impl(&dword_182FBE000, v7, v23, "%{public}s SecIdentityCreate failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    v16 = type;
    v17 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_utilities_identity_for_key_pair";
        _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s SecIdentityCreate failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_utilities_identity_for_key_pair";
      v31 = 2082;
      v32 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s SecIdentityCreate failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_30:

    free(backtrace_string);
    if (!v6)
      return 0;
    goto LABEL_57;
  }
  v4 = sec_identity_create(v3);
  CFRelease(v3);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v30 = "nw_utilities_identity_for_key_pair";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v6, &type, &v27))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_utilities_identity_for_key_pair";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s sec_identity_create failed", buf, 0xCu);
      }
    }
    else if (v27)
    {
      v18 = __nw_create_backtrace_string();
      if (v18)
      {
        v19 = (char *)v18;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_utilities_identity_for_key_pair";
          v31 = 2082;
          v32 = v19;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s sec_identity_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v19);
        if (!v6)
          return 0;
        goto LABEL_57;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_utilities_identity_for_key_pair";
        _os_log_impl(&dword_182FBE000, v7, v25, "%{public}s sec_identity_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v24 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_utilities_identity_for_key_pair";
        _os_log_impl(&dword_182FBE000, v7, v24, "%{public}s sec_identity_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_55;
  }
  return v4;
}

void sub_1837FC914(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_utilities_trust_ref_matches_public_key(void *a1, void *a2, _BYTE *a3)
{
  NSObject *v5;
  id v6;
  __SecTrust *v7;
  __SecTrust *v8;
  SecKeyRef v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  void *v29;
  os_log_type_t v30;
  void *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  char *backtrace_string;
  os_log_type_t v36;
  _BOOL4 v37;
  char *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  char *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  os_log_type_t v44;
  os_log_type_t v45;
  os_log_type_t v46;
  NSObject *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  os_log_type_t type;
  uint8_t v54[128];
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = sec_trust_copy_ref(v5);
  v8 = v7;
  if (!v7)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_utilities_trust_ref_matches_public_key";
    v26 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (!__nwlog_fault(v26, &type, &v52))
      goto LABEL_71;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_utilities_trust_ref_matches_public_key";
        _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null trustRef", buf, 0xCu);
      }
    }
    else if (v52)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      v37 = os_log_type_enabled(v27, type);
      if (backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v56 = "nw_utilities_trust_ref_matches_public_key";
          v57 = 2082;
          v58 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v27, v36, "%{public}s called with null trustRef, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v26)
          goto LABEL_73;
        goto LABEL_72;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_utilities_trust_ref_matches_public_key";
        _os_log_impl(&dword_182FBE000, v27, v36, "%{public}s called with null trustRef, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_utilities_trust_ref_matches_public_key";
        _os_log_impl(&dword_182FBE000, v27, v44, "%{public}s called with null trustRef, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_70;
  }
  v9 = SecTrustCopyKey(v7);
  CFRelease(v8);
  if (!v9)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_utilities_trust_ref_matches_public_key";
    v26 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (!__nwlog_fault(v26, &type, &v52))
      goto LABEL_71;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_utilities_trust_ref_matches_public_key";
        _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null publicKey", buf, 0xCu);
      }
    }
    else if (v52)
    {
      v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      v40 = os_log_type_enabled(v27, type);
      if (v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          v56 = "nw_utilities_trust_ref_matches_public_key";
          v57 = 2082;
          v58 = (uint64_t)v38;
          _os_log_impl(&dword_182FBE000, v27, v39, "%{public}s called with null publicKey, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v38);
LABEL_71:
        if (!v26)
        {
LABEL_73:
          v21 = 0;
          goto LABEL_24;
        }
LABEL_72:
        free(v26);
        goto LABEL_73;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_utilities_trust_ref_matches_public_key";
        _os_log_impl(&dword_182FBE000, v27, v39, "%{public}s called with null publicKey, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v45 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_utilities_trust_ref_matches_public_key";
        _os_log_impl(&dword_182FBE000, v27, v45, "%{public}s called with null publicKey, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_70:

    goto LABEL_71;
  }
  v10 = (void *)SecKeyCopySubjectPublicKeyInfo();
  v47 = v5;
  CFRelease(v9);
  if (v10)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v11 = v6;
    v12 = v6;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v48, v54, 16);
    if (v13)
    {
      v14 = 0;
      v15 = *(_QWORD *)v49;
      while (2)
      {
        v16 = 0;
        v17 = v14;
        v14 += v13;
        do
        {
          if (*(_QWORD *)v49 != v15)
            objc_enumerationMutation(v12);
          v18 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * v16);
          if (objc_msgSend(v18, "isEqual:", v10))
          {
            if (a3)
              *a3 = v17;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v22 = (id)gLogObj;
            v5 = v47;
            v6 = v11;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
            {
              v23 = objc_msgSend(v18, "hash");
              *(_DWORD *)buf = 136446466;
              v56 = "nw_utilities_trust_ref_matches_public_key";
              v57 = 2048;
              v58 = v23;
              _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s Matches key: #0x%lx", buf, 0x16u);
            }

            v21 = 1;
            goto LABEL_23;
          }
          ++v17;
          ++v16;
        }
        while (v13 != v16);
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v48, v54, 16);
        if (v13)
          continue;
        break;
      }
    }

    v5 = v47;
    v6 = v11;
    if (a3)
      *a3 = -1;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      v20 = objc_msgSend(v10, "hash");
      *(_DWORD *)buf = 136446466;
      v56 = "nw_utilities_trust_ref_matches_public_key";
      v57 = 2048;
      v58 = v20;
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s No match for peer key #0x%lx, returning false", buf, 0x16u);
    }

    goto LABEL_17;
  }
  __nwlog_obj();
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v56 = "nw_utilities_trust_ref_matches_public_key";
  v32 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v52 = 0;
  if (__nwlog_fault(v32, &type, &v52))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_utilities_trust_ref_matches_public_key";
        _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null keyInfo", buf, 0xCu);
      }
LABEL_76:

      goto LABEL_77;
    }
    if (!v52)
    {
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_utilities_trust_ref_matches_public_key";
        _os_log_impl(&dword_182FBE000, v33, v46, "%{public}s called with null keyInfo, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_76;
    }
    v41 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v33 = objc_claimAutoreleasedReturnValue();
    v42 = type;
    v43 = os_log_type_enabled(v33, type);
    if (!v41)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_utilities_trust_ref_matches_public_key";
        _os_log_impl(&dword_182FBE000, v33, v42, "%{public}s called with null keyInfo, no backtrace", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (v43)
    {
      *(_DWORD *)buf = 136446466;
      v56 = "nw_utilities_trust_ref_matches_public_key";
      v57 = 2082;
      v58 = (uint64_t)v41;
      _os_log_impl(&dword_182FBE000, v33, v42, "%{public}s called with null keyInfo, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v41);
  }
LABEL_77:
  if (v32)
  {
    free(v32);
    v21 = 0;
    goto LABEL_23;
  }
LABEL_17:
  v21 = 0;
LABEL_23:

LABEL_24:
  return v21;
}

void sub_1837FD220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t nw_utilities_cidr_string_to_subnet_and_mask(const char *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  size_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  char v14;
  size_t v15;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  size_t v21;
  _BYTE *v22;
  size_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  uint64_t v42;
  void *v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  const char *v47;
  void *v48;
  void *v49;
  void *v50;
  char *backtrace_string;
  _BOOL4 v52;
  char *v53;
  _BOOL4 v54;
  const char *v55;
  _BOOL4 v56;
  _BOOL4 v57;
  _BYTE *v58;
  char v59;
  os_log_type_t type;
  int __dst;
  const char *v62;
  __int16 v63;
  char *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    __dst = 136446210;
    v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
    v44 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v44, &type, &v59))
      goto LABEL_151;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v59)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v46 = type;
        v52 = os_log_type_enabled(v45, type);
        if (backtrace_string)
        {
          if (v52)
          {
            __dst = 136446466;
            v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
            v63 = 2082;
            v64 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s called with null netstr, dumping backtrace:%{public}s", (uint8_t *)&__dst, 0x16u);
          }

          free(backtrace_string);
LABEL_151:
          if (!v44)
            return 0;
LABEL_152:
          free(v44);
          return 0;
        }
        if (v52)
        {
          __dst = 136446210;
          v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
          v47 = "%{public}s called with null netstr, no backtrace";
          goto LABEL_149;
        }
      }
      else
      {
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v46 = type;
        if (os_log_type_enabled(v45, type))
        {
          __dst = 136446210;
          v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
          v47 = "%{public}s called with null netstr, backtrace limit exceeded";
          goto LABEL_149;
        }
      }
      goto LABEL_150;
    }
    __nwlog_obj();
    v45 = objc_claimAutoreleasedReturnValue();
    v46 = type;
    if (!os_log_type_enabled(v45, type))
      goto LABEL_150;
    __dst = 136446210;
    v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
    v47 = "%{public}s called with null netstr";
    goto LABEL_149;
  }
  if (!a2)
  {
    __nwlog_obj();
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    __dst = 136446210;
    v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
    v44 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v44, &type, &v59))
      goto LABEL_151;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v59)
      {
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v46 = type;
        if (os_log_type_enabled(v45, type))
        {
          __dst = 136446210;
          v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
          v47 = "%{public}s called with null network, backtrace limit exceeded";
          goto LABEL_149;
        }
        goto LABEL_150;
      }
      v53 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      v54 = os_log_type_enabled(v45, type);
      if (!v53)
      {
        if (v54)
        {
          __dst = 136446210;
          v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
          v47 = "%{public}s called with null network, no backtrace";
          goto LABEL_149;
        }
        goto LABEL_150;
      }
      if (!v54)
        goto LABEL_131;
      __dst = 136446466;
      v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
      v63 = 2082;
      v64 = v53;
      v55 = "%{public}s called with null network, dumping backtrace:%{public}s";
      goto LABEL_130;
    }
    __nwlog_obj();
    v45 = objc_claimAutoreleasedReturnValue();
    v46 = type;
    if (!os_log_type_enabled(v45, type))
      goto LABEL_150;
    __dst = 136446210;
    v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
    v47 = "%{public}s called with null network";
LABEL_149:
    _os_log_impl(&dword_182FBE000, v45, v46, v47, (uint8_t *)&__dst, 0xCu);
    goto LABEL_150;
  }
  if (!a3)
  {
    __nwlog_obj();
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    __dst = 136446210;
    v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
    v44 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v44, &type, &v59))
      goto LABEL_151;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (!os_log_type_enabled(v45, type))
        goto LABEL_150;
      __dst = 136446210;
      v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
      v47 = "%{public}s called with null mask";
      goto LABEL_149;
    }
    if (!v59)
    {
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v45, type))
      {
        __dst = 136446210;
        v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
        v47 = "%{public}s called with null mask, backtrace limit exceeded";
        goto LABEL_149;
      }
      goto LABEL_150;
    }
    v53 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v45 = objc_claimAutoreleasedReturnValue();
    v46 = type;
    v56 = os_log_type_enabled(v45, type);
    if (!v53)
    {
      if (v56)
      {
        __dst = 136446210;
        v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
        v47 = "%{public}s called with null mask, no backtrace";
        goto LABEL_149;
      }
      goto LABEL_150;
    }
    if (!v56)
      goto LABEL_131;
    __dst = 136446466;
    v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
    v63 = 2082;
    v64 = v53;
    v55 = "%{public}s called with null mask, dumping backtrace:%{public}s";
LABEL_130:
    _os_log_impl(&dword_182FBE000, v45, v46, v55, (uint8_t *)&__dst, 0x16u);
    goto LABEL_131;
  }
  if (!a4)
  {
    __nwlog_obj();
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    __dst = 136446210;
    v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
    v44 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v44, &type, &v59))
      goto LABEL_151;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v45, type))
      {
        __dst = 136446210;
        v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
        v47 = "%{public}s called with null prefix";
        goto LABEL_149;
      }
LABEL_150:

      goto LABEL_151;
    }
    if (!v59)
    {
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v45, type))
      {
        __dst = 136446210;
        v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
        v47 = "%{public}s called with null prefix, backtrace limit exceeded";
        goto LABEL_149;
      }
      goto LABEL_150;
    }
    v53 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v45 = objc_claimAutoreleasedReturnValue();
    v46 = type;
    v57 = os_log_type_enabled(v45, type);
    if (!v53)
    {
      if (v57)
      {
        __dst = 136446210;
        v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
        v47 = "%{public}s called with null prefix, no backtrace";
        goto LABEL_149;
      }
      goto LABEL_150;
    }
    if (v57)
    {
      __dst = 136446466;
      v62 = "nw_utilities_cidr_string_to_subnet_and_mask";
      v63 = 2082;
      v64 = v53;
      v55 = "%{public}s called with null prefix, dumping backtrace:%{public}s";
      goto LABEL_130;
    }
LABEL_131:

    free(v53);
    if (!v44)
      return 0;
    goto LABEL_152;
  }
  v8 = strlen(a1);
  if (!v8)
  {
    v13 = 0;
    v11 = 0;
    v14 = 0;
    v12 = 0;
    v15 = 0;
    goto LABEL_12;
  }
  v9 = *(unsigned __int8 *)a1;
  v10 = (v9 - 46);
  if (v10 > 0x38)
    goto LABEL_67;
  if (((1 << (v9 - 46)) & 0x1F8000001F80000) == 0)
  {
    v27 = 0;
    if (((1 << (v9 - 46)) & 3) != 0)
      return v27;
    if (v10 == 12)
    {
      v12 = 0;
      v11 = 1;
      goto LABEL_9;
    }
LABEL_67:
    v11 = 0;
    v12 = 0;
    v27 = 0;
    if ((v9 - 48) > 9)
      return v27;
    goto LABEL_9;
  }
  v11 = 0;
  v12 = 1;
LABEL_9:
  if (v8 != 1)
  {
    v25 = 0;
    v14 = 0;
    v13 = 0;
    v15 = v8;
    while (1)
    {
      v26 = v25 + 1;
      switch(a1[v25 + 1])
      {
        case '.':
          v27 = 0;
          if (!v12 && !v11 && v15 > v26)
          {
            v11 = 0;
            v12 = 0;
            ++v13;
            goto LABEL_34;
          }
          return v27;
        case '/':
          if (v15 <= v26 || v13 && a1[v25] == 46)
            return 0;
          if (v26 < 3 || !v11 || a1[v25] != 58)
          {
            v15 = v25 + 1;
            goto LABEL_34;
          }
          v15 = v25 + 1;
          if (a1[v25 - 1] == 58)
            goto LABEL_34;
          return 0;
        case ':':
          v27 = 0;
          if (v13 || v15 <= v26)
            return v27;
          ++v11;
          if (a1[v25] == 58)
          {
            if ((v14 & 1) != 0)
              return 0;
            v13 = 0;
            v14 = 1;
          }
          else
          {
            v13 = 0;
          }
LABEL_34:
          if (v8 - 1 == ++v25)
            goto LABEL_12;
          break;
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'a':
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
          v27 = 0;
          if (v13 || v15 <= v26)
            return v27;
          v13 = 0;
          ++v12;
          goto LABEL_34;
        default:
          if (a1[v25 + 1] - 48 > 9)
            return 0;
          goto LABEL_34;
      }
    }
  }
  v13 = 0;
  v14 = 0;
  v15 = 1;
LABEL_12:
  if (v15 >= v8)
    return 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = a4;
  v17 = v15 + 1;
  v58 = v16;
  *v16 = 0;
  v18 = strtol(&a1[v15 + 1], 0, 0);
  if (v18 < 1)
    return 0;
  v19 = v18;
  if (v12 | v11)
  {
    if ((unint64_t)v18 > 0x80)
      return 0;
    *(_BYTE *)(a3 + 1) = 30;
    *(_BYTE *)(a2 + 1) = 30;
    *(_BYTE *)a3 = 28;
    *(_BYTE *)a2 = 28;
    if (v15 > 0x26)
      return 0;
    memcpy(&__dst, a1, v15);
    if (!(v14 & 1 | (v11 > 6)))
    {
      if (v15 - 37 < 0xFFFFFFFFFFFFFFD8)
        return 0;
      *((_BYTE *)&__dst + v15) = 58;
      *((_BYTE *)&__dst + v17) = 58;
      v15 += 2;
    }
    *((_BYTE *)&__dst + v15) = 0;
    v29 = inet_pton(30, (const char *)&__dst, (void *)(a2 + 8));
    v27 = 0;
    v22 = v58;
    if (v29 != 1)
      return v27;
    v20 = (_BYTE *)(a3 + 8);
    goto LABEL_77;
  }
  if ((unint64_t)v18 > 0x20)
    return 0;
  *(_BYTE *)(a3 + 1) = 2;
  *(_BYTE *)(a2 + 1) = 2;
  *(_BYTE *)a3 = 16;
  *(_BYTE *)a2 = 16;
  if (v15 > 0xE)
    return 0;
  v20 = (_BYTE *)(a3 + 4);
  memcpy(&__dst, a1, v15);
  if (v13 > 2 || v15 == 14)
  {
    v22 = v58;
    goto LABEL_76;
  }
  v21 = v15 + 2;
  *((_BYTE *)&__dst + v15) = 46;
  *((_BYTE *)&__dst + v17) = 48;
  if (v13 <= 1)
  {
    v22 = v58;
    if (v15 <= 0xB)
    {
      v23 = v15 + 4;
      *((_BYTE *)&__dst + v21) = 46;
      *((_BYTE *)&__dst + v15 + 3) = 48;
      if (v13 > 0 || v15 > 9)
        goto LABEL_74;
      v21 = v15 + 6;
      *((_BYTE *)&__dst + v23) = 46;
      *((_BYTE *)&__dst + v15 + 5) = 48;
      if ((v13 & 0x80000000) == 0 || v15 > 7)
        goto LABEL_73;
      v23 = v15 + 8;
      *((_BYTE *)&__dst + v21) = 46;
      *((_BYTE *)&__dst + v15 + 7) = 48;
      if (v13 > -2 || v15 > 5)
      {
LABEL_74:
        v15 = v23;
        goto LABEL_76;
      }
      v21 = v15 + 10;
      *((_BYTE *)&__dst + v23) = 46;
      *((_BYTE *)&__dst + v15 + 9) = 48;
      if (v13 <= -3 && v15 <= 3)
      {
        v23 = v15 + 12;
        *((_BYTE *)&__dst + v21) = 46;
        *((_BYTE *)&__dst + v15 + 11) = 48;
        if (v13 <= -4 && v15 <= 1)
        {
          v24 = (char *)&__dst + v15;
          v15 += 14;
          *((_BYTE *)&__dst + v23) = 46;
          v24[13] = 48;
          goto LABEL_76;
        }
        goto LABEL_74;
      }
    }
LABEL_73:
    v15 = v21;
    goto LABEL_76;
  }
  v15 += 2;
  v22 = v58;
LABEL_76:
  *((_BYTE *)&__dst + v15) = 0;
  v30 = inet_pton(2, (const char *)&__dst, (void *)(a2 + 4));
  v27 = 0;
  if (v30 != 1)
    return v27;
LABEL_77:
  *v22 = v19;
  v31 = 8;
  if (v19 < 8)
    v31 = v19;
  v32 = v19 - v31 + 7;
  if (v32 >= 8)
  {
    v34 = (v32 >> 3) + 1;
    v35 = v34 & 0x3FFFFFFFFFFFFFFELL;
    v33 = v19 - 8 * (v34 & 0x3FFFFFFFFFFFFFFELL);
    v36 = v20 + 1;
    v37 = v34 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v38 = v19 - 8;
      if (v19 >= 8)
        v39 = 8;
      else
        v39 = v19;
      if (v38 >= 8)
        v38 = 8;
      v40 = nw_utilities_cidr_string_to_subnet_and_mask::bb[v38 - 1];
      *(v36 - 1) = nw_utilities_cidr_string_to_subnet_and_mask::bb[v39 - 1];
      *v36 = v40;
      v36 += 2;
      v19 -= 16;
      v37 -= 2;
    }
    while (v37);
    if (v34 == v35)
      return 1;
    v20 += v35;
  }
  else
  {
    v33 = v19;
  }
  v27 = 1;
  do
  {
    v42 = v33 - 8;
    v41 = v33 <= 8;
    if (v33 >= 8)
      v33 = 8;
    *v20++ = nw_utilities_cidr_string_to_subnet_and_mask::bb[v33 - 1];
    v33 = v42;
  }
  while (!v41);
  return v27;
}

BOOL nw_string_is_ip_address(const char *a1, void *a2, size_t a3)
{
  int v5;
  _BOOL8 v6;
  addrinfo *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  size_t v12;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  void *v19;
  char *backtrace_string;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  char v24;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_string_is_ip_address";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v15, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_string_is_ip_address";
          v18 = "%{public}s called with null str";
LABEL_42:
          _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0xCu);
        }
LABEL_43:

        goto LABEL_44;
      }
      if (!v24)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_string_is_ip_address";
          v18 = "%{public}s called with null str, backtrace limit exceeded";
          goto LABEL_42;
        }
        goto LABEL_43;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v21 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_string_is_ip_address";
          v18 = "%{public}s called with null str, no backtrace";
          goto LABEL_42;
        }
        goto LABEL_43;
      }
      if (!v21)
        goto LABEL_33;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_string_is_ip_address";
      v27 = 2082;
      v28 = backtrace_string;
      v22 = "%{public}s called with null str, dumping backtrace:%{public}s";
      goto LABEL_32;
    }
LABEL_44:
    if (v15)
      free(v15);
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_string_is_ip_address";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v15, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_string_is_ip_address";
          v18 = "%{public}s called with null addr";
          goto LABEL_42;
        }
        goto LABEL_43;
      }
      if (!v24)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_string_is_ip_address";
          v18 = "%{public}s called with null addr, backtrace limit exceeded";
          goto LABEL_42;
        }
        goto LABEL_43;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v23 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_string_is_ip_address";
          v18 = "%{public}s called with null addr, no backtrace";
          goto LABEL_42;
        }
        goto LABEL_43;
      }
      if (!v23)
        goto LABEL_33;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_string_is_ip_address";
      v27 = 2082;
      v28 = backtrace_string;
      v22 = "%{public}s called with null addr, dumping backtrace:%{public}s";
LABEL_32:
      _os_log_impl(&dword_182FBE000, v16, v17, v22, buf, 0x16u);
LABEL_33:

      free(backtrace_string);
      goto LABEL_44;
    }
    goto LABEL_44;
  }
  *(_QWORD *)buf = 0;
  v5 = getaddrinfo(a1, 0, &nw_string_is_ip_address::hints, (addrinfo **)buf);
  v6 = v5 == 0;
  if (!v5)
  {
    v7 = *(addrinfo **)buf;
    if (*(_QWORD *)buf)
    {
      v8 = *(_QWORD *)buf;
      while (1)
      {
        v9 = *(unsigned __int8 **)(v8 + 32);
        v10 = v9[1];
        if (v10 == 30 || v10 == 2)
          break;
        v8 = *(_QWORD *)(v8 + 40);
        if (!v8)
          goto LABEL_14;
      }
      v12 = *v9;
      if (v12 <= a3)
        memcpy(a2, v9, v12);
LABEL_14:
      freeaddrinfo(v7);
    }
  }
  return v6;
}

uint64_t nw_utilities_create_c_string_from_cfstring(const __CFString *a1)
{
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v4;
  uint64_t v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  NSObject *v21;
  os_log_type_t v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v26;
  char *backtrace_string;
  _BOOL4 v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_utilities_create_c_string_from_cfstring";
    v5 = _os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault((const char *)v5, &type, &v29))
    {
LABEL_28:
      if (!v5)
        return 0;
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v32 = "nw_utilities_create_c_string_from_cfstring";
      v14 = "%{public}s called with null stringRef";
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v28 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_utilities_create_c_string_from_cfstring";
          v33 = 2082;
          v34 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null stringRef, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v5)
          return 0;
        goto LABEL_40;
      }
      if (!v28)
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v32 = "nw_utilities_create_c_string_from_cfstring";
      v14 = "%{public}s called with null stringRef, no backtrace";
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v32 = "nw_utilities_create_c_string_from_cfstring";
      v14 = "%{public}s called with null stringRef, backtrace limit exceeded";
    }
    goto LABEL_25;
  }
  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  if (MaximumSizeForEncoding == -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v32 = "nw_utilities_create_c_string_from_cfstring";
    v5 = _os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault((const char *)v5, &type, &v29))
      goto LABEL_28;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_utilities_create_c_string_from_cfstring";
        v14 = "%{public}s CFStringGetMaximumSizeForEncoding failed";
LABEL_25:
        v21 = v12;
        v22 = v13;
LABEL_26:
        _os_log_impl(&dword_182FBE000, v21, v22, v14, buf, 0xCu);
      }
    }
    else
    {
      if (v29)
      {
        v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v16 = type;
        v17 = os_log_type_enabled(v12, type);
        if (v15)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v32 = "nw_utilities_create_c_string_from_cfstring";
            v33 = 2082;
            v34 = v15;
            _os_log_impl(&dword_182FBE000, v12, v16, "%{public}s CFStringGetMaximumSizeForEncoding failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v15);
          if (!v5)
            return 0;
          goto LABEL_40;
        }
        if (!v17)
          goto LABEL_27;
        *(_DWORD *)buf = 136446210;
        v32 = "nw_utilities_create_c_string_from_cfstring";
        v14 = "%{public}s CFStringGetMaximumSizeForEncoding failed, no backtrace";
        v21 = v12;
        v22 = v16;
        goto LABEL_26;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_utilities_create_c_string_from_cfstring";
        v14 = "%{public}s CFStringGetMaximumSizeForEncoding failed, backtrace limit exceeded";
        goto LABEL_25;
      }
    }
LABEL_27:

    goto LABEL_28;
  }
  v4 = MaximumSizeForEncoding + 1;
  v5 = nw_calloc_type<unsigned char>(MaximumSizeForEncoding + 1);
  if (CFStringGetCString(a1, (char *)v5, v4, 0x8000100u))
    return v5;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v32 = "nw_utilities_create_c_string_from_cfstring";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (__nwlog_fault(v7, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_utilities_create_c_string_from_cfstring";
        v10 = "%{public}s CFStringGetCString failed";
LABEL_34:
        v23 = v8;
        v24 = v9;
LABEL_35:
        _os_log_impl(&dword_182FBE000, v23, v24, v10, buf, 0xCu);
        goto LABEL_36;
      }
      goto LABEL_36;
    }
    if (!v29)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_utilities_create_c_string_from_cfstring";
        v10 = "%{public}s CFStringGetCString failed, backtrace limit exceeded";
        goto LABEL_34;
      }
LABEL_36:

      goto LABEL_37;
    }
    v18 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    v19 = type;
    v20 = os_log_type_enabled(v8, type);
    if (!v18)
    {
      if (!v20)
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v32 = "nw_utilities_create_c_string_from_cfstring";
      v10 = "%{public}s CFStringGetCString failed, no backtrace";
      v23 = v8;
      v24 = v19;
      goto LABEL_35;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_utilities_create_c_string_from_cfstring";
      v33 = 2082;
      v34 = v18;
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s CFStringGetCString failed, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v18);
  }
LABEL_37:
  if (v7)
    free(v7);
  if (v5)
  {
LABEL_40:
    free((void *)v5);
    return 0;
  }
  return v5;
}

void nw_utilities_get_c_string_from_cfstring(const __CFString *a1, CFStringEncoding a2, void *a3)
{
  void (**v5)(_QWORD);
  void (**v6)(_QWORD);
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  id v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  os_log_type_t v27;
  void *v28;
  os_log_type_t v29;
  void *v30;
  os_log_type_t v31;
  char *backtrace_string;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if (!a1)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_utilities_get_c_string_from_cfstring";
    v10 = _os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault((const char *)v10, &type, &v39))
      goto LABEL_44;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_utilities_get_c_string_from_cfstring";
        _os_log_impl(&dword_182FBE000, v12, v29, "%{public}s called with null stringRef", buf, 0xCu);
      }
      goto LABEL_79;
    }
    if (!v39)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_utilities_get_c_string_from_cfstring";
        _os_log_impl(&dword_182FBE000, v12, v37, "%{public}s called with null stringRef, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_79;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v33 = type;
    v34 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_utilities_get_c_string_from_cfstring";
        _os_log_impl(&dword_182FBE000, v12, v33, "%{public}s called with null stringRef, no backtrace", buf, 0xCu);
      }
      goto LABEL_79;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_utilities_get_c_string_from_cfstring";
      v43 = 2082;
      v44 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v33, "%{public}s called with null stringRef, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_66;
  }
  if (!v5)
  {
    __nwlog_obj();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_utilities_get_c_string_from_cfstring";
    v10 = _os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault((const char *)v10, &type, &v39))
      goto LABEL_44;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_utilities_get_c_string_from_cfstring";
        _os_log_impl(&dword_182FBE000, v12, v31, "%{public}s called with null access_block", buf, 0xCu);
      }
      goto LABEL_79;
    }
    if (!v39)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_utilities_get_c_string_from_cfstring";
        _os_log_impl(&dword_182FBE000, v12, v38, "%{public}s called with null access_block, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_79;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v35 = type;
    v36 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_utilities_get_c_string_from_cfstring";
        _os_log_impl(&dword_182FBE000, v12, v35, "%{public}s called with null access_block, no backtrace", buf, 0xCu);
      }
      goto LABEL_79;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_utilities_get_c_string_from_cfstring";
      v43 = 2082;
      v44 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v35, "%{public}s called with null access_block, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_66:

    free(backtrace_string);
    if (!v10)
      goto LABEL_46;
    goto LABEL_45;
  }
  if (CFStringGetCStringPtr(a1, a2))
  {
    v6[2](v6);
    goto LABEL_46;
  }
  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, a2);
  if (MaximumSizeForEncoding != -1)
  {
    v9 = MaximumSizeForEncoding + 1;
    v10 = nw_calloc_type<unsigned char>(MaximumSizeForEncoding + 1);
    if (CFStringGetCString(a1, (char *)v10, v9, a2))
    {
      ((void (*)(void (**)(_QWORD), uint64_t))v6[2])(v6, v10);
      goto LABEL_44;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v42 = "nw_utilities_get_c_string_from_cfstring";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v15, &type, &v39))
    {
LABEL_42:
      if (!v15)
        goto LABEL_44;
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_utilities_get_c_string_from_cfstring";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s CFStringGetCString failed", buf, 0xCu);
      }
LABEL_41:

      goto LABEL_42;
    }
    if (!v39)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_utilities_get_c_string_from_cfstring";
        _os_log_impl(&dword_182FBE000, v16, v27, "%{public}s CFStringGetCString failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v16, type);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_utilities_get_c_string_from_cfstring";
        _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s CFStringGetCString failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_utilities_get_c_string_from_cfstring";
      v43 = 2082;
      v44 = v22;
      _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s CFStringGetCString failed, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v22);
    if (v15)
LABEL_43:
      free(v15);
LABEL_44:
    if (!v10)
      goto LABEL_46;
LABEL_45:
    free((void *)v10);
    goto LABEL_46;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v42 = "nw_utilities_get_c_string_from_cfstring";
  v10 = _os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v39 = 0;
  if (!__nwlog_fault((const char *)v10, &type, &v39))
    goto LABEL_44;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    v13 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v42 = "nw_utilities_get_c_string_from_cfstring";
      _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s CFStringGetMaximumSizeForEncoding failed", buf, 0xCu);
    }
LABEL_79:

    goto LABEL_44;
  }
  if (!v39)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    v25 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v42 = "nw_utilities_get_c_string_from_cfstring";
      _os_log_impl(&dword_182FBE000, v12, v25, "%{public}s CFStringGetMaximumSizeForEncoding failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_79;
  }
  v18 = __nw_create_backtrace_string();
  if (!v18)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v42 = "nw_utilities_get_c_string_from_cfstring";
      _os_log_impl(&dword_182FBE000, v12, v26, "%{public}s CFStringGetMaximumSizeForEncoding failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_79;
  }
  v19 = (char *)v18;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v20 = (id)gLogObj;
  v21 = type;
  if (os_log_type_enabled(v20, type))
  {
    *(_DWORD *)buf = 136446466;
    v42 = "nw_utilities_get_c_string_from_cfstring";
    v43 = 2082;
    v44 = v19;
    _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s CFStringGetMaximumSizeForEncoding failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v10)
    goto LABEL_45;
LABEL_46:

}

void sub_1837FF3F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_utf8_validator_init(uint64_t a1)
{
  void *v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_WORD *)a1 = 0;
    *(_BYTE *)(a1 + 2) = 0;
    return;
  }
  __nwlog_obj();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v11 = "nw_utf8_validator_init";
  v2 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v3 = objc_claimAutoreleasedReturnValue();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_utf8_validator_init";
        v5 = "%{public}s called with null state";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else
    {
      if (v8)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v3 = objc_claimAutoreleasedReturnValue();
        v4 = type;
        v7 = os_log_type_enabled(v3, type);
        if (backtrace_string)
        {
          if (v7)
          {
            *(_DWORD *)buf = 136446466;
            v11 = "nw_utf8_validator_init";
            v12 = 2082;
            v13 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null state, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v7)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v11 = "nw_utf8_validator_init";
        v5 = "%{public}s called with null state, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v3 = objc_claimAutoreleasedReturnValue();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_utf8_validator_init";
        v5 = "%{public}s called with null state, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v2)
    free(v2);
}

uint64_t nw_utf8_validator_parse(char *a1, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  char v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  void *v19;
  char *backtrace_string;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_utf8_validator_parse";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v15, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_utf8_validator_parse";
          v18 = "%{public}s called with null state";
LABEL_86:
          _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0xCu);
        }
LABEL_87:

        goto LABEL_88;
      }
      if (!v24)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_utf8_validator_parse";
          v18 = "%{public}s called with null state, backtrace limit exceeded";
          goto LABEL_86;
        }
        goto LABEL_87;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v21 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_utf8_validator_parse";
          v18 = "%{public}s called with null state, no backtrace";
          goto LABEL_86;
        }
        goto LABEL_87;
      }
      if (!v21)
        goto LABEL_77;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_utf8_validator_parse";
      v28 = 2082;
      v29 = backtrace_string;
      v22 = "%{public}s called with null state, dumping backtrace:%{public}s";
      goto LABEL_76;
    }
LABEL_88:
    if (v15)
      free(v15);
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_utf8_validator_parse";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v15, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_utf8_validator_parse";
          v18 = "%{public}s called with null buffer";
          goto LABEL_86;
        }
        goto LABEL_87;
      }
      if (!v24)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_utf8_validator_parse";
          v18 = "%{public}s called with null buffer, backtrace limit exceeded";
          goto LABEL_86;
        }
        goto LABEL_87;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v23 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_utf8_validator_parse";
          v18 = "%{public}s called with null buffer, no backtrace";
          goto LABEL_86;
        }
        goto LABEL_87;
      }
      if (!v23)
        goto LABEL_77;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_utf8_validator_parse";
      v28 = 2082;
      v29 = backtrace_string;
      v22 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_76:
      _os_log_impl(&dword_182FBE000, v16, v17, v22, buf, 0x16u);
LABEL_77:

      free(backtrace_string);
      goto LABEL_88;
    }
    goto LABEL_88;
  }
  v4 = *a1;
  if ((v4 & 0x80000000) == 0 && a3)
  {
    v5 = 0;
    while (!(_BYTE)v4)
    {
      v9 = *(char *)(a2 + v5);
      if ((v9 & 0x80000000) == 0)
      {
        LOBYTE(v4) = 0;
        goto LABEL_48;
      }
      a1[1] = v9;
      v10 = *(_BYTE *)(a2 + v5);
      if ((v10 + 62) > 0x1Du)
      {
        if ((v10 & 0xF0) == 0xE0)
        {
          LOBYTE(v4) = 2;
        }
        else
        {
          if ((v10 + 16) > 4u)
          {
LABEL_53:
            LOBYTE(v4) = -1;
            *a1 = -1;
LABEL_54:
            LODWORD(v12) = a4 ^ 1;
            if ((char)v4 > 0)
              v12 = v12;
            else
              v12 = 0;
            if (a4)
              goto LABEL_58;
LABEL_52:
            a1[2] = 1;
            return v12;
          }
          LOBYTE(v4) = 3;
        }
      }
      else
      {
        LOBYTE(v4) = 1;
      }
LABEL_31:
      *a1 = v4;
LABEL_48:
      if ((v4 & 0x80) == 0 && ++v5 < a3)
        continue;
      goto LABEL_50;
    }
    v6 = a1[1];
    if (!a1[1])
      goto LABEL_53;
    if (v6 > 0xDF)
    {
      if (v6 == 224)
      {
        v7 = *(char *)(a2 + v5);
        if (v4 == 2)
        {
          if ((v7 + 64) < 0xE0u)
            v8 = -1;
          else
            v8 = 2;
          goto LABEL_30;
        }
        goto LABEL_28;
      }
      if (v6 > 0xEC)
      {
        if (v6 == 237)
        {
          v7 = *(char *)(a2 + v5);
          if (v4 == 2)
          {
            if (v7 > -97)
              v8 = -1;
            else
              v8 = 2;
            goto LABEL_30;
          }
          goto LABEL_28;
        }
        if (v6 > 0xEF)
        {
          if (v6 == 240)
          {
            v7 = *(char *)(a2 + v5);
            if (v4 == 3)
            {
              if ((v7 + 64) < 0xD0u)
                v8 = -1;
              else
                v8 = 3;
              goto LABEL_30;
            }
            goto LABEL_28;
          }
          if (v6 > 0xF3)
          {
            if (v6 != 244)
              goto LABEL_46;
            v11 = *(char *)(a2 + v5);
            if (v4 == 3)
            {
              if (v11 > -113)
                v8 = -1;
              else
                v8 = 3;
              goto LABEL_30;
            }
            if (v11 < -64)
            {
LABEL_46:
              LOBYTE(v4) = v4 - 1;
              *a1 = v4;
              if (!(_BYTE)v4)
              {
                LOBYTE(v4) = 0;
                a1[1] = 0;
              }
              goto LABEL_48;
            }
            goto LABEL_29;
          }
        }
      }
    }
    v7 = *(char *)(a2 + v5);
LABEL_28:
    if (v7 <= -65)
      goto LABEL_46;
LABEL_29:
    v8 = -1;
LABEL_30:
    LOBYTE(v4) = v8 - 1;
    goto LABEL_31;
  }
LABEL_50:
  if ((_BYTE)v4)
    goto LABEL_54;
  v12 = 1;
  if (!a4)
    goto LABEL_52;
LABEL_58:
  *(_WORD *)a1 = 0;
  a1[2] = 0;
  return v12;
}

BOOL nw_utf8_validator_is_parsing(uint64_t a1)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_BYTE *)(a1 + 2) != 0;
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_utf8_validator_is_parsing";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_utf8_validator_is_parsing";
        v6 = "%{public}s called with null state";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_utf8_validator_is_parsing";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null state, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v8)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_utf8_validator_is_parsing";
        v6 = "%{public}s called with null state, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_utf8_validator_is_parsing";
        v6 = "%{public}s called with null state, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v3)
    free(v3);
  return 0;
}

void nw_utilities_get_uuid_for_pid(int pid, _OWORD *a2)
{
  NSObject *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  void *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  NSObject *v15;
  char v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  _OWORD *v24;
  _OWORD buffer[3];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!pid)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buffer[0]) = 136446210;
    *(_QWORD *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
    v6 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v16 = 0;
    if (!__nwlog_fault(v6, buf, &v16))
      goto LABEL_44;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = buf[0];
      if (os_log_type_enabled(v7, (os_log_type_t)buf[0]))
      {
        LODWORD(buffer[0]) = 136446210;
        *(_QWORD *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
        v9 = "%{public}s called with null pid";
LABEL_42:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, (uint8_t *)buffer, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = buf[0];
      v12 = os_log_type_enabled(v7, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v12)
        {
          LODWORD(buffer[0]) = 136446466;
          *(_QWORD *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
          WORD6(buffer[0]) = 2082;
          *(_QWORD *)((char *)buffer + 14) = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null pid, dumping backtrace:%{public}s", (uint8_t *)buffer, 0x16u);
        }

        free(backtrace_string);
LABEL_44:
        if (!v6)
          return;
LABEL_45:
        free(v6);
        return;
      }
      if (v12)
      {
        LODWORD(buffer[0]) = 136446210;
        *(_QWORD *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
        v9 = "%{public}s called with null pid, no backtrace";
        goto LABEL_42;
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = buf[0];
      if (os_log_type_enabled(v7, (os_log_type_t)buf[0]))
      {
        LODWORD(buffer[0]) = 136446210;
        *(_QWORD *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
        v9 = "%{public}s called with null pid, backtrace limit exceeded";
        goto LABEL_42;
      }
    }
LABEL_43:

    goto LABEL_44;
  }
  if (a2)
  {
    if (pid >= 1)
    {
      v26 = 0;
      memset(buffer, 0, sizeof(buffer));
      if (proc_pidinfo(pid, 17, 1uLL, buffer, 56) == 56)
      {
        if (!uuid_is_null((const unsigned __int8 *)buffer))
        {
          if (gLogDatapath)
          {
            __nwlog_obj();
            v15 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              v18 = "nw_utilities_get_uuid_for_pid";
              v19 = 1024;
              v20 = pid;
              v21 = 1040;
              v22 = 16;
              v23 = 2096;
              v24 = buffer;
              _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s Looked up PID (%d) -> UUID (%{uuid_t}.16P)", buf, 0x22u);
            }

          }
          *a2 = buffer[0];
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v4 = (id)gLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_utilities_get_uuid_for_pid";
          v19 = 1024;
          v20 = pid;
          _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s Failed to convert from PID (%d) to UUID", buf, 0x12u);
        }

      }
    }
    return;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(buffer[0]) = 136446210;
  *(_QWORD *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
  v6 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  v16 = 0;
  if (!__nwlog_fault(v6, buf, &v16))
    goto LABEL_44;
  if (buf[0] == 17)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = buf[0];
    if (os_log_type_enabled(v7, (os_log_type_t)buf[0]))
    {
      LODWORD(buffer[0]) = 136446210;
      *(_QWORD *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
      v9 = "%{public}s called with null out_uuid";
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  if (!v16)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = buf[0];
    if (os_log_type_enabled(v7, (os_log_type_t)buf[0]))
    {
      LODWORD(buffer[0]) = 136446210;
      *(_QWORD *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
      v9 = "%{public}s called with null out_uuid, backtrace limit exceeded";
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  v13 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = buf[0];
  v14 = os_log_type_enabled(v7, (os_log_type_t)buf[0]);
  if (!v13)
  {
    if (v14)
    {
      LODWORD(buffer[0]) = 136446210;
      *(_QWORD *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
      v9 = "%{public}s called with null out_uuid, no backtrace";
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  if (v14)
  {
    LODWORD(buffer[0]) = 136446466;
    *(_QWORD *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
    WORD6(buffer[0]) = 2082;
    *(_QWORD *)((char *)buffer + 14) = v13;
    _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null out_uuid, dumping backtrace:%{public}s", (uint8_t *)buffer, 0x16u);
  }

  free(v13);
  if (v6)
    goto LABEL_45;
}

BOOL nw_utilities_copy_bundle_id_for_uuid(const unsigned __int8 *a1)
{
  void *v2;
  char *v3;
  _BOOL8 result;
  const char *string_ptr;
  NSObject *v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  NSObject *v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  const char *v17;
  NSObject *v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  _BYTE v24[24];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (uuid_is_null(a1))
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446466;
    v22 = "nw_utilities_copy_bundle_id_for_uuid";
    v23 = 2080;
    *(_QWORD *)v24 = "nw_utilities_copy_bundle_id_for_uuid";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v9, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_utilities_copy_bundle_id_for_uuid";
          v23 = 2080;
          *(_QWORD *)v24 = "nw_utilities_copy_bundle_id_for_uuid";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s NULL uuid passed to %s", buf, 0x16u);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v15 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446722;
            v22 = "nw_utilities_copy_bundle_id_for_uuid";
            v23 = 2080;
            *(_QWORD *)v24 = "nw_utilities_copy_bundle_id_for_uuid";
            *(_WORD *)&v24[8] = 2082;
            *(_QWORD *)&v24[10] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v14, "%{public}s NULL uuid passed to %s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(backtrace_string);
          goto LABEL_35;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_utilities_copy_bundle_id_for_uuid";
          v23 = 2080;
          *(_QWORD *)v24 = "nw_utilities_copy_bundle_id_for_uuid";
          _os_log_impl(&dword_182FBE000, v10, v14, "%{public}s NULL uuid passed to %s, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_utilities_copy_bundle_id_for_uuid";
          v23 = 2080;
          *(_QWORD *)v24 = "nw_utilities_copy_bundle_id_for_uuid";
          _os_log_impl(&dword_182FBE000, v10, v16, "%{public}s NULL uuid passed to %s, backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
LABEL_35:
    if (v9)
      free(v9);
    return 0;
  }
  v2 = (void *)NEHelperCacheCopySigningIdentifierMapping();
  if (gLogDatapath)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_utilities_copy_bundle_id_for_uuid";
      v23 = 2112;
      *(_QWORD *)v24 = v2;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s NEHelperCacheCopySigningIdentifierMapping returned %@", buf, 0x16u);
    }

  }
  if (!v2)
    goto LABEL_5;
  if (object_getClass(v2) != (Class)MEMORY[0x1E0C81390])
    goto LABEL_5;
  string_ptr = xpc_string_get_string_ptr(v2);
  if (!string_ptr)
    goto LABEL_5;
  if (gLogDatapath)
  {
    v17 = string_ptr;
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      v22 = "nw_utilities_copy_bundle_id_for_uuid";
      v23 = 1040;
      *(_DWORD *)v24 = 16;
      *(_WORD *)&v24[4] = 2096;
      *(_QWORD *)&v24[6] = a1;
      *(_WORD *)&v24[14] = 2080;
      *(_QWORD *)&v24[16] = v17;
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s Looked up UUID (%{uuid_t}.16P) -> Bundle ID (%s)", buf, 0x26u);
    }

    string_ptr = v17;
  }
  v3 = strdup(string_ptr);
  if (v3)
    goto LABEL_6;
  __nwlog_obj();
  v6 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v22 = "strict_strdup";
  v7 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
LABEL_5:
    v3 = 0;
LABEL_6:

    return (BOOL)v3;
  }
  __break(1u);
  return result;
}

void sub_183800880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_utilities_copy_bundle_id_for_pid(int a1)
{
  int is_null;
  _BOOL8 result;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  _BYTE uu[22];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)uu = 136446210;
    *(_QWORD *)&uu[4] = "nw_utilities_copy_bundle_id_for_pid";
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v4, &type, &v10))
      goto LABEL_20;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)uu = 136446210;
        *(_QWORD *)&uu[4] = "nw_utilities_copy_bundle_id_for_pid";
        v7 = "%{public}s called with null pid";
LABEL_18:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, uu, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v6 = type;
        v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)uu = 136446466;
            *(_QWORD *)&uu[4] = "nw_utilities_copy_bundle_id_for_pid";
            *(_WORD *)&uu[12] = 2082;
            *(_QWORD *)&uu[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null pid, dumping backtrace:%{public}s", uu, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v9)
          goto LABEL_19;
        *(_DWORD *)uu = 136446210;
        *(_QWORD *)&uu[4] = "nw_utilities_copy_bundle_id_for_pid";
        v7 = "%{public}s called with null pid, no backtrace";
        goto LABEL_18;
      }
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)uu = 136446210;
        *(_QWORD *)&uu[4] = "nw_utilities_copy_bundle_id_for_pid";
        v7 = "%{public}s called with null pid, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:

LABEL_20:
    if (v4)
      free(v4);
    return 0;
  }
  if (a1 < 1)
    return 0;
  *(_QWORD *)uu = 0;
  *(_QWORD *)&uu[8] = 0;
  nw_utilities_get_uuid_for_pid(a1, uu);
  is_null = uuid_is_null(uu);
  result = 0;
  if (!is_null)
    return nw_utilities_copy_bundle_id_for_uuid(uu);
  return result;
}

BOOL nw_utilities_copy_bundle_id_for_audit_token(__int128 *a1)
{
  __int128 v1;
  int v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  NSObject *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  __int128 v14;
  __int128 v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1[1];
  v14 = *a1;
  v15 = v1;
  if (!((unint64_t)v14 | *((_QWORD *)&v14 + 1) | (unint64_t)v1 | *((_QWORD *)&v1 + 1)))
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446466;
    v17 = "nw_utilities_copy_bundle_id_for_audit_token";
    v18 = 2080;
    v19 = "nw_utilities_copy_bundle_id_for_audit_token";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v5, &type, &v12))
      goto LABEL_23;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_utilities_copy_bundle_id_for_audit_token";
        v18 = 2080;
        v19 = "nw_utilities_copy_bundle_id_for_audit_token";
        v8 = "%{public}s NULL audit_token passed to %s";
LABEL_21:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0x16u);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        v11 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446722;
            v17 = "nw_utilities_copy_bundle_id_for_audit_token";
            v18 = 2080;
            v19 = "nw_utilities_copy_bundle_id_for_audit_token";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s NULL audit_token passed to %s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (!v11)
          goto LABEL_22;
        *(_DWORD *)buf = 136446466;
        v17 = "nw_utilities_copy_bundle_id_for_audit_token";
        v18 = 2080;
        v19 = "nw_utilities_copy_bundle_id_for_audit_token";
        v8 = "%{public}s NULL audit_token passed to %s, no backtrace";
        goto LABEL_21;
      }
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_utilities_copy_bundle_id_for_audit_token";
        v18 = 2080;
        v19 = "nw_utilities_copy_bundle_id_for_audit_token";
        v8 = "%{public}s NULL audit_token passed to %s, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
LABEL_22:

LABEL_23:
    if (v5)
      free(v5);
    return 0;
  }
  v2 = *((_DWORD *)a1 + 5);
  if (v2 < 1)
    return 0;
  if (gLogDatapath)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_utilities_copy_bundle_id_for_audit_token";
      v18 = 1024;
      LODWORD(v19) = v2;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s Looked up Audit Token -> PID (%d)", buf, 0x12u);
    }

  }
  return nw_utilities_copy_bundle_id_for_pid(v2);
}

void nw_utilities_get_self_uuid(_OWORD *a1)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  NSObject *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  _BYTE v15[10];
  __int16 v16;
  __int128 *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (nw_utilities_get_self_uuid::onceToken != -1)
      dispatch_once(&nw_utilities_get_self_uuid::onceToken, &__block_literal_global_6_44022);
    if (gLogDatapath)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        v13 = "nw_utilities_get_self_uuid";
        v14 = 1024;
        *(_DWORD *)v15 = nw_utilities_get_self_uuid::self_pid;
        *(_WORD *)&v15[4] = 1040;
        *(_DWORD *)&v15[6] = 16;
        v16 = 2096;
        v17 = &nw_utilities_get_self_uuid::self_uuid;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s Self UUID for pid %d: %{uuid_t}.16P", buf, 0x22u);
      }

    }
    *a1 = nw_utilities_get_self_uuid::self_uuid;
    return;
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_utilities_get_self_uuid";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_utilities_get_self_uuid";
        v6 = "%{public}s called with null out_uuid";
LABEL_23:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v9 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            v13 = "nw_utilities_get_self_uuid";
            v14 = 2082;
            *(_QWORD *)v15 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null out_uuid, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (!v9)
          goto LABEL_24;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_utilities_get_self_uuid";
        v6 = "%{public}s called with null out_uuid, no backtrace";
        goto LABEL_23;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_utilities_get_self_uuid";
        v6 = "%{public}s called with null out_uuid, backtrace limit exceeded";
        goto LABEL_23;
      }
    }
LABEL_24:

  }
LABEL_25:
  if (v3)
    free(v3);
}

void __nw_utilities_get_self_uuid_block_invoke()
{
  pid_t v0;

  v0 = getpid();
  nw_utilities_get_self_uuid::self_pid = v0;
  if (v0)
    nw_utilities_get_uuid_for_pid(v0, &nw_utilities_get_self_uuid::self_uuid);
}

uint64_t nw_utilities_get_self_bundle_id()
{
  if (nw_utilities_get_self_bundle_id::onceToken != -1)
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_7);
  return nw_utilities_get_self_bundle_id::bundle_identifier_string;
}

uint64_t __nw_utilities_get_self_bundle_id_block_invoke()
{
  uint64_t result;
  const __CFString *v1;

  result = (uint64_t)CFBundleGetMainBundle();
  if (result)
  {
    result = (uint64_t)CFBundleGetValueForInfoDictionaryKey((CFBundleRef)result, (CFStringRef)*MEMORY[0x1E0C9AE78]);
    if (result)
    {
      v1 = (const __CFString *)result;
      result = CFStringGetLength((CFStringRef)result);
      if (result >= 1)
      {
        result = nw_utilities_create_c_string_from_cfstring(v1);
        nw_utilities_get_self_bundle_id::bundle_identifier_string = result;
      }
    }
  }
  return result;
}

uint64_t nw_utilities_get_self_name()
{
  if (nw_utilities_get_self_name::onceToken != -1)
    dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_8_44028);
  return nw_utilities_get_self_name::name;
}

void __nw_utilities_get_self_name_block_invoke()
{
  _QWORD *v0;
  pid_t v1;
  char *v2;
  NSObject *v3;
  void *v4;
  __int128 buffer;
  _OWORD v6[3];
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (nw_utilities_get_self_bundle_id::onceToken != -1)
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_7);
  v0 = &unk_1ECD84000;
  nw_utilities_get_self_name::name = nw_utilities_get_self_bundle_id::bundle_identifier_string;
  if (!nw_utilities_get_self_bundle_id::bundle_identifier_string)
  {
    buffer = 0u;
    memset(v6, 0, sizeof(v6));
    v1 = getpid();
    if (proc_pidinfo(v1, 13, 1uLL, &buffer, 64) != 64 || !LOBYTE(v6[0]))
    {
      if (nw_utilities_get_self_name::name)
        return;
      goto LABEL_10;
    }
    v2 = strdup((const char *)v6);
    if (!v2)
    {
      __nwlog_obj();
      v3 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
      v7 = 136446210;
      v8 = "strict_strdup";
      v4 = (void *)_os_log_send_and_compose_impl();

      if (__nwlog_abort((uint64_t)v4))
      {
        __break(1u);
        return;
      }
      free(v4);
      v2 = 0;
      v0 = (_QWORD *)&unk_1ECD84000;
    }
    v0[131] = v2;
    if (!v2)
LABEL_10:
      v0[131] = getprogname();
  }
}

uint64_t nw_utilities_get_user_agent()
{
  if (nw_utilities_get_user_agent::onceToken != -1)
    dispatch_once(&nw_utilities_get_user_agent::onceToken, &__block_literal_global_9_44031);
  return nw_utilities_get_user_agent::user_agent_string;
}

void __nw_utilities_get_user_agent_block_invoke()
{
  const __CFAllocator *v0;
  CFMutableStringRef Mutable;
  __CFBundle *MainBundle;
  __CFBundle *v3;
  const __CFDictionary *InfoDictionary;
  const void *Value;
  CFTypeRef ValueForInfoDictionaryKey;
  CFTypeRef v7;
  const char *v8;
  const void *v9;
  const void *v10;
  const char *v11;
  const __CFCharacterSet *URLPathAllowedCharacterSet;
  __CFCharacterSet *MutableCopy;
  const __CFString *v14;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  MainBundle = CFBundleGetMainBundle();
  if (!MainBundle)
    goto LABEL_14;
  v3 = MainBundle;
  InfoDictionary = CFBundleGetInfoDictionary(MainBundle);
  if (InfoDictionary)
  {
    Value = CFDictionaryGetValue(InfoDictionary, (const void *)*MEMORY[0x1E0C9AE88]);
    ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(v3, (CFStringRef)*MEMORY[0x1E0C9AE90]);
    v7 = ValueForInfoDictionaryKey;
    if (Value)
    {
      if (ValueForInfoDictionaryKey)
        CFStringAppendFormat(Mutable, 0, CFSTR("%@/%@"), Value, ValueForInfoDictionaryKey);
      else
        CFStringAppendFormat(Mutable, 0, CFSTR("%@"), Value);
      goto LABEL_14;
    }
  }
  else
  {
    v7 = CFBundleGetValueForInfoDictionaryKey(v3, (CFStringRef)*MEMORY[0x1E0C9AE90]);
  }
  if (nw_utilities_get_self_name::onceToken != -1)
    dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_8_44028);
  if (nw_utilities_get_self_name::name)
  {
    if (v7)
      CFStringAppendFormat(Mutable, 0, CFSTR("%s/%@"), nw_utilities_get_self_name::name, v7);
    else
      CFStringAppendFormat(Mutable, 0, CFSTR("%s"), nw_utilities_get_self_name::name);
  }
LABEL_14:
  if (CFStringGetLength(Mutable) <= 0)
    v8 = "";
  else
    v8 = " ";
  CFStringAppendFormat(Mutable, 0, CFSTR("%sNetwork/%s"), v8, "4277.2.5");
  v9 = (const void *)MGCopyAnswer();
  v10 = (const void *)MGCopyAnswer();
  if (v9)
  {
    if (CFStringGetLength(Mutable) <= 0)
      v11 = "";
    else
      v11 = " ";
    if (v10)
      CFStringAppendFormat(Mutable, 0, CFSTR("%s%@/%@"), v11, v9, v10);
    else
      CFStringAppendFormat(Mutable, 0, CFSTR("%s%@"), v11, 0);
    CFRelease(v9);
  }
  if (v10)
    CFRelease(v10);
  URLPathAllowedCharacterSet = (const __CFCharacterSet *)_CFURLComponentsGetURLPathAllowedCharacterSet();
  MutableCopy = CFCharacterSetCreateMutableCopy(v0, URLPathAllowedCharacterSet);
  CFCharacterSetAddCharactersInString(MutableCopy, CFSTR(" "));
  v14 = (const __CFString *)_CFStringCreateByAddingPercentEncodingWithAllowedCharacters();
  if (Mutable)
    CFRelease(Mutable);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (CFStringGetLength(v14) >= 1)
    nw_utilities_get_user_agent::user_agent_string = nw_utilities_create_c_string_from_cfstring(v14);
  if (v14)
    CFRelease(v14);
}

uint64_t nw_utilities_get_self_is_daemon()
{
  if (nw_utilities_get_self_is_daemon::onceToken != -1)
    dispatch_once(&nw_utilities_get_self_is_daemon::onceToken, &__block_literal_global_33);
  return nw_utilities_get_self_is_daemon::is_daemon;
}

void __nw_utilities_get_self_is_daemon_block_invoke(double a1)
{
  uint64_t v1;
  void *v2;
  char v3;
  BOOL v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  gotLoadHelper_x19__OBJC_CLASS___RBSProcessHandle(a1);
  if (objc_opt_class()
    && (objc_msgSend(*(id *)(v1 + 3424), "currentProcess"),
        v2 = (void *)objc_claimAutoreleasedReturnValue(),
        v3 = objc_msgSend(v2, "isDaemon"),
        v2,
        (v3 & 1) != 0))
  {
    v4 = 1;
  }
  else
  {
    if (nw_utilities_get_self_bundle_id::onceToken != -1)
      dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_7);
    v4 = nw_utilities_get_self_bundle_id::bundle_identifier_string == 0;
  }
  nw_utilities_get_self_is_daemon::is_daemon = v4;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = 136446466;
    v7 = "nw_utilities_get_self_is_daemon_block_invoke";
    v8 = 1024;
    v9 = nw_utilities_get_self_is_daemon::is_daemon;
    _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s is_daemon: %{BOOL}d", (uint8_t *)&v6, 0x12u);
  }

}

void sub_183801814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_utilities_convert_hex_string_to_bytes(const char *a1, size_t *a2)
{
  size_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  char v10;
  NSObject *v11;
  int v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  _BOOL8 result;
  NSObject *v22;
  void *v23;
  char *backtrace_string;
  _BOOL4 v25;
  const char *v26;
  _BOOL4 v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  size_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_utilities_convert_hex_string_to_bytes";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v14, &type, &v28))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_utilities_convert_hex_string_to_bytes";
        v17 = "%{public}s called with null hex_string";
LABEL_53:
        _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
      }
LABEL_54:

      goto LABEL_55;
    }
    if (!v28)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_utilities_convert_hex_string_to_bytes";
        v17 = "%{public}s called with null hex_string, backtrace limit exceeded";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v25 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_utilities_convert_hex_string_to_bytes";
        v17 = "%{public}s called with null hex_string, no backtrace";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_utilities_convert_hex_string_to_bytes";
      v32 = 2082;
      v33 = (uint64_t)backtrace_string;
      v26 = "%{public}s called with null hex_string, dumping backtrace:%{public}s";
LABEL_43:
      _os_log_impl(&dword_182FBE000, v15, v16, v26, buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_55;
  }
  if (a2)
  {
    v4 = strlen(a1);
    *a2 = 0;
    if (v4 <= 1)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v31 = "strict_calloc";
      v20 = (void *)_os_log_send_and_compose_impl();

      result = __nwlog_abort((uint64_t)v20);
      if (result)
      {
LABEL_58:
        __break(1u);
        return result;
      }
      free(v20);
    }
    v5 = malloc_type_calloc(1uLL, v4 >> 1, 0xEAFB8F1AuLL);
    if (v5)
    {
      if (v4)
      {
LABEL_6:
        v6 = 0;
        while (1)
        {
          v9 = a1[v6];
          v10 = v9 - 48;
          if ((v9 - 48) < 0xA)
            goto LABEL_12;
          if ((v9 - 97) <= 5)
            break;
          if ((v9 - 65) > 5)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v11 = (id)gLogObj;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              v12 = a1[v6];
              *(_DWORD *)buf = 136446466;
              v31 = "nw_utilities_convert_hex_string_to_bytes";
              v32 = 1024;
              LODWORD(v33) = v12;
              _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s Not hex character: %c", buf, 0x12u);
            }

            if (v5)
            {
              free(v5);
              return 0;
            }
            return (BOOL)v5;
          }
          v10 = v9 - 55;
          if ((v6 & 1) == 0)
          {
LABEL_13:
            v8 = 16 * v10;
            v7 = v6 >> 1;
            goto LABEL_8;
          }
LABEL_7:
          v7 = v6 >> 1;
          v8 = *((_BYTE *)v5 + (v6 >> 1)) | v10;
LABEL_8:
          *((_BYTE *)v5 + v7) = v8;
          if (v4 == ++v6)
            goto LABEL_33;
        }
        v10 = v9 - 87;
LABEL_12:
        if ((v6 & 1) == 0)
          goto LABEL_13;
        goto LABEL_7;
      }
LABEL_33:
      *a2 = v4 >> 1;
      return (BOOL)v5;
    }
    __nwlog_obj();
    v22 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v31 = "strict_calloc";
    v32 = 2048;
    v33 = 1;
    v34 = 2048;
    v35 = v4 >> 1;
    v23 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v23);
    if (!result)
    {
      free(v23);
      if (v4)
        goto LABEL_6;
      goto LABEL_33;
    }
    goto LABEL_58;
  }
  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v31 = "nw_utilities_convert_hex_string_to_bytes";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (__nwlog_fault(v14, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_utilities_convert_hex_string_to_bytes";
        v17 = "%{public}s called with null output_buffer_length";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (!v28)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_utilities_convert_hex_string_to_bytes";
        v17 = "%{public}s called with null output_buffer_length, backtrace limit exceeded";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v27 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_utilities_convert_hex_string_to_bytes";
        v17 = "%{public}s called with null output_buffer_length, no backtrace";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_utilities_convert_hex_string_to_bytes";
      v32 = 2082;
      v33 = (uint64_t)backtrace_string;
      v26 = "%{public}s called with null output_buffer_length, dumping backtrace:%{public}s";
      goto LABEL_43;
    }
    goto LABEL_44;
  }
LABEL_55:
  if (v14)
    free(v14);
  return 0;
}

void *nw_protocol_socksv4_copy_definition()
{
  void *result;

  if (nw_protocol_socksv4_copy_definition::onceToken != -1)
    dispatch_once(&nw_protocol_socksv4_copy_definition::onceToken, &__block_literal_global_44100);
  result = (void *)nw_protocol_socksv4_copy_definition::definition;
  if (nw_protocol_socksv4_copy_definition::definition)
    return os_retain((void *)nw_protocol_socksv4_copy_definition::definition);
  return result;
}

BOOL __nw_protocol_socksv4_copy_definition_block_invoke()
{
  nw_protocol_socksv4_copy_definition::definition = (uint64_t)nw_framer_create_definition("socksv4", 0, &__block_literal_global_6_44104);
  return nw_protocol_definition_register((void *)nw_protocol_socksv4_copy_definition::definition);
}

uint64_t __nw_protocol_socksv4_copy_definition_block_invoke_2(uint64_t a1, NSObject *a2)
{
  _DWORD *v3;
  nw_parameters_t v4;
  id *v5;
  id v6;
  id *v7;
  id v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  nw_endpoint_t v12;
  _BOOL8 v13;
  nw_endpoint_type_t v14;
  const sockaddr *address;
  const char *v16;
  const char *v17;
  size_t v18;
  size_t v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  const char *string_ptr;
  const char *v25;
  size_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  _BOOL4 v32;
  char *backtrace_string;
  _BOOL4 v34;
  const char *hostname;
  const char *v36;
  size_t v37;
  size_t v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  char *v43;
  _BOOL4 v44;
  NSObject *v45;
  uint64_t result;
  NSObject *v47;
  void *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  const char *v52;
  char *v53;
  _BOOL4 v54;
  NSObject *v55;
  _QWORD cleanup_handler[5];
  _QWORD output_handler[5];
  _QWORD input_handler[6];
  char v59;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  size_t v64;
  __int16 v65;
  char *v66;
  uint8_t output_buffer[4];
  const char *v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v3)
  {
LABEL_2:
    v3[2] = 0;
    v4 = nw_framer_copy_parameters(a2);
    if (v4)
    {
      v5 = v4;
      v6 = v5[23];

      if (v6)
      {
        v7 = (id *)v6;
        v8 = v7[13];

        if (v8)
        {
          v9 = v8;
          v10 = (const char *)v9[2];

          if (v10)
            *(_QWORD *)v3 = xpc_string_create(v10);
        }
        os_release(v7);
      }
      os_release(v5);
    }
    v11 = MEMORY[0x1E0C809B0];
    input_handler[0] = MEMORY[0x1E0C809B0];
    input_handler[1] = 0x40000000;
    input_handler[2] = __nw_protocol_socksv4_copy_definition_block_invoke_3;
    input_handler[3] = &__block_descriptor_tmp_11_44109;
    input_handler[4] = v3;
    input_handler[5] = a2;
    nw_framer_set_input_handler(a2, input_handler);
    output_handler[0] = v11;
    output_handler[1] = 0x40000000;
    output_handler[2] = __nw_protocol_socksv4_copy_definition_block_invoke_2_12;
    output_handler[3] = &__block_descriptor_tmp_14_44110;
    output_handler[4] = v3;
    nw_framer_set_output_handler(a2, output_handler);
    cleanup_handler[0] = v11;
    cleanup_handler[1] = 0x40000000;
    cleanup_handler[2] = __nw_protocol_socksv4_copy_definition_block_invoke_3_15;
    cleanup_handler[3] = &__block_descriptor_tmp_17_44111;
    cleanup_handler[4] = v3;
    nw_framer_set_cleanup_handler(a2, cleanup_handler);
    if (a2)
    {
      v12 = nw_framer_copy_remote_endpoint(a2);
      v13 = nw_endpoint_copy_proxy_original_endpoint(v12);
      if (v12)
        os_release(v12);
      v14 = nw_endpoint_get_type((nw_endpoint_t)v13);
      bzero(&v68, 0x204uLL);
      *(_WORD *)output_buffer = 260;
      *(_WORD *)&output_buffer[2] = __rev16(nw_endpoint_get_port((nw_endpoint_t)v13));
      if (v14 == nw_endpoint_type_address)
      {
        address = nw_endpoint_get_address((nw_endpoint_t)v13);
        if (address->sa_family == 30)
        {
          if (gLogDatapath)
          {
            v55 = __nwlog_obj();
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              v62 = "nw_socksv4_send_connect";
              _os_log_impl(&dword_182FBE000, v55, OS_LOG_TYPE_DEBUG, "%{public}s IPv6 is not supported with SOCKSv4", buf, 0xCu);
            }
          }
          nw_framer_mark_failed_with_error(a2, 43);
          if (!v13)
            return 2;
          goto LABEL_85;
        }
        LODWORD(v68) = *(_DWORD *)&address->sa_data[2];
        if (!*(_QWORD *)v3)
          goto LABEL_81;
        string_ptr = xpc_string_get_string_ptr(*(xpc_object_t *)v3);
        if (!string_ptr)
          goto LABEL_81;
        v25 = string_ptr;
        v26 = strlen(string_ptr);
        v19 = v26;
        if (!v26)
          goto LABEL_82;
        if (v26 < 0xFF)
        {
          memcpy((char *)&v68 + 4, v25, v26);
          goto LABEL_82;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446466;
        v62 = "nw_socksv4_send_connect";
        v63 = 2048;
        v64 = v19;
        v27 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v59 = 0;
        if (__nwlog_fault(v27, &type, &v59))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v28 = __nwlog_obj();
            v29 = type;
            if (!os_log_type_enabled(v28, type))
              goto LABEL_79;
            *(_DWORD *)buf = 136446466;
            v62 = "nw_socksv4_send_connect";
            v63 = 2048;
            v64 = v19;
            v30 = "%{public}s SOCKS (by address) username has invalid length %zu";
            goto LABEL_78;
          }
          if (!v59)
          {
            v28 = __nwlog_obj();
            v29 = type;
            if (!os_log_type_enabled(v28, type))
              goto LABEL_79;
            *(_DWORD *)buf = 136446466;
            v62 = "nw_socksv4_send_connect";
            v63 = 2048;
            v64 = v19;
            v30 = "%{public}s SOCKS (by address) username has invalid length %zu, backtrace limit exceeded";
            goto LABEL_78;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v28 = __nwlog_obj();
          v29 = type;
          v34 = os_log_type_enabled(v28, type);
          if (backtrace_string)
          {
            if (v34)
            {
              *(_DWORD *)buf = 136446722;
              v62 = "nw_socksv4_send_connect";
              v63 = 2048;
              v64 = v19;
              v65 = 2082;
              v66 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s SOCKS (by address) username has invalid length %zu, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(backtrace_string);
            goto LABEL_79;
          }
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            v62 = "nw_socksv4_send_connect";
            v63 = 2048;
            v64 = v19;
            v30 = "%{public}s SOCKS (by address) username has invalid length %zu, no backtrace";
LABEL_78:
            _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0x16u);
          }
        }
LABEL_79:
        if (v27)
          free(v27);
LABEL_81:
        LODWORD(v19) = 0;
        goto LABEL_82;
      }
      LODWORD(v68) = 0x10000000;
      if (!*(_QWORD *)v3)
        goto LABEL_52;
      v16 = xpc_string_get_string_ptr(*(xpc_object_t *)v3);
      if (!v16)
        goto LABEL_52;
      v17 = v16;
      v18 = strlen(v16);
      v19 = v18;
      if (v18)
      {
        if (v18 >= 0xFF)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446466;
          v62 = "nw_socksv4_send_connect";
          v63 = 2048;
          v64 = v19;
          v20 = (char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v59 = 0;
          if (!__nwlog_fault(v20, &type, &v59))
            goto LABEL_50;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v21 = gLogObj;
            v22 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type))
              goto LABEL_50;
            *(_DWORD *)buf = 136446466;
            v62 = "nw_socksv4_send_connect";
            v63 = 2048;
            v64 = v19;
            v23 = "%{public}s SOCKS (by host) username has invalid length %zu";
          }
          else if (v59)
          {
            v31 = (char *)__nw_create_backtrace_string();
            v21 = __nwlog_obj();
            v22 = type;
            v32 = os_log_type_enabled(v21, type);
            if (v31)
            {
              if (v32)
              {
                *(_DWORD *)buf = 136446722;
                v62 = "nw_socksv4_send_connect";
                v63 = 2048;
                v64 = v19;
                v65 = 2082;
                v66 = v31;
                _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s SOCKS (by host) username has invalid length %zu, dumping backtrace:%{public}s", buf, 0x20u);
              }
              free(v31);
              goto LABEL_50;
            }
            if (!v32)
            {
LABEL_50:
              if (v20)
                free(v20);
LABEL_52:
              LODWORD(v19) = 0;
              goto LABEL_53;
            }
            *(_DWORD *)buf = 136446466;
            v62 = "nw_socksv4_send_connect";
            v63 = 2048;
            v64 = v19;
            v23 = "%{public}s SOCKS (by host) username has invalid length %zu, no backtrace";
          }
          else
          {
            v21 = __nwlog_obj();
            v22 = type;
            if (!os_log_type_enabled(v21, type))
              goto LABEL_50;
            *(_DWORD *)buf = 136446466;
            v62 = "nw_socksv4_send_connect";
            v63 = 2048;
            v64 = v19;
            v23 = "%{public}s SOCKS (by host) username has invalid length %zu, backtrace limit exceeded";
          }
          _os_log_impl(&dword_182FBE000, v21, v22, v23, buf, 0x16u);
          goto LABEL_50;
        }
        memcpy((char *)&v68 + 4, v17, v18);
      }
LABEL_53:
      *((_BYTE *)&v68 + v19 + 4) = 0;
      LODWORD(v19) = v19 + 1;
      hostname = nw_endpoint_get_hostname((nw_endpoint_t)v13);
      if (!hostname)
        goto LABEL_82;
      v36 = hostname;
      v37 = strlen(hostname);
      if (!v37)
        goto LABEL_82;
      v38 = v37;
      if (v37 < 0xFF)
      {
        memcpy((char *)&v68 + v19 + 4, v36, v37);
        LODWORD(v19) = v19 + v38;
        goto LABEL_82;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      v62 = "nw_socksv4_send_connect";
      v63 = 2048;
      v64 = v38;
      v39 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v59 = 0;
      if (__nwlog_fault(v39, &type, &v59))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v40 = gLogObj;
          v41 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_71;
          *(_DWORD *)buf = 136446466;
          v62 = "nw_socksv4_send_connect";
          v63 = 2048;
          v64 = v38;
          v42 = "%{public}s SOCKS hostname has invalid length %zu";
          goto LABEL_70;
        }
        if (!v59)
        {
          v40 = __nwlog_obj();
          v41 = type;
          if (!os_log_type_enabled(v40, type))
            goto LABEL_71;
          *(_DWORD *)buf = 136446466;
          v62 = "nw_socksv4_send_connect";
          v63 = 2048;
          v64 = v38;
          v42 = "%{public}s SOCKS hostname has invalid length %zu, backtrace limit exceeded";
          goto LABEL_70;
        }
        v43 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v40 = gLogObj;
        v41 = type;
        v44 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v43)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446722;
            v62 = "nw_socksv4_send_connect";
            v63 = 2048;
            v64 = v38;
            v65 = 2082;
            v66 = v43;
            _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s SOCKS hostname has invalid length %zu, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v43);
          goto LABEL_71;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_socksv4_send_connect";
          v63 = 2048;
          v64 = v38;
          v42 = "%{public}s SOCKS hostname has invalid length %zu, no backtrace";
LABEL_70:
          _os_log_impl(&dword_182FBE000, v40, v41, v42, buf, 0x16u);
        }
      }
LABEL_71:
      if (v39)
        free(v39);
LABEL_82:
      *((_BYTE *)&v68 + v19 + 4) = 0;
      nw_framer_write_output(a2, output_buffer, (v19 + 9));
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v45 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_socksv4_send_connect";
        _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_DEBUG, "%{public}s Sent client request", buf, 0xCu);
      }
      v3[2] = 1;
      if (!v13)
        return 2;
LABEL_85:
      os_release((void *)v13);
      return 2;
    }
    __nwlog_obj();
    *(_DWORD *)output_buffer = 136446210;
    v68 = "nw_socksv4_send_connect";
    v49 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v49, buf, &type))
    {
      if (buf[0] == 17)
      {
        v50 = __nwlog_obj();
        v51 = buf[0];
        if (!os_log_type_enabled(v50, (os_log_type_t)buf[0]))
          goto LABEL_105;
        *(_DWORD *)output_buffer = 136446210;
        v68 = "nw_socksv4_send_connect";
        v52 = "%{public}s called with null framer";
        goto LABEL_104;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v50 = __nwlog_obj();
        v51 = buf[0];
        if (!os_log_type_enabled(v50, (os_log_type_t)buf[0]))
          goto LABEL_105;
        *(_DWORD *)output_buffer = 136446210;
        v68 = "nw_socksv4_send_connect";
        v52 = "%{public}s called with null framer, backtrace limit exceeded";
        goto LABEL_104;
      }
      v53 = (char *)__nw_create_backtrace_string();
      v50 = __nwlog_obj();
      v51 = buf[0];
      v54 = os_log_type_enabled(v50, (os_log_type_t)buf[0]);
      if (v53)
      {
        if (v54)
        {
          *(_DWORD *)output_buffer = 136446466;
          v68 = "nw_socksv4_send_connect";
          v69 = 2082;
          v70 = (uint64_t)v53;
          _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null framer, dumping backtrace:%{public}s", output_buffer, 0x16u);
        }
        free(v53);
        goto LABEL_105;
      }
      if (v54)
      {
        *(_DWORD *)output_buffer = 136446210;
        v68 = "nw_socksv4_send_connect";
        v52 = "%{public}s called with null framer, no backtrace";
LABEL_104:
        _os_log_impl(&dword_182FBE000, v50, v51, v52, output_buffer, 0xCu);
      }
    }
LABEL_105:
    if (v49)
      free(v49);
    return 2;
  }
  v47 = __nwlog_obj();
  os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
  *(_DWORD *)output_buffer = 136446722;
  v68 = "strict_calloc";
  v69 = 2048;
  v70 = 1;
  v71 = 2048;
  v72 = 16;
  v48 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v48);
  if (!(_DWORD)result)
  {
    free(v48);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t __nw_protocol_socksv4_copy_definition_block_invoke_3(uint64_t a1, nw_framer_t framer)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD v10[6];
  uint8_t temp_buffer[8];
  uint8_t *v12;
  uint64_t v13;
  char v14;
  __int128 buf;
  uint64_t v16;
  void *v17;
  nw_framer_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5 != 1)
  {
    if (!v5)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = "nw_protocol_socksv4_copy_definition_block_invoke_3";
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s Reading packets in initial state", (uint8_t *)&buf, 0xCu);
      }
      return 0;
    }
LABEL_7:
    if (v5 == 2)
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v16 = 0x2000000000;
      v17 = 0;
      *(_QWORD *)temp_buffer = 0;
      v12 = temp_buffer;
      v13 = 0x2000000000;
      v14 = 0;
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 0x40000000;
      v10[2] = __nw_protocol_socksv4_copy_definition_block_invoke_7;
      v10[3] = &unk_1E14A2540;
      v10[4] = &buf;
      v10[5] = temp_buffer;
      nw_framer_parse_input(framer, 1uLL, 0xFFFFFFFFuLL, 0, v10);
      v8 = nw_framer_message_create(*(nw_framer_t *)(a1 + 40));
      nw_framer_deliver_input_no_copy(framer, *(_QWORD *)(*((_QWORD *)&buf + 1) + 24), v8, v12[24]);
      if (v8)
        os_release(v8);
      _Block_object_dispose(temp_buffer, 8);
      _Block_object_dispose(&buf, 8);
    }
    return 0;
  }
  *(_QWORD *)temp_buffer = 0;
  *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
  *((_QWORD *)&buf + 1) = 0x40000000;
  v16 = (uint64_t)___ZL24nw_socksv4_parse_connectP9nw_framerP10nw_socksv4_block_invoke;
  v17 = &__block_descriptor_tmp_24_44138;
  v18 = framer;
  v19 = v4;
  v7 = 8;
  if (nw_framer_parse_input(framer, 8uLL, 8uLL, temp_buffer, &buf))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8);
    goto LABEL_7;
  }
  return v7;
}

BOOL __nw_protocol_socksv4_copy_definition_block_invoke_2_12(_BOOL8 result, nw_framer_t framer, int a3, size_t output_length)
{
  if (*(_DWORD *)(*(_QWORD *)(result + 32) + 8) == 2)
    return nw_framer_write_output_no_copy(framer, output_length);
  return result;
}

void __nw_protocol_socksv4_copy_definition_block_invoke_3_15(uint64_t a1)
{
  xpc_object_t *v2;

  v2 = *(xpc_object_t **)(a1 + 32);
  if (!*v2 || (xpc_release(*v2), **(_QWORD **)(a1 + 32) = 0, (v2 = *(xpc_object_t **)(a1 + 32)) != 0))
    free(v2);
}

uint64_t ___ZL24nw_socksv4_parse_connectP9nw_framerP10nw_socksv4_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v5 = *a2;
      v12 = 136446466;
      v13 = "nw_socksv4_parse_connect_block_invoke";
      v14 = 1024;
      v15 = v5;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s SOCKSv4 replies must start will a NULL byte, received 0x%x", (uint8_t *)&v12, 0x12u);
    }
    v6 = *(NSObject **)(a1 + 32);
    v7 = 100;
LABEL_12:
    nw_framer_mark_failed_with_error(v6, v7);
    return 8;
  }
  v8 = a2[1];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = gLogObj;
  if (v8 != 90)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v10 = a2[1];
      v12 = 136446466;
      v13 = "nw_socksv4_parse_connect_block_invoke";
      v14 = 1024;
      v15 = v10;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s Received SOCKS connect status %d, failing", (uint8_t *)&v12, 0x12u);
    }
    v6 = *(NSObject **)(a1 + 32);
    v7 = 1;
    goto LABEL_12;
  }
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    v12 = 136446210;
    v13 = "nw_socksv4_parse_connect_block_invoke";
    _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s Received complete connect message from SOCKS server", (uint8_t *)&v12, 0xCu);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) = 2;
  nw_framer_pass_through_input(*(nw_framer_t *)(a1 + 32));
  nw_framer_pass_through_output(*(nw_framer_t *)(a1 + 32));
  nw_framer_mark_ready(*(nw_framer_t *)(a1 + 32));
  return 8;
}

uint64_t __nw_protocol_socksv4_copy_definition_block_invoke_7(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a4;
  return 0;
}

uint64_t __nwlog_fault(const char *a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  char v11;
  const char *v12;
  void *v13;
  Class Class;
  xpc_object_t v15;
  void *v16;
  uint64_t v18;
  NSObject *v19;
  BOOL value;
  _QWORD v21[6];
  char v22;
  _QWORD v23[5];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  void *aBlock;
  char v30;
  uint8_t buf[4];
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  if (sNWIsBetweenForkAndExec == 1 && (sNWParentAllowedDispatch & 1) != 0)
    return 0;
  if ((sNWDispatchAllowedNow & 1) != 0)
  {
    v7 = 1;
    v6 = 0;
    if (!a3)
      return v6;
  }
  else if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0 && (_dispatch_is_multithreaded() & 1) != 0
         || (getpid(), sandbox_check() == 1))
  {
    v7 = 1;
    sNWDispatchAllowedNow = 1;
    v6 = 0;
    if (!a3)
      return v6;
  }
  else
  {
    v7 = sNWDispatchAllowedNow;
    v6 = 0;
    if (!a3)
      return v6;
  }
  if (a2 && v7)
  {
    *a2 = 16;
    *a3 = 0;
    v24 = 0;
    v25 = &v24;
    v26 = 0x3802000000;
    v27 = __Block_byref_object_copy__44147;
    v28 = __Block_byref_object_dispose__44148;
    aBlock = 0;
    v8 = MEMORY[0x1E0C809B0];
    v30 = -1;
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 0x40000000;
    v23[2] = ____nwlog_fault_block_invoke;
    v23[3] = &unk_1E14A25E8;
    v23[4] = &v24;
    os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
    ____nwlog_fault_block_invoke((uint64_t)v23);
    os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
    v9 = v25[5];
    if (v9)
    {
      v9 = (*(uint64_t (**)(uint64_t, const char *))(v9 + 16))(v9, a1);
      if ((v9 & 1) != 0)
      {
        v6 = 0;
LABEL_44:
        _Block_object_dispose(&v24, 8);
        if ((v30 & 1) != 0 && aBlock)
          _Block_release(aBlock);
        return v6;
      }
    }
    if (a1)
    {
      v9 = pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
      if (sNWIsBetweenForkAndExec != 1 || (sNWParentAllowedDispatch & 1) == 0)
      {
        if ((sNWDispatchAllowedNow & 1) != 0)
        {
LABEL_27:
          pthread_mutex_lock(&__nwlog_fault_add_description_to_list(char const*)::mutex);
          v10 = (xpc_object_t)__nwlog_fault_add_description_to_list(char const*)::known_faults;
          if (__nwlog_fault_add_description_to_list(char const*)::known_faults
            || (v10 = xpc_dictionary_create(0, 0, 0),
                (__nwlog_fault_add_description_to_list(char const*)::known_faults = (uint64_t)v10) != 0))
          {
            if (xpc_dictionary_get_BOOL(v10, a1))
            {
              v11 = 1;
LABEL_34:
              v9 = pthread_mutex_unlock(&__nwlog_fault_add_description_to_list(char const*)::mutex);
LABEL_35:
              v12 = (const char *)nw_setting_tcpconn_disable_simulate_crash;
              networkd_settings_init(v9);
              if (sCachedSettings)
              {
                pthread_mutex_lock(&sSettingsMutex);
                v13 = (void *)sCachedSettings;
                if (sCachedSettings
                  && (Class = object_getClass((id)sCachedSettings), v12)
                  && Class == (Class)MEMORY[0x1E0C812F8]
                  && (v15 = xpc_dictionary_get_value(v13, v12)) != 0
                  && (v16 = v15, object_getClass(v15) == (Class)MEMORY[0x1E0C812D0]))
                {
                  value = xpc_BOOL_get_value(v16);
                  pthread_mutex_unlock(&sSettingsMutex);
                  if (value)
                    goto LABEL_43;
                }
                else
                {
                  pthread_mutex_unlock(&sSettingsMutex);
                }
              }
              v21[0] = v8;
              v21[1] = 0x40000000;
              v21[2] = ____nwlog_fault_block_invoke_2;
              v21[3] = &__block_descriptor_tmp_1;
              v22 = v11;
              v21[4] = a2;
              v21[5] = a3;
              os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
              ____nwlog_fault_block_invoke_2((uint64_t)v21);
              os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
LABEL_43:
              v6 = 1;
              goto LABEL_44;
            }
            xpc_dictionary_set_BOOL((xpc_object_t)__nwlog_fault_add_description_to_list(char const*)::known_faults, a1, 1);
          }
          else
          {
            v18 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init(v18);
            v19 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              v32 = "__nwlog_fault_add_description_to_list";
              _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
            }
          }
          v11 = 0;
          goto LABEL_34;
        }
        if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0 && (_dispatch_is_multithreaded() & 1) != 0
          || (getpid(), v9 = sandbox_check(), (_DWORD)v9 == 1))
        {
          sNWDispatchAllowedNow = 1;
          goto LABEL_27;
        }
        if (sNWDispatchAllowedNow == 1)
          goto LABEL_27;
      }
    }
    v11 = 0;
    goto LABEL_35;
  }
  return v6;
}

uint64_t __Block_byref_object_copy__44147(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__44148(uint64_t a1)
{
  const void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(const void **)(a1 + 40);
    if (v2)
      _Block_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void ____nwlog_fault_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;
  const void *v5;

  if (s_override_fault_handler)
  {
    v2 = _Block_copy((const void *)s_override_fault_handler);
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 1) != 0)
    {
      v5 = *(const void **)(v3 + 40);
      if (v5)
      {
        _Block_release(v5);
        v4 = *(_BYTE *)(v3 + 48);
      }
    }
    *(_QWORD *)(v3 + 40) = v2;
    *(_BYTE *)(v3 + 48) = v4 | 1;
  }
}

uint64_t ____nwlog_fault_block_invoke_2(uint64_t result)
{
  int v1;
  int v2;

  if (!*(_BYTE *)(result + 48))
  {
    v1 = __nwlog_fault::num_faults;
    if (__nwlog_fault::num_faults <= 0x18)
    {
      **(_BYTE **)(result + 32) = 17;
      __nwlog_fault::num_faults = v1 + 1;
    }
    v2 = __nwlog_fault::num_backtraces;
    if (__nwlog_fault::num_backtraces <= 0x63)
    {
      **(_BYTE **)(result + 40) = 1;
      __nwlog_fault::num_backtraces = v2 + 1;
    }
  }
  return result;
}

BOOL __nw_should_fault()
{
  return !networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_disable_simulate_crash);
}

BOOL __nwlog_abort(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  uint64_t v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = &v8;
  v10 = 0x3002000000;
  v11 = __Block_byref_object_copy__2;
  v12 = __Block_byref_object_dispose__3;
  v13 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ____nwlog_abort_block_invoke;
  v7[3] = &unk_1E14A2630;
  v7[4] = &v8;
  os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
  ____nwlog_abort_block_invoke((uint64_t)v7);
  os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
  v2 = v9[5];
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v9[5], a1) & 1) == 0)
    {
      v3 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v3);
      v4 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v15 = "__nwlog_abort";
        v16 = 2080;
        v17 = a1;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s Abort not handled: %s", buf, 0x16u);
      }
    }
    v5 = (const void *)v9[5];
    if (v5)
    {
      _Block_release(v5);
      v9[5] = 0;
    }
  }
  else
  {
    qword_1EDCE21C0 = a1;
  }
  _Block_object_dispose(&v8, 8);
  return v2 == 0;
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void *____nwlog_abort_block_invoke(uint64_t a1)
{
  void *result;

  result = (void *)s_abort_override_handler;
  if (s_abort_override_handler)
  {
    result = _Block_copy((const void *)s_abort_override_handler);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  }
  return result;
}

const char *__nw_create_backtrace_string()
{
  int v0;
  char **v1;
  char **v2;
  uint64_t v3;
  const char **v4;
  const char *v5;
  BOOL v6;
  const char *v8;
  void *v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  nw_append_format(&v8, "\n        [%s]%s libnetcore%s%s%s%s", "arm64", "", "-", "4277.2.5", "", "");
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 0u;
  v0 = backtrace(v9, 128);
  v1 = backtrace_symbols(v9, v0);
  v2 = v1;
  if (v0 >= 1)
  {
    v3 = v0 - 1;
    v4 = (const char **)v1;
    do
    {
      v5 = *v4++;
      nw_append_format(&v8, "\n    %s", v5);
      if (v8)
        v6 = v3 == 0;
      else
        v6 = 1;
      --v3;
    }
    while (!v6);
    goto LABEL_10;
  }
  if (v1)
LABEL_10:
    free(v2);
  return v8;
}

uint64_t __nw_should_log_backtrace()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ____nw_should_log_backtrace_block_invoke;
  v2[3] = &unk_1E14A2658;
  v2[4] = &v3;
  os_unfair_lock_lock(&__nw_should_log_backtrace::backtrace_lock);
  ____nw_should_log_backtrace_block_invoke((uint64_t)v2);
  os_unfair_lock_unlock(&__nw_should_log_backtrace::backtrace_lock);
  v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t ____nw_should_log_backtrace_block_invoke(uint64_t result)
{
  int v1;

  v1 = __nw_should_log_backtrace::num_backtraces;
  if (__nw_should_log_backtrace::num_backtraces <= 0x31)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
    __nw_should_log_backtrace::num_backtraces = v1 + 1;
  }
  return result;
}

uint64_t __nwlog_override_fault_block(uint64_t a1, const void *a2)
{
  uint64_t v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  const void *v13;
  __int128 *p_buf;
  __int128 buf;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  void *aBlock;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  pthread_rwlock_wrlock(&s_fault_lock);
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v16 = 0x3802000000;
  v17 = __Block_byref_object_copy__44147;
  v18 = __Block_byref_object_dispose__44148;
  aBlock = 0;
  v20 = -1;
  v4 = MEMORY[0x1E0C809B0];
  v9 = MEMORY[0x1E0C809B0];
  v10 = 0x40000000;
  v11 = ____nwlog_set_override_fault_handler_block_invoke;
  v12 = &unk_1E14A2680;
  v13 = a2;
  p_buf = &buf;
  os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
  ____nwlog_set_override_fault_handler_block_invoke((uint64_t)&v9);
  os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
  v5 = *(const void **)(*((_QWORD *)&buf + 1) + 40);
  *(_QWORD *)(*((_QWORD *)&buf + 1) + 40) = 0;
  _Block_object_dispose(&buf, 8);
  if ((v20 & 1) != 0 && aBlock)
    _Block_release(aBlock);
  (*(void (**)(uint64_t))(a1 + 16))(a1);
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v16 = 0x3802000000;
  v17 = __Block_byref_object_copy__44147;
  v18 = __Block_byref_object_dispose__44148;
  aBlock = 0;
  v20 = -1;
  v9 = v4;
  v10 = 0x40000000;
  v11 = ____nwlog_set_override_fault_handler_block_invoke;
  v12 = &unk_1E14A2680;
  v13 = v5;
  p_buf = &buf;
  os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
  ____nwlog_set_override_fault_handler_block_invoke((uint64_t)&v9);
  os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
  v6 = *(const void **)(*((_QWORD *)&buf + 1) + 40);
  *(_QWORD *)(*((_QWORD *)&buf + 1) + 40) = 0;
  _Block_object_dispose(&buf, 8);
  if ((v20 & 1) != 0 && aBlock)
    _Block_release(aBlock);
  _Block_release(v5);
  if (v6 != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = "__nwlog_override_fault_block";
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s __nwlog_set_override_fault_handler called while in block", (uint8_t *)&buf, 0xCu);
    }
  }
  _Block_release(v6);
  return pthread_rwlock_unlock(&s_fault_lock);
}

void ____nwlog_set_override_fault_handler_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;
  const void *v5;
  const void *v6;
  void *v7;
  const void *v8;

  if (s_override_fault_handler)
    v2 = _Block_copy((const void *)s_override_fault_handler);
  else
    v2 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 1) != 0)
  {
    v5 = *(const void **)(v3 + 40);
    if (v5)
    {
      _Block_release(v5);
      v4 = *(_BYTE *)(v3 + 48);
    }
  }
  *(_QWORD *)(v3 + 40) = v2;
  *(_BYTE *)(v3 + 48) = v4 | 1;
  v6 = *(const void **)(a1 + 32);
  if (!v6)
  {
    v7 = 0;
    v8 = (const void *)s_override_fault_handler;
    if (!s_override_fault_handler)
      goto LABEL_10;
    goto LABEL_9;
  }
  v7 = _Block_copy(v6);
  v8 = (const void *)s_override_fault_handler;
  if (s_override_fault_handler)
LABEL_9:
    _Block_release(v8);
LABEL_10:
  s_override_fault_handler = (uint64_t)v7;
}

uint64_t __nwlog_set_override_fault_handler(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t);
  void *aBlock;
  char v10;

  v4 = 0;
  v5 = &v4;
  v6 = 0x3802000000;
  v7 = __Block_byref_object_copy__44147;
  v8 = __Block_byref_object_dispose__44148;
  aBlock = 0;
  v10 = -1;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ____nwlog_set_override_fault_handler_block_invoke;
  v3[3] = &unk_1E14A2680;
  v3[4] = a1;
  v3[5] = &v4;
  os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
  ____nwlog_set_override_fault_handler_block_invoke((uint64_t)v3);
  os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
  v1 = v5[5];
  v5[5] = 0;
  _Block_object_dispose(&v4, 8);
  if ((v10 & 1) != 0 && aBlock)
    _Block_release(aBlock);
  return v1;
}

void __nwlog_override_abort_block(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ____nwlog_override_abort_block_block_invoke;
  v3[3] = &unk_1E14A26A8;
  v3[4] = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
  ____nwlog_override_abort_block_block_invoke((uint64_t)v3);
  os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
  (*(void (**)(uint64_t))(a1 + 16))(a1);
  os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
  s_abort_override_handler = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
}

uint64_t ____nwlog_override_abort_block_block_invoke(uint64_t result)
{
  s_abort_override_handler = *(_QWORD *)(result + 32);
  return result;
}

uint64_t __nwlog_activity_log()
{
  if (__nwlog_activity_log::onceToken != -1)
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
  return gactivityLogObj;
}

uint64_t __nwlog_browser_log()
{
  if (__nwlog_browser_log::onceToken[0] != -1)
    dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44175);
  return gbrowserLogObj;
}

void ____nwlog_browser_log_block_invoke()
{
  if ((gHasForked & 1) == 0)
    gbrowserLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "browser");
}

uint64_t __nwlog_candidate_manager_log()
{
  if (__nwlog_candidate_manager_log::onceToken != -1)
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
  return gcandidate_managerLogObj;
}

void ____nwlog_candidate_manager_log_block_invoke()
{
  if ((gHasForked & 1) == 0)
    gcandidate_managerLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "candidate_manager");
}

uint64_t __nwlog_connection_log()
{
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  return gconnectionLogObj;
}

uint64_t __nwlog_connection_group_log()
{
  if (__nwlog_connection_group_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
  return gconnection_groupLogObj;
}

void ____nwlog_connection_group_log_block_invoke()
{
  if ((gHasForked & 1) == 0)
    gconnection_groupLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "connection_group");
}

uint64_t __nwlog_http_log()
{
  if (__nwlog_http_log::onceToken != -1)
    dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44194);
  return ghttpLogObj;
}

void ____nwlog_http_log_block_invoke()
{
  if ((gHasForked & 1) == 0)
    ghttpLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "http");
}

uint64_t __nwlog_listener_log()
{
  if (__nwlog_listener_log::onceToken != -1)
    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
  return glistenerLogObj;
}

uint64_t __nwlog_metrics_log()
{
  if (__nwlog_metrics_log::onceToken != -1)
    dispatch_once(&__nwlog_metrics_log::onceToken, &__block_literal_global_36_44202);
  return gmetricsLogObj;
}

void ____nwlog_metrics_log_block_invoke()
{
  if ((gHasForked & 1) == 0)
    gmetricsLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "metrics");
}

uint64_t __nwlog_path_log()
{
  if (__nwlog_path_log::onceToken[0] != -1)
    dispatch_once(__nwlog_path_log::onceToken, &__block_literal_global_39_44205);
  return gpathLogObj;
}

uint64_t __nwlog_privacy_proxy_log()
{
  if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
  return gprivacy_proxyLogObj;
}

void ____nwlog_privacy_proxy_log_block_invoke()
{
  if ((gHasForked & 1) == 0)
    gprivacy_proxyLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "privacy_proxy");
}

uint64_t __nwlog_network_test_log()
{
  if (__nwlog_network_test_log::onceToken != -1)
    dispatch_once(&__nwlog_network_test_log::onceToken, &__block_literal_global_48);
  return gnetwork_testLogObj;
}

void ____nwlog_network_test_log_block_invoke()
{
  if ((gHasForked & 1) == 0)
    gnetwork_testLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "network_test");
}

uint64_t __nwlog_metricstream_log()
{
  if (__nwlog_metricstream_log::onceToken != -1)
    dispatch_once(&__nwlog_metricstream_log::onceToken, &__block_literal_global_51_44220);
  return gmetricstreamLogObj;
}

void ____nwlog_metricstream_log_block_invoke()
{
  if ((gHasForked & 1) == 0)
    gmetricstreamLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "metricstream");
}

uint64_t __nwlog_url_log()
{
  if (__nwlog_url_log::onceToken != -1)
    dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44225);
  return gurlLogObj;
}

void ____nwlog_url_log_block_invoke()
{
  if ((gHasForked & 1) == 0)
    gurlLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "url");
}

uint64_t nwlog_get_private_redacted()
{
  if (nwlog_get_private_redacted::onceToken[0] != -1)
    dispatch_once(nwlog_get_private_redacted::onceToken, &__block_literal_global_57);
  return nwlog_get_private_redacted::privateRedacted;
}

uint64_t nwlog_get_sensitive_redacted()
{
  if (nwlog_get_sensitive_redacted::onceToken != -1)
    dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
  return nwlog_get_sensitive_redacted::sensitiveRedacted;
}

void __nwlog_handle_composed(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v4[4];
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  if (gLogFDOverride != -1)
  {
    if (a2)
    {
      v3 = 1000 * *(int *)(a2 + 8);
      *(_QWORD *)&v7 = *(_QWORD *)a2;
      *((_QWORD *)&v7 + 1) = v3;
    }
    else
    {
      mach_get_times();
    }
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 0x40000000;
    v4[2] = ____nwlog_handle_composed_block_invoke;
    v4[3] = &__block_descriptor_tmp_64;
    v5 = v7;
    v6 = a1;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
    ____nwlog_handle_composed_block_invoke((uint64_t)v4);
    os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
  }
}

uint64_t ____nwlog_handle_composed_block_invoke(uint64_t a1)
{
  tm *v2;
  tm v4;
  char v5[9];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if ((_ZZZ23__nwlog_handle_composedEUb_E9tz_is_set & 1) == 0)
  {
    tzset();
    _ZZZ23__nwlog_handle_composedEUb_E9tz_is_set = 1;
  }
  memset(&v4, 0, sizeof(v4));
  v2 = localtime_r((const time_t *)(a1 + 32), &v4);
  if (!strftime(v5, 9uLL, "%T", v2))
    return dprintf(gLogFDOverride, "%s\n");
  v5[8] = 0;
  return dprintf(gLogFDOverride, "%s.%06lu %s\n");
}

void __nwlog_run_with_lock(uint64_t a1)
{
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
  (*(void (**)(uint64_t))(a1 + 16))(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
}

uint64_t __nwlog_override_fd(int a1)
{
  uint64_t v2;
  _QWORD v4[4];
  BOOL v5;

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
  v2 = gLogFDOverride;
  gLogFDOverride = a1;
  if ((a1 & 0x80000000) == 0)
  {
    gLogDatapath = 1;
    gLogDatapathOverridden = 1;
  }
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __nw_utilities_set_log_intercept_block_invoke;
  v4[3] = &__block_descriptor_33_e5_v8__0l;
  v5 = a1 >= 0;
  os_unfair_lock_lock(&nw_utilities_set_log_intercept::lock);
  __nw_utilities_set_log_intercept_block_invoke((uint64_t)v4);
  os_unfair_lock_unlock(&nw_utilities_set_log_intercept::lock);
  os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
  return v2;
}

uint64_t __nwlog_override_datapath(char a1)
{
  uint64_t v2;

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
  v2 = gLogDatapath;
  gLogDatapath = a1;
  gLogDatapathOverridden = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
  return v2;
}

uint64_t __nwlog_register_helper()
{
  uint64_t result;

  if ((gIsHelper & 1) == 0)
  {
    gIsHelper = 1;
    nw_allow_use_of_dispatch_internal();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    return networkd_settings_init();
  }
  return result;
}

uint64_t __nwlog_create_hash_from_private_string(const char *a1, char *a2)
{
  size_t v4;

  v4 = strlen(a1);
  __nwlog_salted_hash(a1, v4, a2);
  return 1;
}

void nwlog_send_copy_to_fd(int a1)
{
  _QWORD v2[4];
  BOOL v3;

  if (os_variant_has_internal_content())
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
    gLogFDOverride = a1;
    if ((a1 & 0x80000000) == 0)
    {
      gLogDatapath = 1;
      gLogDatapathOverridden = 1;
    }
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __nw_utilities_set_log_intercept_block_invoke;
    v2[3] = &__block_descriptor_33_e5_v8__0l;
    v3 = a1 >= 0;
    os_unfair_lock_lock(&nw_utilities_set_log_intercept::lock);
    __nw_utilities_set_log_intercept_block_invoke((uint64_t)v2);
    os_unfair_lock_unlock(&nw_utilities_set_log_intercept::lock);
    os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
  }
}

BOOL __nwlog_compose_logs()
{
  return gLogFDOverride != -1;
}

BOOL __nwlog_level_enabled(NSObject *a1, os_log_type_t a2)
{
  return gLogFDOverride != -1 || os_log_type_enabled(a1, a2);
}

uint64_t nwlog_get_signposts_enabled()
{
  if (_nw_signposts_once != -1)
    dispatch_once(&_nw_signposts_once, &__block_literal_global_15_88146);
  return _nw_signposts_enabled;
}

void nw_mpkl_child_has_forked()
{
  gMpklHasForked = 1;
  gMpklLogObj = MEMORY[0x1E0C81028];
}

uint64_t nw_mpkl_copy_log_object()
{
  pthread_once(&nw_mpkl_log_init(void)::init_once, (void (*)(void))nw_mpkl_log_init_once);
  return gMpklLogObj;
}

uint64_t nw_mpkl_log_init_once(void)
{
  uint64_t result;

  result = pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  if ((gMpklHasForked & 1) == 0)
  {
    result = (uint64_t)os_log_create("com.apple.magnetpacketlog", "libnetcore");
    gMpklLogObj = result;
  }
  return result;
}

BOOL nw_ws_copy_response_for_challenge(const __CFString *a1)
{
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  size_t v4;
  char *v5;
  int CString;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  CFStringRef v11;
  CC_LONG v12;
  NSObject *v13;
  void *v14;
  _BOOL8 result;
  NSObject *v16;
  dispatch_data_t v17;
  NSObject *v18;
  NSObject *v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  char *v28;
  _QWORD v29[4];
  os_log_type_t type[8];
  os_log_type_t *v31;
  uint64_t v32;
  uint64_t v33;
  UInt8 bytes[8];
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned __int8 md[8];
  uint64_t v39;
  int v40;
  _BYTE buf[24];
  void *v42;
  os_log_type_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  v4 = MaximumSizeForEncoding + 1;
  if (MaximumSizeForEncoding == -1)
  {
    __nwlog_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "strict_malloc";
    v25 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v25);
    if (result)
      goto LABEL_40;
    free(v25);
  }
  v5 = (char *)malloc_type_malloc(v4, 0xF2B69DE5uLL);
  if (!v5)
  {
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "strict_malloc";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v4;
    v27 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v27);
    if (result)
      goto LABEL_40;
    free(v27);
  }
  CString = CFStringGetCString(a1, v5, v4, 0x8000100u);
  if (v5 && !CString)
  {
    free(v5);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_ws_copy_response_for_challenge";
    v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v29[0]) = 0;
    if (__nwlog_fault(v8, type, v29))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ws_copy_response_for_challenge";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s CFStringGetCString failed", buf, 0xCu);
        }
      }
      else if (LOBYTE(v29[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v21 = type[0];
        v22 = os_log_type_enabled(v9, type[0]);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_ws_copy_response_for_challenge";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s CFStringGetCString failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v8)
            return 0;
          goto LABEL_11;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ws_copy_response_for_challenge";
          _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s CFStringGetCString failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v23 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ws_copy_response_for_challenge";
          _os_log_impl(&dword_182FBE000, v9, v23, "%{public}s CFStringGetCString failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v8)
      return 0;
LABEL_11:
    free(v8);
    return 0;
  }
  v28 = 0;
  v12 = asprintf(&v28, "%s%s", v5, "258EAFA5-E914-47DA-95CA-C5AB0DC85B11");
  if (v5)
    free(v5);
  if (v12 != -1)
  {
LABEL_18:
    *(_QWORD *)md = 0;
    v39 = 0;
    v40 = 0;
    CC_SHA1(v28, v12, md);
    if (v28)
    {
      free(v28);
      v28 = 0;
    }
    dispatch_get_global_queue(0, 0);
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = dispatch_data_create(md, 0x14uLL, v16, &__block_literal_global_44284);

    v18 = dispatch_data_create_with_transform();
    v19 = v18;
    *(_QWORD *)bytes = 0;
    v35 = 0;
    v37 = 0;
    v36 = 0;
    *(_QWORD *)type = 0;
    v31 = type;
    v32 = 0x2000000000;
    v33 = 0;
    v29[0] = 0;
    v29[1] = v29;
    v29[2] = 0x2000000000;
    v29[3] = bytes;
    if (v18)
    {
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
      v42 = &unk_1E14A3448;
      v44 = v29;
      v45 = 28;
      v43 = type;
      dispatch_data_apply(v18, buf);
    }
    _Block_object_dispose(v29, 8);
    _Block_object_dispose(type, 8);
    v11 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 28, 0x8000100u, 0);

    return (BOOL)v11;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ws_copy_response_for_challenge";
  v14 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_18;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_18380508C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CFDataRef nw_ws_create_client_request(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  void *v7;
  const __CFURL *v8;
  const __CFAllocator *v9;
  __CFHTTPMessage *Request;
  const __CFString *v11;
  NSObject *v12;
  dispatch_data_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  const __CFString *v17;
  nw_protocol_options_t v18;
  char v19;
  CFDataRef v20;
  id v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  id v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  id v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  id v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  char *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  id v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  const char *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  os_log_type_t v51;
  char *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  os_log_type_t v55;
  os_log_type_t v56;
  os_log_type_t v57;
  os_log_type_t v58;
  char *backtrace_string;
  os_log_type_t v60;
  _BOOL4 v61;
  os_log_type_t v63;
  void *v64;
  os_log_type_t v65;
  void *v66;
  os_log_type_t v67;
  void *v68;
  os_log_type_t v69;
  os_log_type_t v70;
  _BOOL4 v71;
  os_log_type_t v72;
  _BOOL4 v73;
  os_log_type_t v74;
  _BOOL4 v75;
  os_log_type_t v76;
  os_log_type_t v77;
  os_log_type_t v78;
  _QWORD v79[6];
  _QWORD v80[4];
  os_log_type_t type[8];
  os_log_type_t *v82;
  uint64_t v83;
  uint64_t v84;
  UInt8 bytes[8];
  uint64_t v86;
  uint64_t v87;
  _QWORD __buf[2];
  _BYTE applier[24];
  void *v90;
  os_log_type_t *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (a1)
  {
    if (v5)
    {
      if (v6)
      {
        v8 = (const __CFURL *)nw_endpoint_copy_cfurl(v6);
        if (v8)
        {
          v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Request = CFHTTPMessageCreateRequest((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("GET"), v8, (CFStringRef)*MEMORY[0x1E0C930E8]);
          if (Request)
          {
            v11 = CFURLCopyHostName(v8);
            if (v11)
            {
              CFHTTPMessageSetHeaderFieldValue(Request, CFSTR("Host"), v11);
              CFRelease(v11);
              CFRelease(v8);
              CFHTTPMessageSetHeaderFieldValue(Request, CFSTR("Upgrade"), CFSTR("WebSocket"));
              CFHTTPMessageSetHeaderFieldValue(Request, CFSTR("Connection"), CFSTR("Upgrade"));
              __buf[0] = 0;
              __buf[1] = 0;
              arc4random_buf(__buf, 0x10uLL);
              dispatch_get_global_queue(0, 0);
              v12 = objc_claimAutoreleasedReturnValue();
              v13 = dispatch_data_create(__buf, 0x10uLL, v12, &__block_literal_global_14_44322);

              v14 = dispatch_data_create_with_transform();
              v15 = v14;
              *(_QWORD *)bytes = 0;
              v86 = 0;
              v87 = 0;
              *(_QWORD *)type = 0;
              v82 = type;
              v83 = 0x2000000000;
              v84 = 0;
              v80[0] = 0;
              v80[1] = v80;
              v80[2] = 0x2000000000;
              v80[3] = bytes;
              v16 = MEMORY[0x1E0C809B0];
              if (v14)
              {
                *(_QWORD *)applier = MEMORY[0x1E0C809B0];
                *(_QWORD *)&applier[8] = 0x40000000;
                *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
                v90 = &unk_1E14A3448;
                v92 = v80;
                v93 = 24;
                v91 = type;
                dispatch_data_apply(v14, applier);
              }
              _Block_object_dispose(v80, 8);
              _Block_object_dispose(type, 8);
              v17 = CFStringCreateWithBytes(v9, bytes, 24, 0x8000100u, 0);
              if (v17)
              {
                CFHTTPMessageSetHeaderFieldValue(Request, CFSTR("Sec-WebSocket-Key"), v17);
                *(_QWORD *)(a1 + 8) = v17;
                v18 = nw_framer_copy_options(v5);
                v79[0] = v16;
                v79[1] = 3221225472;
                v79[2] = __nw_ws_create_client_request_block_invoke_17;
                v79[3] = &__block_descriptor_48_e9_B16__0_v8l;
                v79[4] = Request;
                v79[5] = a1;
                v19 = nw_protocol_options_access_handle(v18, v79);

                if ((v19 & 1) != 0)
                {
                  v20 = CFHTTPMessageCopySerializedMessage(Request);
                  CFRelease(Request);
                  if (v20)
                  {
LABEL_104:

                    goto LABEL_105;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v21 = (id)gLogObj;
                  *(_DWORD *)applier = 136446210;
                  *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                  v22 = (char *)_os_log_send_and_compose_impl();

                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(v80[0]) = 0;
                  if (!__nwlog_fault(v22, type, v80))
                    goto LABEL_112;
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v23 = objc_claimAutoreleasedReturnValue();
                    v24 = type[0];
                    if (os_log_type_enabled(v23, type[0]))
                    {
                      *(_DWORD *)applier = 136446210;
                      *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                      _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s ws.output.client: CFHTTPMessageCopySerializedMessage failed", applier, 0xCu);
                    }
                  }
                  else if (LOBYTE(v80[0]))
                  {
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v23 = objc_claimAutoreleasedReturnValue();
                    v60 = type[0];
                    v61 = os_log_type_enabled(v23, type[0]);
                    if (backtrace_string)
                    {
                      if (v61)
                      {
                        *(_DWORD *)applier = 136446466;
                        *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                        *(_WORD *)&applier[12] = 2082;
                        *(_QWORD *)&applier[14] = backtrace_string;
                        _os_log_impl(&dword_182FBE000, v23, v60, "%{public}s ws.output.client: CFHTTPMessageCopySerializedMessage failed, dumping backtrace:%{public}s", applier, 0x16u);
                      }

                      free(backtrace_string);
                      goto LABEL_112;
                    }
                    if (v61)
                    {
                      *(_DWORD *)applier = 136446210;
                      *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                      _os_log_impl(&dword_182FBE000, v23, v60, "%{public}s ws.output.client: CFHTTPMessageCopySerializedMessage failed, no backtrace", applier, 0xCu);
                    }
                  }
                  else
                  {
                    __nwlog_obj();
                    v23 = objc_claimAutoreleasedReturnValue();
                    v63 = type[0];
                    if (os_log_type_enabled(v23, type[0]))
                    {
                      *(_DWORD *)applier = 136446210;
                      *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                      _os_log_impl(&dword_182FBE000, v23, v63, "%{public}s ws.output.client: CFHTTPMessageCopySerializedMessage failed, backtrace limit exceeded", applier, 0xCu);
                    }
                  }

LABEL_112:
                  if (v22)
                    free(v22);
                  goto LABEL_103;
                }
                CFRelease(Request);
LABEL_103:
                v20 = 0;
                goto LABEL_104;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v43 = (id)gLogObj;
              *(_DWORD *)applier = 136446210;
              *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
              v44 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v80[0]) = 0;
              if (__nwlog_fault(v44, type, v80))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v45 = (id)gLogObj;
                  v46 = type[0];
                  if (os_log_type_enabled(v45, type[0]))
                  {
                    *(_DWORD *)applier = 136446210;
                    *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                    _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s CFStringCreateWithBytes failed", applier, 0xCu);
                  }
                }
                else if (LOBYTE(v80[0]))
                {
                  v52 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v45 = objc_claimAutoreleasedReturnValue();
                  v53 = type[0];
                  v54 = os_log_type_enabled(v45, type[0]);
                  if (v52)
                  {
                    if (v54)
                    {
                      *(_DWORD *)applier = 136446466;
                      *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                      *(_WORD *)&applier[12] = 2082;
                      *(_QWORD *)&applier[14] = v52;
                      _os_log_impl(&dword_182FBE000, v45, v53, "%{public}s CFStringCreateWithBytes failed, dumping backtrace:%{public}s", applier, 0x16u);
                    }

                    free(v52);
                    if (!v44)
                      goto LABEL_102;
                    goto LABEL_101;
                  }
                  if (v54)
                  {
                    *(_DWORD *)applier = 136446210;
                    *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                    _os_log_impl(&dword_182FBE000, v45, v53, "%{public}s CFStringCreateWithBytes failed, no backtrace", applier, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v45 = objc_claimAutoreleasedReturnValue();
                  v58 = type[0];
                  if (os_log_type_enabled(v45, type[0]))
                  {
                    *(_DWORD *)applier = 136446210;
                    *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                    _os_log_impl(&dword_182FBE000, v45, v58, "%{public}s CFStringCreateWithBytes failed, backtrace limit exceeded", applier, 0xCu);
                  }
                }

              }
              if (!v44)
              {
LABEL_102:
                CFRelease(Request);
                goto LABEL_103;
              }
LABEL_101:
              free(v44);
              goto LABEL_102;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v36 = (id)gLogObj;
            *(_DWORD *)applier = 136446210;
            *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
            v37 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v80[0]) = 0;
            if (__nwlog_fault(v37, type, v80))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v38 = (id)gLogObj;
                v39 = type[0];
                if (os_log_type_enabled(v38, type[0]))
                {
                  *(_DWORD *)applier = 136446210;
                  *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                  _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s CFURLCopyHostName failed", applier, 0xCu);
                }
              }
              else if (LOBYTE(v80[0]))
              {
                v47 = __nw_create_backtrace_string();
                if (v47)
                {
                  v48 = (char *)v47;
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v49 = (id)gLogObj;
                  v50 = type[0];
                  if (os_log_type_enabled(v49, type[0]))
                  {
                    *(_DWORD *)applier = 136446466;
                    *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                    *(_WORD *)&applier[12] = 2082;
                    *(_QWORD *)&applier[14] = v48;
                    _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s CFURLCopyHostName failed, dumping backtrace:%{public}s", applier, 0x16u);
                  }

                  free(v48);
                  if (!v37)
                    goto LABEL_87;
                  goto LABEL_86;
                }
                __nwlog_obj();
                v38 = objc_claimAutoreleasedReturnValue();
                v57 = type[0];
                if (os_log_type_enabled(v38, type[0]))
                {
                  *(_DWORD *)applier = 136446210;
                  *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                  _os_log_impl(&dword_182FBE000, v38, v57, "%{public}s CFURLCopyHostName failed, no backtrace", applier, 0xCu);
                }
              }
              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v38 = (id)gLogObj;
                v56 = type[0];
                if (os_log_type_enabled(v38, type[0]))
                {
                  *(_DWORD *)applier = 136446210;
                  *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                  _os_log_impl(&dword_182FBE000, v38, v56, "%{public}s CFURLCopyHostName failed, backtrace limit exceeded", applier, 0xCu);
                }
              }

            }
            if (!v37)
            {
LABEL_87:
              CFRelease(Request);
              CFRelease(v8);
              goto LABEL_88;
            }
LABEL_86:
            free(v37);
            goto LABEL_87;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v29 = (id)gLogObj;
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
          v30 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v80[0]) = 0;
          if (__nwlog_fault(v30, type, v80))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v31 = (id)gLogObj;
              v32 = type[0];
              if (os_log_type_enabled(v31, type[0]))
              {
                *(_DWORD *)applier = 136446210;
                *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s CFHTTPMessageCreateRequest failed", applier, 0xCu);
              }
            }
            else if (LOBYTE(v80[0]))
            {
              v40 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v31 = (id)gLogObj;
              v41 = type[0];
              v42 = os_log_type_enabled(v31, type[0]);
              if (v40)
              {
                if (v42)
                {
                  *(_DWORD *)applier = 136446466;
                  *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                  *(_WORD *)&applier[12] = 2082;
                  *(_QWORD *)&applier[14] = v40;
                  _os_log_impl(&dword_182FBE000, v31, v41, "%{public}s CFHTTPMessageCreateRequest failed, dumping backtrace:%{public}s", applier, 0x16u);
                }

                free(v40);
                if (!v30)
                  goto LABEL_78;
                goto LABEL_77;
              }
              if (v42)
              {
                *(_DWORD *)applier = 136446210;
                *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                _os_log_impl(&dword_182FBE000, v31, v41, "%{public}s CFHTTPMessageCreateRequest failed, no backtrace", applier, 0xCu);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v31 = (id)gLogObj;
              v55 = type[0];
              if (os_log_type_enabled(v31, type[0]))
              {
                *(_DWORD *)applier = 136446210;
                *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
                _os_log_impl(&dword_182FBE000, v31, v55, "%{public}s CFHTTPMessageCreateRequest failed, backtrace limit exceeded", applier, 0xCu);
              }
            }

          }
          if (!v30)
          {
LABEL_78:
            CFRelease(v8);
            goto LABEL_88;
          }
LABEL_77:
          free(v30);
          goto LABEL_78;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
        v26 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v80[0]) = 0;
        if (__nwlog_fault(v26, type, v80))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v27 = (id)gLogObj;
            v28 = type[0];
            if (os_log_type_enabled(v27, type[0]))
            {
              *(_DWORD *)applier = 136446210;
              *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
              _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s CFURLCreateWithString failed", applier, 0xCu);
            }
LABEL_67:

            goto LABEL_68;
          }
          if (!LOBYTE(v80[0]))
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v27 = (id)gLogObj;
            v51 = type[0];
            if (os_log_type_enabled(v27, type[0]))
            {
              *(_DWORD *)applier = 136446210;
              *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
              _os_log_impl(&dword_182FBE000, v27, v51, "%{public}s CFURLCreateWithString failed, backtrace limit exceeded", applier, 0xCu);
            }
            goto LABEL_67;
          }
          v33 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (id)gLogObj;
          v34 = type[0];
          v35 = os_log_type_enabled(v27, type[0]);
          if (!v33)
          {
            if (v35)
            {
              *(_DWORD *)applier = 136446210;
              *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
              _os_log_impl(&dword_182FBE000, v27, v34, "%{public}s CFURLCreateWithString failed, no backtrace", applier, 0xCu);
            }
            goto LABEL_67;
          }
          if (v35)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = v33;
            _os_log_impl(&dword_182FBE000, v27, v34, "%{public}s CFURLCreateWithString failed, dumping backtrace:%{public}s", applier, 0x16u);
          }
LABEL_31:

          free(v33);
          if (!v26)
            goto LABEL_88;
          goto LABEL_69;
        }
      }
      else
      {
        __nwlog_obj();
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
        v26 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v80[0]) = 0;
        if (__nwlog_fault(v26, type, v80))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v27 = objc_claimAutoreleasedReturnValue();
            v69 = type[0];
            if (os_log_type_enabled(v27, type[0]))
            {
              *(_DWORD *)applier = 136446210;
              *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
              _os_log_impl(&dword_182FBE000, v27, v69, "%{public}s called with null endpoint", applier, 0xCu);
            }
            goto LABEL_67;
          }
          if (!LOBYTE(v80[0]))
          {
            __nwlog_obj();
            v27 = objc_claimAutoreleasedReturnValue();
            v78 = type[0];
            if (os_log_type_enabled(v27, type[0]))
            {
              *(_DWORD *)applier = 136446210;
              *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
              _os_log_impl(&dword_182FBE000, v27, v78, "%{public}s called with null endpoint, backtrace limit exceeded", applier, 0xCu);
            }
            goto LABEL_67;
          }
          v33 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v27 = objc_claimAutoreleasedReturnValue();
          v74 = type[0];
          v75 = os_log_type_enabled(v27, type[0]);
          if (!v33)
          {
            if (v75)
            {
              *(_DWORD *)applier = 136446210;
              *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
              _os_log_impl(&dword_182FBE000, v27, v74, "%{public}s called with null endpoint, no backtrace", applier, 0xCu);
            }
            goto LABEL_67;
          }
          if (v75)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = v33;
            _os_log_impl(&dword_182FBE000, v27, v74, "%{public}s called with null endpoint, dumping backtrace:%{public}s", applier, 0x16u);
          }
          goto LABEL_31;
        }
      }
    }
    else
    {
      __nwlog_obj();
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)applier = 136446210;
      *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
      v26 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v80[0]) = 0;
      if (__nwlog_fault(v26, type, v80))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v27 = objc_claimAutoreleasedReturnValue();
          v67 = type[0];
          if (os_log_type_enabled(v27, type[0]))
          {
            *(_DWORD *)applier = 136446210;
            *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
            _os_log_impl(&dword_182FBE000, v27, v67, "%{public}s called with null framer", applier, 0xCu);
          }
          goto LABEL_67;
        }
        if (!LOBYTE(v80[0]))
        {
          __nwlog_obj();
          v27 = objc_claimAutoreleasedReturnValue();
          v77 = type[0];
          if (os_log_type_enabled(v27, type[0]))
          {
            *(_DWORD *)applier = 136446210;
            *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
            _os_log_impl(&dword_182FBE000, v27, v77, "%{public}s called with null framer, backtrace limit exceeded", applier, 0xCu);
          }
          goto LABEL_67;
        }
        v33 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v72 = type[0];
        v73 = os_log_type_enabled(v27, type[0]);
        if (!v33)
        {
          if (v73)
          {
            *(_DWORD *)applier = 136446210;
            *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
            _os_log_impl(&dword_182FBE000, v27, v72, "%{public}s called with null framer, no backtrace", applier, 0xCu);
          }
          goto LABEL_67;
        }
        if (v73)
        {
          *(_DWORD *)applier = 136446466;
          *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
          *(_WORD *)&applier[12] = 2082;
          *(_QWORD *)&applier[14] = v33;
          _os_log_impl(&dword_182FBE000, v27, v72, "%{public}s called with null framer, dumping backtrace:%{public}s", applier, 0x16u);
        }
        goto LABEL_31;
      }
    }
  }
  else
  {
    __nwlog_obj();
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
    v26 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80[0]) = 0;
    if (__nwlog_fault(v26, type, v80))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v65 = type[0];
        if (os_log_type_enabled(v27, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
          _os_log_impl(&dword_182FBE000, v27, v65, "%{public}s called with null state", applier, 0xCu);
        }
        goto LABEL_67;
      }
      if (!LOBYTE(v80[0]))
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v76 = type[0];
        if (os_log_type_enabled(v27, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
          _os_log_impl(&dword_182FBE000, v27, v76, "%{public}s called with null state, backtrace limit exceeded", applier, 0xCu);
        }
        goto LABEL_67;
      }
      v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v70 = type[0];
      v71 = os_log_type_enabled(v27, type[0]);
      if (!v33)
      {
        if (v71)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
          _os_log_impl(&dword_182FBE000, v27, v70, "%{public}s called with null state, no backtrace", applier, 0xCu);
        }
        goto LABEL_67;
      }
      if (v71)
      {
        *(_DWORD *)applier = 136446466;
        *(_QWORD *)&applier[4] = "nw_ws_create_client_request";
        *(_WORD *)&applier[12] = 2082;
        *(_QWORD *)&applier[14] = v33;
        _os_log_impl(&dword_182FBE000, v27, v70, "%{public}s called with null state, dumping backtrace:%{public}s", applier, 0x16u);
      }
      goto LABEL_31;
    }
  }
LABEL_68:
  if (v26)
LABEL_69:
    free(v26);
LABEL_88:
  v20 = 0;
LABEL_105:

  return v20;
}

void sub_183806580(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_create_client_request_block_invoke_17(uint64_t a1, uint64_t a2)
{
  CFMutableStringRef Mutable;
  const __CFString *v5;
  xpc_object_t v6;
  uint64_t v7;
  void *v8;
  xpc_object_t v9;
  CFMutableStringRef v10;
  char v11;
  size_t count;
  size_t v13;
  size_t v14;
  const __CFAllocator *v15;
  const char *string;
  const char *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  id v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  const char *v31;
  id v32;
  os_log_type_t v33;
  const char *v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  id v38;
  _BOOL4 v39;
  NSObject *v40;
  os_log_type_t v41;
  _QWORD applier[6];
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 56) != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v46 = "nw_ws_create_client_request_block_invoke";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v24, &type, &v43))
      goto LABEL_74;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (id)gLogObj;
      v26 = type;
      if (!os_log_type_enabled(v25, type))
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_ws_create_client_request_block_invoke";
      v27 = "%{public}s nw_ws_options_get_version failed";
    }
    else
    {
      if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        v29 = type;
        v30 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (!v30)
            goto LABEL_66;
          *(_DWORD *)buf = 136446466;
          v46 = "nw_ws_create_client_request_block_invoke";
          v47 = 2082;
          v48 = backtrace_string;
          v31 = "%{public}s nw_ws_options_get_version failed, dumping backtrace:%{public}s";
          goto LABEL_65;
        }
        if (!v30)
        {
LABEL_43:

          if (!v24)
            return 0;
          goto LABEL_75;
        }
        *(_DWORD *)buf = 136446210;
        v46 = "nw_ws_create_client_request_block_invoke";
        v27 = "%{public}s nw_ws_options_get_version failed, no backtrace";
        v35 = v25;
        v36 = v29;
LABEL_42:
        _os_log_impl(&dword_182FBE000, v35, v36, v27, buf, 0xCu);
        goto LABEL_43;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (id)gLogObj;
      v26 = type;
      if (!os_log_type_enabled(v25, type))
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_ws_create_client_request_block_invoke";
      v27 = "%{public}s nw_ws_options_get_version failed, backtrace limit exceeded";
    }
    v35 = v25;
    v36 = v26;
    goto LABEL_42;
  }
  CFHTTPMessageSetHeaderFieldValue(*(CFHTTPMessageRef *)(a1 + 32), CFSTR("Sec-WebSocket-Version"), CFSTR("13"));
  Mutable = CFStringCreateMutable(0, 0);
  if (!Mutable)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v32 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v46 = "nw_ws_create_client_request_block_invoke";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v24, &type, &v43))
      goto LABEL_74;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (id)gLogObj;
      v33 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_ws_create_client_request_block_invoke";
        v34 = "%{public}s CFStringCreateMutable failed";
LABEL_71:
        v40 = v25;
        v41 = v33;
LABEL_72:
        _os_log_impl(&dword_182FBE000, v40, v41, v34, buf, 0xCu);
      }
LABEL_73:

      goto LABEL_74;
    }
    if (!v43)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (id)gLogObj;
      v33 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_ws_create_client_request_block_invoke";
        v34 = "%{public}s CFStringCreateMutable failed, backtrace limit exceeded";
        goto LABEL_71;
      }
      goto LABEL_73;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = (id)gLogObj;
    v29 = type;
    v37 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (!v37)
        goto LABEL_73;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_ws_create_client_request_block_invoke";
      v34 = "%{public}s CFStringCreateMutable failed, no backtrace";
      goto LABEL_79;
    }
    if (!v37)
      goto LABEL_66;
    *(_DWORD *)buf = 136446466;
    v46 = "nw_ws_create_client_request_block_invoke";
    v47 = 2082;
    v48 = backtrace_string;
    v31 = "%{public}s CFStringCreateMutable failed, dumping backtrace:%{public}s";
LABEL_65:
    _os_log_impl(&dword_182FBE000, v25, v29, v31, buf, 0x16u);
    goto LABEL_66;
  }
  v5 = Mutable;
  if (*(_QWORD *)a2)
  {
    v6 = xpc_copy(*(xpc_object_t *)a2);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(void **)(v7 + 16);
    *(_QWORD *)(v7 + 16) = v6;

    v9 = *(xpc_object_t *)a2;
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = __nw_ws_create_client_request_block_invoke_22;
    applier[3] = &__block_descriptor_48_e36_B24__0Q8__NSObject_OS_xpc_object__16l;
    applier[4] = v5;
    applier[5] = a2;
    if (!xpc_array_apply(v9, applier))
    {
      CFRelease(v5);
      return 0;
    }
  }
  if (CFStringGetLength(v5) >= 1)
    CFHTTPMessageSetHeaderFieldValue(*(CFHTTPMessageRef *)(a1 + 32), CFSTR("Sec-WebSocket-Protocol"), v5);
  CFRelease(v5);
  if ((*(_BYTE *)(a2 + 70) & 8) != 0)
  {
    v10 = CFStringCreateMutable(0, 0);
    CFStringAppendCString(v10, "permessage-deflate", 0x8000100u);
    v11 = *(_BYTE *)(a2 + 70);
    if ((v11 & 0x10) == 0)
    {
      CFStringAppendCString(v10, "; server_no_context_takeover", 0x8000100u);
      v11 = *(_BYTE *)(a2 + 70);
    }
    if ((v11 & 0x20) == 0)
      CFStringAppendCString(v10, "; client_no_context_takeover", 0x8000100u);
    if ((*(_BYTE *)(a2 + 68) & 0xF8) == 8)
      CFStringAppendFormat(v10, 0, CFSTR("; server_max_window_bits=%d"), *(unsigned __int8 *)(a2 + 68));
    if ((*(_BYTE *)(a2 + 69) & 0xF8) == 8)
      CFStringAppendFormat(v10, 0, CFSTR("; client_max_window_bits=%d"), *(unsigned __int8 *)(a2 + 69));
    CFHTTPMessageSetHeaderFieldValue(*(CFHTTPMessageRef *)(a1 + 32), CFSTR("Sec-WebSocket-Extensions"), v10);
    if (v10)
      CFRelease(v10);
  }
  count = xpc_array_get_count(*(xpc_object_t *)(a2 + 8));
  if (!count)
    return 1;
  v13 = count;
  v14 = 0;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    string = xpc_array_get_string(*(xpc_object_t *)(a2 + 8), v14);
    v17 = xpc_array_get_string(*(xpc_object_t *)(a2 + 16), v14);
    v18 = CFStringCreateWithCString(v15, string, 0x600u);
    v19 = CFStringCreateWithCString(v15, v17, 0x600u);
    v20 = v19;
    if (!v18 || v19 == 0)
      break;
    CFHTTPMessageSetHeaderFieldValue(*(CFHTTPMessageRef *)(a1 + 32), v18, v19);
    CFRelease(v18);
    CFRelease(v20);
    if (v13 == ++v14)
      return 1;
  }
  if (v18)
    CFRelease(v18);
  if (v20)
    CFRelease(v20);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v38 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v46 = "nw_ws_create_client_request_block_invoke";
  v24 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v43 = 0;
  if (__nwlog_fault(v24, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (id)gLogObj;
      v33 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_ws_create_client_request_block_invoke";
        v34 = "%{public}s CFStringCreateWithCString failed";
        goto LABEL_71;
      }
      goto LABEL_73;
    }
    if (!v43)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_ws_create_client_request_block_invoke";
        v34 = "%{public}s CFStringCreateWithCString failed, backtrace limit exceeded";
        goto LABEL_71;
      }
      goto LABEL_73;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = (id)gLogObj;
    v29 = type;
    v39 = os_log_type_enabled(v25, type);
    if (backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446466;
        v46 = "nw_ws_create_client_request_block_invoke";
        v47 = 2082;
        v48 = backtrace_string;
        v31 = "%{public}s CFStringCreateWithCString failed, dumping backtrace:%{public}s";
        goto LABEL_65;
      }
LABEL_66:

      free(backtrace_string);
      goto LABEL_74;
    }
    if (!v39)
      goto LABEL_73;
    *(_DWORD *)buf = 136446210;
    v46 = "nw_ws_create_client_request_block_invoke";
    v34 = "%{public}s CFStringCreateWithCString failed, no backtrace";
LABEL_79:
    v40 = v25;
    v41 = v29;
    goto LABEL_72;
  }
LABEL_74:
  if (v24)
LABEL_75:
    free(v24);
  return 0;
}

BOOL __nw_ws_create_client_request_block_invoke_22(uint64_t a1, size_t a2, void *a3)
{
  id v5;
  const char *string_ptr;
  const __CFString *v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  string_ptr = xpc_string_get_string_ptr(v5);
  v7 = CFStringCreateWithCString(0, string_ptr, 0x8000100u);
  if (v7)
  {
    CFStringAppend(*(CFMutableStringRef *)(a1 + 32), v7);
    CFRelease(v7);
    if (xpc_array_get_count(**(xpc_object_t **)(a1 + 40)) - 1 > a2)
      CFStringAppend(*(CFMutableStringRef *)(a1 + 32), CFSTR(","));
    goto LABEL_11;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v8 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v20 = "nw_ws_create_client_request_block_invoke";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (!__nwlog_fault(v9, &type, &v17))
    goto LABEL_9;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v11 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v20 = "nw_ws_create_client_request_block_invoke";
      _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s CFStringCreatewithCString failed", buf, 0xCu);
    }
LABEL_8:

LABEL_9:
    if (!v9)
      goto LABEL_11;
LABEL_10:
    free(v9);
    goto LABEL_11;
  }
  if (!v17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v16 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v20 = "nw_ws_create_client_request_block_invoke";
      _os_log_impl(&dword_182FBE000, v10, v16, "%{public}s CFStringCreatewithCString failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_8;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  v14 = type;
  v15 = os_log_type_enabled(v10, type);
  if (!backtrace_string)
  {
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v20 = "nw_ws_create_client_request_block_invoke";
      _os_log_impl(&dword_182FBE000, v10, v14, "%{public}s CFStringCreatewithCString failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_8;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    v20 = "nw_ws_create_client_request_block_invoke";
    v21 = 2082;
    v22 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v10, v14, "%{public}s CFStringCreatewithCString failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v9)
    goto LABEL_10;
LABEL_11:

  return v7 != 0;
}

void sub_18380723C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_ws_validate_client_request(uint64_t a1, void *a2)
{
  id v3;
  __CFHTTPMessage *v4;
  const __CFString *v5;
  const __CFString *v6;
  NSObject *v7;
  uint64_t v8;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v14;
  CFIndex i;
  const __CFString *ValueAtIndex;
  const __CFArray *v17;
  const __CFString *v18;
  int v19;
  CFIndex v20;
  const __CFString *v21;
  NSObject *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  NSObject *v27;
  uint32_t v28;
  const char *v29;
  unint64_t v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  unint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(__CFHTTPMessage **)(a1 + 24);
  v5 = CFHTTPMessageCopyHeaderFieldValue(v4, CFSTR("Upgrade"));
  v6 = v5;
  if (!v5)
  {
LABEL_4:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
LABEL_6:

      v8 = 0;
      goto LABEL_7;
    }
LABEL_5:
    *(_DWORD *)buf = 136446466;
    v32 = "nw_ws_validate_client_request";
    v33 = 2082;
    v34 = (const char *)(a1 + 227);
    _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s client request doesn't match expected value", buf, 0x16u);
    goto LABEL_6;
  }
  if (CFStringCompare(v5, CFSTR("WebSocket"), 1uLL))
  {
    CFRelease(v6);
    goto LABEL_4;
  }
  CFRelease(v6);
  v10 = CFHTTPMessageCopyHeaderFieldValue(v4, CFSTR("Connection"));
  v11 = v10;
  if (!v10)
  {
LABEL_11:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_6;
    goto LABEL_5;
  }
  if (CFStringCompare(v10, CFSTR("Upgrade"), 1uLL))
  {
    CFRelease(v11);
    goto LABEL_11;
  }
  CFRelease(v11);
  if ((*(_WORD *)(a1 + 225) & 0x40) != 0)
  {
    v12 = CFHTTPMessageCopyHeaderFieldValue(v4, CFSTR("Sec-WebSocket-Extensions"));
    if (v12)
    {
      *(_WORD *)(a1 + 225) &= ~0x40u;
      ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12, CFSTR(","));
      CFRelease(v12);
      v14 = 0;
      for (i = 0; i < CFArrayGetCount(ArrayBySeparatingStrings); ++i)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, i);
        if (v14)
          CFRelease(v14);
        v17 = nw_ws_copy_extension_decl_as_array(ValueAtIndex);
        v14 = v17;
        if (v17)
        {
          if (CFArrayGetCount(v17) >= 1)
          {
            v18 = (const __CFString *)CFArrayGetValueAtIndex(v14, 0);
            if (CFStringCompare(v18, CFSTR("permessage-deflate"), 1uLL) == kCFCompareEqualTo)
            {
              v19 = 0;
              v20 = 1;
              *(_WORD *)(a1 + 225) |= 0x40u;
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    if (v20 >= CFArrayGetCount(v14))
                      goto LABEL_76;
                    v21 = (const __CFString *)CFArrayGetValueAtIndex(v14, v20);
                    v30 = -1;
                    if (CFStringCompare(v21, CFSTR("server_no_context_takeover"), 1uLL))
                      break;
                    if ((v19 & 1) != 0)
                    {
                      __nwlog_obj();
                      v22 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136446466;
                        v32 = "nw_ws_validate_client_request";
                        v33 = 2082;
                        v34 = (const char *)(a1 + 227);
                        v23 = "%{public}s %{public}s Duplicate value for server_no_context_takeover";
                        goto LABEL_68;
                      }
                      goto LABEL_75;
                    }
                    v19 |= 1u;
                    *(_WORD *)(a1 + 225) &= ~0x80u;
                    ++v20;
                  }
                  if (CFStringCompare(v21, CFSTR("client_no_context_takeover"), 1uLL) == kCFCompareEqualTo)
                    break;
                  if (nw_ws_get_extension_parameter(v21, CFSTR("server_max_window_bits"), &v30))
                  {
                    if ((v19 & 4) != 0)
                    {
                      __nwlog_obj();
                      v22 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                      {
                        v24 = "";
                        if (a1)
                          v24 = (const char *)(a1 + 227);
                        goto LABEL_67;
                      }
                      goto LABEL_75;
                    }
                    if ((v30 & 0xFFFFFFFFFFFFFFF8) != 8)
                    {
                      __nwlog_obj();
                      v22 = objc_claimAutoreleasedReturnValue();
                      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                        goto LABEL_75;
                      v25 = "";
                      v32 = "nw_ws_validate_client_request";
                      *(_DWORD *)buf = 136446722;
                      if (a1)
                        v25 = (const char *)(a1 + 227);
                      v33 = 2082;
                      v34 = v25;
                      v35 = 2048;
                      v36 = v30;
                      v23 = "%{public}s %{public}s Invalid value for server_max_window_bits (%llu)";
LABEL_73:
                      v27 = v22;
                      v28 = 32;
                      goto LABEL_74;
                    }
                    v19 |= 4u;
                    *(_BYTE *)(a1 + 220) = v30;
                    ++v20;
                  }
                  else if (CFStringCompare(v21, CFSTR("client_max_window_bits"), 1uLL))
                  {
                    if (!nw_ws_get_extension_parameter(v21, CFSTR("client_max_window_bits"), &v30))
                    {
                      __nwlog_obj();
                      v22 = objc_claimAutoreleasedReturnValue();
                      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                        goto LABEL_75;
                      v26 = (const char *)(a1 + 227);
                      v32 = "nw_ws_validate_client_request";
                      *(_DWORD *)buf = 136446722;
                      if (!a1)
                        v26 = "";
                      v33 = 2082;
                      v34 = v26;
                      v35 = 2112;
                      v36 = (unint64_t)v21;
                      v23 = "%{public}s %{public}s Invalid parameter in permessage-deflate extension (%@)";
                      goto LABEL_73;
                    }
                    if ((v19 & 8) != 0)
                    {
                      __nwlog_obj();
                      v22 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                      {
                        v24 = "";
                        if (a1)
                          v24 = (const char *)(a1 + 227);
                        goto LABEL_67;
                      }
                      goto LABEL_75;
                    }
                    v19 |= 8u;
                    if (v30 == -1)
                    {
                      *(_BYTE *)(a1 + 221) = 15;
                      ++v20;
                    }
                    else
                    {
                      if ((v30 & 0xFFFFFFFFFFFFFFF8) != 8)
                      {
                        __nwlog_obj();
                        v22 = objc_claimAutoreleasedReturnValue();
                        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                          goto LABEL_75;
                        v29 = "";
                        v32 = "nw_ws_validate_client_request";
                        *(_DWORD *)buf = 136446722;
                        if (a1)
                          v29 = (const char *)(a1 + 227);
                        v33 = 2082;
                        v34 = v29;
                        v35 = 2048;
                        v36 = v30;
                        v23 = "%{public}s %{public}s Invalid value for client_max_window_bits (%llu)";
                        goto LABEL_73;
                      }
                      *(_BYTE *)(a1 + 221) = v30;
                      ++v20;
                    }
                  }
                  else
                  {
                    if ((v19 & 8) != 0)
                    {
                      __nwlog_obj();
                      v22 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                      {
                        v24 = "";
                        if (a1)
                          v24 = (const char *)(a1 + 227);
LABEL_67:
                        *(_DWORD *)buf = 136446466;
                        v32 = "nw_ws_validate_client_request";
                        v33 = 2082;
                        v34 = v24;
                        v23 = "%{public}s %{public}s Duplicate value for server_max_window_bits";
LABEL_68:
                        v27 = v22;
                        v28 = 22;
LABEL_74:
                        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, v23, buf, v28);
                      }
LABEL_75:

                      *(_WORD *)(a1 + 225) &= ~0x40u;
                      goto LABEL_76;
                    }
                    v19 |= 8u;
                    *(_BYTE *)(a1 + 221) = 8;
                    ++v20;
                  }
                }
                if ((v19 & 2) != 0)
                {
                  __nwlog_obj();
                  v22 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    v32 = "nw_ws_validate_client_request";
                    v33 = 2082;
                    v34 = (const char *)(a1 + 227);
                    v23 = "%{public}s %{public}s Duplicate value for client_no_context_takeover";
                    goto LABEL_68;
                  }
                  goto LABEL_75;
                }
                v19 |= 2u;
                *(_WORD *)(a1 + 225) &= ~0x100u;
                ++v20;
              }
            }
          }
        }
      }
LABEL_76:
      if (v14)
        CFRelease(v14);
      if (ArrayBySeparatingStrings)
        CFRelease(ArrayBySeparatingStrings);
    }
  }
  v8 = 1;
LABEL_7:

  return v8;
}

void sub_183807A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFArray *nw_ws_copy_extension_decl_as_array(CFStringRef theString)
{
  const __CFAllocator *v1;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex Count;
  const __CFArray *MutableCopy;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFIndex Length;
  __CFString *v8;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, CFSTR(";"));
  Count = CFArrayGetCount(ArrayBySeparatingStrings);
  MutableCopy = CFArrayCreateMutableCopy(v1, Count, ArrayBySeparatingStrings);
  if (ArrayBySeparatingStrings)
    CFRelease(ArrayBySeparatingStrings);
  for (i = 0; i < CFArrayGetCount(MutableCopy); ++i)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, i);
    Length = CFStringGetLength(ValueAtIndex);
    v8 = CFStringCreateMutableCopy(v1, Length, ValueAtIndex);
    CFStringTrimWhitespace(v8);
    CFArraySetValueAtIndex(MutableCopy, i, v8);
    if (v8)
      CFRelease(v8);
  }
  return MutableCopy;
}

BOOL nw_ws_get_extension_parameter(CFStringRef theString, CFStringRef theString2, unint64_t *a3)
{
  const __CFArray *ArrayBySeparatingStrings;
  const __CFString *v6;
  uint64_t v7;
  const __CFString *ValueAtIndex;
  const char *c_string_from_cfstring;
  char *v11;

  if (!a3)
    return CFStringCompare(theString, theString2, 1uLL) == kCFCompareEqualTo;
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, CFSTR("="));
  if (CFArrayGetCount(ArrayBySeparatingStrings) == 2
    && (v6 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0),
        CFStringCompare(v6, theString2, 1uLL) == kCFCompareEqualTo))
  {
    v7 = 1;
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1);
    c_string_from_cfstring = (const char *)nw_utilities_create_c_string_from_cfstring(ValueAtIndex);
    if (c_string_from_cfstring)
    {
      v11 = (char *)c_string_from_cfstring;
      *a3 = atoi(c_string_from_cfstring);
      free(v11);
      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
  }
  if (ArrayBySeparatingStrings)
    CFRelease(ArrayBySeparatingStrings);
  return v7;
}

void nw_ws_present_request_to_user(uint64_t a1, void *a2)
{
  NSObject *v3;
  __CFHTTPMessage *v4;
  NWConcrete_nw_ws_request *v5;
  const __CFDictionary *v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  nw_protocol_options_t v11;
  NWConcrete_nw_ws_request *v12;
  NSObject *v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _QWORD v18[4];
  NWConcrete_nw_ws_request *v19;
  NSObject *v20;
  uint64_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(__CFHTTPMessage **)(a1 + 24);
  v5 = objc_alloc_init(NWConcrete_nw_ws_request);
  v6 = CFHTTPMessageCopyAllHeaderFields(v4);
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v25 = "nw_ws_present_request_to_user";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v8, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_ws_present_request_to_user";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s CFHTTPMessageCopyAllHeaderFields failed", buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v25 = "nw_ws_present_request_to_user";
            v26 = 2082;
            v27 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v15, "%{public}s CFHTTPMessageCopyAllHeaderFields failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v8)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_ws_present_request_to_user";
          _os_log_impl(&dword_182FBE000, v9, v15, "%{public}s CFHTTPMessageCopyAllHeaderFields failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_ws_present_request_to_user";
          _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s CFHTTPMessageCopyAllHeaderFields failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v8)
    {
LABEL_9:
      nw_framer_mark_failed_with_error(v3, 14);
      goto LABEL_10;
    }
LABEL_8:
    free(v8);
    goto LABEL_9;
  }
LABEL_10:
  CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)nw_ws_copy_headers_into_ws_request, v5);
  if (v6)
    CFRelease(v6);
  v11 = nw_framer_copy_options(v3);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __nw_ws_present_request_to_user_block_invoke;
  v18[3] = &unk_1E14A2B10;
  v12 = v5;
  v19 = v12;
  v21 = a1;
  v13 = v3;
  v20 = v13;
  nw_protocol_options_access_handle(v11, v18);

}

void sub_183807FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void nw_ws_copy_headers_into_ws_request(const __CFString *a1, const __CFString *a2, void *a3)
{
  _QWORD *v5;
  char *c_string_from_cfstring;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  xpc_object_t v12;
  void *v13;
  xpc_object_t v14;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex v16;
  const __CFString *ValueAtIndex;
  char *v18;
  _QWORD *v19;
  void *v20;
  xpc_object_t v21;
  NSObject *v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  NSObject *v27;
  char *v28;
  _BOOL4 v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  char *backtrace_string;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_t log;
  NSObject *loga;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (CFStringCompare(a1, CFSTR("Sec-WebSocket-Version"), 1uLL) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("Upgrade"), 1uLL) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("Connection"), 1uLL) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("Sec-WebSocket-Key"), 1uLL) == kCFCompareEqualTo)
  {
    goto LABEL_44;
  }
  if (CFStringCompare(a1, CFSTR("Sec-WebSocket-Protocol"), 1uLL))
  {
    c_string_from_cfstring = (char *)nw_utilities_create_c_string_from_cfstring(a1);
    v7 = nw_utilities_create_c_string_from_cfstring(a2);
    v8 = (char *)v7;
    if (!c_string_from_cfstring || !v7)
    {
      if (!c_string_from_cfstring)
        goto LABEL_42;
      goto LABEL_41;
    }
    v9 = v5;
    v10 = v9;
    if (v9)
    {
      v11 = (void *)v9[2];
      v12 = xpc_string_create(c_string_from_cfstring);
      xpc_array_append_value(v11, v12);

      v13 = (void *)v10[3];
      v14 = xpc_string_create(v8);
      xpc_array_append_value(v13, v14);

LABEL_10:
LABEL_41:
      free(c_string_from_cfstring);
LABEL_42:
      if (v8)
        free(v8);
      goto LABEL_44;
    }
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_ws_request_add_additional_header";
    v33 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v33, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_ws_request_add_additional_header";
          _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s called with null request", buf, 0xCu);
        }
      }
      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        v38 = os_log_type_enabled(v34, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            v46 = "nw_ws_request_add_additional_header";
            v47 = 2082;
            v48 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v34, v37, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_61;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_ws_request_add_additional_header";
          _os_log_impl(&dword_182FBE000, v34, v37, "%{public}s called with null request, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v39 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_ws_request_add_additional_header";
          _os_log_impl(&dword_182FBE000, v34, v39, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_61:
    if (v33)
      free(v33);
    goto LABEL_10;
  }
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, CFSTR(","));
  v16 = 0;
  while (v16 < CFArrayGetCount(ArrayBySeparatingStrings))
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v16);
    v18 = (char *)nw_utilities_create_c_string_from_cfstring(ValueAtIndex);
    if (v18)
    {
      v19 = v5;
      if (v5)
      {
        v20 = (void *)v5[1];
        v21 = xpc_string_create(v18);
        xpc_array_append_value(v20, v21);

        goto LABEL_16;
      }
      __nwlog_obj();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v46 = "nw_ws_request_add_subprotocol";
      v24 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v43 = 0;
      if (__nwlog_fault(v24, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          log = (os_log_t)v24;
          __nwlog_obj();
          v25 = objc_claimAutoreleasedReturnValue();
          v26 = type;
          v27 = v25;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)buf = 136446210;
            v46 = "nw_ws_request_add_subprotocol";
            _os_log_impl(&dword_182FBE000, v27, v26, "%{public}s called with null request", buf, 0xCu);
          }
        }
        else
        {
          if (v43)
          {
            v28 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            loga = objc_claimAutoreleasedReturnValue();
            v40 = type;
            v29 = os_log_type_enabled(loga, type);
            if (v28)
            {
              if (v29)
              {
                *(_DWORD *)buf = 136446466;
                v46 = "nw_ws_request_add_subprotocol";
                v47 = 2082;
                v48 = v28;
                _os_log_impl(&dword_182FBE000, loga, v40, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v28);
            }
            else
            {
              if (v29)
              {
                *(_DWORD *)buf = 136446210;
                v46 = "nw_ws_request_add_subprotocol";
                _os_log_impl(&dword_182FBE000, loga, v40, "%{public}s called with null request, no backtrace", buf, 0xCu);
              }

            }
            goto LABEL_36;
          }
          log = (os_log_t)v24;
          __nwlog_obj();
          v30 = objc_claimAutoreleasedReturnValue();
          v31 = type;
          v27 = v30;
          if (os_log_type_enabled(v30, type))
          {
            *(_DWORD *)buf = 136446210;
            v46 = "nw_ws_request_add_subprotocol";
            _os_log_impl(&dword_182FBE000, v27, v31, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
          }
        }

        v24 = (char *)log;
      }
LABEL_36:
      if (v24)
        free(v24);
LABEL_16:

      free(v18);
      ++v16;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_ws_copy_headers_into_ws_request";
        _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, "%{public}s failed to add subprotocol to websocket request", buf, 0xCu);
      }

      ++v16;
    }
  }
  if (ArrayBySeparatingStrings)
    CFRelease(ArrayBySeparatingStrings);
LABEL_44:

}

void sub_1838086D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_present_request_to_user_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(NSObject **)(a2 + 48);
  if (v3 && *(_QWORD *)(a2 + 40))
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __nw_ws_present_request_to_user_block_invoke_2;
    v8[3] = &unk_1E14A4AD8;
    v11 = a2;
    v4 = *(id *)(a1 + 32);
    v6 = *(void **)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v9 = v4;
    v12 = v5;
    v10 = v6;
    dispatch_async(v3, v8);

  }
  else
  {
    nw_ws_write_server_response(*(_QWORD *)(a1 + 48), *(void **)(a1 + 40), 0);
  }
  return 1;
}

void __nw_ws_present_request_to_user_block_invoke_2(uint64_t a1)
{
  id v2;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 40) + 16))();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  nw_ws_write_server_response(*(_QWORD *)(a1 + 56), *(void **)(a1 + 40), v2);

}

void sub_183808844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_ws_write_server_response(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  const __CFAllocator *v9;
  __CFHTTPMessage *v10;
  const __CFString *v11;
  const __CFString *v12;
  _BOOL8 v13;
  CFMutableStringRef Mutable;
  __int16 v15;
  NSObject *v16;
  const char *isa;
  const __CFString *v18;
  NSObject *v19;
  const void *v20;
  CFHTTPMessageRef Response;
  id v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  NSObject *v26;
  const void *v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  NSObject *v31;
  const void *v32;
  id v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  _BOOL4 v37;
  void *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  os_log_type_t v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  const void *v47;
  _QWORD async_block[4];
  unsigned int *v49;
  NSObject *v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD enumerator[5];
  char v54;
  os_log_type_t type;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t buf[4];
  const char *v61;
  __int16 v62;
  char *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  v56 = 0;
  v57 = &v56;
  v58 = 0x2020000000;
  v59 = 0;
  if (v6)
  {
    v8 = v6[2];
    if (v8 >= 2)
    {
      if (v8 != 2)
        goto LABEL_30;
      Response = CFHTTPMessageCreateResponse((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 400, CFSTR("Bad Request"), (CFStringRef)*MEMORY[0x1E0C930E8]);
      v57[3] = (uint64_t)Response;
      if (Response)
        goto LABEL_30;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v33 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v61 = "nw_ws_write_server_response";
      v23 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v54 = 0;
      if (!__nwlog_fault((const char *)v23, &type, &v54))
      {
LABEL_84:
        if (!v23)
        {
LABEL_86:
          nw_framer_mark_failed_with_error(v5, 14);
          goto LABEL_87;
        }
LABEL_85:
        free(v23);
        goto LABEL_86;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        v34 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_ws_write_server_response";
          _os_log_impl(&dword_182FBE000, v24, v34, "%{public}s CFHTTPMessageCreateResponse failed", buf, 0xCu);
        }
        goto LABEL_83;
      }
      if (!v54)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v42 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_ws_write_server_response";
          _os_log_impl(&dword_182FBE000, v24, v42, "%{public}s CFHTTPMessageCreateResponse failed, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_83;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      v37 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_ws_write_server_response";
          _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s CFHTTPMessageCreateResponse failed, no backtrace", buf, 0xCu);
        }
        goto LABEL_83;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        v61 = "nw_ws_write_server_response";
        v62 = 2082;
        v63 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s CFHTTPMessageCreateResponse failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_45;
    }
  }
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = CFHTTPMessageCreateResponse((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 101, CFSTR("Switching Protocols"), (CFStringRef)*MEMORY[0x1E0C930E8]);
  v57[3] = (uint64_t)v10;
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v61 = "nw_ws_write_server_response";
    v23 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (!__nwlog_fault((const char *)v23, &type, &v54))
      goto LABEL_84;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v24 = (id)gLogObj;
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_ws_write_server_response";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s CFHTTPMessageCreateResponse failed", buf, 0xCu);
      }
LABEL_83:

      goto LABEL_84;
    }
    if (!v54)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v24 = (id)gLogObj;
      v35 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_ws_write_server_response";
        _os_log_impl(&dword_182FBE000, v24, v35, "%{public}s CFHTTPMessageCreateResponse failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_83;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v24 = (id)gLogObj;
    v29 = type;
    v30 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_ws_write_server_response";
        _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s CFHTTPMessageCreateResponse failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_83;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v61 = "nw_ws_write_server_response";
      v62 = 2082;
      v63 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s CFHTTPMessageCreateResponse failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_45:

    free(backtrace_string);
    if (!v23)
      goto LABEL_86;
    goto LABEL_85;
  }
  CFHTTPMessageSetHeaderFieldValue(v10, CFSTR("Upgrade"), CFSTR("WebSocket"));
  CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v57[3], CFSTR("Connection"), CFSTR("Upgrade"));
  v11 = CFHTTPMessageCopyHeaderFieldValue(*(CFHTTPMessageRef *)(a1 + 24), CFSTR("Sec-WebSocket-Key"));
  v12 = v11;
  if (!v11)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = (id)gLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v61 = "nw_ws_write_server_response";
      v62 = 2082;
      v63 = (char *)(a1 + 227);
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s keyRef should not be nil", buf, 0x16u);
    }

    v27 = (const void *)v57[3];
    if (v27)
    {
      CFRelease(v27);
      v57[3] = 0;
    }
    goto LABEL_40;
  }
  v13 = nw_ws_copy_response_for_challenge(v11);
  CFRelease(v12);
  if (!v13)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v31 = (id)gLogObj;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v61 = "nw_ws_write_server_response";
      v62 = 2082;
      v63 = (char *)(a1 + 227);
      _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, "%{public}s %{public}s acceptRef should not be nil", buf, 0x16u);
    }

    v32 = (const void *)v57[3];
    if (v32)
    {
      CFRelease(v32);
      v57[3] = 0;
    }
LABEL_40:
    nw_framer_mark_failed_with_error(v5, 14);
    goto LABEL_87;
  }
  CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v57[3], CFSTR("Sec-WebSocket-Accept"), (CFStringRef)v13);
  CFRelease((CFTypeRef)v13);
  if ((*(_WORD *)(a1 + 225) & 0x40) != 0)
  {
    Mutable = CFStringCreateMutable(0, 0);
    CFStringAppendCString(Mutable, "permessage-deflate", 0x8000100u);
    v15 = *(_WORD *)(a1 + 225);
    if ((v15 & 0x80) == 0)
    {
      CFStringAppendCString(Mutable, "; server_no_context_takeover", 0x8000100u);
      v15 = *(_WORD *)(a1 + 225);
    }
    if ((v15 & 0x100) == 0)
      CFStringAppendCString(Mutable, "; client_no_context_takeover", 0x8000100u);
    if ((*(_BYTE *)(a1 + 220) & 0xF8) == 8)
      CFStringAppendFormat(Mutable, 0, CFSTR("; server_max_window_bits=%d"), *(unsigned __int8 *)(a1 + 220));
    if ((*(_BYTE *)(a1 + 221) & 0xF8) == 8)
      CFStringAppendFormat(Mutable, 0, CFSTR("; client_max_window_bits=%d"), *(unsigned __int8 *)(a1 + 221));
    CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v57[3], CFSTR("Sec-WebSocket-Extensions"), Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
  if (!v7)
    goto LABEL_30;
  v16 = v7;
  isa = (const char *)v16[2].isa;

  if (isa && *isa)
  {
    v18 = CFStringCreateWithCString(v9, isa, 0x8000100u);
    if (v18)
    {
      CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v57[3], CFSTR("Sec-WebSocket-Protocol"), v18);
      CFRelease(v18);
      goto LABEL_22;
    }
    __nwlog_obj();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v61 = "nw_ws_write_server_response";
    v39 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (!__nwlog_fault(v39, &type, &v54))
      goto LABEL_94;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_ws_write_server_response";
        _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s CFStringCreateWithCString failed", buf, 0xCu);
      }
    }
    else if (v54)
    {
      v43 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      v45 = os_log_type_enabled(v40, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          v61 = "nw_ws_write_server_response";
          v62 = 2082;
          v63 = v43;
          _os_log_impl(&dword_182FBE000, v40, v44, "%{public}s CFStringCreateWithCString failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        goto LABEL_94;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_ws_write_server_response";
        _os_log_impl(&dword_182FBE000, v40, v44, "%{public}s CFStringCreateWithCString failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_ws_write_server_response";
        _os_log_impl(&dword_182FBE000, v40, v46, "%{public}s CFStringCreateWithCString failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_94:
    if (v39)
      free(v39);
    v47 = (const void *)v57[3];
    if (v47)
    {
      CFRelease(v47);
      v57[3] = 0;
    }
    goto LABEL_86;
  }
LABEL_22:
  enumerator[0] = MEMORY[0x1E0C809B0];
  enumerator[1] = 3221225472;
  enumerator[2] = ___ZL27nw_ws_write_server_responseP13nw_ws_state_tPU23objcproto12OS_nw_framer8NSObjectPU28objcproto17OS_nw_ws_responseS1__block_invoke;
  enumerator[3] = &unk_1E14A2B38;
  enumerator[4] = &v56;
  if (nw_ws_response_enumerate_additional_headers(v16, enumerator))
  {
LABEL_30:
    async_block[0] = MEMORY[0x1E0C809B0];
    async_block[1] = 3221225472;
    async_block[2] = ___ZL27nw_ws_write_server_responseP13nw_ws_state_tPU23objcproto12OS_nw_framer8NSObjectPU28objcproto17OS_nw_ws_responseS1__block_invoke_68;
    async_block[3] = &unk_1E14A2B60;
    v52 = a1;
    v49 = v7;
    v51 = &v56;
    v50 = v5;
    nw_framer_async(v50, async_block);

    goto LABEL_87;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v19 = (id)gLogObj;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v61 = "nw_ws_write_server_response";
    v62 = 2082;
    v63 = (char *)(a1 + 227);
    _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s failed to set all additional headers", buf, 0x16u);
  }

  v20 = (const void *)v57[3];
  if (v20)
  {
    CFRelease(v20);
    v57[3] = 0;
  }
  nw_framer_mark_failed_with_error(v5, 14);
LABEL_87:
  _Block_object_dispose(&v56, 8);

}

void sub_1838094C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;

  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL27nw_ws_write_server_responseP13nw_ws_state_tPU23objcproto12OS_nw_framer8NSObjectPU28objcproto17OS_nw_ws_responseS1__block_invoke(uint64_t a1, const char *a2, const char *a3)
{
  const __CFAllocator *v5;
  CFStringRef v6;
  const __CFString *v7;
  const __CFString *v8;
  BOOL v9;
  uint64_t v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  NSObject *v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v7 = CFStringCreateWithCString(v5, a3, 0x8000100u);
  v8 = v7;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  v10 = !v9;
  if (v9)
  {
    if (v6)
      CFRelease(v6);
    if (v8)
      CFRelease(v8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v25 = "nw_ws_write_server_response_block_invoke";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v12, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v14 = type;
        if (!os_log_type_enabled(v13, type))
          goto LABEL_29;
        *(_DWORD *)buf = 136446210;
        v25 = "nw_ws_write_server_response_block_invoke";
        v15 = "%{public}s CFStringCreateWithCString failed";
LABEL_27:
        v20 = v13;
        v21 = v14;
        goto LABEL_28;
      }
      if (!v22)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v14 = type;
        if (!os_log_type_enabled(v13, type))
          goto LABEL_29;
        *(_DWORD *)buf = 136446210;
        v25 = "nw_ws_write_server_response_block_invoke";
        v15 = "%{public}s CFStringCreateWithCString failed, backtrace limit exceeded";
        goto LABEL_27;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v17 = type;
      v18 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (!v18)
        {
LABEL_29:

          if (!v12)
            return v10;
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        v25 = "nw_ws_write_server_response_block_invoke";
        v15 = "%{public}s CFStringCreateWithCString failed, no backtrace";
        v20 = v13;
        v21 = v17;
LABEL_28:
        _os_log_impl(&dword_182FBE000, v20, v21, v15, buf, 0xCu);
        goto LABEL_29;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v25 = "nw_ws_write_server_response_block_invoke";
        v26 = 2082;
        v27 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s CFStringCreateWithCString failed, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v12)
      return v10;
LABEL_23:
    free(v12);
    return v10;
  }
  CFHTTPMessageSetHeaderFieldValue(*(CFHTTPMessageRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v6, v7);
  CFRelease(v6);
  CFRelease(v8);
  return v10;
}

void ___ZL27nw_ws_write_server_responseP13nw_ws_state_tPU23objcproto12OS_nw_framer8NSObjectPU28objcproto17OS_nw_ws_responseS1__block_invoke_68(uint64_t a1)
{
  const __CFData *v2;
  const void *v3;
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  NSObject *v12;
  const uint8_t *BytePtr;
  CFIndex Length;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  char v21;
  const char *v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 56) + 48), *(id *)(a1 + 32));
  v2 = CFHTTPMessageCopySerializedMessage(*(CFHTTPMessageRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  v3 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v26 = "nw_ws_write_server_response_block_invoke";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v5, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_24;
        *(_DWORD *)buf = 136446210;
        v26 = "nw_ws_write_server_response_block_invoke";
        v8 = "%{public}s CFHTTPMessageCopySerializedMessage failed";
LABEL_22:
        v16 = v6;
        v17 = v7;
        goto LABEL_23;
      }
      if (!v23)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_24;
        *(_DWORD *)buf = 136446210;
        v26 = "nw_ws_write_server_response_block_invoke";
        v8 = "%{public}s CFHTTPMessageCopySerializedMessage failed, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v10 = type;
      v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_24:

          if (!v5)
            goto LABEL_15;
          goto LABEL_14;
        }
        *(_DWORD *)buf = 136446210;
        v26 = "nw_ws_write_server_response_block_invoke";
        v8 = "%{public}s CFHTTPMessageCopySerializedMessage failed, no backtrace";
        v16 = v6;
        v17 = v10;
LABEL_23:
        _os_log_impl(&dword_182FBE000, v16, v17, v8, buf, 0xCu);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "nw_ws_write_server_response_block_invoke";
        v27 = 2082;
        v28 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s CFHTTPMessageCopySerializedMessage failed, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5)
    {
LABEL_15:
      nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 40), 14);
      goto LABEL_16;
    }
LABEL_14:
    free(v5);
    goto LABEL_15;
  }
LABEL_16:
  v12 = *(NSObject **)(a1 + 40);
  BytePtr = CFDataGetBytePtr(v2);
  Length = CFDataGetLength(v2);
  nw_framer_write_output(v12, BytePtr, Length);
  if (v2)
    CFRelease(v2);
  if (gLogDatapath)
  {
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      v19 = *(_QWORD *)(a1 + 56);
      v20 = (const char *)(v19 + 227);
      if (!v19)
        v20 = "";
      v21 = *(_WORD *)(v19 + 225);
      v26 = "nw_ws_write_server_response_block_invoke";
      *(_DWORD *)buf = 136446722;
      v27 = 2082;
      v28 = (void *)v20;
      if ((v21 & 4) != 0)
        v22 = "server";
      else
        v22 = "client";
      v29 = 2082;
      v30 = v22;
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s %{public}s handshake complete", buf, 0x20u);
    }

  }
  v15 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v15 + 180) = 2;
  *(_DWORD *)(v15 + 188) = 2;
  *(_WORD *)(v15 + 225) &= ~2u;
  nw_framer_mark_ready(*(nw_framer_t *)(a1 + 40));
}

uint64_t nw_ws_validate_server_response_with_protocol_options(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  os_log_type_t v29;
  _QWORD v30[5];
  char v31;
  os_log_type_t type;
  _BYTE buf[24];
  __n128 (*v34)(uint64_t, uint64_t);
  void (*v35)(id *);
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[23];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = v7;
  if (!a1)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null response", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (!v31)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl(&dword_182FBE000, v14, v27, "%{public}s called with null response, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null response, no backtrace", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null response, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(backtrace_string);
    goto LABEL_56;
  }
  if (!a2)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null client_key", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (!v31)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null client_key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s called with null client_key, no backtrace", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s called with null client_key, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (v7)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x16812000000;
    v34 = __Block_byref_object_copy__44465;
    v35 = __Block_byref_object_dispose__44466;
    v36 = "!0!2/\x130";
    v37 = 0;
    v39 = 0;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    memset(v57, 0, sizeof(v57));
    v38 = a2;
    v40 = a1;
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = __nw_ws_validate_server_response_with_protocol_options_block_invoke;
    v30[3] = &unk_1E14A9D68;
    v30[4] = buf;
    nw_protocol_options_access_handle(v7, v30);
    v9 = nw_ws_validate_server_response(*(_QWORD *)&buf[8] + 48);
    v10 = *(_QWORD *)&buf[8];
    if (a4)
      *a4 = *(_DWORD *)(*(_QWORD *)&buf[8] + 260);
    nw_ws_options_set_permessage_deflate(v8, (*(_WORD *)(v10 + 273) & 0x40) != 0);
    nw_ws_options_set_permessage_deflate_client_context_takeover(v8, HIBYTE(*(_WORD *)(*(_QWORD *)&buf[8] + 273)) & 1);
    nw_ws_options_set_permessage_deflate_server_context_takeover(v8, (*(_WORD *)(*(_QWORD *)&buf[8] + 273) & 0x80) != 0);
    nw_ws_options_set_permessage_deflate_client_max_window_bits(v8, *(_BYTE *)(*(_QWORD *)&buf[8] + 269));
    nw_ws_options_set_permessage_deflate_server_max_window_bits(v8, *(_BYTE *)(*(_QWORD *)&buf[8] + 268));
    _Block_object_dispose(buf, 8);

    goto LABEL_7;
  }
  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (__nwlog_fault(v13, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null options", buf, 0xCu);
      }
LABEL_55:

      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
LABEL_56:
  if (v13)
    free(v13);
  v9 = 0;
LABEL_7:

  return v9;
}

void sub_18380A46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  nw_ws_state_t::~nw_ws_state_t((id *)(v12 + 48));

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__44465(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 64) = v2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v3 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a1 + 88) = v3;
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v5 = *(_OWORD *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 144) = v6;
  v8 = *(_OWORD *)(a2 + 192);
  v9 = *(_OWORD *)(a2 + 208);
  v10 = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 208) = v9;
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 192) = v8;
  v11 = *(_QWORD *)(a2 + 244);
  *(_QWORD *)(a2 + 244) = 0;
  *(_QWORD *)(a1 + 244) = v11;
  v12 = *(_OWORD *)(a2 + 252);
  v13 = *(_OWORD *)(a2 + 268);
  *(_OWORD *)(a1 + 284) = *(_OWORD *)(a2 + 284);
  *(_OWORD *)(a1 + 268) = v13;
  *(_OWORD *)(a1 + 252) = v12;
  result = *(__n128 *)(a2 + 300);
  v15 = *(_OWORD *)(a2 + 316);
  v16 = *(_OWORD *)(a2 + 332);
  *(_OWORD *)(a1 + 343) = *(_OWORD *)(a2 + 343);
  *(_OWORD *)(a1 + 316) = v15;
  *(_OWORD *)(a1 + 332) = v16;
  *(__n128 *)(a1 + 300) = result;
  return result;
}

void __Block_byref_object_dispose__44466(id *a1)
{

}

uint64_t __nw_ws_validate_server_response_with_protocol_options_block_invoke(uint64_t a1, uint64_t a2)
{
  _WORD *v2;
  _WORD *v3;
  _WORD *v4;
  _WORD *v5;
  _WORD *v6;
  uint64_t v7;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 144) = *(_QWORD *)(a2 + 32);
  v2 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 273);
  *v2 = *v2 & 0xFFFE | ((*(_BYTE *)(a2 + 70) & 4) != 0);
  v3 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 273);
  *v3 &= ~4u;
  v4 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 273);
  *v4 = *v4 & 0xFFBF | (8 * *(unsigned __int8 *)(a2 + 70)) & 0x40;
  v5 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 273);
  *v5 = *v5 & 0xFF7F | (8 * *(unsigned __int8 *)(a2 + 70)) & 0x80;
  v6 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 273);
  *v6 = *v6 & 0xFEFF | (((*(_BYTE *)(a2 + 70) & 0x20) != 0) << 8);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 268) = *(_BYTE *)(a2 + 68);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 269) = *(_BYTE *)(a2 + 69);
  v7 = *(unsigned int *)(a2 + 60);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 200) = *(unsigned int *)(a2 + 64);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 192) = v7;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 64), *(id *)a2);
  return 1;
}

uint64_t nw_ws_validate_server_response(uint64_t a1)
{
  __CFHTTPMessage *v2;
  const __CFString *v3;
  nw_ws_response_t v4;
  void *v5;
  const __CFString *v6;
  const __CFString *v7;
  NSObject *v8;
  nw_ws_response_t v9;
  void *v10;
  uint64_t result;
  NSObject *v12;
  int v13;
  const __CFString *v14;
  const __CFString *v15;
  BOOL v16;
  NSObject *v17;
  const __CFString *v18;
  const __CFString *v19;
  BOOL v20;
  NSObject *v21;
  CFStringRef v22;
  _BOOL8 v23;
  const void *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  const __CFString *v28;
  const __CFString *v29;
  NSObject *v30;
  NSObject *v31;
  void *v32;
  const __CFString *v33;
  CFIndex v34;
  const __CFString *ValueAtIndex;
  const __CFArray *v36;
  const __CFArray *v37;
  const __CFString *v38;
  int v39;
  CFIndex j;
  const __CFString *v41;
  NSObject *v42;
  NSObject *v43;
  const char *v44;
  uint32_t v45;
  NSObject *v46;
  const __CFArray *v47;
  NSObject *v48;
  char v49;
  NSObject *v50;
  NSObject *v51;
  const char *v52;
  char v53;
  const __CFDictionary *v54;
  const __CFDictionary *v55;
  void *v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  char *backtrace_string;
  os_log_type_t v61;
  _BOOL4 v62;
  os_log_type_t v63;
  char i;
  const __CFArray *theArray;
  char v66;
  _QWORD applier[6];
  _BYTE v68[12];
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  const __CFString *v72;
  _BYTE buf[24];
  const __CFString *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v2 = *(__CFHTTPMessage **)(a1 + 24);
  v3 = *(const __CFString **)(a1 + 8);
  if (CFHTTPMessageGetResponseStatusCode(v2) != 101)
  {
    v9 = nw_ws_response_create(nw_ws_response_status_reject, 0);
    v10 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v9;

    result = 0;
    *(_DWORD *)(a1 + 212) = 0;
    return result;
  }
  v4 = nw_ws_response_create(nw_ws_response_status_accept, 0);
  v5 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v4;

  if (gLogDatapath)
  {
    __nwlog_obj();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 227;
      _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Got 101 response", buf, 0x16u);
    }

  }
  v6 = CFHTTPMessageCopyVersion(v2);
  v7 = v6;
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 227;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s %{public}s server response didn't contain http version", buf, 0x16u);
    }

    goto LABEL_12;
  }
  if (CFStringCompare(v6, (CFStringRef)*MEMORY[0x1E0C930E8], 1uLL))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 227;
      *(_WORD *)&buf[22] = 2112;
      v74 = v7;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s server response has invalid http version %@", buf, 0x20u);
    }

    CFRelease(v7);
LABEL_12:
    result = 0;
    v13 = 1;
LABEL_13:
    *(_DWORD *)(a1 + 212) = v13;
    return result;
  }
  CFRelease(v7);
  v14 = CFHTTPMessageCopyHeaderFieldValue(v2, CFSTR("Upgrade"));
  v15 = v14;
  if (!v14 || (v16 = CFStringCompare(v14, CFSTR("WebSocket"), 1uLL) == kCFCompareEqualTo, CFRelease(v15), !v16))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 227;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s %{public}s server response doesn't match expected value", buf, 0x16u);
    }

    result = 0;
    v13 = 3;
    goto LABEL_13;
  }
  v18 = CFHTTPMessageCopyHeaderFieldValue(v2, CFSTR("Connection"));
  v19 = v18;
  if (!v18 || (v20 = CFStringCompare(v18, CFSTR("Upgrade"), 1uLL) == kCFCompareEqualTo, CFRelease(v19), !v20))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 227;
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s %{public}s server response doesn't match expected value", buf, 0x16u);
    }

    result = 0;
    v13 = 2;
    goto LABEL_13;
  }
  v22 = CFHTTPMessageCopyHeaderFieldValue(v2, CFSTR("Sec-WebSocket-Accept"));
  if (!v22)
  {
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 227;
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s Sec-WebSocket-Accept has no value!", buf, 0x16u);
    }

    goto LABEL_36;
  }
  v23 = nw_ws_copy_response_for_challenge(v3);
  v24 = (const void *)v23;
  if (!v23)
  {
    __nwlog_obj();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 227;
      _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, "%{public}s %{public}s nw_ws_copy_response_for_challenge", buf, 0x16u);
    }

    CFRelease(v22);
    goto LABEL_36;
  }
  if (CFStringCompare((CFStringRef)v23, v22, 1uLL))
  {
    __nwlog_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 227;
      _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_ERROR, "%{public}s %{public}s server response doesn't match expected value", buf, 0x16u);
    }

    CFRelease(v24);
    CFRelease(v22);
LABEL_36:
    result = 0;
    v13 = 5;
    goto LABEL_13;
  }
  CFRelease(v24);
  CFRelease(v22);
  v28 = CFHTTPMessageCopyHeaderFieldValue(v2, CFSTR("Sec-WebSocket-Protocol"));
  v29 = v28;
  if (!v28)
  {
LABEL_47:
    v33 = CFHTTPMessageCopyHeaderFieldValue(v2, CFSTR("Sec-WebSocket-Extensions"));
    if (v33)
    {
      theArray = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v33, CFSTR(","));
      CFRelease(v33);
      v34 = 0;
      for (i = 1; ; i = 0)
      {
LABEL_49:
        if (v34 >= CFArrayGetCount(theArray))
        {
          v49 = i;
          goto LABEL_111;
        }
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v34);
        v36 = nw_ws_copy_extension_decl_as_array(ValueAtIndex);
        v37 = v36;
        if (!v36)
          break;
        if (CFArrayGetCount(v36) < 1
          || (v38 = (const __CFString *)CFArrayGetValueAtIndex(v37, 0),
              CFStringCompare(v38, CFSTR("permessage-deflate"), 1uLL)))
        {
          v47 = v37;
          goto LABEL_99;
        }
        if ((*(_WORD *)(a1 + 225) & 0x40) == 0)
        {
          __nwlog_obj();
          v51 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 227;
            v52 = "%{public}s %{public}s server response contains a permessage-deflate extension that was not negotiated";
            goto LABEL_107;
          }
LABEL_108:

          v47 = v37;
LABEL_109:
          CFRelease(v47);
          goto LABEL_110;
        }
        if (v34 == 1)
        {
          __nwlog_obj();
          v51 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 227;
            v52 = "%{public}s %{public}s server response contains multiple permessage-deflate extensions";
LABEL_107:
            _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_ERROR, v52, buf, 0x16u);
          }
          goto LABEL_108;
        }
        v39 = 0;
        for (j = 1; ; ++j)
        {
          while (1)
          {
            while (1)
            {
              if (j >= CFArrayGetCount(v37))
              {
                CFRelease(v37);
                ++v34;
                goto LABEL_49;
              }
              v41 = (const __CFString *)CFArrayGetValueAtIndex(v37, j);
              *(_QWORD *)v68 = 0;
              if (CFStringCompare(v41, CFSTR("server_no_context_takeover"), 1uLL))
                break;
              if ((v39 & 1) != 0)
              {
                __nwlog_obj();
                v42 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                  goto LABEL_88;
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = a1 + 227;
                v43 = v42;
                v44 = "%{public}s %{public}s Duplicate use of parameter server_no_context_takeover";
                v45 = 22;
                goto LABEL_87;
              }
              v39 |= 1u;
              *(_WORD *)(a1 + 225) &= ~0x80u;
              ++j;
            }
            if (CFStringCompare(v41, CFSTR("client_no_context_takeover"), 1uLL) == kCFCompareEqualTo)
              break;
            if (nw_ws_get_extension_parameter(v41, CFSTR("server_max_window_bits"), (unint64_t *)v68))
            {
              if ((v39 & 4) != 0)
              {
                __nwlog_obj();
                v42 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                  goto LABEL_88;
LABEL_77:
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = a1 + 227;
                v43 = v42;
                v44 = "%{public}s %{public}s Duplicate use of parameter server_max_window_bits";
                v45 = 22;
                goto LABEL_87;
              }
              if ((*(_QWORD *)v68 & 0xFFFFFFFFFFFFFFF8) != 8)
              {
                __nwlog_obj();
                v42 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                  goto LABEL_88;
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = a1 + 227;
                *(_WORD *)&buf[22] = 2048;
                v74 = *(const __CFString **)v68;
                v43 = v42;
                v44 = "%{public}s %{public}s Invalid value for server_max_window_bits (%llu)";
LABEL_86:
                v45 = 32;
                goto LABEL_87;
              }
              v39 |= 4u;
              *(_BYTE *)(a1 + 220) = v68[0];
              ++j;
            }
            else
            {
              if (!nw_ws_get_extension_parameter(v41, CFSTR("client_max_window_bits"), (unint64_t *)v68))
              {
                __nwlog_obj();
                v42 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                  goto LABEL_88;
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = a1 + 227;
                *(_WORD *)&buf[22] = 2112;
                v74 = v41;
                v43 = v42;
                v44 = "%{public}s %{public}s Invalid parameter in server permessage-deflate response (%@)";
                goto LABEL_86;
              }
              if ((v39 & 8) != 0)
              {
                __nwlog_obj();
                v42 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                  goto LABEL_88;
                goto LABEL_77;
              }
              if ((*(_QWORD *)v68 & 0xFFFFFFFFFFFFFFF8) != 8)
              {
                __nwlog_obj();
                v42 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                  goto LABEL_88;
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = a1 + 227;
                *(_WORD *)&buf[22] = 2048;
                v74 = *(const __CFString **)v68;
                v43 = v42;
                v44 = "%{public}s %{public}s Invalid value for client_max_window_bits (%llu)";
                goto LABEL_86;
              }
              v39 |= 8u;
              *(_BYTE *)(a1 + 221) = v68[0];
              ++j;
            }
          }
          if ((v39 & 2) != 0)
            break;
          v39 |= 2u;
          *(_WORD *)(a1 + 225) &= ~0x100u;
        }
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          goto LABEL_88;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = a1 + 227;
        v43 = v42;
        v44 = "%{public}s %{public}s Duplicate use of parameter client_no_context_takeover";
        v45 = 22;
LABEL_87:
        _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_ERROR, v44, buf, v45);
LABEL_88:

        CFRelease(v37);
        ++v34;
      }
      v47 = 0;
LABEL_99:
      __nwlog_obj();
      v50 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = a1 + 227;
        *(_WORD *)&buf[22] = 2112;
        v74 = ValueAtIndex;
        _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_ERROR, "%{public}s %{public}s server response contains an extension that was not negotiated (%@", buf, 0x20u);
      }

      if (v37)
        goto LABEL_109;
LABEL_110:
      v49 = 0;
LABEL_111:
      if (theArray)
      {
        v53 = v49;
        CFRelease(theArray);
        v49 = v53;
      }
      if ((v49 & 1) == 0)
        goto LABEL_116;
    }
    else if ((*(_WORD *)(a1 + 225) & 0x40) != 0)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
        _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_INFO, "%{public}s Not using per-message-deflate compression because server response did not include it in negotiated extensions", buf, 0xCu);
      }

      *(_WORD *)(a1 + 225) &= ~0x40u;
    }
    v54 = CFHTTPMessageCopyAllHeaderFields(v2);
    v55 = v54;
    if (v54)
    {
      CFDictionaryApplyFunction(v54, (CFDictionaryApplierFunction)nw_ws_copy_headers_into_ws_response, *(void **)(a1 + 48));
      CFRelease(v55);
      return 1;
    }
    __nwlog_obj();
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
    v57 = (char *)_os_log_send_and_compose_impl();

    v68[0] = 16;
    v66 = 0;
    if (!__nwlog_fault(v57, v68, &v66))
      goto LABEL_133;
    if (v68[0] == 17)
    {
      __nwlog_obj();
      v58 = objc_claimAutoreleasedReturnValue();
      v59 = v68[0];
      if (os_log_type_enabled(v58, (os_log_type_t)v68[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
        _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s CFHTTPMessageCopyAllHeaderFields failed", buf, 0xCu);
      }
    }
    else if (v66)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v58 = objc_claimAutoreleasedReturnValue();
      v61 = v68[0];
      v62 = os_log_type_enabled(v58, (os_log_type_t)v68[0]);
      if (backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v58, v61, "%{public}s CFHTTPMessageCopyAllHeaderFields failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_133;
      }
      if (v62)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
        _os_log_impl(&dword_182FBE000, v58, v61, "%{public}s CFHTTPMessageCopyAllHeaderFields failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v58 = objc_claimAutoreleasedReturnValue();
      v63 = v68[0];
      if (os_log_type_enabled(v58, (os_log_type_t)v68[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
        _os_log_impl(&dword_182FBE000, v58, v63, "%{public}s CFHTTPMessageCopyAllHeaderFields failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_133:
    if (v57)
      free(v57);
    return 0;
  }
  if (CFStringFind(v28, CFSTR(","), 0).location != -1)
  {
    __nwlog_obj();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_ws_validate_server_response";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 227;
      _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_ERROR, "%{public}s %{public}s server response contains multiple Sec-WebSocket-Protocol values", buf, 0x16u);
    }

    CFRelease(v29);
LABEL_116:
    result = 0;
    v13 = 4;
    goto LABEL_13;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  LOBYTE(v74) = 0;
  v32 = *(void **)(a1 + 16);
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3221225472;
  applier[2] = __nw_ws_validate_server_response_block_invoke;
  applier[3] = &unk_1E14A91F0;
  applier[4] = buf;
  applier[5] = v29;
  xpc_array_apply(v32, applier);
  if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
  {
    CFRelease(v29);
    _Block_object_dispose(buf, 8);
    goto LABEL_47;
  }
  __nwlog_obj();
  v48 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v68 = 136446722;
    *(_QWORD *)&v68[4] = "nw_ws_validate_server_response";
    v69 = 2082;
    v70 = a1 + 227;
    v71 = 2112;
    v72 = v29;
    _os_log_impl(&dword_182FBE000, v48, OS_LOG_TYPE_ERROR, "%{public}s %{public}s server response contains a Sec-WebSocket-Protocol value that was not advertised (%@)", v68, 0x20u);
  }

  CFRelease(v29);
  *(_DWORD *)(a1 + 212) = 4;
  _Block_object_dispose(buf, 8);
  return 0;
}

void sub_18380B750(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_ws_validate_server_response_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *string_ptr;
  const __CFString *v6;
  CFComparisonResult v7;
  uint64_t v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  v6 = CFStringCreateWithCString(0, string_ptr, 0x8000100u);
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_ws_validate_server_response_block_invoke";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v10, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_ws_validate_server_response_block_invoke";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s CFStringCreatewithCString failed", buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "nw_ws_validate_server_response_block_invoke";
            v22 = 2082;
            v23 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v15, "%{public}s CFStringCreatewithCString failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v10)
            goto LABEL_11;
          goto LABEL_10;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_ws_validate_server_response_block_invoke";
          _os_log_impl(&dword_182FBE000, v11, v15, "%{public}s CFStringCreatewithCString failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_ws_validate_server_response_block_invoke";
          _os_log_impl(&dword_182FBE000, v11, v17, "%{public}s CFStringCreatewithCString failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v10)
      goto LABEL_11;
LABEL_10:
    free(v10);
    goto LABEL_11;
  }
  v7 = CFStringCompare(*(CFStringRef *)(a1 + 40), v6, 0);
  CFRelease(v6);
  v8 = 1;
  if (v7 == kCFCompareEqualTo)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
LABEL_11:
    v8 = 0;
  }

  return v8;
}

void sub_18380BAA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_ws_copy_headers_into_ws_response(const __CFString *a1, const __CFString *a2, void *a3)
{
  NSObject *v5;
  char *c_string_from_cfstring;
  const char *v7;
  void *v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  NSObject *v16;
  void *v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (CFStringCompare(a1, CFSTR("Sec-WebSocket-Version"), 1uLL) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("Upgrade"), 1uLL) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("Connection"), 1uLL) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("Sec-WebSocket-Accept"), 1uLL) == kCFCompareEqualTo)
  {
    goto LABEL_18;
  }
  if (CFStringCompare(a1, CFSTR("Sec-WebSocket-Protocol"), 1uLL))
  {
    c_string_from_cfstring = (char *)nw_utilities_create_c_string_from_cfstring(a1);
    v7 = (const char *)nw_utilities_create_c_string_from_cfstring(a2);
    v8 = (void *)v7;
    if (c_string_from_cfstring && v7)
    {
      nw_ws_response_add_additional_header(v5, c_string_from_cfstring, v7);
    }
    else if (!c_string_from_cfstring)
    {
      goto LABEL_16;
    }
    free(c_string_from_cfstring);
LABEL_16:
    if (!v8)
    {
LABEL_18:

      return;
    }
LABEL_17:
    free(v8);
    goto LABEL_18;
  }
  v8 = (void *)nw_utilities_create_c_string_from_cfstring(a2);
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_ws_copy_headers_into_ws_response";
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s failed to get selected_subprotocol from websocket response", buf, 0xCu);
    }

    goto LABEL_18;
  }
  v9 = v5;
  if (!v9)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_ws_response_set_selected_subprotocol";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v13, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_ws_response_set_selected_subprotocol";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null response", buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v25 = "nw_ws_response_set_selected_subprotocol";
            v26 = 2082;
            v27 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null response, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_ws_response_set_selected_subprotocol";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null response, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_ws_response_set_selected_subprotocol";
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null response, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_40:
    if (v13)
      free(v13);
    goto LABEL_13;
  }
  v10 = strdup((const char *)v8);
  if (v10)
  {
LABEL_12:
    v9[2].isa = (Class)v10;
LABEL_13:

    goto LABEL_17;
  }
  __nwlog_obj();
  v16 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v25 = "strict_strdup";
  v17 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v17))
  {
    free(v17);
    goto LABEL_12;
  }
  __break(1u);
}

void sub_18380BF40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_storage_register_provider(void *a1, const char *a2, __int128 *a3)
{
  uint64_t *v5;
  NWConcrete_nw_storage_provider_obj *v6;
  char *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t receiver;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  char *v27;
  _BOOL4 v28;
  char *v29;
  _BOOL4 v30;
  char v31;
  os_log_type_t type;
  objc_super v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_storage_register_provider";
    v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v33.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v33, &type))
      goto LABEL_48;
    if (LOBYTE(v33.receiver) == 17)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v33.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v33.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_storage_register_provider";
        v18 = "%{public}s called with null type";
LABEL_46:
        _os_log_impl(&dword_182FBE000, v16, receiver, v18, buf, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v33.receiver;
      v26 = os_log_type_enabled(v16, (os_log_type_t)v33.receiver);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_storage_register_provider";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v16, receiver, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_48:
        if (!v15)
          goto LABEL_7;
LABEL_49:
        free(v15);
        goto LABEL_7;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_storage_register_provider";
        v18 = "%{public}s called with null type, no backtrace";
        goto LABEL_46;
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v33.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v33.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_storage_register_provider";
        v18 = "%{public}s called with null type, backtrace limit exceeded";
        goto LABEL_46;
      }
    }
LABEL_47:

    goto LABEL_48;
  }
  if (a3)
  {
    v6 = [NWConcrete_nw_storage_provider_obj alloc];
    if (!v6)
    {
LABEL_56:
      v8 = 0;
      goto LABEL_6;
    }
    v33.receiver = v6;
    v33.super_class = (Class)NWConcrete_nw_storage_provider_obj;
    v7 = (char *)objc_msgSendSuper2(&v33, sel_init);
    if (v7)
    {
      v8 = v7;
      v9 = *a3;
      v10 = a3[1];
      *(_OWORD *)(v7 + 40) = a3[2];
      *(_OWORD *)(v7 + 24) = v10;
      *(_OWORD *)(v7 + 8) = v9;
      v11 = a3[3];
      v12 = a3[4];
      v13 = a3[5];
      *(_OWORD *)(v7 + 104) = a3[6];
      *(_OWORD *)(v7 + 88) = v13;
      *(_OWORD *)(v7 + 72) = v12;
      *(_OWORD *)(v7 + 56) = v11;
LABEL_6:
      nw_dictionary_set_value(v5[7], a2, v8);

      goto LABEL_7;
    }
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "-[NWConcrete_nw_storage_provider_obj initWithProvider:]";
    v21 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault((const char *)v21, &type, &v31))
    {
LABEL_54:
      if (v21)
        free(v21);
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "-[NWConcrete_nw_storage_provider_obj initWithProvider:]";
        v24 = "%{public}s [super init] failed";
LABEL_52:
        _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
      }
    }
    else
    {
      if (v31)
      {
        v29 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        v30 = os_log_type_enabled(v22, type);
        if (v29)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            v35 = "-[NWConcrete_nw_storage_provider_obj initWithProvider:]";
            v36 = 2082;
            v37 = v29;
            _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v29);
          goto LABEL_54;
        }
        if (!v30)
          goto LABEL_53;
        *(_DWORD *)buf = 136446210;
        v35 = "-[NWConcrete_nw_storage_provider_obj initWithProvider:]";
        v24 = "%{public}s [super init] failed, no backtrace";
        goto LABEL_52;
      }
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "-[NWConcrete_nw_storage_provider_obj initWithProvider:]";
        v24 = "%{public}s [super init] failed, backtrace limit exceeded";
        goto LABEL_52;
      }
    }
LABEL_53:

    goto LABEL_54;
  }
  __nwlog_obj();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v35 = "nw_storage_register_provider";
  v15 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v33.receiver) = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v15, &v33, &type))
    goto LABEL_48;
  if (LOBYTE(v33.receiver) == 17)
  {
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    receiver = (os_log_type_t)v33.receiver;
    if (os_log_type_enabled(v16, (os_log_type_t)v33.receiver))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_storage_register_provider";
      v18 = "%{public}s called with null provider";
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  if (type == OS_LOG_TYPE_DEFAULT)
  {
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    receiver = (os_log_type_t)v33.receiver;
    if (os_log_type_enabled(v16, (os_log_type_t)v33.receiver))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_storage_register_provider";
      v18 = "%{public}s called with null provider, backtrace limit exceeded";
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  v27 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v16 = objc_claimAutoreleasedReturnValue();
  receiver = (os_log_type_t)v33.receiver;
  v28 = os_log_type_enabled(v16, (os_log_type_t)v33.receiver);
  if (!v27)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_storage_register_provider";
      v18 = "%{public}s called with null provider, no backtrace";
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    v35 = "nw_storage_register_provider";
    v36 = 2082;
    v37 = v27;
    _os_log_impl(&dword_182FBE000, v16, receiver, "%{public}s called with null provider, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v27);
  if (v15)
    goto LABEL_49;
LABEL_7:

}

void nw_storage_flush_all_storages_atexit()
{
  objc_class *v0;
  objc_ivar *InstanceVariable;
  ptrdiff_t Offset;
  _QWORD *v3;
  ptrdiff_t v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  char *v8;
  _QWORD block[4];
  char *v10;

  os_unfair_lock_lock((os_unfair_lock_t)&storages_lock);
  v0 = (objc_class *)objc_opt_class();
  InstanceVariable = class_getInstanceVariable(v0, "chain");
  Offset = ivar_getOffset(InstanceVariable);
  v3 = (_QWORD *)storages;
  if (storages)
  {
    v4 = Offset;
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      v6 = (char *)v3 - v4;
      v7 = *((_QWORD *)v6 + 2);
      block[0] = v5;
      block[1] = 3221225472;
      block[2] = __nw_storage_flush_all_storages_atexit_block_invoke;
      block[3] = &unk_1E14ACFD0;
      v10 = v6;
      v8 = v6;
      dispatch_async_and_wait(v7, block);

      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&storages_lock);
}

void __nw_storage_flush_all_storages_atexit_block_invoke(uint64_t a1)
{
  nw_storage_flush(*(void **)(a1 + 32));
}

void nw_storage_flush(void *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  unsigned __int8 *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  _QWORD v11[4];
  _QWORD *v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (unsigned __int8 *)v1[9];
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __nw_storage_flush_block_invoke;
    v11[3] = &unk_1E14AC200;
    v12 = v1;
    nw_array_apply(v3, (uint64_t)v11);
    nw_array_remove_all_objects(v2[9]);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_storage_flush";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_storage_flush";
        v8 = "%{public}s called with null storage";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_storage_flush";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null storage, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_storage_flush";
        v8 = "%{public}s called with null storage, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_storage_flush";
        v8 = "%{public}s called with null storage, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v5)
    free(v5);
LABEL_3:

}

uint64_t __nw_storage_flush_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v4;
  const char *v5;
  char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  sqlite3 **v12;
  void *v13;
  sqlite3_stmt *v14;
  id v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  sqlite3_stmt *v20;
  id v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  id v26;
  id v27;
  char *backtrace_string;
  _BOOL4 v29;
  void *v30;
  void *v31;
  char *v32;
  _BOOL4 v33;
  _BOOL4 v34;
  const char *v35;
  void *v36;
  _BOOL4 v37;
  _BOOL4 v38;
  const char *v39;
  void *v40;
  _BOOL4 v41;
  void *v42;
  _BOOL4 v43;
  char *v44;
  _BOOL4 v45;
  char *v46;
  _BOOL4 v47;
  char v49;
  os_log_type_t type;
  int n[2];
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = *(const char **)(a3 + 8);
    v5 = *(const char **)(a3 + 16);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = nw_storage_provider_for_type(*(void **)(a1 + 32), (uint64_t)v4);
  v7 = nw_dictionary_copy_value(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), (uint64_t)v5);
  v8 = v7;
  if (v7)
  {
    v9 = nw_dictionary_copy_value((uint64_t)v7, (uint64_t)v4);
    v10 = v9;
    if (!v9 || !(*((unsigned int (**)(void *))v6 + 7))(v9))
      goto LABEL_146;
    *(_QWORD *)n = 0;
    v11 = (*((uint64_t (**)(void *, int *))v6 + 6))(v10, n);
    v12 = *(sqlite3 ***)(a1 + 32);
    if (v11)
    {
      v13 = (void *)v11;
      v14 = v12[5];
      if (!v14)
      {
        if (sqlite3_prepare_v2(v12[3], "INSERT OR REPLACE INTO network_storage(key, type, canvas, time) \t\t\t\t\tVALUES (?, ?, ?, strftime('%s','now'))", -1, v12 + 5, 0))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v26 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v53 = "nw_storage_flush_block_invoke";
          v16 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v49 = 0;
          if (!__nwlog_fault(v16, &type, &v49))
            goto LABEL_143;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v17 = objc_claimAutoreleasedReturnValue();
            v18 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to prepare statement";
              goto LABEL_141;
            }
LABEL_142:

            goto LABEL_143;
          }
          if (!v49)
          {
            __nwlog_obj();
            v17 = objc_claimAutoreleasedReturnValue();
            v18 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to prepare statement, backtrace limit exceeded";
              goto LABEL_141;
            }
            goto LABEL_142;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = type;
          v34 = os_log_type_enabled(v17, type);
          if (!backtrace_string)
          {
            if (v34)
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to prepare statement, no backtrace";
              goto LABEL_141;
            }
            goto LABEL_142;
          }
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            v53 = "nw_storage_flush_block_invoke";
            v54 = 2082;
            v55 = backtrace_string;
            v35 = "%{public}s Failed to prepare statement, dumping backtrace:%{public}s";
LABEL_97:
            _os_log_impl(&dword_182FBE000, v17, v18, v35, buf, 0x16u);
            goto LABEL_98;
          }
          goto LABEL_98;
        }
        v14 = *(sqlite3_stmt **)(*(_QWORD *)(a1 + 32) + 40);
      }
      if (!sqlite3_bind_text(v14, 1, v5, -1, 0))
      {
        if (sqlite3_bind_text(*(sqlite3_stmt **)(*(_QWORD *)(a1 + 32) + 40), 2, v4, -1, 0))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v53 = "nw_storage_flush_block_invoke";
          v16 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v49 = 0;
          if (!__nwlog_fault(v16, &type, &v49))
            goto LABEL_143;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v17 = objc_claimAutoreleasedReturnValue();
            v18 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to bind variable";
              goto LABEL_141;
            }
            goto LABEL_142;
          }
          if (!v49)
          {
            __nwlog_obj();
            v17 = objc_claimAutoreleasedReturnValue();
            v18 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to bind variable, backtrace limit exceeded";
              goto LABEL_141;
            }
            goto LABEL_142;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = type;
          v37 = os_log_type_enabled(v17, type);
          if (!backtrace_string)
          {
            if (v37)
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to bind variable, no backtrace";
              goto LABEL_141;
            }
            goto LABEL_142;
          }
          if (!v37)
            goto LABEL_98;
        }
        else
        {
          if (!sqlite3_bind_blob(*(sqlite3_stmt **)(*(_QWORD *)(a1 + 32) + 40), 3, v13, n[0], 0))
          {
            if (sqlite3_step(*(sqlite3_stmt **)(*(_QWORD *)(a1 + 32) + 40)) == 101)
              goto LABEL_145;
            __nwlog_obj();
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v53 = "nw_storage_flush_block_invoke";
            v16 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v49 = 0;
            if (__nwlog_fault(v16, &type, &v49))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v17 = objc_claimAutoreleasedReturnValue();
                v18 = type;
                if (os_log_type_enabled(v17, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v53 = "nw_storage_flush_block_invoke";
                  v19 = "%{public}s Failed to update";
                  goto LABEL_141;
                }
                goto LABEL_142;
              }
              if (!v49)
              {
                __nwlog_obj();
                v17 = objc_claimAutoreleasedReturnValue();
                v18 = type;
                if (os_log_type_enabled(v17, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v53 = "nw_storage_flush_block_invoke";
                  v19 = "%{public}s Failed to update, backtrace limit exceeded";
                  goto LABEL_141;
                }
                goto LABEL_142;
              }
              v46 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v17 = objc_claimAutoreleasedReturnValue();
              v18 = type;
              v47 = os_log_type_enabled(v17, type);
              if (!v46)
              {
                if (v47)
                {
                  *(_DWORD *)buf = 136446210;
                  v53 = "nw_storage_flush_block_invoke";
                  v19 = "%{public}s Failed to update, no backtrace";
                  goto LABEL_141;
                }
                goto LABEL_142;
              }
              if (v47)
              {
                *(_DWORD *)buf = 136446466;
                v53 = "nw_storage_flush_block_invoke";
                v54 = 2082;
                v55 = v46;
                _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s Failed to update, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v46);
            }
LABEL_143:
            if (v16)
LABEL_144:
              free(v16);
LABEL_145:
            sqlite3_reset(*(sqlite3_stmt **)(*(_QWORD *)(a1 + 32) + 40));
            free(v13);
            goto LABEL_146;
          }
          __nwlog_obj();
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v53 = "nw_storage_flush_block_invoke";
          v16 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v49 = 0;
          if (!__nwlog_fault(v16, &type, &v49))
            goto LABEL_143;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v17 = objc_claimAutoreleasedReturnValue();
            v18 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to bind variable";
              goto LABEL_141;
            }
            goto LABEL_142;
          }
          if (!v49)
          {
            __nwlog_obj();
            v17 = objc_claimAutoreleasedReturnValue();
            v18 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to bind variable, backtrace limit exceeded";
              goto LABEL_141;
            }
            goto LABEL_142;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = type;
          v43 = os_log_type_enabled(v17, type);
          if (!backtrace_string)
          {
            if (v43)
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to bind variable, no backtrace";
              goto LABEL_141;
            }
            goto LABEL_142;
          }
          if (!v43)
            goto LABEL_98;
        }
LABEL_96:
        *(_DWORD *)buf = 136446466;
        v53 = "nw_storage_flush_block_invoke";
        v54 = 2082;
        v55 = backtrace_string;
        v35 = "%{public}s Failed to bind variable, dumping backtrace:%{public}s";
        goto LABEL_97;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v53 = "nw_storage_flush_block_invoke";
      v16 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v49 = 0;
      if (!__nwlog_fault(v16, &type, &v49))
        goto LABEL_143;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_storage_flush_block_invoke";
          v19 = "%{public}s Failed to bind variable";
LABEL_141:
          _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
          goto LABEL_142;
        }
        goto LABEL_142;
      }
      if (!v49)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_storage_flush_block_invoke";
          v19 = "%{public}s Failed to bind variable, backtrace limit exceeded";
          goto LABEL_141;
        }
        goto LABEL_142;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v29 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_storage_flush_block_invoke";
          v19 = "%{public}s Failed to bind variable, no backtrace";
          goto LABEL_141;
        }
        goto LABEL_142;
      }
      if (v29)
        goto LABEL_96;
LABEL_98:

      free(backtrace_string);
      if (!v16)
        goto LABEL_145;
      goto LABEL_144;
    }
    v20 = v12[6];
    if (!v20)
    {
      if (sqlite3_prepare_v2(v12[3], "DELETE FROM network_storage WHERE key = ? AND type = ?", -1, v12 + 6, 0))
      {
        __nwlog_obj();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v53 = "nw_storage_flush_block_invoke";
        v22 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v49 = 0;
        if (!__nwlog_fault(v22, &type, &v49))
          goto LABEL_134;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v23 = objc_claimAutoreleasedReturnValue();
          v24 = type;
          if (os_log_type_enabled(v23, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_storage_flush_block_invoke";
            v25 = "%{public}s Failed to prepare statement";
            goto LABEL_132;
          }
LABEL_133:

          goto LABEL_134;
        }
        if (!v49)
        {
          __nwlog_obj();
          v23 = objc_claimAutoreleasedReturnValue();
          v24 = type;
          if (os_log_type_enabled(v23, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_storage_flush_block_invoke";
            v25 = "%{public}s Failed to prepare statement, backtrace limit exceeded";
            goto LABEL_132;
          }
          goto LABEL_133;
        }
        v32 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        v38 = os_log_type_enabled(v23, type);
        if (!v32)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_storage_flush_block_invoke";
            v25 = "%{public}s Failed to prepare statement, no backtrace";
            goto LABEL_132;
          }
          goto LABEL_133;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "nw_storage_flush_block_invoke";
          v54 = 2082;
          v55 = v32;
          v39 = "%{public}s Failed to prepare statement, dumping backtrace:%{public}s";
LABEL_79:
          _os_log_impl(&dword_182FBE000, v23, v24, v39, buf, 0x16u);
          goto LABEL_80;
        }
        goto LABEL_80;
      }
      v20 = *(sqlite3_stmt **)(*(_QWORD *)(a1 + 32) + 48);
    }
    if (sqlite3_bind_text(v20, 1, v5, -1, 0))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v53 = "nw_storage_flush_block_invoke";
      v22 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v49 = 0;
      if (!__nwlog_fault(v22, &type, &v49))
        goto LABEL_134;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_storage_flush_block_invoke";
          v25 = "%{public}s Failed to bind variable";
LABEL_132:
          _os_log_impl(&dword_182FBE000, v23, v24, v25, buf, 0xCu);
          goto LABEL_133;
        }
        goto LABEL_133;
      }
      if (!v49)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_storage_flush_block_invoke";
          v25 = "%{public}s Failed to bind variable, backtrace limit exceeded";
          goto LABEL_132;
        }
        goto LABEL_133;
      }
      v32 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v33 = os_log_type_enabled(v23, type);
      if (!v32)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_storage_flush_block_invoke";
          v25 = "%{public}s Failed to bind variable, no backtrace";
          goto LABEL_132;
        }
        goto LABEL_133;
      }
      if (v33)
        goto LABEL_78;
    }
    else
    {
      if (!sqlite3_bind_text(*(sqlite3_stmt **)(*(_QWORD *)(a1 + 32) + 48), 2, v4, -1, 0))
      {
        if (sqlite3_step(*(sqlite3_stmt **)(*(_QWORD *)(a1 + 32) + 48)) == 101)
          goto LABEL_136;
        __nwlog_obj();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v53 = "nw_storage_flush_block_invoke";
        v22 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v49 = 0;
        if (__nwlog_fault(v22, &type, &v49))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v23 = objc_claimAutoreleasedReturnValue();
            v24 = type;
            if (os_log_type_enabled(v23, type))
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_storage_flush_block_invoke";
              v25 = "%{public}s Failed to update";
              goto LABEL_132;
            }
            goto LABEL_133;
          }
          if (!v49)
          {
            __nwlog_obj();
            v23 = objc_claimAutoreleasedReturnValue();
            v24 = type;
            if (os_log_type_enabled(v23, type))
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_storage_flush_block_invoke";
              v25 = "%{public}s Failed to update, backtrace limit exceeded";
              goto LABEL_132;
            }
            goto LABEL_133;
          }
          v44 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v23 = objc_claimAutoreleasedReturnValue();
          v24 = type;
          v45 = os_log_type_enabled(v23, type);
          if (!v44)
          {
            if (v45)
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_storage_flush_block_invoke";
              v25 = "%{public}s Failed to update, no backtrace";
              goto LABEL_132;
            }
            goto LABEL_133;
          }
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            v53 = "nw_storage_flush_block_invoke";
            v54 = 2082;
            v55 = v44;
            _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s Failed to update, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v44);
        }
LABEL_134:
        if (v22)
LABEL_135:
          free(v22);
LABEL_136:
        sqlite3_reset(*(sqlite3_stmt **)(*(_QWORD *)(a1 + 32) + 48));
LABEL_146:

        goto LABEL_147;
      }
      __nwlog_obj();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v53 = "nw_storage_flush_block_invoke";
      v22 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v49 = 0;
      if (!__nwlog_fault(v22, &type, &v49))
        goto LABEL_134;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_storage_flush_block_invoke";
          v25 = "%{public}s Failed to bind variable";
          goto LABEL_132;
        }
        goto LABEL_133;
      }
      if (!v49)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_storage_flush_block_invoke";
          v25 = "%{public}s Failed to bind variable, backtrace limit exceeded";
          goto LABEL_132;
        }
        goto LABEL_133;
      }
      v32 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v41 = os_log_type_enabled(v23, type);
      if (!v32)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_storage_flush_block_invoke";
          v25 = "%{public}s Failed to bind variable, no backtrace";
          goto LABEL_132;
        }
        goto LABEL_133;
      }
      if (v41)
      {
LABEL_78:
        *(_DWORD *)buf = 136446466;
        v53 = "nw_storage_flush_block_invoke";
        v54 = 2082;
        v55 = v32;
        v39 = "%{public}s Failed to bind variable, dumping backtrace:%{public}s";
        goto LABEL_79;
      }
    }
LABEL_80:

    free(v32);
    if (!v22)
      goto LABEL_136;
    goto LABEL_135;
  }
LABEL_147:

  return 1;
}

char *nw_storage_provider_for_type(void *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  void *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
    {
      v5 = (char *)nw_dictionary_copy_value(v3[7], a2);
      if (v5)
        v6 = v5 + 8;
      else
        v6 = 0;

      goto LABEL_7;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_storage_provider_for_type";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_storage_provider_for_type";
          v12 = "%{public}s called with null type";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (!v18)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_storage_provider_for_type";
          v12 = "%{public}s called with null type, backtrace limit exceeded";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v17 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_storage_provider_for_type";
          v12 = "%{public}s called with null type, no backtrace";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (!v17)
        goto LABEL_25;
      *(_DWORD *)buf = 136446466;
      v21 = "nw_storage_provider_for_type";
      v22 = 2082;
      v23 = backtrace_string;
      v16 = "%{public}s called with null type, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_182FBE000, v10, v11, v16, buf, 0x16u);
LABEL_25:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_storage_provider_for_type";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_storage_provider_for_type";
          v12 = "%{public}s called with null storage";
LABEL_34:
          _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
        }
LABEL_35:

        goto LABEL_36;
      }
      if (!v18)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_storage_provider_for_type";
          v12 = "%{public}s called with null storage, backtrace limit exceeded";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v15 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_storage_provider_for_type";
          v12 = "%{public}s called with null storage, no backtrace";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (!v15)
        goto LABEL_25;
      *(_DWORD *)buf = 136446466;
      v21 = "nw_storage_provider_for_type";
      v22 = 2082;
      v23 = backtrace_string;
      v16 = "%{public}s called with null storage, dumping backtrace:%{public}s";
      goto LABEL_24;
    }
  }
LABEL_36:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_7:

  return v6;
}

BOOL nw_dns_cache_storage_canvas_lookup(void *a1)
{
  _QWORD *v1;
  _BOOL8 v2;
  _BOOL8 v3;
  void *v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = nw_array_create();
    v3 = v2;
    v4 = (void *)v1[1];
    if (v4)
      nw_array_append(v2, v4);
    goto LABEL_4;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_dns_cache_storage_canvas_lookup";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_dns_cache_storage_canvas_lookup";
        v10 = "%{public}s called with null canvas";
LABEL_18:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_dns_cache_storage_canvas_lookup";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null canvas, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v12)
          goto LABEL_19;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_dns_cache_storage_canvas_lookup";
        v10 = "%{public}s called with null canvas, no backtrace";
        goto LABEL_18;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_dns_cache_storage_canvas_lookup";
        v10 = "%{public}s called with null canvas, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:

  }
LABEL_20:
  if (v7)
    free(v7);
  v3 = 0;
LABEL_4:

  return v3;
}

void nw_dns_cache_storage_canvas_store(void *a1, void *a2, void *a3, void *a4)
{
  id *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  void *v16;
  char *backtrace_string;
  _BOOL4 v18;
  char *v19;
  _BOOL4 v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (!v7)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_dns_cache_storage_canvas_store";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v12, &type, &v21))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_dns_cache_storage_canvas_store";
        v15 = "%{public}s called with null canvas";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v18 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_dns_cache_storage_canvas_store";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null canvas, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_34:
        if (!v12)
          goto LABEL_4;
LABEL_35:
        free(v12);
        goto LABEL_4;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_dns_cache_storage_canvas_store";
        v15 = "%{public}s called with null canvas, no backtrace";
        goto LABEL_32;
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_dns_cache_storage_canvas_store";
        v15 = "%{public}s called with null canvas, backtrace limit exceeded";
        goto LABEL_32;
      }
    }
LABEL_33:

    goto LABEL_34;
  }
  if (v8)
  {
    objc_storeStrong(v7 + 1, a2);
    *((_BYTE *)v7 + 16) = 1;
    goto LABEL_4;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_dns_cache_storage_canvas_store";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v12, &type, &v21))
    goto LABEL_34;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_dns_cache_storage_canvas_store";
      v15 = "%{public}s called with null item";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  if (!v21)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_dns_cache_storage_canvas_store";
      v15 = "%{public}s called with null item, backtrace limit exceeded";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = type;
  v20 = os_log_type_enabled(v13, type);
  if (!v19)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_dns_cache_storage_canvas_store";
      v15 = "%{public}s called with null item, no backtrace";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_dns_cache_storage_canvas_store";
    v25 = 2082;
    v26 = v19;
    _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null item, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v12)
    goto LABEL_35;
LABEL_4:

}

void nw_dns_cache_storage_canvas_remove(void *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)*((_QWORD *)v1 + 1);
    *((_QWORD *)v1 + 1) = 0;

    v2[16] = 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_dns_cache_storage_canvas_remove";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_dns_cache_storage_canvas_remove";
        v8 = "%{public}s called with null canvas";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v14 = "nw_dns_cache_storage_canvas_remove";
            v15 = 2082;
            v16 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null canvas, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_dns_cache_storage_canvas_remove";
        v8 = "%{public}s called with null canvas, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_dns_cache_storage_canvas_remove";
        v8 = "%{public}s called with null canvas, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v5)
    free(v5);
LABEL_3:

}

BOOL nw_dns_cache_storage_key(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  int v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  char *v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  char *v13;
  _BOOL8 result;
  void *v15;
  NSObject *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  NSObject *v21;
  void *v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type[8];
  os_log_type_t *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE buf[24];
  void *v30;
  char *v31;
  os_log_type_t *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_dns_cache_storage_key";
    v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v13, type, &v24))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_dns_cache_storage_key";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v19 = type[0];
        v20 = os_log_type_enabled(v16, type[0]);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_dns_cache_storage_key";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v13)
            goto LABEL_28;
          goto LABEL_27;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_dns_cache_storage_key";
          _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v23 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_dns_cache_storage_key";
          _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (v13)
LABEL_27:
      free(v13);
LABEL_28:
    v11 = 0;
    goto LABEL_29;
  }
  v5 = v3;
  v6 = objc_msgSend(v5, "type");

  if (v6 != 2)
    goto LABEL_28;
  v7 = (os_unfair_lock_s *)v5;
  *(_QWORD *)type = 0;
  v26 = type;
  v27 = 0x2020000000;
  v28 = 0;
  v8 = v7 + 45;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = __nw_endpoint_get_description_block_invoke;
  v30 = &unk_1E14ACE40;
  v9 = v7;
  v31 = v9;
  v32 = type;
  os_unfair_lock_lock(v8);
  __nw_endpoint_get_description_block_invoke((uint64_t)buf);
  os_unfair_lock_unlock(v8);
  v10 = (const char *)*((_QWORD *)v26 + 3);

  _Block_object_dispose(type, 8);
  if (v10)
  {
LABEL_4:
    v11 = strdup(v10);
    if (v11)
    {
LABEL_29:

      return (BOOL)v11;
    }
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "strict_strdup";
    v13 = (char *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v13);
    if (result)
      goto LABEL_30;
    goto LABEL_27;
  }
  __nwlog_obj();
  v21 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "strict_strdup";
  v22 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v22);
  if (!result)
  {
    free(v22);
    goto LABEL_4;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_18380F24C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_dns_cache_storage_canvas *nw_dns_cache_storage_canvas_create()
{
  return objc_alloc_init(NWConcrete_nw_dns_cache_storage_canvas);
}

NWConcrete_nw_dns_cache_storage_canvas *nw_dns_cache_storage_canvas_deserialize(unsigned __int8 *a1, unint64_t a2)
{
  NWConcrete_nw_dns_cache_storage_canvas *v4;
  _BOOL8 v5;
  OS_nw_array *endpoints;
  sockaddr *v7;
  int v8;
  unint64_t v9;
  unsigned __int16 *v10;
  nw_endpoint_t v11;
  nw_endpoint_t v12;
  unsigned int v13;
  NWConcrete_nw_dns_cache_storage_canvas *v14;
  uint64_t address;
  sockaddr address_8;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(NWConcrete_nw_dns_cache_storage_canvas);
  v5 = nw_array_create();
  endpoints = v4->endpoints;
  v4->endpoints = (OS_nw_array *)v5;

  if (!a2)
  {
LABEL_12:
    v14 = v4;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = (sockaddr *)(a1 + 1);
    v8 = *a1;
    if (v8 != 30)
      break;
    address_8 = (sockaddr)0;
    v18 = 0;
    address = 7708;
    if (a2 < 0x11)
      goto LABEL_15;
    address_8 = *v7;
    if (a2 - 17 <= 1)
      goto LABEL_15;
    WORD1(address) = *(_WORD *)(a1 + 17);
    v9 = a2 - 19;
    v10 = (unsigned __int16 *)(a1 + 19);
LABEL_10:
    v11 = nw_endpoint_create_address((const sockaddr *)&address);
    v12 = v11;
    if (v9 <= 1)
      goto LABEL_14;
    v13 = *v10;
    a1 = (unsigned __int8 *)(v10 + 1);
    a2 = v9 - 2;
    nw_endpoint_set_priority(v11, v13);
    nw_array_append((uint64_t)v4->endpoints, v12);

    if (!a2)
      goto LABEL_12;
  }
  if (v8 == 2)
  {
    *(_QWORD *)&address_8.sa_len = 0;
    address = 528;
    if (a2 < 5)
      goto LABEL_15;
    HIDWORD(address) = *(_DWORD *)&v7->sa_len;
    if (a2 - 5 <= 1)
      goto LABEL_15;
    WORD1(address) = *(_WORD *)(a1 + 5);
    v9 = a2 - 7;
    v10 = (unsigned __int16 *)(a1 + 7);
    goto LABEL_10;
  }
  v12 = 0;
LABEL_14:

LABEL_15:
  v14 = 0;
LABEL_16:

  return v14;
}

BOOL nw_dns_cache_storage_canvas_serialize(void *a1, size_t *a2)
{
  id v3;
  void *v4;
  id v5;
  size_t v6;
  size_t v7;
  void *v8;
  unsigned __int8 *v9;
  _BOOL8 result;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  NSObject *v17;
  void *v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  _QWORD v26[5];
  char v27;
  os_log_type_t type;
  _BYTE buf[24];
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_serialize";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v12, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_serialize";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null canvas", buf, 0xCu);
        }
        goto LABEL_42;
      }
      if (!v27)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_serialize";
          _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null canvas, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_42;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_serialize";
          _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null canvas, no backtrace", buf, 0xCu);
        }
        goto LABEL_42;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_serialize";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null canvas, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_30:

      free(backtrace_string);
    }
LABEL_43:
    if (v12)
      free(v12);
    v8 = 0;
    goto LABEL_8;
  }
  if (!a2)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_serialize";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v12, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_serialize";
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null size", buf, 0xCu);
        }
LABEL_42:

        goto LABEL_43;
      }
      if (!v27)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_serialize";
          _os_log_impl(&dword_182FBE000, v13, v25, "%{public}s called with null size, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_42;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_serialize";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null size, no backtrace", buf, 0xCu);
        }
        goto LABEL_42;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_serialize";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null size, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_30;
    }
    goto LABEL_43;
  }
  v5 = v3;
  *((_BYTE *)v5 + 16) = 0;
  v6 = nw_dns_cache_storage_canvas_memory_size(v5);
  *a2 = v6;
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = v6;
  v8 = malloc_type_malloc(v6, 0xF2B69DE5uLL);
  if (v8)
  {
LABEL_5:
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v30 = v8;
    v9 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __nw_dns_cache_storage_canvas_serialize_block_invoke;
    v26[3] = &unk_1E14A8DC0;
    v26[4] = buf;
    nw_array_apply(v9, (uint64_t)v26);
    _Block_object_dispose(buf, 8);
LABEL_7:

LABEL_8:
    return (BOOL)v8;
  }
  __nwlog_obj();
  v17 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  *(_QWORD *)&buf[4] = "strict_malloc";
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = v7;
  v18 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v18);
  if (!result)
  {
    free(v18);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

BOOL nw_dns_cache_storage_canvas_dirty(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_BYTE *)v1 + 16) != 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_dns_cache_storage_canvas_dirty";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_dns_cache_storage_canvas_dirty";
        v9 = "%{public}s called with null canvas";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_dns_cache_storage_canvas_dirty";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null canvas, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_dns_cache_storage_canvas_dirty";
        v9 = "%{public}s called with null canvas, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_dns_cache_storage_canvas_dirty";
        v9 = "%{public}s called with null canvas, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_dns_cache_storage_canvas_can_evict()
{
  return 1;
}

uint64_t nw_dns_cache_storage_canvas_memory_size(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[5];
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    v4 = v3[1];
    if (!v4 || *(_QWORD *)(v4 + 24) == *(_QWORD *)(v4 + 16))
    {
      v5 = 0;
    }
    else
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v19 = 0;
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __nw_dns_cache_storage_canvas_memory_size_block_invoke;
      v15[3] = &unk_1E14A8DC0;
      v15[4] = buf;
      nw_array_apply((unsigned __int8 *)v4, (uint64_t)v15);
      v5 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
    }

    goto LABEL_7;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_memory_size";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v8, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_memory_size";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null canvas", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_memory_size";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null canvas, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_memory_size";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null canvas, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_dns_cache_storage_canvas_memory_size";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null canvas, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_7:

  return v5;
}

uint64_t nw_dns_cache_storage_needs_canvas_destroy()
{
  return 0;
}

void nw_dns_cache_storage_canvas_remove_past(uint64_t a1)
{
  void *v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v11 = "nw_dns_cache_storage_canvas_remove_past";
    v2 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v8 = 0;
    if (!__nwlog_fault(v2, &type, &v8))
      goto LABEL_18;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v3 = objc_claimAutoreleasedReturnValue();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_dns_cache_storage_canvas_remove_past";
        v5 = "%{public}s called with null canvas";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else
    {
      if (v8)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v3 = objc_claimAutoreleasedReturnValue();
        v4 = type;
        v7 = os_log_type_enabled(v3, type);
        if (backtrace_string)
        {
          if (v7)
          {
            *(_DWORD *)buf = 136446466;
            v11 = "nw_dns_cache_storage_canvas_remove_past";
            v12 = 2082;
            v13 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null canvas, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v7)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v11 = "nw_dns_cache_storage_canvas_remove_past";
        v5 = "%{public}s called with null canvas, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v3 = objc_claimAutoreleasedReturnValue();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_dns_cache_storage_canvas_remove_past";
        v5 = "%{public}s called with null canvas, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

LABEL_18:
    if (v2)
      free(v2);
  }
}

uint64_t __nw_dns_cache_storage_canvas_memory_size_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  int address_family;
  uint64_t v5;

  address_family = nw_endpoint_get_address_family(a3);
  if (address_family == 2)
  {
    v5 = 9;
    goto LABEL_5;
  }
  if (address_family == 30)
  {
    v5 = 21;
LABEL_5:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v5;
  }
  return 1;
}

uint64_t __nw_dns_cache_storage_canvas_serialize_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  const sockaddr *address;
  __int16 priority;
  int sa_family;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a3;
  address = nw_endpoint_get_address(v4);
  priority = nw_endpoint_get_priority(v4);

  if (address)
  {
    sa_family = address->sa_family;
    if (sa_family == 30)
    {
      v12 = *(_QWORD *)(a1 + 32);
      v8 = a1 + 32;
      **(_BYTE **)(*(_QWORD *)(v12 + 8) + 24) = 30;
      *(sockaddr *)++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) + 24) = *(sockaddr *)&address->sa_data[6];
      v10 = *(_QWORD *)(*(_QWORD *)v8 + 8);
      v11 = *(_QWORD *)(v10 + 24) + 16;
      goto LABEL_6;
    }
    if (sa_family == 2)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v8 = a1 + 32;
      **(_BYTE **)(*(_QWORD *)(v9 + 8) + 24) = 2;
      *(_DWORD *)++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) + 24) = *(_DWORD *)&address->sa_data[2];
      v10 = *(_QWORD *)(*(_QWORD *)v8 + 8);
      v11 = *(_QWORD *)(v10 + 24) + 4;
LABEL_6:
      *(_QWORD *)(v10 + 24) = v11;
      **(_WORD **)(*(_QWORD *)(*(_QWORD *)v8 + 8) + 24) = *(_WORD *)address->sa_data;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) + 24) += 2;
      **(_WORD **)(*(_QWORD *)(*(_QWORD *)v8 + 8) + 24) = priority;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) + 24) += 2;
    }
  }
  return 1;
}

BOOL nw_h3_0rtt_storage_canvas_lookup(void *a1)
{
  id v1;
  void *v2;
  void **v3;
  _BOOL8 v4;
  _BOOL8 v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void **)v1;
    v4 = nw_array_create();
    if (v3[1] && v3[2] && v3[3])
    {
      v5 = nw_array_create();
      nw_array_append(v5, v3[1]);
      nw_array_append(v5, v3[2]);
      nw_array_append(v5, v3[3]);
      nw_array_append(v4, (void *)v5);

    }
    goto LABEL_7;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_h3_0rtt_storage_canvas_lookup";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v8, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_h3_0rtt_storage_canvas_lookup";
        v11 = "%{public}s called with null canvas";
LABEL_21:
        _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_h3_0rtt_storage_canvas_lookup";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null canvas, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (!v13)
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_h3_0rtt_storage_canvas_lookup";
        v11 = "%{public}s called with null canvas, no backtrace";
        goto LABEL_21;
      }
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_h3_0rtt_storage_canvas_lookup";
        v11 = "%{public}s called with null canvas, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
LABEL_22:

  }
LABEL_23:
  if (v8)
    free(v8);
  v4 = 0;
LABEL_7:

  return v4;
}

void nw_h3_0rtt_storage_canvas_store(void *a1, void *a2, void *a3, void *a4)
{
  _QWORD *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  void *v22;
  char *backtrace_string;
  _BOOL4 v24;
  char *v25;
  _BOOL4 v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (!v7)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_h3_0rtt_storage_canvas_store";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v18, &type, &v27))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_h3_0rtt_storage_canvas_store";
        v21 = "%{public}s called with null canvas";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v24 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_h3_0rtt_storage_canvas_store";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null canvas, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_34:
        if (!v18)
          goto LABEL_4;
LABEL_35:
        free(v18);
        goto LABEL_4;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_h3_0rtt_storage_canvas_store";
        v21 = "%{public}s called with null canvas, no backtrace";
        goto LABEL_32;
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_h3_0rtt_storage_canvas_store";
        v21 = "%{public}s called with null canvas, backtrace limit exceeded";
        goto LABEL_32;
      }
    }
LABEL_33:

    goto LABEL_34;
  }
  if (v8)
  {
    nw_array_get_object_at_index((uint64_t)v8, 0);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)v7[1];
    v7[1] = v11;

    nw_array_get_object_at_index((uint64_t)v8, 1uLL);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v7[2];
    v7[2] = v13;

    nw_array_get_object_at_index((uint64_t)v8, 2uLL);
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = (void *)v7[3];
    v7[3] = v15;

    *((_BYTE *)v7 + 32) = 1;
    goto LABEL_4;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_h3_0rtt_storage_canvas_store";
  v18 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (!__nwlog_fault(v18, &type, &v27))
    goto LABEL_34;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_h3_0rtt_storage_canvas_store";
      v21 = "%{public}s called with null item";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  if (!v27)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_h3_0rtt_storage_canvas_store";
      v21 = "%{public}s called with null item, backtrace limit exceeded";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  v25 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v26 = os_log_type_enabled(v19, type);
  if (!v25)
  {
    if (v26)
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_h3_0rtt_storage_canvas_store";
      v21 = "%{public}s called with null item, no backtrace";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  if (v26)
  {
    *(_DWORD *)buf = 136446466;
    v30 = "nw_h3_0rtt_storage_canvas_store";
    v31 = 2082;
    v32 = v25;
    _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null item, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v25);
  if (v18)
    goto LABEL_35;
LABEL_4:

}

void nw_h3_0rtt_storage_canvas_remove(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)v1[1];
    v1[1] = 0;

    v4 = (void *)v2[2];
    v2[2] = 0;

    v5 = (void *)v2[3];
    v2[3] = 0;

    *((_BYTE *)v2 + 32) = 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_h3_0rtt_storage_canvas_remove";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_h3_0rtt_storage_canvas_remove";
        v10 = "%{public}s called with null canvas";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_h3_0rtt_storage_canvas_remove";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null canvas, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v12)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_h3_0rtt_storage_canvas_remove";
        v10 = "%{public}s called with null canvas, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_h3_0rtt_storage_canvas_remove";
        v10 = "%{public}s called with null canvas, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v7)
    free(v7);
LABEL_3:

}

char *nw_h3_0rtt_storage_key(void *a1, void *a2)
{
  const char *v2;
  id v4;
  id v5;
  id v6;
  unsigned int v7;
  char *v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;
  char *v11;
  char *v12;
  void *v14;
  NSObject *v15;
  os_log_type_t v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  int v24;
  char v25;
  os_log_type_t type[8];
  os_log_type_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE buf[24];
  void *v31;
  char *v32;
  os_log_type_t *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  if (!v4)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 136446210;
    *(_DWORD *)buf = 136446210;
    v2 = "nw_h3_0rtt_storage_key";
    *(_QWORD *)&buf[4] = "nw_h3_0rtt_storage_key";
    v12 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v12, type, &v25))
      goto LABEL_28;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_h3_0rtt_storage_key";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null endpoint", buf, 0xCu);
      }
LABEL_27:

LABEL_28:
      if (!v12)
      {
LABEL_30:
        v8 = 0;
        goto LABEL_6;
      }
LABEL_29:
      free(v12);
      goto LABEL_30;
    }
LABEL_16:
    if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v21 = type[0];
      v22 = os_log_type_enabled(v15, type[0]);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_h3_0rtt_storage_key";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v21, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v12)
          goto LABEL_30;
        goto LABEL_29;
      }
      if (v22)
      {
        *(_DWORD *)buf = v24;
        *(_QWORD *)&buf[4] = "nw_h3_0rtt_storage_key";
        _os_log_impl(&dword_182FBE000, v15, v21, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v23 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = v24;
        *(_QWORD *)&buf[4] = v2;
        _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_27;
  }
  v6 = v4;
  v7 = objc_msgSend(v6, "type");

  v8 = 0;
  if (v7 <= 4 && ((1 << v7) & 0x16) != 0)
  {
    v9 = (os_unfair_lock_s *)v6;
    *(_QWORD *)type = 0;
    v27 = type;
    v28 = 0x2020000000;
    v29 = 0;
    v10 = v9 + 45;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_endpoint_get_description_block_invoke;
    v31 = &unk_1E14ACE40;
    v11 = v9;
    v32 = v11;
    v33 = type;
    os_unfair_lock_lock(v10);
    __nw_endpoint_get_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v10);
    v12 = (char *)*((_QWORD *)v27 + 3);

    _Block_object_dispose(type, 8);
    if (!v12)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "strict_strdup";
      v18 = (void *)_os_log_send_and_compose_impl();

      if (__nwlog_abort((uint64_t)v18))
      {
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
      free(v18);
    }
    v8 = strdup(v12);
    if (v8)
      goto LABEL_6;
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "strict_strdup";
    v12 = (char *)_os_log_send_and_compose_impl();

    if (!__nwlog_abort((uint64_t)v12))
      goto LABEL_29;
    goto LABEL_15;
  }
LABEL_6:

  return v8;
}

void sub_183811474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_h3_0rtt_storage_canvas *nw_h3_0rtt_storage_canvas_create()
{
  return objc_alloc_init(NWConcrete_nw_h3_0rtt_storage_canvas);
}

NWConcrete_nw_h3_0rtt_storage_canvas *nw_h3_0rtt_storage_canvas_deserialize(unsigned __int16 *a1, unint64_t a2)
{
  NWConcrete_nw_h3_0rtt_storage_canvas *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  dispatch_data_t v9;
  OS_dispatch_data *settings_data;
  NWConcrete_nw_h3_0rtt_storage_canvas *v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  dispatch_data_t v17;
  OS_dispatch_data *quic_state;
  size_t v19;
  dispatch_data_t v21;
  OS_dispatch_data *tls_state;

  v4 = objc_alloc_init(NWConcrete_nw_h3_0rtt_storage_canvas);
  v5 = a2 - 2;
  if (a2 < 2)
    goto LABEL_7;
  v6 = *a1;
  v7 = v5 - v6;
  if (v5 < v6)
    goto LABEL_7;
  v8 = a1 + 1;
  v9 = dispatch_data_create(a1 + 1, *a1, 0, 0);
  settings_data = v4->settings_data;
  v4->settings_data = (OS_dispatch_data *)v9;

  v11 = 0;
  v12 = v7 - 2;
  if (v7 < 2)
    goto LABEL_8;
  v13 = (char *)v8 + v6;
  v14 = *(unsigned __int16 *)((char *)v8 + v6);
  v15 = v12 - v14;
  if (v12 < v14)
  {
LABEL_7:
    v11 = 0;
    goto LABEL_8;
  }
  v16 = v13 + 2;
  v17 = dispatch_data_create(v13 + 2, v14, 0, 0);
  quic_state = v4->quic_state;
  v4->quic_state = (OS_dispatch_data *)v17;

  v11 = 0;
  if (v15 >= 2)
  {
    v19 = *(unsigned __int16 *)&v16[v14];
    if (v15 - 2 >= v19)
    {
      v21 = dispatch_data_create(&v16[v14 + 2], v19, 0, 0);
      tls_state = v4->tls_state;
      v4->tls_state = (OS_dispatch_data *)v21;

      v11 = v4;
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:

  return v11;
}

BOOL nw_h3_0rtt_storage_canvas_serialize(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  unsigned __int16 size;
  unsigned __int16 v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  _WORD *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  _BOOL8 result;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  void *v25;
  char *backtrace_string;
  _BOOL4 v27;
  const char *v28;
  _BOOL4 v29;
  NSObject *v30;
  void *v31;
  unsigned __int16 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t type[8];
  os_log_type_t *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE applier[24];
  void *v42;
  os_log_type_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
    v21 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v33) = 0;
    if (__nwlog_fault(v21, type, &v33))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
          v24 = "%{public}s called with null canvas";
LABEL_47:
          _os_log_impl(&dword_182FBE000, v22, v23, v24, applier, 0xCu);
        }
LABEL_48:

        goto LABEL_49;
      }
      if (!(_BYTE)v33)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
          v24 = "%{public}s called with null canvas, backtrace limit exceeded";
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type[0];
      v27 = os_log_type_enabled(v22, type[0]);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
          v24 = "%{public}s called with null canvas, no backtrace";
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if (!v27)
        goto LABEL_36;
      *(_DWORD *)applier = 136446466;
      *(_QWORD *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
      *(_WORD *)&applier[12] = 2082;
      *(_QWORD *)&applier[14] = backtrace_string;
      v28 = "%{public}s called with null canvas, dumping backtrace:%{public}s";
      goto LABEL_35;
    }
LABEL_49:
    if (v21)
      free(v21);
    v8 = 0;
    goto LABEL_18;
  }
  if (!a2)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
    v21 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v33) = 0;
    if (__nwlog_fault(v21, type, &v33))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
          v24 = "%{public}s called with null size";
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if (!(_BYTE)v33)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
          v24 = "%{public}s called with null size, backtrace limit exceeded";
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type[0];
      v29 = os_log_type_enabled(v22, type[0]);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
          v24 = "%{public}s called with null size, no backtrace";
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if (!v29)
        goto LABEL_36;
      *(_DWORD *)applier = 136446466;
      *(_QWORD *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
      *(_WORD *)&applier[12] = 2082;
      *(_QWORD *)&applier[14] = backtrace_string;
      v28 = "%{public}s called with null size, dumping backtrace:%{public}s";
LABEL_35:
      _os_log_impl(&dword_182FBE000, v22, v23, v28, applier, 0x16u);
LABEL_36:

      free(backtrace_string);
      goto LABEL_49;
    }
    goto LABEL_49;
  }
  v5 = v3;
  *((_BYTE *)v5 + 32) = 0;
  v6 = *((_QWORD *)v5 + 1);
  if (!v6 || (v7 = *((_QWORD *)v5 + 2)) == 0)
  {
    v8 = 0;
    goto LABEL_17;
  }
  v8 = *((_QWORD *)v5 + 3);
  if (!v8)
  {
LABEL_17:

LABEL_18:
    return (BOOL)v8;
  }
  size = dispatch_data_get_size(v6);
  v10 = dispatch_data_get_size(v7);
  v11 = v10;
  v32 = dispatch_data_get_size(v8);
  *a2 = size + (unint64_t)v10 + v32 + 6;
  v8 = malloc_type_malloc(size + (unint64_t)v10 + v32 + 6, 0xF2B69DE5uLL);
  if (v8)
  {
LABEL_7:
    LOWORD(v8->isa) = size;
    v12 = *((_QWORD *)v5 + 1);
    *(_QWORD *)type = 0;
    v38 = type;
    v39 = 0x2000000000;
    v40 = 0;
    v33 = 0;
    v34 = &v33;
    v35 = 0x2000000000;
    v36 = (uint64_t)&v8->isa + 2;
    if (v12)
    {
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
      v42 = &unk_1E14A3448;
      v44 = &v33;
      v45 = size;
      v43 = type;
      dispatch_data_apply(v12, applier);
      v13 = *((_QWORD *)v38 + 3);
    }
    else
    {
      v13 = 0;
    }
    _Block_object_dispose(&v33, 8);
    _Block_object_dispose(type, 8);
    v14 = (unsigned __int16 *)((char *)&v8->isa + v13 + 2);
    *v14 = v10;
    v15 = v14 + 1;
    v16 = *((_QWORD *)v5 + 2);
    *(_QWORD *)type = 0;
    v38 = type;
    v39 = 0x2000000000;
    v40 = 0;
    v33 = 0;
    v34 = &v33;
    v35 = 0x2000000000;
    v36 = (uint64_t)v15;
    if (v16)
    {
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
      v42 = &unk_1E14A3448;
      v44 = &v33;
      v45 = v11;
      v43 = type;
      dispatch_data_apply(v16, applier);
      v17 = *((_QWORD *)v38 + 3);
    }
    else
    {
      v17 = 0;
    }
    _Block_object_dispose(&v33, 8);
    _Block_object_dispose(type, 8);
    *(_WORD *)((char *)v15 + v17) = v32;
    v18 = *((_QWORD *)v5 + 3);
    *(_QWORD *)type = 0;
    v38 = type;
    v39 = 0x2000000000;
    v40 = 0;
    v33 = 0;
    v34 = &v33;
    v35 = 0x2000000000;
    v36 = (uint64_t)v15 + v17 + 2;
    if (v18)
    {
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
      v42 = &unk_1E14A3448;
      v44 = &v33;
      v45 = v32;
      v43 = type;
      dispatch_data_apply(v18, applier);
    }
    _Block_object_dispose(&v33, 8);
    _Block_object_dispose(type, 8);
    goto LABEL_17;
  }
  __nwlog_obj();
  v30 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446466;
  *(_QWORD *)&applier[4] = "strict_malloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = size + (unint64_t)v10 + v32 + 6;
  v31 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v31);
  if (!result)
  {
    free(v31);
    v11 = v10;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

BOOL nw_h3_0rtt_storage_canvas_dirty(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_BYTE *)v1 + 32) != 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_h3_0rtt_storage_canvas_dirty";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_h3_0rtt_storage_canvas_dirty";
        v9 = "%{public}s called with null canvas";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_h3_0rtt_storage_canvas_dirty";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null canvas, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_h3_0rtt_storage_canvas_dirty";
        v9 = "%{public}s called with null canvas, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_h3_0rtt_storage_canvas_dirty";
        v9 = "%{public}s called with null canvas, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_h3_0rtt_storage_canvas_can_evict()
{
  return 1;
}

size_t nw_h3_0rtt_storage_canvas_memory_size(void *a1)
{
  id v1;
  _QWORD *v2;
  NSObject *v3;
  size_t size;
  NSObject *v5;
  NSObject *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 1);
    if (v3)
    {
      size = dispatch_data_get_size(v3);
      v5 = v2[2];
      if (!v5)
        goto LABEL_5;
    }
    else
    {
      size = 0;
      v5 = v2[2];
      if (!v5)
      {
LABEL_5:
        v6 = v2[3];
        if (v6)
          size += dispatch_data_get_size(v6);
        goto LABEL_7;
      }
    }
    size += dispatch_data_get_size(v5);
    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_h3_0rtt_storage_canvas_memory_size";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v9, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_h3_0rtt_storage_canvas_memory_size";
        v12 = "%{public}s called with null canvas";
LABEL_23:
        _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_h3_0rtt_storage_canvas_memory_size";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null canvas, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (!v14)
          goto LABEL_24;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_h3_0rtt_storage_canvas_memory_size";
        v12 = "%{public}s called with null canvas, no backtrace";
        goto LABEL_23;
      }
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_h3_0rtt_storage_canvas_memory_size";
        v12 = "%{public}s called with null canvas, backtrace limit exceeded";
        goto LABEL_23;
      }
    }
LABEL_24:

  }
LABEL_25:
  if (v9)
    free(v9);
  size = 0;
LABEL_7:

  return size;
}

uint64_t nw_h3_0rtt_storage_needs_canvas_destroy()
{
  return 0;
}

void nw_h3_0rtt_storage_canvas_remove_past(uint64_t a1)
{
  void *v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v11 = "nw_h3_0rtt_storage_canvas_remove_past";
    v2 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v8 = 0;
    if (!__nwlog_fault(v2, &type, &v8))
      goto LABEL_18;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v3 = objc_claimAutoreleasedReturnValue();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_h3_0rtt_storage_canvas_remove_past";
        v5 = "%{public}s called with null canvas";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else
    {
      if (v8)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v3 = objc_claimAutoreleasedReturnValue();
        v4 = type;
        v7 = os_log_type_enabled(v3, type);
        if (backtrace_string)
        {
          if (v7)
          {
            *(_DWORD *)buf = 136446466;
            v11 = "nw_h3_0rtt_storage_canvas_remove_past";
            v12 = 2082;
            v13 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null canvas, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v7)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v11 = "nw_h3_0rtt_storage_canvas_remove_past";
        v5 = "%{public}s called with null canvas, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v3 = objc_claimAutoreleasedReturnValue();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_h3_0rtt_storage_canvas_remove_past";
        v5 = "%{public}s called with null canvas, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

LABEL_18:
    if (v2)
      free(v2);
  }
}

id nw_storage_copy_shared()
{
  if (nw_storage_copy_shared_token[0] != -1)
    dispatch_once(nw_storage_copy_shared_token, &__block_literal_global_44834);
  return (id)nw_storage_copy_shared_storage;
}

void __nw_storage_copy_shared_block_invoke()
{
  char *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __CFBundle *MainBundle;
  const __CFString *Identifier;
  const char *CStringPtr;
  const char *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  NWConcrete_nw_storage *v27;
  char *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  char __s1[1023];
  char v37;
  int v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  bzero(__s1, 0x400uLL);
  v0 = getenv("HOME");
  if (!v0)
  {
LABEL_50:
    v27 = objc_alloc_init(NWConcrete_nw_storage);
LABEL_51:
    v29 = (void *)nw_storage_copy_shared_storage;
    nw_storage_copy_shared_storage = (uint64_t)v27;

    return;
  }
  v1 = 0;
  while (1)
  {
    v2 = v0[v1];
    __s1[v1] = v2;
    if (!v2)
      break;
    if (++v1 == 1023)
    {
      v37 = 0;
      break;
    }
  }
  v3 = 0;
  v4 = 1024;
  while (1)
  {
    v5 = &__s1[v3];
    if (!__s1[v3])
      break;
    ++v3;
    if (!--v4)
      goto LABEL_17;
  }
  if (v4 < 2)
  {
LABEL_16:
    *v5 = 0;
  }
  else
  {
    v6 = v4 - 2;
    v7 = 1023 - v3;
    v8 = 1022 - v3;
    if (v8 >= 0x16)
      v8 = 22;
    memcpy(v5, "/Library/HTTPStorages/", v8 + 1);
    v5 = &v37;
    while (v6 <= 0x15)
    {
      if (!--v7)
        goto LABEL_16;
    }
  }
LABEL_17:
  mkdir(__s1, 0x1C0u);
  MainBundle = CFBundleGetMainBundle();
  if (MainBundle
    && (Identifier = CFBundleGetIdentifier(MainBundle)) != 0
    && (CStringPtr = CFStringGetCStringPtr(Identifier, 0x600u)) != 0)
  {
    v12 = CStringPtr;
  }
  else
  {
    v12 = *(const char **)_CFGetProgname();
    if (!v12)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
      v38 = 136446210;
      v39 = "_strict_strlcat";
      v31 = (void *)_os_log_send_and_compose_impl();

      if (__nwlog_abort((uint64_t)v31))
        goto LABEL_59;
      free(v31);
      v12 = 0;
      v13 = 1;
      goto LABEL_23;
    }
  }
  v13 = 0;
LABEL_23:
  v14 = 0;
  v15 = 1024;
  do
  {
    if (!__s1[v14])
    {
      if (v13)
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
        v38 = 136446210;
        v39 = "_strict_strlcpy";
        v35 = (void *)_os_log_send_and_compose_impl();

        if (__nwlog_abort((uint64_t)v35))
          goto LABEL_59;
        free(v35);
        if (v15 >= 2)
        {
LABEL_31:
          v18 = 0;
          while (1)
          {
            v19 = v12[v18];
            __s1[v18 + v14] = v19;
            if (!v19)
              goto LABEL_36;
            v20 = v14 + v18++;
            if (v20 == 1022)
            {
              v14 = 1023;
              break;
            }
          }
        }
      }
      else if (v15 >= 2)
      {
        goto LABEL_31;
      }
      __s1[v14] = 0;
      goto LABEL_36;
    }
    ++v14;
    --v15;
  }
  while (v15);
  if (v13)
  {
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    v38 = 136446210;
    v39 = "_strict_strlcpy";
    v17 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v17))
      goto LABEL_59;
    free(v17);
  }
LABEL_36:
  mkdir(__s1, 0x1C0u);
  v21 = 0;
  v22 = 1024;
  while (1)
  {
    v23 = &__s1[v21];
    if (!__s1[v21])
      break;
    ++v21;
    if (!--v22)
      goto LABEL_47;
  }
  if (v22 < 2)
  {
LABEL_46:
    *v23 = 0;
  }
  else
  {
    v24 = v22 - 2;
    v25 = 1023 - v21;
    v26 = 1022 - v21;
    if (v26 >= 0x17)
      v26 = 23;
    memcpy(v23, "/network_storage.sqlite", v26 + 1);
    v23 = &v37;
    while (v24 <= 0x16)
    {
      if (!--v25)
        goto LABEL_46;
    }
  }
LABEL_47:
  if (!__s1[0])
    goto LABEL_50;
  v27 = objc_alloc_init(NWConcrete_nw_storage);
  v28 = strdup(__s1);
  if (v28)
  {
LABEL_49:
    v27->path = v28;
    goto LABEL_51;
  }
  __nwlog_obj();
  v32 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
  v38 = 136446210;
  v39 = "strict_strdup";
  v33 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v33))
  {
    free(v33);
    goto LABEL_49;
  }
LABEL_59:
  __break(1u);
}

void nw_storage_lookup_items(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  NSObject *v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  char *backtrace_string;
  _BOOL4 v25;
  char *v26;
  _BOOL4 v27;
  const char *v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _QWORD block[4];
  _QWORD *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  char v39;
  os_log_type_t v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = v12;
  if (!v9)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_storage_lookup_items";
    v16 = (char *)_os_log_send_and_compose_impl();

    v40 = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v16, &v40, &v39))
      goto LABEL_74;
    if (v40 != OS_LOG_TYPE_FAULT)
    {
      if (v39)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = v40;
        v25 = os_log_type_enabled(v17, v40);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v42 = "nw_storage_lookup_items";
            v43 = 2082;
            v44 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null storage, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
LABEL_74:
          if (!v16)
            goto LABEL_7;
LABEL_75:
          free(v16);
          goto LABEL_7;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v42 = "nw_storage_lookup_items";
          v19 = "%{public}s called with null storage, no backtrace";
          goto LABEL_72;
        }
      }
      else
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = v40;
        if (os_log_type_enabled(v17, v40))
        {
          *(_DWORD *)buf = 136446210;
          v42 = "nw_storage_lookup_items";
          v19 = "%{public}s called with null storage, backtrace limit exceeded";
          goto LABEL_72;
        }
      }
      goto LABEL_73;
    }
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = v40;
    if (!os_log_type_enabled(v17, v40))
      goto LABEL_73;
    *(_DWORD *)buf = 136446210;
    v42 = "nw_storage_lookup_items";
    v19 = "%{public}s called with null storage";
    goto LABEL_72;
  }
  if (!a2)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_storage_lookup_items";
    v16 = (char *)_os_log_send_and_compose_impl();

    v40 = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v16, &v40, &v39))
      goto LABEL_74;
    if (v40 != OS_LOG_TYPE_FAULT)
    {
      if (!v39)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = v40;
        if (os_log_type_enabled(v17, v40))
        {
          *(_DWORD *)buf = 136446210;
          v42 = "nw_storage_lookup_items";
          v19 = "%{public}s called with null type, backtrace limit exceeded";
          goto LABEL_72;
        }
        goto LABEL_73;
      }
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = v40;
      v27 = os_log_type_enabled(v17, v40);
      if (!v26)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v42 = "nw_storage_lookup_items";
          v19 = "%{public}s called with null type, no backtrace";
          goto LABEL_72;
        }
        goto LABEL_73;
      }
      if (!v27)
        goto LABEL_50;
      *(_DWORD *)buf = 136446466;
      v42 = "nw_storage_lookup_items";
      v43 = 2082;
      v44 = v26;
      v28 = "%{public}s called with null type, dumping backtrace:%{public}s";
      goto LABEL_49;
    }
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = v40;
    if (!os_log_type_enabled(v17, v40))
      goto LABEL_73;
    *(_DWORD *)buf = 136446210;
    v42 = "nw_storage_lookup_items";
    v19 = "%{public}s called with null type";
LABEL_72:
    _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
    goto LABEL_73;
  }
  if (!v10)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_storage_lookup_items";
    v16 = (char *)_os_log_send_and_compose_impl();

    v40 = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v16, &v40, &v39))
      goto LABEL_74;
    if (v40 != OS_LOG_TYPE_FAULT)
    {
      if (!v39)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = v40;
        if (os_log_type_enabled(v17, v40))
        {
          *(_DWORD *)buf = 136446210;
          v42 = "nw_storage_lookup_items";
          v19 = "%{public}s called with null endpoint, backtrace limit exceeded";
          goto LABEL_72;
        }
        goto LABEL_73;
      }
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = v40;
      v29 = os_log_type_enabled(v17, v40);
      if (!v26)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v42 = "nw_storage_lookup_items";
          v19 = "%{public}s called with null endpoint, no backtrace";
          goto LABEL_72;
        }
        goto LABEL_73;
      }
      if (!v29)
        goto LABEL_50;
      *(_DWORD *)buf = 136446466;
      v42 = "nw_storage_lookup_items";
      v43 = 2082;
      v44 = v26;
      v28 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
      goto LABEL_49;
    }
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = v40;
    if (!os_log_type_enabled(v17, v40))
      goto LABEL_73;
    *(_DWORD *)buf = 136446210;
    v42 = "nw_storage_lookup_items";
    v19 = "%{public}s called with null endpoint";
    goto LABEL_72;
  }
  if (!v11)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_storage_lookup_items";
    v16 = (char *)_os_log_send_and_compose_impl();

    v40 = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v16, &v40, &v39))
      goto LABEL_74;
    if (v40 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = v40;
      if (!os_log_type_enabled(v17, v40))
        goto LABEL_73;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_storage_lookup_items";
      v19 = "%{public}s called with null context";
      goto LABEL_72;
    }
    if (!v39)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = v40;
      if (os_log_type_enabled(v17, v40))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_storage_lookup_items";
        v19 = "%{public}s called with null context, backtrace limit exceeded";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    v26 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = v40;
    v30 = os_log_type_enabled(v17, v40);
    if (!v26)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_storage_lookup_items";
        v19 = "%{public}s called with null context, no backtrace";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    if (!v30)
      goto LABEL_50;
    *(_DWORD *)buf = 136446466;
    v42 = "nw_storage_lookup_items";
    v43 = 2082;
    v44 = v26;
    v28 = "%{public}s called with null context, dumping backtrace:%{public}s";
LABEL_49:
    _os_log_impl(&dword_182FBE000, v17, v18, v28, buf, 0x16u);
    goto LABEL_50;
  }
  if (!v12)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_storage_lookup_items";
    v16 = (char *)_os_log_send_and_compose_impl();

    v40 = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v16, &v40, &v39))
      goto LABEL_74;
    if (v40 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = v40;
      if (os_log_type_enabled(v17, v40))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_storage_lookup_items";
        v19 = "%{public}s called with null completion";
        goto LABEL_72;
      }
LABEL_73:

      goto LABEL_74;
    }
    if (!v39)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = v40;
      if (os_log_type_enabled(v17, v40))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_storage_lookup_items";
        v19 = "%{public}s called with null completion, backtrace limit exceeded";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    v26 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = v40;
    v31 = os_log_type_enabled(v17, v40);
    if (!v26)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_storage_lookup_items";
        v19 = "%{public}s called with null completion, no backtrace";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_storage_lookup_items";
      v43 = 2082;
      v44 = v26;
      v28 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_49;
    }
LABEL_50:

    free(v26);
    if (!v16)
      goto LABEL_7;
    goto LABEL_75;
  }
  v14 = v9[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __nw_storage_lookup_items_block_invoke;
  block[3] = &unk_1E14A2BA8;
  v33 = v9;
  v38 = a2;
  v34 = v10;
  v35 = 0;
  v36 = v11;
  v37 = v13;
  dispatch_async(v14, block);

LABEL_7:
}

void __nw_storage_lookup_items_block_invoke(uint64_t a1)
{
  char *v2;
  const char *v3;
  char *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v2 = nw_storage_provider_for_type(*(void **)(a1 + 32), *(_QWORD *)(a1 + 72));
  v3 = (const char *)(*((uint64_t (**)(_QWORD, _QWORD))v2 + 3))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if (v3)
  {
    v4 = (char *)v3;
    nw_storage_fault_in_canvas(*(void **)(a1 + 32), v3, *(const char **)(a1 + 72), (uint64_t)v2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (*(uint64_t (**)(void *, _QWORD, _QWORD))v2)(v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    if ((*((unsigned int (**)(void *))v2 + 7))(v5))
      nw_storage_enqueue_flush_and_free_key(*(void **)(a1 + 32), (uint64_t)v4, *(_QWORD *)(a1 + 72));
    else
      free(v4);

  }
  else
  {
    v6 = nw_array_create();
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __nw_storage_lookup_items_block_invoke_2;
  v10[3] = &unk_1E14ACE18;
  v7 = *(void **)(a1 + 56);
  v8 = *(id *)(a1 + 64);
  v11 = (id)v6;
  v12 = v8;
  v9 = (id)v6;
  nw_queue_context_async(v7, v10);

}

id nw_storage_fault_in_canvas(void *a1, const char *a2, const char *a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  char *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt **v13;
  id v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  id v19;
  int v20;
  sqlite3_stmt *v21;
  const unsigned __int8 *v22;
  uint64_t (*v23)(const void *, _QWORD);
  const void *v24;
  int v25;
  void *v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  const char *v30;
  _BOOL4 v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  void *v35;
  void *v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  const char *v41;
  void *v42;
  void *v43;
  char *backtrace_string;
  _BOOL4 v45;
  const char *v46;
  _BOOL4 v47;
  _BOOL4 v48;
  char v49;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  char *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = v7;
  if (!v7)
  {
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_storage_fault_in_canvas";
    v38 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v38, &type, &v49))
      goto LABEL_95;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (!os_log_type_enabled(v39, type))
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v52 = "nw_storage_fault_in_canvas";
      v41 = "%{public}s called with null storage";
LABEL_93:
      _os_log_impl(&dword_182FBE000, v39, v40, v41, buf, 0xCu);
      goto LABEL_94;
    }
    if (!v49)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_storage_fault_in_canvas";
        v41 = "%{public}s called with null storage, backtrace limit exceeded";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v39 = objc_claimAutoreleasedReturnValue();
    v40 = type;
    v45 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_storage_fault_in_canvas";
        v41 = "%{public}s called with null storage, no backtrace";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    if (!v45)
      goto LABEL_80;
    *(_DWORD *)buf = 136446466;
    v52 = "nw_storage_fault_in_canvas";
    v53 = 2082;
    v54 = backtrace_string;
    v46 = "%{public}s called with null storage, dumping backtrace:%{public}s";
LABEL_79:
    _os_log_impl(&dword_182FBE000, v39, v40, v46, buf, 0x16u);
LABEL_80:

    free(backtrace_string);
    goto LABEL_95;
  }
  if (!a3)
  {
    __nwlog_obj();
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_storage_fault_in_canvas";
    v38 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v38, &type, &v49))
      goto LABEL_95;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (!os_log_type_enabled(v39, type))
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v52 = "nw_storage_fault_in_canvas";
      v41 = "%{public}s called with null type";
      goto LABEL_93;
    }
    if (!v49)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_storage_fault_in_canvas";
        v41 = "%{public}s called with null type, backtrace limit exceeded";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v39 = objc_claimAutoreleasedReturnValue();
    v40 = type;
    v47 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_storage_fault_in_canvas";
        v41 = "%{public}s called with null type, no backtrace";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    if (!v47)
      goto LABEL_80;
    *(_DWORD *)buf = 136446466;
    v52 = "nw_storage_fault_in_canvas";
    v53 = 2082;
    v54 = backtrace_string;
    v46 = "%{public}s called with null type, dumping backtrace:%{public}s";
    goto LABEL_79;
  }
  if (a4)
  {
    v9 = nw_dictionary_copy_value(v7[8], (uint64_t)a2);
    if (v9)
    {
LABEL_48:
      v35 = nw_dictionary_copy_value((uint64_t)v9, (uint64_t)a3);
      if (!v35)
      {
        v35 = (void *)(*(uint64_t (**)(_QWORD, uint64_t))(a4 + 32))(0, v34);
        nw_dictionary_set_value((uint64_t)v9, a3, v35);
      }

      goto LABEL_51;
    }
    if ((nw_storage_open_db(v8) & 1) == 0)
    {
      v10 = (void *)v8[1];
      if (v10)
      {
        free(v10);
        v8[1] = 0;
      }
      nw_storage_open_db(v8);
    }
    v11 = v8;
    v13 = (sqlite3_stmt **)(v11 + 32);
    v12 = (sqlite3_stmt *)*((_QWORD *)v11 + 4);
    if (!v12)
    {
      if (sqlite3_prepare_v2(*((sqlite3 **)v11 + 3), "SELECT type, canvas FROM network_storage WHERE key = ?", -1, v13, 0))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v52 = "nw_storage_load_canvases_for_key";
        v15 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v49 = 0;
        if (__nwlog_fault(v15, &type, &v49))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v16 = (id)gLogObj;
            v17 = type;
            if (os_log_type_enabled(v16, type))
            {
              *(_DWORD *)buf = 136446210;
              v52 = "nw_storage_load_canvases_for_key";
              v18 = "%{public}s Failed to prepare statement";
              goto LABEL_41;
            }
LABEL_43:

            goto LABEL_44;
          }
          if (!v49)
          {
            __nwlog_obj();
            v16 = objc_claimAutoreleasedReturnValue();
            v17 = type;
            if (os_log_type_enabled(v16, type))
            {
              *(_DWORD *)buf = 136446210;
              v52 = "nw_storage_load_canvases_for_key";
              v18 = "%{public}s Failed to prepare statement, backtrace limit exceeded";
              goto LABEL_41;
            }
            goto LABEL_43;
          }
          v27 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v16 = (id)gLogObj;
          v28 = type;
          v31 = os_log_type_enabled(v16, type);
          if (v27)
          {
            if (v31)
            {
              *(_DWORD *)buf = 136446466;
              v52 = "nw_storage_load_canvases_for_key";
              v53 = 2082;
              v54 = v27;
              v30 = "%{public}s Failed to prepare statement, dumping backtrace:%{public}s";
              goto LABEL_33;
            }
LABEL_34:

            free(v27);
            goto LABEL_44;
          }
          if (!v31)
            goto LABEL_43;
          *(_DWORD *)buf = 136446210;
          v52 = "nw_storage_load_canvases_for_key";
          v18 = "%{public}s Failed to prepare statement, no backtrace";
LABEL_54:
          v32 = v16;
          v33 = v28;
          goto LABEL_42;
        }
LABEL_44:
        if (v15)
          free(v15);
        v9 = 0;
        goto LABEL_47;
      }
      v12 = *v13;
    }
    if (!sqlite3_bind_text(v12, 1, a2, -1, 0))
    {
      v9 = nw_dictionary_create();
      while (1)
      {
        v20 = sqlite3_step(*v13);
        v21 = *v13;
        if (v20 != 100)
          break;
        v22 = sqlite3_column_text(v21, 0);
        v23 = *(uint64_t (**)(const void *, _QWORD))(a4 + 40);
        v24 = sqlite3_column_blob(*v13, 1);
        v25 = sqlite3_column_bytes(*v13, 1);
        v26 = (void *)v23(v24, v25);
        nw_dictionary_set_value((uint64_t)v9, (const char *)v22, v26);

      }
      sqlite3_reset(v21);
LABEL_47:

      nw_dictionary_set_value(v8[8], a2, v9);
      goto LABEL_48;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v52 = "nw_storage_load_canvases_for_key";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (__nwlog_fault(v15, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_storage_load_canvases_for_key";
          v18 = "%{public}s Failed to bind variable";
LABEL_41:
          v32 = v16;
          v33 = v17;
LABEL_42:
          _os_log_impl(&dword_182FBE000, v32, v33, v18, buf, 0xCu);
          goto LABEL_43;
        }
        goto LABEL_43;
      }
      if (!v49)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_storage_load_canvases_for_key";
          v18 = "%{public}s Failed to bind variable, backtrace limit exceeded";
          goto LABEL_41;
        }
        goto LABEL_43;
      }
      v27 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      v28 = type;
      v29 = os_log_type_enabled(v16, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v52 = "nw_storage_load_canvases_for_key";
          v53 = 2082;
          v54 = v27;
          v30 = "%{public}s Failed to bind variable, dumping backtrace:%{public}s";
LABEL_33:
          _os_log_impl(&dword_182FBE000, v16, v28, v30, buf, 0x16u);
          goto LABEL_34;
        }
        goto LABEL_34;
      }
      if (!v29)
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v52 = "nw_storage_load_canvases_for_key";
      v18 = "%{public}s Failed to bind variable, no backtrace";
      goto LABEL_54;
    }
    goto LABEL_44;
  }
  __nwlog_obj();
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v52 = "nw_storage_fault_in_canvas";
  v38 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v49 = 0;
  if (__nwlog_fault(v38, &type, &v49))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_storage_fault_in_canvas";
        v41 = "%{public}s called with null provider";
        goto LABEL_93;
      }
LABEL_94:

      goto LABEL_95;
    }
    if (!v49)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_storage_fault_in_canvas";
        v41 = "%{public}s called with null provider, backtrace limit exceeded";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v39 = objc_claimAutoreleasedReturnValue();
    v40 = type;
    v48 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_storage_fault_in_canvas";
        v41 = "%{public}s called with null provider, no backtrace";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    if (!v48)
      goto LABEL_80;
    *(_DWORD *)buf = 136446466;
    v52 = "nw_storage_fault_in_canvas";
    v53 = 2082;
    v54 = backtrace_string;
    v46 = "%{public}s called with null provider, dumping backtrace:%{public}s";
    goto LABEL_79;
  }
LABEL_95:
  if (v38)
    free(v38);
  v35 = 0;
LABEL_51:

  return v35;
}

void nw_storage_enqueue_flush_and_free_key(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  NWConcrete_nw_storage_flush_item *v6;
  id v7;
  void *v8;
  dispatch_time_t v9;
  NSObject *v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t receiver;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *backtrace_string;
  _BOOL4 v23;
  char *v24;
  _BOOL4 v25;
  char *v26;
  _BOOL4 v27;
  _QWORD block[4];
  id v29;
  char v30;
  os_log_type_t type;
  objc_super v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_storage_enqueue_flush_and_free_key";
    v12 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v32.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v12, &v32, &type))
      goto LABEL_50;
    if (LOBYTE(v32.receiver) == 17)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v32.receiver;
      if (os_log_type_enabled(v13, (os_log_type_t)v32.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_storage_enqueue_flush_and_free_key";
        v15 = "%{public}s called with null storage";
LABEL_48:
        _os_log_impl(&dword_182FBE000, v13, receiver, v15, buf, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v32.receiver;
      v23 = os_log_type_enabled(v13, (os_log_type_t)v32.receiver);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_storage_enqueue_flush_and_free_key";
          v35 = 2082;
          v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, receiver, "%{public}s called with null storage, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_50:
        if (!v12)
          goto LABEL_9;
LABEL_51:
        free(v12);
        goto LABEL_9;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_storage_enqueue_flush_and_free_key";
        v15 = "%{public}s called with null storage, no backtrace";
        goto LABEL_48;
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v32.receiver;
      if (os_log_type_enabled(v13, (os_log_type_t)v32.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_storage_enqueue_flush_and_free_key";
        v15 = "%{public}s called with null storage, backtrace limit exceeded";
        goto LABEL_48;
      }
    }
LABEL_49:

    goto LABEL_50;
  }
  if (a3)
  {
    v6 = [NWConcrete_nw_storage_flush_item alloc];
    if (!v6)
    {
LABEL_58:
      v8 = 0;
      goto LABEL_6;
    }
    v32.receiver = v6;
    v32.super_class = (Class)NWConcrete_nw_storage_flush_item;
    v7 = objc_msgSendSuper2(&v32, sel_init);
    if (v7)
    {
      v8 = v7;
      *((_QWORD *)v7 + 1) = a3;
      *((_QWORD *)v7 + 2) = a2;
LABEL_6:
      nw_array_append(*((_QWORD *)v5 + 9), v8);
      if ((*((_BYTE *)v5 + 96) & 1) == 0)
      {
        *((_BYTE *)v5 + 96) |= 1u;
        v9 = dispatch_walltime(0, 5000000000);
        v10 = *((_QWORD *)v5 + 2);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __nw_storage_enqueue_flush_and_free_key_block_invoke;
        block[3] = &unk_1E14ACFD0;
        v29 = v5;
        dispatch_after(v9, v10, block);

      }
      goto LABEL_9;
    }
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "-[NWConcrete_nw_storage_flush_item initWithType:key:]";
    v18 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault((const char *)v18, &type, &v30))
    {
LABEL_56:
      if (v18)
        free(v18);
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "-[NWConcrete_nw_storage_flush_item initWithType:key:]";
        v21 = "%{public}s [super init] failed";
LABEL_54:
        _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
      }
    }
    else
    {
      if (v30)
      {
        v26 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        v27 = os_log_type_enabled(v19, type);
        if (v26)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            v34 = "-[NWConcrete_nw_storage_flush_item initWithType:key:]";
            v35 = 2082;
            v36 = v26;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v26);
          goto LABEL_56;
        }
        if (!v27)
          goto LABEL_55;
        *(_DWORD *)buf = 136446210;
        v34 = "-[NWConcrete_nw_storage_flush_item initWithType:key:]";
        v21 = "%{public}s [super init] failed, no backtrace";
        goto LABEL_54;
      }
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "-[NWConcrete_nw_storage_flush_item initWithType:key:]";
        v21 = "%{public}s [super init] failed, backtrace limit exceeded";
        goto LABEL_54;
      }
    }
LABEL_55:

    goto LABEL_56;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v34 = "nw_storage_enqueue_flush_and_free_key";
  v12 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v32.receiver) = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v12, &v32, &type))
    goto LABEL_50;
  if (LOBYTE(v32.receiver) == 17)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    receiver = (os_log_type_t)v32.receiver;
    if (os_log_type_enabled(v13, (os_log_type_t)v32.receiver))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_storage_enqueue_flush_and_free_key";
      v15 = "%{public}s called with null type";
      goto LABEL_48;
    }
    goto LABEL_49;
  }
  if (type == OS_LOG_TYPE_DEFAULT)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    receiver = (os_log_type_t)v32.receiver;
    if (os_log_type_enabled(v13, (os_log_type_t)v32.receiver))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_storage_enqueue_flush_and_free_key";
      v15 = "%{public}s called with null type, backtrace limit exceeded";
      goto LABEL_48;
    }
    goto LABEL_49;
  }
  v24 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  receiver = (os_log_type_t)v32.receiver;
  v25 = os_log_type_enabled(v13, (os_log_type_t)v32.receiver);
  if (!v24)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_storage_enqueue_flush_and_free_key";
      v15 = "%{public}s called with null type, no backtrace";
      goto LABEL_48;
    }
    goto LABEL_49;
  }
  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    v34 = "nw_storage_enqueue_flush_and_free_key";
    v35 = 2082;
    v36 = v24;
    _os_log_impl(&dword_182FBE000, v13, receiver, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v24);
  if (v12)
    goto LABEL_51;
LABEL_9:

}

uint64_t __nw_storage_lookup_items_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __nw_storage_enqueue_flush_and_free_key_block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 96) &= ~1u;
  nw_storage_flush(*(void **)(a1 + 32));
}

uint64_t nw_storage_open_db(void *a1)
{
  char *v1;
  void *v2;
  sqlite3 **v3;
  uint64_t v4;
  const char *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  id v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  void *v15;
  char *v16;
  _BOOL4 v17;
  NSObject *v18;
  os_log_type_t v19;
  char *v20;
  _BOOL4 v21;
  char v23;
  os_log_type_t type;
  char *errmsg;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  v3 = (sqlite3 **)(v1 + 24);
  if (*((_QWORD *)v1 + 3))
    goto LABEL_2;
  if (*((_QWORD *)v1 + 1))
    v5 = (const char *)*((_QWORD *)v1 + 1);
  else
    v5 = ":memory:";
  if (sqlite3_open_v2(v5, v3, 3145734, 0))
    goto LABEL_56;
  errmsg = 0;
  sqlite3_busy_timeout(*v3, 1000);
  if (sqlite3_exec(*v3, "PRAGMA journal_mode=WAL;", 0, 0, &errmsg))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_storage_open_db";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v7, &type, &v23))
      goto LABEL_54;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_storage_open_db";
        v10 = "%{public}s Failed to enable WAL mode";
LABEL_51:
        v18 = v8;
        v19 = v9;
LABEL_52:
        _os_log_impl(&dword_182FBE000, v18, v19, v10, buf, 0xCu);
        goto LABEL_53;
      }
    }
    else
    {
      if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v13 = type;
        v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_storage_open_db";
            v28 = 2082;
            v29 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s Failed to enable WAL mode, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v7)
            goto LABEL_56;
          goto LABEL_55;
        }
        if (!v14)
          goto LABEL_53;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_storage_open_db";
        v10 = "%{public}s Failed to enable WAL mode, no backtrace";
        v18 = v8;
        v19 = v13;
        goto LABEL_52;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_storage_open_db";
        v10 = "%{public}s Failed to enable WAL mode, backtrace limit exceeded";
        goto LABEL_51;
      }
    }
    goto LABEL_53;
  }
  if (sqlite3_exec(*v3, "PRAGMA auto_vacuum = 2;", 0, 0, &errmsg))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_storage_open_db";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v7, &type, &v23))
      goto LABEL_54;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_storage_open_db";
        v10 = "%{public}s Failed to set vacuum policy";
        goto LABEL_51;
      }
    }
    else
    {
      if (v23)
      {
        v16 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v17 = os_log_type_enabled(v8, type);
        if (v16)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_storage_open_db";
            v28 = 2082;
            v29 = v16;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Failed to set vacuum policy, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v16);
          if (!v7)
            goto LABEL_56;
          goto LABEL_55;
        }
        if (!v17)
          goto LABEL_53;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_storage_open_db";
        v10 = "%{public}s Failed to set vacuum policy, no backtrace";
        goto LABEL_51;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_storage_open_db";
        v10 = "%{public}s Failed to set vacuum policy, backtrace limit exceeded";
        goto LABEL_51;
      }
    }
LABEL_53:

    goto LABEL_54;
  }
  if (sqlite3_exec(*v3, "CREATE TABLE IF NOT EXISTS network_storage (\t\tkey TEXT NOT NULL,\t\ttype TEXT NOT NULL,\t\tcanvas BLOB NOT NULL,\t\ttime INTEGER,\t\tPRIMARY KEY(key, type)\t\t);",
         0,
         0,
         &errmsg))
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_storage_open_db";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v7, &type, &v23))
      goto LABEL_54;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_storage_open_db";
        v10 = "%{public}s Failed to create tables";
        goto LABEL_51;
      }
    }
    else if (v23)
    {
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v21 = os_log_type_enabled(v8, type);
      if (v20)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_storage_open_db";
          v28 = 2082;
          v29 = v20;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Failed to create tables, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
LABEL_54:
        if (v7)
LABEL_55:
          free(v7);
LABEL_56:
        sqlite3_close(*v3);
        v4 = 0;
        *v3 = 0;
        goto LABEL_57;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_storage_open_db";
        v10 = "%{public}s Failed to create tables, no backtrace";
        goto LABEL_51;
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_storage_open_db";
        v10 = "%{public}s Failed to create tables, backtrace limit exceeded";
        goto LABEL_51;
      }
    }
    goto LABEL_53;
  }
LABEL_2:
  v4 = 1;
LABEL_57:

  return v4;
}

void nw_storage_store_items(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  _QWORD *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  NSObject *v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  char *backtrace_string;
  _BOOL4 v29;
  char *v30;
  _BOOL4 v31;
  const char *v32;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  _BOOL4 v36;
  _QWORD block[4];
  _QWORD *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  char v45;
  os_log_type_t v46;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = v15;
  if (!v11)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_storage_store_items";
    v19 = (char *)_os_log_send_and_compose_impl();

    v46 = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v19, &v46, &v45))
      goto LABEL_87;
    if (v46 != OS_LOG_TYPE_FAULT)
    {
      if (v45)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = v46;
        v29 = os_log_type_enabled(v20, v46);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            v48 = "nw_storage_store_items";
            v49 = 2082;
            v50 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null storage, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
LABEL_87:
          if (!v19)
            goto LABEL_8;
LABEL_88:
          free(v19);
          goto LABEL_8;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v48 = "nw_storage_store_items";
          v22 = "%{public}s called with null storage, no backtrace";
          goto LABEL_85;
        }
      }
      else
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = v46;
        if (os_log_type_enabled(v20, v46))
        {
          *(_DWORD *)buf = 136446210;
          v48 = "nw_storage_store_items";
          v22 = "%{public}s called with null storage, backtrace limit exceeded";
          goto LABEL_85;
        }
      }
      goto LABEL_86;
    }
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = v46;
    if (!os_log_type_enabled(v20, v46))
      goto LABEL_86;
    *(_DWORD *)buf = 136446210;
    v48 = "nw_storage_store_items";
    v22 = "%{public}s called with null storage";
    goto LABEL_85;
  }
  if (!a2)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_storage_store_items";
    v19 = (char *)_os_log_send_and_compose_impl();

    v46 = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v19, &v46, &v45))
      goto LABEL_87;
    if (v46 != OS_LOG_TYPE_FAULT)
    {
      if (!v45)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = v46;
        if (os_log_type_enabled(v20, v46))
        {
          *(_DWORD *)buf = 136446210;
          v48 = "nw_storage_store_items";
          v22 = "%{public}s called with null type, backtrace limit exceeded";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = v46;
      v31 = os_log_type_enabled(v20, v46);
      if (!v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v48 = "nw_storage_store_items";
          v22 = "%{public}s called with null type, no backtrace";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      if (!v31)
        goto LABEL_59;
      *(_DWORD *)buf = 136446466;
      v48 = "nw_storage_store_items";
      v49 = 2082;
      v50 = v30;
      v32 = "%{public}s called with null type, dumping backtrace:%{public}s";
      goto LABEL_58;
    }
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = v46;
    if (!os_log_type_enabled(v20, v46))
      goto LABEL_86;
    *(_DWORD *)buf = 136446210;
    v48 = "nw_storage_store_items";
    v22 = "%{public}s called with null type";
LABEL_85:
    _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
    goto LABEL_86;
  }
  if (!v12)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_storage_store_items";
    v19 = (char *)_os_log_send_and_compose_impl();

    v46 = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v19, &v46, &v45))
      goto LABEL_87;
    if (v46 != OS_LOG_TYPE_FAULT)
    {
      if (!v45)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = v46;
        if (os_log_type_enabled(v20, v46))
        {
          *(_DWORD *)buf = 136446210;
          v48 = "nw_storage_store_items";
          v22 = "%{public}s called with null items, backtrace limit exceeded";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = v46;
      v33 = os_log_type_enabled(v20, v46);
      if (!v30)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v48 = "nw_storage_store_items";
          v22 = "%{public}s called with null items, no backtrace";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      if (!v33)
        goto LABEL_59;
      *(_DWORD *)buf = 136446466;
      v48 = "nw_storage_store_items";
      v49 = 2082;
      v50 = v30;
      v32 = "%{public}s called with null items, dumping backtrace:%{public}s";
      goto LABEL_58;
    }
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = v46;
    if (!os_log_type_enabled(v20, v46))
      goto LABEL_86;
    *(_DWORD *)buf = 136446210;
    v48 = "nw_storage_store_items";
    v22 = "%{public}s called with null items";
    goto LABEL_85;
  }
  if (!v13)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_storage_store_items";
    v19 = (char *)_os_log_send_and_compose_impl();

    v46 = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v19, &v46, &v45))
      goto LABEL_87;
    if (v46 != OS_LOG_TYPE_FAULT)
    {
      if (!v45)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = v46;
        if (os_log_type_enabled(v20, v46))
        {
          *(_DWORD *)buf = 136446210;
          v48 = "nw_storage_store_items";
          v22 = "%{public}s called with null endpoint, backtrace limit exceeded";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = v46;
      v34 = os_log_type_enabled(v20, v46);
      if (!v30)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          v48 = "nw_storage_store_items";
          v22 = "%{public}s called with null endpoint, no backtrace";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
      if (!v34)
        goto LABEL_59;
      *(_DWORD *)buf = 136446466;
      v48 = "nw_storage_store_items";
      v49 = 2082;
      v50 = v30;
      v32 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
      goto LABEL_58;
    }
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = v46;
    if (!os_log_type_enabled(v20, v46))
      goto LABEL_86;
    *(_DWORD *)buf = 136446210;
    v48 = "nw_storage_store_items";
    v22 = "%{public}s called with null endpoint";
    goto LABEL_85;
  }
  if (!v14)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_storage_store_items";
    v19 = (char *)_os_log_send_and_compose_impl();

    v46 = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v19, &v46, &v45))
      goto LABEL_87;
    if (v46 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = v46;
      if (!os_log_type_enabled(v20, v46))
        goto LABEL_86;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_storage_store_items";
      v22 = "%{public}s called with null context";
      goto LABEL_85;
    }
    if (!v45)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = v46;
      if (os_log_type_enabled(v20, v46))
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_storage_store_items";
        v22 = "%{public}s called with null context, backtrace limit exceeded";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    v30 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = v46;
    v35 = os_log_type_enabled(v20, v46);
    if (!v30)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_storage_store_items";
        v22 = "%{public}s called with null context, no backtrace";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    if (!v35)
      goto LABEL_59;
    *(_DWORD *)buf = 136446466;
    v48 = "nw_storage_store_items";
    v49 = 2082;
    v50 = v30;
    v32 = "%{public}s called with null context, dumping backtrace:%{public}s";
LABEL_58:
    _os_log_impl(&dword_182FBE000, v20, v21, v32, buf, 0x16u);
    goto LABEL_59;
  }
  if (!v15)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_storage_store_items";
    v19 = (char *)_os_log_send_and_compose_impl();

    v46 = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v19, &v46, &v45))
      goto LABEL_87;
    if (v46 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = v46;
      if (os_log_type_enabled(v20, v46))
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_storage_store_items";
        v22 = "%{public}s called with null completion";
        goto LABEL_85;
      }
LABEL_86:

      goto LABEL_87;
    }
    if (!v45)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = v46;
      if (os_log_type_enabled(v20, v46))
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_storage_store_items";
        v22 = "%{public}s called with null completion, backtrace limit exceeded";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    v30 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = v46;
    v36 = os_log_type_enabled(v20, v46);
    if (!v30)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_storage_store_items";
        v22 = "%{public}s called with null completion, no backtrace";
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v48 = "nw_storage_store_items";
      v49 = 2082;
      v50 = v30;
      v32 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_58;
    }
LABEL_59:

    free(v30);
    if (!v19)
      goto LABEL_8;
    goto LABEL_88;
  }
  v17 = v11[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __nw_storage_store_items_block_invoke;
  block[3] = &unk_1E14AAC08;
  v38 = v11;
  v44 = a2;
  v39 = v13;
  v40 = 0;
  v41 = v12;
  v42 = v14;
  v43 = v16;
  dispatch_async(v17, block);

LABEL_8:
}

void __nw_storage_store_items_block_invoke(uint64_t a1)
{
  char *v2;
  const char *v3;
  char *v4;
  void *v5;
  unsigned __int8 *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  char *v12;

  v2 = nw_storage_provider_for_type(*(void **)(a1 + 32), *(_QWORD *)(a1 + 80));
  v3 = (const char *)(*((uint64_t (**)(_QWORD, _QWORD))v2 + 3))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if (v3)
  {
    v4 = (char *)v3;
    nw_storage_fault_in_canvas(*(void **)(a1 + 32), v3, *(const char **)(a1 + 80), (uint64_t)v2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(unsigned __int8 **)(a1 + 56);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __nw_storage_store_items_block_invoke_2;
    v8[3] = &unk_1E14A2BD0;
    v12 = v2;
    v7 = v5;
    v9 = v7;
    v10 = *(id *)(a1 + 40);
    v11 = *(id *)(a1 + 48);
    nw_array_apply(v6, (uint64_t)v8);
    if ((*((unsigned int (**)(id))v2 + 7))(v7))
      nw_storage_enqueue_flush_and_free_key(*(void **)(a1 + 32), (uint64_t)v4, *(_QWORD *)(a1 + 80));
    else
      free(v4);

  }
  nw_queue_context_async(*(void **)(a1 + 64), *(void **)(a1 + 72));
}

uint64_t __nw_storage_store_items_block_invoke_2(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1[7] + 8))(a1[4], a3, a1[5], a1[6]);
  return 1;
}

void __nw_storage_remove_items_block_invoke(uint64_t a1)
{
  char *v2;
  const char *v3;
  char *v4;
  void *v5;
  void *v6;
  unsigned __int8 *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  char *v12;

  v2 = nw_storage_provider_for_type(*(void **)(a1 + 32), *(_QWORD *)(a1 + 80));
  v3 = (const char *)(*((uint64_t (**)(_QWORD, _QWORD))v2 + 3))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if (v3)
  {
    v4 = (char *)v3;
    nw_storage_fault_in_canvas(*(void **)(a1 + 32), v3, *(const char **)(a1 + 80), (uint64_t)v2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(unsigned __int8 **)(a1 + 56);
    if (v7)
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __nw_storage_remove_items_block_invoke_2;
      v8[3] = &unk_1E14A2BD0;
      v12 = v2;
      v9 = v5;
      v10 = *(id *)(a1 + 40);
      v11 = *(id *)(a1 + 48);
      nw_array_apply(v7, (uint64_t)v8);

    }
    else
    {
      (*((void (**)(void *, _QWORD, _QWORD, _QWORD))v2 + 2))(v5, 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    if ((*((unsigned int (**)(void *))v2 + 7))(v6))
      nw_storage_enqueue_flush_and_free_key(*(void **)(a1 + 32), (uint64_t)v4, *(_QWORD *)(a1 + 80));
    else
      free(v4);

  }
  nw_queue_context_async(*(void **)(a1 + 64), *(void **)(a1 + 72));
}

uint64_t __nw_storage_remove_items_block_invoke_2(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1[7] + 16))(a1[4], a3, a1[5], a1[6]);
  return 1;
}

void sub_183816AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL ___ZL32nw_protocol_setup_udp_definitionv_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_udp_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_udp_identifier::onceToken, &__block_literal_global_24);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_udp_identifier::identifier);
  v1 = (void *)g_udp_definition;
  g_udp_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)g_udp_definition, (uint64_t)nw_udp_allocate_options, (uint64_t)nw_udp_copy_options, (uint64_t)nw_udp_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)g_udp_definition, (uint64_t)nw_udp_option_is_equal);
  nw_protocol_definition_set_options_serializer((void *)g_udp_definition, 0, (uint64_t)nw_udp_serialize_options, (uint64_t)nw_udp_deserialize_options);
  nw_protocol_definition_set_metadata_allocator((void *)g_udp_definition, (uint64_t)nw_udp_allocate_metadata, (uint64_t)nw_udp_deallocate_metadata);
  nw_protocol_definition_set_has_global_definition((void *)g_udp_definition);
  return nw_protocol_register_handle((uint64_t)&nw_protocol_udp_identifier::identifier, (void *)g_udp_definition, (uint64_t)nw_protocol_udp_create, 0);
}

BOOL nw_udp_allocate_options(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_183816F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_udp_copy_options(void *a1, _DWORD *a2)
{
  id v3;
  _DWORD *v4;
  _BOOL8 result;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  NSObject *v10;
  void *v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_udp_copy_options";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_udp_copy_options";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_udp_copy_options";
            v20 = 2082;
            v21 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_udp_copy_options";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_udp_copy_options";
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_23:
    if (v7)
      free(v7);
    v4 = 0;
    goto LABEL_4;
  }
  v4 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *v4 = 0;
    *v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v19 = "strict_calloc";
  v20 = 2048;
  v21 = 1;
  v22 = 2048;
  v23 = 4;
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void sub_1838172D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_udp_deallocate_options(int a1, void *a2)
{
  if (a2)
    free(a2);
}

BOOL nw_udp_option_is_equal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 == *a3;
}

BOOL nw_udp_serialize_options(void *a1, _DWORD *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    v7 = nw_udp_copy_options(v5, a2);
    *a3 = 4;
    goto LABEL_3;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_udp_serialize_options";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_udp_serialize_options";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null existing_handle", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_udp_serialize_options";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_udp_serialize_options";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_udp_serialize_options";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_3:

  return v7;
}

void sub_1838175BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_udp_deserialize_options(void *a1, _DWORD *a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 4)
    {
      v7 = nw_udp_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_udp_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_udp_deserialize_options";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_udp_options))", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v22)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_udp_deserialize_options";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_udp_options)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_udp_deserialize_options";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_udp_options)), no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v25 = "nw_udp_deserialize_options";
        v26 = 2082;
        v27 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_udp_options)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_udp_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_udp_deserialize_options";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null serialized_bytes", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v22)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_udp_deserialize_options";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null serialized_bytes, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_udp_deserialize_options";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null serialized_bytes, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v25 = "nw_udp_deserialize_options";
        v26 = 2082;
        v27 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

void sub_183817A84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_udp_allocate_metadata(void *a1)
{
  id v1;
  _OWORD *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    *v2 = 0u;
    v2[1] = 0u;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_183817BC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_udp_deallocate_metadata(int a1, void *a2)
{
  if (a2)
    free(a2);
}

void nw_udp_options_set_prefer_no_checksum(nw_protocol_options_t options, BOOL prefer_no_checksum)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  BOOL v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_udp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_udp_options_set_prefer_no_checksum_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = prefer_no_checksum;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_udp_options_set_prefer_no_checksum";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_udp_options_set_prefer_no_checksum";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_udp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_udp_options_set_prefer_no_checksum";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_udp_options_set_prefer_no_checksum";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_udp_options_set_prefer_no_checksum";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_udp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183817EB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_udp_options_set_prefer_no_checksum_block_invoke(uint64_t a1, _BYTE *a2)
{
  *a2 = *a2 & 0xFE | *(_BYTE *)(a1 + 32);
  return 1;
}

uint64_t __nw_udp_options_set_ignore_inbound_checksum_block_invoke(uint64_t a1, _BYTE *a2)
{
  *a2 = *a2 & 0xFB | (4 * *(_BYTE *)(a1 + 32));
  return 1;
}

void nw_udp_options_set_use_quic_stats(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_udp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_udp_options_set_use_quic_stats_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_udp_options_set_use_quic_stats";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_udp_options_set_use_quic_stats";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_udp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_udp_options_set_use_quic_stats";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_udp_options_set_use_quic_stats";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_udp_options_set_use_quic_stats";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_udp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838181CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_udp_options_set_use_quic_stats_block_invoke(uint64_t a1, _BYTE *a2)
{
  *a2 = *a2 & 0xF7 | (8 * *(_BYTE *)(a1 + 32));
  return 1;
}

BOOL nw_udp_options_get_use_quic_stats(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_udp(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_udp_options_get_use_quic_stats_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_udp_options_get_use_quic_stats";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_udp_options_get_use_quic_stats";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_udp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_udp_options_get_use_quic_stats";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_udp_options_get_use_quic_stats";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_udp_options_get_use_quic_stats";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_udp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_1838184F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_udp_options_get_use_quic_stats_block_invoke(uint64_t a1, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*a2 & 8) != 0;
  return 1;
}

nw_protocol_metadata_t nw_udp_create_metadata(void)
{
  if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
  return (nw_protocol_metadata_t)nw_protocol_metadata_create_singleton((void *)g_udp_definition);
}

BOOL nw_protocol_metadata_is_udp(nw_protocol_metadata_t metadata)
{
  NSObject *v1;
  BOOL v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = metadata;
  if (v1)
  {
    if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
      dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
    v2 = nw_protocol_metadata_matches_definition((uint64_t)v1, g_udp_definition);
    goto LABEL_5;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_metadata_is_udp";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_metadata_is_udp";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_protocol_metadata_is_udp";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_metadata_is_udp";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_metadata_is_udp";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_5:

  return v2;
}

void sub_183818848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18381BF30(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v5 - 72));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18381F580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void sub_18381F6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1838211D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__45381(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__45382(uint64_t a1)
{

}

void sub_1838218E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_183822014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_183826B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18382A43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18382C0C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_frame_reclassify(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((*(_WORD *)(a1 + 204) & 0x100) != 0 && g_channel_reclassifier)
    {
      g_channel_reclassifier(a1, a2, *(_QWORD *)(a1 + 88));
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_frame_reclassify";
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s frame does not support reclassify", buf, 0xCu);
      }
      nw_frame_finalize(a1);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_frame_reclassify";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_frame_reclassify";
      v7 = "%{public}s called with null frame";
      goto LABEL_22;
    }
    if (!v10)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_frame_reclassify";
      v7 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_22;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v13 = "nw_frame_reclassify";
        v14 = 2082;
        v15 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_23;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      v13 = "nw_frame_reclassify";
      v7 = "%{public}s called with null frame, no backtrace";
LABEL_22:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_23:
  if (v4)
    free(v4);
}

void nw_frame_set_is_channel_frame(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(unsigned __int16 *)(a1 + 204);
    v2 = a1 + 204;
    v4 = v3 | (*(unsigned __int8 *)(v2 + 2) << 16);
    if (a2)
      v5 = 256;
    else
      v5 = 0;
    v6 = v4 & 0xFFFFFEFF;
    *(_WORD *)v2 = v6 | v5;
    *(_BYTE *)(v2 + 2) = BYTE2(v6);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "__nw_frame_set_is_channel_frame";
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v16 = "__nw_frame_set_is_channel_frame";
      v10 = "%{public}s called with null frame";
      goto LABEL_20;
    }
    if (!v13)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v16 = "__nw_frame_set_is_channel_frame";
      v10 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = type;
    v12 = os_log_type_enabled(v8, type);
    if (backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "__nw_frame_set_is_channel_frame";
        v17 = 2082;
        v18 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_21;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446210;
      v16 = "__nw_frame_set_is_channel_frame";
      v10 = "%{public}s called with null frame, no backtrace";
LABEL_20:
      _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    }
  }
LABEL_21:
  if (v7)
    free(v7);
}

void nw_frame_set_flow_id(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char *v8;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_frame_set_flow_id";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_frame_set_flow_id";
      v5 = "%{public}s called with null frame";
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_frame_set_flow_id";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v2)
          return;
        goto LABEL_35;
      }
      if (!v7)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_frame_set_flow_id";
      v5 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_frame_set_flow_id";
      v5 = "%{public}s called with null frame, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    goto LABEL_34;
  }
  if (a2)
  {
    if ((*(_WORD *)(a1 + 204) & 0x100) != 0)
    {
      if (g_channel_set_flow_handler)
        g_channel_set_flow_handler(a1, a2);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_frame_set_flow_id";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (!__nwlog_fault(v2, &type, &v10))
    goto LABEL_34;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v3 = __nwlog_obj();
    v4 = type;
    if (!os_log_type_enabled(v3, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v13 = "nw_frame_set_flow_id";
    v5 = "%{public}s called with null flow_id";
    goto LABEL_33;
  }
  if (!v10)
  {
    v3 = __nwlog_obj();
    v4 = type;
    if (!os_log_type_enabled(v3, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v13 = "nw_frame_set_flow_id";
    v5 = "%{public}s called with null flow_id, backtrace limit exceeded";
    goto LABEL_33;
  }
  v8 = (char *)__nw_create_backtrace_string();
  v3 = __nwlog_obj();
  v4 = type;
  v9 = os_log_type_enabled(v3, type);
  if (!v8)
  {
    if (!v9)
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v13 = "nw_frame_set_flow_id";
    v5 = "%{public}s called with null flow_id, no backtrace";
    goto LABEL_33;
  }
  if (v9)
  {
    *(_DWORD *)buf = 136446466;
    v13 = "nw_frame_set_flow_id";
    v14 = 2082;
    v15 = v8;
    _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null flow_id, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v8);
  if (v2)
LABEL_35:
    free(v2);
}

uint64_t nw_frame_get_flow_id(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      result = 0;
      if ((*(_WORD *)(a1 + 204) & 0x100) != 0)
      {
        if (g_channel_get_flow_handler)
        {
          g_channel_get_flow_handler(a1, a2);
          return 1;
        }
      }
      return result;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_frame_get_flow_id";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_frame_get_flow_id";
        v7 = "%{public}s called with null out_flow_id";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_frame_get_flow_id";
        v7 = "%{public}s called with null out_flow_id, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_frame_get_flow_id";
        v7 = "%{public}s called with null out_flow_id, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_frame_get_flow_id";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null out_flow_id, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_frame_get_flow_id";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_34;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_frame_get_flow_id";
        v7 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_frame_get_flow_id";
        v7 = "%{public}s called with null frame, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_frame_get_flow_id";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null frame, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  v5 = __nwlog_obj();
  v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    v15 = "nw_frame_get_flow_id";
    v7 = "%{public}s called with null frame";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
  }
LABEL_34:
  if (v4)
    free(v4);
  return 0;
}

uint64_t nw_frame_set_internet_checksum(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "__nw_frame_set_internet_checksum";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (__nwlog_fault(v5, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v6 = __nwlog_obj();
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v14 = "__nw_frame_set_internet_checksum";
          v8 = "%{public}s called with null frame";
LABEL_18:
          _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
        }
      }
      else if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v6 = __nwlog_obj();
        v7 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v14 = "__nw_frame_set_internet_checksum";
            v15 = 2082;
            v16 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_19;
        }
        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          v14 = "__nw_frame_set_internet_checksum";
          v8 = "%{public}s called with null frame, no backtrace";
          goto LABEL_18;
        }
      }
      else
      {
        v6 = __nwlog_obj();
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v14 = "__nw_frame_set_internet_checksum";
          v8 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_18;
        }
      }
    }
LABEL_19:
    if (v5)
      free(v5);
    return 22;
  }
  v2 = 45;
  if ((*(_WORD *)(a1 + 204) & 0x100) != 0)
  {
    v3 = (uint64_t (*)(void))g_channel_set_internet_checksum_handler;
    if (g_channel_set_internet_checksum_handler)
    {
      *(_BYTE *)(a1 + 203) |= a2;
      return v3();
    }
  }
  return v2;
}

uint64_t nw_frame_get_internet_checksum(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "__nw_frame_get_internet_checksum";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (__nwlog_fault(v6, &type, &v12))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v7 = __nwlog_obj();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v15 = "__nw_frame_get_internet_checksum";
          v9 = "%{public}s called with null frame";
LABEL_18:
          _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
        }
      }
      else if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v7 = __nwlog_obj();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "__nw_frame_get_internet_checksum";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_19;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          v15 = "__nw_frame_get_internet_checksum";
          v9 = "%{public}s called with null frame, no backtrace";
          goto LABEL_18;
        }
      }
      else
      {
        v7 = __nwlog_obj();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v15 = "__nw_frame_get_internet_checksum";
          v9 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_18;
        }
      }
    }
LABEL_19:
    if (v6)
      free(v6);
    return 22;
  }
  v4 = 45;
  if ((*(_WORD *)(a1 + 204) & 0x100) != 0 && g_channel_get_internet_checksum_handler)
    return g_channel_get_internet_checksum_handler(a1, a2, a3, a4);
  return v4;
}

void nw_frame_set_departure_time(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)(a1 + 160) = a2;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "__nw_frame_set_departure_time";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_frame_set_departure_time";
      v5 = "%{public}s called with null frame";
      goto LABEL_17;
    }
    if (!v8)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_frame_set_departure_time";
      v5 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        v11 = "__nw_frame_set_departure_time";
        v12 = 2082;
        v13 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_frame_set_departure_time";
      v5 = "%{public}s called with null frame, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2)
    free(v2);
}

uint64_t nw_frame_get_departure_time(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 160);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "__nw_frame_get_departure_time";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_frame_get_departure_time";
        v5 = "%{public}s called with null frame";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "__nw_frame_get_departure_time";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_frame_get_departure_time";
        v5 = "%{public}s called with null frame, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_frame_get_departure_time";
        v5 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2)
    free(v2);
  return 0;
}

uint64_t nw_frame_get_manager_for_size(unsigned int a1)
{
  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  return nw_frame_get_buffer_manager_with_context((id)nw_context_copy_implicit_context::implicit_context, a1);
}

dispatch_data_t nw_frame_copy_unclaimed_data(unsigned int *object, int a2, _BYTE *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  size_t v10;
  char *v11;
  uint64_t v13;
  _BOOL8 v14;
  _QWORD *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  _QWORD destructor[5];
  _QWORD v23[6];
  char v24;
  os_log_type_t v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!object)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_frame_copy_unclaimed_data";
    v16 = (char *)_os_log_send_and_compose_impl();
    v25 = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v16, &v25, &v24))
      goto LABEL_41;
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = v25;
      if (!os_log_type_enabled(v17, v25))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_frame_copy_unclaimed_data";
      v19 = "%{public}s called with null frame";
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = v25;
      v21 = os_log_type_enabled(v17, v25);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_frame_copy_unclaimed_data";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_41;
      }
      if (!v21)
      {
LABEL_41:
        if (v16)
          free(v16);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v27 = "nw_frame_copy_unclaimed_data";
      v19 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v17 = __nwlog_obj();
      v18 = v25;
      if (!os_log_type_enabled(v17, v25))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_frame_copy_unclaimed_data";
      v19 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
    goto LABEL_41;
  }
  if (a3)
    *a3 = 0;
  if (!*((_QWORD *)object + 14)
    || (object[51] & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(object, *((_QWORD *)object + 11)))
  {
    return 0;
  }
  v6 = object[13];
  if (!v6)
    return 0;
  v7 = 0;
  v8 = object[14];
  v9 = object[15] + v8;
  v10 = v6 - v9;
  if (v6 == v9)
    return (dispatch_data_t)v7;
  v11 = (char *)*((_QWORD *)object + 14);
  if (!v11)
    return (dispatch_data_t)v7;
  if ((object[51] & 2) != 0)
  {
    v7 = *((_QWORD *)object + 12);
    if (v7)
      dispatch_retain(*((dispatch_object_t *)object + 12));
    return (dispatch_data_t)v7;
  }
  if ((object[51] & 1) != 0 && !(_DWORD)v8)
  {
    nw_frame_will_free_buffer_externally((uint64_t)object);
    return dispatch_data_create(v11, v10, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
  }
  v13 = *((_QWORD *)object + 13);
  if (v13 && !(_DWORD)v8)
  {
    nw_frame_will_free_buffer_externally((uint64_t)object);
    v14 = nw_queue_copy_current_workloop();
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 0x40000000;
    v23[2] = __nw_frame_copy_unclaimed_data_block_invoke;
    v23[3] = &__block_descriptor_tmp_46224;
    v23[4] = v13;
    v23[5] = v11;
    v15 = v23;
    return dispatch_data_create(v11, v10, (dispatch_queue_t)v14, v15);
  }
  v11 += v8;
  if (a2)
  {
    if (a3)
      *a3 = 1;
    os_retain(object);
    v14 = nw_queue_copy_current_workloop();
    destructor[0] = MEMORY[0x1E0C809B0];
    destructor[1] = 0x40000000;
    destructor[2] = __nw_frame_copy_unclaimed_data_block_invoke_2;
    destructor[3] = &__block_descriptor_tmp_3_46225;
    destructor[4] = object;
    v15 = destructor;
    return dispatch_data_create(v11, v10, (dispatch_queue_t)v14, v15);
  }
  return dispatch_data_create(v11, v10, 0, 0);
}

void __nw_frame_copy_unclaimed_data_block_invoke(uint64_t a1)
{
  nw_mem_buffer_free(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __nw_frame_copy_unclaimed_data_block_invoke_2(uint64_t a1)
{
  void *v2;

  nw_frame_finalize(*(_QWORD *)(a1 + 32));
  v2 = *(void **)(a1 + 32);
  if (v2)
    os_release(v2);
}

uint64_t nw_frame_copy_metadata_uuid(uint64_t a1, _OWORD *a2, BOOL *a3)
{
  uint64_t v3;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "__nw_frame_copy_metadata_uuid";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v5, &type, &v11))
      goto LABEL_21;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v14 = "__nw_frame_copy_metadata_uuid";
      v8 = "%{public}s called with null frame";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "__nw_frame_copy_metadata_uuid";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_21;
      }
      if (!v10)
      {
LABEL_21:
        if (v5)
          free(v5);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v14 = "__nw_frame_copy_metadata_uuid";
      v8 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v14 = "__nw_frame_copy_metadata_uuid";
      v8 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_21;
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {
    if (a3)
      *a3 = (*(_BYTE *)(v3 + 66) & 0x40) != 0;
    if (*(_QWORD *)(v3 + 48))
    {
      *a2 = *(_OWORD *)(v3 + 16);
      return 1;
    }
  }
  return 0;
}

uint64_t nw_frame_is_connection_complete(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 186) >> 7;
}

uint64_t nw_frame_set_connection_complete(uint64_t result, int a2)
{
  char v2;

  if (a2)
    v2 = 0x80;
  else
    v2 = 0;
  *(_BYTE *)(result + 186) = v2 & 0x80 | *(_BYTE *)(result + 186) & 0x7F;
  return result;
}

void nw_frame_set_expire_time(uint64_t a1, uint64_t a2)
{
  _WORD *v2;
  __int16 v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(_WORD *)(a1 + 204);
    v2 = (_WORD *)(a1 + 204);
    *v2 = v3 | 0x10;
    *(_QWORD *)(v2 - 26) = a2;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "__nw_frame_set_expire_time";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "__nw_frame_set_expire_time";
      v7 = "%{public}s called with null frame";
      goto LABEL_17;
    }
    if (!v10)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "__nw_frame_set_expire_time";
      v7 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v13 = "__nw_frame_set_expire_time";
        v14 = 2082;
        v15 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      v13 = "__nw_frame_set_expire_time";
      v7 = "%{public}s called with null frame, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_18:
  if (v4)
    free(v4);
}

uint64_t nw_frame_get_expire_time(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v11 = "__nw_frame_get_expire_time";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v8 = 0;
    if (!__nwlog_fault(v2, &type, &v8))
      goto LABEL_20;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_frame_get_expire_time";
      v5 = "%{public}s called with null frame";
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "__nw_frame_get_expire_time";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_20;
      }
      if (!v7)
      {
LABEL_20:
        if (v2)
          free(v2);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_frame_get_expire_time";
      v5 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v11 = "__nw_frame_get_expire_time";
      v5 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    goto LABEL_20;
  }
  if ((*(_WORD *)(a1 + 204) & 0x10) == 0)
    return 0;
  return *(_QWORD *)(a1 + 152);
}

void nw_frame_set_packet_id(uint64_t a1, _OWORD *a2)
{
  int v2;
  int v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "__nw_frame_set_packet_id";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "__nw_frame_set_packet_id";
      v7 = "%{public}s called with null frame";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "__nw_frame_set_packet_id";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v4)
          return;
LABEL_35:
        free(v4);
        return;
      }
      if (!v9)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "__nw_frame_set_packet_id";
      v7 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "__nw_frame_set_packet_id";
      v7 = "%{public}s called with null frame, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_34;
  }
  if (a2)
  {
    v2 = *(unsigned __int16 *)(a1 + 204);
    v3 = v2 | (*(unsigned __int8 *)(a1 + 206) << 16);
    if ((v2 & 8) == 0)
    {
      *(_OWORD *)(a1 + 136) = *a2;
      *(_BYTE *)(a1 + 206) = BYTE2(v3);
      *(_WORD *)(a1 + 204) = v3 | 0x20;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "__nw_frame_set_packet_id";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_34;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v15 = "__nw_frame_set_packet_id";
    v7 = "%{public}s called with null packet_id";
    goto LABEL_33;
  }
  if (!v12)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v15 = "__nw_frame_set_packet_id";
    v7 = "%{public}s called with null packet_id, backtrace limit exceeded";
    goto LABEL_33;
  }
  v10 = (char *)__nw_create_backtrace_string();
  v5 = __nwlog_obj();
  v6 = type;
  v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11)
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v15 = "__nw_frame_set_packet_id";
    v7 = "%{public}s called with null packet_id, no backtrace";
    goto LABEL_33;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    v15 = "__nw_frame_set_packet_id";
    v16 = 2082;
    v17 = v10;
    _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null packet_id, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v4)
    goto LABEL_35;
}

uint64_t nw_frame_get_packet_id(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((*(_WORD *)(a1 + 204) & 0x20) != 0)
      return a1 + 136;
    else
      return 0;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "__nw_frame_get_packet_id";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_frame_get_packet_id";
        v5 = "%{public}s called with null frame";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "__nw_frame_get_packet_id";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_20;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_frame_get_packet_id";
        v5 = "%{public}s called with null frame, no backtrace";
        goto LABEL_19;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "__nw_frame_get_packet_id";
        v5 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_19;
      }
    }
  }
LABEL_20:
  if (v2)
    free(v2);
  return 0;
}

void nw_frame_set_is_wake_packet(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(unsigned __int16 *)(a1 + 204);
    v2 = a1 + 204;
    v4 = v3 | (*(unsigned __int8 *)(v2 + 2) << 16);
    if (a2)
      v5 = 0x4000;
    else
      v5 = 0;
    v6 = v4 & 0xFFFFBFFF;
    *(_WORD *)v2 = v6 | v5;
    *(_BYTE *)(v2 + 2) = BYTE2(v6);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "__nw_frame_set_is_wake_packet";
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v16 = "__nw_frame_set_is_wake_packet";
      v10 = "%{public}s called with null frame";
      goto LABEL_20;
    }
    if (!v13)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v16 = "__nw_frame_set_is_wake_packet";
      v10 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = type;
    v12 = os_log_type_enabled(v8, type);
    if (backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "__nw_frame_set_is_wake_packet";
        v17 = 2082;
        v18 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_21;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446210;
      v16 = "__nw_frame_set_is_wake_packet";
      v10 = "%{public}s called with null frame, no backtrace";
LABEL_20:
      _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    }
  }
LABEL_21:
  if (v7)
    free(v7);
}

