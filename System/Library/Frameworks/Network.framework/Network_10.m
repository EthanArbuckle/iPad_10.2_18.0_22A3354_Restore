uint64_t nw_parameters_get_no_fullstack_fallback(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[98] >> 1) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_no_fullstack_fallback";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_fullstack_fallback";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_no_fullstack_fallback";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_fullstack_fallback";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_fullstack_fallback";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_fallback_applied(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 2048;
    else
      v9 = 0;
    v10 = v8 & 0xFFFFF7FF;
    *(_WORD *)v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_fallback_applied";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_fallback_applied";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_fallback_applied";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_fallback_applied";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_fallback_applied";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

void nw_parameters_set_fallback_mode(void *a1, char a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_BYTE *)(*((_QWORD *)v3 + 13) + 107) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_fallback_mode";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_fallback_mode";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_fallback_mode";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_fallback_mode";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_fallback_mode";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_parameters_set_proxy_applied(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 4096;
    else
      v9 = 0;
    v10 = v8 & 0xFFFFEFFF;
    *(_WORD *)v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_proxy_applied";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_proxy_applied";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_proxy_applied";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_proxy_applied";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_proxy_applied";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

uint64_t nw_parameters_get_proxy_applied(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (*(unsigned __int16 *)(*((_QWORD *)v1 + 13) + 108) >> 12) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_proxy_applied";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_proxy_applied";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_proxy_applied";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_proxy_applied";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_proxy_applied";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_is_approved_app_domain(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  int v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 13);
    v4 = *(unsigned __int16 *)(v3 + 108);
    v3 += 108;
    *(_BYTE *)(v3 + 2) = (v4 | (*(unsigned __int8 *)(v3 + 2) << 16) | 0x10000u) >> 16;
    *(_WORD *)v3 = v4;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_is_approved_app_domain";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_is_approved_app_domain";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_is_approved_app_domain";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_is_approved_app_domain";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_is_approved_app_domain";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_parameters_set_is_known_tracker(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 0x4000;
    else
      v9 = 0;
    v10 = v8 & 0xFFFFBFFF;
    *(_WORD *)v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_is_known_tracker";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_is_known_tracker";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_is_known_tracker";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_is_known_tracker";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_is_known_tracker";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

uint64_t nw_parameters_get_parent_is_known_tracker(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[99] >> 7;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_parent_is_known_tracker";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_parent_is_known_tracker";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_parent_is_known_tracker";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_parent_is_known_tracker";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_parent_is_known_tracker";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_block_trackers(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x200000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFDFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_block_trackers";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_block_trackers";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_block_trackers";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_block_trackers";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_block_trackers";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_internal_attribution(void *a1, char a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_BYTE *)(*((_QWORD *)v3 + 13) + 102) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_internal_attribution";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_internal_attribution";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_internal_attribution";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_internal_attribution";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_internal_attribution";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_parameters_set_website_attribution(void *a1, const char *a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_BYTE *)(v3[13] + 102) = 2 * (a2 != 0);
    nw_parameters_set_attribution_context(v3, a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_website_attribution";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_website_attribution";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_website_attribution";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_website_attribution";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_website_attribution";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

const char *nw_parameters_internal_attribution_to_string(unsigned int a1)
{
  if (a1 > 2)
    return "unknown";
  else
    return off_1E149D258[a1];
}

uint64_t nw_parameters_string_to_internal_attribution(const char *a1)
{
  uint64_t result;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (!strncasecmp(a1, "user", 5uLL))
      return 1;
    result = strncasecmp(a1, "developer", 0xAuLL);
    if ((_DWORD)result)
      return 2 * (strncasecmp(a1, "website", 8uLL) == 0);
    return result;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_parameters_string_to_internal_attribution";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_parameters_string_to_internal_attribution";
        v7 = "%{public}s called with null string";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v6 = type;
        v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            v13 = "nw_parameters_string_to_internal_attribution";
            v14 = 2082;
            v15 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v9)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_parameters_string_to_internal_attribution";
        v7 = "%{public}s called with null string, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_parameters_string_to_internal_attribution";
        v7 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

  }
LABEL_22:
  if (v4)
    free(v4);
  return 0;
}

void nw_parameters_set_is_non_app_initiated(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 2;
    else
      v5 = 0;
    *(_BYTE *)(*((_QWORD *)v3 + 13) + 102) = v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_is_non_app_initiated";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_is_non_app_initiated";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_is_non_app_initiated";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_is_non_app_initiated";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_is_non_app_initiated";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

void nw_parameters_set_desperate_ivan(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x40000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFFFBFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_desperate_ivan";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_desperate_ivan";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_desperate_ivan";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_desperate_ivan";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_desperate_ivan";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_tls(void *a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  void *options;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_parameters_set_tls";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_parameters_set_tls";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v22 = "nw_parameters_set_tls";
            v23 = 2082;
            v24 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_parameters_set_tls";
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_parameters_set_tls";
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_24:
    if (v12)
      free(v12);
    goto LABEL_7;
  }
  v5 = (void *)v3[19];
  if (!a2)
  {
    options = (void *)nw_protocol_boringssl_copy_definition();
    nw_protocol_stack_remove_protocol(v5, options);
    goto LABEL_6;
  }
  v6 = (void *)nw_protocol_boringssl_copy_definition();
  v7 = nw_protocol_stack_includes_protocol(v5, v6);

  if ((v7 & 1) == 0)
  {
    v8 = (void *)v4[19];
    v9 = (void *)nw_protocol_boringssl_copy_definition();
    options = nw_protocol_create_options(v9);

    nw_protocol_stack_append_application_protocol(v8, options);
LABEL_6:

  }
LABEL_7:

}

void sub_183553A5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_is_custom_protocols_only(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[97] >> 3) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_is_custom_protocols_only";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_is_custom_protocols_only";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_is_custom_protocols_only";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_is_custom_protocols_only";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_is_custom_protocols_only";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_custom_protocols_only(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 2048;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFFFFF7FFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_custom_protocols_only";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_custom_protocols_only";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_custom_protocols_only";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_custom_protocols_only";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_custom_protocols_only";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_companion_link_upgrade_preference(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((_QWORD *)v3 + 13) + 88) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_companion_link_upgrade_preference";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_companion_link_upgrade_preference";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_companion_link_upgrade_preference";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_companion_link_upgrade_preference";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_companion_link_upgrade_preference";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

uint64_t nw_parameters_get_companion_link_upgrade_preference(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *(unsigned int *)(*((_QWORD *)v1 + 13) + 88);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_companion_link_upgrade_preference";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_companion_link_upgrade_preference";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_companion_link_upgrade_preference";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_companion_link_upgrade_preference";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_companion_link_upgrade_preference";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_tls_session_id(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 16, a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_tls_session_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_tls_session_id";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_tls_session_id";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_tls_session_id";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_tls_session_id";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_parameters_set_fast_open_enabled(nw_parameters_t parameters, BOOL fast_open_enabled)
{
  _BOOL4 v2;
  nw_parameters_t v3;
  nw_parameters_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v2 = fast_open_enabled;
  v20 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = v3;
  if (v3)
  {
    v5 = 4;
    if (!v2)
      v5 = 0;
    v3[12].isa = (Class)((unint64_t)v3[12].isa & 0xFFFFFFFFFFFFFFFBLL | v5);
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_fast_open_enabled";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_fast_open_enabled";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_fast_open_enabled";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_fast_open_enabled";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_fast_open_enabled";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_tfo_no_cookie(void *a1, char a2)
{
  NWConcrete_nw_parameters *v3;
  NWConcrete_nw_parameters *v4;
  OS_nw_protocol_options *v5;
  OS_nw_protocol_options *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_parameters_copy_tcp_options(v3, 1);
    v6 = v5;
    if (v5)
      nw_tcp_options_set_no_fast_open_cookie(v5, a2);

    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_set_tfo_no_cookie";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_tfo_no_cookie";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_set_tfo_no_cookie";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_tfo_no_cookie";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_tfo_no_cookie";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
LABEL_5:

}

void sub_183554CF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_tfo_no_cookie(void *a1)
{
  NWConcrete_nw_parameters *v1;
  NWConcrete_nw_parameters *v2;
  OS_nw_protocol_options *v3;
  OS_nw_protocol_options *v4;
  _BOOL8 no_fast_open_cookie;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_parameters_copy_tcp_options(v1, 0);
    v4 = v3;
    if (v3)
      no_fast_open_cookie = nw_tcp_options_get_no_fast_open_cookie(v3);
    else
      no_fast_open_cookie = 0;

    goto LABEL_6;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_get_tfo_no_cookie";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_tfo_no_cookie";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_get_tfo_no_cookie";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_tfo_no_cookie";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_tfo_no_cookie";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v8)
    free(v8);
  no_fast_open_cookie = 0;
LABEL_6:

  return no_fast_open_cookie;
}

void sub_183554FCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_use_tfo_heuristics(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  v3 = v2;
  if (a1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v14 = "nw_parameters_set_use_tfo_heuristics";
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_INFO, "%{public}s nw_parameters_set_use_tfo_heuristics is deprecated", buf, 0xCu);
    }

    return;
  }
  *(_DWORD *)buf = 136446210;
  v14 = "nw_parameters_set_use_tfo_heuristics";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_set_use_tfo_heuristics";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_parameters_set_use_tfo_heuristics";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_set_use_tfo_heuristics";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_set_use_tfo_heuristics";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v4)
    free(v4);
}

uint64_t nw_parameters_get_use_tfo_heuristics(void *a1)
{
  id v1;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_parameters_get_use_tfo_heuristics";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_get_use_tfo_heuristics";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_parameters_get_use_tfo_heuristics";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_get_use_tfo_heuristics";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_get_use_tfo_heuristics";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_19:
  if (v4)
    free(v4);
LABEL_2:

  return 0;
}

void nw_parameters_set_fast_open_force_enable(void *a1, char a2)
{
  NWConcrete_nw_parameters *v3;
  NWConcrete_nw_parameters *v4;
  OS_nw_protocol_options *v5;
  OS_nw_protocol_options *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_parameters_copy_tcp_options(v3, 1);
    v6 = v5;
    if (v5)
      nw_tcp_options_set_fast_open_force_enable(v5, a2);

    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_set_fast_open_force_enable";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_fast_open_force_enable";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_set_fast_open_force_enable";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_fast_open_force_enable";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_fast_open_force_enable";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
LABEL_5:

}

void sub_183555808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_fast_open_force_enable(void *a1)
{
  NWConcrete_nw_parameters *v1;
  NWConcrete_nw_parameters *v2;
  OS_nw_protocol_options *v3;
  OS_nw_protocol_options *v4;
  _BOOL8 fast_open_force_enable;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_parameters_copy_tcp_options(v1, 0);
    v4 = v3;
    if (v3)
      fast_open_force_enable = nw_tcp_options_get_fast_open_force_enable(v3);
    else
      fast_open_force_enable = 0;

    goto LABEL_6;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_get_fast_open_force_enable";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_fast_open_force_enable";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_get_fast_open_force_enable";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_fast_open_force_enable";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_fast_open_force_enable";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v8)
    free(v8);
  fast_open_force_enable = 0;
LABEL_6:

  return fast_open_force_enable;
}

void sub_183555AE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_reduce_buffering(void *a1, char a2)
{
  NWConcrete_nw_parameters *v3;
  NWConcrete_nw_parameters *v4;
  OS_nw_protocol_options *v5;
  OS_nw_protocol_options *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_parameters_copy_tcp_options(v3, 1);
    v6 = v5;
    if (v5)
      nw_tcp_options_set_reduce_buffering(v5, a2);

    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_set_reduce_buffering";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_reduce_buffering";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_set_reduce_buffering";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_reduce_buffering";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_reduce_buffering";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
LABEL_5:

}

void sub_183555DAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_reduce_buffering(void *a1)
{
  NWConcrete_nw_parameters *v1;
  NWConcrete_nw_parameters *v2;
  OS_nw_protocol_options *v3;
  OS_nw_protocol_options *v4;
  _BOOL8 reduce_buffering;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_parameters_copy_tcp_options(v1, 0);
    v4 = v3;
    if (v3)
      reduce_buffering = nw_tcp_options_get_reduce_buffering(v3);
    else
      reduce_buffering = 0;

    goto LABEL_6;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_get_reduce_buffering";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_reduce_buffering";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_get_reduce_buffering";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_reduce_buffering";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_reduce_buffering";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v8)
    free(v8);
  reduce_buffering = 0;
LABEL_6:

  return reduce_buffering;
}

void sub_183556084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_no_delay(void *a1, BOOL a2)
{
  NWConcrete_nw_parameters *v3;
  NWConcrete_nw_parameters *v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_parameters_copy_tcp_options(v3, 1);
    v6 = v5;
    if (v5)
      nw_tcp_options_set_no_delay(v5, a2);

    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_set_no_delay";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_no_delay";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_set_no_delay";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_no_delay";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_no_delay";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
LABEL_5:

}

void sub_183556350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_use_long_outstanding_queries(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 8;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFFFFFFF7 | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_use_long_outstanding_queries";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_use_long_outstanding_queries";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_use_long_outstanding_queries";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_use_long_outstanding_queries";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_use_long_outstanding_queries";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_ignore_resolver_stats(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 16;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFFFFFFEFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_ignore_resolver_stats";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_ignore_resolver_stats";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_ignore_resolver_stats";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_ignore_resolver_stats";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_ignore_resolver_stats";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_include_peer_to_peer(nw_parameters_t parameters, BOOL include_peer_to_peer)
{
  _BOOL4 v2;
  nw_parameters_t v3;
  nw_parameters_t v4;
  Class isa;
  char *v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v2 = include_peer_to_peer;
  v25 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = v3;
  if (v3)
  {
    isa = v3[13].isa;
    v7 = *((unsigned __int16 *)isa + 54);
    v6 = (char *)isa + 108;
    v8 = v7 | (v6[2] << 16);
    if (v2)
      v9 = 8;
    else
      v9 = 0;
    v10 = v8 & 0xFFFFFFF7;
    *(_WORD *)v6 = v10 | v9;
    v6[2] = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_include_peer_to_peer";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_include_peer_to_peer";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_include_peer_to_peer";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_include_peer_to_peer";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_include_peer_to_peer";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

void nw_parameters_set_use_awdl(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 8;
    else
      v9 = 0;
    v10 = v8 & 0xFFFFFFF7;
    *(_WORD *)v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_use_awdl";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_use_awdl";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_use_awdl";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_use_awdl";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_use_awdl";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

void nw_parameters_set_use_p2p(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 16;
    else
      v9 = 0;
    v10 = v8 & 0xFFFFFFEF;
    *(_WORD *)v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_use_p2p";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_use_p2p";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_use_p2p";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_use_p2p";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_use_p2p";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

void nw_parameters_set_resolve_ptr(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 32;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFFFFFFDFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_resolve_ptr";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_resolve_ptr";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_resolve_ptr";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_resolve_ptr";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_resolve_ptr";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

uint64_t nw_parameters_get_no_proxy(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (*(unsigned __int16 *)(*((_QWORD *)v1 + 13) + 108) >> 1) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_no_proxy";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_proxy";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_no_proxy";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_proxy";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_proxy";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_no_opaque_proxy(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 2;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFFFFFFFDLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_no_opaque_proxy";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_no_opaque_proxy";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_no_opaque_proxy";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_no_opaque_proxy";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_no_opaque_proxy";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

uint64_t nw_parameters_get_no_opaque_proxy(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[96] >> 1) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_no_opaque_proxy";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_opaque_proxy";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_no_opaque_proxy";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_opaque_proxy";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_opaque_proxy";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_no_transform(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 4;
    else
      v9 = 0;
    v10 = v8 & 0xFFFFFFFB;
    *(_WORD *)v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_no_transform";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_transform";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_no_transform";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_transform";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_transform";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

uint64_t nw_parameters_get_no_transform(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (*(unsigned __int16 *)(*((_QWORD *)v1 + 13) + 108) >> 2) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_no_transform";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_transform";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_no_transform";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_transform";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_transform";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_no_cellular_fallback(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (*(unsigned __int16 *)(*((_QWORD *)v1 + 13) + 108) >> 6) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_no_cellular_fallback";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_cellular_fallback";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_no_cellular_fallback";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_cellular_fallback";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_cellular_fallback";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_no_wake_from_sleep(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 128;
    else
      v9 = 0;
    v10 = v8 & 0xFFFFFF7F;
    *(_WORD *)v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_no_wake_from_sleep";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_wake_from_sleep";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_no_wake_from_sleep";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_wake_from_sleep";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_wake_from_sleep";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

void nw_parameters_set_sleep_keepalive_interval(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 22) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_sleep_keepalive_interval";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_sleep_keepalive_interval";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_sleep_keepalive_interval";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_sleep_keepalive_interval";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_sleep_keepalive_interval";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_parameters_set_keepalive_enabled(void *a1, BOOL a2)
{
  NWConcrete_nw_parameters *v3;
  NWConcrete_nw_parameters *v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_parameters_copy_tcp_options(v3, 1);
    v6 = v5;
    if (v5)
      nw_tcp_options_set_enable_keepalive(v5, a2);

    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_set_keepalive_enabled";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_keepalive_enabled";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_set_keepalive_enabled";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_keepalive_enabled";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_keepalive_enabled";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
LABEL_5:

}

void sub_183558B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_keepalive_enabled(void *a1)
{
  NWConcrete_nw_parameters *v1;
  NWConcrete_nw_parameters *v2;
  OS_nw_protocol_options *v3;
  OS_nw_protocol_options *v4;
  _BOOL8 enable_keepalive;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_parameters_copy_tcp_options(v1, 0);
    v4 = v3;
    if (v3)
      enable_keepalive = nw_tcp_options_get_enable_keepalive(v3);
    else
      enable_keepalive = 0;

    goto LABEL_6;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_get_keepalive_enabled";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_keepalive_enabled";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_get_keepalive_enabled";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_keepalive_enabled";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_keepalive_enabled";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v8)
    free(v8);
  enable_keepalive = 0;
LABEL_6:

  return enable_keepalive;
}

void sub_183558E3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_keepalive_idle_time(void *a1, uint32_t a2)
{
  NWConcrete_nw_parameters *v3;
  NWConcrete_nw_parameters *v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_parameters_copy_tcp_options(v3, 1);
    v6 = v5;
    if (v5)
      nw_tcp_options_set_keepalive_idle_time(v5, a2);

    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_set_keepalive_idle_time";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_keepalive_idle_time";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_set_keepalive_idle_time";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_keepalive_idle_time";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_keepalive_idle_time";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
LABEL_5:

}

void sub_183559108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_keepalive_idle_time(void *a1)
{
  NWConcrete_nw_parameters *v1;
  NWConcrete_nw_parameters *v2;
  OS_nw_protocol_options *v3;
  OS_nw_protocol_options *v4;
  uint64_t keepalive_idle_time;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_parameters_copy_tcp_options(v1, 0);
    v4 = v3;
    if (v3)
      keepalive_idle_time = nw_tcp_options_get_keepalive_idle_time(v3);
    else
      keepalive_idle_time = 0;

    goto LABEL_6;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_get_keepalive_idle_time";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_keepalive_idle_time";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_get_keepalive_idle_time";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_keepalive_idle_time";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_keepalive_idle_time";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v8)
    free(v8);
  keepalive_idle_time = 0;
LABEL_6:

  return keepalive_idle_time;
}

void sub_1835593E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_keepalive_interval(void *a1, uint32_t a2)
{
  NWConcrete_nw_parameters *v3;
  NWConcrete_nw_parameters *v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_parameters_copy_tcp_options(v3, 1);
    v6 = v5;
    if (v5)
      nw_tcp_options_set_keepalive_interval(v5, a2);

    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_set_keepalive_interval";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_keepalive_interval";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_set_keepalive_interval";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_keepalive_interval";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_keepalive_interval";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
LABEL_5:

}

void sub_1835596AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_keepalive_interval(void *a1)
{
  NWConcrete_nw_parameters *v1;
  NWConcrete_nw_parameters *v2;
  OS_nw_protocol_options *v3;
  OS_nw_protocol_options *v4;
  uint64_t keepalive_interval;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_parameters_copy_tcp_options(v1, 0);
    v4 = v3;
    if (v3)
      keepalive_interval = nw_tcp_options_get_keepalive_interval(v3);
    else
      keepalive_interval = 0;

    goto LABEL_6;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_get_keepalive_interval";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_keepalive_interval";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_get_keepalive_interval";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_keepalive_interval";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_keepalive_interval";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v8)
    free(v8);
  keepalive_interval = 0;
LABEL_6:

  return keepalive_interval;
}

void sub_183559984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_keepalive_offload(void *a1, char a2)
{
  NWConcrete_nw_parameters *v3;
  NWConcrete_nw_parameters *v4;
  OS_nw_protocol_options *v5;
  OS_nw_protocol_options *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_parameters_copy_tcp_options(v3, 1);
    v6 = v5;
    if (v5)
      nw_tcp_options_set_enable_keepalive_offload(v5, a2);

    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_set_keepalive_offload";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_keepalive_offload";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_set_keepalive_offload";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_keepalive_offload";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_keepalive_offload";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
LABEL_5:

}

void sub_183559C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_keepalive_offload(void *a1)
{
  NWConcrete_nw_parameters *v1;
  NWConcrete_nw_parameters *v2;
  OS_nw_protocol_options *v3;
  OS_nw_protocol_options *v4;
  _BOOL8 enable_keepalive_offload;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_parameters_copy_tcp_options(v1, 0);
    v4 = v3;
    if (v3)
      enable_keepalive_offload = nw_tcp_options_get_enable_keepalive_offload(v3);
    else
      enable_keepalive_offload = 0;

    goto LABEL_6;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_get_keepalive_offload";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_keepalive_offload";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_get_keepalive_offload";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_keepalive_offload";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_keepalive_offload";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v8)
    free(v8);
  enable_keepalive_offload = 0;
LABEL_6:

  return enable_keepalive_offload;
}

void sub_183559F28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_minimum_tls_protocol_version(void *a1)
{
  NWConcrete_nw_parameters *v1;
  NWConcrete_nw_parameters *v2;
  id v3;
  void *v4;
  NSObject *v5;
  SSLProtocol v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_parameters_copy_tls_options(v1);
    v4 = v3;
    if (v3)
    {
      v5 = v3;
      v6 = tls_helper_SSLProtocol_from_version();
      sec_protocol_options_set_tls_min_version(v5, v6);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_set_minimum_tls_protocol_version";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_minimum_tls_protocol_version";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_set_minimum_tls_protocol_version";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_minimum_tls_protocol_version";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_minimum_tls_protocol_version";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
LABEL_5:

}

void sub_18355A204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_parameters_copy_tls_options(NWConcrete_nw_parameters *a1)
{
  NWConcrete_nw_parameters *v1;
  NSObject *p_super;
  void *v3;
  void *v4;
  NWConcrete_nw_protocol_options *options;
  void *v6;
  NSObject *v7;
  id v8;
  _QWORD iterate_block[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;
  uint8_t buf[4];
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__19149;
  v15 = __Block_byref_object_dispose__19150;
  v16 = 0;
  p_super = &v1->default_stack->super;
  if (!p_super
    || (iterate_block[0] = MEMORY[0x1E0C809B0],
        iterate_block[1] = 3221225472,
        iterate_block[2] = ___ZL30nw_parameters_copy_tls_optionsP24NWConcrete_nw_parametersb_block_invoke,
        iterate_block[3] = &unk_1E14A0FD8,
        iterate_block[4] = &v11,
        nw_protocol_stack_iterate_application_protocols(p_super, iterate_block),
        (v3 = (void *)v12[5]) == 0))
  {
    v4 = (void *)nw_protocol_boringssl_copy_definition();
    options = nw_protocol_create_options(v4);

    v6 = (void *)v12[5];
    v12[5] = (uint64_t)options;

    nw_protocol_stack_append_application_protocol(v1->default_stack, (void *)v12[5]);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v18 = "nw_parameters_copy_tls_options";
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s TLS-specific parameter set without TLS set, adding TLS", buf, 0xCu);
    }

    v3 = (void *)v12[5];
  }
  v8 = v3;
  _Block_object_dispose(&v11, 8);

  return v8;
}

void sub_18355A3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;

  v22 = v21;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void ___ZL30nw_parameters_copy_tls_optionsP24NWConcrete_nw_parametersb_block_invoke(uint64_t a1, void *a2)
{
  void *v4;
  nw_protocol_definition_t v5;
  _BOOL4 is_equal_unsafe;
  NSObject *options;

  options = a2;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    v4 = (void *)nw_protocol_boringssl_copy_definition();
    v5 = nw_protocol_options_copy_definition(options);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, (uint64_t)v5);

    if (is_equal_unsafe)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  }

}

void sub_18355A4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_minimum_tls_protocol_version(void *a1)
{
  id v1;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_parameters_get_minimum_tls_protocol_version";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_get_minimum_tls_protocol_version";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_parameters_get_minimum_tls_protocol_version";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_get_minimum_tls_protocol_version";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_get_minimum_tls_protocol_version";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_19:
  if (v4)
    free(v4);
LABEL_2:

  return 0;
}

void nw_parameters_set_maximum_tls_protocol_version(void *a1)
{
  NWConcrete_nw_parameters *v1;
  NWConcrete_nw_parameters *v2;
  id v3;
  void *v4;
  NSObject *v5;
  SSLProtocol v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_parameters_copy_tls_options(v1);
    v4 = v3;
    if (v3)
    {
      v5 = v3;
      v6 = tls_helper_SSLProtocol_from_version();
      sec_protocol_options_set_tls_max_version(v5, v6);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_set_maximum_tls_protocol_version";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_maximum_tls_protocol_version";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_set_maximum_tls_protocol_version";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_maximum_tls_protocol_version";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_maximum_tls_protocol_version";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
LABEL_5:

}

void sub_18355AA18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_maximum_tls_protocol_version(void *a1)
{
  id v1;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_parameters_get_maximum_tls_protocol_version";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_get_maximum_tls_protocol_version";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_parameters_get_maximum_tls_protocol_version";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_get_maximum_tls_protocol_version";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_get_maximum_tls_protocol_version";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_19:
  if (v4)
    free(v4);
LABEL_2:

  return 0;
}

void nw_parameters_set_ssl_cipher_suites(void *a1, tls_ciphersuite_t *a2, int a3)
{
  uint64_t v3;
  NWConcrete_nw_parameters *v5;
  NWConcrete_nw_parameters *v6;
  id v7;
  void *v8;
  NSObject *v9;
  tls_ciphersuite_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  LODWORD(v3) = a3;
  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parameters_set_ssl_cipher_suites";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25))
      goto LABEL_43;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parameters_set_ssl_cipher_suites";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_parameters_set_ssl_cipher_suites";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v12)
          goto LABEL_9;
LABEL_44:
        free(v12);
        goto LABEL_9;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parameters_set_ssl_cipher_suites";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parameters_set_ssl_cipher_suites";
        _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_42:

    goto LABEL_43;
  }
  if (a2)
  {
    v7 = nw_parameters_copy_tls_options(v5);
    v8 = v7;
    if (v7)
    {
      v9 = v7;
      if ((_DWORD)v3)
      {
        v3 = v3;
        do
        {
          v10 = *a2++;
          sec_protocol_options_append_tls_ciphersuite(v9, v10);
          --v3;
        }
        while (v3);
      }

    }
    goto LABEL_9;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_parameters_set_ssl_cipher_suites";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v12, &type, &v25))
    goto LABEL_43;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_parameters_set_ssl_cipher_suites";
      _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null cipher_suites", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (!v25)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_parameters_set_ssl_cipher_suites";
      _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null cipher_suites, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_42;
  }
  v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  v21 = type;
  v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_parameters_set_ssl_cipher_suites";
      _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s called with null cipher_suites, no backtrace", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_parameters_set_ssl_cipher_suites";
    v29 = 2082;
    v30 = v20;
    _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s called with null cipher_suites, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12)
    goto LABEL_44;
LABEL_9:

}

void sub_18355B1A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_get_ssl_cipher_suites(void *a1, uint64_t a2, _DWORD *a3)
{
  id v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  os_log_type_t v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parameters_get_ssl_cipher_suites";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_parameters_get_ssl_cipher_suites";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v7)
          goto LABEL_5;
LABEL_56:
        free(v7);
        goto LABEL_5;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_182FBE000, v8, v22, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!a2)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parameters_get_ssl_cipher_suites";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null cipher_suites", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_182FBE000, v8, v23, "%{public}s called with null cipher_suites, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v17 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v8, type);
    if (!v17)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null cipher_suites, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_parameters_get_ssl_cipher_suites";
      v29 = 2082;
      v30 = v17;
      _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null cipher_suites, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!a3)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parameters_get_ssl_cipher_suites";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null count", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_182FBE000, v8, v24, "%{public}s called with null count, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v17 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v8, type);
    if (!v17)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s called with null count, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_parameters_get_ssl_cipher_suites";
      v29 = 2082;
      v30 = v17;
      _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s called with null count, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v17);
    if (!v7)
      goto LABEL_5;
    goto LABEL_56;
  }
  *a3 = 0;
LABEL_5:

}

void nw_parameters_set_tls_session_ticket_enabled(void *a1, BOOL a2)
{
  NWConcrete_nw_parameters *v3;
  NWConcrete_nw_parameters *v4;
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_parameters_copy_tls_options(v3);
    v6 = v5;
    if (v5)
    {
      v7 = v5;
      sec_protocol_options_set_tls_tickets_enabled(v7, a2);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_parameters_set_tls_session_ticket_enabled";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_parameters_set_tls_session_ticket_enabled";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_parameters_set_tls_session_ticket_enabled";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_parameters_set_tls_session_ticket_enabled";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_parameters_set_tls_session_ticket_enabled";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v9)
    free(v9);
LABEL_5:

}

void sub_18355BB28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_tls_session_ticket_enabled(void *a1)
{
  id v1;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_parameters_get_tls_session_ticket_enabled";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_get_tls_session_ticket_enabled";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_parameters_get_tls_session_ticket_enabled";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_get_tls_session_ticket_enabled";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_get_tls_session_ticket_enabled";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_19:
  if (v4)
    free(v4);
LABEL_2:

  return 0;
}

void nw_parameters_set_tls_enforce_ev(void *a1)
{
  id v1;
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  char *backtrace_string;
  os_log_type_t v7;
  _BOOL4 v8;
  os_log_type_t v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_parameters_set_tls_enforce_ev";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_parameters_set_tls_enforce_ev";
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_parameters_set_tls_enforce_ev";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_parameters_set_tls_enforce_ev";
        _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_parameters_set_tls_enforce_ev";
        _os_log_impl(&dword_182FBE000, v4, v9, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_19:
  if (v3)
    free(v3);
LABEL_2:

}

void nw_parameters_set_receive_any_interface(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 512;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFFFFFDFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_receive_any_interface";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_receive_any_interface";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_receive_any_interface";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_receive_any_interface";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_receive_any_interface";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

uint64_t nw_parameters_get_receive_any_interface(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[97] >> 1) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_receive_any_interface";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_receive_any_interface";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_receive_any_interface";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_receive_any_interface";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_receive_any_interface";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_ecn_mode(void *a1, unsigned int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_parameters_set_ecn_mode";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_ecn_mode";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_ecn_mode";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_ecn_mode";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_ecn_mode";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2 < 0xFF)
  {
    *((_BYTE *)v3 + 93) = a2;
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_ecn_mode";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_set_ecn_mode";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null (static_cast<uint32_t>(ecn_mode) < UINT8_MAX)", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_set_ecn_mode";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null (static_cast<uint32_t>(ecn_mode) < UINT8_MAX), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_set_ecn_mode";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null (static_cast<uint32_t>(ecn_mode) < UINT8_MAX), no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_parameters_set_ecn_mode";
    v23 = 2082;
    v24 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null (static_cast<uint32_t>(ecn_mode) < UINT8_MAX), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

void nw_parameters_set_background_traffic_management(void *a1, char a2)
{
  NWConcrete_nw_parameters *v3;
  NWConcrete_nw_parameters *v4;
  OS_nw_protocol_options *v5;
  OS_nw_protocol_options *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_parameters_copy_tcp_options(v3, 1);
    v6 = v5;
    if (v5)
      nw_tcp_options_set_enable_background_traffic_management(v5, a2);

    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_set_background_traffic_management";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_background_traffic_management";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_set_background_traffic_management";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_background_traffic_management";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_background_traffic_management";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
LABEL_5:

}

void sub_18355CCF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_background_traffic_management(void *a1)
{
  NWConcrete_nw_parameters *v1;
  NWConcrete_nw_parameters *v2;
  OS_nw_protocol_options *v3;
  OS_nw_protocol_options *v4;
  _BOOL8 enable_background_traffic_management;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_parameters_copy_tcp_options(v1, 0);
    v4 = v3;
    if (v3)
      enable_background_traffic_management = nw_tcp_options_get_enable_background_traffic_management(v3);
    else
      enable_background_traffic_management = 0;

    goto LABEL_6;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_get_background_traffic_management";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_background_traffic_management";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_get_background_traffic_management";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_background_traffic_management";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_get_background_traffic_management";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v8)
    free(v8);
  enable_background_traffic_management = 0;
LABEL_6:

  return enable_background_traffic_management;
}

void sub_18355CFCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_initial_data_payload(void *a1, void *a2)
{
  id *v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_parameters_set_initial_data_payload";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_parameters_set_initial_data_payload";
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_22;
      }
      if (!v20)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_parameters_set_initial_data_payload";
          _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_parameters_set_initial_data_payload";
          _os_log_impl(&dword_182FBE000, v8, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_22;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_parameters_set_initial_data_payload";
        v24 = 2082;
        v25 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v17, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_23:
    if (!v7)
      goto LABEL_5;
LABEL_24:
    free(v7);
    goto LABEL_5;
  }
  if (!v4 || dispatch_data_get_size(v4))
  {
    objc_storeStrong(v3 + 18, a2);
    goto LABEL_5;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v23 = "nw_parameters_set_initial_data_payload";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20))
    goto LABEL_23;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    v9 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_set_initial_data_payload";
      _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s initial_data_payload is empty", buf, 0xCu);
    }
LABEL_22:

    goto LABEL_23;
  }
  if (!v20)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    v13 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_set_initial_data_payload";
      _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s initial_data_payload is empty, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_22;
  }
  v10 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v8 = (id)gLogObj;
  v11 = type;
  v12 = os_log_type_enabled(v8, type);
  if (!v10)
  {
    if (v12)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_set_initial_data_payload";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s initial_data_payload is empty, no backtrace", buf, 0xCu);
    }
    goto LABEL_22;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_parameters_set_initial_data_payload";
    v24 = 2082;
    v25 = v10;
    _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s initial_data_payload is empty, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v10);
  if (v7)
    goto LABEL_24;
LABEL_5:

}

id nw_parameters_copy_initial_data_payload(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[18];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_copy_initial_data_payload";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_copy_initial_data_payload";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_copy_initial_data_payload";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_copy_initial_data_payload";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_copy_initial_data_payload";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL __nw_parameters_has_protocol_at_level_block_invoke(uint64_t a1, int a2, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4;
  char *identifier;
  _BOOL4 v6;
  _BOOL8 v7;

  v4 = nw_protocol_options_copy_definition(options);
  identifier = nw_protocol_definition_get_identifier(v4);
  v6 = nw_protocols_are_equal(*(_QWORD **)(a1 + 40), identifier);
  if (v6)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v7 = !v6;

  return v7;
}

BOOL nw_parameters_has_proxy_protocol_in_effective_config(void *a1)
{
  id v1;
  nw_protocol_stack_t *v2;
  id v3;
  void *v4;
  _DWORD *v5;
  int v6;
  nw_protocol_options_t v7;
  nw_protocol_options_t v8;
  id *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  _BOOL8 v13;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  os_log_type_t v27;
  _QWORD iterate_block[5];
  os_log_type_t type[7];
  char v30;
  _BYTE buf[24];
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (nw_protocol_stack_t *)v1;
  if (v1)
  {
    if (*((_QWORD *)v1 + 19))
    {
      v3 = *((id *)v1 + 23);
      v4 = v3;
      if (v3 && (v5 = v3, v6 = v5[38], v5, v6 == 1))
      {
        v7 = nw_protocol_stack_copy_transport_protocol(v2[19]);
        v8 = v7;
        if (v7)
        {
          v9 = v7;
          v10 = v9[1];

          *(_DWORD *)type = 4;
          v11 = nw_proxy_config_copy_protocol_stack(v5, v10, type);
          v12 = v11;
          if (v11)
          {
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x2020000000;
            v32 = 0;
            iterate_block[0] = MEMORY[0x1E0C809B0];
            iterate_block[1] = 3221225472;
            iterate_block[2] = __nw_parameters_has_proxy_protocol_in_effective_config_block_invoke;
            iterate_block[3] = &unk_1E14A0FD8;
            iterate_block[4] = buf;
            nw_protocol_stack_iterate_application_protocols(v11, iterate_block);
            v13 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
            _Block_object_dispose(buf, 8);
          }
          else
          {
            v13 = 0;
          }

        }
        else
        {
          v13 = 0;
        }

      }
      else
      {
        v13 = 0;
      }

      goto LABEL_14;
    }
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
    v16 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v16, type, &v30))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v20 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null parameters->default_stack", buf, 0xCu);
        }
LABEL_46:

        goto LABEL_47;
      }
      if (!v30)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v27 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s called with null parameters->default_stack, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_46;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v24 = type[0];
      v25 = os_log_type_enabled(v17, type[0]);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null parameters->default_stack, no backtrace", buf, 0xCu);
        }
        goto LABEL_46;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null parameters->default_stack, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_34;
    }
  }
  else
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
    v16 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v16, type, &v30))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_46;
      }
      if (!v30)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v26 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_46;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v22 = type[0];
      v23 = os_log_type_enabled(v17, type[0]);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_46;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_34:

      free(backtrace_string);
    }
  }
LABEL_47:
  if (v16)
    free(v16);
  v13 = 0;
LABEL_14:

  return v13;
}

void sub_18355DD78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void __nw_parameters_has_proxy_protocol_in_effective_config_block_invoke(uint64_t a1, nw_protocol_options_t options)
{
  nw_protocol_definition_t v3;

  v3 = nw_protocol_options_copy_definition(options);
  if (nw_protocol_definition_is_proxy(v3))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;

}

BOOL nw_parameters_has_multiplexed_protocol_in_stack(void *a1)
{
  id v1;
  _BOOL8 has_protocol_in_stack;
  int *quic_stream_protocol_identifier;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    if (nw_protocol_http2_transport_identifier::onceToken != -1)
      dispatch_once(&nw_protocol_http2_transport_identifier::onceToken, &__block_literal_global_36847);
    if (nw_parameters_has_protocol_in_stack(v1, &g_http2_transport_protocol_identifier))
      goto LABEL_8;
    if (nw_protocol_http2_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_83230);
    if (nw_parameters_has_protocol_in_stack(v1, &nw_protocol_http2_identifier::http2_protocol_identifier))
    {
LABEL_8:
      has_protocol_in_stack = 1;
    }
    else
    {
      quic_stream_protocol_identifier = nw_protocol_get_quic_stream_protocol_identifier();
      has_protocol_in_stack = nw_parameters_has_protocol_in_stack(v1, quic_stream_protocol_identifier);
    }
    goto LABEL_10;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_27:
  if (v6)
    free(v6);
  has_protocol_in_stack = 0;
LABEL_10:

  return has_protocol_in_stack;
}

void sub_18355E108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_internal_iterate_protocol_stack_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  nw_protocol_definition_t v5;
  uint64_t v6;

  v4 = a3;
  v5 = nw_protocol_options_copy_definition(v4);
  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  return v6;
}

void sub_18355E194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_protocol_stack_application_protocols_are_equal_below(void *a1, uint64_t a2, void *a3, uint64_t a4, int a5, _QWORD *a6, _QWORD *a7)
{
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  char *backtrace_string;
  os_log_type_t v33;
  _BOOL4 v34;
  void *v35;
  os_log_type_t v36;
  os_log_type_t v37;
  os_log_type_t v38;
  _BOOL4 v39;
  NSObject *v40;
  os_log_type_t v41;
  _QWORD v42[4];
  _QWORD *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  _QWORD v52[11];
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[7];
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[24];
  _QWORD *v63;
  _BYTE buf[24];
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v13 = a1;
  v14 = a3;
  v15 = v14;
  if (a4)
  {
    v16 = 1;
    if (!v13 || !v14 || !v13[2] || !v14[2])
      goto LABEL_30;
    v17 = *(_QWORD *)(a4 + 16);
    if (v17)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v65 = 0;
      v58 = 0;
      v59 = &v58;
      v60 = 0x2020000000;
      v61 = 0;
      v18 = MEMORY[0x1E0C809B0];
      v57[0] = MEMORY[0x1E0C809B0];
      v57[1] = 3221225472;
      v57[2] = ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke;
      v57[3] = &unk_1E149D150;
      v57[5] = buf;
      v57[6] = a4;
      v57[4] = &v58;
      nw_protocol_stack_iterate_application_protocols_with_index(v14, v57);
      if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          v40 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v62 = 136446722;
            *(_QWORD *)&v62[4] = "nw_protocol_stack_application_protocols_are_equal_below";
            *(_WORD *)&v62[12] = 2048;
            *(_QWORD *)&v62[14] = a4;
            *(_WORD *)&v62[22] = 2048;
            v63 = v15;
            _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_DEBUG, "%{public}s join protocol %p not in protocol stack %p", v62, 0x20u);
          }

        }
        v16 = 0;
        goto LABEL_29;
      }
      v19 = v13[1];
      if (v19)
        v19 = (uint64_t)(*(_QWORD *)(v19 + 24) - *(_QWORD *)(v19 + 16)) >> 3;
      v20 = v13[2];
      if (v20)
      {
        v21 = (uint64_t)(*(_QWORD *)(v20 + 24) - *(_QWORD *)(v20 + 16)) >> 3;
        v22 = v15[1];
        if (!v22)
        {
LABEL_13:
          v23 = v21 + v19;
          v24 = v15[2];
          if (v24)
            v24 = (uint64_t)(*(_QWORD *)(v24 + 24) - *(_QWORD *)(v24 + 16)) >> 3;
          *(_QWORD *)v62 = 0;
          *(_QWORD *)&v62[8] = v62;
          *(_QWORD *)&v62[16] = 0x2020000000;
          LOBYTE(v63) = 0;
          v53 = 0;
          v54 = &v53;
          v55 = 0x2020000000;
          v56 = 0;
          v52[0] = v18;
          v52[1] = 3221225472;
          v52[2] = ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke_377;
          v52[3] = &unk_1E149D178;
          v52[8] = v23;
          v52[9] = v24 + v22;
          v52[10] = a2;
          v52[4] = &v58;
          v52[5] = &v53;
          v52[6] = v62;
          v52[7] = v17;
          nw_protocol_stack_iterate_application_protocols_with_index(v13, v52);
          if (*(_BYTE *)(*(_QWORD *)&v62[8] + 24) && *(_BYTE *)(*(_QWORD *)&buf[8] + 24))
          {
            v48 = 0;
            v49 = &v48;
            v50 = 0x2020000000;
            v51 = 0;
            v42[0] = v18;
            v42[1] = 3221225472;
            v42[2] = ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke_2;
            v42[3] = &unk_1E149D1A0;
            v44 = &v53;
            v43 = v15;
            v45 = &v58;
            v46 = &v48;
            v47 = a5;
            nw_protocol_stack_iterate_application_protocols_with_index(v13, v42);
            v16 = *((_BYTE *)v49 + 24) == 0;

            _Block_object_dispose(&v48, 8);
            if (a6)
              v25 = a7 == 0;
            else
              v25 = 1;
            if (!v25 && v16)
            {
              *a6 = v54[3];
              *a7 = v59[3];
              v16 = 1;
            }
          }
          else
          {
            v16 = 0;
          }
          _Block_object_dispose(&v53, 8);
          _Block_object_dispose(v62, 8);
LABEL_29:
          _Block_object_dispose(&v58, 8);
          _Block_object_dispose(buf, 8);
          goto LABEL_30;
        }
      }
      else
      {
        v21 = 0;
        v22 = v15[1];
        if (!v22)
          goto LABEL_13;
      }
      v22 = (uint64_t)(*(_QWORD *)(v22 + 24) - *(_QWORD *)(v22 + 16)) >> 3;
      goto LABEL_13;
    }
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
    v29 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v58) = 16;
    v62[0] = 0;
    if (__nwlog_fault(v29, &v58, v62))
    {
      if (v58 == 17)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v36 = v58;
        if (os_log_type_enabled(v30, (os_log_type_t)v58))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
          _os_log_impl(&dword_182FBE000, v30, v36, "%{public}s called with null join_identifier", buf, 0xCu);
        }
LABEL_67:

        goto LABEL_68;
      }
      if (!v62[0])
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v41 = v58;
        if (os_log_type_enabled(v30, (os_log_type_t)v58))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
          _os_log_impl(&dword_182FBE000, v30, v41, "%{public}s called with null join_identifier, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_67;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v38 = v58;
      v39 = os_log_type_enabled(v30, (os_log_type_t)v58);
      if (!backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
          _os_log_impl(&dword_182FBE000, v30, v38, "%{public}s called with null join_identifier, no backtrace", buf, 0xCu);
        }
        goto LABEL_67;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v30, v38, "%{public}s called with null join_identifier, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_42;
    }
  }
  else
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
    v29 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v58) = 16;
    v62[0] = 0;
    if (__nwlog_fault(v29, &v58, v62))
    {
      if (v58 == 17)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = v58;
        if (os_log_type_enabled(v30, (os_log_type_t)v58))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null join_protocol", buf, 0xCu);
        }
        goto LABEL_67;
      }
      if (!v62[0])
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v37 = v58;
        if (os_log_type_enabled(v30, (os_log_type_t)v58))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
          _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s called with null join_protocol, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_67;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v33 = v58;
      v34 = os_log_type_enabled(v30, (os_log_type_t)v58);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
          _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null join_protocol, no backtrace", buf, 0xCu);
        }
        goto LABEL_67;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null join_protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_42:

      free(backtrace_string);
    }
  }
LABEL_68:
  if (v29)
    free(v29);
  v16 = 0;
LABEL_30:

  return v16;
}

uint64_t __nw_parameters_inherit_protocol_instances_block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  NSObject *v5;
  NSObject *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  nw_protocol_definition_t v10;
  void *v11;
  void *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;

  v5 = a3;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = a2 - v7;
  if (a2 > v7)
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = nw_protocol_options_copy_definition(v5);
    v11 = (void *)nw_protocol_stack_copy_application_protocol_at_index(*(NWConcrete_nw_protocol_stack **)(a1 + 32), v8 + v9);
    v12 = v11;
    if (v6 && v11 && nw_protocol_options_matches_definition(v11, v10))
    {
      v13 = v12;
      v14 = v6;
      snprintf(v14 + 48, 0x54uLL, "%s", v13 + 48);
      *((_WORD *)v14 + 68) = *((_WORD *)v13 + 68);

      v15 = v13;
      v16 = *((_QWORD *)v15 + 2);

      v17 = v14;
      *((_QWORD *)v17 + 2) = v16;

    }
  }

  return 1;
}

void sub_18355EA1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_protocol_stack_iterate_application_protocols_with_index(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  unsigned __int8 *v5;
  uint64_t v6;
  id v7;
  unsigned __int8 *v8;
  _QWORD v9[4];
  id v10;
  _QWORD *v11;
  _QWORD v12[4];
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  _QWORD v20[4];

  v3 = a1;
  v4 = a2;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2020000000;
  v20[3] = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v5 = (unsigned __int8 *)v3[1];
  v6 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZL58nw_protocol_stack_iterate_application_protocols_with_indexP28NWConcrete_nw_protocol_stackU13block_pointerFbmPU33objcproto22OS_nw_protocol_options8NSObjectE_block_invoke;
  v12[3] = &unk_1E149D1C8;
  v7 = v4;
  v13 = v7;
  v14 = v20;
  v15 = &v16;
  nw_array_apply(v5, (uint64_t)v12);
  if (!*((_BYTE *)v17 + 24))
  {
    v8 = (unsigned __int8 *)v3[2];
    v9[0] = v6;
    v9[1] = 3221225472;
    v9[2] = ___ZL58nw_protocol_stack_iterate_application_protocols_with_indexP28NWConcrete_nw_protocol_stackU13block_pointerFbmPU33objcproto22OS_nw_protocol_options8NSObjectE_block_invoke_2;
    v9[3] = &unk_1E149D1F0;
    v10 = v7;
    v11 = v20;
    nw_array_apply(v8, (uint64_t)v9);

  }
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(v20, 8);

}

uint64_t ___ZL58nw_protocol_stack_iterate_application_protocols_with_indexP28NWConcrete_nw_protocol_stackU13block_pointerFbmPU33objcproto22OS_nw_protocol_options8NSObjectE_block_invoke(_QWORD *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(a1[4] + 16))();
  ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  if ((result & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  return result;
}

uint64_t ___ZL58nw_protocol_stack_iterate_application_protocols_with_indexP28NWConcrete_nw_protocol_stackU13block_pointerFbmPU33objcproto22OS_nw_protocol_options8NSObjectE_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return result;
}

uint64_t nw_protocol_stack_copy_application_protocol_at_index(NWConcrete_nw_protocol_stack *a1, unint64_t a2)
{
  NWConcrete_nw_protocol_stack *v3;
  NWConcrete_nw_protocol_stack *v4;
  uint64_t persistent_application_protocols;
  unint64_t v6;
  uint64_t v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    persistent_application_protocols = (uint64_t)v3->persistent_application_protocols;
    if (persistent_application_protocols)
    {
      v6 = (uint64_t)(*(_QWORD *)(persistent_application_protocols + 24)
                   - *(_QWORD *)(persistent_application_protocols + 16)) >> 3;
      if (v6 > a2)
        goto LABEL_7;
    }
    else
    {
      v6 = 0;
    }
    a2 -= v6;
    persistent_application_protocols = (uint64_t)v4->application_protocols;
LABEL_7:
    nw_array_get_object_at_index(persistent_application_protocols, a2);
    v7 = objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_protocol_stack_copy_application_protocol_at_index";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_stack_copy_application_protocol_at_index";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_protocol_stack_copy_application_protocol_at_index";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_stack_copy_application_protocol_at_index";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_stack_copy_application_protocol_at_index";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_8:

  return v7;
}

BOOL ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t protocol_handle;
  uint64_t v6;

  protocol_handle = nw_protocol_options_get_protocol_handle(a3);
  v6 = a1[6];
  if (protocol_handle == v6)
  {
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
  }
  return protocol_handle != v6;
}

uint64_t ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke_377(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  char *identifier;
  uint64_t v7;
  uint64_t v8;

  v5 = a3;
  identifier = nw_protocol_parameters_get_identifier(v5);
  if (nw_protocols_are_equal(identifier, *(_QWORD **)(a1 + 56))
    && *(_QWORD *)(a1 + 64) - a2 == *(_QWORD *)(a1 + 72) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v7 = *(_QWORD *)(a1 + 80);
    v8 = 1;
    if (v7 == -1 || v7 == a2)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      v8 = 0;
    }
  }
  else
  {
    v8 = 1;
  }

  return v8;
}

uint64_t ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke_2(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  void *v9;
  uint64_t is_equal;

  v5 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v7 = a2 >= v6;
  v8 = a2 - v6;
  if (v8 != 0 && v7)
  {
    v9 = (void *)nw_protocol_stack_copy_application_protocol_at_index(*(NWConcrete_nw_protocol_stack **)(a1 + 32), v8 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
    is_equal = nw_protocol_option_is_equal(v5, v9);
    if ((is_equal & 1) == 0)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;

  }
  else
  {
    is_equal = 1;
  }

  return is_equal;
}

void sub_18355F074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *nw_protocol_parameters_get_identifier(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  id v4;
  char *identifier;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (id *)v1;
    v4 = v3[1];

    identifier = nw_protocol_definition_get_identifier(v4);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_parameters_get_identifier";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_parameters_get_identifier";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol_parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_parameters_get_identifier";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_parameters_get_identifier";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null protocol_parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_parameters_get_identifier";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null protocol_parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
  identifier = 0;
LABEL_3:

  return identifier;
}

void nw_parameters_log_protocol_instances(void *a1)
{
  id *v1;
  void **v2;
  id *v3;
  void *v4;
  id *v5;
  id v6;
  char *identifier;
  uint64_t protocol_handle;
  void *v9;
  id *v10;
  id v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id *v15;
  id v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id *v20;
  id v21;
  char *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  char *backtrace_string;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  _QWORD v44[4];
  id *v45;
  char v46;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  char *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  char *v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void **)v1[19];
  if (v2)
  {
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 3221225472;
    v44[2] = __nw_parameters_log_protocol_instances_block_invoke;
    v44[3] = &unk_1E149D070;
    v3 = v1;
    v45 = v3;
    nw_protocol_stack_iterate_application_protocols_with_index(v2, v44);
    v4 = v2[3];
    if (v4)
    {
      v5 = v4;
      v6 = v5[1];

      identifier = nw_protocol_definition_get_identifier(v6);
      protocol_handle = nw_protocol_options_get_protocol_handle(v2[3]);
      if (gLogDatapath)
      {
        v28 = protocol_handle;
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          v30 = v2[3];
          *(_DWORD *)buf = 136447234;
          v49 = "nw_parameters_log_protocol_instances";
          v50 = 2048;
          v51 = (char *)v3;
          v52 = 2048;
          v53 = v30;
          v54 = 2080;
          v55 = identifier;
          v56 = 2048;
          v57 = v28;
          _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s Parameters %p, transport, options %p (%s), protocol handle %p", buf, 0x34u);
        }

      }
    }
    v9 = v2[4];
    if (v9)
    {
      v10 = v9;
      v11 = v10[1];

      v12 = nw_protocol_definition_get_identifier(v11);
      v13 = nw_protocol_options_get_protocol_handle(v2[4]);
      if (gLogDatapath)
      {
        v31 = v13;
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          v33 = v2[4];
          *(_DWORD *)buf = 136447234;
          v49 = "nw_parameters_log_protocol_instances";
          v50 = 2048;
          v51 = (char *)v3;
          v52 = 2048;
          v53 = v33;
          v54 = 2080;
          v55 = v12;
          v56 = 2048;
          v57 = v31;
          _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s Parameters %p, secondary transport, options %p (%s), protocol handle %p", buf, 0x34u);
        }

      }
    }
    v14 = v2[6];
    if (v14)
    {
      v15 = v14;
      v16 = v15[1];

      v17 = nw_protocol_definition_get_identifier(v16);
      v18 = nw_protocol_options_get_protocol_handle(v2[6]);
      if (gLogDatapath)
      {
        v34 = v18;
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          v36 = v2[6];
          *(_DWORD *)buf = 136447234;
          v49 = "nw_parameters_log_protocol_instances";
          v50 = 2048;
          v51 = (char *)v3;
          v52 = 2048;
          v53 = v36;
          v54 = 2080;
          v55 = v17;
          v56 = 2048;
          v57 = v34;
          _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s Parameters %p, internet, options %p (%s), protocol handle %p", buf, 0x34u);
        }

      }
    }
    v19 = v2[7];
    if (v19)
    {
      v20 = v19;
      v21 = v20[1];

      v22 = nw_protocol_definition_get_identifier(v21);
      v23 = nw_protocol_options_get_protocol_handle(v2[7]);
      if (gLogDatapath)
      {
        v37 = v23;
        __nwlog_obj();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
          v39 = v2[7];
          *(_DWORD *)buf = 136447234;
          v49 = "nw_parameters_log_protocol_instances";
          v50 = 2048;
          v51 = (char *)v3;
          v52 = 2048;
          v53 = v39;
          v54 = 2080;
          v55 = v22;
          v56 = 2048;
          v57 = v37;
          _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s Parameters %p, link, options %p (%s), protocol handle %p", buf, 0x34u);
        }

      }
    }

    goto LABEL_15;
  }
  __nwlog_obj();
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v49 = "nw_parameters_log_protocol_instances";
  v25 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v46 = 0;
  if (__nwlog_fault(v25, &type, &v46))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_parameters_log_protocol_instances";
        _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      v42 = os_log_type_enabled(v26, type);
      if (backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          v49 = "nw_parameters_log_protocol_instances";
          v50 = 2082;
          v51 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v26, v41, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_44;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_parameters_log_protocol_instances";
        _os_log_impl(&dword_182FBE000, v26, v41, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_parameters_log_protocol_instances";
        _os_log_impl(&dword_182FBE000, v26, v43, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_44:
  if (v25)
    free(v25);
LABEL_15:

}

uint64_t __nw_parameters_log_protocol_instances_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  nw_protocol_definition_t v6;
  char *identifier;
  uint64_t protocol_handle;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  NSObject *v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = nw_protocol_options_copy_definition(v5);
  identifier = nw_protocol_definition_get_identifier(v6);
  protocol_handle = nw_protocol_options_get_protocol_handle(v5);
  if (gLogDatapath)
  {
    v10 = protocol_handle;
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 32);
      v13 = 136447490;
      v14 = "nw_parameters_log_protocol_instances_block_invoke";
      v15 = 2048;
      v16 = v12;
      v17 = 2048;
      v18 = a2;
      v19 = 2048;
      v20 = v5;
      v21 = 2080;
      v22 = identifier;
      v23 = 2048;
      v24 = v10;
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s Parameters %p, index %zu, options %p (%s), protocol handle %p", (uint8_t *)&v13, 0x3Eu);
    }

  }
  return 1;
}

uint64_t nw_protocol_parameters_iterate_stack(void *a1, int a2, _QWORD *a3, void *a4)
{
  id *v7;
  id v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  id *v13;
  id v14;
  char *identifier;
  NSObject *v16;
  void *v17;
  id *v18;
  char *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  void *v22;
  unsigned __int8 *v23;
  void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  void *v28;
  os_log_type_t v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  _BOOL4 v38;
  char *backtrace_string;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  os_log_type_t v43;
  os_log_type_t v44;
  _QWORD v46[4];
  void (**v47)(_QWORD, _QWORD, _QWORD);
  _QWORD *v48;
  _QWORD v49[4];
  void (**v50)(_QWORD, _QWORD, _QWORD);
  _QWORD *v51;
  char v52;
  os_log_type_t v53;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  char *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a4;
  v9 = (void (**)(_QWORD, _QWORD, _QWORD))v8;
  if (v7)
  {
    if (v8)
    {
      v10 = v7[19];
      v11 = v10;
      if (v10)
      {
        switch(a2)
        {
          case 2:
            v12 = (void *)v10[6];
            if (!v12)
              goto LABEL_73;
            v13 = v12;
            v14 = v13[1];

            identifier = nw_protocol_definition_get_identifier(v14);
            if (nw_protocols_are_equal(a3, identifier))
              v9[2](v9, 0, v11[6]);
            goto LABEL_14;
          case 3:
            v17 = (void *)v10[3];
            if (!v17)
              goto LABEL_73;
            v18 = v17;
            v14 = v18[1];

            v19 = nw_protocol_definition_get_identifier(v14);
            if (nw_protocols_are_equal(a3, v19))
              v9[2](v9, 0, v11[3]);
LABEL_14:

            v20 = 1;
            break;
          case 4:
            v21 = (unsigned __int8 *)v10[2];
            if (!v21)
              goto LABEL_73;
            v46[0] = MEMORY[0x1E0C809B0];
            v46[1] = 3221225472;
            v46[2] = __nw_protocol_parameters_iterate_stack_block_invoke_2;
            v46[3] = &unk_1E149D020;
            v48 = a3;
            v47 = v9;
            nw_array_apply(v21, (uint64_t)v46);
            v22 = v47;
            goto LABEL_19;
          case 5:
            v23 = (unsigned __int8 *)v10[1];
            if (!v23)
              goto LABEL_73;
            v49[0] = MEMORY[0x1E0C809B0];
            v49[1] = 3221225472;
            v49[2] = __nw_protocol_parameters_iterate_stack_block_invoke;
            v49[3] = &unk_1E149D020;
            v51 = a3;
            v50 = v9;
            nw_array_apply(v23, (uint64_t)v49);
            v22 = v50;
LABEL_19:

            v20 = 1;
            break;
          default:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v16 = (id)gLogObj;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v55 = "nw_protocol_parameters_iterate_stack";
              v56 = 1024;
              LODWORD(v57) = a2;
              _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s Unsupported protocol level %u", buf, 0x12u);
            }

            goto LABEL_73;
        }
LABEL_74:

        goto LABEL_75;
      }
      __nwlog_obj();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v55 = "nw_protocol_parameters_iterate_stack";
      v31 = (char *)_os_log_send_and_compose_impl();

      v53 = OS_LOG_TYPE_ERROR;
      v52 = 0;
      if (__nwlog_fault(v31, &v53, &v52))
      {
        if (v53 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v32 = objc_claimAutoreleasedReturnValue();
          v33 = v53;
          if (os_log_type_enabled(v32, v53))
          {
            *(_DWORD *)buf = 136446210;
            v55 = "nw_protocol_parameters_iterate_stack";
            _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null stack", buf, 0xCu);
          }
        }
        else if (v52)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v32 = objc_claimAutoreleasedReturnValue();
          v40 = v53;
          v41 = os_log_type_enabled(v32, v53);
          if (backtrace_string)
          {
            if (v41)
            {
              *(_DWORD *)buf = 136446466;
              v55 = "nw_protocol_parameters_iterate_stack";
              v56 = 2082;
              v57 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v32, v40, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_71;
          }
          if (v41)
          {
            *(_DWORD *)buf = 136446210;
            v55 = "nw_protocol_parameters_iterate_stack";
            _os_log_impl(&dword_182FBE000, v32, v40, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v32 = objc_claimAutoreleasedReturnValue();
          v44 = v53;
          if (os_log_type_enabled(v32, v53))
          {
            *(_DWORD *)buf = 136446210;
            v55 = "nw_protocol_parameters_iterate_stack";
            _os_log_impl(&dword_182FBE000, v32, v44, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_71:
      if (v31)
        free(v31);
LABEL_73:
      v20 = 0;
      goto LABEL_74;
    }
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_protocol_parameters_iterate_stack";
    v25 = (char *)_os_log_send_and_compose_impl();

    v53 = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (__nwlog_fault(v25, &v53, &v52))
    {
      if (v53 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v29 = v53;
        if (os_log_type_enabled(v26, v53))
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_182FBE000, v26, v29, "%{public}s called with null iterator", buf, 0xCu);
        }
LABEL_64:

        goto LABEL_65;
      }
      if (!v52)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v43 = v53;
        if (os_log_type_enabled(v26, v53))
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_182FBE000, v26, v43, "%{public}s called with null iterator, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_64;
      }
      v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v37 = v53;
      v38 = os_log_type_enabled(v26, v53);
      if (!v34)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_182FBE000, v26, v37, "%{public}s called with null iterator, no backtrace", buf, 0xCu);
        }
        goto LABEL_64;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        v55 = "nw_protocol_parameters_iterate_stack";
        v56 = 2082;
        v57 = v34;
        _os_log_impl(&dword_182FBE000, v26, v37, "%{public}s called with null iterator, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_44;
    }
  }
  else
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_protocol_parameters_iterate_stack";
    v25 = (char *)_os_log_send_and_compose_impl();

    v53 = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (__nwlog_fault(v25, &v53, &v52))
    {
      if (v53 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = v53;
        if (os_log_type_enabled(v26, v53))
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_64;
      }
      if (!v52)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v42 = v53;
        if (os_log_type_enabled(v26, v53))
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_182FBE000, v26, v42, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_64;
      }
      v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v35 = v53;
      v36 = os_log_type_enabled(v26, v53);
      if (!v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_182FBE000, v26, v35, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_64;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v55 = "nw_protocol_parameters_iterate_stack";
        v56 = 2082;
        v57 = v34;
        _os_log_impl(&dword_182FBE000, v26, v35, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_44:

      free(v34);
    }
  }
LABEL_65:
  if (v25)
    free(v25);
  v20 = 0;
LABEL_75:

  return v20;
}

void sub_18356034C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_parameters_iterate_stack_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  nw_protocol_definition_t v5;
  char *identifier;
  uint64_t v7;

  v4 = a3;
  v5 = nw_protocol_options_copy_definition(v4);
  identifier = nw_protocol_definition_get_identifier(v5);
  if (nw_protocols_are_equal(*(_QWORD **)(a1 + 40), identifier))
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  else
    v7 = 1;

  return v7;
}

void sub_1835603E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_parameters_iterate_stack_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  nw_protocol_definition_t v5;
  char *identifier;
  uint64_t v7;

  v4 = a3;
  v5 = nw_protocol_options_copy_definition(v4);
  identifier = nw_protocol_definition_get_identifier(v5);
  if (nw_protocols_are_equal(*(_QWORD **)(a1 + 40), identifier))
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  else
    v7 = 1;

  return v7;
}

void sub_183560474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_parameters_copy_value(void *a1, const char *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_parameters_copy_protocol_value_from_parameters(v3, a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_parameters_copy_value";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_parameters_copy_value";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol_parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_parameters_copy_value";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_parameters_copy_value";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null protocol_parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_parameters_copy_value";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null protocol_parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_3:

  return v5;
}

void sub_183560728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_copy_protocol_value_from_parameters(void *a1, const char *a2)
{
  id v3;
  void *v4;
  id *v5;
  id v6;
  uint64_t v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = (id *)v3;
    v6 = v5[5];

    if (v6 && object_getClass(v6) == (Class)MEMORY[0x1E0C812F8])
    {
      xpc_dictionary_get_value(v6, a2);
      v7 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = 0;
    }

    goto LABEL_7;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_parameters_copy_protocol_value_from_parameters";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_parameters_copy_protocol_value_from_parameters";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null protocol_parameters", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_parameters_copy_protocol_value_from_parameters";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_parameters_copy_protocol_value_from_parameters";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null protocol_parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_parameters_copy_protocol_value_from_parameters";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null protocol_parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_7:

  return v7;
}

void sub_183560A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_parameters_copy_protocol_value_from_level(void *a1, int a2, uint64_t a3, const char *a4)
{
  id *v7;
  void **v8;
  void **v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  void *v19;
  NSObject *v20;
  id v21;
  unsigned __int8 *v22;
  BOOL (*v23)(uint64_t, uint64_t, void *);
  uint64_t *v24;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  int v40;
  _BYTE v41[24];
  uint64_t (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t);
  id v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = (void **)v7[19];
  v9 = v8;
  if (v8)
  {
    *(_QWORD *)v41 = 0;
    *(_QWORD *)&v41[8] = v41;
    *(_QWORD *)&v41[16] = 0x3032000000;
    v42 = __Block_byref_object_copy__19149;
    v43 = __Block_byref_object_dispose__19150;
    v44 = 0;
    switch(a2)
    {
      case 2:
        v10 = v8[6];
        if (!v10)
          goto LABEL_18;
        v11 = v10;
        v12 = v11[2];

        if (v12)
          v13 = v12 == a3;
        else
          v13 = 0;
        if (!v13)
          goto LABEL_24;
        v14 = nw_parameters_copy_protocol_value_from_parameters(v9[6], a4);
        goto LABEL_17;
      case 3:
        v15 = v8[3];
        if (!v15)
          goto LABEL_18;
        v16 = v15;
        v17 = v16[2];

        if (v17)
          v18 = v17 == a3;
        else
          v18 = 0;
        if (v18)
        {
          v14 = nw_parameters_copy_protocol_value_from_parameters(v9[3], a4);
LABEL_17:
          v19 = *(void **)(*(_QWORD *)&v41[8] + 40);
          *(_QWORD *)(*(_QWORD *)&v41[8] + 40) = v14;

        }
        goto LABEL_24;
      case 4:
        v22 = (unsigned __int8 *)v8[2];
        v34 = MEMORY[0x1E0C809B0];
        v23 = ___ZL44nw_parameters_copy_protocol_value_from_levelP24NWConcrete_nw_parameters19nw_protocol_level_tP11nw_protocolPKc_block_invoke_2;
        v24 = &v34;
        goto LABEL_23;
      case 5:
        v22 = (unsigned __int8 *)v8[1];
        v35 = MEMORY[0x1E0C809B0];
        v23 = ___ZL44nw_parameters_copy_protocol_value_from_levelP24NWConcrete_nw_parameters19nw_protocol_level_tP11nw_protocolPKc_block_invoke;
        v24 = &v35;
LABEL_23:
        v24[1] = 3221225472;
        v24[2] = (uint64_t)v23;
        v24[3] = (uint64_t)&unk_1E149D218;
        v24[4] = (uint64_t)v41;
        v24[5] = a3;
        v24[6] = (uint64_t)a4;
        nw_array_apply(v22, (uint64_t)v24);
LABEL_24:
        v21 = *(id *)(*(_QWORD *)&v41[8] + 40);
        break;
      default:
LABEL_18:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_parameters_copy_protocol_value_from_level";
          v39 = 1024;
          v40 = a2;
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s Unsupported protocol level %u", buf, 0x12u);
        }

        v21 = 0;
        break;
    }
    _Block_object_dispose(v41, 8);

    goto LABEL_26;
  }
  __nwlog_obj();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v41 = 136446210;
  *(_QWORD *)&v41[4] = "nw_parameters_copy_protocol_value_from_level";
  v27 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  v36 = 0;
  if (__nwlog_fault(v27, buf, &v36))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = buf[0];
      if (os_log_type_enabled(v28, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v41 = 136446210;
        *(_QWORD *)&v41[4] = "nw_parameters_copy_protocol_value_from_level";
        _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null stack", v41, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v31 = buf[0];
      v32 = os_log_type_enabled(v28, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)v41 = 136446466;
          *(_QWORD *)&v41[4] = "nw_parameters_copy_protocol_value_from_level";
          *(_WORD *)&v41[12] = 2082;
          *(_QWORD *)&v41[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null stack, dumping backtrace:%{public}s", v41, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_43;
      }
      if (v32)
      {
        *(_DWORD *)v41 = 136446210;
        *(_QWORD *)&v41[4] = "nw_parameters_copy_protocol_value_from_level";
        _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null stack, no backtrace", v41, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v33 = buf[0];
      if (os_log_type_enabled(v28, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v41 = 136446210;
        *(_QWORD *)&v41[4] = "nw_parameters_copy_protocol_value_from_level";
        _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null stack, backtrace limit exceeded", v41, 0xCu);
      }
    }

  }
LABEL_43:
  if (v27)
    free(v27);
  v21 = 0;
LABEL_26:

  return v21;
}

void sub_183560EB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Block_object_dispose((const void *)(v3 - 128), 8);

  _Unwind_Resume(a1);
}

BOOL ___ZL44nw_parameters_copy_protocol_value_from_levelP24NWConcrete_nw_parameters19nw_protocol_level_tP11nw_protocolPKc_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t protocol_handle;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BOOL8 v9;

  v4 = a3;
  protocol_handle = nw_protocol_options_get_protocol_handle(v4);
  if (protocol_handle && protocol_handle == *(_QWORD *)(a1 + 40))
  {
    v6 = nw_parameters_copy_protocol_value_from_parameters(v4, *(const char **)(a1 + 48));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) == 0;

  return v9;
}

void sub_183560F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL44nw_parameters_copy_protocol_value_from_levelP24NWConcrete_nw_parameters19nw_protocol_level_tP11nw_protocolPKc_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t protocol_handle;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BOOL8 v9;

  v4 = a3;
  protocol_handle = nw_protocol_options_get_protocol_handle(v4);
  if (protocol_handle && protocol_handle == *(_QWORD *)(a1 + 40))
  {
    v6 = nw_parameters_copy_protocol_value_from_parameters(v4, *(const char **)(a1 + 48));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) == 0;

  return v9;
}

void sub_183560FE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned __int8 *nw_parameters_copy_protocol_options_internal(void *a1, void *a2, _DWORD *a3)
{
  unsigned __int8 *v3;
  id *v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  char *backtrace_string;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  os_log_type_t v43;
  id *v44;
  id v45;
  _QWORD v46[4];
  id v47;
  _BYTE *v48;
  _QWORD v49[4];
  id v50;
  _BYTE *v51;
  char v52;
  os_log_type_t v53;
  _BYTE buf[24];
  uint64_t (*v55)(uint64_t, uint64_t);
  void (*v56)(uint64_t);
  id v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v44 = v6;
  v45 = a2;
  if (v45)
  {
    v7 = v6[19];
    v8 = v7;
    if (v7)
    {
      v9 = MEMORY[0x1E0C809B0];
      if (*((_QWORD *)v7 + 1))
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v55 = __Block_byref_object_copy__19149;
        v56 = __Block_byref_object_dispose__19150;
        v57 = 0;
        v3 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
        v49[0] = MEMORY[0x1E0C809B0];
        v49[1] = 3221225472;
        v49[2] = ___ZL44nw_parameters_copy_protocol_options_internalP24NWConcrete_nw_parametersPU40objcproto29NWConcrete_nw_protocol_handle8NSObjectP19nw_protocol_level_t_block_invoke;
        v49[3] = &unk_1E14AB5F0;
        v50 = v45;
        v51 = buf;
        nw_array_apply(v3, (uint64_t)v49);
        v10 = *(_QWORD *)&buf[8];
        v11 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
        if (v11)
        {
          if (a3)
          {
            *a3 = 5;
            v12 = *(void **)(v10 + 40);
          }
          else
          {
            v12 = *(void **)(*(_QWORD *)&buf[8] + 40);
          }
          v3 = v12;
        }

        _Block_object_dispose(buf, 8);
        if (v11)
          goto LABEL_39;
      }
      if (v8[2])
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v55 = __Block_byref_object_copy__19149;
        v56 = __Block_byref_object_dispose__19150;
        v57 = 0;
        v13 = (unsigned __int8 *)v8[2];
        v46[0] = v9;
        v46[1] = 3221225472;
        v46[2] = ___ZL44nw_parameters_copy_protocol_options_internalP24NWConcrete_nw_parametersPU40objcproto29NWConcrete_nw_protocol_handle8NSObjectP19nw_protocol_level_t_block_invoke_2;
        v46[3] = &unk_1E14AB5F0;
        v47 = v45;
        v48 = buf;
        nw_array_apply(v13, (uint64_t)v46);
        v14 = *(_QWORD *)&buf[8];
        v15 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
        if (v15)
        {
          if (a3)
          {
            *a3 = 4;
            v16 = *(void **)(v14 + 40);
          }
          else
          {
            v16 = *(void **)(*(_QWORD *)&buf[8] + 40);
          }
          v3 = v16;
        }

        _Block_object_dispose(buf, 8);
        if (v15)
          goto LABEL_39;
      }
      v17 = (void *)v8[3];
      if (v17
        && (v18 = v17, v19 = v18[2], v18, v19)
        && v19 == objc_msgSend(v45, "getProtocolStructure"))
      {
        if (a3)
          *a3 = 3;
        v26 = (void *)v8[3];
      }
      else
      {
        v20 = (void *)v8[4];
        if (v20
          && (v21 = v20, v22 = v21[2], v21, v22)
          && v22 == objc_msgSend(v45, "getProtocolStructure"))
        {
          if (a3)
            *a3 = 3;
          v26 = (void *)v8[4];
        }
        else
        {
          v23 = (void *)v8[6];
          if (!v23
            || (v24 = v23, v25 = v24[2], v24, !v25)
            || v25 != objc_msgSend(v45, "getProtocolStructure"))
          {
LABEL_28:
            v3 = 0;
LABEL_39:

            goto LABEL_40;
          }
          if (a3)
            *a3 = 2;
          v26 = (void *)v8[6];
        }
      }
      v3 = v26;
      goto LABEL_39;
    }
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_parameters_copy_protocol_options_internal";
    v33 = (char *)_os_log_send_and_compose_impl();

    v53 = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (__nwlog_fault(v33, &v53, &v52))
    {
      if (v53 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v35 = v53;
        if (os_log_type_enabled(v34, v53))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_copy_protocol_options_internal";
          _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s called with null stack", buf, 0xCu);
        }
      }
      else if (v52)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v40 = v53;
        v41 = os_log_type_enabled(v34, v53);
        if (backtrace_string)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_parameters_copy_protocol_options_internal";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v34, v40, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_76;
        }
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_copy_protocol_options_internal";
          _os_log_impl(&dword_182FBE000, v34, v40, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v43 = v53;
        if (os_log_type_enabled(v34, v53))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_copy_protocol_options_internal";
          _os_log_impl(&dword_182FBE000, v34, v43, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_76:
    if (v33)
      free(v33);
    goto LABEL_28;
  }
  __nwlog_obj();
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_parameters_copy_protocol_options_internal";
  v29 = (char *)_os_log_send_and_compose_impl();

  v53 = OS_LOG_TYPE_ERROR;
  v52 = 0;
  if (__nwlog_fault(v29, &v53, &v52))
  {
    if (v53 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = v53;
      if (os_log_type_enabled(v30, v53))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_parameters_copy_protocol_options_internal";
        _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null protocol_instance", buf, 0xCu);
      }
    }
    else if (v52)
    {
      v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v37 = v53;
      v38 = os_log_type_enabled(v30, v53);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_parameters_copy_protocol_options_internal";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v36;
          _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s called with null protocol_instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
        goto LABEL_70;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_parameters_copy_protocol_options_internal";
        _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s called with null protocol_instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v42 = v53;
      if (os_log_type_enabled(v30, v53))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_parameters_copy_protocol_options_internal";
        _os_log_impl(&dword_182FBE000, v30, v42, "%{public}s called with null protocol_instance, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_70:
  if (v29)
    free(v29);
  v3 = 0;
LABEL_40:

  return v3;
}

void sub_1835616F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZL44nw_parameters_copy_protocol_options_internalP24NWConcrete_nw_parametersPU40objcproto29NWConcrete_nw_protocol_handle8NSObjectP19nw_protocol_level_t_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t protocol_handle;
  uint64_t v7;

  v5 = a3;
  protocol_handle = nw_protocol_options_get_protocol_handle(v5);
  if (protocol_handle && protocol_handle == objc_msgSend(*(id *)(a1 + 32), "getProtocolStructure"))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

void sub_1835617A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL44nw_parameters_copy_protocol_options_internalP24NWConcrete_nw_parametersPU40objcproto29NWConcrete_nw_protocol_handle8NSObjectP19nw_protocol_level_t_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t protocol_handle;
  uint64_t v7;

  v5 = a3;
  protocol_handle = nw_protocol_options_get_protocol_handle(v5);
  if (protocol_handle && protocol_handle == objc_msgSend(*(id *)(a1 + 32), "getProtocolStructure"))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

void sub_183561830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL __nw_parameters_copy_protocol_options_for_definition_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  nw_protocol_definition_t v6;
  _BOOL4 is_equal_unsafe;

  v5 = a3;
  v6 = nw_protocol_options_copy_definition(v5);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(*(_QWORD *)(a1 + 32), (uint64_t)v6);
  if (is_equal_unsafe)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);

  return !is_equal_unsafe;
}

void sub_1835618C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_add_to_protocol_stack(void *a1, int a2, unsigned int a3, __int128 *a4)
{
  id v7;
  NWConcrete_nw_protocol_options *protocol_parameters;
  uint64_t v9;

  v7 = a1;
  protocol_parameters = nw_parameters_create_protocol_parameters(a4);
  if (protocol_parameters)
    v9 = nw_parameters_add_protocol_stack_member(v7, a2, a3, protocol_parameters);
  else
    v9 = 0;

  return v9;
}

void sub_18356194C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_remove_from_protocol_stack(void *a1, int a2, _QWORD *a3)
{
  id *v5;
  id *v6;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  id *v10;
  id v11;
  char *identifier;
  unsigned __int8 *v13;
  NSObject *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  id *v17;
  id v18;
  char *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  id *v22;
  char *v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  unsigned __int8 **v26;
  unsigned __int8 *v27;
  void *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  void *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  _BOOL4 v43;
  char *backtrace_string;
  os_log_type_t v45;
  _BOOL4 v46;
  os_log_type_t v47;
  os_log_type_t v48;
  os_log_type_t v49;
  _QWORD v50[4];
  unsigned __int8 **v51;
  _BYTE *v52;
  _QWORD *v53;
  _QWORD v54[4];
  unsigned __int8 **v55;
  _BYTE *v56;
  _QWORD *v57;
  char v58;
  os_log_type_t v59;
  _BYTE buf[24];
  uint64_t (*v61)(uint64_t, uint64_t);
  void (*v62)(uint64_t);
  unsigned __int8 *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    if (a3)
    {
      v7 = (unsigned __int8 **)v5[19];
      v8 = v7;
      if (v7)
      {
        switch(a2)
        {
          case 2:
            v9 = v7[6];
            if (!v9)
              goto LABEL_23;
            v10 = v9;
            v11 = v10[1];

            identifier = nw_protocol_definition_get_identifier(v11);
            if (!nw_protocols_are_equal(a3, identifier))
              goto LABEL_20;
            v13 = v8[6];
            v8[6] = 0;
            break;
          case 3:
            v16 = v7[3];
            if (v16)
            {
              v17 = v16;
              v18 = v17[1];

              v19 = nw_protocol_definition_get_identifier(v18);
              if (nw_protocols_are_equal(a3, v19))
              {
                v20 = v8[3];
                v8[3] = 0;

              }
            }
            v21 = v8[4];
            if (!v21)
              goto LABEL_23;
            v22 = v21;
            v11 = v22[1];

            v23 = nw_protocol_definition_get_identifier(v11);
            if (!nw_protocols_are_equal(a3, v23))
              goto LABEL_20;
            v13 = v8[4];
            v8[4] = 0;
            break;
          case 4:
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x3032000000;
            v61 = __Block_byref_object_copy__19149;
            v62 = __Block_byref_object_dispose__19150;
            v24 = v7 + 2;
            v63 = v7[2];
            v25 = *v24;
            v50[0] = MEMORY[0x1E0C809B0];
            v50[1] = 3221225472;
            v50[2] = __nw_parameters_remove_from_protocol_stack_block_invoke_2;
            v50[3] = &unk_1E14AAFC8;
            v52 = buf;
            v53 = a3;
            v51 = v8;
            nw_array_apply(v25, (uint64_t)v50);
            objc_storeStrong((id *)v8 + 2, *(id *)(*(_QWORD *)&buf[8] + 40));

            _Block_object_dispose(buf, 8);
            goto LABEL_23;
          case 5:
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x3032000000;
            v61 = __Block_byref_object_copy__19149;
            v62 = __Block_byref_object_dispose__19150;
            v26 = v7 + 1;
            v63 = v7[1];
            v27 = *v26;
            v54[0] = MEMORY[0x1E0C809B0];
            v54[1] = 3221225472;
            v54[2] = __nw_parameters_remove_from_protocol_stack_block_invoke;
            v54[3] = &unk_1E14AAFC8;
            v56 = buf;
            v57 = a3;
            v55 = v8;
            nw_array_apply(v27, (uint64_t)v54);
            objc_storeStrong((id *)v8 + 1, *(id *)(*(_QWORD *)&buf[8] + 40));

            _Block_object_dispose(buf, 8);
            goto LABEL_23;
          default:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v14 = (id)gLogObj;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = a2;
              _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s Unsupported protocol level %u", buf, 0x12u);
            }

            goto LABEL_11;
        }

LABEL_20:
LABEL_23:
        v15 = 1;
LABEL_24:

        goto LABEL_25;
      }
      __nwlog_obj();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
      v36 = (char *)_os_log_send_and_compose_impl();

      v59 = OS_LOG_TYPE_ERROR;
      v58 = 0;
      if (__nwlog_fault(v36, &v59, &v58))
      {
        if (v59 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = v59;
          if (os_log_type_enabled(v37, v59))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
            _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s called with null stack", buf, 0xCu);
          }
        }
        else if (v58)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v45 = v59;
          v46 = os_log_type_enabled(v37, v59);
          if (backtrace_string)
          {
            if (v46)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v37, v45, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_77;
          }
          if (v46)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
            _os_log_impl(&dword_182FBE000, v37, v45, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v49 = v59;
          if (os_log_type_enabled(v37, v59))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
            _os_log_impl(&dword_182FBE000, v37, v49, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_77:
      if (v36)
        free(v36);
LABEL_11:
      v15 = 0;
      goto LABEL_24;
    }
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
    v30 = (char *)_os_log_send_and_compose_impl();

    v59 = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (__nwlog_fault(v30, &v59, &v58))
    {
      if (v59 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v34 = v59;
        if (os_log_type_enabled(v31, v59))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
          _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null protocol_identifier", buf, 0xCu);
        }
LABEL_70:

        goto LABEL_71;
      }
      if (!v58)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v48 = v59;
        if (os_log_type_enabled(v31, v59))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
          _os_log_impl(&dword_182FBE000, v31, v48, "%{public}s called with null protocol_identifier, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_70;
      }
      v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v42 = v59;
      v43 = os_log_type_enabled(v31, v59);
      if (!v39)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
          _os_log_impl(&dword_182FBE000, v31, v42, "%{public}s called with null protocol_identifier, no backtrace", buf, 0xCu);
        }
        goto LABEL_70;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v39;
        _os_log_impl(&dword_182FBE000, v31, v42, "%{public}s called with null protocol_identifier, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_50;
    }
  }
  else
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
    v30 = (char *)_os_log_send_and_compose_impl();

    v59 = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (__nwlog_fault(v30, &v59, &v58))
    {
      if (v59 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = v59;
        if (os_log_type_enabled(v31, v59))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_70;
      }
      if (!v58)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v47 = v59;
        if (os_log_type_enabled(v31, v59))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
          _os_log_impl(&dword_182FBE000, v31, v47, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_70;
      }
      v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v40 = v59;
      v41 = os_log_type_enabled(v31, v59);
      if (!v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
          _os_log_impl(&dword_182FBE000, v31, v40, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_70;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_parameters_remove_from_protocol_stack";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v39;
        _os_log_impl(&dword_182FBE000, v31, v40, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_50:

      free(v39);
    }
  }
LABEL_71:
  if (v30)
    free(v30);
  v15 = 0;
LABEL_25:

  return v15;
}

BOOL __nw_parameters_remove_from_protocol_stack_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  nw_protocol_definition_t v5;
  char *identifier;
  _BOOL4 v7;
  _BOOL8 v8;
  uint64_t v9;
  void *v10;

  v4 = a3;
  v5 = nw_protocol_options_copy_definition(v4);
  identifier = nw_protocol_definition_get_identifier(v5);
  v7 = nw_protocols_are_equal(*(_QWORD **)(a1 + 48), identifier);
  if (v7)
  {
    v8 = nw_array_duplicate_array_without_object(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v4);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
  return !v7;
}

BOOL __nw_parameters_remove_from_protocol_stack_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  nw_protocol_definition_t v5;
  char *identifier;
  _BOOL4 v7;
  _BOOL8 v8;
  uint64_t v9;
  void *v10;

  v4 = a3;
  v5 = nw_protocol_options_copy_definition(v4);
  identifier = nw_protocol_definition_get_identifier(v5);
  v7 = nw_protocols_are_equal(*(_QWORD **)(a1 + 48), identifier);
  if (v7)
  {
    v8 = nw_array_duplicate_array_without_object(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), v4);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
  return !v7;
}

void nw_parameters_remove_application_protocol_options_from_protocol_stack(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD v31[4];
  id v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v10, &type, &v33))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
          v37 = 2082;
          v38 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v10)
          goto LABEL_6;
LABEL_54:
        free(v10);
        goto LABEL_6;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
        _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
        _os_log_impl(&dword_182FBE000, v11, v28, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_52:

    goto LABEL_53;
  }
  if (v4)
  {
    v6 = (uint64_t *)v3[19];
    v7 = v6;
    if (v6)
    {
      v8 = v6[2];
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = __nw_parameters_remove_application_protocol_options_from_protocol_stack_block_invoke;
      v31[3] = &unk_1E149D0C0;
      v32 = v5;
      nw_array_remove_objects(v8, (uint64_t)v31);

LABEL_5:
      goto LABEL_6;
    }
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v16, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null stack", buf, 0xCu);
        }
      }
      else if (v33)
      {
        v25 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        v27 = os_log_type_enabled(v17, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
            v37 = 2082;
            v38 = v25;
            _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v25);
          goto LABEL_58;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
          _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
          _os_log_impl(&dword_182FBE000, v17, v30, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_58:
    if (v16)
      free(v16);
    goto LABEL_5;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (!__nwlog_fault(v10, &type, &v33))
    goto LABEL_53;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null block", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (!v33)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v29 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
      _os_log_impl(&dword_182FBE000, v11, v29, "%{public}s called with null block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_52;
  }
  v22 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v23 = type;
  v24 = os_log_type_enabled(v11, type);
  if (!v22)
  {
    if (v24)
    {
      *(_DWORD *)buf = 136446210;
      v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
      _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null block, no backtrace", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (v24)
  {
    *(_DWORD *)buf = 136446466;
    v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
    v37 = 2082;
    v38 = v22;
    _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v22);
  if (v10)
    goto LABEL_54;
LABEL_6:

}

uint64_t __nw_parameters_remove_application_protocol_options_from_protocol_stack_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void nw_parameters_remove_definition_from_protocol_stack(void *a1, void *a2)
{
  void **v3;
  id v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_parameters_remove_definition_from_protocol_stack";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_remove_definition_from_protocol_stack";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_parameters_remove_definition_from_protocol_stack";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7)
          goto LABEL_4;
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_remove_definition_from_protocol_stack";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_remove_definition_from_protocol_stack";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    nw_protocol_stack_remove_protocol(v3[19], v4);
    goto LABEL_4;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_parameters_remove_definition_from_protocol_stack";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_remove_definition_from_protocol_stack";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null definition", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_remove_definition_from_protocol_stack";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_remove_definition_from_protocol_stack";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null definition, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_parameters_remove_definition_from_protocol_stack";
    v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_39;
LABEL_4:

}

void sub_183562FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_metadata(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (!v4 || object_getClass(v4) == (Class)MEMORY[0x1E0C812E8])
    {
      objc_storeStrong(v3 + 27, a2);
      goto LABEL_24;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_parameters_set_metadata";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_22;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null metadata - wrong type", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_parameters_set_metadata";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata - wrong type, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (v7)
          goto LABEL_23;
        goto LABEL_24;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata - wrong type, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null metadata - wrong type, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_21;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_parameters_set_metadata";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v7, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_21:

      goto LABEL_22;
    }
    if (!v20)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_21;
    }
    v16 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v8, type);
    if (!v16)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_182FBE000, v8, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_21;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_parameters_set_metadata";
      v24 = 2082;
      v25 = v16;
      _os_log_impl(&dword_182FBE000, v8, v17, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v16);
  }
LABEL_22:
  if (v7)
LABEL_23:
    free(v7);
LABEL_24:

}

void sub_183563524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_transform_array(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_parameters_set_transform_array";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_transform_array";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_parameters_set_transform_array";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7)
          goto LABEL_5;
LABEL_40:
        free(v7);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_transform_array";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_transform_array";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    if (v3[20] != v4)
      objc_storeStrong(v3 + 20, a2);
    goto LABEL_5;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_parameters_set_transform_array";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_set_transform_array";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null transform_array", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v20)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_set_transform_array";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null transform_array, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_set_transform_array";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null transform_array, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_parameters_set_transform_array";
    v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null transform_array, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_40;
LABEL_5:

}

BOOL nw_parameters_has_transforms(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 20) != 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_has_transforms";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_transforms";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_has_transforms";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_transforms";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_transforms";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_companion_preference(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((_QWORD *)v3 + 13) + 84) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_companion_preference";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_companion_preference";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_companion_preference";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_companion_preference";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_companion_preference";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

uint64_t nw_parameters_get_companion_preference(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *(unsigned int *)(*((_QWORD *)v1 + 13) + 84);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_companion_preference";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_companion_preference";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_companion_preference";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_companion_preference";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_companion_preference";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_https_proxy_is_opaque(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[98] >> 4) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_https_proxy_is_opaque";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_https_proxy_is_opaque";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_https_proxy_is_opaque";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_https_proxy_is_opaque";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_https_proxy_is_opaque";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_https_proxy_over_tls(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x200000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFFDFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_https_proxy_over_tls";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_https_proxy_over_tls";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_https_proxy_over_tls";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_https_proxy_over_tls";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_https_proxy_over_tls";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

BOOL __nw_parameters_copy_proxy_options_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  nw_protocol_definition_t v6;
  _BOOL4 is_equal_unsafe;

  v5 = a3;
  v6 = nw_protocol_options_copy_definition(v5);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, *(_QWORD *)(a1 + 32));

  if (is_equal_unsafe)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);

  return !is_equal_unsafe;
}

void sub_183564784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_attach_protocol_listener(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x400000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFFBFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_attach_protocol_listener";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_attach_protocol_listener";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_attach_protocol_listener";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_attach_protocol_listener";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_attach_protocol_listener";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_prohibit_joining_protocols(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x800000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFF7FFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_prohibit_joining_protocols";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_prohibit_joining_protocols";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_prohibit_joining_protocols";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_prohibit_joining_protocols";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_prohibit_joining_protocols";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_allow_joining_connected_fd(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x1000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFEFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_allow_joining_connected_fd";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_joining_connected_fd";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_allow_joining_connected_fd";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_joining_connected_fd";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_joining_connected_fd";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_allow_duplicate_state_updates(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x4000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFBFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_allow_duplicate_state_updates";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_duplicate_state_updates";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_allow_duplicate_state_updates";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_duplicate_state_updates";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_duplicate_state_updates";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_disable_listener_datapath(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x20000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFDFFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_disable_listener_datapath";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_disable_listener_datapath";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_disable_listener_datapath";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_disable_listener_datapath";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_disable_listener_datapath";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_allow_sharing_port_with_listener_for_connection(void *a1, void *a2, void *a3)
{
  char *v5;
  id v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  void (**v9)(_QWORD);
  char *v10;
  os_unfair_lock_s *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  NSObject *v16;
  objc_class *v17;
  void *v18;
  NSObject *v19;
  nw_protocol_metadata_t v20;
  NSObject *v21;
  id v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  os_log_type_t v36;
  void *v37;
  objc_class *v38;
  objc_class *v39;
  id v40;
  char v41;
  os_log_type_t type;
  _BYTE aBlock[24];
  void *v44;
  nw_protocol_metadata_t v45;
  id v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v40 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)aBlock = 136446210;
    *(_QWORD *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v24, &type, &v41))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null parameters", aBlock, 0xCu);
      }
    }
    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v25, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)aBlock = 136446466;
          *(_QWORD *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
          *(_WORD *)&aBlock[12] = 2082;
          *(_QWORD *)&aBlock[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v25, v30, "%{public}s called with null parameters, dumping backtrace:%{public}s", aBlock, 0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v24)
          goto LABEL_19;
LABEL_54:
        free(v24);
        goto LABEL_19;
      }
      if (v31)
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
        _os_log_impl(&dword_182FBE000, v25, v30, "%{public}s called with null parameters, no backtrace", aBlock, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
        _os_log_impl(&dword_182FBE000, v25, v35, "%{public}s called with null parameters, backtrace limit exceeded", aBlock, 0xCu);
      }
    }
LABEL_52:

    goto LABEL_53;
  }
  if (v6)
  {
    v7 = (os_unfair_lock_s *)v6;
    *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock[8] = 3221225472;
    *(_QWORD *)&aBlock[16] = __nw_listener_get_path_uuid_block_invoke;
    v44 = &unk_1E14AA348;
    v8 = v7;
    v45 = (nw_protocol_metadata_t)v8;
    v46 = v5 + 24;
    v9 = (void (**)(_QWORD))_Block_copy(aBlock);
    v7 += 2;
    os_unfair_lock_lock(v7);
    v9[2](v9);
    os_unfair_lock_unlock(v7);

    v10 = v5;
    v11 = v8;
    v12 = v40;
    if (v12)
    {
      v13 = *(_QWORD *)(*((_QWORD *)v10 + 13) + 176);
      if (v13)
      {
        v14 = *(id *)(v13 + 128);
        if (v14)
        {
          v15 = v14;
          v16 = v12;
          v17 = v16[2].isa;

          if (nw_parameters_get_server_mode(v17))
          {
            nw_listener_register_client_demux_options_if_needed(v11, v15, v16);
          }
          else
          {
            if (nw_protocol_masque_get_definition(void)::onceToken != -1)
              dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27122);
            v39 = v17;
            if (nw_protocol_masque_get_definition(void)::definition
              && (v18 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition)) != 0)
            {
              v19 = os_retain(v18);
            }
            else
            {
              v19 = 0;
            }
            v20 = nw_connection_copy_protocol_metadata(v16, v19);

            if (v20)
            {
              v37 = v15;
              v21 = v16;
              v38 = v16[2].isa;

              v15 = v37;
              v22 = nw_parameters_copy_context(v38);
              *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
              *(_QWORD *)&aBlock[8] = 3221225472;
              *(_QWORD *)&aBlock[16] = ___ZL46nw_parameters_register_demux_options_if_neededP24NWConcrete_nw_parametersPU25objcproto14OS_nw_listener8NSObjectPU27objcproto16OS_nw_connectionS1__block_invoke;
              v44 = &unk_1E14ACE68;
              v45 = v20;
              v46 = v37;
              nw_queue_context_async_if_needed(v22, aBlock);

            }
            v17 = v39;
          }

        }
      }
    }

    goto LABEL_19;
  }
  __nwlog_obj();
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)aBlock = 136446210;
  *(_QWORD *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
  v24 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v41 = 0;
  if (!__nwlog_fault(v24, &type, &v41))
    goto LABEL_53;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    v28 = type;
    if (os_log_type_enabled(v25, type))
    {
      *(_DWORD *)aBlock = 136446210;
      *(_QWORD *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
      _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null listener", aBlock, 0xCu);
    }
    goto LABEL_52;
  }
  if (!v41)
  {
    __nwlog_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    v36 = type;
    if (os_log_type_enabled(v25, type))
    {
      *(_DWORD *)aBlock = 136446210;
      *(_QWORD *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
      _os_log_impl(&dword_182FBE000, v25, v36, "%{public}s called with null listener, backtrace limit exceeded", aBlock, 0xCu);
    }
    goto LABEL_52;
  }
  v32 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v25 = objc_claimAutoreleasedReturnValue();
  v33 = type;
  v34 = os_log_type_enabled(v25, type);
  if (!v32)
  {
    if (v34)
    {
      *(_DWORD *)aBlock = 136446210;
      *(_QWORD *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
      _os_log_impl(&dword_182FBE000, v25, v33, "%{public}s called with null listener, no backtrace", aBlock, 0xCu);
    }
    goto LABEL_52;
  }
  if (v34)
  {
    *(_DWORD *)aBlock = 136446466;
    *(_QWORD *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
    *(_WORD *)&aBlock[12] = 2082;
    *(_QWORD *)&aBlock[14] = v32;
    _os_log_impl(&dword_182FBE000, v25, v33, "%{public}s called with null listener, dumping backtrace:%{public}s", aBlock, 0x16u);
  }

  free(v32);
  if (v24)
    goto LABEL_54;
LABEL_19:

}

void sub_183565BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

BOOL ___ZL46nw_parameters_register_demux_options_if_neededP24NWConcrete_nw_parametersPU25objcproto14OS_nw_listener8NSObjectPU27objcproto16OS_nw_connectionS1__block_invoke(uint64_t a1)
{
  return nw_masque_add_additional_demux_pattern(*(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void nw_parameters_allow_sharing_port_with_listener(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_parameters_allow_sharing_port_with_listener";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_allow_sharing_port_with_listener";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_parameters_allow_sharing_port_with_listener";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7)
          goto LABEL_4;
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_allow_sharing_port_with_listener";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_allow_sharing_port_with_listener";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    nw_parameters_allow_sharing_port_with_listener_for_connection(v3, v4, 0);
    goto LABEL_4;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_parameters_allow_sharing_port_with_listener";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_allow_sharing_port_with_listener";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_allow_sharing_port_with_listener";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_allow_sharing_port_with_listener";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null listener, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_parameters_allow_sharing_port_with_listener";
    v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_39;
LABEL_4:

}

void sub_18356610C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_attributed_bundle_identifier(void *a1, const char *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  NSObject *v14;
  void *v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_parameters_set_attributed_bundle_identifier";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_set_attributed_bundle_identifier";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_parameters_set_attributed_bundle_identifier";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_set_attributed_bundle_identifier";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_set_attributed_bundle_identifier";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_27:
    if (v8)
      free(v8);
    goto LABEL_8;
  }
  v5 = *(void **)(v3[13] + 128);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(v4[13] + 128) = 0;
  }
  if (!a2 || strlen(a2) - 1 > 0x3FE)
    goto LABEL_8;
  v6 = strdup(a2);
  if (v6)
  {
LABEL_7:
    *(_QWORD *)(v4[13] + 128) = v6;
LABEL_8:

    return;
  }
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v20 = "strict_strdup";
  v15 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v15))
  {
    free(v15);
    goto LABEL_7;
  }
  __break(1u);
}

void nw_parameters_set_should_trust_invalid_certificates(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x200000000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFDFFFFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_should_trust_invalid_certificates";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_should_trust_invalid_certificates";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_should_trust_invalid_certificates";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_should_trust_invalid_certificates";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_should_trust_invalid_certificates";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_should_skip_probe_sampling(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x400000000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFBFFFFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_should_skip_probe_sampling";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_should_skip_probe_sampling";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_should_skip_probe_sampling";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_should_skip_probe_sampling";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_should_skip_probe_sampling";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

BOOL nw_xpc_objects_equal(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _BOOL8 v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = v3 == v4;
  if (v3 != v4 && v3 && v4)
    v6 = xpc_equal(v3, v4);

  return v6;
}

{
  id v3;
  id v4;
  void *v5;
  _BOOL8 v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = v3 == v4;
  if (v3 != v4 && v3 && v4)
    v6 = xpc_equal(v3, v4);

  return v6;
}

void sub_183566A40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_is_equal_block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;

  v5 = a3;
  nw_array_get_object_at_index(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 160), a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = nw_protocol_transform_compare(v5, v6, 0);
  if ((v7 & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;

  return v7;
}

void sub_183566AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_is_equal_block_invoke_2(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t is_equal;

  v5 = a3;
  nw_array_get_object_at_index(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 176), a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  is_equal = nw_proxy_config_is_equal(v5, v6);
  if ((is_equal & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

  return is_equal;
}

void sub_183566B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_is_equal_block_invoke_3(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t is_equal;

  v5 = a3;
  nw_array_get_object_at_index(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 168), a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  is_equal = nw_protocol_option_is_equal(v5, v6);
  if ((is_equal & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

  return is_equal;
}

void sub_183566BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_are_compatible(void *a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  void **v9;
  void **v10;
  void **v11;
  _BOOL8 v12;
  void *v13;
  int v14;
  _BYTE *v15;
  char v16;
  int v17;
  id *v18;
  id v19;
  id *v20;
  id v21;
  const char *url_scheme;
  const char *v23;
  id v24;
  id v25;
  BOOL v26;
  void *v27;

  v9 = a1;
  v10 = a3;
  v11 = v10;
  v12 = v9 == v10;
  if (v9 != v10 && v9 && v10)
  {
    v13 = v9[23];
    v14 = 3;
    if (v13)
    {
      v15 = v13;
      v16 = v15[170];

      if ((v16 & 1) != 0)
        v14 = 4;
      else
        v14 = 3;
    }
    if (a4)
      v17 = 2;
    else
      v17 = 1;
    if (!a5)
      v14 = v17;
    if ((a5 & 1) == 0)
    {
      v18 = v9;
      v19 = v18[25];

      v20 = v11;
      v21 = v20[25];

      if (v19)
      {
        if (v21)
        {
          url_scheme = (const char *)nw_endpoint_get_url_scheme(v19);
          v23 = (const char *)nw_endpoint_get_url_scheme(v21);
          if (strcasecmp(url_scheme, v23))
          {

LABEL_24:
            v12 = 0;
            goto LABEL_25;
          }
        }
      }

    }
    v24 = nw_parameters_copy_path_parameters(v9, 0);
    v25 = nw_parameters_copy_path_parameters(v11, 0);
    v26 = nw_path_parameters_are_equal(v24, v25, v14);

    if (!v26)
      goto LABEL_24;
    v27 = v9[19];
    if (a4)
    {
      if (!nw_protocol_stack_application_protocols_are_equal_below(v27, a2, v11[19], a4, v14, 0, 0))
        goto LABEL_24;
    }
    else if (!nw_protocol_stack_is_equal(v27, v11[19], v14))
    {
      goto LABEL_24;
    }
    v12 = 1;
  }
LABEL_25:

  return v12;
}

void sub_183566DA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__105(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *(_OWORD *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 48) = v2;
  result = *(__n128 *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v6;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t __nw_parameters_get_hash_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) ^= nw_protocol_transform_get_hash(v4);

  return 1;
}

void sub_183566E4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_get_hash_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) ^= nw_proxy_config_get_hash(v4);

  return 1;
}

void sub_183566EA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_get_hash_block_invoke_3(uint64_t a1, int a2, int a3, void *data, CC_LONG len)
{
  CC_SHA256_Update((CC_SHA256_CTX *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), data, len);
  return 1;
}

BOOL nw_parameters_get_tls13_enabled()
{
  return !networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_disable_tls13);
}

BOOL nw_parameters_get_tls_experiments_enabled(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 101) & 0x40) != 0
      || networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_enable_tls_experiments);
}

void nw_parameters_set_is_probe(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 1024;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFFFFFBFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_is_probe";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_is_probe";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_is_probe";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_is_probe";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_is_probe";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_allow_unusable_addresses(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x80000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFFF7FFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_allow_unusable_addresses";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_unusable_addresses";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_allow_unusable_addresses";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_unusable_addresses";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_unusable_addresses";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_prefer_no_proxy(nw_parameters_t parameters, BOOL prefer_no_proxy)
{
  _BOOL4 v2;
  nw_parameters_t v3;
  nw_parameters_t v4;
  Class isa;
  char *v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v2 = prefer_no_proxy;
  v25 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = v3;
  if (v3)
  {
    isa = v3[13].isa;
    v7 = *((unsigned __int16 *)isa + 54);
    v6 = (char *)isa + 108;
    v8 = v7 | (v6[2] << 16);
    if (v2)
      v9 = 256;
    else
      v9 = 0;
    v10 = v8 & 0xFFFFFEFF;
    *(_WORD *)v6 = v10 | v9;
    v6[2] = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_prefer_no_proxy";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_prefer_no_proxy";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_prefer_no_proxy";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_prefer_no_proxy";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_prefer_no_proxy";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

void nw_parameters_set_no_proxy_path_selection(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 512;
    else
      v9 = 0;
    v10 = v8 & 0xFFFFFDFF;
    *(_WORD *)v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_no_proxy_path_selection";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_proxy_path_selection";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_no_proxy_path_selection";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_proxy_path_selection";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_proxy_path_selection";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

void nw_parameters_set_privacy_proxy_fail_closed(void *a1, int a2)
{
  id v3;
  void *v4;
  __int16 v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 64;
    else
      v5 = 0;
    *(_WORD *)(*((_QWORD *)v3 + 13) + 100) = *(_WORD *)(*((_QWORD *)v3 + 13) + 100) & 0xFFBF | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_privacy_proxy_fail_closed";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_privacy_proxy_fail_closed";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_privacy_proxy_fail_closed";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_privacy_proxy_fail_closed";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_privacy_proxy_fail_closed";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

void nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 1024;
    else
      v9 = 0;
    v10 = v8 & 0xFFFFFBFF;
    *(_WORD *)v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

void nw_parameters_set_prohibit_privacy_proxy(void *a1, int a2)
{
  id v3;
  void *v4;
  __int16 v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 128;
    else
      v5 = 0;
    *(_WORD *)(*((_QWORD *)v3 + 13) + 100) = *(_WORD *)(*((_QWORD *)v3 + 13) + 100) & 0xFF7F | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_prohibit_privacy_proxy";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_prohibit_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_prohibit_privacy_proxy";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_prohibit_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_prohibit_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

void nw_parameters_disable_legacy_tls_versions(void *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id v5;
  void *v6;
  unsigned __int8 *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (id *)v1[19];
    v4 = v3;
    if (v3)
    {
      v5 = v3[3];
      if (nw_parameters_get_tls(v2) && !nw_protocol_options_is_udp(v5))
      {
        v6 = (void *)nw_protocol_boringssl_copy_definition();
        v7 = nw_parameters_copy_protocol_options_for_definition(v2, v6);

        v8 = v7;
        v9 = v8;
        if (v8)
        {
          sec_protocol_options_set_min_tls_protocol_version(v8, tls_protocol_version_TLSv12);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v10 = (id)gLogObj;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446210;
            v22 = "nw_parameters_disable_legacy_tls_versions";
            _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s Disabling legacy TLS 1.0/1.1 for connection parameters", buf, 0xCu);
          }

        }
      }

    }
    goto LABEL_12;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_disable_legacy_tls_versions";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_disable_legacy_tls_versions";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_disable_legacy_tls_versions";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_disable_legacy_tls_versions";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_disable_legacy_tls_versions";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_29:
  if (v12)
    free(v12);
LABEL_12:

}

void sub_183568564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_create_data(void *a1, uint64_t a2)
{
  id v3;
  uint64_t necp_parameters;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  int v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (v3)
  {
    if (a2)
    {
      BYTE2(v19) = 0;
      LOWORD(v19) = 0;
      necp_parameters = nw_path_create_necp_parameters(a2, 0, 0, 0, 0, v3, 0, 0, v19);
      goto LABEL_4;
    }
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_parameters_create_data";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null data_len", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v20)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null data_len, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null data_len, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_parameters_create_data";
        v24 = 2082;
        v25 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null data_len, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_parameters_create_data";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v20)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_182FBE000, v8, v17, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_parameters_create_data";
        v24 = 2082;
        v25 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v7)
    free(v7);
  necp_parameters = 0;
LABEL_4:

  return necp_parameters;
}

void sub_183568A6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_update_with_data(void *a1, uint64_t a2, unint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_parameters_update_with_data";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_parameters_update_with_data";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v8)
          goto LABEL_5;
LABEL_56:
        free(v8);
        goto LABEL_5;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_182FBE000, v9, v23, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!a2)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_parameters_update_with_data";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null data", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_182FBE000, v9, v24, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_parameters_update_with_data";
      v30 = 2082;
      v31 = v18;
      _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!a3)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_parameters_update_with_data";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null data_len", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_182FBE000, v9, v25, "%{public}s called with null data_len, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null data_len, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_parameters_update_with_data";
      v30 = 2082;
      v31 = v18;
      _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null data_len, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v18);
    if (!v8)
      goto LABEL_5;
    goto LABEL_56;
  }
  nw_path_parse_necp_parameters(v5, 0, 0, 0, 0, 0, 0, 0, 0, a2, a3);
LABEL_5:

}

void sub_183569150(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_requires_dnssec_validation(nw_parameters_t parameters, BOOL requires_dnssec_validation)
{
  _BOOL4 v2;
  nw_parameters_t v3;
  nw_parameters_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v2 = requires_dnssec_validation;
  v20 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = v3;
  if (v3)
  {
    v5 = 0x40000000;
    if (!v2)
      v5 = 0;
    v3[12].isa = (Class)((unint64_t)v3[12].isa & 0xFFFFFFFFBFFFFFFFLL | v5);
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_requires_dnssec_validation";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_requires_dnssec_validation";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_requires_dnssec_validation";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_requires_dnssec_validation";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_requires_dnssec_validation";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_prohibit_encrypted_dns(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x100000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFEFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_prohibit_encrypted_dns";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_prohibit_encrypted_dns";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_prohibit_encrypted_dns";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_prohibit_encrypted_dns";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_prohibit_encrypted_dns";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_fail_if_svcb_received(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x400000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFBFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_fail_if_svcb_received";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_fail_if_svcb_received";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_fail_if_svcb_received";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_fail_if_svcb_received";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_fail_if_svcb_received";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_include_ble(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x800000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFF7FFFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_include_ble";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_include_ble";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_include_ble";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_include_ble";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_include_ble";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_include_screen_off_devices(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x1000000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFEFFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_include_screen_off_devices";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_include_screen_off_devices";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_include_screen_off_devices";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_include_screen_off_devices";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_include_screen_off_devices";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_allow_internet_fallback(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x2000000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFDFFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_allow_internet_fallback";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_internet_fallback";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_allow_internet_fallback";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_internet_fallback";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_internet_fallback";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

uint64_t nw_parameters_get_next_hop_required_interface_type(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *(unsigned int *)(*((_QWORD *)v1 + 13) + 92);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_next_hop_required_interface_type";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_next_hop_required_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_next_hop_required_interface_type";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_next_hop_required_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_next_hop_required_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_parameters_has_companion_proxy_required_interface_type(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  int v4;
  _BOOL8 v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    v4 = *(_DWORD *)(v3[13] + 92);

    v5 = v4 != 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_has_companion_proxy_required_interface_type";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_has_companion_proxy_required_interface_type";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_has_companion_proxy_required_interface_type";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_has_companion_proxy_required_interface_type";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_has_companion_proxy_required_interface_type";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_3:

  return v5;
}

void nw_parameters_set_use_enhanced_privacy_mode(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 0x20000;
    else
      v9 = 0;
    v10 = v8 & 0xFFFDFFFF;
    *(_WORD *)v6 = v10;
    *(_BYTE *)(v6 + 2) = (v10 | v9) >> 16;
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_use_enhanced_privacy_mode";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_use_enhanced_privacy_mode";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_use_enhanced_privacy_mode";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_use_enhanced_privacy_mode";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_use_enhanced_privacy_mode";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

id nw_parameters_copy_application_service_identity()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v8[4];
  void *v9;
  _QWORD v10[3];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0CD6A20];
  v10[0] = *MEMORY[0x1E0CD6A38];
  v10[1] = v0;
  v11[0] = *MEMORY[0x1E0CD6A70];
  v11[1] = &unk_1E14E08B0;
  v10[2] = *MEMORY[0x1E0CD70A8];
  v11[2] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 3);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __nw_parameters_copy_application_service_identity_block_invoke;
  v8[3] = &unk_1E14ACFD0;
  v9 = v1;
  v2 = nw_parameters_copy_application_service_identity::once;
  v3 = v1;
  v4 = v3;
  if (v2 == -1)
  {
    v5 = v3;
  }
  else
  {
    dispatch_once(&nw_parameters_copy_application_service_identity::once, v8);
    v5 = v9;
  }
  v6 = (id)nw_parameters_copy_application_service_identity::identity;

  return v6;
}

void __nw_parameters_copy_application_service_identity_block_invoke(uint64_t a1)
{
  __SecKey *v1;
  __SecKey *v2;
  BOOL v3;
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  SecKeyRef v8;
  const void *SelfSignedCertificate;
  __SecIdentity *v10;
  sec_identity_t v11;
  void *v12;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  id v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  id v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  const char *v30;
  __CFError *v31;
  NSObject *v32;
  os_log_type_t v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  char v41;
  os_log_type_t type;
  CFErrorRef error;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  CFErrorRef v47;
  __int16 v48;
  char *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  error = 0;
  v1 = SecKeyCreateRandomKey(*(CFDictionaryRef *)(a1 + 32), &error);
  v2 = v1;
  if (v1)
    v3 = error == 0;
  else
    v3 = 0;
  if (v3)
  {
    v8 = SecKeyCopyPublicKey(v1);
    SelfSignedCertificate = (const void *)SecGenerateSelfSignedCertificate();
    if (v8)
      CFRelease(v8);
    if (SelfSignedCertificate)
    {
      v10 = (__SecIdentity *)SecIdentityCreate();
      CFRelease(v2);
      CFRelease(SelfSignedCertificate);
      if (v10)
      {
        v11 = sec_identity_create(v10);
        v12 = (void *)nw_parameters_copy_application_service_identity::identity;
        nw_parameters_copy_application_service_identity::identity = (uint64_t)v11;

        CFRelease(v10);
        if (nw_parameters_copy_application_service_identity::identity)
          return;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_parameters_copy_application_service_identity_block_invoke";
        v14 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v41 = 0;
        if (!__nwlog_fault(v14, &type, &v41))
        {
LABEL_87:
          if (!v14)
            return;
          goto LABEL_88;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = (id)gLogObj;
          v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s sec_identity_create failed", buf, 0xCu);
          }
LABEL_86:

          goto LABEL_87;
        }
        if (!v41)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v40 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_182FBE000, v15, v40, "%{public}s sec_identity_create failed, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_86;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v35 = type;
        v36 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446210;
            v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_182FBE000, v15, v35, "%{public}s sec_identity_create failed, no backtrace", buf, 0xCu);
          }
          goto LABEL_86;
        }
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_parameters_copy_application_service_identity_block_invoke";
          v46 = 2082;
          v47 = (CFErrorRef)backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v35, "%{public}s sec_identity_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v14)
          return;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v45 = "nw_parameters_copy_application_service_identity_block_invoke";
        v14 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v41 = 0;
        if (!__nwlog_fault(v14, &type, &v41))
          goto LABEL_87;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = (id)gLogObj;
          v25 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s SecIdentityCreate failed", buf, 0xCu);
          }
          goto LABEL_86;
        }
        if (!v41)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = (id)gLogObj;
          v38 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_182FBE000, v15, v38, "%{public}s SecIdentityCreate failed, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_86;
        }
        v30 = __nw_create_backtrace_string();
        if (!v30)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v39 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_182FBE000, v15, v39, "%{public}s SecIdentityCreate failed, no backtrace", buf, 0xCu);
          }
          goto LABEL_86;
        }
        v31 = (__CFError *)v30;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = (id)gLogObj;
        v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_parameters_copy_application_service_identity_block_invoke";
          v46 = 2082;
          v47 = v31;
          _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s SecIdentityCreate failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v31);
        if (!v14)
          return;
      }
LABEL_88:
      free(v14);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v45 = "nw_parameters_copy_application_service_identity_block_invoke";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v21, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_parameters_copy_application_service_identity_block_invoke";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s SecGenerateSelfSignedCertificate failed", buf, 0xCu);
        }
      }
      else if (v41)
      {
        v27 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v28 = type;
        v29 = os_log_type_enabled(v22, type);
        if (v27)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            v46 = 2082;
            v47 = (CFErrorRef)v27;
            _os_log_impl(&dword_182FBE000, v22, v28, "%{public}s SecGenerateSelfSignedCertificate failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v27);
          if (!v21)
            goto LABEL_53;
          goto LABEL_73;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_parameters_copy_application_service_identity_block_invoke";
          _os_log_impl(&dword_182FBE000, v22, v28, "%{public}s SecGenerateSelfSignedCertificate failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v37 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_parameters_copy_application_service_identity_block_invoke";
          _os_log_impl(&dword_182FBE000, v22, v37, "%{public}s SecGenerateSelfSignedCertificate failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v21)
    {
LABEL_53:
      CFRelease(v2);
      return;
    }
LABEL_73:
    free(v21);
    goto LABEL_53;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v45 = "nw_parameters_copy_application_service_identity_block_invoke";
  v46 = 2114;
  v47 = error;
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v41 = 0;
  if (!__nwlog_fault(v5, &type, &v41))
    goto LABEL_48;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_parameters_copy_application_service_identity_block_invoke";
      v46 = 2114;
      v47 = error;
      _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s SecKeyCreateRandomKey failed: %{public}@", buf, 0x16u);
    }
LABEL_47:

LABEL_48:
    if (!v5)
      goto LABEL_50;
    goto LABEL_49;
  }
  if (!v41)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v26 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_parameters_copy_application_service_identity_block_invoke";
      v46 = 2114;
      v47 = error;
      _os_log_impl(&dword_182FBE000, v6, v26, "%{public}s SecKeyCreateRandomKey failed: %{public}@, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_47;
  }
  v17 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  v18 = type;
  v19 = os_log_type_enabled(v6, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_parameters_copy_application_service_identity_block_invoke";
      v46 = 2114;
      v47 = error;
      _os_log_impl(&dword_182FBE000, v6, v18, "%{public}s SecKeyCreateRandomKey failed: %{public}@, no backtrace", buf, 0x16u);
    }
    goto LABEL_47;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446722;
    v45 = "nw_parameters_copy_application_service_identity_block_invoke";
    v46 = 2114;
    v47 = error;
    v48 = 2082;
    v49 = v17;
    _os_log_impl(&dword_182FBE000, v6, v18, "%{public}s SecKeyCreateRandomKey failed: %{public}@, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v17);
  if (v5)
LABEL_49:
    free(v5);
LABEL_50:
  if (error)
  {
    CFRelease(error);
    error = 0;
  }
  if (v2)
    goto LABEL_53;
}

nw_parameters_t nw_parameters_create_application_service_quic()
{
  id v0;
  void *v1;
  nw_parameters_t application_service_quic_using_identity;

  v0 = nw_parameters_copy_application_service_identity();
  v1 = v0;
  if (v0)
    application_service_quic_using_identity = nw_parameters_create_application_service_quic_using_identity(v0);
  else
    application_service_quic_using_identity = 0;

  return application_service_quic_using_identity;
}

void sub_18356B5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_parameters_t nw_parameters_create_application_service_quic_using_identity(void *a1)
{
  id v1;
  nw_parameters_t v2;
  NWConcrete_nw_protocol_options *options;
  NWConcrete_nw_protocol_options *v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  id v8;
  nw_protocol_stack_t v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = nw_parameters_create();
    nw_parameters_set_migrating_peer_to_peer(v2);
    nw_parameters_set_use_awdl(v2, 1);
    if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
      dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
    options = nw_protocol_create_options((void *)g_udp_definition);
    nw_udp_options_set_use_quic_stats(options, 1);
    nw_udp_options_set_no_metadata(options, 1);
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
    v4 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
    v5 = nw_quic_copy_sec_protocol_options(&v4->super);
    sec_protocol_options_add_tls_application_protocol(v5, "application-service");

    v6 = nw_quic_stream_copy_shared_connection_options(v4);
    nw_quic_connection_set_probe_simultaneously(v6, 1);

    v7 = nw_quic_copy_sec_protocol_options(&v4->super);
    sec_protocol_options_set_peer_authentication_required(v7, 1);
    v8 = nw_quic_stream_copy_shared_connection_options(v4);
    nw_quic_connection_set_local_identity(v8, v1);
    nw_quic_connection_set_pmtud_for_non_transport(v8, 1);
    nw_quic_connection_set_migration_for_non_transport(v8, 1);
    nw_quic_connection_set_source_connection_id_length(v8, 4);
    v9 = nw_parameters_copy_default_protocol_stack(v2);
    nw_protocol_stack_append_application_protocol(v9, v4);
    nw_protocol_stack_set_transport_protocol(v9, &options->super);

    goto LABEL_7;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_create_application_service_quic_using_identity";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_create_application_service_quic_using_identity";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null identity", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_create_application_service_quic_using_identity";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null identity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_create_application_service_quic_using_identity";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null identity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_create_application_service_quic_using_identity";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null identity, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v12)
    free(v12);
  v2 = 0;
LABEL_7:

  return v2;
}

void sub_18356B9DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v6;

  _Unwind_Resume(a1);
}

void nw_parameters_set_web_search_content(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 0x40000;
    else
      v9 = 0;
    v10 = v8 & 0xFFFBFFFF;
    *(_WORD *)v6 = v10;
    *(_BYTE *)(v6 + 2) = (v10 | v9) >> 16;
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_web_search_content";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_web_search_content";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_web_search_content";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_web_search_content";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_web_search_content";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

NSObject *nw_parameters_create_secure_http_messaging(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  void (**v10)(id, NWConcrete_nw_protocol_options *);
  id v11;
  void (**v12)(id, NWConcrete_nw_protocol_options *);
  nw_parameters_t v13;
  nw_parameters_t v14;
  NWConcrete_nw_protocol_options *options;
  id v16;
  id v17;
  id v18;
  void *v19;
  NWConcrete_nw_protocol_options *v20;
  NWConcrete_nw_protocol_options *v21;
  id v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  NWConcrete_nw_protocol_options *v26;
  NWConcrete_nw_protocol_options *v27;
  Class isa;
  NSObject *v29;
  id v30;
  NWConcrete_nw_protocol_options *v31;
  NWConcrete_nw_protocol_options *v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  id v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  NWConcrete_nw_protocol_options *v41;
  id v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  id v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  const char *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  os_log_type_t v54;
  Class v55;
  NSObject *v56;
  uint64_t v57;
  NWConcrete_nw_protocol_transform *v58;
  NWConcrete_nw_protocol_transform *v59;
  NWConcrete_nw_protocol_transform *v60;
  NWConcrete_nw_protocol_transform *v61;
  NWConcrete_nw_protocol_transform *v62;
  NWConcrete_nw_protocol_transform *v63;
  NWConcrete_nw_protocol_options *v64;
  NWConcrete_nw_protocol_transform *v65;
  NWConcrete_nw_protocol_transform *v66;
  NWConcrete_nw_protocol_transform *v67;
  NWConcrete_nw_protocol_transform *v68;
  NSObject *v69;
  id v70;
  const char *v71;
  const char *v72;
  NSObject *v73;
  os_log_type_t v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  char *v79;
  NSObject *v80;
  os_log_type_t v81;
  _BOOL4 v82;
  id v83;
  const char *v84;
  NSObject *v85;
  os_log_type_t v86;
  char *v87;
  NSObject *v88;
  os_log_type_t v89;
  _BOOL4 v90;
  os_log_type_t v91;
  id v92;
  os_log_type_t v93;
  const char *v94;
  NSObject *v95;
  os_log_type_t v96;
  _BOOL4 v97;
  os_log_type_t v98;
  os_log_type_t v99;
  os_log_type_t v100;
  const char *v101;
  os_log_type_t v102;
  _BOOL4 v103;
  os_log_type_t v104;
  os_log_type_t v105;
  char *v106;
  os_log_type_t v107;
  void *v109;
  char *v110;
  NSObject *v111;
  os_log_type_t v112;
  void *v113;
  os_log_type_t v114;
  void *v115;
  os_log_type_t v116;
  void *v117;
  os_log_type_t v118;
  void *v119;
  os_log_type_t v120;
  void *v121;
  os_log_type_t v122;
  void *v123;
  char *v124;
  NSObject *v125;
  os_log_type_t v126;
  char *backtrace_string;
  NSObject *v128;
  os_log_type_t v129;
  _BOOL4 v130;
  os_log_type_t v131;
  _BOOL4 v132;
  os_log_type_t v133;
  _BOOL4 v134;
  os_log_type_t v135;
  _BOOL4 v136;
  os_log_type_t v137;
  _BOOL4 v138;
  char *v139;
  os_log_type_t v140;
  _BOOL4 v141;
  char *v142;
  NSObject *v143;
  os_log_type_t v144;
  _BOOL4 v145;
  os_log_type_t v146;
  os_log_type_t v147;
  os_log_type_t v148;
  os_log_type_t v149;
  os_log_type_t v150;
  os_log_type_t v151;
  os_log_type_t v152;
  char *v153;
  NSObject *stack;
  void *v155;
  void (**v156)(id, NWConcrete_nw_protocol_options *);
  void *v157;
  void (**v158)(void);
  void (**v159)(id, NWConcrete_nw_protocol_options *);
  char v160;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v163;
  __int16 v164;
  char *v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v158 = a3;
  v159 = a4;
  v11 = a5;
  v156 = v10;
  v157 = v9;
  v155 = v11;
  if (!v9)
  {
    __nwlog_obj();
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v163 = "nw_parameters_create_secure_http_messaging";
    v110 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v160 = 0;
    if (!__nwlog_fault(v110, &type, &v160))
      goto LABEL_315;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v112 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v111, v112, "%{public}s called with null configure_tls", buf, 0xCu);
      }
      goto LABEL_296;
    }
    if (!v160)
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v146 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v111, v146, "%{public}s called with null configure_tls, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_296;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v128 = objc_claimAutoreleasedReturnValue();
    v129 = type;
    v130 = os_log_type_enabled(v128, type);
    if (!backtrace_string)
    {
      if (v130)
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v128, v129, "%{public}s called with null configure_tls, no backtrace", buf, 0xCu);
      }
      goto LABEL_314;
    }
    if (v130)
    {
      *(_DWORD *)buf = 136446466;
      v163 = "nw_parameters_create_secure_http_messaging";
      v164 = 2082;
      v165 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v128, v129, "%{public}s called with null configure_tls, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_267;
  }
  if (!v10)
  {
    __nwlog_obj();
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v163 = "nw_parameters_create_secure_http_messaging";
    v110 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v160 = 0;
    if (!__nwlog_fault(v110, &type, &v160))
      goto LABEL_315;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v114 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v111, v114, "%{public}s called with null configure_quic_stream", buf, 0xCu);
      }
      goto LABEL_296;
    }
    if (!v160)
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v147 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v111, v147, "%{public}s called with null configure_quic_stream, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_296;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v128 = objc_claimAutoreleasedReturnValue();
    v131 = type;
    v132 = os_log_type_enabled(v128, type);
    if (!backtrace_string)
    {
      if (v132)
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v128, v131, "%{public}s called with null configure_quic_stream, no backtrace", buf, 0xCu);
      }
      goto LABEL_314;
    }
    if (v132)
    {
      *(_DWORD *)buf = 136446466;
      v163 = "nw_parameters_create_secure_http_messaging";
      v164 = 2082;
      v165 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v128, v131, "%{public}s called with null configure_quic_stream, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_267;
  }
  if (!v158)
  {
    __nwlog_obj();
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v163 = "nw_parameters_create_secure_http_messaging";
    v110 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v160 = 0;
    if (!__nwlog_fault(v110, &type, &v160))
      goto LABEL_315;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v116 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v111, v116, "%{public}s called with null configure_quic_connection", buf, 0xCu);
      }
      goto LABEL_296;
    }
    if (!v160)
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v148 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v111, v148, "%{public}s called with null configure_quic_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_296;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v128 = objc_claimAutoreleasedReturnValue();
    v133 = type;
    v134 = os_log_type_enabled(v128, type);
    if (!backtrace_string)
    {
      if (v134)
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v128, v133, "%{public}s called with null configure_quic_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_314;
    }
    if (v134)
    {
      *(_DWORD *)buf = 136446466;
      v163 = "nw_parameters_create_secure_http_messaging";
      v164 = 2082;
      v165 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v128, v133, "%{public}s called with null configure_quic_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_267;
  }
  if (!v159)
  {
    __nwlog_obj();
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v163 = "nw_parameters_create_secure_http_messaging";
    v110 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v160 = 0;
    if (!__nwlog_fault(v110, &type, &v160))
      goto LABEL_315;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v118 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v111, v118, "%{public}s called with null configure_tcp", buf, 0xCu);
      }
      goto LABEL_296;
    }
    if (!v160)
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v149 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v111, v149, "%{public}s called with null configure_tcp, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_296;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v128 = objc_claimAutoreleasedReturnValue();
    v135 = type;
    v136 = os_log_type_enabled(v128, type);
    if (!backtrace_string)
    {
      if (v136)
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v128, v135, "%{public}s called with null configure_tcp, no backtrace", buf, 0xCu);
      }
      goto LABEL_314;
    }
    if (v136)
    {
      *(_DWORD *)buf = 136446466;
      v163 = "nw_parameters_create_secure_http_messaging";
      v164 = 2082;
      v165 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v128, v135, "%{public}s called with null configure_tcp, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_267;
  }
  v12 = (void (**)(id, NWConcrete_nw_protocol_options *))v11;
  if (!v11)
  {
    __nwlog_obj();
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v163 = "nw_parameters_create_secure_http_messaging";
    v110 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v160 = 0;
    if (!__nwlog_fault(v110, &type, &v160))
      goto LABEL_315;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v120 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v111, v120, "%{public}s called with null configure_http_messaging", buf, 0xCu);
      }
      goto LABEL_296;
    }
    if (!v160)
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v150 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v111, v150, "%{public}s called with null configure_http_messaging, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_296;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v128 = objc_claimAutoreleasedReturnValue();
    v137 = type;
    v138 = os_log_type_enabled(v128, type);
    if (!backtrace_string)
    {
      if (v138)
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v128, v137, "%{public}s called with null configure_http_messaging, no backtrace", buf, 0xCu);
      }
      goto LABEL_314;
    }
    if (v138)
    {
      *(_DWORD *)buf = 136446466;
      v163 = "nw_parameters_create_secure_http_messaging";
      v164 = 2082;
      v165 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v128, v137, "%{public}s called with null configure_http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_267:

    free(backtrace_string);
    if (!v110)
      goto LABEL_317;
    goto LABEL_316;
  }
  if (v11 == &__block_literal_global_18950)
  {
    __nwlog_obj();
    v121 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v163 = "nw_parameters_create_secure_http_messaging";
    v110 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v160 = 0;
    if (!__nwlog_fault(v110, &type, &v160))
      goto LABEL_315;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v122 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v111, v122, "%{public}s called with null (configure_http_messaging != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
LABEL_296:

      goto LABEL_315;
    }
    if (!v160)
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v151 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v111, v151, "%{public}s called with null (configure_http_messaging != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_296;
    }
    v139 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v128 = objc_claimAutoreleasedReturnValue();
    v140 = type;
    v141 = os_log_type_enabled(v128, type);
    if (v139)
    {
      if (v141)
      {
        *(_DWORD *)buf = 136446466;
        v163 = "nw_parameters_create_secure_http_messaging";
        v164 = 2082;
        v165 = v139;
        _os_log_impl(&dword_182FBE000, v128, v140, "%{public}s called with null (configure_http_messaging != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v139);
LABEL_315:
      if (!v110)
      {
LABEL_317:
        v69 = 0;
        goto LABEL_207;
      }
LABEL_316:
      free(v110);
      goto LABEL_317;
    }
    if (v141)
    {
      *(_DWORD *)buf = 136446210;
      v163 = "nw_parameters_create_secure_http_messaging";
      _os_log_impl(&dword_182FBE000, v128, v140, "%{public}s called with null (configure_http_messaging != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
    }
LABEL_314:

    goto LABEL_315;
  }
  v13 = nw_parameters_create();
  v14 = v13;
  if (v13)
  {
    stack = v13[19].isa;
    if (stack)
    {
      if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
      options = nw_protocol_create_options((void *)nw_protocol_copy_http_messaging_definition_definition);
      if (v12 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_86)
        v12[2](v12, options);
      v16 = nw_http_messaging_options_copy_http1_options(options);

      v17 = nw_http_messaging_options_copy_http2_options(options);
      v18 = nw_http_messaging_options_copy_http3_options(options);

      if (v9 == &__block_literal_global_18950)
      {
        v21 = 0;
        goto LABEL_30;
      }
      v19 = (void *)nw_protocol_boringssl_copy_definition();
      v20 = nw_protocol_create_options(v19);

      if (v20)
      {
        v21 = v20;
        if (v18)
          sec_protocol_options_add_transport_specific_application_protocol();
        if (v17)
          sec_protocol_options_add_transport_specific_application_protocol();
        if (v16)
          sec_protocol_options_add_transport_specific_application_protocol();
        if (v9 != &__block_literal_global_86)
          (*((void (**)(id, NWConcrete_nw_protocol_options *))v9 + 2))(v9, v21);

LABEL_30:
        v26 = 0;
        if (v156 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18950
          || v158 == (void (**)(void))&__block_literal_global_18950
          || !v18)
        {
          goto LABEL_41;
        }
        if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
        v27 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
        if (v27)
        {
          v26 = v27;
          isa = stack[3].isa;
          stack[3].isa = (Class)v26;
          v29 = stack;

          if (v156 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_86)
            v156[2](v156, v26);
          v30 = nw_quic_stream_copy_shared_connection_options(v26);
          v31 = v21;
          nw_quic_connection_set_sec_protocol_options(v30, v31);

          if (v158 != (void (**)(void))&__block_literal_global_86)
            v158[2]();

LABEL_41:
          if (v16)
          {
            if (v159 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18950)
            {
              v32 = 0;
              goto LABEL_84;
            }
          }
          else
          {
            v32 = 0;
            if (v159 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18950
              || !v17)
            {
              goto LABEL_84;
            }
          }
          if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
            dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
          v41 = nw_protocol_create_options((void *)g_tcp_definition);
          if (v41)
          {
            if (v159 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_86)
              v159[2](v159, v41);
            if (v26)
            {
              v32 = v41;
            }
            else
            {
              v32 = v41;
              v55 = stack[3].isa;
              stack[3].isa = (Class)v32;
              v56 = stack;

            }
LABEL_84:
            nw_protocol_stack_prepend_application_protocol(stack, &options->super);
            v57 = nw_array_create();
            if (!v26 || !v32)
            {
LABEL_88:
              if (!v21 || !v32)
                goto LABEL_97;
              if (nw_get_http3_override_onceToken != -1)
                dispatch_once(&nw_get_http3_override_onceToken, &__block_literal_global_8_72633);
              if (nw_get_http3_override_value != 1)
              {
                v62 = objc_alloc_init(NWConcrete_nw_protocol_transform);
                if (!v62)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v92 = (id)gLogObj;
                  *(_DWORD *)buf = 136446210;
                  v163 = "nw_parameters_create_secure_http_messaging";
                  v84 = (const char *)_os_log_send_and_compose_impl();

                  type = OS_LOG_TYPE_ERROR;
                  v160 = 0;
                  if (!__nwlog_fault(v84, &type, &v160))
                    goto LABEL_197;
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v85 = objc_claimAutoreleasedReturnValue();
                    v93 = type;
                    if (os_log_type_enabled(v85, type))
                    {
                      *(_DWORD *)buf = 136446210;
                      v163 = "nw_parameters_create_secure_http_messaging";
                      _os_log_impl(&dword_182FBE000, v85, v93, "%{public}s nw_protocol_transform_create failed", buf, 0xCu);
                    }
                    goto LABEL_193;
                  }
                  if (!v160)
                  {
                    __nwlog_obj();
                    v85 = objc_claimAutoreleasedReturnValue();
                    v107 = type;
                    if (os_log_type_enabled(v85, type))
                    {
                      *(_DWORD *)buf = 136446210;
                      v163 = "nw_parameters_create_secure_http_messaging";
                      _os_log_impl(&dword_182FBE000, v85, v107, "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded", buf, 0xCu);
                    }
                    goto LABEL_193;
                  }
                  v101 = __nw_create_backtrace_string();
                  __nwlog_obj();
                  v95 = objc_claimAutoreleasedReturnValue();
                  v102 = type;
                  v103 = os_log_type_enabled(v95, type);
                  v153 = (char *)v101;
                  if (v101)
                  {
                    if (v103)
                    {
                      *(_DWORD *)buf = 136446466;
                      v163 = "nw_parameters_create_secure_http_messaging";
                      v164 = 2082;
                      v165 = (char *)v101;
                      _os_log_impl(&dword_182FBE000, v95, v102, "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    goto LABEL_163;
                  }
                  if (v103)
                  {
                    *(_DWORD *)buf = 136446210;
                    v163 = "nw_parameters_create_secure_http_messaging";
                    _os_log_impl(&dword_182FBE000, v95, v102, "%{public}s nw_protocol_transform_create failed, no backtrace", buf, 0xCu);
                  }
                  goto LABEL_196;
                }
                v63 = v62;
                *((_BYTE *)v63 + 8) |= 2u;

                v64 = nw_protocol_options_copy(v21);
                nw_protocol_transform_append_protocol(v63, 4, v64);

                nw_protocol_transform_append_protocol(v63, 3, v32);
                nw_protocol_transform_add_match_url_scheme(v63, "https");
                nw_protocol_transform_add_match_url_scheme(v63, "wss");
                v65 = v63;
                *((_BYTE *)v63 + 8) |= 0x10u;

                nw_array_append(v57, v65);
              }
              v66 = objc_alloc_init(NWConcrete_nw_protocol_transform);
              if (v66)
              {
                v67 = v66;
                *((_BYTE *)v67 + 8) |= 2u;

                nw_protocol_transform_append_protocol(v67, 3, v32);
                nw_protocol_transform_add_match_url_scheme(v67, "http");
                nw_protocol_transform_add_match_url_scheme(v67, "ws");
                v68 = v67;
                *((_BYTE *)v67 + 8) |= 0x10u;

                nw_array_append(v57, v68);
LABEL_97:
                if (v57 && *(_QWORD *)(v57 + 24) != *(_QWORD *)(v57 + 16))
                  nw_parameters_set_transform_array(v14, (void *)v57);
                nw_parameters_set_data_mode(v14, 2u);
                v69 = v14;
                goto LABEL_201;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v83 = (id)gLogObj;
              *(_DWORD *)buf = 136446210;
              v163 = "nw_parameters_create_secure_http_messaging";
              v84 = (const char *)_os_log_send_and_compose_impl();

              type = OS_LOG_TYPE_ERROR;
              v160 = 0;
              if (!__nwlog_fault(v84, &type, &v160))
              {
LABEL_197:
                if (v84)
                {
                  v106 = (char *)v84;
                  goto LABEL_199;
                }
                goto LABEL_200;
              }
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v85 = objc_claimAutoreleasedReturnValue();
                v86 = type;
                if (os_log_type_enabled(v85, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v163 = "nw_parameters_create_secure_http_messaging";
                  _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s nw_protocol_transform_create failed", buf, 0xCu);
                }
LABEL_193:

                goto LABEL_197;
              }
              if (!v160)
              {
                __nwlog_obj();
                v85 = objc_claimAutoreleasedReturnValue();
                v105 = type;
                if (os_log_type_enabled(v85, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v163 = "nw_parameters_create_secure_http_messaging";
                  _os_log_impl(&dword_182FBE000, v85, v105, "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_193;
              }
              v94 = __nw_create_backtrace_string();
              __nwlog_obj();
              v95 = objc_claimAutoreleasedReturnValue();
              v96 = type;
              v97 = os_log_type_enabled(v95, type);
              v153 = (char *)v94;
              if (v94)
              {
                if (v97)
                {
                  *(_DWORD *)buf = 136446466;
                  v163 = "nw_parameters_create_secure_http_messaging";
                  v164 = 2082;
                  v165 = (char *)v94;
                  _os_log_impl(&dword_182FBE000, v95, v96, "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                }
LABEL_163:

                free(v153);
                goto LABEL_197;
              }
              if (v97)
              {
                *(_DWORD *)buf = 136446210;
                v163 = "nw_parameters_create_secure_http_messaging";
                _os_log_impl(&dword_182FBE000, v95, v96, "%{public}s nw_protocol_transform_create failed, no backtrace", buf, 0xCu);
              }
LABEL_196:

              goto LABEL_197;
            }
            v58 = objc_alloc_init(NWConcrete_nw_protocol_transform);
            if (v58)
            {
              v59 = v58;
              *((_BYTE *)v59 + 8) |= 2u;

              nw_protocol_transform_append_protocol(v59, 3, v26);
              v60 = v59;
              v60->fallback_mode = 2;

              nw_protocol_transform_add_match_url_scheme(v60, "https");
              nw_protocol_transform_add_match_url_scheme(v60, "wss");
              v61 = v60;
              *((_BYTE *)v59 + 8) |= 0x10u;

              nw_array_append(v57, v61);
              goto LABEL_88;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v70 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            v163 = "nw_parameters_create_secure_http_messaging";
            v71 = (const char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v160 = 0;
            v72 = v71;
            if (!__nwlog_fault(v71, &type, &v160))
            {
LABEL_186:
              if (v72)
              {
                v106 = (char *)v72;
LABEL_199:
                free(v106);
              }
LABEL_200:
              v69 = 0;
LABEL_201:

              goto LABEL_202;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v73 = (id)gLogObj;
              v74 = type;
              if (os_log_type_enabled(v73, type))
              {
                *(_DWORD *)buf = 136446210;
                v163 = "nw_parameters_create_secure_http_messaging";
                _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s nw_protocol_transform_create failed", buf, 0xCu);
              }
            }
            else
            {
              if (v160)
              {
                v87 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v88 = objc_claimAutoreleasedReturnValue();
                v89 = type;
                v90 = os_log_type_enabled(v88, type);
                if (v87)
                {
                  if (v90)
                  {
                    *(_DWORD *)buf = 136446466;
                    v163 = "nw_parameters_create_secure_http_messaging";
                    v164 = 2082;
                    v165 = v87;
                    _os_log_impl(&dword_182FBE000, v88, v89, "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v87);
                }
                else
                {
                  if (v90)
                  {
                    *(_DWORD *)buf = 136446210;
                    v163 = "nw_parameters_create_secure_http_messaging";
                    _os_log_impl(&dword_182FBE000, v88, v89, "%{public}s nw_protocol_transform_create failed, no backtrace", buf, 0xCu);
                  }

                }
                goto LABEL_185;
              }
              __nwlog_obj();
              v73 = objc_claimAutoreleasedReturnValue();
              v104 = type;
              if (os_log_type_enabled(v73, type))
              {
                *(_DWORD *)buf = 136446210;
                v163 = "nw_parameters_create_secure_http_messaging";
                _os_log_impl(&dword_182FBE000, v73, v104, "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded", buf, 0xCu);
              }
            }

LABEL_185:
            v72 = v71;
            goto LABEL_186;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v46 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v163 = "nw_parameters_create_secure_http_messaging";
          v47 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v160 = 0;
          if (__nwlog_fault(v47, &type, &v160))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v48 = (id)gLogObj;
              v49 = type;
              if (os_log_type_enabled(v48, type))
              {
                *(_DWORD *)buf = 136446210;
                v163 = "nw_parameters_create_secure_http_messaging";
                _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s nw_tcp_create_options failed", buf, 0xCu);
              }
LABEL_73:

              goto LABEL_176;
            }
            if (!v160)
            {
              __nwlog_obj();
              v48 = objc_claimAutoreleasedReturnValue();
              v100 = type;
              if (os_log_type_enabled(v48, type))
              {
                *(_DWORD *)buf = 136446210;
                v163 = "nw_parameters_create_secure_http_messaging";
                _os_log_impl(&dword_182FBE000, v48, v100, "%{public}s nw_tcp_create_options failed, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_73;
            }
            v79 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v80 = objc_claimAutoreleasedReturnValue();
            v81 = type;
            v82 = os_log_type_enabled(v80, type);
            if (v79)
            {
              if (v82)
              {
                *(_DWORD *)buf = 136446466;
                v163 = "nw_parameters_create_secure_http_messaging";
                v164 = 2082;
                v165 = v79;
                _os_log_impl(&dword_182FBE000, v80, v81, "%{public}s nw_tcp_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v79);
              if (!v47)
                goto LABEL_178;
              goto LABEL_177;
            }
            if (v82)
            {
              *(_DWORD *)buf = 136446210;
              v163 = "nw_parameters_create_secure_http_messaging";
              _os_log_impl(&dword_182FBE000, v80, v81, "%{public}s nw_tcp_create_options failed, no backtrace", buf, 0xCu);
            }

          }
LABEL_176:
          if (!v47)
          {
LABEL_178:
            v69 = 0;
LABEL_202:

            goto LABEL_203;
          }
LABEL_177:
          free(v47);
          goto LABEL_178;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v42 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        v43 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v160 = 0;
        if (__nwlog_fault(v43, &type, &v160))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v44 = (id)gLogObj;
            v45 = type;
            if (os_log_type_enabled(v44, type))
            {
              *(_DWORD *)buf = 136446210;
              v163 = "nw_parameters_create_secure_http_messaging";
              _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s nw_quic_create_stream_options failed", buf, 0xCu);
            }
LABEL_68:

            goto LABEL_170;
          }
          if (!v160)
          {
            __nwlog_obj();
            v44 = objc_claimAutoreleasedReturnValue();
            v99 = type;
            if (os_log_type_enabled(v44, type))
            {
              *(_DWORD *)buf = 136446210;
              v163 = "nw_parameters_create_secure_http_messaging";
              _os_log_impl(&dword_182FBE000, v44, v99, "%{public}s nw_quic_create_stream_options failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_68;
          }
          v75 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v76 = objc_claimAutoreleasedReturnValue();
          v77 = type;
          v78 = os_log_type_enabled(v76, type);
          if (v75)
          {
            if (v78)
            {
              *(_DWORD *)buf = 136446466;
              v163 = "nw_parameters_create_secure_http_messaging";
              v164 = 2082;
              v165 = v75;
              _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s nw_quic_create_stream_options failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v75);
            if (!v43)
              goto LABEL_172;
            goto LABEL_171;
          }
          if (v78)
          {
            *(_DWORD *)buf = 136446210;
            v163 = "nw_parameters_create_secure_http_messaging";
            _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s nw_quic_create_stream_options failed, no backtrace", buf, 0xCu);
          }

        }
LABEL_170:
        if (!v43)
        {
LABEL_172:
          v69 = 0;
LABEL_203:

          goto LABEL_204;
        }
LABEL_171:
        free(v43);
        goto LABEL_172;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v37 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v163 = "nw_parameters_create_secure_http_messaging";
      v38 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v160 = 0;
      if (__nwlog_fault(v38, &type, &v160))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v39 = (id)gLogObj;
          v40 = type;
          if (os_log_type_enabled(v39, type))
          {
            *(_DWORD *)buf = 136446210;
            v163 = "nw_parameters_create_secure_http_messaging";
            _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s nw_tls_create_options failed", buf, 0xCu);
          }
        }
        else if (v160)
        {
          v50 = __nw_create_backtrace_string();
          if (v50)
          {
            v51 = (char *)v50;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v52 = (id)gLogObj;
            v53 = type;
            if (os_log_type_enabled(v52, type))
            {
              *(_DWORD *)buf = 136446466;
              v163 = "nw_parameters_create_secure_http_messaging";
              v164 = 2082;
              v165 = v51;
              _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s nw_tls_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v51);
            if (!v38)
              goto LABEL_152;
            goto LABEL_151;
          }
          __nwlog_obj();
          v39 = objc_claimAutoreleasedReturnValue();
          v98 = type;
          if (os_log_type_enabled(v39, type))
          {
            *(_DWORD *)buf = 136446210;
            v163 = "nw_parameters_create_secure_http_messaging";
            _os_log_impl(&dword_182FBE000, v39, v98, "%{public}s nw_tls_create_options failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v39 = (id)gLogObj;
          v91 = type;
          if (os_log_type_enabled(v39, type))
          {
            *(_DWORD *)buf = 136446210;
            v163 = "nw_parameters_create_secure_http_messaging";
            _os_log_impl(&dword_182FBE000, v39, v91, "%{public}s nw_tls_create_options failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v38)
      {
LABEL_152:
        v69 = 0;
LABEL_204:

LABEL_205:
        goto LABEL_206;
      }
LABEL_151:
      free(v38);
      goto LABEL_152;
    }
    __nwlog_obj();
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v163 = "nw_parameters_create_secure_http_messaging";
    v124 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v160 = 0;
    if (__nwlog_fault(v124, &type, &v160))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v125 = objc_claimAutoreleasedReturnValue();
        v126 = type;
        if (os_log_type_enabled(v125, type))
        {
          *(_DWORD *)buf = 136446210;
          v163 = "nw_parameters_create_secure_http_messaging";
          _os_log_impl(&dword_182FBE000, v125, v126, "%{public}s called with null stack", buf, 0xCu);
        }
      }
      else
      {
        if (v160)
        {
          v142 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v143 = objc_claimAutoreleasedReturnValue();
          v144 = type;
          v145 = os_log_type_enabled(v143, type);
          if (v142)
          {
            if (v145)
            {
              *(_DWORD *)buf = 136446466;
              v163 = "nw_parameters_create_secure_http_messaging";
              v164 = 2082;
              v165 = v142;
              _os_log_impl(&dword_182FBE000, v143, v144, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v142);
          }
          else
          {
            if (v145)
            {
              *(_DWORD *)buf = 136446210;
              v163 = "nw_parameters_create_secure_http_messaging";
              _os_log_impl(&dword_182FBE000, v143, v144, "%{public}s called with null stack, no backtrace", buf, 0xCu);
            }

          }
          goto LABEL_324;
        }
        __nwlog_obj();
        v125 = objc_claimAutoreleasedReturnValue();
        v152 = type;
        if (os_log_type_enabled(v125, type))
        {
          *(_DWORD *)buf = 136446210;
          v163 = "nw_parameters_create_secure_http_messaging";
          _os_log_impl(&dword_182FBE000, v125, v152, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_324:
    if (v124)
      free(v124);
    v69 = 0;
    goto LABEL_205;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v22 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v163 = "nw_parameters_create_secure_http_messaging";
  v23 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v160 = 0;
  if (__nwlog_fault(v23, &type, &v160))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v24 = (id)gLogObj;
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
LABEL_28:

      goto LABEL_115;
    }
    if (!v160)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v24 = (id)gLogObj;
      v54 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_182FBE000, v24, v54, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_28;
    }
    v33 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v34 = (id)gLogObj;
    v35 = type;
    v36 = os_log_type_enabled(v34, type);
    if (v33)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v163 = "nw_parameters_create_secure_http_messaging";
        v164 = 2082;
        v165 = v33;
        _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v33);
      if (!v23)
        goto LABEL_117;
      goto LABEL_116;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446210;
      v163 = "nw_parameters_create_secure_http_messaging";
      _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
    }

  }
LABEL_115:
  if (v23)
LABEL_116:
    free(v23);
LABEL_117:
  v69 = 0;
LABEL_206:

LABEL_207:
  return v69;
}

void sub_18356E1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_18356E288()
{
  JUMPOUT(0x18356E24CLL);
}

void sub_18356E290()
{
  JUMPOUT(0x18356E258);
}

NSObject *nw_parameters_create_webtransport_http(void *a1, void *a2, void *a3, void *a4)
{
  void (**v7)(id, NWConcrete_nw_protocol_options *);
  id v8;
  id v9;
  id v10;
  void *v11;
  NWConcrete_nw_protocol_options *options;
  NSObject *secure_http_messaging;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  void *v26;
  os_log_type_t v27;
  void *v28;
  os_log_type_t v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  _BOOL4 v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  char *v46;
  _BOOL4 v47;
  os_log_type_t v48;
  os_log_type_t v49;
  os_log_type_t v50;
  os_log_type_t v51;
  os_log_type_t v52;
  os_log_type_t v53;
  os_log_type_t v54;
  char v55;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  char *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = v10;
  if (!v8)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_parameters_create_webtransport_http";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v19, &type, &v55))
      goto LABEL_108;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null configure_tls", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (!v55)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v48 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v48, "%{public}s called with null configure_tls, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_107;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v35 = type;
    v36 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v35, "%{public}s called with null configure_tls, no backtrace", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v58 = "nw_parameters_create_webtransport_http";
      v59 = 2082;
      v60 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v20, v35, "%{public}s called with null configure_tls, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
  if (!v9)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_parameters_create_webtransport_http";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v19, &type, &v55))
      goto LABEL_108;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null configure_quic", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (!v55)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v49 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v49, "%{public}s called with null configure_quic, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_107;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v37 = type;
    v38 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v37, "%{public}s called with null configure_quic, no backtrace", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      v58 = "nw_parameters_create_webtransport_http";
      v59 = 2082;
      v60 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v20, v37, "%{public}s called with null configure_quic, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
  if (!v10)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_parameters_create_webtransport_http";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v19, &type, &v55))
      goto LABEL_108;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null configure_tcp", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (!v55)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v50 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v50, "%{public}s called with null configure_tcp, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_107;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v39 = type;
    v40 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v39, "%{public}s called with null configure_tcp, no backtrace", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      v58 = "nw_parameters_create_webtransport_http";
      v59 = 2082;
      v60 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v20, v39, "%{public}s called with null configure_tcp, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
  if (!v7)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_parameters_create_webtransport_http";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v19, &type, &v55))
      goto LABEL_108;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null configure_webtransport", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (!v55)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v51 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v51, "%{public}s called with null configure_webtransport, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_107;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v41 = type;
    v42 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v41, "%{public}s called with null configure_webtransport, no backtrace", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446466;
      v58 = "nw_parameters_create_webtransport_http";
      v59 = 2082;
      v60 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v20, v41, "%{public}s called with null configure_webtransport, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_63:

    free(backtrace_string);
    if (!v19)
      goto LABEL_110;
    goto LABEL_109;
  }
  if (v7 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18950)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_parameters_create_webtransport_http";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v19, &type, &v55))
      goto LABEL_108;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s called with null (configure_webtransport != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
    }
    else if (v55)
    {
      v43 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      v45 = os_log_type_enabled(v20, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          v58 = "nw_parameters_create_webtransport_http";
          v59 = 2082;
          v60 = v43;
          _os_log_impl(&dword_182FBE000, v20, v44, "%{public}s called with null (configure_webtransport != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
LABEL_108:
        if (!v19)
        {
LABEL_110:
          v16 = 0;
          goto LABEL_13;
        }
LABEL_109:
        free(v19);
        goto LABEL_110;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v44, "%{public}s called with null (configure_webtransport != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v52 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_182FBE000, v20, v52, "%{public}s called with null (configure_webtransport != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_107:

    goto LABEL_108;
  }
  if (nw_protocol_copy_webtransport_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_59802);
  options = nw_protocol_create_options((void *)nw_protocol_copy_webtransport_definition::definition);
  if (v7 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_86)
    v7[2](v7, options);
  secure_http_messaging = nw_parameters_create_secure_http_messaging(v8, v9, &__block_literal_global_86, v11, &__block_literal_global_120);
  v14 = nw_parameters_copy_default_protocol_stack(secure_http_messaging);
  v15 = v14;
  if (!v14)
  {
    __nwlog_obj();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_parameters_create_webtransport_http";
    v31 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (__nwlog_fault(v31, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nw_parameters_create_webtransport_http";
          _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null stack", buf, 0xCu);
        }
      }
      else if (v55)
      {
        v46 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v54 = type;
        v47 = os_log_type_enabled(v32, type);
        if (v46)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            v58 = "nw_parameters_create_webtransport_http";
            v59 = 2082;
            v60 = v46;
            _os_log_impl(&dword_182FBE000, v32, v54, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v46);
          goto LABEL_114;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nw_parameters_create_webtransport_http";
          _os_log_impl(&dword_182FBE000, v32, v54, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v53 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nw_parameters_create_webtransport_http";
          _os_log_impl(&dword_182FBE000, v32, v53, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_114:
    if (v31)
      free(v31);
    v16 = 0;
    goto LABEL_12;
  }
  nw_protocol_stack_prepend_application_protocol(v14, &options->super);
  v16 = secure_http_messaging;
LABEL_12:

LABEL_13:
  return v16;
}

void sub_18356F024(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void __nw_parameters_create_webtransport_http_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  nw_http_messaging_options_set_http1_options(v2, 0);
  nw_http2_set_local_max_webtransport_sessions(v2, 1);
  nw_http2_set_capsule_handling_disabled(v2, 1);
  nw_http3_set_0rtt_enabled(v2, 0);

}

void sub_18356F0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL nw_parameters_enumerate_transformed_parameters(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  _QWORD *v23;
  id v24;
  char v25;
  os_log_type_t v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = (unsigned __int8 *)v3[20];
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_parameters_enumerate_transformed_parameters_block_invoke;
      v22[3] = &unk_1E14A8F28;
      v23 = v3;
      v24 = v5;
      v7 = nw_array_apply(v6, (uint64_t)v22);

      goto LABEL_4;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parameters_enumerate_transformed_parameters";
    v10 = (char *)_os_log_send_and_compose_impl();

    v26 = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v10, &v26, &v25))
    {
      if (v26 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = v26;
        if (os_log_type_enabled(v11, v26))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null enumerator", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v25)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = v26;
        if (os_log_type_enabled(v11, v26))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = v26;
      v19 = os_log_type_enabled(v11, v26);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_parameters_enumerate_transformed_parameters";
        v29 = 2082;
        v30 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parameters_enumerate_transformed_parameters";
    v10 = (char *)_os_log_send_and_compose_impl();

    v26 = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v10, &v26, &v25))
    {
      if (v26 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = v26;
        if (os_log_type_enabled(v11, v26))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v25)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = v26;
        if (os_log_type_enabled(v11, v26))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = v26;
      v17 = os_log_type_enabled(v11, v26);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_parameters_enumerate_transformed_parameters";
        v29 = 2082;
        v30 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

uint64_t __nw_parameters_enumerate_transformed_parameters_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  _BOOL8 v6;
  uint64_t v7;

  v4 = a3;
  v5 = *(id *)(a1 + 32);
  v6 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v5, 0, 1);

  nw_protocol_transform_modify_parameters(v4, (void *)v6);
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  return v7;
}

void sub_18356F66C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_are_equivalent_for_path_evaluation(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  _BOOL8 v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = nw_parameters_copy_path_parameters(v3, 0);
      v7 = nw_parameters_copy_path_parameters(v5, 0);
      v8 = nw_path_parameters_are_equal(v6, v7, 1u);

      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_parameters_are_equivalent_for_path_evaluation";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_parameters_are_equivalent_for_path_evaluation";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null right", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v23)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_parameters_are_equivalent_for_path_evaluation";
          _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null right, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_parameters_are_equivalent_for_path_evaluation";
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null right, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "nw_parameters_are_equivalent_for_path_evaluation";
        v27 = 2082;
        v28 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null right, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_parameters_are_equivalent_for_path_evaluation";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_parameters_are_equivalent_for_path_evaluation";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null left", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v23)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_parameters_are_equivalent_for_path_evaluation";
          _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null left, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_parameters_are_equivalent_for_path_evaluation";
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null left, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "nw_parameters_are_equivalent_for_path_evaluation";
        v27 = 2082;
        v28 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null left, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v11)
    free(v11);
  v8 = 0;
LABEL_4:

  return v8;
}

void sub_18356FB70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_next_hop_required_interface_subtype(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *(unsigned int *)(*((_QWORD *)v1 + 13) + 96);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_next_hop_required_interface_subtype";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_next_hop_required_interface_subtype";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_next_hop_required_interface_subtype";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_next_hop_required_interface_subtype";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_next_hop_required_interface_subtype";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t NWPBAgentReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  __objc2_class *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  BOOL v57;
  int *v58;
  int *v59;
  int *v60;
  __objc2_class *v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  uint64_t result;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  int v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  int v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  int v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  int v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  int v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  int v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  int v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  int v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  int v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  int v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  int v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  int v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  int v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  int v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  int v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  int v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int)*MEMORY[0x1E0D82BF0];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]);
  v8 = (int *)MEMORY[0x1E0D82BC8];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x1E0D82BB8];
    v11 = &OBJC_METACLASS___NWConcrete_nw_masque_server;
    v12 = &OBJC_IVAR___NWURLLoaderData__URL;
    v13 = &OBJC_IVAR___NWURLLoaderData__URL;
    while (1)
    {
      v17 = (_BYTE *)(a2 + *v8);
      if (*v17)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v18 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v19 = v18 & 0x7F;
      if ((v18 & 0x80) == 0)
        goto LABEL_41;
      v20 = *v3;
      v21 = *(_QWORD *)(a2 + v20);
      if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_39;
      v22 = v21 + 1;
      v23 = *(char *)(*(_QWORD *)(a2 + *v10) + v21);
      *(_QWORD *)(a2 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << 7;
      if ((v23 & 0x80000000) == 0)
        goto LABEL_41;
      v24 = *v3;
      v25 = *(_QWORD *)(a2 + v24);
      if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_39;
      v26 = v25 + 1;
      v27 = *(char *)(*(_QWORD *)(a2 + *v10) + v25);
      *(_QWORD *)(a2 + v24) = v26;
      v19 |= (unint64_t)(v27 & 0x7F) << 14;
      if ((v27 & 0x80000000) == 0)
        goto LABEL_41;
      v28 = *v3;
      v29 = *(_QWORD *)(a2 + v28);
      if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_39;
      v30 = v29 + 1;
      v31 = *(char *)(*(_QWORD *)(a2 + *v10) + v29);
      *(_QWORD *)(a2 + v28) = v30;
      v19 |= (unint64_t)(v31 & 0x7F) << 21;
      if ((v31 & 0x80000000) == 0)
        goto LABEL_41;
      v32 = *v3;
      v33 = *(_QWORD *)(a2 + v32);
      if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_39;
      v34 = v33 + 1;
      v35 = *(char *)(*(_QWORD *)(a2 + *v10) + v33);
      *(_QWORD *)(a2 + v32) = v34;
      v19 |= (unint64_t)(v35 & 0x7F) << 28;
      if ((v35 & 0x80000000) == 0)
        goto LABEL_41;
      v36 = *v3;
      v37 = *(_QWORD *)(a2 + v36);
      if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_39:
        v17 = (_BYTE *)(a2 + *v8);
        goto LABEL_40;
      }
      v38 = v37 + 1;
      v39 = *(char *)(*(_QWORD *)(a2 + *v10) + v37);
      *(_QWORD *)(a2 + v36) = v38;
      if (v39 < 0)
      {
        v40 = *v3;
        v41 = *(_QWORD *)(a2 + v40);
        if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_39;
        v42 = v41 + 1;
        v43 = *(char *)(*(_QWORD *)(a2 + *v10) + v41);
        *(_QWORD *)(a2 + v40) = v42;
        if (v43 < 0)
        {
          v44 = *v3;
          v45 = *(_QWORD *)(a2 + v44);
          if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_39;
          v46 = v45 + 1;
          v47 = *(char *)(*(_QWORD *)(a2 + *v10) + v45);
          *(_QWORD *)(a2 + v44) = v46;
          if (v47 < 0)
          {
            v48 = *v3;
            v49 = *(_QWORD *)(a2 + v48);
            if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v6))
              goto LABEL_39;
            v50 = v49 + 1;
            v51 = *(char *)(*(_QWORD *)(a2 + *v10) + v49);
            *(_QWORD *)(a2 + v48) = v50;
            if (v51 < 0)
            {
              v52 = *v3;
              v53 = *(_QWORD *)(a2 + v52);
              if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v6))
                goto LABEL_39;
              v54 = v53 + 1;
              v55 = *(char *)(*(_QWORD *)(a2 + *v10) + v53);
              *(_QWORD *)(a2 + v52) = v54;
              if (v55 < 0)
              {
                v19 = 0;
                v56 = *(unsigned __int8 *)(a2 + *v8);
                goto LABEL_43;
              }
            }
          }
        }
      }
LABEL_41:
      v56 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8))
        v19 = 0;
LABEL_43:
      if (v56)
        v57 = 1;
      else
        v57 = (v19 & 7) == 4;
      if (v57)
        return *(_BYTE *)(a2 + *v8) == 0;
      switch((v19 >> 3))
      {
        case 1u:
          v58 = v13;
          v59 = v10;
          v60 = v12;
          v61 = v11;
          v62 = objc_alloc_init(&v11[40]);
          objc_storeStrong((id *)(a1 + 8), v62);
          if (PBReaderPlaceMark() && NWPBAgentClassReadFrom((uint64_t)v62, a2))
          {
            PBReaderRecallMark();

            v11 = v61;
            v12 = v60;
            v10 = v59;
            v13 = v58;
            goto LABEL_5;
          }

          return 0;
        case 2u:
          PBReaderReadString();
          v14 = objc_claimAutoreleasedReturnValue();
          v15 = v12[152];
          goto LABEL_4;
        case 3u:
          PBReaderReadString();
          v14 = objc_claimAutoreleasedReturnValue();
          v15 = v13[153];
          goto LABEL_4;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v84 = *v3;
          v85 = *(_QWORD *)(a2 + v84);
          if (v85 == -1 || v85 >= *(_QWORD *)(a2 + *v6))
          {
            v88 = 0;
LABEL_141:
            *(_BYTE *)(a2 + *v8) = 1;
            goto LABEL_142;
          }
          v86 = v85 + 1;
          v87 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v85);
          *(_QWORD *)(a2 + v84) = v86;
          v88 = v87 & 0x7F;
          if ((v87 & 0x80) == 0)
            goto LABEL_142;
          v89 = *v3;
          v90 = *(_QWORD *)(a2 + v89);
          if (v90 == -1 || v90 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_141;
          v91 = v90 + 1;
          v92 = *(char *)(*(_QWORD *)(a2 + *v10) + v90);
          *(_QWORD *)(a2 + v89) = v91;
          v88 |= (unint64_t)(v92 & 0x7F) << 7;
          if ((v92 & 0x80000000) == 0)
            goto LABEL_142;
          v93 = *v3;
          v94 = *(_QWORD *)(a2 + v93);
          if (v94 == -1 || v94 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_141;
          v95 = v94 + 1;
          v96 = *(char *)(*(_QWORD *)(a2 + *v10) + v94);
          *(_QWORD *)(a2 + v93) = v95;
          v88 |= (unint64_t)(v96 & 0x7F) << 14;
          if ((v96 & 0x80000000) == 0)
            goto LABEL_142;
          v97 = *v3;
          v98 = *(_QWORD *)(a2 + v97);
          if (v98 == -1 || v98 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_141;
          v99 = v98 + 1;
          v100 = *(char *)(*(_QWORD *)(a2 + *v10) + v98);
          *(_QWORD *)(a2 + v97) = v99;
          v88 |= (unint64_t)(v100 & 0x7F) << 21;
          if ((v100 & 0x80000000) == 0)
            goto LABEL_142;
          v101 = *v3;
          v102 = *(_QWORD *)(a2 + v101);
          if (v102 == -1 || v102 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_141;
          v103 = v102 + 1;
          v104 = *(char *)(*(_QWORD *)(a2 + *v10) + v102);
          *(_QWORD *)(a2 + v101) = v103;
          v88 |= (unint64_t)(v104 & 0x7F) << 28;
          if ((v104 & 0x80000000) == 0)
            goto LABEL_142;
          v173 = *v3;
          v174 = *(_QWORD *)(a2 + v173);
          if (v174 == -1 || v174 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_141;
          v175 = v174 + 1;
          v176 = *(char *)(*(_QWORD *)(a2 + *v10) + v174);
          *(_QWORD *)(a2 + v173) = v175;
          v88 |= (unint64_t)(v176 & 0x7F) << 35;
          if (v176 < 0)
          {
            v205 = *v3;
            v206 = *(_QWORD *)(a2 + v205);
            if (v206 == -1 || v206 >= *(_QWORD *)(a2 + *v6))
              goto LABEL_141;
            v207 = v206 + 1;
            v208 = *(char *)(*(_QWORD *)(a2 + *v10) + v206);
            *(_QWORD *)(a2 + v205) = v207;
            v88 |= (unint64_t)(v208 & 0x7F) << 42;
            if (v208 < 0)
            {
              v209 = *v3;
              v210 = *(_QWORD *)(a2 + v209);
              if (v210 == -1 || v210 >= *(_QWORD *)(a2 + *v6))
                goto LABEL_141;
              v211 = v210 + 1;
              v212 = *(char *)(*(_QWORD *)(a2 + *v10) + v210);
              *(_QWORD *)(a2 + v209) = v211;
              v88 |= (unint64_t)(v212 & 0x7F) << 49;
              if (v212 < 0)
              {
                v213 = *v3;
                v214 = *(_QWORD *)(a2 + v213);
                if (v214 == -1 || v214 >= *(_QWORD *)(a2 + *v6))
                  goto LABEL_141;
                v215 = v214 + 1;
                v216 = *(char *)(*(_QWORD *)(a2 + *v10) + v214);
                *(_QWORD *)(a2 + v213) = v215;
                v88 |= (unint64_t)(v216 & 0x7F) << 56;
                if (v216 < 0)
                {
                  v217 = *v3;
                  v218 = *(_QWORD *)(a2 + v217);
                  if (v218 == -1 || v218 >= *(_QWORD *)(a2 + *v6))
                    goto LABEL_141;
                  v219 = v218 + 1;
                  v220 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v218);
                  *(_QWORD *)(a2 + v217) = v219;
                  if ((v220 & 0x80) != 0)
                  {
                    v88 = 0;
                    goto LABEL_144;
                  }
                  v88 |= v220 << 63;
                }
              }
            }
          }
LABEL_142:
          if (*(_BYTE *)(a2 + *v8))
            v88 = 0;
LABEL_144:
          *(_BYTE *)(a1 + 40) = v88 != 0;
          goto LABEL_5;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 8u;
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v6))
          {
            v67 = 0;
LABEL_136:
            *(_BYTE *)(a2 + *v8) = 1;
            goto LABEL_137;
          }
          v65 = v64 + 1;
          v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v64);
          *(_QWORD *)(a2 + v63) = v65;
          v67 = v66 & 0x7F;
          if ((v66 & 0x80) == 0)
            goto LABEL_137;
          v68 = *v3;
          v69 = *(_QWORD *)(a2 + v68);
          if (v69 == -1 || v69 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_136;
          v70 = v69 + 1;
          v71 = *(char *)(*(_QWORD *)(a2 + *v10) + v69);
          *(_QWORD *)(a2 + v68) = v70;
          v67 |= (unint64_t)(v71 & 0x7F) << 7;
          if ((v71 & 0x80000000) == 0)
            goto LABEL_137;
          v72 = *v3;
          v73 = *(_QWORD *)(a2 + v72);
          if (v73 == -1 || v73 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_136;
          v74 = v73 + 1;
          v75 = *(char *)(*(_QWORD *)(a2 + *v10) + v73);
          *(_QWORD *)(a2 + v72) = v74;
          v67 |= (unint64_t)(v75 & 0x7F) << 14;
          if ((v75 & 0x80000000) == 0)
            goto LABEL_137;
          v76 = *v3;
          v77 = *(_QWORD *)(a2 + v76);
          if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_136;
          v78 = v77 + 1;
          v79 = *(char *)(*(_QWORD *)(a2 + *v10) + v77);
          *(_QWORD *)(a2 + v76) = v78;
          v67 |= (unint64_t)(v79 & 0x7F) << 21;
          if ((v79 & 0x80000000) == 0)
            goto LABEL_137;
          v80 = *v3;
          v81 = *(_QWORD *)(a2 + v80);
          if (v81 == -1 || v81 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_136;
          v82 = v81 + 1;
          v83 = *(char *)(*(_QWORD *)(a2 + *v10) + v81);
          *(_QWORD *)(a2 + v80) = v82;
          v67 |= (unint64_t)(v83 & 0x7F) << 28;
          if ((v83 & 0x80000000) == 0)
            goto LABEL_137;
          v169 = *v3;
          v170 = *(_QWORD *)(a2 + v169);
          if (v170 == -1 || v170 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_136;
          v171 = v170 + 1;
          v172 = *(char *)(*(_QWORD *)(a2 + *v10) + v170);
          *(_QWORD *)(a2 + v169) = v171;
          v67 |= (unint64_t)(v172 & 0x7F) << 35;
          if (v172 < 0)
          {
            v189 = *v3;
            v190 = *(_QWORD *)(a2 + v189);
            if (v190 == -1 || v190 >= *(_QWORD *)(a2 + *v6))
              goto LABEL_136;
            v191 = v190 + 1;
            v192 = *(char *)(*(_QWORD *)(a2 + *v10) + v190);
            *(_QWORD *)(a2 + v189) = v191;
            v67 |= (unint64_t)(v192 & 0x7F) << 42;
            if (v192 < 0)
            {
              v193 = *v3;
              v194 = *(_QWORD *)(a2 + v193);
              if (v194 == -1 || v194 >= *(_QWORD *)(a2 + *v6))
                goto LABEL_136;
              v195 = v194 + 1;
              v196 = *(char *)(*(_QWORD *)(a2 + *v10) + v194);
              *(_QWORD *)(a2 + v193) = v195;
              v67 |= (unint64_t)(v196 & 0x7F) << 49;
              if (v196 < 0)
              {
                v197 = *v3;
                v198 = *(_QWORD *)(a2 + v197);
                if (v198 == -1 || v198 >= *(_QWORD *)(a2 + *v6))
                  goto LABEL_136;
                v199 = v198 + 1;
                v200 = *(char *)(*(_QWORD *)(a2 + *v10) + v198);
                *(_QWORD *)(a2 + v197) = v199;
                v67 |= (unint64_t)(v200 & 0x7F) << 56;
                if (v200 < 0)
                {
                  v201 = *v3;
                  v202 = *(_QWORD *)(a2 + v201);
                  if (v202 == -1 || v202 >= *(_QWORD *)(a2 + *v6))
                    goto LABEL_136;
                  v203 = v202 + 1;
                  v204 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v202);
                  *(_QWORD *)(a2 + v201) = v203;
                  if ((v204 & 0x80) != 0)
                  {
                    v67 = 0;
                    goto LABEL_139;
                  }
                  v67 |= v204 << 63;
                }
              }
            }
          }
LABEL_137:
          if (*(_BYTE *)(a2 + *v8))
            v67 = 0;
LABEL_139:
          *(_BYTE *)(a1 + 43) = v67 != 0;
          goto LABEL_5;
        case 6u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          v126 = *v3;
          v127 = *(_QWORD *)(a2 + v126);
          if (v127 == -1 || v127 >= *(_QWORD *)(a2 + *v6))
          {
            v130 = 0;
LABEL_151:
            *(_BYTE *)(a2 + *v8) = 1;
            goto LABEL_152;
          }
          v128 = v127 + 1;
          v129 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v127);
          *(_QWORD *)(a2 + v126) = v128;
          v130 = v129 & 0x7F;
          if ((v129 & 0x80) == 0)
            goto LABEL_152;
          v131 = *v3;
          v132 = *(_QWORD *)(a2 + v131);
          if (v132 == -1 || v132 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_151;
          v133 = v132 + 1;
          v134 = *(char *)(*(_QWORD *)(a2 + *v10) + v132);
          *(_QWORD *)(a2 + v131) = v133;
          v130 |= (unint64_t)(v134 & 0x7F) << 7;
          if ((v134 & 0x80000000) == 0)
            goto LABEL_152;
          v135 = *v3;
          v136 = *(_QWORD *)(a2 + v135);
          if (v136 == -1 || v136 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_151;
          v137 = v136 + 1;
          v138 = *(char *)(*(_QWORD *)(a2 + *v10) + v136);
          *(_QWORD *)(a2 + v135) = v137;
          v130 |= (unint64_t)(v138 & 0x7F) << 14;
          if ((v138 & 0x80000000) == 0)
            goto LABEL_152;
          v139 = *v3;
          v140 = *(_QWORD *)(a2 + v139);
          if (v140 == -1 || v140 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_151;
          v141 = v140 + 1;
          v142 = *(char *)(*(_QWORD *)(a2 + *v10) + v140);
          *(_QWORD *)(a2 + v139) = v141;
          v130 |= (unint64_t)(v142 & 0x7F) << 21;
          if ((v142 & 0x80000000) == 0)
            goto LABEL_152;
          v143 = *v3;
          v144 = *(_QWORD *)(a2 + v143);
          if (v144 == -1 || v144 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_151;
          v145 = v144 + 1;
          v146 = *(char *)(*(_QWORD *)(a2 + *v10) + v144);
          *(_QWORD *)(a2 + v143) = v145;
          v130 |= (unint64_t)(v146 & 0x7F) << 28;
          if ((v146 & 0x80000000) == 0)
            goto LABEL_152;
          v181 = *v3;
          v182 = *(_QWORD *)(a2 + v181);
          if (v182 == -1 || v182 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_151;
          v183 = v182 + 1;
          v184 = *(char *)(*(_QWORD *)(a2 + *v10) + v182);
          *(_QWORD *)(a2 + v181) = v183;
          v130 |= (unint64_t)(v184 & 0x7F) << 35;
          if (v184 < 0)
          {
            v237 = *v3;
            v238 = *(_QWORD *)(a2 + v237);
            if (v238 == -1 || v238 >= *(_QWORD *)(a2 + *v6))
              goto LABEL_151;
            v239 = v238 + 1;
            v240 = *(char *)(*(_QWORD *)(a2 + *v10) + v238);
            *(_QWORD *)(a2 + v237) = v239;
            v130 |= (unint64_t)(v240 & 0x7F) << 42;
            if (v240 < 0)
            {
              v241 = *v3;
              v242 = *(_QWORD *)(a2 + v241);
              if (v242 == -1 || v242 >= *(_QWORD *)(a2 + *v6))
                goto LABEL_151;
              v243 = v242 + 1;
              v244 = *(char *)(*(_QWORD *)(a2 + *v10) + v242);
              *(_QWORD *)(a2 + v241) = v243;
              v130 |= (unint64_t)(v244 & 0x7F) << 49;
              if (v244 < 0)
              {
                v245 = *v3;
                v246 = *(_QWORD *)(a2 + v245);
                if (v246 == -1 || v246 >= *(_QWORD *)(a2 + *v6))
                  goto LABEL_151;
                v247 = v246 + 1;
                v248 = *(char *)(*(_QWORD *)(a2 + *v10) + v246);
                *(_QWORD *)(a2 + v245) = v247;
                v130 |= (unint64_t)(v248 & 0x7F) << 56;
                if (v248 < 0)
                {
                  v249 = *v3;
                  v250 = *(_QWORD *)(a2 + v249);
                  if (v250 == -1 || v250 >= *(_QWORD *)(a2 + *v6))
                    goto LABEL_151;
                  v251 = v250 + 1;
                  v252 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v250);
                  *(_QWORD *)(a2 + v249) = v251;
                  if ((v252 & 0x80) != 0)
                  {
                    v130 = 0;
                    goto LABEL_154;
                  }
                  v130 |= v252 << 63;
                }
              }
            }
          }
LABEL_152:
          if (*(_BYTE *)(a2 + *v8))
            v130 = 0;
LABEL_154:
          *(_BYTE *)(a1 + 44) = v130 != 0;
          goto LABEL_5;
        case 7u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v147 = *v3;
          v148 = *(_QWORD *)(a2 + v147);
          if (v148 == -1 || v148 >= *(_QWORD *)(a2 + *v6))
          {
            v151 = 0;
LABEL_156:
            *(_BYTE *)(a2 + *v8) = 1;
            goto LABEL_157;
          }
          v149 = v148 + 1;
          v150 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v148);
          *(_QWORD *)(a2 + v147) = v149;
          v151 = v150 & 0x7F;
          if ((v150 & 0x80) == 0)
            goto LABEL_157;
          v152 = *v3;
          v153 = *(_QWORD *)(a2 + v152);
          if (v153 == -1 || v153 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_156;
          v154 = v153 + 1;
          v155 = *(char *)(*(_QWORD *)(a2 + *v10) + v153);
          *(_QWORD *)(a2 + v152) = v154;
          v151 |= (unint64_t)(v155 & 0x7F) << 7;
          if ((v155 & 0x80000000) == 0)
            goto LABEL_157;
          v156 = *v3;
          v157 = *(_QWORD *)(a2 + v156);
          if (v157 == -1 || v157 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_156;
          v158 = v157 + 1;
          v159 = *(char *)(*(_QWORD *)(a2 + *v10) + v157);
          *(_QWORD *)(a2 + v156) = v158;
          v151 |= (unint64_t)(v159 & 0x7F) << 14;
          if ((v159 & 0x80000000) == 0)
            goto LABEL_157;
          v160 = *v3;
          v161 = *(_QWORD *)(a2 + v160);
          if (v161 == -1 || v161 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_156;
          v162 = v161 + 1;
          v163 = *(char *)(*(_QWORD *)(a2 + *v10) + v161);
          *(_QWORD *)(a2 + v160) = v162;
          v151 |= (unint64_t)(v163 & 0x7F) << 21;
          if ((v163 & 0x80000000) == 0)
            goto LABEL_157;
          v164 = *v3;
          v165 = *(_QWORD *)(a2 + v164);
          if (v165 == -1 || v165 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_156;
          v166 = v165 + 1;
          v167 = *(char *)(*(_QWORD *)(a2 + *v10) + v165);
          *(_QWORD *)(a2 + v164) = v166;
          v151 |= (unint64_t)(v167 & 0x7F) << 28;
          if ((v167 & 0x80000000) == 0)
            goto LABEL_157;
          v185 = *v3;
          v186 = *(_QWORD *)(a2 + v185);
          if (v186 == -1 || v186 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_156;
          v187 = v186 + 1;
          v188 = *(char *)(*(_QWORD *)(a2 + *v10) + v186);
          *(_QWORD *)(a2 + v185) = v187;
          v151 |= (unint64_t)(v188 & 0x7F) << 35;
          if (v188 < 0)
          {
            v253 = *v3;
            v254 = *(_QWORD *)(a2 + v253);
            if (v254 == -1 || v254 >= *(_QWORD *)(a2 + *v6))
              goto LABEL_156;
            v255 = v254 + 1;
            v256 = *(char *)(*(_QWORD *)(a2 + *v10) + v254);
            *(_QWORD *)(a2 + v253) = v255;
            v151 |= (unint64_t)(v256 & 0x7F) << 42;
            if (v256 < 0)
            {
              v257 = *v3;
              v258 = *(_QWORD *)(a2 + v257);
              if (v258 == -1 || v258 >= *(_QWORD *)(a2 + *v6))
                goto LABEL_156;
              v259 = v258 + 1;
              v260 = *(char *)(*(_QWORD *)(a2 + *v10) + v258);
              *(_QWORD *)(a2 + v257) = v259;
              v151 |= (unint64_t)(v260 & 0x7F) << 49;
              if (v260 < 0)
              {
                v261 = *v3;
                v262 = *(_QWORD *)(a2 + v261);
                if (v262 == -1 || v262 >= *(_QWORD *)(a2 + *v6))
                  goto LABEL_156;
                v263 = v262 + 1;
                v264 = *(char *)(*(_QWORD *)(a2 + *v10) + v262);
                *(_QWORD *)(a2 + v261) = v263;
                v151 |= (unint64_t)(v264 & 0x7F) << 56;
                if (v264 < 0)
                {
                  v265 = *v3;
                  v266 = *(_QWORD *)(a2 + v265);
                  if (v266 == -1 || v266 >= *(_QWORD *)(a2 + *v6))
                    goto LABEL_156;
                  v267 = v266 + 1;
                  v268 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v266);
                  *(_QWORD *)(a2 + v265) = v267;
                  if ((v268 & 0x80) != 0)
                  {
                    v151 = 0;
                    goto LABEL_159;
                  }
                  v151 |= v268 << 63;
                }
              }
            }
          }
LABEL_157:
          if (*(_BYTE *)(a2 + *v8))
            v151 = 0;
LABEL_159:
          *(_BYTE *)(a1 + 41) = v151 != 0;
          goto LABEL_5;
        case 8u:
          *(_BYTE *)(a1 + 48) |= 4u;
          v105 = *v3;
          v106 = *(_QWORD *)(a2 + v105);
          if (v106 == -1 || v106 >= *(_QWORD *)(a2 + *v6))
          {
            v109 = 0;
LABEL_146:
            *(_BYTE *)(a2 + *v8) = 1;
            goto LABEL_147;
          }
          v107 = v106 + 1;
          v108 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v106);
          *(_QWORD *)(a2 + v105) = v107;
          v109 = v108 & 0x7F;
          if ((v108 & 0x80) == 0)
            goto LABEL_147;
          v110 = *v3;
          v111 = *(_QWORD *)(a2 + v110);
          if (v111 == -1 || v111 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_146;
          v112 = v111 + 1;
          v113 = *(char *)(*(_QWORD *)(a2 + *v10) + v111);
          *(_QWORD *)(a2 + v110) = v112;
          v109 |= (unint64_t)(v113 & 0x7F) << 7;
          if ((v113 & 0x80000000) == 0)
            goto LABEL_147;
          v114 = *v3;
          v115 = *(_QWORD *)(a2 + v114);
          if (v115 == -1 || v115 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_146;
          v116 = v115 + 1;
          v117 = *(char *)(*(_QWORD *)(a2 + *v10) + v115);
          *(_QWORD *)(a2 + v114) = v116;
          v109 |= (unint64_t)(v117 & 0x7F) << 14;
          if ((v117 & 0x80000000) == 0)
            goto LABEL_147;
          v118 = *v3;
          v119 = *(_QWORD *)(a2 + v118);
          if (v119 == -1 || v119 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_146;
          v120 = v119 + 1;
          v121 = *(char *)(*(_QWORD *)(a2 + *v10) + v119);
          *(_QWORD *)(a2 + v118) = v120;
          v109 |= (unint64_t)(v121 & 0x7F) << 21;
          if ((v121 & 0x80000000) == 0)
            goto LABEL_147;
          v122 = *v3;
          v123 = *(_QWORD *)(a2 + v122);
          if (v123 == -1 || v123 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_146;
          v124 = v123 + 1;
          v125 = *(char *)(*(_QWORD *)(a2 + *v10) + v123);
          *(_QWORD *)(a2 + v122) = v124;
          v109 |= (unint64_t)(v125 & 0x7F) << 28;
          if ((v125 & 0x80000000) == 0)
            goto LABEL_147;
          v177 = *v3;
          v178 = *(_QWORD *)(a2 + v177);
          if (v178 == -1 || v178 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_146;
          v179 = v178 + 1;
          v180 = *(char *)(*(_QWORD *)(a2 + *v10) + v178);
          *(_QWORD *)(a2 + v177) = v179;
          v109 |= (unint64_t)(v180 & 0x7F) << 35;
          if (v180 < 0)
          {
            v221 = *v3;
            v222 = *(_QWORD *)(a2 + v221);
            if (v222 == -1 || v222 >= *(_QWORD *)(a2 + *v6))
              goto LABEL_146;
            v223 = v222 + 1;
            v224 = *(char *)(*(_QWORD *)(a2 + *v10) + v222);
            *(_QWORD *)(a2 + v221) = v223;
            v109 |= (unint64_t)(v224 & 0x7F) << 42;
            if (v224 < 0)
            {
              v225 = *v3;
              v226 = *(_QWORD *)(a2 + v225);
              if (v226 == -1 || v226 >= *(_QWORD *)(a2 + *v6))
                goto LABEL_146;
              v227 = v226 + 1;
              v228 = *(char *)(*(_QWORD *)(a2 + *v10) + v226);
              *(_QWORD *)(a2 + v225) = v227;
              v109 |= (unint64_t)(v228 & 0x7F) << 49;
              if (v228 < 0)
              {
                v229 = *v3;
                v230 = *(_QWORD *)(a2 + v229);
                if (v230 == -1 || v230 >= *(_QWORD *)(a2 + *v6))
                  goto LABEL_146;
                v231 = v230 + 1;
                v232 = *(char *)(*(_QWORD *)(a2 + *v10) + v230);
                *(_QWORD *)(a2 + v229) = v231;
                v109 |= (unint64_t)(v232 & 0x7F) << 56;
                if (v232 < 0)
                {
                  v233 = *v3;
                  v234 = *(_QWORD *)(a2 + v233);
                  if (v234 == -1 || v234 >= *(_QWORD *)(a2 + *v6))
                    goto LABEL_146;
                  v235 = v234 + 1;
                  v236 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v234);
                  *(_QWORD *)(a2 + v233) = v235;
                  if ((v236 & 0x80) != 0)
                  {
                    v109 = 0;
                    goto LABEL_149;
                  }
                  v109 |= v236 << 63;
                }
              }
            }
          }
LABEL_147:
          if (*(_BYTE *)(a2 + *v8))
            v109 = 0;
LABEL_149:
          *(_BYTE *)(a1 + 42) = v109 != 0;
LABEL_5:
          v4 = *v3;
          v5 = *(_QWORD *)(a2 + v4);
          v7 = *(_QWORD *)(a2 + *v6);
          if (v5 >= v7)
            return *(_BYTE *)(a2 + *v8) == 0;
          break;
        case 9u:
          PBReaderReadData();
          v14 = objc_claimAutoreleasedReturnValue();
          v15 = 16;
LABEL_4:
          v16 = *(void **)(a1 + v15);
          *(_QWORD *)(a1 + v15) = v14;

          goto LABEL_5;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_5;
      }
    }
    v19 = 0;
LABEL_40:
    *v17 = 1;
    goto LABEL_41;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

BOOL NWPBAgentClassReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  BOOL v54;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int)*MEMORY[0x1E0D82BF0];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]);
  v8 = (int *)MEMORY[0x1E0D82BC8];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v14 = (_BYTE *)(a2 + *v8);
      if (*v14)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v16 = v15 & 0x7F;
      if ((v15 & 0x80) == 0)
        goto LABEL_40;
      v17 = *v3;
      v18 = *(_QWORD *)(a2 + v17);
      if (v18 == -1 || v18 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v19 = v18 + 1;
      v20 = *(char *)(*(_QWORD *)(a2 + *v10) + v18);
      *(_QWORD *)(a2 + v17) = v19;
      v16 |= (unint64_t)(v20 & 0x7F) << 7;
      if ((v20 & 0x80000000) == 0)
        goto LABEL_40;
      v21 = *v3;
      v22 = *(_QWORD *)(a2 + v21);
      if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v23 = v22 + 1;
      v24 = *(char *)(*(_QWORD *)(a2 + *v10) + v22);
      *(_QWORD *)(a2 + v21) = v23;
      v16 |= (unint64_t)(v24 & 0x7F) << 14;
      if ((v24 & 0x80000000) == 0)
        goto LABEL_40;
      v25 = *v3;
      v26 = *(_QWORD *)(a2 + v25);
      if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v27 = v26 + 1;
      v28 = *(char *)(*(_QWORD *)(a2 + *v10) + v26);
      *(_QWORD *)(a2 + v25) = v27;
      v16 |= (unint64_t)(v28 & 0x7F) << 21;
      if ((v28 & 0x80000000) == 0)
        goto LABEL_40;
      v29 = *v3;
      v30 = *(_QWORD *)(a2 + v29);
      if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v31 = v30 + 1;
      v32 = *(char *)(*(_QWORD *)(a2 + *v10) + v30);
      *(_QWORD *)(a2 + v29) = v31;
      v16 |= (unint64_t)(v32 & 0x7F) << 28;
      if ((v32 & 0x80000000) == 0)
        goto LABEL_40;
      v33 = *v3;
      v34 = *(_QWORD *)(a2 + v33);
      if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v35 = v34 + 1;
      v36 = *(char *)(*(_QWORD *)(a2 + *v10) + v34);
      *(_QWORD *)(a2 + v33) = v35;
      if ((v36 & 0x80000000) == 0)
        goto LABEL_40;
      v37 = *v3;
      v38 = *(_QWORD *)(a2 + v37);
      if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v39 = v38 + 1;
      v40 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
      *(_QWORD *)(a2 + v37) = v39;
      if ((v40 & 0x80000000) == 0)
        goto LABEL_40;
      v41 = *v3;
      v42 = *(_QWORD *)(a2 + v41);
      if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v43 = v42 + 1;
      v44 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
      *(_QWORD *)(a2 + v41) = v43;
      if ((v44 & 0x80000000) == 0)
        goto LABEL_40;
      v45 = *v3;
      v46 = *(_QWORD *)(a2 + v45);
      if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v47 = v46 + 1;
      v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
      *(_QWORD *)(a2 + v45) = v47;
      if ((v48 & 0x80000000) == 0)
        goto LABEL_40;
      v49 = *v3;
      v50 = *(_QWORD *)(a2 + v49);
      if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_38:
        v14 = (_BYTE *)(a2 + *v8);
        goto LABEL_39;
      }
      v51 = v50 + 1;
      v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
      *(_QWORD *)(a2 + v49) = v51;
      if (v52 < 0)
      {
        v16 = 0;
        v53 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_42;
      }
LABEL_40:
      v53 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8))
        v16 = 0;
LABEL_42:
      if (v53)
        v54 = 1;
      else
        v54 = (v16 & 7) == 4;
      if (v54)
        return *(_BYTE *)(a2 + *v8) == 0;
      if ((v16 >> 3) == 2)
      {
        PBReaderReadString();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = 16;
LABEL_4:
        v13 = *(void **)(a1 + v12);
        *(_QWORD *)(a1 + v12) = v11;

        goto LABEL_5;
      }
      if ((v16 >> 3) == 1)
      {
        PBReaderReadString();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = 8;
        goto LABEL_4;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v16 = 0;
LABEL_39:
    *v14 = 1;
    goto LABEL_40;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

BOOL nw_protocol_http_client_bottom_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  _BOOL4 logging_disabled;
  char v7;
  BOOL v8;
  _BOOL8 result;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  const char *v18;
  char *backtrace_string;
  _BOOL4 v20;
  _QWORD aBlock[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_create";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v11 = __nwlog_obj();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_create";
          v13 = "%{public}s called with null parameters";
LABEL_40:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v11 = __nwlog_obj();
        v12 = type;
        v20 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_create";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_41;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_create";
          v13 = "%{public}s called with null parameters, no backtrace";
          goto LABEL_40;
        }
      }
      else
      {
        v11 = __nwlog_obj();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_create";
          v13 = "%{public}s called with null parameters, backtrace limit exceeded";
          goto LABEL_40;
        }
      }
    }
LABEL_41:
    if (v10)
      free(v10);
    return 0;
  }
  v5 = (char *)malloc_type_calloc(1uLL, 0x128uLL, 0xEAFB8F1AuLL);
  if (v5)
  {
LABEL_3:
    *((_QWORD *)v5 + 36) = 0;
    *((_OWORD *)v5 + 16) = 0u;
    *((_OWORD *)v5 + 17) = 0u;
    *((_OWORD *)v5 + 14) = 0u;
    *((_OWORD *)v5 + 15) = 0u;
    *((_OWORD *)v5 + 12) = 0u;
    *((_OWORD *)v5 + 13) = 0u;
    *((_OWORD *)v5 + 10) = 0u;
    *((_OWORD *)v5 + 11) = 0u;
    *((_OWORD *)v5 + 8) = 0u;
    *((_OWORD *)v5 + 9) = 0u;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *(_OWORD *)v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v25 = (uint64_t)v5;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 0x40000000;
    aBlock[2] = __nw_protocol_http_client_bottom_create_block_invoke;
    aBlock[3] = &unk_1E149D278;
    aBlock[4] = buf;
    *((_QWORD *)v5 + 22) = _Block_copy(aBlock);
    _Block_object_dispose(buf, 8);
    logging_disabled = nw_path_parameters_get_logging_disabled(*(_QWORD *)(a4 + 104));
    if (logging_disabled)
      v7 = 4;
    else
      v7 = 0;
    v5[294] = v5[294] & 0xFB | v7;
    if (v5)
      v8 = logging_disabled;
    else
      v8 = 0;
    if (!v8)
    {
      if (gLogDatapath)
      {
        v16 = __nwlog_obj();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          v17 = "";
          v18 = v5 + 208;
          if (!v5)
            v18 = "";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_create";
          if (v5)
            v17 = " ";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v18;
          *(_WORD *)&buf[22] = 2080;
          v25 = (uint64_t)v17;
          _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }
    if (nw_protocol_http_client_bottom_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_http_client_bottom_identifier::onceToken, &__block_literal_global_22197);
    *((_QWORD *)v5 + 2) = &nw_protocol_http_client_bottom_identifier::protocol_identifier;
    if (nw_protocol_http_client_bottom_get_callbacks(void)::onceToken != -1)
      dispatch_once(&nw_protocol_http_client_bottom_get_callbacks(void)::onceToken, &__block_literal_global_17_22198);
    *((_QWORD *)v5 + 3) = &nw_protocol_http_client_bottom_get_callbacks(void)::protocol_callbacks;
    *((_QWORD *)v5 + 5) = v5;
    if (nw_protocol_http_client_bottom_get_listen_callbacks(void)::onceToken[0] != -1)
      dispatch_once(nw_protocol_http_client_bottom_get_listen_callbacks(void)::onceToken, &__block_literal_global_34);
    *((_QWORD *)v5 + 8) = &nw_protocol_http_client_bottom_get_listen_callbacks(void)::listen_protocol_callbacks;
    *((_QWORD *)v5 + 11) = v5;
    *((_WORD *)v5 + 146) = 0;
    return (BOOL)v5;
  }
  v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "strict_calloc";
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = 1;
  *(_WORD *)&buf[22] = 2048;
  v25 = 296;
  v15 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t __nw_protocol_http_client_bottom_create_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

void ___ZL51nw_protocol_http_client_bottom_get_listen_callbacksv_block_invoke()
{
  nw_protocol_http_client_bottom_get_listen_callbacks(void)::listen_protocol_callbacks = (uint64_t)nw_protocol_http_client_bottom_listen_protocol_new_flow;
  unk_1EDCE3BF0 = nw_protocol_http_client_bottom_listen_protocol_disconnected;
}

uint64_t nw_protocol_http_client_bottom_listen_protocol_new_flow(nw_listen_protocol *a1, nw_endpoint *a2, nw_parameters *a3)
{
  return 0;
}

void nw_protocol_http_client_bottom_listen_protocol_disconnected(nw_listen_protocol *a1, nw_protocol *a2)
{
  nw_protocol **handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *v7;
  _BOOL4 v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  NSObject *v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v3, &type, &v15))
      goto LABEL_24;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v4 = __nwlog_obj();
        v5 = type;
        v11 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
        }
        else if (v11)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
          v6 = "%{public}s called with null listener, no backtrace";
          goto LABEL_23;
        }
      }
      else
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
          v6 = "%{public}s called with null listener, backtrace limit exceeded";
          goto LABEL_23;
        }
      }
      goto LABEL_24;
    }
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_24;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
    v6 = "%{public}s called with null listener";
LABEL_23:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_24;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v3, &type, &v15))
      goto LABEL_24;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v15)
      {
        v7 = (char *)__nw_create_backtrace_string();
        v4 = __nwlog_obj();
        v5 = type;
        v12 = os_log_type_enabled(v4, type);
        if (v7)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
            v19 = 2082;
            v20 = v7;
            v9 = "%{public}s called with null existing_protocol, dumping backtrace:%{public}s";
            goto LABEL_16;
          }
LABEL_17:
          free(v7);
          if (!v3)
            return;
LABEL_25:
          free(v3);
          return;
        }
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
          v6 = "%{public}s called with null existing_protocol, no backtrace";
          goto LABEL_23;
        }
      }
      else
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
          v6 = "%{public}s called with null existing_protocol, backtrace limit exceeded";
          goto LABEL_23;
        }
      }
      goto LABEL_24;
    }
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_24;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
    v6 = "%{public}s called with null existing_protocol";
    goto LABEL_23;
  }
  handle = (nw_protocol **)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v3, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
          v6 = "%{public}s called with null http_client_bottom";
          goto LABEL_23;
        }
      }
      else if (v15)
      {
        v7 = (char *)__nw_create_backtrace_string();
        v4 = __nwlog_obj();
        v5 = type;
        v13 = os_log_type_enabled(v4, type);
        if (v7)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
            v19 = 2082;
            v20 = v7;
            v9 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
            goto LABEL_16;
          }
          goto LABEL_17;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
          v6 = "%{public}s called with null http_client_bottom, no backtrace";
          goto LABEL_23;
        }
      }
      else
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
          v6 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
          goto LABEL_23;
        }
      }
    }
LABEL_24:
    if (!v3)
      return;
    goto LABEL_25;
  }
  if (handle[17] != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v3, &type, &v15))
      goto LABEL_24;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      v6 = "%{public}s Ignoring listen protocol disconnected, not sent by output handler";
      goto LABEL_23;
    }
    if (!v15)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      v6 = "%{public}s Ignoring listen protocol disconnected, not sent by output handler, backtrace limit exceeded";
      goto LABEL_23;
    }
    v7 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    v5 = type;
    v8 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v7)
    {
      if (!v8)
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      v6 = "%{public}s Ignoring listen protocol disconnected, not sent by output handler, no backtrace";
      goto LABEL_23;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      v19 = 2082;
      v20 = v7;
      v9 = "%{public}s Ignoring listen protocol disconnected, not sent by output handler, dumping backtrace:%{public}s";
LABEL_16:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  if ((*((_BYTE *)handle + 294) & 4) == 0 && gLogDatapath)
  {
    v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      v19 = 2082;
      v20 = (char *)(handle + 26);
      v21 = 2080;
      v22 = " ";
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%slower protocol is disconnected", buf, 0x20u);
    }
  }
  nw_protocol_http_client_bottom_teardown((uint64_t)handle);
}

void nw_protocol_http_client_bottom_teardown(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_client_bottom_teardown";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_client_bottom_teardown";
      v6 = "%{public}s called with null protocol";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_http_client_bottom_teardown";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_38:
        if (!v3)
          return;
LABEL_39:
        free(v3);
        return;
      }
      if (!v8)
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_client_bottom_teardown";
      v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_client_bottom_teardown";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_37:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_38;
  }
  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    nw_protocol_remove_instance(*(_QWORD *)(a1 + 40));
    v2 = *(_QWORD *)(v1 + 136);
    if (v2)
    {
      nw_protocol_remove_listen_handler(v2, v1 + 64);
      *(_QWORD *)(v1 + 136) = 0;
    }
    if ((*(_BYTE *)(v1 + 294) & 8) == 0 && !*(_QWORD *)(v1 + 48) && *(_QWORD *)(v1 + 184) == *(_QWORD *)(v1 + 192))
      nw_http_client_bottom_destroy(v1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_http_client_bottom_teardown";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_client_bottom_teardown";
    v6 = "%{public}s called with null http_client_bottom";
    goto LABEL_37;
  }
  if (!v11)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_client_bottom_teardown";
    v6 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    goto LABEL_37;
  }
  v9 = (char *)__nw_create_backtrace_string();
  v4 = __nwlog_obj();
  v5 = type;
  v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10)
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_client_bottom_teardown";
    v6 = "%{public}s called with null http_client_bottom, no backtrace";
    goto LABEL_37;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    v14 = "nw_protocol_http_client_bottom_teardown";
    v15 = 2082;
    v16 = v9;
    _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v9);
  if (v3)
    goto LABEL_39;
}

void nw_http_client_bottom_destroy(uint64_t a1)
{
  const void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 294) & 4) == 0)
  {
    if (gLogDatapath)
    {
      v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v9 = 136446722;
        v10 = "nw_http_client_bottom_destroy";
        v11 = 2082;
        v12 = a1 + 208;
        v13 = 2080;
        v14 = " ";
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v9, 0x20u);
      }
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 176) + 16))();
  v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    _Block_release(v2);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v3 = *(void **)(a1 + 184);
  if (v3)
  {
    *(_QWORD *)(a1 + 192) = v3;
    operator delete(v3);
  }
  if ((*(_BYTE *)(a1 + 168) & 1) != 0)
  {
    v4 = *(void **)(a1 + 160);
    if (v4)
      os_release(v4);
  }
  *(_QWORD *)(a1 + 160) = 0;
  if ((*(_BYTE *)(a1 + 152) & 1) != 0)
  {
    v5 = *(void **)(a1 + 144);
    if (v5)
      os_release(v5);
  }
  *(_QWORD *)(a1 + 144) = 0;
  if ((*(_BYTE *)(a1 + 128) & 1) != 0)
  {
    v6 = *(void **)(a1 + 120);
    if (v6)
      os_release(v6);
  }
  *(_QWORD *)(a1 + 120) = 0;
  if ((*(_BYTE *)(a1 + 112) & 1) != 0)
  {
    v7 = *(void **)(a1 + 104);
    if (v7)
      os_release(v7);
  }
  free((void *)a1);
}

void ___ZL44nw_protocol_http_client_bottom_get_callbacksv_block_invoke()
{
  qword_1EDCE3B10 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_1EDCE3B18 = nw_protocol_common_get_output_frames;
  qword_1EDCE3B00 = (uint64_t)nw_protocol_common_input_available;
  unk_1EDCE3B08 = nw_protocol_common_output_available;
  qword_1EDCE3B80 = (uint64_t)nw_protocol_common_output_finished;
  unk_1EDCE3B88 = nw_protocol_common_get_output_local_endpoint;
  qword_1EDCE3BC0 = (uint64_t)nw_protocol_common_reset;
  unk_1EDCE3BC8 = nw_protocol_common_input_flush;
  qword_1EDCE3BB8 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_1EDCE3B70 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_1EDCE3B78 = nw_protocol_common_input_finished;
  qword_1EDCE3B90 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_1EDCE3B98 = (uint64_t)nw_protocol_common_waiting_for_output;
  unk_1EDCE3BA0 = nw_protocol_common_copy_info;
  qword_1EDCE3B50 = (uint64_t)nw_protocol_common_register_notification;
  unk_1EDCE3B58 = nw_protocol_common_unregister_notification;
  qword_1EDCE3B60 = (uint64_t)nw_protocol_common_notify;
  unk_1EDCE3B68 = nw_protocol_common_updated_path;
  qword_1EDCE3B20 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_1EDCE3B28 = nw_protocol_common_link_state;
  nw_protocol_http_client_bottom_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_http_client_bottom_add_input_handler;
  *(_QWORD *)algn_1EDCE3AC8 = nw_protocol_http_client_bottom_remove_input_handler;
  qword_1EDCE3B30 = (uint64_t)nw_protocol_http_client_bottom_get_parameters;
  unk_1EDCE3B38 = nw_protocol_common_get_path;
  qword_1EDCE3B40 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_1EDCE3B48 = nw_protocol_http_client_bottom_get_remote_endpoint;
  qword_1EDCE3AD0 = (uint64_t)nw_protocol_http_client_bottom_replace_input_handler;
  unk_1EDCE3AD8 = nw_protocol_http_client_bottom_connect;
  qword_1EDCE3AE0 = (uint64_t)nw_protocol_http_client_bottom_disconnect;
  unk_1EDCE3AE8 = nw_protocol_http_client_bottom_connected;
  qword_1EDCE3AF0 = (uint64_t)nw_protocol_http_client_bottom_disconnected;
  unk_1EDCE3AF8 = nw_protocol_http_client_bottom_error;
}

uint64_t nw_protocol_http_client_bottom_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *handle;
  void *parameters;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  NSObject *v28;
  NSObject *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *backtrace_string;
  _BOOL4 v35;
  const char *v36;
  _BOOL4 v37;
  _BOOL4 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  char v41;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  uint8_t *v49;
  uint8_t v50[33];
  __int128 v51;
  __int128 v52;
  _BYTE v53[23];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)v50 = 136446210;
    *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    v30 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    v41 = 0;
    if (!__nwlog_fault(v30, buf, &v41))
      goto LABEL_103;
    if (buf[0] != 17)
    {
      if (!v41)
      {
        v31 = __nwlog_obj();
        v32 = buf[0];
        if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v50 = 136446210;
          *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
          v33 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_102;
        }
        goto LABEL_103;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      v32 = buf[0];
      v35 = os_log_type_enabled(v31, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)v50 = 136446210;
          *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
          v33 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_102;
        }
        goto LABEL_103;
      }
      if (!v35)
        goto LABEL_87;
      *(_DWORD *)v50 = 136446466;
      *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
      *(_WORD *)&v50[12] = 2082;
      *(_QWORD *)&v50[14] = backtrace_string;
      v36 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_86;
    }
    v31 = __nwlog_obj();
    v32 = buf[0];
    if (!os_log_type_enabled(v31, (os_log_type_t)buf[0]))
      goto LABEL_103;
    *(_DWORD *)v50 = 136446210;
    *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    v33 = "%{public}s called with null protocol";
LABEL_102:
    _os_log_impl(&dword_182FBE000, v31, v32, v33, v50, 0xCu);
    goto LABEL_103;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)v50 = 136446210;
    *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    v30 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    v41 = 0;
    if (!__nwlog_fault(v30, buf, &v41))
      goto LABEL_103;
    if (buf[0] != 17)
    {
      if (!v41)
      {
        v31 = __nwlog_obj();
        v32 = buf[0];
        if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v50 = 136446210;
          *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
          v33 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
          goto LABEL_102;
        }
        goto LABEL_103;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      v32 = buf[0];
      v37 = os_log_type_enabled(v31, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)v50 = 136446210;
          *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
          v33 = "%{public}s called with null http_client_bottom, no backtrace";
          goto LABEL_102;
        }
        goto LABEL_103;
      }
      if (!v37)
        goto LABEL_87;
      *(_DWORD *)v50 = 136446466;
      *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
      *(_WORD *)&v50[12] = 2082;
      *(_QWORD *)&v50[14] = backtrace_string;
      v36 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
      goto LABEL_86;
    }
    v31 = __nwlog_obj();
    v32 = buf[0];
    if (!os_log_type_enabled(v31, (os_log_type_t)buf[0]))
      goto LABEL_103;
    *(_DWORD *)v50 = 136446210;
    *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    v33 = "%{public}s called with null http_client_bottom";
    goto LABEL_102;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)v50 = 136446210;
    *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    v30 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    v41 = 0;
    if (!__nwlog_fault(v30, buf, &v41))
      goto LABEL_103;
    if (buf[0] != 17)
    {
      if (!v41)
      {
        v31 = __nwlog_obj();
        v32 = buf[0];
        if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v50 = 136446210;
          *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
          v33 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_102;
        }
        goto LABEL_103;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      v32 = buf[0];
      v38 = os_log_type_enabled(v31, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)v50 = 136446210;
          *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
          v33 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_102;
        }
        goto LABEL_103;
      }
      if (!v38)
        goto LABEL_87;
      *(_DWORD *)v50 = 136446466;
      *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
      *(_WORD *)&v50[12] = 2082;
      *(_QWORD *)&v50[14] = backtrace_string;
      v36 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_86;
    }
    v31 = __nwlog_obj();
    v32 = buf[0];
    if (!os_log_type_enabled(v31, (os_log_type_t)buf[0]))
      goto LABEL_103;
    *(_DWORD *)v50 = 136446210;
    *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    v33 = "%{public}s called with null input_protocol";
    goto LABEL_102;
  }
  if (handle[17])
    return nw_http_client_bottom_add_to_messaging((uint64_t)a1->handle, (uint64_t)a2);
  parameters = (void *)nw_protocol_get_parameters((uint64_t)a2);
  if (!parameters)
  {
    __nwlog_obj();
    *(_DWORD *)v50 = 136446210;
    *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    v30 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    v41 = 0;
    if (!__nwlog_fault(v30, buf, &v41))
      goto LABEL_103;
    if (buf[0] == 17)
    {
      v31 = __nwlog_obj();
      v32 = buf[0];
      if (!os_log_type_enabled(v31, (os_log_type_t)buf[0]))
        goto LABEL_103;
      *(_DWORD *)v50 = 136446210;
      *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
      v33 = "%{public}s called with null parameters";
      goto LABEL_102;
    }
    if (!v41)
    {
      v31 = __nwlog_obj();
      v32 = buf[0];
      if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v50 = 136446210;
        *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
        v33 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_102;
      }
      goto LABEL_103;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v31 = __nwlog_obj();
    v32 = buf[0];
    v39 = os_log_type_enabled(v31, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)v50 = 136446210;
        *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
        v33 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_102;
      }
      goto LABEL_103;
    }
    if (!v39)
      goto LABEL_87;
    *(_DWORD *)v50 = 136446466;
    *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    *(_WORD *)&v50[12] = 2082;
    *(_QWORD *)&v50[14] = backtrace_string;
    v36 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
LABEL_86:
    _os_log_impl(&dword_182FBE000, v31, v32, v36, v50, 0x16u);
    goto LABEL_87;
  }
  v7 = nw_parameters_copy_protocol_options_legacy(parameters, a1);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)v50 = 136446210;
    *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    v30 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    v41 = 0;
    if (!__nwlog_fault(v30, buf, &v41))
      goto LABEL_103;
    if (buf[0] == 17)
    {
      v31 = __nwlog_obj();
      v32 = buf[0];
      if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v50 = 136446210;
        *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
        v33 = "%{public}s called with null options";
        goto LABEL_102;
      }
LABEL_103:
      if (v30)
        free(v30);
      return 0;
    }
    if (!v41)
    {
      v31 = __nwlog_obj();
      v32 = buf[0];
      if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v50 = 136446210;
        *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
        v33 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_102;
      }
      goto LABEL_103;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v31 = __nwlog_obj();
    v32 = buf[0];
    v40 = os_log_type_enabled(v31, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)v50 = 136446210;
        *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
        v33 = "%{public}s called with null options, no backtrace";
        goto LABEL_102;
      }
      goto LABEL_103;
    }
    if (v40)
    {
      *(_DWORD *)v50 = 136446466;
      *(_QWORD *)&v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
      *(_WORD *)&v50[12] = 2082;
      *(_QWORD *)&v50[14] = backtrace_string;
      v36 = "%{public}s called with null options, dumping backtrace:%{public}s";
      goto LABEL_86;
    }
LABEL_87:
    free(backtrace_string);
    goto LABEL_103;
  }
  memset(v53, 0, 19);
  v52 = 0u;
  v51 = 0u;
  v8 = v7;
  v9 = v8;
  v10 = 0;
  memset(v50, 0, sizeof(v50));
  while (1)
  {
    v11 = v8[v10 + 48];
    v50[v10] = v11;
    if (!v11)
      break;
    if (++v10 == 83)
    {
      v53[18] = 0;
      break;
    }
  }

  if (handle[6])
  {
    v13 = (char *)handle[24];
    v12 = handle[25];
    if ((unint64_t)v13 >= v12)
    {
      v17 = (char *)handle[23];
      v18 = (v13 - v17) >> 4;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60)
        abort();
      v20 = v12 - (_QWORD)v17;
      if (v20 >> 3 > v19)
        v19 = v20 >> 3;
      v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0;
      v22 = 0xFFFFFFFFFFFFFFFLL;
      if (!v21)
        v22 = v19;
      if (v22 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v23 = 16 * v22;
      v24 = (char *)operator new(16 * v22);
      v25 = &v24[16 * v18];
      v26 = &v24[v23];
      *(_QWORD *)v25 = a2;
      *((_DWORD *)v25 + 2) = 0;
      v14 = v25 + 16;
      if (v13 == v17)
      {
        v27 = &v24[16 * v18];
      }
      else
      {
        do
        {
          v27 = v25 - 16;
          *((_OWORD *)v25 - 1) = *((_OWORD *)v13 - 1);
          v13 -= 16;
          v25 -= 16;
        }
        while (v13 != v17);
      }
      handle[23] = v27;
      handle[24] = v14;
      handle[25] = v26;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v13 = a2;
      *((_DWORD *)v13 + 2) = 0;
      v14 = v13 + 16;
    }
    handle[24] = v14;
    if ((*((_BYTE *)handle + 294) & 4) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v28 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446978;
        v43 = "nw_protocol_http_client_bottom_add_input_handler";
        v44 = 2082;
        v45 = (char *)(handle + 26);
        v46 = 2080;
        v47 = " ";
        v48 = 2082;
        v49 = v50;
        _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sjoined by %{public}s", buf, 0x2Au);
      }
    }
  }
  else
  {
    nw_protocol_set_input_handler((uint64_t)handle, (uint64_t)a2);
    v15 = 0;
    *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
    while (1)
    {
      v16 = v50[v15];
      *((_BYTE *)handle + v15 + 208) = v16;
      if (!v16)
        break;
      if (++v15 == 83)
      {
        *((_BYTE *)handle + 291) = 0;
        break;
      }
    }
  }
  if (a2->output_handler)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v29 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "nw_protocol_http_client_bottom_add_input_handler";
      _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_ERROR, "%{public}s Output handler already exists for protocol being added as input handler", buf, 0xCu);
    }
  }
  else
  {
    nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
  }
  os_release(v9);
  return 1;
}

uint64_t nw_protocol_http_client_bottom_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  void *handle;
  nw_protocol **v6;
  nw_protocol **v7;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *v13;
  _BOOL4 v14;
  char *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  nw_protocol *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    v16 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26))
      goto LABEL_84;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_protocol_http_client_bottom_replace_input_handler";
          v19 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_protocol_http_client_bottom_replace_input_handler";
          v19 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      if (!v21)
        goto LABEL_66;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      v30 = 2082;
      v31 = (nw_protocol *)backtrace_string;
      v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_65;
    }
    v17 = __nwlog_obj();
    v18 = type;
    if (!os_log_type_enabled(v17, type))
      goto LABEL_84;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    v19 = "%{public}s called with null protocol";
LABEL_83:
    _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
    goto LABEL_84;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    v16 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26))
      goto LABEL_84;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_protocol_http_client_bottom_replace_input_handler";
          v19 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v23 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_protocol_http_client_bottom_replace_input_handler";
          v19 = "%{public}s called with null http_client_bottom, no backtrace";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      if (!v23)
        goto LABEL_66;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      v30 = 2082;
      v31 = (nw_protocol *)backtrace_string;
      v22 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
      goto LABEL_65;
    }
    v17 = __nwlog_obj();
    v18 = type;
    if (!os_log_type_enabled(v17, type))
      goto LABEL_84;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    v19 = "%{public}s called with null http_client_bottom";
    goto LABEL_83;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    v16 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26))
      goto LABEL_84;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_84;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      v19 = "%{public}s called with null old_input_protocol";
      goto LABEL_83;
    }
    if (!v26)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_http_client_bottom_replace_input_handler";
        v19 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v24 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_http_client_bottom_replace_input_handler";
        v19 = "%{public}s called with null old_input_protocol, no backtrace";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    if (!v24)
      goto LABEL_66;
    *(_DWORD *)buf = 136446466;
    v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    v30 = 2082;
    v31 = (nw_protocol *)backtrace_string;
    v22 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
LABEL_65:
    _os_log_impl(&dword_182FBE000, v17, v18, v22, buf, 0x16u);
    goto LABEL_66;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    v16 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26))
      goto LABEL_84;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_http_client_bottom_replace_input_handler";
        v19 = "%{public}s called with null new_input_protocol";
        goto LABEL_83;
      }
LABEL_84:
      if (!v16)
        return 0;
      v15 = (char *)v16;
      goto LABEL_30;
    }
    if (!v26)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_http_client_bottom_replace_input_handler";
        v19 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v25 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_http_client_bottom_replace_input_handler";
        v19 = "%{public}s called with null new_input_protocol, no backtrace";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      v30 = 2082;
      v31 = (nw_protocol *)backtrace_string;
      v22 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
      goto LABEL_65;
    }
LABEL_66:
    free(backtrace_string);
    goto LABEL_84;
  }
  if (*((nw_protocol **)handle + 6) == a2)
  {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
    nw_protocol_set_input_handler((uint64_t)handle, (uint64_t)a3);
    return 1;
  }
  v7 = (nw_protocol **)*((_QWORD *)handle + 23);
  v6 = (nw_protocol **)*((_QWORD *)handle + 24);
  if (v7 != v6)
  {
    while (*v7 != a2)
    {
      v7 += 2;
      if (v7 == v6)
        goto LABEL_14;
    }
  }
  if (v7 != v6)
  {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
    *v7 = a3;
    return 1;
  }
LABEL_14:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  v29 = "nw_protocol_http_client_bottom_replace_input_handler";
  v30 = 2048;
  v31 = a2;
  v9 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v9, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_28;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v12 = "%{public}s Protocol %p isn't an input handler of http client bottom";
LABEL_27:
      _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0x16u);
      goto LABEL_28;
    }
    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_28;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v12 = "%{public}s Protocol %p isn't an input handler of http client bottom, backtrace limit exceeded";
      goto LABEL_27;
    }
    v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = gLogObj;
    v11 = type;
    v14 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v13)
    {
      if (!v14)
        goto LABEL_28;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v12 = "%{public}s Protocol %p isn't an input handler of http client bottom, no backtrace";
      goto LABEL_27;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446722;
      v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = v13;
      _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s Protocol %p isn't an input handler of http client bottom, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v13);
  }
LABEL_28:
  if (v9)
  {
    v15 = (char *)v9;
LABEL_30:
    free(v15);
  }
  return 0;
}

uint64_t nw_protocol_http_client_bottom_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  nw_protocol *handle;
  char *v6;
  char *output_handler_context;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  NSObject *v25;
  _DWORD *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  _BOOL4 v32;
  char v33;
  uint64_t output_handler;
  uint64_t v35;
  char *v36;
  const char *v38;
  NSObject *v39;
  os_log_type_t v40;
  const char *v41;
  char *backtrace_string;
  _BOOL4 v43;
  const char *v44;
  _BOOL4 v45;
  _BOOL4 v46;
  NSObject *v47;
  unint64_t v48;
  char v49;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  nw_protocol *v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  unint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    v38 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v38, &type, &v49))
      goto LABEL_111;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (!os_log_type_enabled(v39, type))
        goto LABEL_111;
      *(_DWORD *)buf = 136446210;
      v52 = "nw_protocol_http_client_bottom_remove_input_handler";
      v41 = "%{public}s called with null protocol";
LABEL_110:
      _os_log_impl(&dword_182FBE000, v39, v40, v41, buf, 0xCu);
      goto LABEL_111;
    }
    if (!v49)
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        v41 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v39 = __nwlog_obj();
    v40 = type;
    v43 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        v41 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    if (!v43)
      goto LABEL_95;
    *(_DWORD *)buf = 136446466;
    v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    v53 = 2082;
    v54 = (nw_protocol *)backtrace_string;
    v44 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_94:
    _os_log_impl(&dword_182FBE000, v39, v40, v44, buf, 0x16u);
    goto LABEL_95;
  }
  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    v38 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v38, &type, &v49))
      goto LABEL_111;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (!os_log_type_enabled(v39, type))
        goto LABEL_111;
      *(_DWORD *)buf = 136446210;
      v52 = "nw_protocol_http_client_bottom_remove_input_handler";
      v41 = "%{public}s called with null http_client_bottom";
      goto LABEL_110;
    }
    if (!v49)
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        v41 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v39 = __nwlog_obj();
    v40 = type;
    v45 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        v41 = "%{public}s called with null http_client_bottom, no backtrace";
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    if (!v45)
      goto LABEL_95;
    *(_DWORD *)buf = 136446466;
    v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    v53 = 2082;
    v54 = (nw_protocol *)backtrace_string;
    v44 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
    goto LABEL_94;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    v38 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v38, &type, &v49))
      goto LABEL_111;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        v41 = "%{public}s called with null other_protocol";
        goto LABEL_110;
      }
LABEL_111:
      if (!v38)
        return 0;
      v36 = (char *)v38;
      goto LABEL_64;
    }
    if (!v49)
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        v41 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v39 = __nwlog_obj();
    v40 = type;
    v46 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        v41 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      v52 = "nw_protocol_http_client_bottom_remove_input_handler";
      v53 = 2082;
      v54 = (nw_protocol *)backtrace_string;
      v44 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_94;
    }
LABEL_95:
    free(backtrace_string);
    goto LABEL_111;
  }
  if (handle->default_input_handler != a2)
  {
    output_handler_context = (char *)handle[2].output_handler_context;
    v6 = *(char **)handle[3].flow_id;
    v8 = output_handler_context;
    if (output_handler_context != v6)
    {
      while (*(nw_protocol **)v8 != a2)
      {
        v8 += 16;
        if (v8 == v6)
          goto LABEL_33;
      }
    }
    if (v8 != v6)
    {
      v9 = v8 + 16;
      if (v8 + 16 != v6)
      {
        v10 = v6 - v8 - 32;
        if (v10 >= 0x10)
        {
          v11 = (v8 - output_handler_context) >> 4;
          v12 = (v10 >> 4) + 1;
          v13 = 16 * (v12 & 0x1FFFFFFFFFFFFFFELL);
          v8 += v13;
          v14 = (uint64_t)&output_handler_context[16 * v11 + 24];
          v15 = v12 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v16 = *(_QWORD *)(v14 + 8);
            *(_QWORD *)(v14 - 24) = *(_QWORD *)(v14 - 8);
            *(_QWORD *)(v14 - 8) = v16;
            LODWORD(v16) = *(_DWORD *)(v14 + 16);
            *(_DWORD *)(v14 - 16) = *(_DWORD *)v14;
            *(_DWORD *)v14 = v16;
            v14 += 32;
            v15 -= 2;
          }
          while (v15);
          if (v12 == (v12 & 0x1FFFFFFFFFFFFFFELL))
            goto LABEL_17;
          v9 += v13;
        }
        do
        {
          *(_QWORD *)v8 = *(_QWORD *)v9;
          *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
          v8 += 16;
          v9 += 16;
        }
        while (v9 != v6);
      }
LABEL_17:
      *(_QWORD *)handle[3].flow_id = v8;
      v17 = (unsigned __int16)WORD2(handle[4].output_handler)++ + 1;
      if ((v17 & 0x10000) != 0)
      {
        if (gLogDatapath)
        {
          v47 = __nwlog_obj();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            v48 = WORD2(handle[4].output_handler);
            *(_DWORD *)buf = 136446978;
            v52 = "nw_protocol_http_client_bottom_remove_input_handler";
            v53 = 2082;
            v54 = (nw_protocol *)"http_client_bottom->stream_stall_count";
            v55 = 2048;
            v56 = 1;
            v57 = 2048;
            v58 = v48;
            _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
          }
        }
        WORD2(handle[4].output_handler) = -1;
      }
      if ((BYTE6(handle[4].output_handler) & 4) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          v19 = WORD2(handle[4].output_handler);
          *(_DWORD *)buf = 136446978;
          v52 = "nw_protocol_http_client_bottom_remove_input_handler";
          v53 = 2082;
          v54 = (nw_protocol *)((char *)handle + 208);
          v55 = 2080;
          v56 = (uint64_t)" ";
          v57 = 1024;
          LODWORD(v58) = v19;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sstream setup stalls incremented to %u", buf, 0x26u);
        }
      }
      goto LABEL_44;
    }
LABEL_33:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    v53 = 2048;
    v54 = a2;
    v27 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v27, &type, &v49))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v28 = gLogObj;
      v29 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        v53 = 2048;
        v54 = a2;
        v30 = "%{public}s Protocol %p isn't an input handler of http client bottom";
LABEL_61:
        _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0x16u);
      }
    }
    else if (v49)
    {
      v31 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v28 = gLogObj;
      v29 = type;
      v32 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v31)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446722;
          v52 = "nw_protocol_http_client_bottom_remove_input_handler";
          v53 = 2048;
          v54 = a2;
          v55 = 2082;
          v56 = (uint64_t)v31;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s Protocol %p isn't an input handler of http client bottom, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v31);
        goto LABEL_62;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        v53 = 2048;
        v54 = a2;
        v30 = "%{public}s Protocol %p isn't an input handler of http client bottom, no backtrace";
        goto LABEL_61;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v28 = gLogObj;
      v29 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        v53 = 2048;
        v54 = a2;
        v30 = "%{public}s Protocol %p isn't an input handler of http client bottom, backtrace limit exceeded";
        goto LABEL_61;
      }
    }
LABEL_62:
    if (!v27)
      return 0;
    v36 = (char *)v27;
LABEL_64:
    free(v36);
    return 0;
  }
  nw_protocol_http_client_bottom_teardown((uint64_t)a1->handle);
  v21 = handle[2].output_handler_context;
  v20 = *(_BYTE **)handle[3].flow_id;
  v22 = v20 - v21;
  if (v20 == v21)
  {
    nw_protocol_set_input_handler((uint64_t)handle, 0);
  }
  else
  {
    if ((v22 & 0x8000000000000000) != 0)
      abort();
    v23 = operator new(v20 - v21);
    v24 = v22 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v23, v21, v22 & 0xFFFFFFFFFFFFFFF0);
    if ((v22 & 0xFFFFFFFFFFFFFFF0) != 0)
    {
      if ((BYTE6(handle[4].output_handler) & 4) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          v52 = "nw_protocol_http_client_bottom_remove_input_handler";
          v53 = 2082;
          v54 = (nw_protocol *)((char *)handle + 208);
          v55 = 2080;
          v56 = (uint64_t)" ";
          v57 = 2048;
          v58 = v22 >> 4;
          _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sfirst input handler bailed, restarting %zu input protocols", buf, 0x2Au);
        }
      }
      v26 = v23 + 2;
      do
      {
        if (*v26 != 2)
          nw_protocol_notify(*((_QWORD **)v26 - 1), (uint64_t)handle, 22);
        v26 += 4;
        v24 -= 16;
      }
      while (v24);
    }
    nw_protocol_set_input_handler((uint64_t)handle, 0);
    operator delete(v23);
  }
LABEL_44:
  if (a2->output_handler != handle)
  {
    if (!*(_QWORD *)&handle[2].flow_id[8])
      goto LABEL_48;
    return 1;
  }
  nw_protocol_set_output_handler((uint64_t)a2, 0);
  if (*(_QWORD *)&handle[2].flow_id[8])
    return 1;
LABEL_48:
  if (handle->default_input_handler
    || handle[2].output_handler_context != *(void **)handle[3].flow_id
    || (BYTE6(handle[4].output_handler) & 8) != 0)
  {
    return 1;
  }
  if (a3)
    v33 = 8;
  else
    v33 = 0;
  BYTE6(handle[4].output_handler) = BYTE6(handle[4].output_handler) & 0xF7 | v33;
  output_handler = (uint64_t)handle->output_handler;
  if (output_handler)
    v35 = nw_protocol_remove_input_handler(output_handler, (uint64_t)handle);
  else
    v35 = 1;
  if (a3)
  {
    nw_protocol_remove_instance((uint64_t)handle);
    handle->handle = 0;
    nw_http_client_bottom_destroy((uint64_t)handle);
  }
  return v35;
}

uint64_t nw_protocol_http_client_bottom_get_parameters(nw_protocol *a1)
{
  _QWORD *handle;
  uint64_t result;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_client_bottom_get_parameters";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_client_bottom_get_parameters";
      v6 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v11)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http_client_bottom_get_parameters";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_http_client_bottom_get_parameters";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v3)
          return 0;
        goto LABEL_34;
      }
      if (!v8)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_client_bottom_get_parameters";
      v6 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_32:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_33;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_client_bottom_get_parameters";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_client_bottom_get_parameters";
      v6 = "%{public}s called with null http_client_bottom";
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_client_bottom_get_parameters";
      v6 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
      goto LABEL_32;
    }
    v9 = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!v9)
    {
      if (!v10)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_client_bottom_get_parameters";
      v6 = "%{public}s called with null http_client_bottom, no backtrace";
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http_client_bottom_get_parameters";
      v15 = 2082;
      v16 = v9;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v9);
LABEL_33:
    if (!v3)
      return 0;
LABEL_34:
    free(v3);
    return 0;
  }
  result = handle[13];
  if (!result)
    return nw_protocol_get_parameters(handle[6]);
  return result;
}

uint64_t nw_protocol_http_client_bottom_get_remote_endpoint(nw_protocol *a1)
{
  _QWORD *handle;
  uint64_t result;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      v6 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v11)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v3)
          return 0;
        goto LABEL_34;
      }
      if (!v8)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      v6 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_32:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_33;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      v6 = "%{public}s called with null http_client_bottom";
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      v6 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
      goto LABEL_32;
    }
    v9 = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!v9)
    {
      if (!v10)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      v6 = "%{public}s called with null http_client_bottom, no backtrace";
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      v15 = 2082;
      v16 = v9;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v9);
LABEL_33:
    if (!v3)
      return 0;
LABEL_34:
    free(v3);
    return 0;
  }
  result = handle[15];
  if (!result)
    return nw_protocol_get_remote_endpoint(handle[6]);
  return result;
}

uint64_t nw_protocol_http_client_bottom_connect(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *parameters;
  void *v10;
  char v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *v16;
  _BOOL4 v17;
  void *v18;
  void *remote_endpoint;
  void *v20;
  char v21;
  void *v22;
  id http_messaging_options;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  _QWORD *v28;
  id *v29;
  id v30;
  _BOOL4 is_equal_unsafe;
  id *v32;
  _QWORD *v33;
  id *v34;
  id v35;
  _BOOL4 v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint32_t v41;
  NSObject *v43;
  os_log_type_t v44;
  char *backtrace_string;
  _BOOL4 v46;
  const char *v47;
  _BOOL4 v48;
  _BOOL4 v49;
  _QWORD v50[6];
  _QWORD v51[5];
  char v52;
  os_log_type_t type;
  _BYTE buf[24];
  const char *v55;
  _QWORD *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (!__nwlog_fault(v12, &type, &v52))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v43 = __nwlog_obj();
      v44 = type;
      if (!os_log_type_enabled(v43, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
      v15 = "%{public}s called with null protocol";
      goto LABEL_103;
    }
    if (!v52)
    {
      v43 = __nwlog_obj();
      v44 = type;
      if (!os_log_type_enabled(v43, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
      v15 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_103;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v43 = __nwlog_obj();
    v44 = type;
    v46 = os_log_type_enabled(v43, type);
    if (!backtrace_string)
    {
      if (!v46)
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
      v15 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_103;
    }
    if (!v46)
      goto LABEL_90;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v47 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_89;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (!__nwlog_fault(v12, &type, &v52))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v43 = __nwlog_obj();
      v44 = type;
      if (!os_log_type_enabled(v43, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
      v15 = "%{public}s called with null http_client_bottom";
      goto LABEL_103;
    }
    if (!v52)
    {
      v43 = __nwlog_obj();
      v44 = type;
      if (!os_log_type_enabled(v43, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
      v15 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
      goto LABEL_103;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v43 = __nwlog_obj();
    v44 = type;
    v48 = os_log_type_enabled(v43, type);
    if (!backtrace_string)
    {
      if (!v48)
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
      v15 = "%{public}s called with null http_client_bottom, no backtrace";
      goto LABEL_103;
    }
    if (!v48)
      goto LABEL_90;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v47 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
LABEL_89:
    _os_log_impl(&dword_182FBE000, v43, v44, v47, buf, 0x16u);
    goto LABEL_90;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (!__nwlog_fault(v12, &type, &v52))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v43 = __nwlog_obj();
      v44 = type;
      if (!os_log_type_enabled(v43, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
      v15 = "%{public}s called with null other_protocol";
      goto LABEL_103;
    }
    if (v52)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v43 = __nwlog_obj();
      v44 = type;
      v49 = os_log_type_enabled(v43, type);
      if (backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          v47 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
          goto LABEL_89;
        }
LABEL_90:
        free(backtrace_string);
        goto LABEL_61;
      }
      if (!v49)
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
      v15 = "%{public}s called with null other_protocol, no backtrace";
    }
    else
    {
      v43 = __nwlog_obj();
      v44 = type;
      if (!os_log_type_enabled(v43, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
      v15 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }
LABEL_103:
    v39 = v43;
    v40 = v44;
    v41 = 12;
    goto LABEL_60;
  }
  if (!*((_QWORD *)handle + 12))
  {
    v4 = mach_continuous_approximate_time();
    if (v4 <= 1)
      v5 = 1;
    else
      v5 = v4;
    *((_QWORD *)handle + 12) = v5;
  }
  if (*((nw_protocol **)handle + 6) != a2)
  {
    v6 = *((_QWORD *)handle + 23);
    v7 = *((_QWORD *)handle + 24);
    if (v6 != v7)
    {
      while (*(nw_protocol **)v6 != a2)
      {
        v6 += 16;
        if (v6 == v7)
          goto LABEL_19;
      }
    }
    if (v6 != v7)
    {
      v8 = 1;
      *(_DWORD *)(v6 + 8) = 1;
      return v8;
    }
LABEL_19:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a2;
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (!__nwlog_fault(v12, &type, &v52))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = gLogObj;
      v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a2;
        v15 = "%{public}s Protocol %p isn't an input handler of http client bottom";
LABEL_59:
        v39 = v13;
        v40 = v14;
        v41 = 22;
LABEL_60:
        _os_log_impl(&dword_182FBE000, v39, v40, v15, buf, v41);
      }
    }
    else if (v52)
    {
      v16 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = gLogObj;
      v14 = type;
      v17 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v16)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = a2;
          *(_WORD *)&buf[22] = 2082;
          v55 = v16;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s Protocol %p isn't an input handler of http client bottom, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v16);
        goto LABEL_61;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a2;
        v15 = "%{public}s Protocol %p isn't an input handler of http client bottom, no backtrace";
        goto LABEL_59;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = gLogObj;
      v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a2;
        v15 = "%{public}s Protocol %p isn't an input handler of http client bottom, backtrace limit exceeded";
        goto LABEL_59;
      }
    }
LABEL_61:
    if (v12)
      free(v12);
    return 0;
  }
  parameters = (void *)nw_protocol_get_parameters((uint64_t)a2);
  if (parameters)
  {
    v10 = os_retain(parameters);
    v11 = handle[112];
    if ((v11 & 1) == 0)
      goto LABEL_31;
  }
  else
  {
    v10 = 0;
    v11 = handle[112];
    if ((v11 & 1) == 0)
      goto LABEL_31;
  }
  v18 = (void *)*((_QWORD *)handle + 13);
  if (v18)
  {
    os_release(v18);
    v11 = handle[112];
  }
LABEL_31:
  *((_QWORD *)handle + 13) = v10;
  handle[112] = v11 | 1;
  remote_endpoint = (void *)nw_protocol_get_remote_endpoint(*((_QWORD *)handle + 6));
  if (remote_endpoint)
  {
    v20 = os_retain(remote_endpoint);
    v21 = handle[128];
    if ((v21 & 1) == 0)
      goto LABEL_37;
  }
  else
  {
    v20 = 0;
    v21 = handle[128];
    if ((v21 & 1) == 0)
      goto LABEL_37;
  }
  v22 = (void *)*((_QWORD *)handle + 15);
  if (v22)
  {
    os_release(v22);
    v21 = handle[128];
  }
LABEL_37:
  *((_QWORD *)handle + 15) = v20;
  handle[128] = v21 | 1;
  http_messaging_options = nw_parameters_find_http_messaging_options(*((void **)handle + 13), (uint64_t)handle);
  v24 = http_messaging_options;
  if (http_messaging_options)
  {
    v25 = MEMORY[0x1E0C809B0];
    v26 = *((_QWORD *)handle + 22);
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 0x40000000;
    v51[2] = ___ZL38nw_protocol_http_client_bottom_connectP11nw_protocolS0__block_invoke;
    v51[3] = &unk_1E149D398;
    v51[4] = v26;
    v27 = http_messaging_options;
    v28 = v51;
    v29 = (id *)v27;
    v30 = v29[1];

    if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v30, nw_protocol_copy_http_messaging_definition_definition);

    if (is_equal_unsafe)
    {
      *(_QWORD *)buf = v25;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nw_http_messaging_options_set_override_protocol_handler_block_invoke;
      v55 = (const char *)&unk_1E14A9DD0;
      v56 = v28;
      nw_protocol_options_access_handle(v29, buf);

    }
    v50[0] = v25;
    v50[1] = 0x40000000;
    v50[2] = ___ZL38nw_protocol_http_client_bottom_connectP11nw_protocolS0__block_invoke_2;
    v50[3] = &unk_1E149D3C0;
    v50[4] = v26;
    v50[5] = handle;
    v32 = v29;
    v33 = v50;
    v34 = v32;
    v35 = v29[1];

    if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
    v36 = nw_protocol_definition_is_equal_unsafe((uint64_t)v35, nw_protocol_copy_http_messaging_definition_definition);

    if (v36)
    {
      *(_QWORD *)buf = v25;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nw_http_messaging_options_set_can_accept_handler_block_invoke;
      v55 = (const char *)&unk_1E14A9DD0;
      v56 = v33;
      nw_protocol_options_access_handle(v34, buf);

    }
  }
  v37 = *((_QWORD *)handle + 4);
  if (v37)
  {
    v8 = nw_protocol_connect(v37, (uint64_t)handle);
    if (!v24)
      return v8;
    goto LABEL_54;
  }
  if ((handle[294] & 4) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v38 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_connect";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = handle + 208;
      *(_WORD *)&buf[22] = 2080;
      v55 = " ";
      _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sconnect bottom protocol, resuming child handler", buf, 0x20u);
    }
  }
  buf[0] = 0;
  v8 = 1;
  nw_protocol_notify(*((_QWORD **)handle + 6), (uint64_t)handle, 23);
  if (v24)
LABEL_54:
    os_release(v24);
  return v8;
}

void nw_protocol_http_client_bottom_connected(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  _QWORD *v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  nw_protocol *v9;
  nw_protocol_identifier *identifier;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  nw_protocol_identifier *v13;
  nw_protocol_identifier *v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *parameters;
  id v24;
  _DWORD *v25;
  void *v26;
  int v27;
  char v28;
  void *v29;
  char *v30;
  _BOOL4 v31;
  const char *v32;
  _BOOL4 v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  NSObject *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  const char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  _BYTE *v65;
  _BYTE *v66;
  int64_t v67;
  _DWORD *v68;
  size_t v69;
  _DWORD *v70;
  char *backtrace_string;
  _BOOL4 v72;
  _BOOL4 v73;
  char v74;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v77;
  __int16 v78;
  char *v79;
  __int16 v80;
  const char *v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v77 = "nw_protocol_http_client_bottom_connected";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (__nwlog_fault(v17, &type, &v74))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_protocol_http_client_bottom_connected";
          v20 = "%{public}s called with null protocol";
LABEL_131:
          _os_log_impl(&dword_182FBE000, v18, v19, v20, buf, 0xCu);
        }
      }
      else if (v74)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v18 = __nwlog_obj();
        v19 = type;
        v72 = os_log_type_enabled(v18, type);
        if (backtrace_string)
        {
          if (v72)
          {
            *(_DWORD *)buf = 136446466;
            v77 = "nw_protocol_http_client_bottom_connected";
            v78 = 2082;
            v79 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
        }
        else if (v72)
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_protocol_http_client_bottom_connected";
          v20 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_131;
        }
      }
      else
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_protocol_http_client_bottom_connected";
          v20 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_131;
        }
      }
    }
LABEL_132:
    if (!v17)
      return;
    goto LABEL_133;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v77 = "nw_protocol_http_client_bottom_connected";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (__nwlog_fault(v17, &type, &v74))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_protocol_http_client_bottom_connected";
          v20 = "%{public}s called with null http_client_bottom";
          goto LABEL_131;
        }
      }
      else if (v74)
      {
        v30 = (char *)__nw_create_backtrace_string();
        v18 = __nwlog_obj();
        v19 = type;
        v73 = os_log_type_enabled(v18, type);
        if (v30)
        {
          if (v73)
          {
            *(_DWORD *)buf = 136446466;
            v77 = "nw_protocol_http_client_bottom_connected";
            v78 = 2082;
            v79 = v30;
            v32 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
            goto LABEL_70;
          }
          goto LABEL_71;
        }
        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_protocol_http_client_bottom_connected";
          v20 = "%{public}s called with null http_client_bottom, no backtrace";
          goto LABEL_131;
        }
      }
      else
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_protocol_http_client_bottom_connected";
          v20 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
          goto LABEL_131;
        }
      }
    }
    goto LABEL_132;
  }
  if ((handle[294] & 0x10) != 0)
  {
    if ((handle[294] & 4) != 0)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      return;
    *(_DWORD *)buf = 136446722;
    v77 = "nw_protocol_http_client_bottom_connected";
    v78 = 2082;
    v79 = handle + 208;
    v80 = 2080;
    v81 = " ";
    v5 = "%{public}s %{public}s%signoring connected";
    v6 = v4;
    v7 = OS_LOG_TYPE_INFO;
LABEL_15:
    _os_log_impl(&dword_182FBE000, v6, v7, v5, buf, 0x20u);
    return;
  }
  v3 = (_QWORD *)*((_QWORD *)handle + 6);
  if (!v3)
  {
    if ((handle[294] & 4) != 0)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136446722;
    v77 = "nw_protocol_http_client_bottom_connected";
    v78 = 2082;
    v79 = handle + 208;
    v80 = 2080;
    v81 = " ";
    v5 = "%{public}s %{public}s%sno default input handler, ignoring connected";
    v6 = v8;
    v7 = OS_LOG_TYPE_ERROR;
    goto LABEL_15;
  }
  if (*((nw_protocol **)handle + 4) != a2)
  {
    if ((handle[294] & 1) == 0 && !*((_QWORD *)handle + 17))
      nw_protocol_connected(v3, (uint64_t)a2);
    return;
  }
  handle[294] |= 1u;
  v9 = (nw_protocol *)*((_QWORD *)handle + 17);
  if (!v9)
  {
    v9 = a2;
    if (!a2)
    {
LABEL_58:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v77 = "nw_http_client_bottom_get_out_of_the_way";
      v17 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v74 = 0;
      if (!__nwlog_fault(v17, &type, &v74))
        goto LABEL_132;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (!os_log_type_enabled(v18, type))
          goto LABEL_132;
        *(_DWORD *)buf = 136446210;
        v77 = "nw_http_client_bottom_get_out_of_the_way";
        v20 = "%{public}s http_messaging not found below http_client_bottom";
        goto LABEL_131;
      }
      if (!v74)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (!os_log_type_enabled(v18, type))
          goto LABEL_132;
        *(_DWORD *)buf = 136446210;
        v77 = "nw_http_client_bottom_get_out_of_the_way";
        v20 = "%{public}s http_messaging not found below http_client_bottom, backtrace limit exceeded";
        goto LABEL_131;
      }
      v30 = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v33 = os_log_type_enabled(v18, type);
      if (!v30)
      {
        if (!v33)
          goto LABEL_132;
        *(_DWORD *)buf = 136446210;
        v77 = "nw_http_client_bottom_get_out_of_the_way";
        v20 = "%{public}s http_messaging not found below http_client_bottom, no backtrace";
        goto LABEL_131;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        v77 = "nw_http_client_bottom_get_out_of_the_way";
        v78 = 2082;
        v79 = v30;
        v32 = "%{public}s http_messaging not found below http_client_bottom, dumping backtrace:%{public}s";
        goto LABEL_70;
      }
LABEL_71:
      free(v30);
      if (!v17)
        return;
LABEL_133:
      free(v17);
      return;
    }
  }
  while (1)
  {
    identifier = v9->identifier;
    if (nw_protocol_http_messaging_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_75867);
    if (nw_protocols_are_equal(identifier, nw_protocol_http_messaging_identifier::protocol_identifier))
      break;
    v11 = v9->identifier;
    if (nw_protocol_http1_identifier::onceToken != -1)
      dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
    if (nw_protocols_are_equal(v11, &nw_protocol_http1_identifier::http1_protocol_identifier))
      break;
    v12 = v9->identifier;
    if (nw_protocol_http2_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_83230);
    if (nw_protocols_are_equal(v12, &nw_protocol_http2_identifier::http2_protocol_identifier))
      break;
    v13 = v9->identifier;
    if (nw_protocol_http3_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_10);
    if (nw_protocols_are_equal(v13, &nw_protocol_http3_identifier::http3_protocol_identifier))
      break;
    v14 = v9->identifier;
    if (nw_protocol_oblivious_http_identifier::onceToken != -1)
      dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28508);
    if (nw_protocols_are_equal(v14, &nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier))
      break;
    v15 = v9->identifier;
    if (nw_protocol_oblivious_http_contexts_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_3_28514);
    if (nw_protocols_are_equal(v15, nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier))
      break;
    v9 = v9->output_handler;
    if (!v9)
      goto LABEL_58;
  }
  v16 = v9->identifier;
  if (nw_protocol_oblivious_http_contexts_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_3_28514);
  if (nw_protocols_are_equal(v16, nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v77 = "nw_http_client_bottom_get_out_of_the_way";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (!__nwlog_fault(v17, &type, &v74))
      goto LABEL_132;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      v19 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_132;
      *(_DWORD *)buf = 136446210;
      v77 = "nw_http_client_bottom_get_out_of_the_way";
      v20 = "%{public}s http_oblivious_http_contexts not supported below http_client_bottom";
      goto LABEL_131;
    }
    if (!v74)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_132;
      *(_DWORD *)buf = 136446210;
      v77 = "nw_http_client_bottom_get_out_of_the_way";
      v20 = "%{public}s http_oblivious_http_contexts not supported below http_client_bottom, backtrace limit exceeded";
      goto LABEL_131;
    }
    v30 = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v31 = os_log_type_enabled(v18, type);
    if (!v30)
    {
      if (!v31)
        goto LABEL_132;
      *(_DWORD *)buf = 136446210;
      v77 = "nw_http_client_bottom_get_out_of_the_way";
      v20 = "%{public}s http_oblivious_http_contexts not supported below http_client_bottom, no backtrace";
      goto LABEL_131;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v77 = "nw_http_client_bottom_get_out_of_the_way";
      v78 = 2082;
      v79 = v30;
      v32 = "%{public}s http_oblivious_http_contexts not supported below http_client_bottom, dumping backtrace:%{public}s";
LABEL_70:
      _os_log_impl(&dword_182FBE000, v18, v19, v32, buf, 0x16u);
      goto LABEL_71;
    }
    goto LABEL_71;
  }
  v21 = nw_protocol_copy_info((uint64_t)v9, 253);
  if (v21)
    v9 = *(nw_protocol **)(v21 + 24);
  v22 = *((_QWORD *)handle + 6);
  nw_protocol_set_input_handler((uint64_t)handle, 0);
  nw_protocol_set_output_handler(v22, 0);
  nw_protocol_replace_input_handler(*((_QWORD *)handle + 4), (uint64_t)handle, v22);
  nw_protocol_set_output_handler((uint64_t)handle, 0);
  nw_protocol_connect(*(_QWORD *)(v22 + 32), v22);
  parameters = (void *)nw_protocol_get_parameters((uint64_t)v9);
  v24 = nw_parameters_copy_effective_proxy_config(parameters);
  if (!v24)
    goto LABEL_55;
  v25 = v24;
  v26 = v25;
  if (v25[38] != 1)
  {

    if ((handle[294] & 2) != 0)
      goto LABEL_112;
    goto LABEL_74;
  }
  v27 = v25[39];

  if (v27 == 2001)
  {
    v28 = handle[168];
    if ((v28 & 1) != 0)
    {
      v29 = (void *)*((_QWORD *)handle + 20);
      if (v29)
      {
        os_release(v29);
        v28 = handle[168];
      }
    }
    *((_QWORD *)handle + 20) = v26;
    handle[168] = v28 | 1;
LABEL_55:
    v26 = 0;
  }
  if ((handle[294] & 2) != 0)
    goto LABEL_112;
LABEL_74:
  if (v9->identifier->mapping == 2)
  {
    *((_QWORD *)handle + 17) = v9;
    nw_protocol_add_listen_handler((uint64_t)v9, (uint64_t)(handle + 64));
    v34 = "nw_http_client_bottom_get_out_of_the_way";
    while (1)
    {
      v36 = *((_QWORD *)handle + 23);
      v35 = *((_QWORD *)handle + 24);
      v37 = v36;
      if (v36 != v35)
      {
        while (*(_DWORD *)(v37 + 8) == 2)
        {
          v37 += 16;
          if (v37 == v35)
            goto LABEL_121;
        }
      }
      if (v37 == v35)
        goto LABEL_121;
      v38 = *(_QWORD **)v37;
      v39 = *(_DWORD *)(v37 + 8);
      v40 = v37 + 16;
      if (v37 + 16 != v35)
      {
        v41 = v35 - v37 - 32;
        if (v41 >= 0x10)
        {
          v42 = (v37 - v36) >> 4;
          v43 = (v41 >> 4) + 1;
          v44 = 16 * (v43 & 0x1FFFFFFFFFFFFFFELL);
          v37 += v44;
          v45 = v36 + 16 * v42 + 24;
          v46 = v43 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v47 = *(_QWORD *)(v45 + 8);
            *(_QWORD *)(v45 - 24) = *(_QWORD *)(v45 - 8);
            *(_QWORD *)(v45 - 8) = v47;
            LODWORD(v47) = *(_DWORD *)(v45 + 16);
            *(_DWORD *)(v45 - 16) = *(_DWORD *)v45;
            *(_DWORD *)v45 = v47;
            v45 += 32;
            v46 -= 2;
          }
          while (v46);
          if (v43 == (v43 & 0x1FFFFFFFFFFFFFFELL))
            goto LABEL_88;
          v40 += v44;
        }
        do
        {
          *(_QWORD *)v37 = *(_QWORD *)v40;
          *(_DWORD *)(v37 + 8) = *(_DWORD *)(v40 + 8);
          v37 += 16;
          v40 += 16;
        }
        while (v40 != v35);
      }
LABEL_88:
      *((_QWORD *)handle + 24) = v37;
      v48 = (void *)nw_protocol_get_parameters((uint64_t)v38);
      if (nw_protocol_http_client_bottom_accept((uint64_t)handle, *((void **)handle + 15), v48)
        && (nw_http_client_bottom_add_to_messaging((uint64_t)handle, (uint64_t)v38) & 1) != 0)
      {
        if (v39 == 1)
          nw_protocol_connect(v38[4], (uint64_t)v38);
      }
      else
      {
        if ((handle[294] & 4) == 0)
        {
          v49 = __nwlog_obj();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446722;
            v77 = v34;
            v78 = 2082;
            v79 = handle + 208;
            v80 = 2080;
            v81 = " ";
            _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sMessaging cannot accept stream", buf, 0x20u);
          }
        }
        v51 = (char *)*((_QWORD *)handle + 24);
        v50 = *((_QWORD *)handle + 25);
        if ((unint64_t)v51 >= v50)
        {
          v53 = (char *)*((_QWORD *)handle + 23);
          v54 = (v51 - v53) >> 4;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 60)
            goto LABEL_159;
          v56 = v50 - (_QWORD)v53;
          if (v56 >> 3 > v55)
            v55 = v56 >> 3;
          v57 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0;
          v58 = 0xFFFFFFFFFFFFFFFLL;
          if (!v57)
            v58 = v55;
          if (v58 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v59 = v34;
          v60 = 16 * v58;
          v61 = (char *)operator new(16 * v58);
          v62 = &v61[16 * v54];
          *(_QWORD *)v62 = v38;
          *((_DWORD *)v62 + 2) = 2;
          if (v51 == v53)
          {
            v64 = &v61[16 * v54];
          }
          else
          {
            v63 = &v61[16 * v54];
            do
            {
              v64 = v63 - 16;
              *((_OWORD *)v63 - 1) = *((_OWORD *)v51 - 1);
              v51 -= 16;
              v63 -= 16;
            }
            while (v51 != v53);
          }
          v52 = v62 + 16;
          *((_QWORD *)handle + 23) = v64;
          *((_QWORD *)handle + 24) = v62 + 16;
          *((_QWORD *)handle + 25) = &v61[v60];
          if (v53)
            operator delete(v53);
          v34 = v59;
        }
        else
        {
          *(_QWORD *)v51 = v38;
          *((_DWORD *)v51 + 2) = 2;
          v52 = v51 + 16;
        }
        *((_QWORD *)handle + 24) = v52;
        nw_protocol_error(v38, (uint64_t)handle);
        nw_protocol_disconnected(v38, (uint64_t)handle);
      }
    }
  }
LABEL_112:
  nw_protocol_remove_instance((uint64_t)handle);
  v66 = (_BYTE *)*((_QWORD *)handle + 23);
  v65 = (_BYTE *)*((_QWORD *)handle + 24);
  if (v66 == v65)
  {
    nw_http_client_bottom_destroy((uint64_t)handle);
  }
  else
  {
    v67 = v65 - v66;
    if (v65 - v66 < 0)
LABEL_159:
      abort();
    v68 = operator new(v65 - v66);
    v69 = v67 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v68, v66, v69);
    if (v69)
    {
      v70 = v68 + 2;
      do
      {
        if (*v70 != 2)
          nw_protocol_notify(*((_QWORD **)v70 - 1), (uint64_t)handle, 22);
        v70 += 4;
        v69 -= 16;
      }
      while (v69);
    }
    operator delete(v68);
  }
LABEL_121:
  if (v26)
    os_release(v26);
}

void nw_protocol_http_client_bottom_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *v11;
  _BOOL4 v12;
  char *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  char *v20;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  nw_protocol *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_client_bottom_disconnect";
    v14 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v14, &type, &v24))
      goto LABEL_74;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_client_bottom_disconnect";
      v17 = "%{public}s called with null protocol";
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_protocol_http_client_bottom_disconnect";
          v28 = 2082;
          v29 = (nw_protocol *)backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_74:
        if (!v14)
          return;
        goto LABEL_75;
      }
      if (!v19)
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_client_bottom_disconnect";
      v17 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_client_bottom_disconnect";
      v17 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_73;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_client_bottom_disconnect";
    v14 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v14, &type, &v24))
      goto LABEL_74;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        v15 = __nwlog_obj();
        v16 = type;
        if (!os_log_type_enabled(v15, type))
          goto LABEL_74;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_http_client_bottom_disconnect";
        v17 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
        goto LABEL_73;
      }
      v20 = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v21 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v21)
          goto LABEL_74;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_http_client_bottom_disconnect";
        v17 = "%{public}s called with null http_client_bottom, no backtrace";
        goto LABEL_73;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_http_client_bottom_disconnect";
        v28 = 2082;
        v29 = (nw_protocol *)v20;
        v22 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
LABEL_58:
        _os_log_impl(&dword_182FBE000, v15, v16, v22, buf, 0x16u);
      }
LABEL_59:
      free(v20);
      if (!v14)
        return;
LABEL_75:
      v13 = (char *)v14;
LABEL_31:
      free(v13);
      return;
    }
    v15 = __nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type))
      goto LABEL_74;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_client_bottom_disconnect";
    v17 = "%{public}s called with null http_client_bottom";
LABEL_73:
    _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
    goto LABEL_74;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_client_bottom_disconnect";
    v14 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v14, &type, &v24))
      goto LABEL_74;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_client_bottom_disconnect";
      v17 = "%{public}s called with null other_protocol";
      goto LABEL_73;
    }
    if (!v24)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_client_bottom_disconnect";
      v17 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_73;
    }
    v20 = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type;
    v23 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v23)
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_client_bottom_disconnect";
      v17 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_73;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_http_client_bottom_disconnect";
      v28 = 2082;
      v29 = (nw_protocol *)v20;
      v22 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_58;
    }
    goto LABEL_59;
  }
  if (*((nw_protocol **)handle + 6) != a2)
  {
    nw_protocol_disconnected(a2, (uint64_t)handle);
    v4 = *((_QWORD *)handle + 23);
    v5 = *((_QWORD *)handle + 24);
    if (v4 != v5)
    {
      while (*(nw_protocol **)v4 != a2)
      {
        v4 += 16;
        if (v4 == v5)
          goto LABEL_15;
      }
    }
    if (v4 != v5)
    {
      *(_DWORD *)(v4 + 8) = 2;
      return;
    }
LABEL_15:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v27 = "nw_protocol_http_client_bottom_disconnect";
    v28 = 2048;
    v29 = a2;
    v7 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v7, &type, &v24))
      goto LABEL_29;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_http_client_bottom_disconnect";
        v28 = 2048;
        v29 = a2;
        v10 = "%{public}s Protocol %p isn't an input handler of http client bottom";
LABEL_28:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0x16u);
      }
    }
    else if (v24)
    {
      v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      v12 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v11)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446722;
          v27 = "nw_protocol_http_client_bottom_disconnect";
          v28 = 2048;
          v29 = a2;
          v30 = 2082;
          v31 = v11;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Protocol %p isn't an input handler of http client bottom, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v11);
        goto LABEL_29;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_http_client_bottom_disconnect";
        v28 = 2048;
        v29 = a2;
        v10 = "%{public}s Protocol %p isn't an input handler of http client bottom, no backtrace";
        goto LABEL_28;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_http_client_bottom_disconnect";
        v28 = 2048;
        v29 = a2;
        v10 = "%{public}s Protocol %p isn't an input handler of http client bottom, backtrace limit exceeded";
        goto LABEL_28;
      }
    }
LABEL_29:
    if (!v7)
      return;
    v13 = (char *)v7;
    goto LABEL_31;
  }
  if ((handle[294] & 4) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      v27 = "nw_protocol_http_client_bottom_disconnect";
      v28 = 2082;
      v29 = (nw_protocol *)(handle + 208);
      v30 = 2080;
      v31 = " ";
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sdisconnecting output handler", buf, 0x20u);
    }
  }
  handle[294] |= 0x10u;
  nw_protocol_disconnect(*((_QWORD **)handle + 4), (uint64_t)handle);
}

void nw_protocol_http_client_bottom_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  _BYTE *handle;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  const char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_client_bottom_disconnected";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14))
      goto LABEL_46;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_client_bottom_disconnected";
        v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v9 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v9)
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_client_bottom_disconnected";
        v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_protocol_http_client_bottom_disconnected";
        v18 = 2082;
        v19 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_46;
    }
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_client_bottom_disconnected";
    v7 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_46;
  }
  handle = a1->handle;
  if (handle)
  {
    if (a2)
    {
      handle[294] |= 2u;
      nw_protocol_remove_instance((uint64_t)handle);
      nw_protocol_disconnected(*((_QWORD **)handle + 6), (uint64_t)a2);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_client_bottom_disconnected";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v4, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_client_bottom_disconnected";
        v7 = "%{public}s called with null other_protocol";
        goto LABEL_45;
      }
      if (!v14)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_client_bottom_disconnected";
        v7 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_45;
      }
      v10 = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v13 = os_log_type_enabled(v5, type);
      if (!v10)
      {
        if (!v13)
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_client_bottom_disconnected";
        v7 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_45;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_protocol_http_client_bottom_disconnected";
        v18 = 2082;
        v19 = v10;
        v12 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_30;
      }
      goto LABEL_31;
    }
LABEL_46:
    if (!v4)
      return;
    goto LABEL_47;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_http_client_bottom_disconnected";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v4, &type, &v14))
    goto LABEL_46;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_client_bottom_disconnected";
    v7 = "%{public}s called with null http_client_bottom";
    goto LABEL_45;
  }
  if (!v14)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_client_bottom_disconnected";
    v7 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    goto LABEL_45;
  }
  v10 = (char *)__nw_create_backtrace_string();
  v5 = __nwlog_obj();
  v6 = type;
  v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11)
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_client_bottom_disconnected";
    v7 = "%{public}s called with null http_client_bottom, no backtrace";
    goto LABEL_45;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    v17 = "nw_protocol_http_client_bottom_disconnected";
    v18 = 2082;
    v19 = v10;
    v12 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_182FBE000, v5, v6, v12, buf, 0x16u);
  }
LABEL_31:
  free(v10);
  if (v4)
LABEL_47:
    free(v4);
}

void nw_protocol_http_client_bottom_error(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD **handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  const char *v11;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_client_bottom_error";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v3, &type, &v13))
      goto LABEL_46;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v13)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http_client_bottom_error";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (!backtrace_string)
      {
        if (!v8)
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http_client_bottom_error";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_protocol_http_client_bottom_error";
        v17 = 2082;
        v18 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_46;
    }
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_client_bottom_error";
    v6 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_46;
  }
  handle = (_QWORD **)a1->handle;
  if (handle)
  {
    if (a2)
    {
      nw_protocol_error(handle[6], (uint64_t)a2);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_client_bottom_error";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v3, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http_client_bottom_error";
        v6 = "%{public}s called with null other_protocol";
        goto LABEL_45;
      }
      if (!v13)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http_client_bottom_error";
        v6 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_45;
      }
      v9 = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v12 = os_log_type_enabled(v4, type);
      if (!v9)
      {
        if (!v12)
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http_client_bottom_error";
        v6 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_45;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_protocol_http_client_bottom_error";
        v17 = 2082;
        v18 = v9;
        v11 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_30;
      }
      goto LABEL_31;
    }
LABEL_46:
    if (!v3)
      return;
    goto LABEL_47;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_http_client_bottom_error";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (!__nwlog_fault(v3, &type, &v13))
    goto LABEL_46;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_client_bottom_error";
    v6 = "%{public}s called with null http_client_bottom";
    goto LABEL_45;
  }
  if (!v13)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_client_bottom_error";
    v6 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    goto LABEL_45;
  }
  v9 = (char *)__nw_create_backtrace_string();
  v4 = __nwlog_obj();
  v5 = type;
  v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10)
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_client_bottom_error";
    v6 = "%{public}s called with null http_client_bottom, no backtrace";
    goto LABEL_45;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    v16 = "nw_protocol_http_client_bottom_error";
    v17 = 2082;
    v18 = v9;
    v11 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_182FBE000, v4, v5, v11, buf, 0x16u);
  }
LABEL_31:
  free(v9);
  if (v3)
LABEL_47:
    free(v3);
}

uint64_t nw_protocol_http_client_bottom_accept(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  _BOOL8 v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _QWORD v19[6];
  char v20;
  os_log_type_t v21;
  _BYTE buf[24];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
    v9 = (char *)_os_log_send_and_compose_impl();
    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v9, &v21, &v20))
      goto LABEL_52;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = v21;
      if (!os_log_type_enabled(v10, v21))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
      v12 = "%{public}s called with null protocol";
      goto LABEL_51;
    }
    if (!v20)
    {
      v10 = __nwlog_obj();
      v11 = v21;
      if (!os_log_type_enabled(v10, v21))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
      v12 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = v21;
    v14 = os_log_type_enabled(v10, v21);
    if (!backtrace_string)
    {
      if (!v14)
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
      v12 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_51;
    }
    if (!v14)
      goto LABEL_38;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
    _os_log_impl(&dword_182FBE000, v10, v11, v15, buf, 0x16u);
    goto LABEL_38;
  }
  v3 = *(_QWORD *)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
    v9 = (char *)_os_log_send_and_compose_impl();
    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v9, &v21, &v20))
      goto LABEL_52;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = v21;
      if (!os_log_type_enabled(v10, v21))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
      v12 = "%{public}s called with null http_client_bottom";
      goto LABEL_51;
    }
    if (!v20)
    {
      v10 = __nwlog_obj();
      v11 = v21;
      if (!os_log_type_enabled(v10, v21))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
      v12 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = v21;
    v16 = os_log_type_enabled(v10, v21);
    if (!backtrace_string)
    {
      if (!v16)
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
      v12 = "%{public}s called with null http_client_bottom, no backtrace";
      goto LABEL_51;
    }
    if (!v16)
      goto LABEL_38;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v15 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
    goto LABEL_37;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
    v9 = (char *)_os_log_send_and_compose_impl();
    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v9, &v21, &v20))
      goto LABEL_52;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = v21;
      if (!os_log_type_enabled(v10, v21))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
      v12 = "%{public}s called with null endpoint";
      goto LABEL_51;
    }
    if (!v20)
    {
      v10 = __nwlog_obj();
      v11 = v21;
      if (!os_log_type_enabled(v10, v21))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
      v12 = "%{public}s called with null endpoint, backtrace limit exceeded";
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = v21;
    v17 = os_log_type_enabled(v10, v21);
    if (backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v15 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
        goto LABEL_37;
      }
LABEL_38:
      free(backtrace_string);
      goto LABEL_52;
    }
    if (!v17)
      goto LABEL_52;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_accept";
    v12 = "%{public}s called with null endpoint, no backtrace";
LABEL_51:
    _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
LABEL_52:
    if (v9)
      free(v9);
    return 0;
  }
  if ((nw_http_client_bottom_stalled(*(_QWORD *)(a1 + 40)) & 1) != 0)
    return 0;
  v6 = *(_QWORD *)(v3 + 136);
  if (v6)
  {
    if (!nw_protocol_http_messaging_accept(v6, a2, a3))
      return 0;
  }
  if ((nw_endpoint_is_equal(*(void **)(v3 + 120), a2, 0) & 1) != 0)
    return 1;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  v23 = 0;
  v8 = *(void **)(v3 + 144);
  if (v8)
  {
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = __nw_protocol_http_client_bottom_accept_block_invoke;
    v19[3] = &unk_1E149D2A0;
    v19[4] = buf;
    v19[5] = v3;
    nw_http_connection_metadata_enumerate_secondary_certificates(v8, v19);
    v7 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
  }
  else
  {
    v7 = 0;
  }
  _Block_object_dispose(buf, 8);
  return v7;
}

uint64_t nw_http_client_bottom_add_to_messaging(uint64_t a1, uint64_t a2)
{
  void *parameters;
  void *v5;
  id *v6;
  NSObject *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  size_t v14;
  char *v15;
  _BOOL4 v16;
  void *v17;
  unsigned __int8 *v18;
  __int16 v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  id *v24;
  id v25;
  void *v26;
  id *v27;
  NSObject *v28;
  nw_protocol_options_t v29;
  os_log_type_t *v30;
  char v31;
  void *v32;
  id *v33;
  NSObject *v34;
  nw_protocol_options_t v35;
  nw_protocol_options_t v36;
  void *v37;
  id *v38;
  id v39;
  uint64_t protocol_handle;
  NSObject *v41;
  uint64_t v42;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  const char *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  const char *v51;
  char *v52;
  _BOOL4 v53;
  const char *v54;
  _BOOL4 v55;
  char *v56;
  _BOOL4 v57;
  char *backtrace_string;
  _BOOL4 v59;
  NSObject *v60;
  _QWORD v61[7];
  os_log_type_t v62[8];
  os_log_type_t *v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  void (*v66)(uint64_t);
  void *object;
  char v68;
  _QWORD v69[3];
  char v70;
  _QWORD iterate_block[7];
  os_log_type_t type[8];
  os_log_type_t *v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  void (*v76)(uint64_t);
  void *v77;
  char v78;
  _QWORD v79[3];
  char v80;
  char __s[4];
  const char *v82;
  __int16 v83;
  char *v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    parameters = (void *)nw_protocol_get_parameters(a2);
    if (parameters)
    {
      v5 = parameters;
      nw_parameters_log_protocol_instances(parameters);
      v6 = v5;
      v7 = v6[19];

      v79[0] = 0;
      v79[1] = v79;
      v79[2] = 0x2000000000;
      v80 = 0;
      *(_QWORD *)type = 0;
      v73 = type;
      v74 = 0x3802000000;
      v75 = __Block_byref_object_copy__22323;
      v76 = __Block_byref_object_dispose__22324;
      v77 = 0;
      v78 = -1;
      v8 = MEMORY[0x1E0C809B0];
      iterate_block[0] = MEMORY[0x1E0C809B0];
      iterate_block[1] = 0x40000000;
      iterate_block[2] = ___ZL38nw_http_client_bottom_add_to_messagingP30nw_protocol_http_client_bottomP11nw_protocol_block_invoke;
      iterate_block[3] = &unk_1E149D348;
      iterate_block[4] = v79;
      iterate_block[5] = type;
      iterate_block[6] = a1;
      v60 = v7;
      nw_protocol_stack_iterate_application_protocols(v7, iterate_block);
      if (*((_QWORD *)v73 + 5))
      {
        v9 = nw_parameters_copy_protocol_options_legacy(v6, (nw_protocol *)a1);
        if (v9)
        {
          v10 = v9;
          v11 = v10;
          v12 = 0;
          __s[0] = 0;
          while (1)
          {
            v13 = v10[v12 + 48];
            __s[v12] = v13;
            if (!v13)
              break;
            if (++v12 == 83)
            {
              v85 = 0;
              break;
            }
          }

          v14 = strlen(__s);
          v15 = strchr(__s, 58);
          if (v15)
            *v15 = 0;
          v16 = v14 > 2;
          v17 = (void *)*((_QWORD *)v73 + 5);
          v18 = v11;
          v19 = *((_WORD *)v18 + 68);

          nw_protocol_options_set_log_id(v17, "C", &__s[2 * v16], (unsigned __int16)(v19 + 1));
          v20 = (void *)*((_QWORD *)v73 + 5);
          if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
            dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
          v21 = (id)nw_protocol_copy_http_messaging_definition_definition;
          nw_parameters_set_protocol_instance(v20, v22, *(_QWORD *)(a1 + 136));
          if (v21)
            os_release(v21);
          v23 = *(void **)(a1 + 160);
          if (v23)
          {
            v24 = v6;
            v25 = v23;
            objc_storeStrong(v24 + 23, v23);

          }
          v26 = (void *)nw_protocol_get_parameters(*(_QWORD *)(a1 + 136));
          if (!v26)
            goto LABEL_36;
          v27 = v26;
          v28 = v27[19];

          v69[0] = 0;
          v69[1] = v69;
          v69[2] = 0x2000000000;
          v70 = 0;
          *(_QWORD *)v62 = 0;
          v63 = v62;
          v64 = 0x3802000000;
          v65 = __Block_byref_object_copy__22323;
          v66 = __Block_byref_object_dispose__22324;
          object = 0;
          v68 = -1;
          v61[0] = v8;
          v61[1] = 0x40000000;
          v61[2] = ___ZL38nw_http_client_bottom_add_to_messagingP30nw_protocol_http_client_bottomP11nw_protocol_block_invoke_21;
          v61[3] = &unk_1E149D370;
          v61[5] = v62;
          v61[6] = a1;
          v61[4] = v69;
          nw_protocol_stack_iterate_application_protocols(v28, v61);
          if (!*((_QWORD *)v63 + 5))
          {
            v29 = nw_protocol_stack_copy_transport_protocol(v28);
            v30 = v63;
            v31 = *((_BYTE *)v63 + 48);
            if ((v31 & 1) != 0)
            {
              v32 = (void *)*((_QWORD *)v63 + 5);
              if (v32)
              {
                os_release(v32);
                v31 = *((_BYTE *)v30 + 48);
              }
            }
            *((_QWORD *)v30 + 5) = v29;
            *((_BYTE *)v30 + 48) = v31 | 1;
          }
          v33 = v6;
          v34 = v6[19];

          v35 = nw_protocol_stack_copy_transport_protocol(v34);
          v36 = v35;
          v37 = (void *)*((_QWORD *)v63 + 5);
          if (v37)
          {
            if (v35)
            {
              v38 = v37;
              v39 = v38[1];

              if (nw_protocol_options_matches_definition(v36, v39))
              {
                protocol_handle = nw_protocol_options_get_protocol_handle(*((void **)v63 + 5));
                v41 = v36;
                v41[2].isa = (Class)protocol_handle;

              }
              goto LABEL_28;
            }
          }
          else if (v35)
          {
LABEL_28:
            os_release(v36);
          }
          if (v34)
            os_release(v34);
          _Block_object_dispose(v62, 8);
          if ((v68 & 1) != 0 && object)
            os_release(object);
          _Block_object_dispose(v69, 8);
          if (v28)
            os_release(v28);
LABEL_36:
          nw_protocol_set_output_handler(a2, 0);
          v42 = nw_protocol_add_input_handler(*(_QWORD *)(a1 + 136), a2);
          os_release(v18);
          goto LABEL_37;
        }
        __nwlog_obj();
        *(_DWORD *)__s = 136446210;
        v82 = "nw_http_client_bottom_add_to_messaging";
        v48 = (char *)_os_log_send_and_compose_impl();
        v62[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v69[0]) = 0;
        if (__nwlog_fault(v48, v62, v69))
        {
          if (v62[0] == OS_LOG_TYPE_FAULT)
          {
            v49 = __nwlog_obj();
            v50 = v62[0];
            if (!os_log_type_enabled(v49, v62[0]))
              goto LABEL_101;
            *(_DWORD *)__s = 136446210;
            v82 = "nw_http_client_bottom_add_to_messaging";
            v51 = "%{public}s called with null options";
            goto LABEL_100;
          }
          if (!LOBYTE(v69[0]))
          {
            v49 = __nwlog_obj();
            v50 = v62[0];
            if (!os_log_type_enabled(v49, v62[0]))
              goto LABEL_101;
            *(_DWORD *)__s = 136446210;
            v82 = "nw_http_client_bottom_add_to_messaging";
            v51 = "%{public}s called with null options, backtrace limit exceeded";
            goto LABEL_100;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v49 = __nwlog_obj();
          v50 = v62[0];
          v59 = os_log_type_enabled(v49, v62[0]);
          if (backtrace_string)
          {
            if (v59)
            {
              *(_DWORD *)__s = 136446466;
              v82 = "nw_http_client_bottom_add_to_messaging";
              v83 = 2082;
              v84 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s called with null options, dumping backtrace:%{public}s", (uint8_t *)__s, 0x16u);
            }
            free(backtrace_string);
            if (!v48)
              goto LABEL_103;
            goto LABEL_102;
          }
          if (v59)
          {
            *(_DWORD *)__s = 136446210;
            v82 = "nw_http_client_bottom_add_to_messaging";
            v51 = "%{public}s called with null options, no backtrace";
LABEL_100:
            _os_log_impl(&dword_182FBE000, v49, v50, v51, (uint8_t *)__s, 0xCu);
          }
        }
      }
      else
      {
        __nwlog_obj();
        *(_DWORD *)__s = 136446210;
        v82 = "nw_http_client_bottom_add_to_messaging";
        v48 = (char *)_os_log_send_and_compose_impl();
        v62[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v69[0]) = 0;
        if (!__nwlog_fault(v48, v62, v69))
          goto LABEL_101;
        if (v62[0] == OS_LOG_TYPE_FAULT)
        {
          v49 = __nwlog_obj();
          v50 = v62[0];
          if (!os_log_type_enabled(v49, v62[0]))
            goto LABEL_101;
          *(_DWORD *)__s = 136446210;
          v82 = "nw_http_client_bottom_add_to_messaging";
          v51 = "%{public}s called with null messaging_options";
          goto LABEL_100;
        }
        if (!LOBYTE(v69[0]))
        {
          v49 = __nwlog_obj();
          v50 = v62[0];
          if (!os_log_type_enabled(v49, v62[0]))
            goto LABEL_101;
          *(_DWORD *)__s = 136446210;
          v82 = "nw_http_client_bottom_add_to_messaging";
          v51 = "%{public}s called with null messaging_options, backtrace limit exceeded";
          goto LABEL_100;
        }
        v56 = (char *)__nw_create_backtrace_string();
        v49 = __nwlog_obj();
        v50 = v62[0];
        v57 = os_log_type_enabled(v49, v62[0]);
        if (!v56)
        {
          if (!v57)
            goto LABEL_101;
          *(_DWORD *)__s = 136446210;
          v82 = "nw_http_client_bottom_add_to_messaging";
          v51 = "%{public}s called with null messaging_options, no backtrace";
          goto LABEL_100;
        }
        if (v57)
        {
          *(_DWORD *)__s = 136446466;
          v82 = "nw_http_client_bottom_add_to_messaging";
          v83 = 2082;
          v84 = v56;
          _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s called with null messaging_options, dumping backtrace:%{public}s", (uint8_t *)__s, 0x16u);
        }
        free(v56);
      }
LABEL_101:
      if (!v48)
      {
LABEL_103:
        v42 = 0;
LABEL_37:
        _Block_object_dispose(type, 8);
        if ((v78 & 1) != 0 && v77)
          os_release(v77);
        _Block_object_dispose(v79, 8);
        if (v60)
          os_release(v60);
        return v42;
      }
LABEL_102:
      free(v48);
      goto LABEL_103;
    }
    __nwlog_obj();
    *(_DWORD *)__s = 136446210;
    v82 = "nw_http_client_bottom_add_to_messaging";
    v44 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v62[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v44, type, v62))
      goto LABEL_93;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)__s = 136446210;
        v82 = "nw_http_client_bottom_add_to_messaging";
        v47 = "%{public}s called with null parameters";
        goto LABEL_92;
      }
      goto LABEL_93;
    }
    if (v62[0] == OS_LOG_TYPE_DEFAULT)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)__s = 136446210;
        v82 = "nw_http_client_bottom_add_to_messaging";
        v47 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_92;
      }
      goto LABEL_93;
    }
    v52 = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = type[0];
    v55 = os_log_type_enabled(v45, type[0]);
    if (!v52)
    {
      if (v55)
      {
        *(_DWORD *)__s = 136446210;
        v82 = "nw_http_client_bottom_add_to_messaging";
        v47 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_92;
      }
      goto LABEL_93;
    }
    if (v55)
    {
      *(_DWORD *)__s = 136446466;
      v82 = "nw_http_client_bottom_add_to_messaging";
      v83 = 2082;
      v84 = v52;
      v54 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_67;
    }
    goto LABEL_68;
  }
  __nwlog_obj();
  *(_DWORD *)__s = 136446210;
  v82 = "nw_http_client_bottom_add_to_messaging";
  v44 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v62[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v44, type, v62))
    goto LABEL_93;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (v62[0] == OS_LOG_TYPE_DEFAULT)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)__s = 136446210;
        v82 = "nw_http_client_bottom_add_to_messaging";
        v47 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_92;
      }
      goto LABEL_93;
    }
    v52 = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = type[0];
    v53 = os_log_type_enabled(v45, type[0]);
    if (!v52)
    {
      if (v53)
      {
        *(_DWORD *)__s = 136446210;
        v82 = "nw_http_client_bottom_add_to_messaging";
        v47 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_92;
      }
      goto LABEL_93;
    }
    if (v53)
    {
      *(_DWORD *)__s = 136446466;
      v82 = "nw_http_client_bottom_add_to_messaging";
      v83 = 2082;
      v84 = v52;
      v54 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_67:
      _os_log_impl(&dword_182FBE000, v45, v46, v54, (uint8_t *)__s, 0x16u);
    }
LABEL_68:
    free(v52);
    goto LABEL_93;
  }
  v45 = __nwlog_obj();
  v46 = type[0];
  if (os_log_type_enabled(v45, type[0]))
  {
    *(_DWORD *)__s = 136446210;
    v82 = "nw_http_client_bottom_add_to_messaging";
    v47 = "%{public}s called with null input_protocol";
LABEL_92:
    _os_log_impl(&dword_182FBE000, v45, v46, v47, (uint8_t *)__s, 0xCu);
  }
LABEL_93:
  if (v44)
    free(v44);
  return 0;
}

uint64_t __Block_byref_object_copy__22323(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__22324(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZL38nw_http_client_bottom_add_to_messagingP30nw_protocol_http_client_bottomP11nw_protocol_block_invoke(_QWORD *a1, void *a2)
{
  void *v2;
  uint64_t v4;
  char v5;
  void *v6;

  v2 = a2;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) && nw_protocol_options_is_http_messaging(a2))
    {
      if (v2)
        v2 = os_retain(v2);
      v4 = *(_QWORD *)(a1[5] + 8);
      v5 = *(_BYTE *)(v4 + 48);
      if ((v5 & 1) != 0)
      {
        v6 = *(void **)(v4 + 40);
        if (v6)
        {
          os_release(v6);
          v5 = *(_BYTE *)(v4 + 48);
        }
      }
      *(_QWORD *)(v4 + 40) = v2;
      *(_BYTE *)(v4 + 48) = v5 | 1;
    }
  }
  else if (nw_protocol_options_get_protocol_handle(a2) == a1[6])
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
}

void ___ZL38nw_http_client_bottom_add_to_messagingP30nw_protocol_http_client_bottomP11nw_protocol_block_invoke_21(_QWORD *a1, void *a2)
{
  void *v2;
  uint64_t protocol_handle;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;

  v2 = a2;
  protocol_handle = nw_protocol_options_get_protocol_handle(a2);
  v5 = *(_QWORD *)(a1[4] + 8);
  if (protocol_handle == *(_QWORD *)(a1[6] + 136))
  {
    *(_BYTE *)(v5 + 24) = 1;
  }
  else if (*(_BYTE *)(v5 + 24))
  {
    if (v2)
      v2 = os_retain(v2);
    v6 = *(_QWORD *)(a1[5] + 8);
    v7 = *(_BYTE *)(v6 + 48);
    if ((v7 & 1) != 0)
    {
      v8 = *(void **)(v6 + 40);
      if (v8)
      {
        os_release(v8);
        v7 = *(_BYTE *)(v6 + 48);
      }
    }
    *(_QWORD *)(v6 + 40) = v2;
    *(_BYTE *)(v6 + 48) = v7 | 1;
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
  }
}

uint64_t nw_http_client_bottom_stalled(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t int64_with_default;
  int64_t v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_http_client_bottom_stalled";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v16, &type, &v22))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_http_client_bottom_stalled";
      v19 = "%{public}s called with null http_client_bottom";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v21 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_http_client_bottom_stalled";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_34;
      }
      if (!v21)
      {
LABEL_34:
        if (v16)
          free(v16);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v25 = "nw_http_client_bottom_stalled";
      v19 = "%{public}s called with null http_client_bottom, no backtrace";
    }
    else
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_http_client_bottom_stalled";
      v19 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
    goto LABEL_34;
  }
  if (!*(_QWORD *)(a1 + 136))
  {
    v4 = *(_QWORD *)(a1 + 96);
    if (v4
      && ((v5 = mach_continuous_approximate_time(), v5 <= 1) ? (v6 = 1) : (v6 = v5),
          v7 = nw_delta_nanos(v4, v6),
          int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_setup_threshold_seconds, 5), v7 > 1000000000 * int64_with_default))
    {
      if ((*(_BYTE *)(a1 + 294) & 4) == 0)
      {
        v9 = int64_with_default;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = gLogObj;
        v2 = 1;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          return v2;
        *(_DWORD *)buf = 136446978;
        v25 = "nw_http_client_bottom_stalled";
        v26 = 2082;
        v27 = (char *)(a1 + 208);
        v28 = 2080;
        v29 = " ";
        v30 = 2048;
        v31 = v9;
        v11 = "%{public}s %{public}s%sdenying join attempt because http_client_bottom was not ready within %lld seconds";
        v12 = v10;
        v13 = 42;
LABEL_18:
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, v11, buf, v13);
        return v2;
      }
    }
    else
    {
      if (!*(_WORD *)(a1 + 292)
        || networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_maximum_stall_count, 5) >= *(unsigned __int16 *)(a1 + 292))
      {
        return 0;
      }
      if ((*(_BYTE *)(a1 + 294) & 4) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v2 = 1;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          return v2;
        v15 = *(unsigned __int16 *)(a1 + 292);
        *(_DWORD *)buf = 136446978;
        v25 = "nw_http_client_bottom_stalled";
        v26 = 2082;
        v27 = (char *)(a1 + 208);
        v28 = 2080;
        v29 = " ";
        v30 = 1024;
        LODWORD(v31) = v15;
        v11 = "%{public}s %{public}s%sdenying join attempt because http_client_bottom hit %u stalls";
        v12 = v14;
        v13 = 38;
        goto LABEL_18;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t __nw_protocol_http_client_bottom_accept_block_invoke(uint64_t a1, nw_endpoint_t endpoint)
{
  const char *hostname;
  unsigned int port;
  _BOOL8 host_with_numeric_port;
  int is_equal;

  hostname = nw_endpoint_get_hostname(endpoint);
  port = nw_endpoint_get_port(*(nw_endpoint_t *)(*(_QWORD *)(a1 + 40) + 120));
  host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(hostname, port);
  is_equal = nw_endpoint_is_equal(*(void **)(*(_QWORD *)(a1 + 40) + 120), (void *)host_with_numeric_port, 0);
  if (is_equal)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  if (host_with_numeric_port)
    os_release((void *)host_with_numeric_port);
  return is_equal ^ 1u;
}

uint64_t ___ZL38nw_protocol_http_client_bottom_connectP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  _QWORD *v11;
  _BOOL4 v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  void *v22;
  char v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  id *v29;
  id v30;
  BOOL is_equal_unsafe;
  id v32;
  void *v33;
  NSObject *parameters;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  nw_protocol_options_t v39;
  nw_protocol_options_t v40;
  nw_protocol_definition_t v41;
  uint64_t protocol_handle;
  uint64_t v43;
  NSObject *v44;
  _QWORD *v45;
  uint64_t v46;
  pthread_once_t *v47;
  void (*v48)(void);
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  NSObject *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  BOOL v73;
  unint64_t v74;
  const char *v75;
  void (*v76)(void);
  pthread_once_t *v77;
  void *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  const char *v87;
  char *backtrace_string;
  _BOOL4 v89;
  NSObject *v90;
  NSObject *v91;
  uint64_t v92;
  void *v93;
  char *v94;
  NSObject *v95;
  os_log_type_t v96;
  void *v97;
  os_log_type_t v98;
  char *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  char *v102;
  os_log_type_t v103;
  _BOOL4 v104;
  os_log_type_t v105;
  os_log_type_t v106;
  NSObject *v107;
  uint64_t v108;
  os_log_type_t type[8];
  uint64_t v110;
  uint64_t (*v111)(uint64_t, nw_endpoint_t);
  void *v112;
  uint64_t v113;
  char v114;
  _BYTE buf[24];
  const char *v116;
  _BYTE v117[20];
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (!result)
    return result;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
    v84 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v114 = 0;
    if (!__nwlog_fault(v84, type, &v114))
      goto LABEL_131;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v85 = __nwlog_obj();
      v86 = type[0];
      if (!os_log_type_enabled(v85, type[0]))
        goto LABEL_131;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
      v87 = "%{public}s called with null http_messaging_protocol";
    }
    else if (v114)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v85 = __nwlog_obj();
      v86 = type[0];
      v89 = os_log_type_enabled(v85, type[0]);
      if (backtrace_string)
      {
        if (v89)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s called with null http_messaging_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_131;
      }
      if (!v89)
      {
LABEL_131:
        if (v84)
          free(v84);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
      v87 = "%{public}s called with null http_messaging_protocol, no backtrace";
    }
    else
    {
      v85 = __nwlog_obj();
      v86 = type[0];
      if (!os_log_type_enabled(v85, type[0]))
        goto LABEL_131;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
      v87 = "%{public}s called with null http_messaging_protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v85, v86, v87, buf, 0xCu);
    goto LABEL_131;
  }
  v6 = result;
  if (nw_protocol_copy_info(a2, 253))
  {
    result = 0;
    if ((*(_BYTE *)(v6 + 294) & 4) == 0)
    {
      if (gLogDatapath)
      {
        v7 = __nwlog_obj();
        result = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)result)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v6 + 208;
          *(_WORD *)&buf[22] = 2080;
          v116 = " ";
          v8 = "%{public}s %{public}s%sreplacing protocol already has a listen handler, ignoring";
          v9 = v7;
          v10 = OS_LOG_TYPE_DEBUG;
LABEL_29:
          _os_log_impl(&dword_182FBE000, v9, v10, v8, buf, 0x20u);
          return 0;
        }
      }
    }
    return result;
  }
  v11 = *(_QWORD **)(a2 + 16);
  if (nw_protocol_http_messaging_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_75867);
  v12 = nw_protocols_are_equal(v11, nw_protocol_http_messaging_identifier::protocol_identifier);
  v13 = *(_QWORD **)(a2 + 16);
  if (nw_protocol_http1_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
  if (nw_protocols_are_equal(v13, &nw_protocol_http1_identifier::http1_protocol_identifier))
    goto LABEL_19;
  v14 = *(_QWORD **)(a2 + 16);
  if (nw_protocol_http2_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_83230);
  if (nw_protocols_are_equal(v14, &nw_protocol_http2_identifier::http2_protocol_identifier))
    goto LABEL_19;
  v15 = *(_QWORD **)(a2 + 16);
  if (nw_protocol_http3_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_10);
  if (nw_protocols_are_equal(v15, &nw_protocol_http3_identifier::http3_protocol_identifier))
  {
LABEL_19:
    v16 = 1;
  }
  else
  {
    v45 = *(_QWORD **)(a2 + 16);
    if (nw_protocol_oblivious_http_identifier::onceToken != -1)
      dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28508);
    v16 = nw_protocols_are_equal(v45, &nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier);
  }
  v17 = *(_QWORD *)(v6 + 136);
  if (v17)
    v18 = 1;
  else
    v18 = !v12 && !v16;
  if (!v18)
  {
    if ((*(_BYTE *)(v6 + 294) & 4) == 0)
    {
      if (gLogDatapath)
      {
        v90 = __nwlog_obj();
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v6 + 208;
          *(_WORD *)&buf[22] = 2080;
          v116 = " ";
          *(_WORD *)v117 = 2048;
          *(_QWORD *)&v117[2] = a2;
          _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%ssetting http_messaging %p", buf, 0x2Au);
        }
      }
    }
    *(_QWORD *)(v6 + 136) = a2;
LABEL_33:
    if ((*(_BYTE *)(v6 + 294) & 1) == 0 && v16)
    {
      if ((*(_BYTE *)(v6 + 294) & 4) == 0)
      {
        if (gLogDatapath)
        {
          v91 = __nwlog_obj();
          if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
          {
            v92 = *(_QWORD *)(v6 + 136);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v6 + 208;
            *(_WORD *)&buf[22] = 2080;
            v116 = " ";
            *(_WORD *)v117 = 2048;
            *(_QWORD *)&v117[2] = v92;
            *(_WORD *)&v117[10] = 2048;
            *(_QWORD *)&v117[12] = a2;
            _os_log_impl(&dword_182FBE000, v91, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sreplacing http_messaging %p with %p", buf, 0x34u);
          }
        }
      }
      *(_QWORD *)(v6 + 136) = a2;
    }
    if (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 36) != 2)
    {
      if ((*(_BYTE *)(v6 + 294) & 4) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v44 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v6 + 208;
          *(_WORD *)&buf[22] = 2080;
          v116 = " ";
          _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sReverse proxy tunnel is not multiplex", buf, 0x20u);
        }
      }
      return 1;
    }
    *(_QWORD *)(v6 + 136) = a2;
    nw_protocol_add_listen_handler(a2, v6 + 64);
    v21 = *(_QWORD *)(v6 + 72);
    if (v21 != *(_QWORD *)(v6 + 136))
      *(_QWORD *)(v6 + 136) = v21;
    if (!a3 || !nw_protocol_metadata_is_http_connection(a3))
      goto LABEL_76;
    v22 = os_retain(a3);
    v23 = *(_BYTE *)(v6 + 152);
    if ((v23 & 1) != 0)
    {
      v24 = *(void **)(v6 + 144);
      if (v24)
      {
        os_release(v24);
        v23 = *(_BYTE *)(v6 + 152);
      }
    }
    *(_QWORD *)(v6 + 144) = v22;
    *(_BYTE *)(v6 + 152) = v23 | 1;
    v25 = v22;
    v26 = &__block_literal_global_31;
    v27 = &__block_literal_global_31;
    v28 = MEMORY[0x1E0C809B0];
    if (v25)
    {
      v29 = (id *)v25;
      v30 = v29[1];

      if (nw_protocol_copy_http_connection_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
      is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v30, nw_protocol_copy_http_connection_definition_definition);

      if (is_equal_unsafe)
      {
        *(_QWORD *)buf = v28;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __nw_http_connection_metadata_set_certificate_added_handler_block_invoke;
        v116 = (const char *)&unk_1E14AA3E0;
        *(_QWORD *)&v117[8] = v6;
        v32 = &__block_literal_global_31;
        *(_QWORD *)v117 = &__block_literal_global_31;
        if (v29[4])
        {
          (*(void (**)(_BYTE *))&buf[16])(buf);
          v26 = *(void **)v117;
        }

        goto LABEL_55;
      }
      __nwlog_obj();
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
      v94 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v114 = 0;
      if (!__nwlog_fault(v94, type, &v114))
        goto LABEL_169;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v98 = type[0];
        if (os_log_type_enabled(v95, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
          _os_log_impl(&dword_182FBE000, v95, v98, "%{public}s metadata must be http_connection", buf, 0xCu);
        }
      }
      else if (v114)
      {
        v102 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v103 = type[0];
        v104 = os_log_type_enabled(v95, type[0]);
        if (v102)
        {
          if (v104)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v102;
            _os_log_impl(&dword_182FBE000, v95, v103, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v102);
          if (!v94)
          {
LABEL_55:

            v33 = *(void **)(v6 + 144);
            *(_QWORD *)type = v28;
            v110 = 0x40000000;
            v111 = ___ZL54nw_protocol_http_client_bottom_override_http_messagingP30nw_protocol_http_client_bottomP11nw_protocolP20nw_protocol_metadata_block_invoke_2;
            v112 = &__block_descriptor_tmp_32_22396;
            v113 = v6;
            nw_http_connection_metadata_enumerate_secondary_certificates(v33, type);
            parameters = nw_protocol_get_parameters(*(_QWORD *)(v6 + 136));
            if (!parameters)
            {
LABEL_76:
              v46 = v6 + 208;
              v47 = &nwlog_legacy_init(void)::init_once;
              v48 = nwlog_legacy_init_once;
              v49 = &unk_1ECD84000;
              v50 = "nw_protocol_http_client_bottom_override_http_messaging";
              while (1)
              {
                v52 = *(_QWORD *)(v6 + 184);
                v51 = *(_QWORD *)(v6 + 192);
                v53 = v52;
                if (v52 != v51)
                {
                  while (*(_DWORD *)(v53 + 8) == 2)
                  {
                    v53 += 16;
                    if (v53 == v51)
                      return 1;
                  }
                }
                if (v53 == v51)
                  return 1;
                v54 = *(_QWORD **)v53;
                v55 = *(_DWORD *)(v53 + 8);
                v56 = v53 + 16;
                if (v53 + 16 != v51)
                {
                  v57 = v51 - v53 - 32;
                  if (v57 >= 0x10)
                  {
                    v58 = (v53 - v52) >> 4;
                    v59 = (v57 >> 4) + 1;
                    v60 = 16 * (v59 & 0x1FFFFFFFFFFFFFFELL);
                    v53 += v60;
                    v61 = v52 + 16 * v58 + 24;
                    v62 = v59 & 0x1FFFFFFFFFFFFFFELL;
                    do
                    {
                      v63 = *(_QWORD *)(v61 + 8);
                      *(_QWORD *)(v61 - 24) = *(_QWORD *)(v61 - 8);
                      *(_QWORD *)(v61 - 8) = v63;
                      LODWORD(v63) = *(_DWORD *)(v61 + 16);
                      *(_DWORD *)(v61 - 16) = *(_DWORD *)v61;
                      *(_DWORD *)v61 = v63;
                      v61 += 32;
                      v62 -= 2;
                    }
                    while (v62);
                    if (v59 == (v59 & 0x1FFFFFFFFFFFFFFELL))
                      goto LABEL_89;
                    v56 += v60;
                  }
                  do
                  {
                    *(_QWORD *)v53 = *(_QWORD *)v56;
                    *(_DWORD *)(v53 + 8) = *(_DWORD *)(v56 + 8);
                    v53 += 16;
                    v56 += 16;
                  }
                  while (v56 != v51);
                }
LABEL_89:
                *(_QWORD *)(v6 + 192) = v53;
                v64 = (void *)nw_protocol_get_parameters((uint64_t)v54);
                if (nw_protocol_http_client_bottom_accept(v6, *(void **)(v6 + 120), v64)
                  && (nw_http_client_bottom_add_to_messaging(v6, (uint64_t)v54) & 1) != 0)
                {
                  if (v55 == 1)
                    nw_protocol_connect(v54[4], (uint64_t)v54);
                }
                else
                {
                  if ((*(_BYTE *)(v6 + 294) & 4) == 0)
                  {
                    pthread_once(v47, v48);
                    networkd_settings_init();
                    v65 = *((_QWORD *)v49 + 463);
                    if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = v50;
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v46;
                      *(_WORD *)&buf[22] = 2080;
                      v116 = " ";
                      _os_log_impl(&dword_182FBE000, v65, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sMessaging cannot accept stream", buf, 0x20u);
                    }
                  }
                  v67 = *(char **)(v6 + 192);
                  v66 = *(_QWORD *)(v6 + 200);
                  if ((unint64_t)v67 >= v66)
                  {
                    v108 = v46;
                    v69 = *(char **)(v6 + 184);
                    v70 = (v67 - v69) >> 4;
                    v71 = v70 + 1;
                    if ((unint64_t)(v70 + 1) >> 60)
                      abort();
                    v72 = v66 - (_QWORD)v69;
                    if (v72 >> 3 > v71)
                      v71 = v72 >> 3;
                    v73 = (unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0;
                    v74 = 0xFFFFFFFFFFFFFFFLL;
                    if (!v73)
                      v74 = v71;
                    if (v74 >> 60)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v75 = v50;
                    v76 = v48;
                    v77 = v47;
                    v78 = v49;
                    v79 = 16 * v74;
                    v80 = (char *)operator new(16 * v74);
                    v81 = &v80[16 * v70];
                    *(_QWORD *)v81 = v54;
                    *((_DWORD *)v81 + 2) = 2;
                    if (v67 == v69)
                    {
                      v83 = &v80[16 * v70];
                    }
                    else
                    {
                      v82 = &v80[16 * v70];
                      do
                      {
                        v83 = v82 - 16;
                        *((_OWORD *)v82 - 1) = *((_OWORD *)v67 - 1);
                        v67 -= 16;
                        v82 -= 16;
                      }
                      while (v67 != v69);
                    }
                    v68 = v81 + 16;
                    *(_QWORD *)(v6 + 184) = v83;
                    *(_QWORD *)(v6 + 192) = v81 + 16;
                    *(_QWORD *)(v6 + 200) = &v80[v79];
                    if (v69)
                      operator delete(v69);
                    v49 = v78;
                    v47 = v77;
                    v48 = v76;
                    v50 = v75;
                    v46 = v108;
                  }
                  else
                  {
                    *(_QWORD *)v67 = v54;
                    *((_DWORD *)v67 + 2) = 2;
                    v68 = v67 + 16;
                  }
                  *(_QWORD *)(v6 + 192) = v68;
                  nw_protocol_error(v54, v6);
                  nw_protocol_disconnected(v54, v6);
                }
              }
            }
            v35 = *(NSObject **)(v6 + 104);
            v36 = nw_parameters_copy_default_protocol_stack(parameters);
            v37 = nw_parameters_copy_default_protocol_stack(v35);
            v38 = nw_protocol_stack_copy_transport_protocol(v36);
            v39 = nw_protocol_stack_copy_transport_protocol(v37);
            v40 = v39;
            if (v38)
            {
              if (v39)
              {
                v41 = nw_protocol_options_copy_definition(v38);
                if (nw_protocol_options_matches_definition(v40, v41))
                {
                  protocol_handle = nw_protocol_options_get_protocol_handle(v38);
                  nw_parameters_set_protocol_instance(v40, v43, protocol_handle);
                  if ((*(_BYTE *)(v6 + 294) & 4) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v107 = __nwlog_obj();
                      if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v6 + 208;
                        *(_WORD *)&buf[22] = 2080;
                        v116 = " ";
                        *(_WORD *)v117 = 2048;
                        *(_QWORD *)&v117[2] = v40;
                        *(_WORD *)&v117[10] = 2048;
                        *(_QWORD *)&v117[12] = v38;
                        _os_log_impl(&dword_182FBE000, v107, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sChanged http_client_bottom transport from %p to %p", buf, 0x34u);
                      }
                    }
                  }
                }
                os_release(v40);
              }
            }
            else
            {
              v38 = v39;
              if (!v39)
              {
LABEL_72:
                if (v37)
                  os_release(v37);
                if (v36)
                  os_release(v36);
                goto LABEL_76;
              }
            }
            os_release(v38);
            goto LABEL_72;
          }
LABEL_170:
          free(v94);
          goto LABEL_55;
        }
        if (v104)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
          _os_log_impl(&dword_182FBE000, v95, v103, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v106 = type[0];
        if (os_log_type_enabled(v95, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
          _os_log_impl(&dword_182FBE000, v95, v106, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
      v94 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v114 = 0;
      if (!__nwlog_fault(v94, type, &v114))
        goto LABEL_169;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v96 = type[0];
        if (os_log_type_enabled(v95, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
          _os_log_impl(&dword_182FBE000, v95, v96, "%{public}s called with null metadata", buf, 0xCu);
        }
      }
      else if (v114)
      {
        v99 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v100 = type[0];
        v101 = os_log_type_enabled(v95, type[0]);
        if (v99)
        {
          if (v101)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v99;
            _os_log_impl(&dword_182FBE000, v95, v100, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v99);
LABEL_169:
          if (!v94)
            goto LABEL_55;
          goto LABEL_170;
        }
        if (v101)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
          _os_log_impl(&dword_182FBE000, v95, v100, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v105 = type[0];
        if (os_log_type_enabled(v95, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
          _os_log_impl(&dword_182FBE000, v95, v105, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_169;
  }
  if (v17)
    goto LABEL_33;
  if ((*(_BYTE *)(v6 + 294) & 4) != 0)
    return 0;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v19 = gLogObj;
  result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
  if ((_DWORD)result)
  {
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v6 + 208;
    *(_WORD *)&buf[22] = 2080;
    v116 = " ";
    v8 = "%{public}s %{public}s%spassed messaging protocol invalid for overriding";
    v9 = v19;
    v10 = OS_LOG_TYPE_INFO;
    goto LABEL_29;
  }
  return result;
}

uint64_t ___ZL38nw_protocol_http_client_bottom_connectP11nw_protocolS0__block_invoke_2(uint64_t a1)
{
  uint64_t v2;

  v2 = 1;
  if ((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    return nw_http_client_bottom_stalled(*(_QWORD *)(a1 + 40)) ^ 1;
  return v2;
}

uint64_t ___ZL54nw_protocol_http_client_bottom_override_http_messagingP30nw_protocol_http_client_bottomP11nw_protocolP20nw_protocol_metadata_block_invoke_2(uint64_t a1, nw_endpoint_t endpoint)
{
  const char *hostname;
  unsigned int port;
  _BOOL8 host_with_numeric_port;
  uint64_t v6;
  NSObject *v8;
  _BOOL4 v9;
  const char *v10;
  const char *v11;
  int v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  _BOOL8 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  hostname = nw_endpoint_get_hostname(endpoint);
  port = nw_endpoint_get_port(*(nw_endpoint_t *)(*(_QWORD *)(a1 + 32) + 120));
  host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(hostname, port);
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6 || (*(_BYTE *)(v6 + 294) & 4) == 0)
  {
    if (gLogDatapath)
    {
      v8 = __nwlog_obj();
      v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
      v6 = *(_QWORD *)(a1 + 32);
      if (v9)
      {
        v10 = (const char *)(v6 + 208);
        if (!v6)
          v10 = "";
        v12 = 136446978;
        v13 = "nw_protocol_http_client_bottom_override_http_messaging_block_invoke_2";
        v14 = 2082;
        v15 = v10;
        v11 = " ";
        if (!v6)
          v11 = "";
        v16 = 2080;
        v17 = v11;
        v18 = 2112;
        v19 = host_with_numeric_port;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%smaking endpoint %@ joinable by http_client_bottom", (uint8_t *)&v12, 0x2Au);
        v6 = *(_QWORD *)(a1 + 32);
      }
    }
  }
  nw_protocol_http_client_bottom_endpoint_joinable(v6, (void *)host_with_numeric_port);
  if (host_with_numeric_port)
    os_release((void *)host_with_numeric_port);
  return 1;
}

void nw_protocol_http_client_bottom_endpoint_joinable(uint64_t a1, void *a2)
{
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
      v8 = "%{public}s called with null http_client_bottom";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_33:
        if (!v5)
          return;
        goto LABEL_34;
      }
      if (!v10)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
      v8 = "%{public}s called with null http_client_bottom, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
      v8 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    }
LABEL_32:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_33;
  }
  if (a2)
  {
    v4 = nw_endpoint_copy_registrar_for_identifier(*(void **)(a1 + 120), *(__int128 **)(a1 + 16), 0);
    nw_protocol_instance_registrar_add_wildcard_edge_for_instance(v4, *(void **)(a1 + 120), a1, a2);
    if (v4)
      os_release(v4);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13))
    goto LABEL_33;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_33;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
    v8 = "%{public}s called with null endpoint";
    goto LABEL_32;
  }
  if (!v13)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_33;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
    v8 = "%{public}s called with null endpoint, backtrace limit exceeded";
    goto LABEL_32;
  }
  v11 = (char *)__nw_create_backtrace_string();
  v6 = __nwlog_obj();
  v7 = type;
  v12 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v12)
      goto LABEL_33;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
    v8 = "%{public}s called with null endpoint, no backtrace";
    goto LABEL_32;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
    v17 = 2082;
    v18 = v11;
    _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5)
LABEL_34:
    free(v5);
}

void ___ZL54nw_protocol_http_client_bottom_override_http_messagingP30nw_protocol_http_client_bottomP11nw_protocolP20nw_protocol_metadata_block_invoke(int a1, uint64_t a2, nw_endpoint_t endpoint)
{
  const char *hostname;
  unsigned int port;
  _BOOL8 host_with_numeric_port;

  hostname = nw_endpoint_get_hostname(endpoint);
  port = nw_endpoint_get_port(*(nw_endpoint_t *)(a2 + 120));
  host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(hostname, port);
  nw_protocol_http_client_bottom_endpoint_joinable(a2, (void *)host_with_numeric_port);
  if (host_with_numeric_port)
    os_release((void *)host_with_numeric_port);
}

double __nw_protocol_http_client_bottom_identifier_block_invoke()
{
  double result;

  strcpy((char *)&nw_protocol_http_client_bottom_identifier::protocol_identifier, "http_client_bottom");
  *(_QWORD *)&result = 0x200000005;
  qword_1EDCE40D0 = 0x200000005;
  return result;
}

BOOL __nw_endpoint_flow_uses_multipath_block_invoke(uint64_t a1, int a2)
{
  _BOOL8 v3;
  _QWORD *v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  char *v10;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  void *v21;
  char v23;
  os_log_type_t type;
  void *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  if (!copyconninfo(a2, -1, &v25))
  {
    v4 = v25;
    v5 = *((_DWORD *)v25 + 7);
    v3 = v5 == 2;
    if (v5 == 2)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(_DWORD *)v25 & 0x500) == 256;
      v6 = (void *)v4[1];
      if (v6)
      {
        free(v6);
        v4[1] = 0;
      }
      v7 = (void *)v4[2];
      if (v7)
      {
        free(v7);
        v4[2] = 0;
      }
      v8 = (void *)v4[4];
      if (!v8)
      {
        v3 = 1;
LABEL_34:
        free(v4);
        return v3;
      }
LABEL_33:
      free(v8);
      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_endpoint_flow_uses_multipath_block_invoke";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_endpoint_flow_uses_multipath_block_invoke";
          v14 = "%{public}s Didn't get a CIAUX_MPTCP";
LABEL_22:
          v18 = v12;
          v19 = v13;
LABEL_23:
          _os_log_impl(&dword_182FBE000, v18, v19, v14, buf, 0xCu);
          goto LABEL_24;
        }
        goto LABEL_24;
      }
      if (!v23)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_endpoint_flow_uses_multipath_block_invoke";
          v14 = "%{public}s Didn't get a CIAUX_MPTCP, backtrace limit exceeded";
          goto LABEL_22;
        }
LABEL_24:

        goto LABEL_25;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v16 = type;
      v17 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (!v17)
          goto LABEL_24;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_endpoint_flow_uses_multipath_block_invoke";
        v14 = "%{public}s Didn't get a CIAUX_MPTCP, no backtrace";
        v18 = v12;
        v19 = v16;
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_endpoint_flow_uses_multipath_block_invoke";
        v28 = 2082;
        v29 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v12, v16, "%{public}s Didn't get a CIAUX_MPTCP, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_25:
    if (v10)
      free(v10);
    v4 = v25;
    if (!v25)
      return 0;
    v20 = (void *)*((_QWORD *)v25 + 1);
    if (v20)
    {
      free(v20);
      v4[1] = 0;
    }
    v21 = (void *)v4[2];
    if (v21)
    {
      free(v21);
      v4[2] = 0;
    }
    v8 = (void *)v4[4];
    if (!v8)
    {
      v3 = 0;
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  return 0;
}

BOOL ___Z44nw_endpoint_flow_get_multipath_subflow_countP27NWConcrete_nw_endpoint_flow_block_invoke(uint64_t a1, int a2)
{
  _BOOL8 v3;
  _QWORD *v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  char *v10;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  void *v21;
  char v23;
  os_log_type_t type;
  void *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  if (!copyconninfo(a2, -1, &v25))
  {
    v4 = v25;
    v5 = *((_DWORD *)v25 + 7);
    v3 = v5 == 2;
    if (v5 == 2)
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = **((_DWORD **)v25 + 4);
      v6 = (void *)v4[1];
      if (v6)
      {
        free(v6);
        v4[1] = 0;
      }
      v7 = (void *)v4[2];
      if (v7)
      {
        free(v7);
        v4[2] = 0;
      }
      v8 = (void *)v4[4];
      if (!v8)
      {
        v3 = 1;
LABEL_34:
        free(v4);
        return v3;
      }
LABEL_33:
      free(v8);
      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_endpoint_flow_get_multipath_subflow_count_block_invoke";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_endpoint_flow_get_multipath_subflow_count_block_invoke";
          v14 = "%{public}s Didn't get a CIAUX_MPTCP";
LABEL_22:
          v18 = v12;
          v19 = v13;
LABEL_23:
          _os_log_impl(&dword_182FBE000, v18, v19, v14, buf, 0xCu);
          goto LABEL_24;
        }
        goto LABEL_24;
      }
      if (!v23)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_endpoint_flow_get_multipath_subflow_count_block_invoke";
          v14 = "%{public}s Didn't get a CIAUX_MPTCP, backtrace limit exceeded";
          goto LABEL_22;
        }
LABEL_24:

        goto LABEL_25;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v16 = type;
      v17 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (!v17)
          goto LABEL_24;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_endpoint_flow_get_multipath_subflow_count_block_invoke";
        v14 = "%{public}s Didn't get a CIAUX_MPTCP, no backtrace";
        v18 = v12;
        v19 = v16;
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_endpoint_flow_get_multipath_subflow_count_block_invoke";
        v28 = 2082;
        v29 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v12, v16, "%{public}s Didn't get a CIAUX_MPTCP, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_25:
    if (v10)
      free(v10);
    v4 = v25;
    if (!v25)
      return 0;
    v20 = (void *)*((_QWORD *)v25 + 1);
    if (v20)
    {
      free(v20);
      v4[1] = 0;
    }
    v21 = (void *)v4[2];
    if (v21)
    {
      free(v21);
      v4[2] = 0;
    }
    v8 = (void *)v4[4];
    if (!v8)
    {
      v3 = 0;
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  return 0;
}

uint64_t ___Z46nw_endpoint_flow_copy_multipath_subflow_countsP27NWConcrete_nw_endpoint_flow_block_invoke(uint64_t a1, int a2)
{
  NSObject *v3;
  id v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  NSObject *v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!copyconninfo(a2, -1, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)))
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 28) == 2)
      return 1;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15))
      goto LABEL_23;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
        v9 = "%{public}s Didn't get a CIAUX_MPTCP";
LABEL_20:
        v13 = v7;
        v14 = v8;
LABEL_21:
        _os_log_impl(&dword_182FBE000, v13, v14, v9, buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v11 = type;
      v12 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v11, "%{public}s Didn't get a CIAUX_MPTCP, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
        v9 = "%{public}s Didn't get a CIAUX_MPTCP, no backtrace";
        v13 = v7;
        v14 = v11;
        goto LABEL_21;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
        v9 = "%{public}s Didn't get a CIAUX_MPTCP, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

LABEL_23:
    if (v6)
      free(v6);
    return 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
    _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s copyconninfo failed", buf, 0xCu);
  }

  return 0;
}

uint64_t ___Z40nw_endpoint_flow_copy_multipath_tcp_infoP27NWConcrete_nw_endpoint_flow_block_invoke(uint64_t a1, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  NSObject *v8;
  int v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  char *backtrace_string;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  unint64_t StatusReg;
  char v26;
  os_log_type_t type;
  void *v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  char *v34;
  char key[8];
  uint64_t v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  if (!copymptcpinfo(a2, &v28))
  {
    v3 = v28;
    if (*((_DWORD *)v28 + 4))
    {
      v4 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        v5 = *(_QWORD *)(v3[1] + 8 * v4);
        if (!v5)
          goto LABEL_6;
        v6 = *(_DWORD **)(v5 + 32);
        *(_QWORD *)key = 0;
        v36 = 0;
        v37 = 0;
        v7 = v6[15];
        if (!v7 || if_indextoname(v7, key))
        {
          xpc_dictionary_set_data(*(xpc_object_t *)(a1 + 32), key, v6, 0x198uLL);
          goto LABEL_5;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          v9 = v6[15];
          *(_DWORD *)buf = 136446466;
          v30 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
          v31 = 1024;
          v32 = v9;
          _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s if_indextoname failed for outif: %d", buf, 0x12u);
        }

        v10 = **(_DWORD **)(StatusReg + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = v11;
        if (v10 == 6)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v30 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
            v31 = 1024;
            v32 = 6;
            _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s if_indextoname %{darwin.errno}d", buf, 0x12u);
          }

          goto LABEL_5;
        }
        *(_DWORD *)buf = 136446466;
        v30 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
        v31 = 1024;
        v32 = v10;
        v13 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v26 = 0;
        if (__nwlog_fault(v13, &type, &v26))
          break;
LABEL_30:
        if (v13)
          goto LABEL_31;
LABEL_5:
        v3 = v28;
LABEL_6:
        if (++v4 >= (unint64_t)*((unsigned int *)v3 + 4))
          goto LABEL_37;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v15 = type;
        if (!os_log_type_enabled(v14, type))
        {
LABEL_29:

          goto LABEL_30;
        }
        *(_DWORD *)buf = 136446466;
        v30 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
        v31 = 1024;
        v32 = v10;
        v16 = v14;
        v17 = v15;
        v18 = "%{public}s if_indextoname %{darwin.errno}d";
      }
      else
      {
        if (v26)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v20 = (id)gLogObj;
          v21 = type;
          v22 = os_log_type_enabled(v20, type);
          if (backtrace_string)
          {
            if (v22)
            {
              *(_DWORD *)buf = 136446722;
              v30 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
              v31 = 1024;
              v32 = v10;
              v33 = 2082;
              v34 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s if_indextoname %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(backtrace_string);
            if (!v13)
              goto LABEL_5;
          }
          else
          {
            if (v22)
            {
              *(_DWORD *)buf = 136446466;
              v30 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
              v31 = 1024;
              v32 = v10;
              _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s if_indextoname %{darwin.errno}d, no backtrace", buf, 0x12u);
            }

            if (!v13)
              goto LABEL_5;
          }
LABEL_31:
          free(v13);
          goto LABEL_5;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v23 = type;
        if (!os_log_type_enabled(v14, type))
          goto LABEL_29;
        *(_DWORD *)buf = 136446466;
        v30 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
        v31 = 1024;
        v32 = v10;
        v16 = v14;
        v17 = v23;
        v18 = "%{public}s if_indextoname %{darwin.errno}d, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0x12u);
      goto LABEL_29;
    }
LABEL_37:
    freemptcpinfo(v3);
  }
  return 1;
}

id nw_connection_copy_proxy_settings(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  void *v3;
  id *v4;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[4];
  os_unfair_lock_s *v16;
  _BYTE *v17;
  char v18;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v21 = __Block_byref_object_copy__22923;
    v22 = __Block_byref_object_dispose__22924;
    v23 = 0;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_copy_proxy_settings_block_invoke;
    v15[3] = &unk_1E14ACE40;
    v16 = v1;
    v17 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_proxy_settings_block_invoke((uint64_t)v15);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(void **)(*(_QWORD *)&buf[8] + 40);
    if (v3)
    {
      v4 = v3;
      v5 = v4[23];

    }
    else
    {
      v5 = 0;
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_copy_proxy_settings";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v8, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_proxy_settings";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_copy_proxy_settings";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_proxy_settings";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_proxy_settings";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

uint64_t __Block_byref_object_copy__22923(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22924(uint64_t a1)
{

}

void __nw_connection_copy_proxy_settings_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  int v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (void *)nw_endpoint_handler_copy_connected_path(*(void **)(*(_QWORD *)(a1 + 32) + 144));
  v3 = v2;
  if (v2)
  {
    v4 = v2;
    v5 = v4[2];

    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (v8)
      {
        if (!nw_path_parameters_get_logging_disabled(*(_QWORD *)(v8 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v9 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
            goto LABEL_16;
          v10 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          v14 = 136446466;
          v15 = "nw_connection_copy_proxy_settings_block_invoke";
          v16 = 1024;
          v17 = v10;
          v11 = "%{public}s [C%u] has no connected parameters";
LABEL_15:
          _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v14, 0x12u);
LABEL_16:

        }
      }
    }
  }
  else
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (v12 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v12 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v9 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      v13 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      v14 = 136446466;
      v15 = "nw_connection_copy_proxy_settings_block_invoke";
      v16 = 1024;
      v17 = v13;
      v11 = "%{public}s [C%u] has no connected path";
      goto LABEL_15;
    }
  }

}

void nw_mem_region_release(uint64_t a1)
{
  int v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  vm_map_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  _BYTE v30[30];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 4) - 1;
  *(_DWORD *)(a1 + 4) = v1;
  if (!v1)
  {
    if (gLogDatapath)
    {
      v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v28 = "nw_mem_region_destroy";
        v29 = 2082;
        *(_QWORD *)v30 = a1 + 160;
        *(_WORD *)&v30[8] = 2048;
        *(_QWORD *)&v30[10] = a1;
        _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s \"%{public}s\": nwr %p", buf, 0x20u);
      }
    }
    if (*(_QWORD *)(a1 + 16))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      v3 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 136446978;
      v28 = "nw_mem_region_destroy";
      v29 = 2082;
      *(_QWORD *)v30 = a1 + 160;
      *(_WORD *)&v30[8] = 2048;
      *(_QWORD *)&v30[10] = a1;
      *(_WORD *)&v30[18] = 2048;
      *(_QWORD *)&v30[20] = v3;
      v4 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v4))
      {
LABEL_42:
        __break(1u);
        return;
      }
      free(v4);
    }
    if (*(_QWORD *)(a1 + 144) || *(_QWORD *)(a1 + 152))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
      v5 = *(_QWORD *)(a1 + 144);
      v6 = *(_QWORD **)(a1 + 152);
      if (v5)
      {
        *(_QWORD *)(v5 + 152) = v6;
        v6 = *(_QWORD **)(a1 + 152);
      }
      else
      {
        qword_1ECD84A48 = *(_QWORD *)(a1 + 152);
      }
      *v6 = v5;
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
    }
    if (gLogDatapath)
    {
      v26 = __nwlog_obj();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_mem_region_depopulate";
        v29 = 2082;
        *(_QWORD *)v30 = a1 + 160;
        _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s \"%{public}s\"", buf, 0x16u);
      }
    }
    v7 = *(_QWORD *)(a1 + 368);
    if (v7)
    {
      v8 = (vm_map_t *)MEMORY[0x1E0C83DA0];
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)v7;
          if (mach_vm_deallocate(*v8, *(_QWORD *)(v7 + 24), *(_QWORD *)(a1 + 88)))
          {
            v13 = __nwlog_obj();
            os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446466;
            v28 = "nw_mem_region_depopulate";
            v29 = 2082;
            *(_QWORD *)v30 = "VERIFY result == 0 failed";
            v14 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v14))
              goto LABEL_42;
            free(v14);
          }
          *(_QWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 32) = 0;
          *(_DWORD *)(v7 + 48) = 1;
          v10 = *(unsigned int *)(v7 + 40);
          nw_segment_freelist_remove((_QWORD *)a1, (uint64_t *)v7, 1);
          v11 = *(unsigned int *)(v7 + 40);
          v12 = *(_QWORD *)(a1 + 304);
          if (gLogDatapath)
          {
            v15 = __nwlog_obj();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              v16 = *(_QWORD *)(v7 + 24);
              v17 = *(_QWORD *)(v7 + 32);
              v18 = *(_DWORD *)(a1 + 240);
              *(_DWORD *)buf = 136447234;
              v28 = "nw_segment_destroy";
              v29 = 1024;
              *(_DWORD *)v30 = v11;
              *(_WORD *)&v30[4] = 2048;
              *(_QWORD *)&v30[6] = v16;
              *(_WORD *)&v30[14] = 2048;
              *(_QWORD *)&v30[16] = v17;
              *(_WORD *)&v30[24] = 1024;
              *(_DWORD *)&v30[26] = v18;
              _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s   [%u] [0x%llx-0x%llx) 0x%X", buf, 0x2Cu);
            }
          }
          *(_QWORD *)(v12 + ((v11 >> 3) & 0x1FFFFFF8)) |= 1 << v11;
          malloc_zone_free((malloc_zone_t *)g_slab_zone, (void *)v7);
          if (((*(_QWORD *)(*(_QWORD *)(a1 + 304) + ((v10 >> 3) & 0x1FFFFFF8)) >> v10) & 1) == 0)
            break;
          v7 = v9;
          if (!v9)
            goto LABEL_26;
        }
        v19 = __nwlog_obj();
        os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446466;
        v28 = "nw_mem_region_depopulate";
        v29 = 2082;
        *(_QWORD *)v30 = "VERIFY bit_test(nwr->nwr_seg_bmap[i / BMAPSZ], i % BMAPSZ) failed";
        v20 = (void *)_os_log_send_and_compose_impl();
        if (__nwlog_abort((uint64_t)v20))
          goto LABEL_42;
        free(v20);
        v7 = v9;
      }
      while (v9);
    }
LABEL_26:
    v21 = *(void **)(a1 + 304);
    if (v21)
    {
      free(v21);
      *(_QWORD *)(a1 + 304) = 0;
      *(_QWORD *)(a1 + 312) = 0;
    }
    v22 = *(void **)(a1 + 360);
    if (v22)
    {
      free(v22);
      *(_QWORD *)(a1 + 360) = 0;
    }
    v23 = *(_QWORD *)(a1 + 392);
    if (v23)
    {
      *(_QWORD *)(a1 + 392) = 0;
      *(_DWORD *)(v23 + 240) &= ~0x80000000;
    }
    v24 = *(NSObject **)(a1 + 272);
    if (v24)
    {
      dispatch_release(v24);
      *(_QWORD *)(a1 + 272) = 0;
    }
    if (v23)
      nw_mem_region_release(v23);
    malloc_zone_free((malloc_zone_t *)g_slab_zone, (void *)a1);
  }
}

void nw_mem_region_stats_dump()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  _QWORD *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
  v0 = (_QWORD *)nw_mem_region_head;
  if (nw_mem_region_head)
  {
    do
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v1 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        v2 = v0[4];
        v3 = v0[5];
        v4 = v0[6];
        v5 = v0[7];
        *(_DWORD *)buf = 136447490;
        v7 = "nw_mem_region_stats_dump";
        v8 = 2082;
        v9 = v0 + 20;
        v10 = 2048;
        v11 = v2;
        v12 = 2048;
        v13 = v4;
        v14 = 2048;
        v15 = v3;
        v16 = 2048;
        v17 = v5;
        _os_log_impl(&dword_182FBE000, v1, OS_LOG_TYPE_INFO, "%{public}s \n\n%{public}s: \n\tNumber of Segments Created %llu\n\tMaximum Segment Used %llu\n\tNumber of Segments Freed %llu\n\tNumber of Segment Alloc Failures %llu", buf, 0x3Eu);
      }
      v0 = (_QWORD *)v0[18];
    }
    while (v0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
}

void sub_18357DED8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18357E178(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18357E33C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18357E3FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18357E638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_device_color(void *a1)
{
  id v1;
  void *v2;
  unsigned int *v3;
  int v4;
  uint64_t v5;
  id v6;
  unsigned int *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  unsigned int *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  unsigned int *v17;
  int v18;
  os_log_type_t v19;
  unsigned int *v20;
  int v21;
  unsigned int *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_device_color";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_device_color";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_device_color";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_device_color";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_device_color";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = (unsigned int *)v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = objc_msgSend(v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_device_color";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_device_color";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_device_color";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_device_color";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_device_color";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  v5 = v3[70];
LABEL_25:

  return v5;
}

void sub_18357EC1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_advertised_route(void *a1)
{
  id v1;
  void *v2;
  unsigned int *v3;
  int v4;
  uint64_t v5;
  id v6;
  unsigned int *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  unsigned int *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  unsigned int *v17;
  int v18;
  os_log_type_t v19;
  unsigned int *v20;
  int v21;
  unsigned int *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_advertised_route";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_advertised_route";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_advertised_route";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_advertised_route";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_advertised_route";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = (unsigned int *)v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = objc_msgSend(v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_advertised_route";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_advertised_route";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_advertised_route";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_advertised_route";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_advertised_route";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  v5 = v3[71];
LABEL_25:

  return v5;
}

void sub_18357F23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18357F90C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_device_color(void *a1, int a2)
{
  id v3;
  void *v4;
  _DWORD *v5;
  int v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  char *v9;
  id v10;
  _DWORD *v11;
  int v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  _DWORD *v16;
  int v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  _DWORD *v21;
  int v22;
  os_log_type_t v23;
  _DWORD *v24;
  int v25;
  _DWORD *v26;
  int v27;
  char *v28;
  void *v29;
  const char *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  uint64_t v37;
  char v38;
  os_log_type_t type;
  _BYTE buf[32];
  os_unfair_lock_s *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_device_color";
    v30 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (__nwlog_fault(v30, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_color";
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        v35 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_set_device_color";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_color";
          _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_color";
          _os_log_impl(&dword_182FBE000, v31, v36, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_41:
    if (!v30)
      goto LABEL_24;
    v28 = (char *)v30;
    goto LABEL_23;
  }
  v5 = v3;
  v6 = objc_msgSend(v5, "type");

  if (v6 == 6)
  {
    v5[70] = a2;
    v7 = v5;
    v8 = v7 + 45;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E14ACFD0;
    v41 = v7;
    v9 = v7;
    os_unfair_lock_lock(v8);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v8);

    goto LABEL_24;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  v11 = v5;
  v12 = objc_msgSend(v11, "type");

  *(_DWORD *)buf = 136446466;
  *(_QWORD *)&buf[4] = "nw_endpoint_set_device_color";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  LODWORD(v37) = 18;
  v13 = (const char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v38 = 0;
  if (!__nwlog_fault(v13, &type, &v38))
    goto LABEL_21;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      v16 = v11;
      v17 = objc_msgSend(v16, "type", buf, v37);

      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_set_device_color";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }
LABEL_20:

LABEL_21:
    if (!v13)
      goto LABEL_24;
    goto LABEL_22;
  }
  if (!v38)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v23 = type;
    if (os_log_type_enabled(v14, type))
    {
      v24 = v11;
      v25 = objc_msgSend(v24, "type", buf, v37);

      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_set_device_color";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v25;
      _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_20;
  }
  v18 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  v19 = type;
  v20 = os_log_type_enabled(v14, type);
  if (!v18)
  {
    if (v20)
    {
      v26 = v11;
      v27 = objc_msgSend(v26, "type", buf, v37);

      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_set_device_color";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
    }
    goto LABEL_20;
  }
  if (v20)
  {
    v21 = v11;
    v22 = objc_msgSend(v21, "type", buf, v37);

    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_device_color";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v22;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v18;
    _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v18);
  if (v13)
  {
LABEL_22:
    v28 = (char *)v13;
LABEL_23:
    free(v28);
  }
LABEL_24:

}

void sub_18357FF40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_advertised_route(void *a1, int a2)
{
  id v3;
  void *v4;
  _DWORD *v5;
  int v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  char *v9;
  id v10;
  _DWORD *v11;
  int v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  _DWORD *v16;
  int v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  _DWORD *v21;
  int v22;
  os_log_type_t v23;
  _DWORD *v24;
  int v25;
  _DWORD *v26;
  int v27;
  char *v28;
  void *v29;
  const char *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  uint64_t v37;
  char v38;
  os_log_type_t type;
  _BYTE buf[32];
  os_unfair_lock_s *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_advertised_route";
    v30 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (__nwlog_fault(v30, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_advertised_route";
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        v35 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_set_advertised_route";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_advertised_route";
          _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_advertised_route";
          _os_log_impl(&dword_182FBE000, v31, v36, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_41:
    if (!v30)
      goto LABEL_24;
    v28 = (char *)v30;
    goto LABEL_23;
  }
  v5 = v3;
  v6 = objc_msgSend(v5, "type");

  if (v6 == 6)
  {
    v5[71] = a2;
    v7 = v5;
    v8 = v7 + 45;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E14ACFD0;
    v41 = v7;
    v9 = v7;
    os_unfair_lock_lock(v8);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v8);

    goto LABEL_24;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  v11 = v5;
  v12 = objc_msgSend(v11, "type");

  *(_DWORD *)buf = 136446466;
  *(_QWORD *)&buf[4] = "nw_endpoint_set_advertised_route";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  LODWORD(v37) = 18;
  v13 = (const char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v38 = 0;
  if (!__nwlog_fault(v13, &type, &v38))
    goto LABEL_21;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      v16 = v11;
      v17 = objc_msgSend(v16, "type", buf, v37);

      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_set_advertised_route";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }
LABEL_20:

LABEL_21:
    if (!v13)
      goto LABEL_24;
    goto LABEL_22;
  }
  if (!v38)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v23 = type;
    if (os_log_type_enabled(v14, type))
    {
      v24 = v11;
      v25 = objc_msgSend(v24, "type", buf, v37);

      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_set_advertised_route";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v25;
      _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_20;
  }
  v18 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  v19 = type;
  v20 = os_log_type_enabled(v14, type);
  if (!v18)
  {
    if (v20)
    {
      v26 = v11;
      v27 = objc_msgSend(v26, "type", buf, v37);

      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_set_advertised_route";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
    }
    goto LABEL_20;
  }
  if (v20)
  {
    v21 = v11;
    v22 = objc_msgSend(v21, "type", buf, v37);

    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_advertised_route";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v22;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v18;
    _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v18);
  if (v13)
  {
LABEL_22:
    v28 = (char *)v13;
LABEL_23:
    free(v28);
  }
LABEL_24:

}

void sub_1835805BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void *nw_endpoint_create_apple_service(const char *a1, const char *a2)
{
  size_t v4;
  NSObject *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  size_t v10;
  char *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  id v14;
  os_log_type_t v15;
  _BOOL8 v16;
  void *v17;
  id v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _BOOL4 v21;
  id v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  void *v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  char v43;
  os_log_type_t v44;
  os_log_type_t type[8];
  uint64_t v46;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_endpoint_create_apple_service";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44))
      goto LABEL_58;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v33 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_182FBE000, v8, v33, "%{public}s called with null apple_id", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v39 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_182FBE000, v8, v39, "%{public}s called with null apple_id, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v35 = type[0];
    v36 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_182FBE000, v8, v35, "%{public}s called with null apple_id, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v48 = "nw_endpoint_create_apple_service";
      v49 = 2082;
      v50 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v35, "%{public}s called with null apple_id, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_93;
  }
  v4 = strlen(a1);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v48 = "nw_endpoint_create_apple_service";
    v49 = 2082;
    v50 = "apple_id";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44))
      goto LABEL_58;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v48 = "nw_endpoint_create_apple_service";
        v49 = 2082;
        v50 = "apple_id";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s invalid empty string %{public}s", buf, 0x16u);
      }
      goto LABEL_57;
    }
    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v19 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v48 = "nw_endpoint_create_apple_service";
        v49 = 2082;
        v50 = "apple_id";
        _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s invalid empty string %{public}s, backtrace limit exceeded", buf, 0x16u);
      }
      goto LABEL_57;
    }
    v11 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    v12 = type[0];
    v13 = os_log_type_enabled(v8, type[0]);
    if (!v11)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v48 = "nw_endpoint_create_apple_service";
        v49 = 2082;
        v50 = "apple_id";
        _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
      }
      goto LABEL_57;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446722;
      v48 = "nw_endpoint_create_apple_service";
      v49 = 2082;
      v50 = "apple_id";
      v51 = 2082;
      v52 = v11;
      _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    goto LABEL_37;
  }
  if (v4 < 0x400)
  {
    if (a2)
    {
      v10 = strlen(a2);
      if (v10)
      {
        if (v10 >= 0x400)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v5 = (id)gLogObj;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            v48 = "nw_endpoint_create_apple_service";
            v49 = 2082;
            v50 = "service";
            v51 = 1024;
            LODWORD(v52) = 1024;
            _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
          }
          goto LABEL_6;
        }
        *(_QWORD *)type = 0;
        v46 = 0;
        uuid_generate_random((unsigned __int8 *)type);
        v16 = -[NWConcrete_nw_application_service_endpoint initWithApplicationService:alias:serviceUUID:deviceName:deviceModel:contactID:]([NWConcrete_nw_application_service_endpoint alloc], a2, a1, (const unsigned __int8 *)type, 0, 0, 0);
        v17 = (void *)v16;
        if (v16)
        {
          v18 = (id)v16;
LABEL_70:

          return v17;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_apple_service";
        v23 = (char *)_os_log_send_and_compose_impl();

        v44 = OS_LOG_TYPE_ERROR;
        v43 = 0;
        if (__nwlog_fault(v23, &v44, &v43))
        {
          if (v44 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v24 = objc_claimAutoreleasedReturnValue();
            v25 = v44;
            if (os_log_type_enabled(v24, v44))
            {
              *(_DWORD *)buf = 136446210;
              v48 = "nw_endpoint_create_apple_service";
              _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed", buf, 0xCu);
            }
          }
          else if (v43)
          {
            v27 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v24 = objc_claimAutoreleasedReturnValue();
            v28 = v44;
            v29 = os_log_type_enabled(v24, v44);
            if (v27)
            {
              if (v29)
              {
                *(_DWORD *)buf = 136446466;
                v48 = "nw_endpoint_create_apple_service";
                v49 = 2082;
                v50 = v27;
                _os_log_impl(&dword_182FBE000, v24, v28, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v27);
              goto LABEL_68;
            }
            if (v29)
            {
              *(_DWORD *)buf = 136446210;
              v48 = "nw_endpoint_create_apple_service";
              _os_log_impl(&dword_182FBE000, v24, v28, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v24 = objc_claimAutoreleasedReturnValue();
            v31 = v44;
            if (os_log_type_enabled(v24, v44))
            {
              *(_DWORD *)buf = 136446210;
              v48 = "nw_endpoint_create_apple_service";
              _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_68:
        if (v23)
          free(v23);
        goto LABEL_70;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      v48 = "nw_endpoint_create_apple_service";
      v49 = 2082;
      v50 = "service";
      v7 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v44 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v7, type, &v44))
        goto LABEL_58;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v15 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v48 = "nw_endpoint_create_apple_service";
          v49 = 2082;
          v50 = "service";
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s invalid empty string %{public}s", buf, 0x16u);
        }
LABEL_57:

        goto LABEL_58;
      }
      if (v44 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v26 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v48 = "nw_endpoint_create_apple_service";
          v49 = 2082;
          v50 = "service";
          _os_log_impl(&dword_182FBE000, v8, v26, "%{public}s invalid empty string %{public}s, backtrace limit exceeded", buf, 0x16u);
        }
        goto LABEL_57;
      }
      v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v20 = type[0];
      v21 = os_log_type_enabled(v8, type[0]);
      if (!v11)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v48 = "nw_endpoint_create_apple_service";
          v49 = 2082;
          v50 = "service";
          _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
        }
        goto LABEL_57;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446722;
        v48 = "nw_endpoint_create_apple_service";
        v49 = 2082;
        v50 = "service";
        v51 = 2082;
        v52 = v11;
        _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
      }
LABEL_37:

      free(v11);
      if (!v7)
        return 0;
      goto LABEL_59;
    }
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_endpoint_create_apple_service";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44))
    {
LABEL_58:
      if (!v7)
        return 0;
LABEL_59:
      free(v7);
      return 0;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v38 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_182FBE000, v8, v38, "%{public}s called with null service", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v42 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_182FBE000, v8, v42, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v40 = type[0];
    v41 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_182FBE000, v8, v40, "%{public}s called with null service, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      v48 = "nw_endpoint_create_apple_service";
      v49 = 2082;
      v50 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v40, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_93:

    free(backtrace_string);
    goto LABEL_58;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v48 = "nw_endpoint_create_apple_service";
    v49 = 2082;
    v50 = "apple_id";
    v51 = 1024;
    LODWORD(v52) = 1024;
    _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
  }
LABEL_6:

  return 0;
}

void *nw_endpoint_create_application_service_internal(const char *a1, const char *a2, const unsigned __int8 *a3, const char *a4, const char *a5, int a6, int a7, const char *a8)
{
  _BOOL8 v10;
  void *v11;
  id v12;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)a1 | (unint64_t)a2)
  {
    v10 = -[NWConcrete_nw_application_service_endpoint initWithApplicationService:alias:serviceUUID:deviceName:deviceModel:contactID:]([NWConcrete_nw_application_service_endpoint alloc], a1, a2, a3, a4, a5, a8);
    v11 = (void *)v10;
    if (v10)
    {
      nw_endpoint_set_device_color((void *)v10, a6);
      nw_endpoint_set_advertised_route(v11, a7);
      v12 = v11;
LABEL_11:

      return v11;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v33 = "nw_endpoint_create_application_service_internal";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v14, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_endpoint_create_application_service_internal";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed", buf, 0xCu);
        }
      }
      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        v19 = type;
        v20 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v33 = "nw_endpoint_create_application_service_internal";
            v34 = 2082;
            v35 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v15, v19, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v14)
            goto LABEL_11;
          goto LABEL_10;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_endpoint_create_application_service_internal";
          _os_log_impl(&dword_182FBE000, v15, v19, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        v21 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_endpoint_create_application_service_internal";
          _os_log_impl(&dword_182FBE000, v15, v21, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v14)
      goto LABEL_11;
LABEL_10:
    free(v14);
    goto LABEL_11;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v33 = "nw_endpoint_create_application_service_internal";
  v23 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v30 = 0;
  if (__nwlog_fault(v23, &type, &v30))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_endpoint_create_application_service_internal";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null Either application service or alias must be specified", buf, 0xCu);
      }
    }
    else if (v30)
    {
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v24, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_endpoint_create_application_service_internal";
          v34 = 2082;
          v35 = v26;
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null Either application service or alias must be specified, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        goto LABEL_41;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_endpoint_create_application_service_internal";
        _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null Either application service or alias must be specified, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_endpoint_create_application_service_internal";
        _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null Either application service or alias must be specified, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_41:
  if (v23)
    free(v23);
  return 0;
}

void sub_1835818E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *nw_endpoint_create_application_service(const char *a1, const unsigned __int8 *a2)
{
  size_t v4;
  NSObject *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL8 v10;
  void *v11;
  id v12;
  char *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  id v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  void *v26;
  os_log_type_t v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  void *v31;
  os_log_type_t v32;
  os_log_type_t v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_endpoint_create_application_service";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v7, &type, &v37))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_182FBE000, v8, v27, "%{public}s called with null application_service", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v37)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_182FBE000, v8, v33, "%{public}s called with null application_service, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v29 = type;
    v30 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_182FBE000, v8, v29, "%{public}s called with null application_service, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_endpoint_create_application_service";
      v41 = 2082;
      v42 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v29, "%{public}s called with null application_service, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_73;
  }
  v4 = strlen(a1);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v40 = "nw_endpoint_create_application_service";
    v41 = 2082;
    v42 = "application_service";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v7, &type, &v37))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446466;
        v40 = "nw_endpoint_create_application_service";
        v41 = 2082;
        v42 = "application_service";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s invalid empty string %{public}s", buf, 0x16u);
      }
    }
    else if (v37)
    {
      v13 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v14 = type;
      v15 = os_log_type_enabled(v8, type);
      if (v13)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446722;
          v40 = "nw_endpoint_create_application_service";
          v41 = 2082;
          v42 = "application_service";
          v43 = 2082;
          v44 = v13;
          _os_log_impl(&dword_182FBE000, v8, v14, "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v13);
        if (!v7)
          return 0;
        goto LABEL_39;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v40 = "nw_endpoint_create_application_service";
        v41 = 2082;
        v42 = "application_service";
        _os_log_impl(&dword_182FBE000, v8, v14, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v20 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446466;
        v40 = "nw_endpoint_create_application_service";
        v41 = 2082;
        v42 = "application_service";
        _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s invalid empty string %{public}s, backtrace limit exceeded", buf, 0x16u);
      }
    }
    goto LABEL_37;
  }
  if (v4 >= 0x400)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v40 = "nw_endpoint_create_application_service";
      v41 = 2082;
      v42 = "application_service";
      v43 = 1024;
      LODWORD(v44) = 1024;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
    }

    return 0;
  }
  if (a2)
  {
    v10 = -[NWConcrete_nw_application_service_endpoint initWithApplicationService:alias:serviceUUID:deviceName:deviceModel:contactID:]([NWConcrete_nw_application_service_endpoint alloc], a1, "alias", a2, 0, 0, 0);
    v11 = (void *)v10;
    if (v10)
    {
      v12 = (id)v10;
LABEL_49:

      return v11;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_endpoint_create_application_service";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (__nwlog_fault(v17, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_endpoint_create_application_service";
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID) alloc/init failed", buf, 0xCu);
        }
      }
      else if (v37)
      {
        v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        v22 = type;
        v23 = os_log_type_enabled(v18, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            v40 = "nw_endpoint_create_application_service";
            v41 = 2082;
            v42 = v21;
            _os_log_impl(&dword_182FBE000, v18, v22, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID) alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v21);
          if (!v17)
            goto LABEL_49;
          goto LABEL_48;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_endpoint_create_application_service";
          _os_log_impl(&dword_182FBE000, v18, v22, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID) alloc/init failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        v24 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_endpoint_create_application_service";
          _os_log_impl(&dword_182FBE000, v18, v24, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID) alloc/init failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v17)
      goto LABEL_49;
LABEL_48:
    free(v17);
    goto LABEL_49;
  }
  __nwlog_obj();
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_endpoint_create_application_service";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v7, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_182FBE000, v8, v32, "%{public}s called with null service_uuid", buf, 0xCu);
      }
LABEL_37:

      goto LABEL_38;
    }
    if (!v37)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_182FBE000, v8, v36, "%{public}s called with null service_uuid, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v34 = type;
    v35 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_182FBE000, v8, v34, "%{public}s called with null service_uuid, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_endpoint_create_application_service";
      v41 = 2082;
      v42 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v34, "%{public}s called with null service_uuid, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_73:

    free(backtrace_string);
  }
LABEL_38:
  if (v7)
LABEL_39:
    free(v7);
  return 0;
}

void *nw_endpoint_create_application_service_with_alias(const char *a1, const char *a2)
{
  size_t v4;
  NSObject *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  size_t v10;
  char *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  id v14;
  os_log_type_t v15;
  _BOOL8 v16;
  void *v17;
  id v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _BOOL4 v21;
  id v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  void *v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  char v43;
  os_log_type_t v44;
  os_log_type_t type[8];
  uint64_t v46;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_endpoint_create_application_service_with_alias";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44))
      goto LABEL_58;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v33 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_182FBE000, v8, v33, "%{public}s called with null application_service", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v39 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_182FBE000, v8, v39, "%{public}s called with null application_service, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v35 = type[0];
    v36 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_182FBE000, v8, v35, "%{public}s called with null application_service, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v48 = "nw_endpoint_create_application_service_with_alias";
      v49 = 2082;
      v50 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v35, "%{public}s called with null application_service, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_93;
  }
  v4 = strlen(a1);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v48 = "nw_endpoint_create_application_service_with_alias";
    v49 = 2082;
    v50 = "application_service";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44))
      goto LABEL_58;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v48 = "nw_endpoint_create_application_service_with_alias";
        v49 = 2082;
        v50 = "application_service";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s invalid empty string %{public}s", buf, 0x16u);
      }
      goto LABEL_57;
    }
    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v19 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v48 = "nw_endpoint_create_application_service_with_alias";
        v49 = 2082;
        v50 = "application_service";
        _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s invalid empty string %{public}s, backtrace limit exceeded", buf, 0x16u);
      }
      goto LABEL_57;
    }
    v11 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    v12 = type[0];
    v13 = os_log_type_enabled(v8, type[0]);
    if (!v11)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v48 = "nw_endpoint_create_application_service_with_alias";
        v49 = 2082;
        v50 = "application_service";
        _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
      }
      goto LABEL_57;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446722;
      v48 = "nw_endpoint_create_application_service_with_alias";
      v49 = 2082;
      v50 = "application_service";
      v51 = 2082;
      v52 = v11;
      _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    goto LABEL_37;
  }
  if (v4 < 0x400)
  {
    if (a2)
    {
      v10 = strlen(a2);
      if (v10)
      {
        if (v10 >= 0x400)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v5 = (id)gLogObj;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            v48 = "nw_endpoint_create_application_service_with_alias";
            v49 = 2082;
            v50 = "alias";
            v51 = 1024;
            LODWORD(v52) = 1024;
            _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
          }
          goto LABEL_6;
        }
        *(_QWORD *)type = 0;
        v46 = 0;
        uuid_generate_random((unsigned __int8 *)type);
        v16 = -[NWConcrete_nw_application_service_endpoint initWithApplicationService:alias:serviceUUID:deviceName:deviceModel:contactID:]([NWConcrete_nw_application_service_endpoint alloc], a1, a2, (const unsigned __int8 *)type, 0, 0, 0);
        v17 = (void *)v16;
        if (v16)
        {
          v18 = (id)v16;
LABEL_70:

          return v17;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_application_service_with_alias";
        v23 = (char *)_os_log_send_and_compose_impl();

        v44 = OS_LOG_TYPE_ERROR;
        v43 = 0;
        if (__nwlog_fault(v23, &v44, &v43))
        {
          if (v44 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v24 = objc_claimAutoreleasedReturnValue();
            v25 = v44;
            if (os_log_type_enabled(v24, v44))
            {
              *(_DWORD *)buf = 136446210;
              v48 = "nw_endpoint_create_application_service_with_alias";
              _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID with alias) alloc/init failed", buf, 0xCu);
            }
          }
          else if (v43)
          {
            v27 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v24 = objc_claimAutoreleasedReturnValue();
            v28 = v44;
            v29 = os_log_type_enabled(v24, v44);
            if (v27)
            {
              if (v29)
              {
                *(_DWORD *)buf = 136446466;
                v48 = "nw_endpoint_create_application_service_with_alias";
                v49 = 2082;
                v50 = v27;
                _os_log_impl(&dword_182FBE000, v24, v28, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID with alias) alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v27);
              goto LABEL_68;
            }
            if (v29)
            {
              *(_DWORD *)buf = 136446210;
              v48 = "nw_endpoint_create_application_service_with_alias";
              _os_log_impl(&dword_182FBE000, v24, v28, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID with alias) alloc/init failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v24 = objc_claimAutoreleasedReturnValue();
            v31 = v44;
            if (os_log_type_enabled(v24, v44))
            {
              *(_DWORD *)buf = 136446210;
              v48 = "nw_endpoint_create_application_service_with_alias";
              _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID with alias) alloc/init failed, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_68:
        if (v23)
          free(v23);
        goto LABEL_70;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      v48 = "nw_endpoint_create_application_service_with_alias";
      v49 = 2082;
      v50 = "alias";
      v7 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v44 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v7, type, &v44))
        goto LABEL_58;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v15 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v48 = "nw_endpoint_create_application_service_with_alias";
          v49 = 2082;
          v50 = "alias";
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s invalid empty string %{public}s", buf, 0x16u);
        }
LABEL_57:

        goto LABEL_58;
      }
      if (v44 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v26 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v48 = "nw_endpoint_create_application_service_with_alias";
          v49 = 2082;
          v50 = "alias";
          _os_log_impl(&dword_182FBE000, v8, v26, "%{public}s invalid empty string %{public}s, backtrace limit exceeded", buf, 0x16u);
        }
        goto LABEL_57;
      }
      v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v20 = type[0];
      v21 = os_log_type_enabled(v8, type[0]);
      if (!v11)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v48 = "nw_endpoint_create_application_service_with_alias";
          v49 = 2082;
          v50 = "alias";
          _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
        }
        goto LABEL_57;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446722;
        v48 = "nw_endpoint_create_application_service_with_alias";
        v49 = 2082;
        v50 = "alias";
        v51 = 2082;
        v52 = v11;
        _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
      }
LABEL_37:

      free(v11);
      if (!v7)
        return 0;
      goto LABEL_59;
    }
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_endpoint_create_application_service_with_alias";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44))
    {
LABEL_58:
      if (!v7)
        return 0;
LABEL_59:
      free(v7);
      return 0;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v38 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_182FBE000, v8, v38, "%{public}s called with null alias", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v42 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_182FBE000, v8, v42, "%{public}s called with null alias, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v40 = type[0];
    v41 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_182FBE000, v8, v40, "%{public}s called with null alias, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      v48 = "nw_endpoint_create_application_service_with_alias";
      v49 = 2082;
      v50 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v40, "%{public}s called with null alias, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_93:

    free(backtrace_string);
    goto LABEL_58;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v48 = "nw_endpoint_create_application_service_with_alias";
    v49 = 2082;
    v50 = "application_service";
    v51 = 1024;
    LODWORD(v52) = 1024;
    _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
  }
LABEL_6:

  return 0;
}

uint64_t nw_endpoint_get_application_service_alias(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  int v18;
  os_log_type_t v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_application_service_alias";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_application_service_alias";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_application_service_alias";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_application_service_alias";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_application_service_alias";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = objc_msgSend(v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_application_service_alias";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_application_service_alias";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_application_service_alias";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_application_service_alias";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_application_service_alias";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  v5 = v3[29];
LABEL_25:

  return v5;
}

void sub_183583694(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_application_service_name(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  int v18;
  os_log_type_t v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_application_service_name";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_application_service_name";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_application_service_name";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_application_service_name";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_application_service_name";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = objc_msgSend(v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_application_service_name";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_application_service_name";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_application_service_name";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_application_service_name";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_application_service_name";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  v5 = v3[30];
LABEL_25:

  return v5;
}

void sub_183583CB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_application_service_name(void *a1, const char *a2)
{
  id v3;
  void *v4;
  id v5;
  int v6;
  _QWORD *v7;
  void *v8;
  char *v9;
  char *v10;
  os_unfair_lock_s *v11;
  char *v12;
  id v13;
  id v14;
  int v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  id v19;
  int v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  id v24;
  int v25;
  os_log_type_t v26;
  id v27;
  int v28;
  id v29;
  int v30;
  char *v31;
  void *v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  void *v36;
  os_log_type_t v37;
  char *backtrace_string;
  os_log_type_t v39;
  _BOOL4 v40;
  NSObject *v41;
  void *v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  os_log_type_t v47;
  uint64_t v48;
  char v49;
  os_log_type_t type;
  _BYTE buf[32];
  char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
    v33 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v33, &type, &v49))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v49)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      v40 = os_log_type_enabled(v34, type);
      if (backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v34, v39, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_64:
        if (!v33)
          goto LABEL_28;
        goto LABEL_65;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_182FBE000, v34, v39, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_182FBE000, v34, v46, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_63:

    goto LABEL_64;
  }
  if (!a2)
  {
    __nwlog_obj();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
    v33 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v33, &type, &v49))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_182FBE000, v34, v37, "%{public}s called with null application_service", buf, 0xCu);
      }
    }
    else if (v49)
    {
      v43 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      v45 = os_log_type_enabled(v34, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v43;
          _os_log_impl(&dword_182FBE000, v34, v44, "%{public}s called with null application_service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        if (!v33)
          goto LABEL_28;
LABEL_65:
        v31 = (char *)v33;
        goto LABEL_27;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_182FBE000, v34, v44, "%{public}s called with null application_service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_182FBE000, v34, v47, "%{public}s called with null application_service, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_63;
  }
  v5 = v3;
  v6 = objc_msgSend(v5, "type");

  if (v6 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v14 = v5;
    v15 = objc_msgSend(v14, "type");

    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v15;
    LODWORD(v48) = 18;
    v16 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (__nwlog_fault(v16, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          v19 = v14;
          v20 = objc_msgSend(v19, "type", buf, v48);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v20;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v49)
      {
        v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v22 = type;
        v23 = os_log_type_enabled(v17, type);
        if (v21)
        {
          if (v23)
          {
            v24 = v14;
            v25 = objc_msgSend(v24, "type", buf, v48);

            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v25;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = v21;
            _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          if (!v16)
            goto LABEL_28;
LABEL_26:
          v31 = (char *)v16;
LABEL_27:
          free(v31);
          goto LABEL_28;
        }
        if (v23)
        {
          v29 = v14;
          v30 = objc_msgSend(v29, "type", buf, v48);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v30;
          _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          v27 = v14;
          v28 = objc_msgSend(v27, "type", buf, v48);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_application_service_name";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v28;
          _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v16)
      goto LABEL_28;
    goto LABEL_26;
  }
  v7 = v5;
  v8 = (void *)v7[30];
  if (v8)
  {
    free(v8);
    v7[30] = 0;
  }
  v9 = strdup(a2);
  if (v9)
    goto LABEL_7;
  __nwlog_obj();
  v41 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "strict_strdup";
  v42 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v42))
  {
    free(v42);
LABEL_7:
    v7[30] = v9;
    v10 = v7;
    v11 = (os_unfair_lock_s *)(v10 + 180);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E14ACFD0;
    v52 = v10;
    v12 = v10;
    os_unfair_lock_lock(v11);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v11);

LABEL_28:
    return;
  }
  __break(1u);
}

void sub_183584600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_endpoint_get_service_identifier(void *a1, _OWORD *a2)
{
  id v3;
  void *v4;
  char *v5;
  int v6;
  id v7;
  char *v8;
  int v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *v13;
  int v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  int v19;
  os_log_type_t v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  char *v25;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_service_identifier";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_service_identifier";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_service_identifier";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_service_identifier";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_service_identifier";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_41:
    if (!v27)
      goto LABEL_24;
    v25 = (char *)v27;
    goto LABEL_23;
  }
  v5 = (char *)v3;
  v6 = objc_msgSend(v5, "type");

  if (v6 == 6)
  {
    *a2 = *(_OWORD *)(v5 + 248);
    goto LABEL_24;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  v8 = v5;
  v9 = objc_msgSend(v8, "type");

  *(_DWORD *)buf = 136446466;
  v38 = "nw_endpoint_get_service_identifier";
  v39 = 1024;
  *(_DWORD *)v40 = v9;
  LODWORD(v34) = 18;
  v10 = (const char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (!__nwlog_fault(v10, &type, &v35))
    goto LABEL_21;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v12 = type;
    if (os_log_type_enabled(v11, type))
    {
      v13 = v8;
      v14 = objc_msgSend(v13, "type", buf, v34);

      *(_DWORD *)buf = 136446466;
      v38 = "nw_endpoint_get_service_identifier";
      v39 = 1024;
      *(_DWORD *)v40 = v14;
      _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }
LABEL_20:

LABEL_21:
    if (!v10)
      goto LABEL_24;
    goto LABEL_22;
  }
  if (!v35)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v20 = type;
    if (os_log_type_enabled(v11, type))
    {
      v21 = v8;
      v22 = objc_msgSend(v21, "type", buf, v34);

      *(_DWORD *)buf = 136446466;
      v38 = "nw_endpoint_get_service_identifier";
      v39 = 1024;
      *(_DWORD *)v40 = v22;
      _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_20;
  }
  v15 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  v16 = type;
  v17 = os_log_type_enabled(v11, type);
  if (!v15)
  {
    if (v17)
    {
      v23 = v8;
      v24 = objc_msgSend(v23, "type", buf, v34);

      *(_DWORD *)buf = 136446466;
      v38 = "nw_endpoint_get_service_identifier";
      v39 = 1024;
      *(_DWORD *)v40 = v24;
      _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
    }
    goto LABEL_20;
  }
  if (v17)
  {
    v18 = v8;
    v19 = objc_msgSend(v18, "type", buf, v34);

    *(_DWORD *)buf = 136446722;
    v38 = "nw_endpoint_get_service_identifier";
    v39 = 1024;
    *(_DWORD *)v40 = v19;
    v40[2] = 2082;
    *(_QWORD *)&v40[3] = v15;
    _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v15);
  if (v10)
  {
LABEL_22:
    v25 = (char *)v10;
LABEL_23:
    free(v25);
  }
LABEL_24:

}

void sub_183584C20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_service_identifier(void *a1, _OWORD *a2)
{
  id v3;
  void *v4;
  char *v5;
  int v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  char *v9;
  id v10;
  char *v11;
  int v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *v16;
  int v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  int v22;
  os_log_type_t v23;
  char *v24;
  int v25;
  char *v26;
  int v27;
  char *v28;
  void *v29;
  const char *v30;
  NSObject *v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  char *backtrace_string;
  os_log_type_t v36;
  _BOOL4 v37;
  char *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  os_log_type_t v42;
  uint64_t v43;
  char v44;
  os_log_type_t type;
  _BYTE buf[32];
  os_unfair_lock_s *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
    v30 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v30, &type, &v44))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      v37 = os_log_type_enabled(v31, type);
      if (backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v31, v36, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_59:
        if (!v30)
          goto LABEL_25;
        goto LABEL_60;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_182FBE000, v31, v36, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_182FBE000, v31, v41, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_58:

    goto LABEL_59;
  }
  if (!a2)
  {
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
    v30 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v30, &type, &v44))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null service_uuid", buf, 0xCu);
      }
    }
    else if (v44)
    {
      v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      v40 = os_log_type_enabled(v31, type);
      if (v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v38;
          _os_log_impl(&dword_182FBE000, v31, v39, "%{public}s called with null service_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v38);
        if (!v30)
          goto LABEL_25;
LABEL_60:
        v28 = (char *)v30;
        goto LABEL_24;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_182FBE000, v31, v39, "%{public}s called with null service_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_182FBE000, v31, v42, "%{public}s called with null service_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_58;
  }
  v5 = (char *)v3;
  v6 = objc_msgSend(v5, "type");

  if (v6 == 6)
  {
    *(_OWORD *)(v5 + 248) = *a2;
    v7 = v5;
    v8 = v7 + 45;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E14ACFD0;
    v47 = v7;
    v9 = v7;
    os_unfair_lock_lock(v8);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v8);

    goto LABEL_25;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  v11 = v5;
  v12 = objc_msgSend(v11, "type");

  *(_DWORD *)buf = 136446466;
  *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  LODWORD(v43) = 18;
  v13 = (const char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if (!__nwlog_fault(v13, &type, &v44))
    goto LABEL_22;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      v16 = v11;
      v17 = objc_msgSend(v16, "type", buf, v43);

      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }
LABEL_21:

LABEL_22:
    if (!v13)
      goto LABEL_25;
    goto LABEL_23;
  }
  if (!v44)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v23 = type;
    if (os_log_type_enabled(v14, type))
    {
      v24 = v11;
      v25 = objc_msgSend(v24, "type", buf, v43);

      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v25;
      _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_21;
  }
  v18 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  v19 = type;
  v20 = os_log_type_enabled(v14, type);
  if (!v18)
  {
    if (v20)
    {
      v26 = v11;
      v27 = objc_msgSend(v26, "type", buf, v43);

      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
    }
    goto LABEL_21;
  }
  if (v20)
  {
    v21 = v11;
    v22 = objc_msgSend(v21, "type", buf, v43);

    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_service_identifier";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v22;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v18;
    _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v18);
  if (v13)
  {
LABEL_23:
    v28 = (char *)v13;
LABEL_24:
    free(v28);
  }
LABEL_25:

}

void sub_1835854A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_device_name(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  int v18;
  os_log_type_t v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_device_name";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_device_name";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_device_name";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_device_name";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_device_name";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = objc_msgSend(v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_device_name";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_device_name";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_device_name";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_device_name";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_device_name";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  v5 = v3[33];
LABEL_25:

  return v5;
}

void sub_183585AC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_device_name(void *a1, const char *a2)
{
  id v3;
  void *v4;
  id v5;
  int v6;
  _QWORD *v7;
  void *v8;
  char *v9;
  char *v10;
  os_unfair_lock_s *v11;
  char *v12;
  id v13;
  id v14;
  int v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  id v19;
  int v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  id v24;
  int v25;
  os_log_type_t v26;
  id v27;
  int v28;
  id v29;
  int v30;
  char *v31;
  void *v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  char *backtrace_string;
  os_log_type_t v37;
  _BOOL4 v38;
  NSObject *v39;
  void *v40;
  os_log_type_t v41;
  uint64_t v42;
  char v43;
  os_log_type_t type;
  _BYTE buf[32];
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_device_name";
    v33 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v33, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_name";
          _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        v38 = os_log_type_enabled(v34, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_set_device_name";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v34, v37, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_name";
          _os_log_impl(&dword_182FBE000, v34, v37, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_name";
          _os_log_impl(&dword_182FBE000, v34, v41, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_48:
    if (!v33)
      goto LABEL_29;
    v31 = (char *)v33;
    goto LABEL_28;
  }
  v5 = v3;
  v6 = objc_msgSend(v5, "type");

  if (v6 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v14 = v5;
    v15 = objc_msgSend(v14, "type");

    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_device_name";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v15;
    LODWORD(v42) = 18;
    v16 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v16, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          v19 = v14;
          v20 = objc_msgSend(v19, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_name";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v20;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v43)
      {
        v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v22 = type;
        v23 = os_log_type_enabled(v17, type);
        if (v21)
        {
          if (v23)
          {
            v24 = v14;
            v25 = objc_msgSend(v24, "type", buf, v42);

            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_endpoint_set_device_name";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v25;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = v21;
            _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          if (!v16)
            goto LABEL_29;
LABEL_27:
          v31 = (char *)v16;
LABEL_28:
          free(v31);
          goto LABEL_29;
        }
        if (v23)
        {
          v29 = v14;
          v30 = objc_msgSend(v29, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_name";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v30;
          _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          v27 = v14;
          v28 = objc_msgSend(v27, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_name";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v28;
          _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v16)
      goto LABEL_29;
    goto LABEL_27;
  }
  v7 = v5;
  v8 = (void *)v7[33];
  if (v8)
  {
    free(v8);
    v7[33] = 0;
  }
  if (!a2)
    goto LABEL_8;
  v9 = strdup(a2);
  if (v9)
  {
LABEL_7:
    v7[33] = v9;
LABEL_8:
    v10 = v7;
    v11 = (os_unfair_lock_s *)(v10 + 180);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E14ACFD0;
    v46 = v10;
    v12 = v10;
    os_unfair_lock_lock(v11);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v11);

LABEL_29:
    return;
  }
  __nwlog_obj();
  v39 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "strict_strdup";
  v40 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v40))
  {
    free(v40);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_18358620C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_device_model(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  int v18;
  os_log_type_t v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_device_model";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_device_model";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_device_model";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_device_model";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_device_model";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = objc_msgSend(v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_device_model";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_device_model";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_device_model";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_device_model";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_device_model";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  v5 = v3[34];
LABEL_25:

  return v5;
}

void sub_18358682C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_device_model(void *a1, const char *a2)
{
  id v3;
  void *v4;
  id v5;
  int v6;
  _QWORD *v7;
  void *v8;
  char *v9;
  char *v10;
  os_unfair_lock_s *v11;
  char *v12;
  id v13;
  id v14;
  int v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  id v19;
  int v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  id v24;
  int v25;
  os_log_type_t v26;
  id v27;
  int v28;
  id v29;
  int v30;
  char *v31;
  void *v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  char *backtrace_string;
  os_log_type_t v37;
  _BOOL4 v38;
  NSObject *v39;
  void *v40;
  os_log_type_t v41;
  uint64_t v42;
  char v43;
  os_log_type_t type;
  _BYTE buf[32];
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_device_model";
    v33 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v33, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_model";
          _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        v38 = os_log_type_enabled(v34, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_set_device_model";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v34, v37, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_model";
          _os_log_impl(&dword_182FBE000, v34, v37, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_model";
          _os_log_impl(&dword_182FBE000, v34, v41, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_48:
    if (!v33)
      goto LABEL_29;
    v31 = (char *)v33;
    goto LABEL_28;
  }
  v5 = v3;
  v6 = objc_msgSend(v5, "type");

  if (v6 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v14 = v5;
    v15 = objc_msgSend(v14, "type");

    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_device_model";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v15;
    LODWORD(v42) = 18;
    v16 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v16, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          v19 = v14;
          v20 = objc_msgSend(v19, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_model";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v20;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v43)
      {
        v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v22 = type;
        v23 = os_log_type_enabled(v17, type);
        if (v21)
        {
          if (v23)
          {
            v24 = v14;
            v25 = objc_msgSend(v24, "type", buf, v42);

            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_endpoint_set_device_model";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v25;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = v21;
            _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          if (!v16)
            goto LABEL_29;
LABEL_27:
          v31 = (char *)v16;
LABEL_28:
          free(v31);
          goto LABEL_29;
        }
        if (v23)
        {
          v29 = v14;
          v30 = objc_msgSend(v29, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_model";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v30;
          _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          v27 = v14;
          v28 = objc_msgSend(v27, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_device_model";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v28;
          _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v16)
      goto LABEL_29;
    goto LABEL_27;
  }
  v7 = v5;
  v8 = (void *)v7[34];
  if (v8)
  {
    free(v8);
    v7[34] = 0;
  }
  if (!a2)
    goto LABEL_8;
  v9 = strdup(a2);
  if (v9)
  {
LABEL_7:
    v7[34] = v9;
LABEL_8:
    v10 = v7;
    v11 = (os_unfair_lock_s *)(v10 + 180);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E14ACFD0;
    v46 = v10;
    v12 = v10;
    os_unfair_lock_lock(v11);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v11);

LABEL_29:
    return;
  }
  __nwlog_obj();
  v39 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "strict_strdup";
  v40 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v40))
  {
    free(v40);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_183586F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_contact_id(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  int v18;
  os_log_type_t v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_contact_id";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_contact_id";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_contact_id";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_contact_id";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_contact_id";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = objc_msgSend(v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_contact_id";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_contact_id";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_contact_id";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_contact_id";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_contact_id";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  v5 = v3[36];
LABEL_25:

  return v5;
}

void sub_183587594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_contact_id(void *a1, const char *a2)
{
  id v3;
  void *v4;
  id v5;
  int v6;
  _QWORD *v7;
  void *v8;
  char *v9;
  char *v10;
  os_unfair_lock_s *v11;
  char *v12;
  id v13;
  id v14;
  int v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  id v19;
  int v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  id v24;
  int v25;
  os_log_type_t v26;
  id v27;
  int v28;
  id v29;
  int v30;
  char *v31;
  void *v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  char *backtrace_string;
  os_log_type_t v37;
  _BOOL4 v38;
  NSObject *v39;
  void *v40;
  os_log_type_t v41;
  uint64_t v42;
  char v43;
  os_log_type_t type;
  _BYTE buf[32];
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_contact_id";
    v33 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v33, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_contact_id";
          _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        v38 = os_log_type_enabled(v34, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_set_contact_id";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v34, v37, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_contact_id";
          _os_log_impl(&dword_182FBE000, v34, v37, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_contact_id";
          _os_log_impl(&dword_182FBE000, v34, v41, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_48:
    if (!v33)
      goto LABEL_29;
    v31 = (char *)v33;
    goto LABEL_28;
  }
  v5 = v3;
  v6 = objc_msgSend(v5, "type");

  if (v6 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v14 = v5;
    v15 = objc_msgSend(v14, "type");

    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_contact_id";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v15;
    LODWORD(v42) = 18;
    v16 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v16, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          v19 = v14;
          v20 = objc_msgSend(v19, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_contact_id";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v20;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v43)
      {
        v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v22 = type;
        v23 = os_log_type_enabled(v17, type);
        if (v21)
        {
          if (v23)
          {
            v24 = v14;
            v25 = objc_msgSend(v24, "type", buf, v42);

            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_endpoint_set_contact_id";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v25;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = v21;
            _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          if (!v16)
            goto LABEL_29;
LABEL_27:
          v31 = (char *)v16;
LABEL_28:
          free(v31);
          goto LABEL_29;
        }
        if (v23)
        {
          v29 = v14;
          v30 = objc_msgSend(v29, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_contact_id";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v30;
          _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          v27 = v14;
          v28 = objc_msgSend(v27, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_contact_id";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v28;
          _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v16)
      goto LABEL_29;
    goto LABEL_27;
  }
  v7 = v5;
  v8 = (void *)v7[36];
  if (v8)
  {
    free(v8);
    v7[36] = 0;
  }
  if (!a2)
    goto LABEL_8;
  v9 = strdup(a2);
  if (v9)
  {
LABEL_7:
    v7[36] = v9;
LABEL_8:
    v10 = v7;
    v11 = (os_unfair_lock_s *)(v10 + 180);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E14ACFD0;
    v46 = v10;
    v12 = v10;
    os_unfair_lock_lock(v11);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v11);

LABEL_29:
    return;
  }
  __nwlog_obj();
  v39 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "strict_strdup";
  v40 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v40))
  {
    free(v40);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_183587CDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void saveAndPostNetworkdSettings(void *a1, void *a2, uint64_t a3)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  char v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  id v18;
  void *v19;
  int v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  double v41;
  NSObject *v42;
  id v43;
  id v44;
  uint64_t v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  int v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t j;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint32_t v70;
  uint32_t v71;
  NSObject *v72;
  uint32_t v73;
  uint32_t v74;
  NSObject *v75;
  uint32_t v76;
  NSObject *v77;
  NSObject *v78;
  char *backtrace_string;
  os_log_type_t v80;
  _BOOL4 v81;
  NSObject *v82;
  os_log_type_t v83;
  _BYTE *v84;
  uint64_t v85;
  void *v86;
  void *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char v93;
  os_log_type_t type[16];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint8_t v98[128];
  _BYTE buf[24];
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  v88 = v5;
  if (v4 == v5 || !v4 || !v5)
  {
    if (v4 == v5)
      goto LABEL_22;
LABEL_7:
    v6 = v4;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_file_path_settings);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v4)
    {
      objc_msgSend(v6, "description");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), &stru_1E14AEB08);
      v10 = objc_claimAutoreleasedReturnValue();

      v11 = objc_msgSend(v6, "writeToFile:atomically:", v8, 1);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v13 = v12;
      if ((v11 & 1) != 0)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "saveNetworkdSettings";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v10;
          v14 = "%{public}s Successfully wrote updated networkd settings %{public}@";
          v15 = v13;
          v16 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
          _os_log_impl(&dword_182FBE000, v15, v16, v14, buf, 0x16u);
        }
      }
      else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "saveNetworkdSettings";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v10;
        v14 = "%{public}s failed to save networkd settings %{public}@ to file";
        v15 = v13;
        v16 = OS_LOG_TYPE_ERROR;
        goto LABEL_18;
      }

LABEL_20:
LABEL_21:

      goto LABEL_22;
    }
    if (!unlink((const char *)objc_msgSend(v7, "UTF8String")))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "saveNetworkdSettings";
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully unlinked networkd settings", buf, 0xCu);
      }
      goto LABEL_20;
    }
    v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "saveNetworkdSettings";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v100) = v17;
    LODWORD(v85) = 28;
    v84 = buf;
    v19 = (void *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v93 = 0;
    if (!__nwlog_fault((const char *)v19, type, &v93))
    {
LABEL_93:
      if (v19)
        free(v19);
      goto LABEL_21;
    }
    v20 = v17;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = (id)gLogObj;
      v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "saveNetworkdSettings";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v8;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v100) = v20;
        v23 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d";
LABEL_90:
        v82 = v21;
        v83 = v22;
LABEL_91:
        _os_log_impl(&dword_182FBE000, v82, v83, v23, buf, 0x1Cu);
      }
    }
    else
    {
      if (v93)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v80 = type[0];
        v81 = os_log_type_enabled(v21, type[0]);
        if (backtrace_string)
        {
          if (v81)
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "saveNetworkdSettings";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v8;
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v100) = v20;
            WORD2(v100) = 2082;
            *(_QWORD *)((char *)&v100 + 6) = backtrace_string;
            _os_log_impl(&dword_182FBE000, v21, v80, "%{public}s unlink(%{public}@) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_93;
        }
        if (!v81)
          goto LABEL_92;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "saveNetworkdSettings";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v8;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v100) = v20;
        v23 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d, no backtrace";
        v82 = v21;
        v83 = v80;
        goto LABEL_91;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = (id)gLogObj;
      v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "saveNetworkdSettings";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v8;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v100) = v20;
        v23 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_90;
      }
    }
LABEL_92:

    goto LABEL_93;
  }
  if ((objc_msgSend(v4, "isEqualToDictionary:", v5) & 1) == 0)
    goto LABEL_7;
LABEL_22:
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_file_path_settings, v84, v85);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  fixFilePermissions(v24);

  v25 = (void *)objc_msgSend(v4, "mutableCopy");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_settings_managed_settings);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "objectForKeyedSubscript:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "removeObjectForKey:", v26);
  v96 = 0u;
  v97 = 0u;
  *(_OWORD *)type = 0u;
  v95 = 0u;
  v28 = v27;
  v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", type, buf, 16);
  if (v29)
  {
    v30 = v29;
    v31 = *(_QWORD *)v95;
    do
    {
      for (i = 0; i != v30; ++i)
      {
        if (*(_QWORD *)v95 != v31)
          objc_enumerationMutation(v28);
        v33 = *(void **)(*(_QWORD *)&type[8] + 8 * i);
        if ((objc_msgSend(v33, "isEqualToString:", v26) & 1) == 0)
        {
          objc_msgSend(v28, "objectForKeyedSubscript:", v33);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "setObject:forKeyedSubscript:", v34, v33);

        }
      }
      v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", type, buf, 16);
    }
    while (v30);
  }

  objc_msgSend(v25, "description");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), &stru_1E14AEB08);
  v36 = objc_claimAutoreleasedReturnValue();

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v37 = (id)gLogObj;
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "saveAndPostNetworkdSettings";
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v36;
    _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Created compoundSettings: %@", buf, 0x16u);
  }
  v86 = (void *)v36;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_libnetcore_debug);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "objectForKeyedSubscript:", v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend(v39, "longLongValue");

  if (v40 == a3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v42 = (id)gLogObj;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "saveAndPostNetworkdSettings";
      _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s skipping OSLog settings update due to no logging changes", buf, 0xCu);
    }

  }
  else
  {
    updateOSLogPlistFromLevel(v40, 0, v41);
  }
  v43 = v4;
  v44 = v25;
  *(_QWORD *)buf = 8;
  *(_QWORD *)&buf[8] = nw_setting_libnetcore_datapath_debug;
  *(_QWORD *)&buf[16] = 16;
  *(_QWORD *)&v100 = nw_setting_tcpconn_disable_simulate_crash;
  *((_QWORD *)&v100 + 1) = 32;
  v101 = nw_setting_boringssl_log_debug;
  v102 = 64;
  v103 = nw_setting_tcp_enable_auto_tfo;
  v104 = 128;
  v105 = nw_setting_disable_dns_xpc;
  v106 = 256;
  v107 = nw_setting_tcpconn_enable_tls_tickets;
  v108 = 512;
  v109 = nw_setting_channel_enable_qos_override;
  v110 = 1024;
  v111 = nw_setting_disable_ddr;
  v112 = 2048;
  v113 = nw_setting_tcpconn_enable_tls_esni;
  v114 = 4096;
  v115 = nw_setting_context_timer_disable_qos_override;
  v116 = 0x2000;
  v117 = nw_setting_tcpconn_enable_tls_experiments;
  v118 = 0x4000;
  v119 = nw_setting_tcpconn_enable_tls_keylog;
  v120 = 0x8000;
  v121 = nw_setting_disable_swift_tls_privacy_proxy;
  v122 = 0x10000;
  v123 = nw_setting_disable_l4s_aqm;
  v125 = 0;
  v124 = 0;
  v45 = 0;
  if (nw_setting_libnetcore_datapath_debug)
  {
    v46 = 1;
    v47 = buf;
    do
    {
      v48 = *(_QWORD *)v47;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "objectForKeyedSubscript:", v49);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = objc_msgSend(v50, "BOOLValue");

      if (v51)
        v52 = v48;
      else
        v52 = 0;
      v45 |= v52;
      objc_msgSend(v44, "removeObjectForKey:", v49);

      v47 = &buf[16 * v46++];
    }
    while (*((_QWORD *)v47 + 1));
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_libnetcore_debug);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "objectForKeyedSubscript:", v53);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = objc_msgSend(v54, "longLongValue");

  v56 = 7;
  if (v55 < 7)
    v56 = v55;
  v57 = v56 & ~(v56 >> 63) | v45;
  objc_msgSend(v44, "removeObjectForKey:", v53);
  objc_msgSend(v44, "removeObjectForKey:", CFSTR("networkd_log_level"));

  if (objc_msgSend(v44, "count"))
  {
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    objc_msgSend(v44, "allKeys");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v89, v98, 16);
    v60 = v43;
    if (v59)
    {
      v61 = v59;
      v62 = 0;
      v63 = *(_QWORD *)v90;
      do
      {
        for (j = 0; j != v61; ++j)
        {
          if (*(_QWORD *)v90 != v63)
            objc_enumerationMutation(v58);
          v65 = *(void **)(*((_QWORD *)&v89 + 1) + 8 * j);
          objc_msgSend(v44, "objectForKeyedSubscript:", v65);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = objc_msgSend(v65, "hash");
          v62 ^= v67 ^ objc_msgSend(v66, "hash");

        }
        v61 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v89, v98, 16);
      }
      while (v61);
      v68 = v62 << 16;
    }
    else
    {
      v68 = 0;
    }

    v57 |= v68;
  }
  else
  {
    v60 = v43;
  }
  if (postSettingsBitmask_sPostedSettingsBitmask != v57)
  {
    v69 = postSettingsBitmask_token;
    if (postSettingsBitmask_token == -1)
    {
      v73 = notify_register_check((const char *)nw_notification_name_settings, &postSettingsBitmask_token);
      if (v73)
      {
        v74 = v73;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v75 = (id)gLogObj;
        if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "postSettingsBitmask";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = nw_notification_name_settings;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v100) = v74;
          _os_log_impl(&dword_182FBE000, v75, OS_LOG_TYPE_ERROR, "%{public}s notify_register_check(%{public}s) failed: %d", buf, 0x1Cu);
        }

LABEL_73:
        v57 = 0;
        postSettingsBitmask_token = -1;
LABEL_74:
        postSettingsBitmask_sPostedSettingsBitmask = v57;
        goto LABEL_75;
      }
      v69 = postSettingsBitmask_token;
      if (postSettingsBitmask_token == -1)
      {
        v57 = 0;
        goto LABEL_74;
      }
    }
    v70 = notify_set_state(v69, v57);
    if (v70)
    {
      v71 = v70;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v72 = (id)gLogObj;
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "postSettingsBitmask";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = nw_notification_name_settings;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&v100 = v57;
        WORD4(v100) = 1024;
        *(_DWORD *)((char *)&v100 + 10) = v71;
        _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_ERROR, "%{public}s notify_set_state for %{public}s %#llx failed: %d", buf, 0x26u);
      }

    }
    else
    {
      v76 = notify_post((const char *)nw_notification_name_settings);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v77 = (id)gLogObj;
      v78 = v77;
      if (!v76)
      {
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "postSettingsBitmask";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = postSettingsBitmask_sPostedSettingsBitmask;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&v100 = v57;
          _os_log_impl(&dword_182FBE000, v78, OS_LOG_TYPE_DEFAULT, "%{public}s successfully changed networkd settings state from %#llx to %#llx", buf, 0x20u);
        }

        goto LABEL_74;
      }
      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "postSettingsBitmask";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = nw_notification_name_settings;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v100) = v76;
        _os_log_impl(&dword_182FBE000, v78, OS_LOG_TYPE_ERROR, "%{public}s notify_post for %{public}s failed: %d", buf, 0x1Cu);
      }

    }
    notify_cancel(postSettingsBitmask_token);
    goto LABEL_73;
  }
LABEL_75:

}

void fixFilePermissions(void *a1)
{
  id v1;
  int v2;
  int v3;
  int v4;
  id v5;
  void *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  dev_t v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  int v16;
  int v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  NSObject *v28;
  os_log_type_t v29;
  NSObject *v30;
  char *v31;
  _BOOL4 v32;
  NSObject *v33;
  os_log_type_t v34;
  char v35;
  os_log_type_t type;
  os_log_type_t v37[4];
  const char *v38;
  __int16 v39;
  _BYTE v40[20];
  __int16 v41;
  _QWORD v42[3];
  stat v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = open((const char *)objc_msgSend(v1, "UTF8String"), 2);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = v2;
    memset(&v43, 0, sizeof(v43));
    if (fstat(v2, &v43))
    {
      v4 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      *(_DWORD *)v37 = 136446978;
      v38 = "fixFilePermissions";
      v39 = 1024;
      *(_DWORD *)v40 = v3;
      *(_WORD *)&v40[4] = 2114;
      *(_QWORD *)&v40[6] = v1;
      *(_WORD *)&v40[14] = 1024;
      *(_DWORD *)&v40[16] = v4;
      v6 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v35 = 0;
      if (__nwlog_fault((const char *)v6, &type, &v35))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v7 = (id)gLogObj;
          v8 = type;
          if (!os_log_type_enabled(v7, type))
            goto LABEL_34;
          *(_DWORD *)v37 = 136446978;
          v38 = "fixFilePermissions";
          v39 = 1024;
          *(_DWORD *)v40 = v3;
          *(_WORD *)&v40[4] = 2114;
          *(_QWORD *)&v40[6] = v1;
          *(_WORD *)&v40[14] = 1024;
          *(_DWORD *)&v40[16] = v4;
          v9 = "%{public}s fstat(%d) on \"%{public}@\" failed %{darwin.errno}d";
LABEL_32:
          v28 = v7;
          v29 = v8;
          goto LABEL_33;
        }
        if (!v35)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v7 = (id)gLogObj;
          v8 = type;
          if (!os_log_type_enabled(v7, type))
            goto LABEL_34;
          *(_DWORD *)v37 = 136446978;
          v38 = "fixFilePermissions";
          v39 = 1024;
          *(_DWORD *)v40 = v3;
          *(_WORD *)&v40[4] = 2114;
          *(_QWORD *)&v40[6] = v1;
          *(_WORD *)&v40[14] = 1024;
          *(_DWORD *)&v40[16] = v4;
          v9 = "%{public}s fstat(%d) on \"%{public}@\" failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_32;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        v23 = type;
        v24 = os_log_type_enabled(v7, type);
        if (!backtrace_string)
        {
          if (!v24)
          {
LABEL_34:

            if (v6)
LABEL_35:
              free(v6);
LABEL_36:
            close(v3);
            goto LABEL_37;
          }
          *(_DWORD *)v37 = 136446978;
          v38 = "fixFilePermissions";
          v39 = 1024;
          *(_DWORD *)v40 = v3;
          *(_WORD *)&v40[4] = 2114;
          *(_QWORD *)&v40[6] = v1;
          *(_WORD *)&v40[14] = 1024;
          *(_DWORD *)&v40[16] = v4;
          v9 = "%{public}s fstat(%d) on \"%{public}@\" failed %{darwin.errno}d, no backtrace";
          v28 = v7;
          v29 = v23;
LABEL_33:
          _os_log_impl(&dword_182FBE000, v28, v29, v9, (uint8_t *)v37, 0x22u);
          goto LABEL_34;
        }
        if (v24)
        {
          *(_DWORD *)v37 = 136447234;
          v38 = "fixFilePermissions";
          v39 = 1024;
          *(_DWORD *)v40 = v3;
          *(_WORD *)&v40[4] = 2114;
          *(_QWORD *)&v40[6] = v1;
          *(_WORD *)&v40[14] = 1024;
          *(_DWORD *)&v40[16] = v4;
          v41 = 2082;
          v42[0] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v23, "%{public}s fstat(%d) on \"%{public}@\" failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)v37, 0x2Cu);
        }

        free(backtrace_string);
      }
LABEL_23:
      if (!v6)
        goto LABEL_36;
      goto LABEL_35;
    }
    v16 = v43.st_mode & 0x1FF;
    if (v16 == 420)
      goto LABEL_36;
    if (!fchmod(v3, 0x1A4u))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = (id)gLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v37 = 136447234;
        v38 = "fixFilePermissions";
        v39 = 2114;
        *(_QWORD *)v40 = v1;
        *(_WORD *)&v40[8] = 1024;
        *(_DWORD *)&v40[10] = v3;
        *(_WORD *)&v40[14] = 1024;
        *(_DWORD *)&v40[16] = v16;
        v41 = 1024;
        LODWORD(v42[0]) = 420;
        _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully changed \"%{public}@\" (fd %d) permissions from %o to %o", (uint8_t *)v37, 0x28u);
      }

      goto LABEL_36;
    }
    v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    *(_DWORD *)v37 = 136447234;
    v38 = "fixFilePermissions";
    v39 = 1024;
    *(_DWORD *)v40 = v3;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&v40[6] = 420;
    *(_WORD *)&v40[10] = 2114;
    *(_QWORD *)&v40[12] = v1;
    v41 = 1024;
    LODWORD(v42[0]) = v17;
    v6 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault((const char *)v6, &type, &v35))
      goto LABEL_23;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_63;
      *(_DWORD *)v37 = 136447234;
      v38 = "fixFilePermissions";
      v39 = 1024;
      *(_DWORD *)v40 = v3;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 420;
      *(_WORD *)&v40[10] = 2114;
      *(_QWORD *)&v40[12] = v1;
      v41 = 1024;
      LODWORD(v42[0]) = v17;
      v21 = "%{public}s fchmod(%d, 0x%x) on \"%{public}@\" failed %{darwin.errno}d";
    }
    else if (v35)
    {
      v31 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v20 = type;
      v32 = os_log_type_enabled(v19, type);
      if (v31)
      {
        if (v32)
        {
          *(_DWORD *)v37 = 136447490;
          v38 = "fixFilePermissions";
          v39 = 1024;
          *(_DWORD *)v40 = v3;
          *(_WORD *)&v40[4] = 1024;
          *(_DWORD *)&v40[6] = 420;
          *(_WORD *)&v40[10] = 2114;
          *(_QWORD *)&v40[12] = v1;
          v41 = 1024;
          LODWORD(v42[0]) = v17;
          WORD2(v42[0]) = 2082;
          *(_QWORD *)((char *)v42 + 6) = v31;
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s fchmod(%d, 0x%x) on \"%{public}@\" failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)v37, 0x32u);
        }

        free(v31);
        if (!v6)
          goto LABEL_36;
        goto LABEL_35;
      }
      if (!v32)
      {
LABEL_63:

        if (!v6)
          goto LABEL_36;
        goto LABEL_35;
      }
      *(_DWORD *)v37 = 136447234;
      v38 = "fixFilePermissions";
      v39 = 1024;
      *(_DWORD *)v40 = v3;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 420;
      *(_WORD *)&v40[10] = 2114;
      *(_QWORD *)&v40[12] = v1;
      v41 = 1024;
      LODWORD(v42[0]) = v17;
      v21 = "%{public}s fchmod(%d, 0x%x) on \"%{public}@\" failed %{darwin.errno}d, no backtrace";
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_63;
      *(_DWORD *)v37 = 136447234;
      v38 = "fixFilePermissions";
      v39 = 1024;
      *(_DWORD *)v40 = v3;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 420;
      *(_WORD *)&v40[10] = 2114;
      *(_QWORD *)&v40[12] = v1;
      v41 = 1024;
      LODWORD(v42[0]) = v17;
      v21 = "%{public}s fchmod(%d, 0x%x) on \"%{public}@\" failed %{darwin.errno}d, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v19, v20, v21, (uint8_t *)v37, 0x28u);
    goto LABEL_63;
  }
  v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (v10 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v43.st_dev = 136446722;
    *(_QWORD *)&v43.st_mode = "fixFilePermissions";
    WORD2(v43.st_ino) = 2114;
    *(__darwin_ino64_t *)((char *)&v43.st_ino + 6) = (__darwin_ino64_t)v1;
    HIWORD(v43.st_gid) = 1024;
    v43.st_rdev = v10;
    v12 = (char *)_os_log_send_and_compose_impl();

    v37[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v12, v37, &type))
      goto LABEL_54;
    if (v37[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = v37[0];
      if (os_log_type_enabled(v13, v37[0]))
      {
        v43.st_dev = 136446722;
        *(_QWORD *)&v43.st_mode = "fixFilePermissions";
        WORD2(v43.st_ino) = 2114;
        *(__darwin_ino64_t *)((char *)&v43.st_ino + 6) = (__darwin_ino64_t)v1;
        HIWORD(v43.st_gid) = 1024;
        v43.st_rdev = v10;
        v15 = "%{public}s open(%{public}@, O_RDWR) failed %{darwin.errno}d";
LABEL_51:
        v33 = v13;
        v34 = v14;
LABEL_52:
        _os_log_impl(&dword_182FBE000, v33, v34, v15, (uint8_t *)&v43, 0x1Cu);
      }
    }
    else
    {
      if (type)
      {
        v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v26 = v37[0];
        v27 = os_log_type_enabled(v13, v37[0]);
        if (v25)
        {
          if (v27)
          {
            v43.st_dev = 136446978;
            *(_QWORD *)&v43.st_mode = "fixFilePermissions";
            WORD2(v43.st_ino) = 2114;
            *(__darwin_ino64_t *)((char *)&v43.st_ino + 6) = (__darwin_ino64_t)v1;
            HIWORD(v43.st_gid) = 1024;
            v43.st_rdev = v10;
            *((_WORD *)&v43.st_rdev + 2) = 2082;
            *(_QWORD *)((char *)&v43.st_rdev + 6) = v25;
            _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s open(%{public}@, O_RDWR) failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&v43, 0x26u);
          }

          free(v25);
          goto LABEL_54;
        }
        if (!v27)
          goto LABEL_53;
        v43.st_dev = 136446722;
        *(_QWORD *)&v43.st_mode = "fixFilePermissions";
        WORD2(v43.st_ino) = 2114;
        *(__darwin_ino64_t *)((char *)&v43.st_ino + 6) = (__darwin_ino64_t)v1;
        HIWORD(v43.st_gid) = 1024;
        v43.st_rdev = v10;
        v15 = "%{public}s open(%{public}@, O_RDWR) failed %{darwin.errno}d, no backtrace";
        v33 = v13;
        v34 = v26;
        goto LABEL_52;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = v37[0];
      if (os_log_type_enabled(v13, v37[0]))
      {
        v43.st_dev = 136446722;
        *(_QWORD *)&v43.st_mode = "fixFilePermissions";
        WORD2(v43.st_ino) = 2114;
        *(__darwin_ino64_t *)((char *)&v43.st_ino + 6) = (__darwin_ino64_t)v1;
        HIWORD(v43.st_gid) = 1024;
        v43.st_rdev = v10;
        v15 = "%{public}s open(%{public}@, O_RDWR) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_51;
      }
    }
LABEL_53:

LABEL_54:
    if (v12)
      free(v12);
  }
LABEL_37:

}

void updateOSLogPlistFromLevel(uint64_t a1, char a2, double a3)
{
  NSObject *v3;
  id v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  id v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0)
  {
    v27 = 0uLL;
    getLastUpdateModTimeFromPath((const char *)nw_file_path_settings, (__darwin_time_t *)&v27 + 1, (uint64_t *)&v27);
    v26 = 0uLL;
    v5 = objc_alloc(MEMORY[0x1E0CB3940]);
    v6 = (void *)objc_msgSend(v5, "initWithFormat:", CFSTR("/Library/Preferences/Logging/Subsystems/%s.plist"), nw_oslog_subsystem);
    getLastUpdateModTimeFromPath((const char *)objc_msgSend(v6, "UTF8String"), (__darwin_time_t *)&v26 + 1, (uint64_t *)&v26);

    v7 = v27;
    if (v27 != 0)
    {
      v8 = v26;
      if (v26 != 0
        && (*((uint64_t *)&v27 + 1) < *((uint64_t *)&v26 + 1)
         || *((_QWORD *)&v27 + 1) == *((_QWORD *)&v26 + 1) && (uint64_t)v27 < (uint64_t)v26))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136447234;
          v29 = "updateOSLogPlistFromLevel";
          v30 = 2048;
          v31 = (const char *)*((_QWORD *)&v7 + 1);
          v32 = 2048;
          v33 = v7;
          v34 = 2048;
          v35 = *((_QWORD *)&v8 + 1);
          v36 = 2048;
          v37 = v8;
          v10 = "%{public}s skipping OSLog settings update %ld.%09ld < %ld.%09ld";
          v11 = v9;
          v12 = OS_LOG_TYPE_DEFAULT;
          v13 = 52;
LABEL_26:
          _os_log_impl(&dword_182FBE000, v11, v12, v10, buf, v13);
          goto LABEL_31;
        }
        goto LABEL_31;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136447234;
      v29 = "updateOSLogPlistFromLevel";
      v30 = 2048;
      v31 = (const char *)*((_QWORD *)&v7 + 1);
      v32 = 2048;
      v33 = v7;
      v34 = 2048;
      v35 = *((_QWORD *)&v26 + 1);
      v36 = 2048;
      v37 = v26;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s performing OSLog settings update %ld.%09ld, %ld.%09ld", buf, 0x34u);
    }

  }
  gotLoadHelper_x19__OBJC_CLASS___OSLogPreferencesSubsystem(a3);
  if (objc_opt_class())
  {
    v14 = objc_alloc(v3[214].isa);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_oslog_subsystem);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v14, "initWithName:", v15);

    if (v9)
    {
      v16 = a1 <= 6;
      if (a1 <= 6)
        v17 = 1;
      else
        v17 = 4;
      if (v16)
        v18 = "Inherit";
      else
        v18 = "Debug";
      -[NSObject setEnabledLevel:](v9, "setEnabledLevel:", v17);
      -[NSObject setPersistedLevel:](v9, "setPersistedLevel:", v17);
      if (-[NSObject enabledLevel](v9, "enabledLevel") == v17
        && -[NSObject persistedLevel](v9, "persistedLevel") == v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v29 = "updateOSLogPlistFromLevel";
          v30 = 2082;
          v31 = v18;
          v20 = "%{public}s successfully set new logging level to %{public}s";
          v21 = v19;
          v22 = OS_LOG_TYPE_DEFAULT;
          v23 = 22;
LABEL_29:
          _os_log_impl(&dword_182FBE000, v21, v22, v20, buf, v23);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          v24 = -[NSObject enabledLevel](v9, "enabledLevel");
          v25 = -[NSObject persistedLevel](v9, "persistedLevel");
          *(_DWORD *)buf = 136446978;
          v29 = "updateOSLogPlistFromLevel";
          v30 = 2082;
          v31 = v18;
          v32 = 2048;
          v33 = v24;
          v34 = 2048;
          v35 = v25;
          v20 = "%{public}s failed to set new logging level to %{public}s (%ld,%ld)";
          v21 = v19;
          v22 = OS_LOG_TYPE_ERROR;
          v23 = 42;
          goto LABEL_29;
        }
      }

      goto LABEL_31;
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (id)gLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v29 = "updateOSLogPlistFromLevel";
    v10 = "%{public}s failed to allocate an OSLogPreferencesSubsystem";
    v11 = v9;
    v12 = OS_LOG_TYPE_ERROR;
    v13 = 12;
    goto LABEL_26;
  }
LABEL_31:

}

void getLastUpdateModTimeFromPath(const char *a1, __darwin_time_t *a2, uint64_t *a3)
{
  int v6;
  id v7;
  void *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  uint64_t tv_nsec;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  NSObject *v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  stat v20;
  int buf;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  memset(&v20, 0, sizeof(v20));
  if (!stat(a1, &v20))
  {
    tv_nsec = v20.st_mtimespec.tv_nsec;
    *a2 = v20.st_mtimespec.tv_sec;
    *a3 = tv_nsec;
    return;
  }
  v6 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (v6 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    buf = 136446722;
    v22 = "getLastUpdateModTimeFromPath";
    v23 = 2082;
    v24 = a1;
    v25 = 1024;
    v26 = v6;
    v8 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault((const char *)v8, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_20;
        buf = 136446722;
        v22 = "getLastUpdateModTimeFromPath";
        v23 = 2082;
        v24 = a1;
        v25 = 1024;
        v26 = v6;
        v11 = "%{public}s stat(%{public}s) failed %{darwin.errno}d";
LABEL_18:
        v16 = v9;
        v17 = v10;
        goto LABEL_19;
      }
      if (!v18)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_20;
        buf = 136446722;
        v22 = "getLastUpdateModTimeFromPath";
        v23 = 2082;
        v24 = a1;
        v25 = 1024;
        v26 = v6;
        v11 = "%{public}s stat(%{public}s) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_18;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_20:

          if (!v8)
            return;
LABEL_14:
          free(v8);
          return;
        }
        buf = 136446722;
        v22 = "getLastUpdateModTimeFromPath";
        v23 = 2082;
        v24 = a1;
        v25 = 1024;
        v26 = v6;
        v11 = "%{public}s stat(%{public}s) failed %{darwin.errno}d, no backtrace";
        v16 = v9;
        v17 = v14;
LABEL_19:
        _os_log_impl(&dword_182FBE000, v16, v17, v11, (uint8_t *)&buf, 0x1Cu);
        goto LABEL_20;
      }
      if (v15)
      {
        buf = 136446978;
        v22 = "getLastUpdateModTimeFromPath";
        v23 = 2082;
        v24 = a1;
        v25 = 1024;
        v26 = v6;
        v27 = 2082;
        v28 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s stat(%{public}s) failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x26u);
      }

      free(backtrace_string);
    }
    if (!v8)
      return;
    goto LABEL_14;
  }
}

void __handleEventForManagedNetworkSettings_block_invoke(uint64_t a1)
{
  id v2;

  v2 = +[ManagedNetworkSettings sharedMNS](ManagedNetworkSettings, "sharedMNS");
  objc_msgSend(v2, "handleEvent:", *(_QWORD *)(a1 + 32));

}

uint64_t nwphShouldRunCheck(void *a1, void *a2, void *a3, int a4, double a5, double a6)
{
  id v11;
  id v12;
  id v13;
  double v14;
  double v15;
  NSObject *v16;
  id v17;
  xpc_object_t v18;
  id v19;
  double v20;
  uint64_t v21;
  int64_t v22;
  double v23;
  double v24;
  int64_t v25;
  void *v26;
  id v27;
  void *v28;
  NSObject *v29;
  os_log_type_t v30;
  const char *v31;
  NSObject *v32;
  double v33;
  id v34;
  double v35;
  int64_t v36;
  NSObject *v37;
  const char *v38;
  double v39;
  double v40;
  const char *v41;
  const char *v42;
  char *backtrace_string;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  double v47;
  const char *v48;
  uint64_t v49;
  id v51;
  id v52;
  id v53;
  char v54;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  int64_t v61;
  __int16 v62;
  int64_t v63;
  __int16 v64;
  double v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a3;
  if (v12
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && (objc_msgSend(v11, "timeIntervalSinceDate:", v12), v14 < a5))
  {
    v40 = v14;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v57 = "nwphShouldRunCheck";
      v58 = 2080;
      v41 = "settings";
      *(_DWORD *)buf = 136447234;
      if (a4)
        v41 = "asset";
      v59 = (void *)v41;
      v60 = 2114;
      v61 = (int64_t)v12;
      v62 = 2048;
      v63 = *(_QWORD *)&v40;
      v64 = 2048;
      v65 = a5;
      v42 = "%{public}s last %s attempt was at %{public}@ (%f < %f), skipping";
      goto LABEL_37;
    }
  }
  else
  {
    if (!v13
      || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
      || (objc_msgSend(v11, "timeIntervalSinceDate:", v13), v15 >= a6))
    {
      v16 = v12;
      v17 = v13;
      v18 = xpc_dictionary_create(0, 0, 0);
      if (v18)
      {
        v52 = v11;
        v19 = objc_alloc_init(MEMORY[0x1E0C99D68]);
        objc_msgSend(v19, "timeIntervalSince1970");
        v21 = (uint64_t)v20;
        v22 = (uint64_t)v20 % 86400;
        xpc_dictionary_set_int64(v18, "time_of_day", v22);
        -[NSObject timeIntervalSince1970](v16, "timeIntervalSince1970");
        v51 = v13;
        if (v23 <= 0.0)
        {
          v25 = -1;
        }
        else
        {
          -[NSObject timeIntervalSince1970](v16, "timeIntervalSince1970");
          v25 = v21 - (uint64_t)v24;
        }
        v32 = v16;
        xpc_dictionary_set_int64(v18, "seconds_since_last_attempt", v25);
        objc_msgSend(v17, "timeIntervalSince1970");
        v34 = v17;
        if (v33 <= 0.0)
        {
          *(double *)&v36 = NAN;
        }
        else
        {
          objc_msgSend(v17, "timeIntervalSince1970");
          v36 = v21 - (uint64_t)v35;
        }
        xpc_dictionary_set_int64(v18, "seconds_since_last_success", v36);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v37 = (id)gLogObj;
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          v38 = "settings configuration";
          *(_DWORD *)buf = 136447234;
          v57 = "nwphReportCheck";
          v58 = 2080;
          if (a4)
            v38 = "asset check";
          v59 = (void *)v38;
          v60 = 2048;
          v61 = v22;
          v62 = 2048;
          v63 = v25;
          v64 = 2048;
          v65 = *(double *)&v36;
          _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %s event: (time_of_day: %lld, seconds_since_last_attempt: %lld, seconds_since_last_success: %lld)", buf, 0x34u);
        }

        analytics_send_event_delayInitStub(v39);
        v26 = v34;
        v16 = v32;
        v13 = v51;
        v11 = v52;
        goto LABEL_45;
      }
      v26 = v17;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v27 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v57 = "nwphReportCheck";
      v28 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v54 = 0;
      if (!__nwlog_fault((const char *)v28, &type, &v54))
      {
LABEL_43:
        if (!v28)
        {
LABEL_45:

          v49 = 1;
          goto LABEL_46;
        }
LABEL_44:
        free(v28);
        goto LABEL_45;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = (id)gLogObj;
        v30 = type;
        if (!os_log_type_enabled(v29, type))
        {
LABEL_42:

          goto LABEL_43;
        }
        *(_DWORD *)buf = 136446210;
        v57 = "nwphReportCheck";
        v31 = "%{public}s xpc_dictionary_create failed";
      }
      else
      {
        if (v54)
        {
          v53 = v11;
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v44 = (id)gLogObj;
          v45 = type;
          v46 = os_log_type_enabled(v44, type);
          if (backtrace_string)
          {
            if (v46)
            {
              *(_DWORD *)buf = 136446466;
              v57 = "nwphReportCheck";
              v58 = 2082;
              v59 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            v11 = v53;
            if (!v28)
              goto LABEL_45;
          }
          else
          {
            if (v46)
            {
              *(_DWORD *)buf = 136446210;
              v57 = "nwphReportCheck";
              _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
            }

            v11 = v53;
            if (!v28)
              goto LABEL_45;
          }
          goto LABEL_44;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = (id)gLogObj;
        v30 = type;
        if (!os_log_type_enabled(v29, type))
          goto LABEL_42;
        *(_DWORD *)buf = 136446210;
        v57 = "nwphReportCheck";
        v31 = "%{public}s xpc_dictionary_create failed, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v29, v30, v31, buf, 0xCu);
      goto LABEL_42;
    }
    v47 = v15;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v57 = "nwphShouldRunCheck";
      v58 = 2080;
      v48 = "settings";
      *(_DWORD *)buf = 136447234;
      if (a4)
        v48 = "asset";
      v59 = (void *)v48;
      v60 = 2114;
      v61 = (int64_t)v13;
      v62 = 2048;
      v63 = *(_QWORD *)&v47;
      v64 = 2048;
      v65 = a6;
      v42 = "%{public}s last %s success was at %{public}@ (%f < %f), skipping";
LABEL_37:
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, v42, buf, 0x34u);
    }
  }
  v49 = 0;
LABEL_46:

  return v49;
}

void __nwphCheckMobileAsset_block_invoke(uint64_t a1, unint64_t a2)
{
  __CFString *v4;
  NSObject *v5;
  double v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2 < 0x24 && ((0x800003FFFuLL >> a2) & 1) != 0)
    v4 = off_1E149D640[a2];
  else
    v4 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Invalid[%lld]"), a2);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v15 = "nwphCheckMobileAsset_block_invoke";
    v16 = 2114;
    v17 = v4;
    _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s Got the download catalog reply %{public}@", buf, 0x16u);
  }

  if (!a2)
  {
    gotLoadHelper_x8__OBJC_CLASS___MAAssetQuery(v6);
    v8 = (void *)objc_msgSend(objc_alloc(*(Class *)(v7 + 88)), "initWithType:", CFSTR("com.apple.MobileAsset.network.networknomicon"));
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nwphCheckMobileAsset_block_invoke";
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s querying mobile asset metadata", buf, 0xCu);
    }

    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __nwphCheckMobileAsset_block_invoke_251;
    v11[3] = &unk_1E149D518;
    v12 = v8;
    v13 = *(id *)(a1 + 32);
    v10 = v8;
    objc_msgSend(v10, "queryMetaData:", v11);

  }
}

void __nwphConfigureRemoteSettings_block_invoke()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  double v7;
  char v8;
  void *v9;
  _QWORD *v10;
  id v11;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  NSObject *v16;
  char *backtrace_string;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  const char *v21;
  void *v22;
  NSObject *v23;
  _BOOL4 v24;
  uint32_t int64_with_default;
  uint32_t v26;
  NSObject *v27;
  uint32_t v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  _BOOL4 quic_l4s_enabled;
  uint32_t v34;
  uint32_t v35;
  NSObject *v36;
  _QWORD *v37;
  uint32_t v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  NSObject *v43;
  _BOOL4 tcp_accurate_ecn_enabled;
  uint32_t v45;
  uint32_t v46;
  NSObject *v47;
  uint32_t v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  NSObject *v53;
  _BOOL4 tcp_l4s_enabled;
  uint32_t v55;
  NSObject *v56;
  uint32_t v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  uint32_t v61;
  void *v62;
  NSObject *v63;
  _BOOL4 v64;
  uint32_t v65;
  uint32_t v66;
  NSObject *v67;
  uint32_t v68;
  NSObject *v69;
  void *v70;
  void *v71;
  int64_t v72;
  NSObject *v73;
  const char *v74;
  int64_t v75;
  unint64_t v76;
  __uint64_t v77;
  const __CFString *v78;
  unint64_t v79;
  unint64_t v80;
  NSObject *v81;
  _BOOL4 v82;
  void *v83;
  void *v84;
  NSObject *v85;
  _BOOL8 v86;
  _BOOL8 v87;
  id v88;
  NSObject *v89;
  uint8_t *v90;
  uint64_t v91;
  void *v92;
  uint32_t v93;
  void *v94;
  uint32_t v95;
  void *v96;
  void *v97;
  int64_t int64;
  id v99;
  uint32_t v100;
  uint32_t v101;
  _QWORD block[7];
  char v103;
  os_log_type_t v104;
  uint8_t buf[4];
  const char *v106;
  __int16 v107;
  _BYTE v108[10];
  const __CFString *v109;
  __int16 v110;
  unint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithContentsOfFile:", CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist"));
  v0 = (id)objc_claimAutoreleasedReturnValue();
  if (!v0)
    v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = (void *)MEMORY[0x1E0C99D68];
  v2 = v0;
  objc_msgSend(v1, "date");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("kNWSettingsKeyLastRun"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("kNWSettingsKeyFrequencySeconds"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v6 = objc_msgSend(v5, "longLongValue");
    v7 = 86400.0;
    if ((unint64_t)(v6 - 3600) < 0x277EF1)
      v7 = (double)v6;
  }
  else
  {
    v7 = 86400.0;
  }
  v8 = nwphShouldRunCheck(v3, 0, v4, 0, 0.0, v7);

  if ((v8 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, CFSTR("kNWSettingsKeyLastRun"));

    v10 = &unk_183BA7000;
    if ((objc_msgSend(v2, "writeToFile:atomically:", CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist"), 1) & 1) != 0)goto LABEL_29;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    v106 = "nwphConfigureRemoteSettings_block_invoke";
    v107 = 2114;
    *(_QWORD *)v108 = v2;
    *(_WORD *)&v108[8] = 2114;
    v109 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
    LODWORD(v91) = 32;
    v90 = buf;
    v12 = (void *)_os_log_send_and_compose_impl();

    v104 = OS_LOG_TYPE_ERROR;
    v103 = 0;
    if (!__nwlog_fault((const char *)v12, &v104, &v103))
    {
LABEL_27:
      if (v12)
LABEL_28:
        free(v12);
LABEL_29:
      v21 = (const char *)nw_setting_libnetcore_debug;
      networkd_settings_init();
      if (sCachedSettings)
      {
        pthread_mutex_lock(&sSettingsMutex);
        if (sCachedSettings)
          int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v21);
        else
          int64 = 0;
        pthread_mutex_unlock(&sSettingsMutex);
      }
      else
      {
        int64 = 0;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_file_path_settings, v90, v91);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithContentsOfFile:", v22);
      v16 = objc_claimAutoreleasedReturnValue();
      if (!v16)
      {
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v16 = objc_claimAutoreleasedReturnValue();
      }

      v99 = -[NSObject copy](v16, "copy");
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        v24 = networkd_settings_get_BOOL((const char *)nw_setting_enable_quic);
        *(_DWORD *)buf = 136446466;
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 1024;
        *(_DWORD *)v108 = v24;
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s QUIC was set to: %u", buf, 0x12u);
      }

      int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_quic_numerator, 100);
      v26 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_quic_denominator, 100);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v27 = (id)gLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = v10[191];
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 1024;
        *(_DWORD *)v108 = int64_with_default;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v26;
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s enable_quic sampled at: %u / %u", buf, 0x18u);
      }

      v28 = arc4random_uniform(v26);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v29 = (id)gLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 1024;
        *(_DWORD *)v108 = v28 < int64_with_default;
        _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s enabling QUIC: %u", buf, 0x12u);
      }

      v30 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithBool:", v28 < int64_with_default);
      if (v30)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", v30, v31);

        }
      }
      v97 = (void *)v30;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v32 = (id)gLogObj;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        quic_l4s_enabled = network_config_get_quic_l4s_enabled();
        *(_DWORD *)buf = 136446466;
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 1024;
        *(_DWORD *)v108 = quic_l4s_enabled;
        _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s L4S was set to: %u", buf, 0x12u);
      }

      v34 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_l4s_numerator, 0);
      v35 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_l4s_denominator, 100);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = (id)gLogObj;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = v10[191];
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 1024;
        *(_DWORD *)v108 = v34;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v35;
        _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s enable L4S sampled at: %u / %u", buf, 0x18u);
      }
      v37 = v10;

      v38 = arc4random_uniform(v35);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v39 = (id)gLogObj;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        if (v38 >= v34)
          v40 = "disabl";
        else
          v40 = "enabl";
        *(_DWORD *)buf = 136446466;
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 2080;
        *(_QWORD *)v108 = v40;
        _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEBUG, "%{public}s %sing L4S", buf, 0x16u);
      }

      v41 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithBool:", v38 < v34);
      if (v41)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_l4s);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", v41, v42);

        }
      }
      v96 = (void *)v41;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v43 = (id)gLogObj;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        tcp_accurate_ecn_enabled = network_config_get_tcp_accurate_ecn_enabled();
        *(_DWORD *)buf = 136446466;
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 1024;
        *(_DWORD *)v108 = tcp_accurate_ecn_enabled;
        _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s Accurate ECN was set to: %u", buf, 0x12u);
      }

      v45 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_accurate_ecn_numerator, 0);
      v46 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_accurate_ecn_denominator, 100);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v47 = (id)gLogObj;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = v10[191];
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 1024;
        *(_DWORD *)v108 = v45;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v46;
        _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s enable Accurate ECN sampled at: %u / %u", buf, 0x18u);
      }

      v48 = arc4random_uniform(v46);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v49 = (id)gLogObj;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        if (v48 >= v45)
          v50 = "disabl";
        else
          v50 = "enabl";
        *(_DWORD *)buf = 136446466;
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 2080;
        *(_QWORD *)v108 = v50;
        _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %sing Accurate ECN", buf, 0x16u);
      }
      v100 = v48;

      v51 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithBool:", v48 < v45);
      if (v51)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_accurate_ecn);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", v51, v52);

        }
      }
      v94 = (void *)v51;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v53 = (id)gLogObj;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        tcp_l4s_enabled = network_config_get_tcp_l4s_enabled();
        *(_DWORD *)buf = 136446466;
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 1024;
        *(_DWORD *)v108 = tcp_l4s_enabled;
        _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_DEBUG, "%{public}s TCP L4S was set to: %u", buf, 0x12u);
      }

      v101 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_tcp_l4s_numerator, 0);
      v55 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_tcp_l4s_denominator, 100);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v56 = (id)gLogObj;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = v10[191];
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 1024;
        *(_DWORD *)v108 = v101;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v55;
        _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s enable TCP L4S sampled at: %u / %u", buf, 0x18u);
      }
      v95 = v45;

      v57 = arc4random_uniform(v55);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v58 = (id)gLogObj;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        if (v57 >= v101)
          v59 = "disabl";
        else
          v59 = "enabl";
        *(_DWORD *)buf = 136446466;
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 2080;
        *(_QWORD *)v108 = v59;
        _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %sing TCP L4S", buf, 0x16u);
      }
      v93 = v57;

      v60 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithBool:", v57 < v101);
      v61 = v100;
      if (v60)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_tcp_l4s);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", v60, v62);

        }
      }
      v92 = (void *)v60;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v63 = (id)gLogObj;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      {
        v64 = networkd_settings_get_BOOL((const char *)nw_setting_enable_unified_http);
        *(_DWORD *)buf = 136446466;
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 1024;
        *(_DWORD *)v108 = v64;
        _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s unified HTTP was set to: %u", buf, 0x12u);
      }

      v65 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_unified_http_numerator, 0);
      v66 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_unified_http_denominator, 0);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v67 = (id)gLogObj;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = v37[191];
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 1024;
        *(_DWORD *)v108 = v65;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v66;
        _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_DEBUG, "%{public}s enable_unified_http sampled at: %u / %u", buf, 0x18u);
      }

      v68 = arc4random_uniform(v66);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v69 = (id)gLogObj;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 1024;
        *(_DWORD *)v108 = v68 < v65;
        _os_log_impl(&dword_182FBE000, v69, OS_LOG_TYPE_DEBUG, "%{public}s enabling unified HTTP: %u", buf, 0x12u);
      }

      v70 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithBool:", v68 < v65);
      if (v70)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_unified_http);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", v70, v71);

        }
      }
      v72 = networkd_settings_get_int64_with_default((const char *)nw_setting_activity_investigation_id, 0);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v73 = (id)gLogObj;
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v106 = "nwphConfigureRemoteSettings_block_invoke";
        v107 = 2048;
        *(_QWORD *)v108 = v72;
        _os_log_impl(&dword_182FBE000, v73, OS_LOG_TYPE_DEFAULT, "%{public}s Current Investigation ID: %llu", buf, 0x16u);
      }

      if (v72)
      {
        v74 = (const char *)nw_setting_activity_investigation_id_start_time;
        networkd_settings_init();
        if (sCachedSettings)
        {
          pthread_mutex_lock(&sSettingsMutex);
          if (sCachedSettings)
            v75 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v74);
          else
            v75 = 0;
          v76 = 0x1E0CB3000uLL;
          pthread_mutex_unlock(&sSettingsMutex);
        }
        else
        {
          v76 = 0x1E0CB3000;
          v75 = 0;
        }
        v77 = clock_gettime_nsec_np(_CLOCK_REALTIME);
        v78 = (const __CFString *)v77;
        if (v75 - 1 >= v77)
        {
          v81 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedLongLong:", v77);
          if (v81)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend(*(id *)(v76 + 2368), "stringWithUTF8String:", nw_setting_activity_investigation_id_start_time);
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              -[NSObject setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", v81, v84);

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v85 = (id)gLogObj;
              if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446466;
                v106 = "nwphConfigureRemoteSettings_block_invoke";
                v107 = 2048;
                *(_QWORD *)v108 = v78;
                _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_DEFAULT, "%{public}s Overriding Investigation ID start time to %llu", buf, 0x16u);
              }

            }
          }
        }
        else
        {
          v79 = v77 - v75;
          v80 = (v77 - v75) / 0x3B9ACA00;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v81 = (id)gLogObj;
          v82 = os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT);
          if (v79 < 0x2261034C3CA00)
          {
            v61 = v100;
            if (v82)
            {
              *(_DWORD *)buf = 136446978;
              v106 = "nwphConfigureRemoteSettings_block_invoke";
              v107 = 2048;
              *(_QWORD *)v108 = v75;
              *(_WORD *)&v108[8] = 2048;
              v109 = v78;
              v110 = 2048;
              v111 = v80;
              _os_log_impl(&dword_182FBE000, v81, OS_LOG_TYPE_DEFAULT, "%{public}s Investigation ID has not expired (start: %llu, now: %llu, delta_sec: %llu)", buf, 0x2Au);
            }
          }
          else
          {
            v61 = v100;
            if (v82)
            {
              *(_DWORD *)buf = 136446978;
              v106 = "nwphConfigureRemoteSettings_block_invoke";
              v107 = 2048;
              *(_QWORD *)v108 = v75;
              *(_WORD *)&v108[8] = 2048;
              v109 = v78;
              v110 = 2048;
              v111 = v80;
              _os_log_impl(&dword_182FBE000, v81, OS_LOG_TYPE_DEFAULT, "%{public}s Investigation ID expired, removing (start: %llu, now: %llu, delta_sec: %llu)", buf, 0x2Au);
            }

            objc_msgSend(*(id *)(v76 + 2368), "stringWithUTF8String:", nw_setting_activity_investigation_id);
            v83 = (void *)objc_claimAutoreleasedReturnValue();
            -[NSObject setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", 0, v83);

            objc_msgSend(*(id *)(v76 + 2368), "stringWithUTF8String:", nw_setting_activity_investigation_id_start_time);
            v81 = objc_claimAutoreleasedReturnValue();
            -[NSObject setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", 0, v81);
          }
        }

      }
      v86 = v61 < v95;
      saveAndPostNetworkdSettings(v16, v99, int64);
      v87 = !networkd_settings_get_BOOL((const char *)nw_setting_disable_l4s_aqm);
      v88 = +[ManagedNetworkSettings sharedMNS](ManagedNetworkSettings, "sharedMNS");
      objc_msgSend(v88, "queue");
      v89 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __nwphConfigureRemoteSettings_block_invoke_371;
      block[3] = &__block_descriptor_56_e5_v8__0l;
      block[4] = v86;
      block[5] = v93 < v101;
      block[6] = v87;
      dispatch_async(v89, block);

      goto LABEL_114;
    }
    if (v104 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = v104;
      if (!os_log_type_enabled(v13, v104))
      {
LABEL_26:

        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446722;
      v106 = "nwphConfigureRemoteSettings_block_invoke";
      v107 = 2114;
      *(_QWORD *)v108 = v2;
      *(_WORD *)&v108[8] = 2114;
      v109 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
      v15 = "%{public}s Failed to save networknomicon settings run %{public}@ to \"%{public}@\"";
    }
    else
    {
      if (v103)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        v19 = v104;
        v20 = os_log_type_enabled(v18, v104);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446978;
            v106 = "nwphConfigureRemoteSettings_block_invoke";
            v107 = 2114;
            *(_QWORD *)v108 = v2;
            *(_WORD *)&v108[8] = 2114;
            v109 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
            v110 = 2082;
            v111 = (unint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s Failed to save networknomicon settings run %{public}@ to \"%{public}@\", dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          v10 = (_QWORD *)&unk_183BA7000;
          if (!v12)
            goto LABEL_29;
        }
        else
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446722;
            v106 = "nwphConfigureRemoteSettings_block_invoke";
            v107 = 2114;
            *(_QWORD *)v108 = v2;
            *(_WORD *)&v108[8] = 2114;
            v109 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
            _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s Failed to save networknomicon settings run %{public}@ to \"%{public}@\", no backtrace", buf, 0x20u);
          }

          v10 = (_QWORD *)&unk_183BA7000;
          if (!v12)
            goto LABEL_29;
        }
        goto LABEL_28;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = v104;
      if (!os_log_type_enabled(v13, v104))
        goto LABEL_26;
      *(_DWORD *)buf = 136446722;
      v106 = "nwphConfigureRemoteSettings_block_invoke";
      v107 = 2114;
      *(_QWORD *)v108 = v2;
      *(_WORD *)&v108[8] = 2114;
      v109 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
      v15 = "%{public}s Failed to save networknomicon settings run %{public}@ to \"%{public}@\", backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0x20u);
    goto LABEL_26;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v16 = (id)gLogObj;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446210;
    v106 = "nwphConfigureRemoteSettings_block_invoke";
    _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s skipping remote settings run", buf, 0xCu);
  }
LABEL_114:

}

void __nwphConfigureRemoteSettings_block_invoke_371(_QWORD *a1)
{
  id v2;
  void *v3;
  int v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  id v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  const __CFString *v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithContentsOfFile:", CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist"));
  v2 = (id)objc_claimAutoreleasedReturnValue();
  if (!v2)
    v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("net.inet.tcp.accurate_ecn"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && objc_msgSend(v3, "longLongValue") == a1[4])
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a1[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CFSTR("net.inet.tcp.accurate_ecn"));

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (void *)a1[4];
      *(_DWORD *)buf = 136446466;
      v36 = "nwphConfigureRemoteSettings_block_invoke";
      v37 = 2048;
      v38 = v7;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s Changing Accurate ECN to %lld", buf, 0x16u);
    }

    v4 = 1;
  }
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("net.inet.tcp.l4s"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0) || objc_msgSend(v8, "longLongValue") != a1[5])
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a1[5]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, CFSTR("net.inet.tcp.l4s"));

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (void *)a1[5];
      *(_DWORD *)buf = 136446466;
      v36 = "nwphConfigureRemoteSettings_block_invoke";
      v37 = 2048;
      v38 = v11;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s Changing TCP L4S to %lld", buf, 0x16u);
    }

    v4 = 1;
  }
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("net.classq.enable_l4s"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v12 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0) || objc_msgSend(v12, "longLongValue") != a1[6])
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a1[6]);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v13, CFSTR("net.classq.enable_l4s"));

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = (void *)a1[6];
      *(_DWORD *)buf = 136446466;
      v36 = "nwphConfigureRemoteSettings_block_invoke";
      v37 = 2048;
      v38 = v15;
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s Changing L4S AQM enablement to %lld", buf, 0x16u);
    }

    v4 = 1;
  }
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("net.classq.fq_codel.fq_enable_pacing"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && objc_msgSend(v16, "longLongValue") == a1[6])
  {
    if (!v4)
      goto LABEL_43;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a1[6]);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v17, CFSTR("net.classq.fq_codel.fq_enable_pacing"));

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = (void *)a1[6];
      *(_DWORD *)buf = 136446466;
      v36 = "nwphConfigureRemoteSettings_block_invoke";
      v37 = 2048;
      v38 = v19;
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s Changing L4S AQM Pacing enablement to %lld", buf, 0x16u);
    }

  }
  if ((objc_msgSend(v2, "writeToFile:atomically:", CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist"), 1) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    v36 = "nwphConfigureRemoteSettings_block_invoke";
    v37 = 2114;
    v38 = v2;
    v39 = 2114;
    v40 = CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist");
    LODWORD(v32) = 32;
    v31 = buf;
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v21, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v23 = type;
        if (!os_log_type_enabled(v22, type))
          goto LABEL_48;
        *(_DWORD *)buf = 136446722;
        v36 = "nwphConfigureRemoteSettings_block_invoke";
        v37 = 2114;
        v38 = v2;
        v39 = 2114;
        v40 = CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist");
        v24 = "%{public}s Failed to save network settings %{public}@ to \"%{public}@\"";
LABEL_46:
        v29 = v22;
        v30 = v23;
        goto LABEL_47;
      }
      if (!v33)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v23 = type;
        if (!os_log_type_enabled(v22, type))
          goto LABEL_48;
        *(_DWORD *)buf = 136446722;
        v36 = "nwphConfigureRemoteSettings_block_invoke";
        v37 = 2114;
        v38 = v2;
        v39 = 2114;
        v40 = CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist");
        v24 = "%{public}s Failed to save network settings %{public}@ to \"%{public}@\", backtrace limit exceeded";
        goto LABEL_46;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      v26 = type;
      v27 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (!v27)
        {
LABEL_48:

          if (!v21)
            goto LABEL_42;
          goto LABEL_41;
        }
        *(_DWORD *)buf = 136446722;
        v36 = "nwphConfigureRemoteSettings_block_invoke";
        v37 = 2114;
        v38 = v2;
        v39 = 2114;
        v40 = CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist");
        v24 = "%{public}s Failed to save network settings %{public}@ to \"%{public}@\", no backtrace";
        v29 = v22;
        v30 = v26;
LABEL_47:
        _os_log_impl(&dword_182FBE000, v29, v30, v24, buf, 0x20u);
        goto LABEL_48;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446978;
        v36 = "nwphConfigureRemoteSettings_block_invoke";
        v37 = 2114;
        v38 = v2;
        v39 = 2114;
        v40 = CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist");
        v41 = 2082;
        v42 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v22, v26, "%{public}s Failed to save network settings %{public}@ to \"%{public}@\", dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(backtrace_string);
    }
    if (v21)
LABEL_41:
      free(v21);
  }
LABEL_42:
  v28 = +[ManagedNetworkSettings sharedMNS](ManagedNetworkSettings, "sharedMNS", v31, v32);
  objc_msgSend(v28, "reloadMNS");

LABEL_43:
}

void __nwphCheckMobileAsset_block_invoke_251(uint64_t a1, unint64_t a2)
{
  __CFString *v4;
  id *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  __CFString *v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  unint64_t v25;
  _BOOL4 v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  NSObject *v34;
  void *v35;
  _BOOL4 v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  void *v292;
  void *v293;
  void *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  void *v328;
  void *v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  void *v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  void *v339;
  void *v340;
  id v341;
  void *v342;
  void *v343;
  void *v344;
  id v345;
  void *v346;
  void *v347;
  void *v348;
  id v349;
  void *v350;
  void *v351;
  void *v352;
  id v353;
  void *v354;
  void *v355;
  void *v356;
  id v357;
  void *v358;
  void *v359;
  void *v360;
  id v361;
  void *v362;
  void *v363;
  void *v364;
  id v365;
  void *v366;
  void *v367;
  void *v368;
  id v369;
  void *v370;
  void *v371;
  void *v372;
  id v373;
  void *v374;
  void *v375;
  void *v376;
  id v377;
  void *v378;
  void *v379;
  void *v380;
  id v381;
  void *v382;
  void *v383;
  void *v384;
  id v385;
  void *v386;
  void *v387;
  void *v388;
  id v389;
  void *v390;
  void *v391;
  void *v392;
  id v393;
  void *v394;
  void *v395;
  void *v396;
  id v397;
  void *v398;
  void *v399;
  void *v400;
  id v401;
  void *v402;
  void *v403;
  void *v404;
  id v405;
  void *v406;
  void *v407;
  void *v408;
  id v409;
  void *v410;
  void *v411;
  void *v412;
  id v413;
  void *v414;
  void *v415;
  void *v416;
  id v417;
  void *v418;
  void *v419;
  void *v420;
  id v421;
  void *v422;
  void *v423;
  void *v424;
  id v425;
  void *v426;
  void *v427;
  void *v428;
  id v429;
  void *v430;
  void *v431;
  void *v432;
  id v433;
  void *v434;
  void *v435;
  void *v436;
  id v437;
  void *v438;
  void *v439;
  void *v440;
  id v441;
  void *v442;
  void *v443;
  void *v444;
  id v445;
  void *v446;
  void *v447;
  void *v448;
  id v449;
  void *v450;
  void *v451;
  void *v452;
  id v453;
  void *v454;
  void *v455;
  void *v456;
  id v457;
  void *v458;
  void *v459;
  void *v460;
  id v461;
  void *v462;
  void *v463;
  void *v464;
  id v465;
  void *v466;
  void *v467;
  void *v468;
  id v469;
  void *v470;
  void *v471;
  void *v472;
  id v473;
  void *v474;
  void *v475;
  void *v476;
  id v477;
  void *v478;
  void *v479;
  void *v480;
  id v481;
  void *v482;
  void *v483;
  void *v484;
  id v485;
  void *v486;
  void *v487;
  void *v488;
  id v489;
  void *v490;
  void *v491;
  void *v492;
  id v493;
  void *v494;
  void *v495;
  void *v496;
  id v497;
  void *v498;
  void *v499;
  void *v500;
  id v501;
  void *v502;
  void *v503;
  void *v504;
  id v505;
  void *v506;
  void *v507;
  void *v508;
  id v509;
  void *v510;
  void *v511;
  void *v512;
  id v513;
  void *v514;
  void *v515;
  void *v516;
  id v517;
  void *v518;
  void *v519;
  void *v520;
  id v521;
  void *v522;
  void *v523;
  void *v524;
  id v525;
  void *v526;
  void *v527;
  void *v528;
  id v529;
  void *v530;
  void *v531;
  void *v532;
  id v533;
  void *v534;
  void *v535;
  void *v536;
  id v537;
  void *v538;
  void *v539;
  void *v540;
  id v541;
  void *v542;
  void *v543;
  void *v544;
  id v545;
  void *v546;
  void *v547;
  void *v548;
  id v549;
  void *v550;
  void *v551;
  void *v552;
  id v553;
  void *v554;
  void *v555;
  void *v556;
  id v557;
  void *v558;
  void *v559;
  void *v560;
  id v561;
  void *v562;
  void *v563;
  void *v564;
  id v565;
  void *v566;
  void *v567;
  void *v568;
  id v569;
  void *v570;
  void *v571;
  void *v572;
  id v573;
  void *v574;
  void *v575;
  void *v576;
  id v577;
  void *v578;
  void *v579;
  void *v580;
  id v581;
  void *v582;
  void *v583;
  void *v584;
  id v585;
  void *v586;
  void *v587;
  void *v588;
  id v589;
  void *v590;
  void *v591;
  void *v592;
  NSObject *v593;
  void *v594;
  int v595;
  NSObject *v596;
  NSObject *v597;
  void *v598;
  NSObject *v599;
  os_log_type_t v600;
  const char *v601;
  char *backtrace_string;
  os_log_type_t v603;
  _BOOL4 v604;
  NSObject *v605;
  os_log_type_t v606;
  uint64_t v607;
  __CFString *v608;
  void *v609;
  id obj;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  void *v614;
  void *v615;
  char v616;
  os_log_type_t type;
  _QWORD block[4];
  NSObject *v619;
  _QWORD v620[4];
  id v621;
  unint64_t v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  _BYTE v627[128];
  int buf;
  const char *v629;
  __int16 v630;
  uint64_t v631;
  __int16 v632;
  const __CFString *v633;
  __int16 v634;
  char *v635;
  uint64_t v636;

  v636 = *MEMORY[0x1E0C80C00];
  if (a2 < 0xD && ((0x103Fu >> a2) & 1) != 0)
    v4 = off_1E149D760[a2];
  else
    v4 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Invalid[%lld]"), a2);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id *)&unk_1ECD84000;
  v6 = (id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    buf = 136446466;
    v629 = "nwphCheckMobileAsset_block_invoke";
    v630 = 2114;
    v631 = (uint64_t)v4;
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s queried mobile asset metadata with res %{public}@", (uint8_t *)&buf, 0x16u);
  }

  if (!a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "results");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = objc_msgSend(v7, "count");
      v10 = *(__CFString **)(a1 + 32);
      -[__CFString queryParams](v10, "queryParams");
      v11 = (char *)objc_claimAutoreleasedReturnValue();
      buf = 136446978;
      v629 = "nwphCheckMobileAsset_block_invoke";
      v630 = 2048;
      v631 = v9;
      v632 = 2114;
      v633 = v10;
      v634 = 2114;
      v635 = v11;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s queried mobile asset metadata got %llu results %{public}@ params %{public}@", (uint8_t *)&buf, 0x2Au);

    }
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithContentsOfFile:", CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist"));
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (!v12)
      v12 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v12, "setObject:forKeyedSubscript:", 0, CFSTR("RandomID"));
    v626 = 0u;
    v624 = 0u;
    v625 = 0u;
    v623 = 0u;
    obj = v7;
    v612 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v623, v627, 16);
    if (v612)
    {
      v607 = a1;
      v608 = v4;
      v609 = v12;
      v13 = 0;
      v611 = *(_QWORD *)v624;
      while (1)
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v624 != v611)
            objc_enumerationMutation(obj);
          v18 = *(id *)(*((_QWORD *)&v623 + 1) + 8 * v14);

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = v5[463];
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            buf = 136446466;
            v629 = "nwphCheckMobileAsset_block_invoke";
            v630 = 2114;
            v631 = (uint64_t)v18;
            _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s Received asset %{public}@", (uint8_t *)&buf, 0x16u);
          }
          v613 = v14;

          objc_msgSend(v18, "attributes");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v21 = v5[463];
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            buf = 136446466;
            v629 = "nwphCheckMobileAsset_block_invoke";
            v630 = 2114;
            v631 = (uint64_t)v20;
            _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s Received asset attributes %{public}@", (uint8_t *)&buf, 0x16u);
          }

          objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("NetworknomiconVersion"));
          v22 = objc_claimAutoreleasedReturnValue();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v23 = v5[463];
          v24 = v23;
          v615 = (void *)v22;
          v614 = v18;
          if (v22)
          {
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              buf = 136446466;
              v629 = "nwphCheckMobileAsset_block_invoke";
              v630 = 2114;
              v631 = v22;
              _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s Received NetworknomiconVersion \"%{public}@\"", (uint8_t *)&buf, 0x16u);
            }

            objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("NetworknomiconECNPercentage"));
            v24 = objc_claimAutoreleasedReturnValue();
            if (v24 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
              v25 = -[NSObject longLongValue](v24, "longLongValue");
              v26 = v25 < 0x65;
            }
            else
            {
              v26 = 0;
              v25 = -1;
            }
            objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("NetworknomiconPollFrequencySeconds"));
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            if (v27)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v28 = objc_msgSend(v27, "longLongValue");
                if ((unint64_t)(v28 - 3600) < 0x277EF1)
                {
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v28);
                  v29 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v609, "setObject:forKeyedSubscript:", v29, CFSTR("PollFrequencySeconds"));

                }
              }
            }
            objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("NetworknomiconSettingsFrequencySeconds"));
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            if (v30)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v31 = objc_msgSend(v30, "longLongValue");
                if ((unint64_t)(v31 - 3600) < 0x277EF1)
                {
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v31);
                  v32 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v609, "setObject:forKeyedSubscript:", v32, CFSTR("kNWSettingsKeyFrequencySeconds"));

                }
              }
            }
            if (v26)
            {
              v33 = +[ManagedNetworkSettings sharedMNS](ManagedNetworkSettings, "sharedMNS");
              objc_msgSend(v33, "queue");
              v34 = objc_claimAutoreleasedReturnValue();
              v620[0] = MEMORY[0x1E0C809B0];
              v620[1] = 3221225472;
              v620[2] = __nwphCheckMobileAsset_block_invoke_261;
              v620[3] = &unk_1E14AA348;
              v622 = v25;
              v621 = v609;
              dispatch_async(v34, v620);

            }
            v5 = (id *)&unk_1ECD84000;
          }
          else if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            buf = 136446466;
            v629 = "nwphCheckMobileAsset_block_invoke";
            v630 = 2114;
            v631 = (uint64_t)v20;
            _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s Bad asset attributes %{public}@", (uint8_t *)&buf, 0x16u);
          }

          objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("ActivityRateVersion"));
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v17 = v5[463];
          v36 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
          if (v35)
          {
            if (v36)
            {
              buf = 136446466;
              v629 = "nwphCheckMobileAsset_block_invoke";
              v630 = 2114;
              v631 = (uint64_t)v35;
              _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Received ActivityRateVersion \"%{public}@\"", (uint8_t *)&buf, 0x16u);
            }

            v17 = objc_alloc_init(MEMORY[0x1E0C99E08]);
            v37 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "libnetcore");
            objc_msgSend(v20, "objectForKeyedSubscript:", v37);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            if (v38
              && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              && (objc_msgSend(v38, "longLongValue") & 0x8000000000000000) == 0)
            {
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_libnetcore);
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v38, v39);

              v40 = 1;
            }
            else
            {
              v40 = 0;
            }

            v41 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "cfnetwork");
            objc_msgSend(v20, "objectForKeyedSubscript:", v41);
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            if (v42)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v42, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_cfnetwork);
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v42, v43);

                v40 = 1;
              }
            }

            v44 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "coremedia");
            objc_msgSend(v20, "objectForKeyedSubscript:", v44);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            if (v45)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v45, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_coremedia);
                v46 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v45, v46);

                v40 = 1;
              }
            }

            v47 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "parsec");
            objc_msgSend(v20, "objectForKeyedSubscript:", v47);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            if (v48)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v48, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_parsec);
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v48, v49);

                v40 = 1;
              }
            }

            v50 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "siri");
            objc_msgSend(v20, "objectForKeyedSubscript:", v50);
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            if (v51)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v51, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_siri);
                v52 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v51, v52);

                v40 = 1;
              }
            }

            v53 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "webkit");
            objc_msgSend(v20, "objectForKeyedSubscript:", v53);
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            if (v54)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v54, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_webkit);
                v55 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v54, v55);

                v40 = 1;
              }
            }

            v56 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "coremedia_crabs");
            objc_msgSend(v20, "objectForKeyedSubscript:", v56);
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            if (v57)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v57, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_coremedia_crabs);
                v58 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v57, v58);

                v40 = 1;
              }
            }

            v59 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "coremedia_hls");
            objc_msgSend(v20, "objectForKeyedSubscript:", v59);
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            if (v60)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v60, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_coremedia_hls);
                v61 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v60, v61);

                v40 = 1;
              }
            }

            v62 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "cloudkit");
            objc_msgSend(v20, "objectForKeyedSubscript:", v62);
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            if (v63)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v63, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_cloudkit);
                v64 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v63, v64);

                v40 = 1;
              }
            }

            v65 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "mmcs");
            objc_msgSend(v20, "objectForKeyedSubscript:", v65);
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            if (v66)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v66, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_mmcs);
                v67 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v66, v67);

                v40 = 1;
              }
            }

            v68 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "mail");
            objc_msgSend(v20, "objectForKeyedSubscript:", v68);
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            if (v69)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v69, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_mail);
                v70 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v69, v70);

                v40 = 1;
              }
            }

            v71 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "facetime");
            objc_msgSend(v20, "objectForKeyedSubscript:", v71);
            v72 = (void *)objc_claimAutoreleasedReturnValue();
            if (v72)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v72, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_facetime);
                v73 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v72, v73);

                v40 = 1;
              }
            }

            v74 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "adplatforms");
            objc_msgSend(v20, "objectForKeyedSubscript:", v74);
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            if (v75)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v75, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_adplatforms);
                v76 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v75, v76);

                v40 = 1;
              }
            }

            v77 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "corelocation");
            objc_msgSend(v20, "objectForKeyedSubscript:", v77);
            v78 = (void *)objc_claimAutoreleasedReturnValue();
            if (v78)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v78, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_corelocation);
                v79 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v78, v79);

                v40 = 1;
              }
            }

            v80 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "airplay_sender");
            objc_msgSend(v20, "objectForKeyedSubscript:", v80);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            if (v81)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v81, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_airplay_sender);
                v82 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v81, v82);

                v40 = 1;
              }
            }

            v83 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "airplay_receiver");
            objc_msgSend(v20, "objectForKeyedSubscript:", v83);
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            if (v84)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v84, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_airplay_receiver);
                v85 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v84, v85);

                v40 = 1;
              }
            }

            v86 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "maps");
            objc_msgSend(v20, "objectForKeyedSubscript:", v86);
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            if (v87)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v87, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_maps);
                v88 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v87, v88);

                v40 = 1;
              }
            }

            v89 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "maps_internal");
            objc_msgSend(v20, "objectForKeyedSubscript:", v89);
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            if (v90)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v90, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_maps_internal);
                v91 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v90, v91);

                v40 = 1;
              }
            }

            v92 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "maps_external");
            objc_msgSend(v20, "objectForKeyedSubscript:", v92);
            v93 = (void *)objc_claimAutoreleasedReturnValue();
            if (v93)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v93, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_maps_external);
                v94 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v93, v94);

                v40 = 1;
              }
            }

            v95 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "network_speed_test");
            objc_msgSend(v20, "objectForKeyedSubscript:", v95);
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            if (v96)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v96, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_network_speed_test);
                v97 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v96, v97);

                v40 = 1;
              }
            }

            v98 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "captive");
            objc_msgSend(v20, "objectForKeyedSubscript:", v98);
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            if (v99)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v99, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_captive);
                v100 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v99, v100);

                v40 = 1;
              }
            }

            v101 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "safe_browsing");
            objc_msgSend(v20, "objectForKeyedSubscript:", v101);
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            if (v102)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v102, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_safe_browsing);
                v103 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v102, v103);

                v40 = 1;
              }
            }

            v104 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "dns");
            objc_msgSend(v20, "objectForKeyedSubscript:", v104);
            v105 = (void *)objc_claimAutoreleasedReturnValue();
            if (v105)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v105, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_dns);
                v106 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v105, v106);

                v40 = 1;
              }
            }

            v107 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "music");
            objc_msgSend(v20, "objectForKeyedSubscript:", v107);
            v108 = (void *)objc_claimAutoreleasedReturnValue();
            if (v108)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v108, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_music);
                v109 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v108, v109);

                v40 = 1;
              }
            }

            v110 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "battery");
            objc_msgSend(v20, "objectForKeyedSubscript:", v110);
            v111 = (void *)objc_claimAutoreleasedReturnValue();
            if (v111)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v111, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_battery);
                v112 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v111, v112);

                v40 = 1;
              }
            }

            v113 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "cloud_media_services");
            objc_msgSend(v20, "objectForKeyedSubscript:", v113);
            v114 = (void *)objc_claimAutoreleasedReturnValue();
            if (v114)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v114, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_cloud_media_services);
                v115 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v114, v115);

                v40 = 1;
              }
            }

            v116 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "avconference");
            objc_msgSend(v20, "objectForKeyedSubscript:", v116);
            v117 = (void *)objc_claimAutoreleasedReturnValue();
            if (v117)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v117, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_avconference);
                v118 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v117, v118);

                v40 = 1;
              }
            }

            v119 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "appstore");
            objc_msgSend(v20, "objectForKeyedSubscript:", v119);
            v120 = (void *)objc_claimAutoreleasedReturnValue();
            if (v120)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v120, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_appstore);
                v121 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v120, v121);

                v40 = 1;
              }
            }

            v122 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "telephony_service");
            objc_msgSend(v20, "objectForKeyedSubscript:", v122);
            v123 = (void *)objc_claimAutoreleasedReturnValue();
            if (v123)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v123, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_telephony_service);
                v124 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v123, v124);

                v40 = 1;
              }
            }

            v125 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "network_experiments");
            objc_msgSend(v20, "objectForKeyedSubscript:", v125);
            v126 = (void *)objc_claimAutoreleasedReturnValue();
            if (v126)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v126, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_network_experiments);
                v127 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v126, v127);

                v40 = 1;
              }
            }

            v128 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "network_perf");
            objc_msgSend(v20, "objectForKeyedSubscript:", v128);
            v129 = (void *)objc_claimAutoreleasedReturnValue();
            if (v129)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v129, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_network_perf);
                v130 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v129, v130);

                v40 = 1;
              }
            }

            v131 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "hotspot");
            objc_msgSend(v20, "objectForKeyedSubscript:", v131);
            v132 = (void *)objc_claimAutoreleasedReturnValue();
            if (v132)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v132, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_hotspot);
                v133 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v132, v133);

                v40 = 1;
              }
            }

            v134 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "weather");
            objc_msgSend(v20, "objectForKeyedSubscript:", v134);
            v135 = (void *)objc_claimAutoreleasedReturnValue();
            if (v135)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v135, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_weather);
                v136 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v135, v136);

                v40 = 1;
              }
            }

            v137 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "coordination");
            objc_msgSend(v20, "objectForKeyedSubscript:", v137);
            v138 = (void *)objc_claimAutoreleasedReturnValue();
            if (v138)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v138, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_coordination);
                v139 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v138, v139);

                v40 = 1;
              }
            }

            v140 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "appstore_jet");
            objc_msgSend(v20, "objectForKeyedSubscript:", v140);
            v141 = (void *)objc_claimAutoreleasedReturnValue();
            if (v141)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v141, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_appstore_jet);
                v142 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v141, v142);

                v40 = 1;
              }
            }

            v143 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "soundboard");
            objc_msgSend(v20, "objectForKeyedSubscript:", v143);
            v144 = (void *)objc_claimAutoreleasedReturnValue();
            if (v144)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v144, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_soundboard);
                v145 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v144, v145);

                v40 = 1;
              }
            }

            v146 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "aea");
            objc_msgSend(v20, "objectForKeyedSubscript:", v146);
            v147 = (void *)objc_claimAutoreleasedReturnValue();
            if (v147)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v147, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_aea);
                v148 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v147, v148);

                v40 = 1;
              }
            }

            v149 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "homekit");
            objc_msgSend(v20, "objectForKeyedSubscript:", v149);
            v150 = (void *)objc_claimAutoreleasedReturnValue();
            if (v150)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v150, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_homekit);
                v151 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v150, v151);

                v40 = 1;
              }
            }

            v152 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "wifi");
            objc_msgSend(v20, "objectForKeyedSubscript:", v152);
            v153 = (void *)objc_claimAutoreleasedReturnValue();
            if (v153)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v153, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_wifi);
                v154 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v153, v154);

                v40 = 1;
              }
            }

            v155 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "app_launch");
            objc_msgSend(v20, "objectForKeyedSubscript:", v155);
            v156 = (void *)objc_claimAutoreleasedReturnValue();
            if (v156)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v156, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_app_launch);
                v157 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v156, v157);

                v40 = 1;
              }
            }

            v158 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "ams");
            objc_msgSend(v20, "objectForKeyedSubscript:", v158);
            v159 = (void *)objc_claimAutoreleasedReturnValue();
            if (v159)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v159, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_ams);
                v160 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v159, v160);

                v40 = 1;
              }
            }

            v161 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "reve");
            objc_msgSend(v20, "objectForKeyedSubscript:", v161);
            v162 = (void *)objc_claimAutoreleasedReturnValue();
            if (v162)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v162, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_reve);
                v163 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v162, v163);

                v40 = 1;
              }
            }

            v164 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "network_quality");
            objc_msgSend(v20, "objectForKeyedSubscript:", v164);
            v165 = (void *)objc_claimAutoreleasedReturnValue();
            if (v165)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v165, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_network_quality);
                v166 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v165, v166);

                v40 = 1;
              }
            }

            v167 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "news");
            objc_msgSend(v20, "objectForKeyedSubscript:", v167);
            v168 = (void *)objc_claimAutoreleasedReturnValue();
            if (v168)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v168, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_news);
                v169 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v168, v169);

                v40 = 1;
              }
            }

            v170 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "cloud_compute");
            objc_msgSend(v20, "objectForKeyedSubscript:", v170);
            v171 = (void *)objc_claimAutoreleasedReturnValue();
            if (v171)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v171, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_cloud_compute);
                v172 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v171, v172);

                v40 = 1;
              }
            }

            v173 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "push");
            objc_msgSend(v20, "objectForKeyedSubscript:", v173);
            v174 = (void *)objc_claimAutoreleasedReturnValue();
            if (v174)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v174, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_push);
                v175 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v174, v175);

                v40 = 1;
              }
            }

            v176 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "nw_actor_system");
            objc_msgSend(v20, "objectForKeyedSubscript:", v176);
            v177 = (void *)objc_claimAutoreleasedReturnValue();
            if (v177)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v177, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_nw_actor_system);
                v178 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v177, v178);

                v40 = 1;
              }
            }

            v179 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "app_intents_services");
            objc_msgSend(v20, "objectForKeyedSubscript:", v179);
            v180 = (void *)objc_claimAutoreleasedReturnValue();
            if (v180)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v180, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_app_intents_services);
                v181 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v180, v181);

                v40 = 1;
              }
            }

            v182 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "stocks");
            objc_msgSend(v20, "objectForKeyedSubscript:", v182);
            v183 = (void *)objc_claimAutoreleasedReturnValue();
            if (v183)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v183, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_stocks);
                v184 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v183, v184);

                v40 = 1;
              }
            }

            v185 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_num_%s_%s"), "ios", "tv_app");
            objc_msgSend(v20, "objectForKeyedSubscript:", v185);
            v186 = (void *)objc_claimAutoreleasedReturnValue();
            if (v186)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v186, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_tv_app);
                v187 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v186, v187);

                v40 = 1;
              }
            }

            v188 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "libnetcore");
            objc_msgSend(v20, "objectForKeyedSubscript:", v188);
            v189 = (void *)objc_claimAutoreleasedReturnValue();
            if (v189)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v189, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_libnetcore);
                v190 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v189, v190);

                v40 = 1;
              }
            }

            v191 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "cfnetwork");
            objc_msgSend(v20, "objectForKeyedSubscript:", v191);
            v192 = (void *)objc_claimAutoreleasedReturnValue();
            if (v192)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v192, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_cfnetwork);
                v193 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v192, v193);

                v40 = 1;
              }
            }

            v194 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "coremedia");
            objc_msgSend(v20, "objectForKeyedSubscript:", v194);
            v195 = (void *)objc_claimAutoreleasedReturnValue();
            if (v195)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v195, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_coremedia);
                v196 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v195, v196);

                v40 = 1;
              }
            }

            v197 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "parsec");
            objc_msgSend(v20, "objectForKeyedSubscript:", v197);
            v198 = (void *)objc_claimAutoreleasedReturnValue();
            if (v198)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v198, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_parsec);
                v199 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v198, v199);

                v40 = 1;
              }
            }

            v200 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "siri");
            objc_msgSend(v20, "objectForKeyedSubscript:", v200);
            v201 = (void *)objc_claimAutoreleasedReturnValue();
            if (v201)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v201, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_siri);
                v202 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v201, v202);

                v40 = 1;
              }
            }

            v203 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "webkit");
            objc_msgSend(v20, "objectForKeyedSubscript:", v203);
            v204 = (void *)objc_claimAutoreleasedReturnValue();
            if (v204)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v204, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_webkit);
                v205 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v204, v205);

                v40 = 1;
              }
            }

            v206 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "coremedia_crabs");
            objc_msgSend(v20, "objectForKeyedSubscript:", v206);
            v207 = (void *)objc_claimAutoreleasedReturnValue();
            if (v207)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v207, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_coremedia_crabs);
                v208 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v207, v208);

                v40 = 1;
              }
            }

            v209 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "coremedia_hls");
            objc_msgSend(v20, "objectForKeyedSubscript:", v209);
            v210 = (void *)objc_claimAutoreleasedReturnValue();
            if (v210)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v210, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_coremedia_hls);
                v211 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v210, v211);

                v40 = 1;
              }
            }

            v212 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "cloudkit");
            objc_msgSend(v20, "objectForKeyedSubscript:", v212);
            v213 = (void *)objc_claimAutoreleasedReturnValue();
            if (v213)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v213, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_cloudkit);
                v214 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v213, v214);

                v40 = 1;
              }
            }

            v215 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "mmcs");
            objc_msgSend(v20, "objectForKeyedSubscript:", v215);
            v216 = (void *)objc_claimAutoreleasedReturnValue();
            if (v216)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v216, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_mmcs);
                v217 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v216, v217);

                v40 = 1;
              }
            }

            v218 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "mail");
            objc_msgSend(v20, "objectForKeyedSubscript:", v218);
            v219 = (void *)objc_claimAutoreleasedReturnValue();
            if (v219)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v219, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_mail);
                v220 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v219, v220);

                v40 = 1;
              }
            }

            v221 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "facetime");
            objc_msgSend(v20, "objectForKeyedSubscript:", v221);
            v222 = (void *)objc_claimAutoreleasedReturnValue();
            if (v222)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v222, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_facetime);
                v223 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v222, v223);

                v40 = 1;
              }
            }

            v224 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "adplatforms");
            objc_msgSend(v20, "objectForKeyedSubscript:", v224);
            v225 = (void *)objc_claimAutoreleasedReturnValue();
            if (v225)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v225, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_adplatforms);
                v226 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v225, v226);

                v40 = 1;
              }
            }

            v227 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "corelocation");
            objc_msgSend(v20, "objectForKeyedSubscript:", v227);
            v228 = (void *)objc_claimAutoreleasedReturnValue();
            if (v228)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v228, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_corelocation);
                v229 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v228, v229);

                v40 = 1;
              }
            }

            v230 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "airplay_sender");
            objc_msgSend(v20, "objectForKeyedSubscript:", v230);
            v231 = (void *)objc_claimAutoreleasedReturnValue();
            if (v231)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v231, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_airplay_sender);
                v232 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v231, v232);

                v40 = 1;
              }
            }

            v233 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "airplay_receiver");
            objc_msgSend(v20, "objectForKeyedSubscript:", v233);
            v234 = (void *)objc_claimAutoreleasedReturnValue();
            if (v234)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v234, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_airplay_receiver);
                v235 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v234, v235);

                v40 = 1;
              }
            }

            v236 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "maps");
            objc_msgSend(v20, "objectForKeyedSubscript:", v236);
            v237 = (void *)objc_claimAutoreleasedReturnValue();
            if (v237)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v237, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_maps);
                v238 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v237, v238);

                v40 = 1;
              }
            }

            v239 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "maps_internal");
            objc_msgSend(v20, "objectForKeyedSubscript:", v239);
            v240 = (void *)objc_claimAutoreleasedReturnValue();
            if (v240)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v240, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_maps_internal);
                v241 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v240, v241);

                v40 = 1;
              }
            }

            v242 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "maps_external");
            objc_msgSend(v20, "objectForKeyedSubscript:", v242);
            v243 = (void *)objc_claimAutoreleasedReturnValue();
            if (v243)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v243, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_maps_external);
                v244 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v243, v244);

                v40 = 1;
              }
            }

            v245 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "network_speed_test");
            objc_msgSend(v20, "objectForKeyedSubscript:", v245);
            v246 = (void *)objc_claimAutoreleasedReturnValue();
            if (v246)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v246, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_network_speed_test);
                v247 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v246, v247);

                v40 = 1;
              }
            }

            v248 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "captive");
            objc_msgSend(v20, "objectForKeyedSubscript:", v248);
            v249 = (void *)objc_claimAutoreleasedReturnValue();
            if (v249)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v249, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_captive);
                v250 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v249, v250);

                v40 = 1;
              }
            }

            v251 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "safe_browsing");
            objc_msgSend(v20, "objectForKeyedSubscript:", v251);
            v252 = (void *)objc_claimAutoreleasedReturnValue();
            if (v252)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v252, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_safe_browsing);
                v253 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v252, v253);

                v40 = 1;
              }
            }

            v254 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "dns");
            objc_msgSend(v20, "objectForKeyedSubscript:", v254);
            v255 = (void *)objc_claimAutoreleasedReturnValue();
            if (v255)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v255, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_dns);
                v256 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v255, v256);

                v40 = 1;
              }
            }

            v257 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "music");
            objc_msgSend(v20, "objectForKeyedSubscript:", v257);
            v258 = (void *)objc_claimAutoreleasedReturnValue();
            if (v258)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v258, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_music);
                v259 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v258, v259);

                v40 = 1;
              }
            }

            v260 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "battery");
            objc_msgSend(v20, "objectForKeyedSubscript:", v260);
            v261 = (void *)objc_claimAutoreleasedReturnValue();
            if (v261)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v261, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_battery);
                v262 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v261, v262);

                v40 = 1;
              }
            }

            v263 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "cloud_media_services");
            objc_msgSend(v20, "objectForKeyedSubscript:", v263);
            v264 = (void *)objc_claimAutoreleasedReturnValue();
            if (v264)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v264, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_cloud_media_services);
                v265 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v264, v265);

                v40 = 1;
              }
            }

            v266 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "avconference");
            objc_msgSend(v20, "objectForKeyedSubscript:", v266);
            v267 = (void *)objc_claimAutoreleasedReturnValue();
            if (v267)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v267, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_avconference);
                v268 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v267, v268);

                v40 = 1;
              }
            }

            v269 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "appstore");
            objc_msgSend(v20, "objectForKeyedSubscript:", v269);
            v270 = (void *)objc_claimAutoreleasedReturnValue();
            if (v270)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v270, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_appstore);
                v271 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v270, v271);

                v40 = 1;
              }
            }

            v272 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "telephony_service");
            objc_msgSend(v20, "objectForKeyedSubscript:", v272);
            v273 = (void *)objc_claimAutoreleasedReturnValue();
            if (v273)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v273, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_telephony_service);
                v274 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v273, v274);

                v40 = 1;
              }
            }

            v275 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "network_experiments");
            objc_msgSend(v20, "objectForKeyedSubscript:", v275);
            v276 = (void *)objc_claimAutoreleasedReturnValue();
            if (v276)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v276, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_network_experiments);
                v277 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v276, v277);

                v40 = 1;
              }
            }

            v278 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "network_perf");
            objc_msgSend(v20, "objectForKeyedSubscript:", v278);
            v279 = (void *)objc_claimAutoreleasedReturnValue();
            if (v279)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v279, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_network_perf);
                v280 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v279, v280);

                v40 = 1;
              }
            }

            v281 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "hotspot");
            objc_msgSend(v20, "objectForKeyedSubscript:", v281);
            v282 = (void *)objc_claimAutoreleasedReturnValue();
            if (v282)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v282, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_hotspot);
                v283 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v282, v283);

                v40 = 1;
              }
            }

            v284 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "weather");
            objc_msgSend(v20, "objectForKeyedSubscript:", v284);
            v285 = (void *)objc_claimAutoreleasedReturnValue();
            if (v285)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v285, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_weather);
                v286 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v285, v286);

                v40 = 1;
              }
            }

            v287 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "coordination");
            objc_msgSend(v20, "objectForKeyedSubscript:", v287);
            v288 = (void *)objc_claimAutoreleasedReturnValue();
            if (v288)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v288, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_coordination);
                v289 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v288, v289);

                v40 = 1;
              }
            }

            v290 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "appstore_jet");
            objc_msgSend(v20, "objectForKeyedSubscript:", v290);
            v291 = (void *)objc_claimAutoreleasedReturnValue();
            if (v291)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v291, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_appstore_jet);
                v292 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v291, v292);

                v40 = 1;
              }
            }

            v293 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "soundboard");
            objc_msgSend(v20, "objectForKeyedSubscript:", v293);
            v294 = (void *)objc_claimAutoreleasedReturnValue();
            if (v294)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v294, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_soundboard);
                v295 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v294, v295);

                v40 = 1;
              }
            }

            v296 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "aea");
            objc_msgSend(v20, "objectForKeyedSubscript:", v296);
            v297 = (void *)objc_claimAutoreleasedReturnValue();
            if (v297)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v297, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_aea);
                v298 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v297, v298);

                v40 = 1;
              }
            }

            v299 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "homekit");
            objc_msgSend(v20, "objectForKeyedSubscript:", v299);
            v300 = (void *)objc_claimAutoreleasedReturnValue();
            if (v300)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v300, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_homekit);
                v301 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v300, v301);

                v40 = 1;
              }
            }

            v302 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "wifi");
            objc_msgSend(v20, "objectForKeyedSubscript:", v302);
            v303 = (void *)objc_claimAutoreleasedReturnValue();
            if (v303)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v303, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_wifi);
                v304 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v303, v304);

                v40 = 1;
              }
            }

            v305 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "app_launch");
            objc_msgSend(v20, "objectForKeyedSubscript:", v305);
            v306 = (void *)objc_claimAutoreleasedReturnValue();
            if (v306)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v306, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_app_launch);
                v307 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v306, v307);

                v40 = 1;
              }
            }

            v308 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "ams");
            objc_msgSend(v20, "objectForKeyedSubscript:", v308);
            v309 = (void *)objc_claimAutoreleasedReturnValue();
            if (v309)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v309, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_ams);
                v310 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v309, v310);

                v40 = 1;
              }
            }

            v311 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "reve");
            objc_msgSend(v20, "objectForKeyedSubscript:", v311);
            v312 = (void *)objc_claimAutoreleasedReturnValue();
            if (v312)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v312, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_reve);
                v313 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v312, v313);

                v40 = 1;
              }
            }

            v314 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "network_quality");
            objc_msgSend(v20, "objectForKeyedSubscript:", v314);
            v315 = (void *)objc_claimAutoreleasedReturnValue();
            if (v315)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v315, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_network_quality);
                v316 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v315, v316);

                v40 = 1;
              }
            }

            v317 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "news");
            objc_msgSend(v20, "objectForKeyedSubscript:", v317);
            v318 = (void *)objc_claimAutoreleasedReturnValue();
            if (v318)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v318, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_news);
                v319 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v318, v319);

                v40 = 1;
              }
            }

            v320 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "cloud_compute");
            objc_msgSend(v20, "objectForKeyedSubscript:", v320);
            v321 = (void *)objc_claimAutoreleasedReturnValue();
            if (v321)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v321, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_cloud_compute);
                v322 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v321, v322);

                v40 = 1;
              }
            }

            v323 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "push");
            objc_msgSend(v20, "objectForKeyedSubscript:", v323);
            v324 = (void *)objc_claimAutoreleasedReturnValue();
            if (v324)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v324, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_push);
                v325 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v324, v325);

                v40 = 1;
              }
            }

            v326 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "nw_actor_system");
            objc_msgSend(v20, "objectForKeyedSubscript:", v326);
            v327 = (void *)objc_claimAutoreleasedReturnValue();
            if (v327)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v327, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_nw_actor_system);
                v328 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v327, v328);

                v40 = 1;
              }
            }

            v329 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "app_intents_services");
            objc_msgSend(v20, "objectForKeyedSubscript:", v329);
            v330 = (void *)objc_claimAutoreleasedReturnValue();
            if (v330)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v330, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_app_intents_services);
                v331 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v330, v331);

                v40 = 1;
              }
            }

            v332 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "stocks");
            objc_msgSend(v20, "objectForKeyedSubscript:", v332);
            v333 = (void *)objc_claimAutoreleasedReturnValue();
            if (v333)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v333, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_stocks);
                v334 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v333, v334);

                v40 = 1;
              }
            }

            v335 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("activity_rate_den_%s_%s"), "ios", "tv_app");
            objc_msgSend(v20, "objectForKeyedSubscript:", v335);
            v336 = (void *)objc_claimAutoreleasedReturnValue();
            if (v336)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && (objc_msgSend(v336, "longLongValue") & 0x8000000000000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_tv_app);
                v337 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v336, v337);

                v40 = 1;
              }
            }

            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_destination);
            v338 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "objectForKeyedSubscript:", v338);
            v339 = (void *)objc_claimAutoreleasedReturnValue();

            if (v339)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_destination);
                v340 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v339, v340);

                v40 = 1;
              }
            }

            v341 = objc_alloc(MEMORY[0x1E0CB3940]);
            v342 = (void *)objc_msgSend(v341, "initWithFormat:", CFSTR("%s_%s"), nw_setting_activity_default_numerator_old1, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v342);
            v343 = (void *)objc_claimAutoreleasedReturnValue();
            if (v343)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_default_numerator_old1);
                v344 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v343, v344);

                v40 = 1;
              }
            }

            v345 = objc_alloc(MEMORY[0x1E0CB3940]);
            v346 = (void *)objc_msgSend(v345, "initWithFormat:", CFSTR("%s_%s"), nw_setting_activity_default_denominator_old1, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v346);
            v347 = (void *)objc_claimAutoreleasedReturnValue();
            if (v347)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_default_denominator_old1);
                v348 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v347, v348);

                v40 = 1;
              }
            }

            v349 = objc_alloc(MEMORY[0x1E0CB3940]);
            v350 = (void *)objc_msgSend(v349, "initWithFormat:", CFSTR("%s_%s"), nw_setting_activity_default_numerator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v350);
            v351 = (void *)objc_claimAutoreleasedReturnValue();
            if (v351)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_default_numerator);
                v352 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v351, v352);

                v40 = 1;
              }
            }

            v353 = objc_alloc(MEMORY[0x1E0CB3940]);
            v354 = (void *)objc_msgSend(v353, "initWithFormat:", CFSTR("%s_%s"), nw_setting_activity_default_denominator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v354);
            v355 = (void *)objc_claimAutoreleasedReturnValue();
            if (v355)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_default_denominator);
                v356 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v355, v356);

                v40 = 1;
              }
            }

            v357 = objc_alloc(MEMORY[0x1E0CB3940]);
            v358 = (void *)objc_msgSend(v357, "initWithFormat:", CFSTR("%s_%s"), nw_setting_statistics_report_numerator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v358);
            v359 = (void *)objc_claimAutoreleasedReturnValue();
            if (v359)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_statistics_report_numerator);
                v360 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v359, v360);

                v40 = 1;
              }
            }

            v361 = objc_alloc(MEMORY[0x1E0CB3940]);
            v362 = (void *)objc_msgSend(v361, "initWithFormat:", CFSTR("%s_%s"), nw_setting_statistics_report_denominator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v362);
            v363 = (void *)objc_claimAutoreleasedReturnValue();
            if (v363)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_statistics_report_denominator);
                v364 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v363, v364);

                v40 = 1;
              }
            }

            v365 = objc_alloc(MEMORY[0x1E0CB3940]);
            v366 = (void *)objc_msgSend(v365, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_svcb, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v366);
            v367 = (void *)objc_claimAutoreleasedReturnValue();
            if (v367)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_svcb);
                v368 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v367, v368);

                v40 = 1;
              }
            }

            v369 = objc_alloc(MEMORY[0x1E0CB3940]);
            v370 = (void *)objc_msgSend(v369, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_svcb_router, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v370);
            v371 = (void *)objc_claimAutoreleasedReturnValue();
            if (v371)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_svcb_router);
                v372 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v371, v372);

                v40 = 1;
              }
            }

            v373 = objc_alloc(MEMORY[0x1E0CB3940]);
            v374 = (void *)objc_msgSend(v373, "initWithFormat:", CFSTR("%s_%s"), nw_setting_activity_elevated_numerator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v374);
            v375 = (void *)objc_claimAutoreleasedReturnValue();
            if (v375)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_elevated_numerator);
                v376 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v375, v376);

                v40 = 1;
              }
            }

            v377 = objc_alloc(MEMORY[0x1E0CB3940]);
            v378 = (void *)objc_msgSend(v377, "initWithFormat:", CFSTR("%s_%s"), nw_setting_activity_elevated_denominator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v378);
            v379 = (void *)objc_claimAutoreleasedReturnValue();
            if (v379)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_elevated_denominator);
                v380 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v379, v380);

                v40 = 1;
              }
            }

            v381 = objc_alloc(MEMORY[0x1E0CB3940]);
            v382 = (void *)objc_msgSend(v381, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_old1, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v382);
            v383 = (void *)objc_claimAutoreleasedReturnValue();
            if (v383)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old1);
                v384 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v383, v384);

                v40 = 1;
              }
            }

            v385 = objc_alloc(MEMORY[0x1E0CB3940]);
            v386 = (void *)objc_msgSend(v385, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_race_old1, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v386);
            v387 = (void *)objc_claimAutoreleasedReturnValue();
            if (v387)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old1);
                v388 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v387, v388);

                v40 = 1;
              }
            }

            v389 = objc_alloc(MEMORY[0x1E0CB3940]);
            v390 = (void *)objc_msgSend(v389, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_numerator_old1, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v390);
            v391 = (void *)objc_claimAutoreleasedReturnValue();
            if (v391)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old1);
                v392 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v391, v392);

                v40 = 1;
              }
            }

            v393 = objc_alloc(MEMORY[0x1E0CB3940]);
            v394 = (void *)objc_msgSend(v393, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_denominator_old1, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v394);
            v395 = (void *)objc_claimAutoreleasedReturnValue();
            if (v395)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old1);
                v396 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v395, v396);

                v40 = 1;
              }
            }

            v397 = objc_alloc(MEMORY[0x1E0CB3940]);
            v398 = (void *)objc_msgSend(v397, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_old2, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v398);
            v399 = (void *)objc_claimAutoreleasedReturnValue();
            if (v399)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old2);
                v400 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v399, v400);

                v40 = 1;
              }
            }

            v401 = objc_alloc(MEMORY[0x1E0CB3940]);
            v402 = (void *)objc_msgSend(v401, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_race_old2, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v402);
            v403 = (void *)objc_claimAutoreleasedReturnValue();
            if (v403)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old2);
                v404 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v403, v404);

                v40 = 1;
              }
            }

            v405 = objc_alloc(MEMORY[0x1E0CB3940]);
            v406 = (void *)objc_msgSend(v405, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_numerator_old2, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v406);
            v407 = (void *)objc_claimAutoreleasedReturnValue();
            if (v407)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old2);
                v408 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v407, v408);

                v40 = 1;
              }
            }

            v409 = objc_alloc(MEMORY[0x1E0CB3940]);
            v410 = (void *)objc_msgSend(v409, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_denominator_old2, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v410);
            v411 = (void *)objc_claimAutoreleasedReturnValue();
            if (v411)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old2);
                v412 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v411, v412);

                v40 = 1;
              }
            }

            v413 = objc_alloc(MEMORY[0x1E0CB3940]);
            v414 = (void *)objc_msgSend(v413, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_old3, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v414);
            v415 = (void *)objc_claimAutoreleasedReturnValue();
            if (v415)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old3);
                v416 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v415, v416);

                v40 = 1;
              }
            }

            v417 = objc_alloc(MEMORY[0x1E0CB3940]);
            v418 = (void *)objc_msgSend(v417, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_race_old3, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v418);
            v419 = (void *)objc_claimAutoreleasedReturnValue();
            if (v419)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old3);
                v420 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v419, v420);

                v40 = 1;
              }
            }

            v421 = objc_alloc(MEMORY[0x1E0CB3940]);
            v422 = (void *)objc_msgSend(v421, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_numerator_old3, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v422);
            v423 = (void *)objc_claimAutoreleasedReturnValue();
            if (v423)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old3);
                v424 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v423, v424);

                v40 = 1;
              }
            }

            v425 = objc_alloc(MEMORY[0x1E0CB3940]);
            v426 = (void *)objc_msgSend(v425, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_denominator_old3, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v426);
            v427 = (void *)objc_claimAutoreleasedReturnValue();
            if (v427)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old3);
                v428 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v427, v428);

                v40 = 1;
              }
            }

            v429 = objc_alloc(MEMORY[0x1E0CB3940]);
            v430 = (void *)objc_msgSend(v429, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_old4, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v430);
            v431 = (void *)objc_claimAutoreleasedReturnValue();
            if (v431)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old4);
                v432 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v431, v432);

                v40 = 1;
              }
            }

            v433 = objc_alloc(MEMORY[0x1E0CB3940]);
            v434 = (void *)objc_msgSend(v433, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_race_old4, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v434);
            v435 = (void *)objc_claimAutoreleasedReturnValue();
            if (v435)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old4);
                v436 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v435, v436);

                v40 = 1;
              }
            }

            v437 = objc_alloc(MEMORY[0x1E0CB3940]);
            v438 = (void *)objc_msgSend(v437, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_numerator_old4, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v438);
            v439 = (void *)objc_claimAutoreleasedReturnValue();
            if (v439)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old4);
                v440 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v439, v440);

                v40 = 1;
              }
            }

            v441 = objc_alloc(MEMORY[0x1E0CB3940]);
            v442 = (void *)objc_msgSend(v441, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_denominator_old4, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v442);
            v443 = (void *)objc_claimAutoreleasedReturnValue();
            if (v443)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old4);
                v444 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v443, v444);

                v40 = 1;
              }
            }

            v445 = objc_alloc(MEMORY[0x1E0CB3940]);
            v446 = (void *)objc_msgSend(v445, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_old5, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v446);
            v447 = (void *)objc_claimAutoreleasedReturnValue();
            if (v447)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old5);
                v448 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v447, v448);

                v40 = 1;
              }
            }

            v449 = objc_alloc(MEMORY[0x1E0CB3940]);
            v450 = (void *)objc_msgSend(v449, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_race_old5, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v450);
            v451 = (void *)objc_claimAutoreleasedReturnValue();
            if (v451)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old5);
                v452 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v451, v452);

                v40 = 1;
              }
            }

            v453 = objc_alloc(MEMORY[0x1E0CB3940]);
            v454 = (void *)objc_msgSend(v453, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_numerator_old5, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v454);
            v455 = (void *)objc_claimAutoreleasedReturnValue();
            if (v455)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old5);
                v456 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v455, v456);

                v40 = 1;
              }
            }

            v457 = objc_alloc(MEMORY[0x1E0CB3940]);
            v458 = (void *)objc_msgSend(v457, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_denominator_old5, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v458);
            v459 = (void *)objc_claimAutoreleasedReturnValue();
            if (v459)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old5);
                v460 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v459, v460);

                v40 = 1;
              }
            }

            v461 = objc_alloc(MEMORY[0x1E0CB3940]);
            v462 = (void *)objc_msgSend(v461, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_old6, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v462);
            v463 = (void *)objc_claimAutoreleasedReturnValue();
            if (v463)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old6);
                v464 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v463, v464);

                v40 = 1;
              }
            }

            v465 = objc_alloc(MEMORY[0x1E0CB3940]);
            v466 = (void *)objc_msgSend(v465, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_race_old6, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v466);
            v467 = (void *)objc_claimAutoreleasedReturnValue();
            if (v467)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old6);
                v468 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v467, v468);

                v40 = 1;
              }
            }

            v469 = objc_alloc(MEMORY[0x1E0CB3940]);
            v470 = (void *)objc_msgSend(v469, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_numerator_old6, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v470);
            v471 = (void *)objc_claimAutoreleasedReturnValue();
            if (v471)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old6);
                v472 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v471, v472);

                v40 = 1;
              }
            }

            v473 = objc_alloc(MEMORY[0x1E0CB3940]);
            v474 = (void *)objc_msgSend(v473, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_denominator_old6, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v474);
            v475 = (void *)objc_claimAutoreleasedReturnValue();
            if (v475)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old6);
                v476 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v475, v476);

                v40 = 1;
              }
            }

            v477 = objc_alloc(MEMORY[0x1E0CB3940]);
            v478 = (void *)objc_msgSend(v477, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_old7, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v478);
            v479 = (void *)objc_claimAutoreleasedReturnValue();
            if (v479)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old7);
                v480 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v479, v480);

                v40 = 1;
              }
            }

            v481 = objc_alloc(MEMORY[0x1E0CB3940]);
            v482 = (void *)objc_msgSend(v481, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_race_old7, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v482);
            v483 = (void *)objc_claimAutoreleasedReturnValue();
            if (v483)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old7);
                v484 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v483, v484);

                v40 = 1;
              }
            }

            v485 = objc_alloc(MEMORY[0x1E0CB3940]);
            v486 = (void *)objc_msgSend(v485, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_numerator_old7, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v486);
            v487 = (void *)objc_claimAutoreleasedReturnValue();
            if (v487)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old7);
                v488 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v487, v488);

                v40 = 1;
              }
            }

            v489 = objc_alloc(MEMORY[0x1E0CB3940]);
            v490 = (void *)objc_msgSend(v489, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_denominator_old7, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v490);
            v491 = (void *)objc_claimAutoreleasedReturnValue();
            if (v491)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old7);
                v492 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v491, v492);

                v40 = 1;
              }
            }

            v493 = objc_alloc(MEMORY[0x1E0CB3940]);
            v494 = (void *)objc_msgSend(v493, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v494);
            v495 = (void *)objc_claimAutoreleasedReturnValue();
            if (v495)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic);
                v496 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v495, v496);

                v40 = 1;
              }
            }

            v497 = objc_alloc(MEMORY[0x1E0CB3940]);
            v498 = (void *)objc_msgSend(v497, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_quic_race, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v498);
            v499 = (void *)objc_claimAutoreleasedReturnValue();
            if (v499)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race);
                v500 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v499, v500);

                v40 = 1;
              }
            }

            v501 = objc_alloc(MEMORY[0x1E0CB3940]);
            v502 = (void *)objc_msgSend(v501, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_numerator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v502);
            v503 = (void *)objc_claimAutoreleasedReturnValue();
            if (v503)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator);
                v504 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v503, v504);

                v40 = 1;
              }
            }

            v505 = objc_alloc(MEMORY[0x1E0CB3940]);
            v506 = (void *)objc_msgSend(v505, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_quic_denominator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v506);
            v507 = (void *)objc_claimAutoreleasedReturnValue();
            if (v507)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator);
                v508 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v507, v508);

                v40 = 1;
              }
            }

            v509 = objc_alloc(MEMORY[0x1E0CB3940]);
            v510 = (void *)objc_msgSend(v509, "initWithFormat:", CFSTR("%s_%s"), nw_setting_ech_probe_numerator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v510);
            v511 = (void *)objc_claimAutoreleasedReturnValue();
            if (v511)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_ech_probe_numerator);
                v512 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v511, v512);

                v40 = 1;
              }
            }

            v513 = objc_alloc(MEMORY[0x1E0CB3940]);
            v514 = (void *)objc_msgSend(v513, "initWithFormat:", CFSTR("%s_%s"), nw_setting_ech_probe_denominator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v514);
            v515 = (void *)objc_claimAutoreleasedReturnValue();
            if (v515)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_ech_probe_denominator);
                v516 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v515, v516);

                v40 = 1;
              }
            }

            v517 = objc_alloc(MEMORY[0x1E0CB3940]);
            v518 = (void *)objc_msgSend(v517, "initWithFormat:", CFSTR("%s_%s"), nw_setting_ech_canary_numerator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v518);
            v519 = (void *)objc_claimAutoreleasedReturnValue();
            if (v519)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_ech_canary_numerator);
                v520 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v519, v520);

                v40 = 1;
              }
            }

            v521 = objc_alloc(MEMORY[0x1E0CB3940]);
            v522 = (void *)objc_msgSend(v521, "initWithFormat:", CFSTR("%s_%s"), nw_setting_ech_canary_denominator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v522);
            v523 = (void *)objc_claimAutoreleasedReturnValue();
            if (v523)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_ech_canary_denominator);
                v524 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v523, v524);

                v40 = 1;
              }
            }

            v525 = objc_alloc(MEMORY[0x1E0CB3940]);
            v526 = (void *)objc_msgSend(v525, "initWithFormat:", CFSTR("%s_%s"), nw_setting_flow_report_numerator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v526);
            v527 = (void *)objc_claimAutoreleasedReturnValue();
            if (v527)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_flow_report_numerator);
                v528 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v527, v528);

                v40 = 1;
              }
            }

            v529 = objc_alloc(MEMORY[0x1E0CB3940]);
            v530 = (void *)objc_msgSend(v529, "initWithFormat:", CFSTR("%s_%s"), nw_setting_flow_report_denominator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v530);
            v531 = (void *)objc_claimAutoreleasedReturnValue();
            if (v531)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_flow_report_denominator);
                v532 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v531, v532);

                v40 = 1;
              }
            }

            v533 = objc_alloc(MEMORY[0x1E0CB3940]);
            v534 = (void *)objc_msgSend(v533, "initWithFormat:", CFSTR("%s_%s"), nw_setting_proxy_race_report_numerator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v534);
            v535 = (void *)objc_claimAutoreleasedReturnValue();
            if (v535)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_proxy_race_report_numerator);
                v536 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v535, v536);

                v40 = 1;
              }
            }

            v537 = objc_alloc(MEMORY[0x1E0CB3940]);
            v538 = (void *)objc_msgSend(v537, "initWithFormat:", CFSTR("%s_%s"), nw_setting_proxy_race_report_denominator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v538);
            v539 = (void *)objc_claimAutoreleasedReturnValue();
            if (v539)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_proxy_race_report_denominator);
                v540 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v539, v540);

                v40 = 1;
              }
            }

            v541 = objc_alloc(MEMORY[0x1E0CB3940]);
            v542 = (void *)objc_msgSend(v541, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_l4s_numerator_old1, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v542);
            v543 = (void *)objc_claimAutoreleasedReturnValue();
            if (v543)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_l4s_numerator_old1);
                v544 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v543, v544);

                v40 = 1;
              }
            }

            v545 = objc_alloc(MEMORY[0x1E0CB3940]);
            v546 = (void *)objc_msgSend(v545, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_l4s_denominator_old1, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v546);
            v547 = (void *)objc_claimAutoreleasedReturnValue();
            if (v547)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_l4s_denominator_old1);
                v548 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v547, v548);

                v40 = 1;
              }
            }

            v549 = objc_alloc(MEMORY[0x1E0CB3940]);
            v550 = (void *)objc_msgSend(v549, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_l4s_numerator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v550);
            v551 = (void *)objc_claimAutoreleasedReturnValue();
            if (v551)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_l4s_numerator);
                v552 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v551, v552);

                v40 = 1;
              }
            }

            v553 = objc_alloc(MEMORY[0x1E0CB3940]);
            v554 = (void *)objc_msgSend(v553, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_l4s_denominator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v554);
            v555 = (void *)objc_claimAutoreleasedReturnValue();
            if (v555)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_l4s_denominator);
                v556 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v555, v556);

                v40 = 1;
              }
            }

            v557 = objc_alloc(MEMORY[0x1E0CB3940]);
            v558 = (void *)objc_msgSend(v557, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_accurate_ecn_numerator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v558);
            v559 = (void *)objc_claimAutoreleasedReturnValue();
            if (v559)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_accurate_ecn_numerator);
                v560 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v559, v560);

                v40 = 1;
              }
            }

            v561 = objc_alloc(MEMORY[0x1E0CB3940]);
            v562 = (void *)objc_msgSend(v561, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_accurate_ecn_denominator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v562);
            v563 = (void *)objc_claimAutoreleasedReturnValue();
            if (v563)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_accurate_ecn_denominator);
                v564 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v563, v564);

                v40 = 1;
              }
            }

            v565 = objc_alloc(MEMORY[0x1E0CB3940]);
            v566 = (void *)objc_msgSend(v565, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_tcp_l4s_numerator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v566);
            v567 = (void *)objc_claimAutoreleasedReturnValue();
            if (v567)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_tcp_l4s_numerator);
                v568 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v567, v568);

                v40 = 1;
              }
            }

            v569 = objc_alloc(MEMORY[0x1E0CB3940]);
            v570 = (void *)objc_msgSend(v569, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_tcp_l4s_denominator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v570);
            v571 = (void *)objc_claimAutoreleasedReturnValue();
            if (v571)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_tcp_l4s_denominator);
                v572 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v571, v572);

                v40 = 1;
              }
            }

            v573 = objc_alloc(MEMORY[0x1E0CB3940]);
            v574 = (void *)objc_msgSend(v573, "initWithFormat:", CFSTR("%s_%s"), nw_setting_disable_l4s_aqm, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v574);
            v575 = (void *)objc_claimAutoreleasedReturnValue();
            if (v575)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_l4s_aqm);
                v576 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v575, v576);

                v40 = 1;
              }
            }

            v577 = objc_alloc(MEMORY[0x1E0CB3940]);
            v578 = (void *)objc_msgSend(v577, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_unified_http_numerator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v578);
            v579 = (void *)objc_claimAutoreleasedReturnValue();
            if (v579)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_unified_http_numerator);
                v580 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v579, v580);

                v40 = 1;
              }
            }

            v581 = objc_alloc(MEMORY[0x1E0CB3940]);
            v582 = (void *)objc_msgSend(v581, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_unified_http_denominator, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v582);
            v583 = (void *)objc_claimAutoreleasedReturnValue();
            if (v583)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_unified_http_denominator);
                v584 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v583, v584);

                v40 = 1;
              }
            }

            v585 = objc_alloc(MEMORY[0x1E0CB3940]);
            v586 = (void *)objc_msgSend(v585, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_unified_http_numerator_old, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v586);
            v587 = (void *)objc_claimAutoreleasedReturnValue();
            if (v587)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_unified_http_numerator_old);
                v588 = (void *)objc_claimAutoreleasedReturnValue();
                -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v587, v588);

                v40 = 1;
              }
            }

            v589 = objc_alloc(MEMORY[0x1E0CB3940]);
            v590 = (void *)objc_msgSend(v589, "initWithFormat:", CFSTR("%s_%s"), nw_setting_enable_unified_http_denominator_old, "ios");
            objc_msgSend(v20, "objectForKeyedSubscript:", v590);
            v591 = (void *)objc_claimAutoreleasedReturnValue();
            if (v591 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_unified_http_denominator_old);
              v592 = (void *)objc_claimAutoreleasedReturnValue();
              -[NSObject setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v591, v592);

            }
            else
            {

              if (!v40)
              {
                v5 = (id *)&unk_1ECD84000;
                goto LABEL_17;
              }
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v5 = (id *)&unk_1ECD84000;
            v593 = (id)gLogObj;
            if (os_log_type_enabled(v593, OS_LOG_TYPE_DEBUG))
            {
              buf = 136446210;
              v629 = "nwphCheckMobileAsset_block_invoke";
              _os_log_impl(&dword_182FBE000, v593, OS_LOG_TYPE_DEBUG, "%{public}s Some new setting was found", (uint8_t *)&buf, 0xCu);
            }

            v15 = +[ManagedNetworkSettings sharedMNS](ManagedNetworkSettings, "sharedMNS");
            objc_msgSend(v15, "queue");
            v16 = objc_claimAutoreleasedReturnValue();
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 3221225472;
            block[2] = __nwphCheckMobileAsset_block_invoke_321;
            block[3] = &unk_1E14ACFD0;
            v17 = v17;
            v619 = v17;
            dispatch_async(v16, block);

          }
          else if (v36)
          {
            buf = 136446466;
            v629 = "nwphCheckMobileAsset_block_invoke_2";
            v630 = 2114;
            v631 = (uint64_t)v20;
            _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Asset attributes do not contain ActivityRateVersion: %{public}@", (uint8_t *)&buf, 0x16u);
          }
LABEL_17:

          v14 = v613 + 1;
          v13 = v614;
        }
        while (v612 != v613 + 1);
        v612 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v623, v627, 16);
        if (!v612)
        {

          a1 = v607;
          v4 = v608;
          v12 = v609;
          break;
        }
      }
    }

    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v594 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v594, CFSTR("LastAttempt"));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v594, CFSTR("LastSuccess"));
    v595 = objc_msgSend(v12, "writeToFile:atomically:", CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist"), 1);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v596 = v5[463];
    v597 = v596;
    if (v595)
    {
      if (os_log_type_enabled(v596, OS_LOG_TYPE_DEFAULT))
      {
        buf = 136446210;
        v629 = "nwphCheckMobileAsset_block_invoke";
        _os_log_impl(&dword_182FBE000, v597, OS_LOG_TYPE_DEFAULT, "%{public}s Saved successful mobile asset load date to disk", (uint8_t *)&buf, 0xCu);
      }

LABEL_667:
      goto LABEL_668;
    }
    buf = 136446722;
    v629 = "nwphCheckMobileAsset_block_invoke";
    v630 = 2114;
    v631 = (uint64_t)v12;
    v632 = 2114;
    v633 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
    v598 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v616 = 0;
    if (!__nwlog_fault((const char *)v598, &type, &v616))
    {
LABEL_665:
      if (v598)
        free(v598);
      goto LABEL_667;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v599 = v5[463];
      v600 = type;
      if (os_log_type_enabled(v599, type))
      {
        buf = 136446722;
        v629 = "nwphCheckMobileAsset_block_invoke";
        v630 = 2114;
        v631 = (uint64_t)v12;
        v632 = 2114;
        v633 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
        v601 = "%{public}s Failed to save mobile asset networknomicon success %{public}@ to \"%{public}@\"";
LABEL_662:
        v605 = v599;
        v606 = v600;
LABEL_663:
        _os_log_impl(&dword_182FBE000, v605, v606, v601, (uint8_t *)&buf, 0x20u);
      }
    }
    else
    {
      if (v616)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v599 = v5[463];
        v603 = type;
        v604 = os_log_type_enabled(v599, type);
        if (backtrace_string)
        {
          if (v604)
          {
            buf = 136446978;
            v629 = "nwphCheckMobileAsset_block_invoke";
            v630 = 2114;
            v631 = (uint64_t)v12;
            v632 = 2114;
            v633 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
            v634 = 2082;
            v635 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v599, v603, "%{public}s Failed to save mobile asset networknomicon success %{public}@ to \"%{public}@\", dumping backtrace:%{public}s", (uint8_t *)&buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_665;
        }
        if (!v604)
          goto LABEL_664;
        buf = 136446722;
        v629 = "nwphCheckMobileAsset_block_invoke";
        v630 = 2114;
        v631 = (uint64_t)v12;
        v632 = 2114;
        v633 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
        v601 = "%{public}s Failed to save mobile asset networknomicon success %{public}@ to \"%{public}@\", no backtrace";
        v605 = v599;
        v606 = v603;
        goto LABEL_663;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v599 = v5[463];
      v600 = type;
      if (os_log_type_enabled(v599, type))
      {
        buf = 136446722;
        v629 = "nwphCheckMobileAsset_block_invoke";
        v630 = 2114;
        v631 = (uint64_t)v12;
        v632 = 2114;
        v633 = CFSTR("/Library/Preferences/com.apple.networkd.networknomicon.plist");
        v601 = "%{public}s Failed to save mobile asset networknomicon success %{public}@ to \"%{public}@\", backtrace limit exceeded";
        goto LABEL_662;
      }
    }
LABEL_664:

    goto LABEL_665;
  }
LABEL_668:

}

void __nwphCheckMobileAsset_block_invoke_261(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  const char *v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  const __CFString *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithContentsOfFile:", CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist"));
  v2 = (id)objc_claimAutoreleasedReturnValue();
  if (!v2)
    v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("net.inet.tcp.ecn_setup_percentage"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
    || objc_msgSend(v3, "longLongValue") != *(_QWORD *)(a1 + 40))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 40));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("net.inet.tcp.ecn_setup_percentage"));

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 136446466;
      v28 = "nwphCheckMobileAsset_block_invoke";
      v29 = 2048;
      v30 = v6;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s Changing ECN Percentage to %lld", buf, 0x16u);
    }

    if ((objc_msgSend(v2, "writeToFile:atomically:", CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist"), 1) & 1) != 0)goto LABEL_20;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    v8 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v28 = "nwphCheckMobileAsset_block_invoke";
    v29 = 2114;
    v30 = v8;
    v31 = 2114;
    v32 = CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist");
    LODWORD(v24) = 32;
    v23 = buf;
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (!os_log_type_enabled(v10, type))
          goto LABEL_26;
        v12 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v28 = "nwphCheckMobileAsset_block_invoke";
        v29 = 2114;
        v30 = v12;
        v31 = 2114;
        v32 = CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist");
        v13 = "%{public}s Failed to save network settings %{public}@ to \"%{public}@\"";
LABEL_24:
        v20 = v10;
        v21 = v11;
        goto LABEL_25;
      }
      if (!v25)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (!os_log_type_enabled(v10, type))
          goto LABEL_26;
        v19 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v28 = "nwphCheckMobileAsset_block_invoke";
        v29 = 2114;
        v30 = v19;
        v31 = 2114;
        v32 = CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist");
        v13 = "%{public}s Failed to save network settings %{public}@ to \"%{public}@\", backtrace limit exceeded";
        goto LABEL_24;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (!v16)
        {
LABEL_26:

          if (!v9)
            goto LABEL_20;
          goto LABEL_19;
        }
        v22 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v28 = "nwphCheckMobileAsset_block_invoke";
        v29 = 2114;
        v30 = v22;
        v31 = 2114;
        v32 = CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist");
        v13 = "%{public}s Failed to save network settings %{public}@ to \"%{public}@\", no backtrace";
        v20 = v10;
        v21 = v15;
LABEL_25:
        _os_log_impl(&dword_182FBE000, v20, v21, v13, buf, 0x20u);
        goto LABEL_26;
      }
      if (v16)
      {
        v17 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446978;
        v28 = "nwphCheckMobileAsset_block_invoke";
        v29 = 2114;
        v30 = v17;
        v31 = 2114;
        v32 = CFSTR("/Library/Preferences/com.apple.networkd.sysctl.plist");
        v33 = 2082;
        v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s Failed to save network settings %{public}@ to \"%{public}@\", dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(backtrace_string);
    }
    if (!v9)
    {
LABEL_20:
      v18 = +[ManagedNetworkSettings sharedMNS](ManagedNetworkSettings, "sharedMNS", v23, v24);
      objc_msgSend(v18, "reloadMNS");

      goto LABEL_21;
    }
LABEL_19:
    free(v9);
    goto LABEL_20;
  }
LABEL_21:

}

void __nwphCheckMobileAsset_block_invoke_321(uint64_t a1)
{
  addNewNetworkdSettings(*(void **)(a1 + 32), 1);
}

void addNewNetworkdSettings(void *a1, int a2)
{
  id v3;
  const char *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  NSObject *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  NSObject *v61;
  void *v62;
  void *v63;
  NSObject *v64;
  void *v65;
  void *v66;
  NSObject *v67;
  void *v68;
  void *v69;
  NSObject *v70;
  void *v71;
  void *v72;
  NSObject *v73;
  void *v74;
  void *v75;
  NSObject *v76;
  void *v77;
  void *v78;
  NSObject *v79;
  void *v80;
  void *v81;
  NSObject *v82;
  void *v83;
  void *v84;
  NSObject *v85;
  void *v86;
  void *v87;
  NSObject *v88;
  void *v89;
  void *v90;
  NSObject *v91;
  void *v92;
  void *v93;
  NSObject *v94;
  void *v95;
  void *v96;
  NSObject *v97;
  void *v98;
  void *v99;
  NSObject *v100;
  void *v101;
  void *v102;
  NSObject *v103;
  void *v104;
  void *v105;
  NSObject *v106;
  void *v107;
  void *v108;
  NSObject *v109;
  void *v110;
  void *v111;
  NSObject *v112;
  void *v113;
  void *v114;
  NSObject *v115;
  void *v116;
  void *v117;
  NSObject *v118;
  void *v119;
  void *v120;
  NSObject *v121;
  void *v122;
  void *v123;
  NSObject *v124;
  void *v125;
  void *v126;
  NSObject *v127;
  void *v128;
  void *v129;
  NSObject *v130;
  void *v131;
  void *v132;
  NSObject *v133;
  void *v134;
  void *v135;
  NSObject *v136;
  void *v137;
  void *v138;
  NSObject *v139;
  void *v140;
  void *v141;
  NSObject *v142;
  void *v143;
  void *v144;
  NSObject *v145;
  void *v146;
  void *v147;
  NSObject *v148;
  void *v149;
  void *v150;
  NSObject *v151;
  void *v152;
  void *v153;
  NSObject *v154;
  void *v155;
  void *v156;
  NSObject *v157;
  void *v158;
  NSObject *v159;
  void *v160;
  NSObject *v161;
  void *v162;
  NSObject *v163;
  void *v164;
  NSObject *v165;
  void *v166;
  NSObject *v167;
  void *v168;
  NSObject *v169;
  void *v170;
  NSObject *v171;
  void *v172;
  NSObject *v173;
  void *v174;
  NSObject *v175;
  void *v176;
  NSObject *v177;
  void *v178;
  NSObject *v179;
  void *v180;
  NSObject *v181;
  void *v182;
  NSObject *v183;
  void *v184;
  NSObject *v185;
  void *v186;
  NSObject *v187;
  void *v188;
  NSObject *v189;
  void *v190;
  NSObject *v191;
  void *v192;
  NSObject *v193;
  void *v194;
  NSObject *v195;
  void *v196;
  NSObject *v197;
  void *v198;
  NSObject *v199;
  void *v200;
  NSObject *v201;
  void *v202;
  NSObject *v203;
  void *v204;
  NSObject *v205;
  void *v206;
  NSObject *v207;
  void *v208;
  NSObject *v209;
  void *v210;
  NSObject *v211;
  void *v212;
  NSObject *v213;
  void *v214;
  NSObject *v215;
  void *v216;
  NSObject *v217;
  void *v218;
  NSObject *v219;
  void *v220;
  NSObject *v221;
  void *v222;
  NSObject *v223;
  void *v224;
  NSObject *v225;
  void *v226;
  NSObject *v227;
  void *v228;
  NSObject *v229;
  void *v230;
  NSObject *v231;
  void *v232;
  NSObject *v233;
  void *v234;
  NSObject *v235;
  void *v236;
  NSObject *v237;
  void *v238;
  NSObject *v239;
  void *v240;
  NSObject *v241;
  void *v242;
  NSObject *v243;
  void *v244;
  NSObject *v245;
  void *v246;
  NSObject *v247;
  void *v248;
  NSObject *v249;
  void *v250;
  NSObject *v251;
  void *v252;
  NSObject *v253;
  void *v254;
  NSObject *v255;
  void *v256;
  NSObject *v257;
  void *v258;
  NSObject *v259;
  void *v260;
  NSObject *v261;
  void *v262;
  NSObject *v263;
  void *v264;
  NSObject *v265;
  void *v266;
  NSObject *v267;
  void *v268;
  NSObject *v269;
  void *v270;
  NSObject *v271;
  void *v272;
  NSObject *v273;
  void *v274;
  NSObject *v275;
  void *v276;
  NSObject *v277;
  void *v278;
  NSObject *v279;
  void *v280;
  NSObject *v281;
  void *v282;
  NSObject *v283;
  void *v284;
  void *v285;
  char *v286;
  NSObject *v287;
  id v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t i;
  uint64_t v293;
  void *v294;
  void *v295;
  char *v296;
  NSObject *v297;
  uint64_t v298;
  void *v299;
  int64_t int64;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  uint8_t v305[128];
  uint8_t buf[4];
  const char *v307;
  __int16 v308;
  const char *v309;
  uint64_t v310;

  v310 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = (const char *)nw_setting_libnetcore_debug;
  networkd_settings_init();
  if (sCachedSettings)
  {
    pthread_mutex_lock(&sSettingsMutex);
    if (sCachedSettings)
      int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v4);
    else
      int64 = 0;
    pthread_mutex_unlock(&sSettingsMutex);
  }
  else
  {
    int64 = 0;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_file_path_settings);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithContentsOfFile:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  v298 = objc_msgSend(v6, "copy");
  if (a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "libnetcore";
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_libnetcore);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v8);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_libnetcore);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v9);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "cfnetwork";
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_cfnetwork);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v11);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_cfnetwork);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v12);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "coremedia";
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_coremedia);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v14);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_coremedia);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v15);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "parsec";
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_parsec);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v17);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_parsec);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v18);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "siri";
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_siri);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v20);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_siri);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v21);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "webkit";
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_webkit);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v23);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_webkit);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v24);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = (id)gLogObj;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "coremedia_crabs";
      _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_coremedia_crabs);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v26);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_coremedia_crabs);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v27);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v28 = (id)gLogObj;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "coremedia_hls";
      _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_coremedia_hls);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v29);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_coremedia_hls);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v30);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v31 = (id)gLogObj;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "cloudkit";
      _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_cloudkit);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v32);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_cloudkit);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v33);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v34 = (id)gLogObj;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "mmcs";
      _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_mmcs);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v35);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_mmcs);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v36);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v37 = (id)gLogObj;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "mail";
      _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_mail);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v38);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_mail);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v39);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v40 = (id)gLogObj;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "facetime";
      _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_facetime);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v41);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_facetime);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v42);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v43 = (id)gLogObj;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "adplatforms";
      _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_adplatforms);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v44);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_adplatforms);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v45);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v46 = (id)gLogObj;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "corelocation";
      _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_corelocation);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v47);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_corelocation);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v48);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v49 = (id)gLogObj;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "airplay_sender";
      _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_airplay_sender);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v50);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_airplay_sender);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v51);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v52 = (id)gLogObj;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "airplay_receiver";
      _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_airplay_receiver);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v53);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_airplay_receiver);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v54);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v55 = (id)gLogObj;
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "maps";
      _os_log_impl(&dword_182FBE000, v55, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_maps);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v56);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_maps);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v57);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v58 = (id)gLogObj;
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "maps_internal";
      _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_maps_internal);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v59);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_maps_internal);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v60);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v61 = (id)gLogObj;
    if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "maps_external";
      _os_log_impl(&dword_182FBE000, v61, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_maps_external);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v62);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_maps_external);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v63);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v64 = (id)gLogObj;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "network_speed_test";
      _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_network_speed_test);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v65);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_network_speed_test);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v66);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v67 = (id)gLogObj;
    if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "captive";
      _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_captive);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v68);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_captive);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v69);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v70 = (id)gLogObj;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "safe_browsing";
      _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_safe_browsing);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v71);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_safe_browsing);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v72);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v73 = (id)gLogObj;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "dns";
      _os_log_impl(&dword_182FBE000, v73, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_dns);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v74);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_dns);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v75);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v76 = (id)gLogObj;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "music";
      _os_log_impl(&dword_182FBE000, v76, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_music);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v77);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_music);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v78);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v79 = (id)gLogObj;
    if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "battery";
      _os_log_impl(&dword_182FBE000, v79, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_battery);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v80);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_battery);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v81);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v82 = (id)gLogObj;
    if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "cloud_media_services";
      _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_cloud_media_services);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v83);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_cloud_media_services);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v84);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v85 = (id)gLogObj;
    if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "avconference";
      _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_avconference);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v86);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_avconference);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v87);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v88 = (id)gLogObj;
    if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "appstore";
      _os_log_impl(&dword_182FBE000, v88, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_appstore);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v89);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_appstore);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v90);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v91 = (id)gLogObj;
    if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "telephony_service";
      _os_log_impl(&dword_182FBE000, v91, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_telephony_service);
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v92);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_telephony_service);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v93);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v94 = (id)gLogObj;
    if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "network_experiments";
      _os_log_impl(&dword_182FBE000, v94, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_network_experiments);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v95);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_network_experiments);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v96);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v97 = (id)gLogObj;
    if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "network_perf";
      _os_log_impl(&dword_182FBE000, v97, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_network_perf);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v98);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_network_perf);
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v99);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v100 = (id)gLogObj;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "hotspot";
      _os_log_impl(&dword_182FBE000, v100, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_hotspot);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v101);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_hotspot);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v102);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v103 = (id)gLogObj;
    if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "weather";
      _os_log_impl(&dword_182FBE000, v103, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_weather);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v104);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_weather);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v105);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v106 = (id)gLogObj;
    if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "coordination";
      _os_log_impl(&dword_182FBE000, v106, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_coordination);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v107);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_coordination);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v108);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v109 = (id)gLogObj;
    if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "appstore_jet";
      _os_log_impl(&dword_182FBE000, v109, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_appstore_jet);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v110);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_appstore_jet);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v111);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v112 = (id)gLogObj;
    if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "soundboard";
      _os_log_impl(&dword_182FBE000, v112, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_soundboard);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v113);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_soundboard);
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v114);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v115 = (id)gLogObj;
    if (os_log_type_enabled(v115, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "aea";
      _os_log_impl(&dword_182FBE000, v115, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_aea);
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v116);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_aea);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v117);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v118 = (id)gLogObj;
    if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "homekit";
      _os_log_impl(&dword_182FBE000, v118, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_homekit);
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v119);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_homekit);
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v120);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v121 = (id)gLogObj;
    if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "wifi";
      _os_log_impl(&dword_182FBE000, v121, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_wifi);
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v122);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_wifi);
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v123);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v124 = (id)gLogObj;
    if (os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "app_launch";
      _os_log_impl(&dword_182FBE000, v124, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_app_launch);
    v125 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v125);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_app_launch);
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v126);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v127 = (id)gLogObj;
    if (os_log_type_enabled(v127, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "ams";
      _os_log_impl(&dword_182FBE000, v127, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_ams);
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v128);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_ams);
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v129);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v130 = (id)gLogObj;
    if (os_log_type_enabled(v130, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "reve";
      _os_log_impl(&dword_182FBE000, v130, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_reve);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v131);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_reve);
    v132 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v132);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v133 = (id)gLogObj;
    if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "network_quality";
      _os_log_impl(&dword_182FBE000, v133, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_network_quality);
    v134 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v134);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_network_quality);
    v135 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v135);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v136 = (id)gLogObj;
    if (os_log_type_enabled(v136, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "news";
      _os_log_impl(&dword_182FBE000, v136, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_news);
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v137);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_news);
    v138 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v138);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v139 = (id)gLogObj;
    if (os_log_type_enabled(v139, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "cloud_compute";
      _os_log_impl(&dword_182FBE000, v139, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_cloud_compute);
    v140 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v140);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_cloud_compute);
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v141);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v142 = (id)gLogObj;
    if (os_log_type_enabled(v142, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "push";
      _os_log_impl(&dword_182FBE000, v142, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_push);
    v143 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v143);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_push);
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v144);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v145 = (id)gLogObj;
    if (os_log_type_enabled(v145, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "nw_actor_system";
      _os_log_impl(&dword_182FBE000, v145, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_nw_actor_system);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v146);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_nw_actor_system);
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v147);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v148 = (id)gLogObj;
    if (os_log_type_enabled(v148, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "app_intents_services";
      _os_log_impl(&dword_182FBE000, v148, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_app_intents_services);
    v149 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v149);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_app_intents_services);
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v150);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v151 = (id)gLogObj;
    if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "stocks";
      _os_log_impl(&dword_182FBE000, v151, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_stocks);
    v152 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v152);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_stocks);
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v153);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v154 = (id)gLogObj;
    if (os_log_type_enabled(v154, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = "tv_app";
      _os_log_impl(&dword_182FBE000, v154, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_numerator_tv_app);
    v155 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v155);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_denominator_tv_app);
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v156);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v157 = (id)gLogObj;
    if (os_log_type_enabled(v157, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_activity_report_destination;
      _os_log_impl(&dword_182FBE000, v157, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_report_destination);
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v158);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v159 = (id)gLogObj;
    if (os_log_type_enabled(v159, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_activity_default_numerator_old1;
      _os_log_impl(&dword_182FBE000, v159, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_default_numerator_old1);
    v160 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v160);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v161 = (id)gLogObj;
    if (os_log_type_enabled(v161, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_activity_default_denominator_old1;
      _os_log_impl(&dword_182FBE000, v161, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_default_denominator_old1);
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v162);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v163 = (id)gLogObj;
    if (os_log_type_enabled(v163, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_activity_default_numerator;
      _os_log_impl(&dword_182FBE000, v163, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_default_numerator);
    v164 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v164);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v165 = (id)gLogObj;
    if (os_log_type_enabled(v165, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_activity_default_denominator;
      _os_log_impl(&dword_182FBE000, v165, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_default_denominator);
    v166 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v166);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v167 = (id)gLogObj;
    if (os_log_type_enabled(v167, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_statistics_report_numerator;
      _os_log_impl(&dword_182FBE000, v167, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_statistics_report_numerator);
    v168 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v168);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v169 = (id)gLogObj;
    if (os_log_type_enabled(v169, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_statistics_report_denominator;
      _os_log_impl(&dword_182FBE000, v169, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_statistics_report_denominator);
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v170);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v171 = (id)gLogObj;
    if (os_log_type_enabled(v171, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_svcb;
      _os_log_impl(&dword_182FBE000, v171, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_svcb);
    v172 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v172);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v173 = (id)gLogObj;
    if (os_log_type_enabled(v173, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_svcb_router;
      _os_log_impl(&dword_182FBE000, v173, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_svcb_router);
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v174);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v175 = (id)gLogObj;
    if (os_log_type_enabled(v175, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_activity_elevated_numerator;
      _os_log_impl(&dword_182FBE000, v175, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_elevated_numerator);
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v176);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v177 = (id)gLogObj;
    if (os_log_type_enabled(v177, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_activity_elevated_denominator;
      _os_log_impl(&dword_182FBE000, v177, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_activity_elevated_denominator);
    v178 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v178);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v179 = (id)gLogObj;
    if (os_log_type_enabled(v179, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_old1;
      _os_log_impl(&dword_182FBE000, v179, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old1);
    v180 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v180);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v181 = (id)gLogObj;
    if (os_log_type_enabled(v181, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_race_old1;
      _os_log_impl(&dword_182FBE000, v181, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old1);
    v182 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v182);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v183 = (id)gLogObj;
    if (os_log_type_enabled(v183, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_numerator_old1;
      _os_log_impl(&dword_182FBE000, v183, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old1);
    v184 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v184);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v185 = (id)gLogObj;
    if (os_log_type_enabled(v185, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_denominator_old1;
      _os_log_impl(&dword_182FBE000, v185, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old1);
    v186 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v186);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v187 = (id)gLogObj;
    if (os_log_type_enabled(v187, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_old2;
      _os_log_impl(&dword_182FBE000, v187, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old2);
    v188 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v188);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v189 = (id)gLogObj;
    if (os_log_type_enabled(v189, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_race_old2;
      _os_log_impl(&dword_182FBE000, v189, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old2);
    v190 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v190);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v191 = (id)gLogObj;
    if (os_log_type_enabled(v191, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_numerator_old2;
      _os_log_impl(&dword_182FBE000, v191, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old2);
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v192);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v193 = (id)gLogObj;
    if (os_log_type_enabled(v193, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_denominator_old2;
      _os_log_impl(&dword_182FBE000, v193, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old2);
    v194 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v194);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v195 = (id)gLogObj;
    if (os_log_type_enabled(v195, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_old3;
      _os_log_impl(&dword_182FBE000, v195, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old3);
    v196 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v196);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v197 = (id)gLogObj;
    if (os_log_type_enabled(v197, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_race_old3;
      _os_log_impl(&dword_182FBE000, v197, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old3);
    v198 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v198);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v199 = (id)gLogObj;
    if (os_log_type_enabled(v199, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_numerator_old3;
      _os_log_impl(&dword_182FBE000, v199, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old3);
    v200 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v200);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v201 = (id)gLogObj;
    if (os_log_type_enabled(v201, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_denominator_old3;
      _os_log_impl(&dword_182FBE000, v201, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old3);
    v202 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v202);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v203 = (id)gLogObj;
    if (os_log_type_enabled(v203, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_old4;
      _os_log_impl(&dword_182FBE000, v203, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old4);
    v204 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v204);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v205 = (id)gLogObj;
    if (os_log_type_enabled(v205, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_race_old4;
      _os_log_impl(&dword_182FBE000, v205, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old4);
    v206 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v206);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v207 = (id)gLogObj;
    if (os_log_type_enabled(v207, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_numerator_old4;
      _os_log_impl(&dword_182FBE000, v207, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old4);
    v208 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v208);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v209 = (id)gLogObj;
    if (os_log_type_enabled(v209, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_denominator_old4;
      _os_log_impl(&dword_182FBE000, v209, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old4);
    v210 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v210);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v211 = (id)gLogObj;
    if (os_log_type_enabled(v211, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_old5;
      _os_log_impl(&dword_182FBE000, v211, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old5);
    v212 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v212);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v213 = (id)gLogObj;
    if (os_log_type_enabled(v213, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_race_old5;
      _os_log_impl(&dword_182FBE000, v213, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old5);
    v214 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v214);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v215 = (id)gLogObj;
    if (os_log_type_enabled(v215, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_numerator_old5;
      _os_log_impl(&dword_182FBE000, v215, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old5);
    v216 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v216);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v217 = (id)gLogObj;
    if (os_log_type_enabled(v217, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_denominator_old5;
      _os_log_impl(&dword_182FBE000, v217, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old5);
    v218 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v218);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v219 = (id)gLogObj;
    if (os_log_type_enabled(v219, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_old6;
      _os_log_impl(&dword_182FBE000, v219, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old6);
    v220 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v220);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v221 = (id)gLogObj;
    if (os_log_type_enabled(v221, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_race_old6;
      _os_log_impl(&dword_182FBE000, v221, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old6);
    v222 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v222);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v223 = (id)gLogObj;
    if (os_log_type_enabled(v223, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_numerator_old6;
      _os_log_impl(&dword_182FBE000, v223, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old6);
    v224 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v224);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v225 = (id)gLogObj;
    if (os_log_type_enabled(v225, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_denominator_old6;
      _os_log_impl(&dword_182FBE000, v225, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old6);
    v226 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v226);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v227 = (id)gLogObj;
    if (os_log_type_enabled(v227, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_old7;
      _os_log_impl(&dword_182FBE000, v227, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_old7);
    v228 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v228);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v229 = (id)gLogObj;
    if (os_log_type_enabled(v229, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_race_old7;
      _os_log_impl(&dword_182FBE000, v229, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race_old7);
    v230 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v230);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v231 = (id)gLogObj;
    if (os_log_type_enabled(v231, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_numerator_old7;
      _os_log_impl(&dword_182FBE000, v231, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator_old7);
    v232 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v232);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v233 = (id)gLogObj;
    if (os_log_type_enabled(v233, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_denominator_old7;
      _os_log_impl(&dword_182FBE000, v233, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator_old7);
    v234 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v234);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v235 = (id)gLogObj;
    if (os_log_type_enabled(v235, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic;
      _os_log_impl(&dword_182FBE000, v235, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic);
    v236 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v236);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v237 = (id)gLogObj;
    if (os_log_type_enabled(v237, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_quic_race;
      _os_log_impl(&dword_182FBE000, v237, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_quic_race);
    v238 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v238);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v239 = (id)gLogObj;
    if (os_log_type_enabled(v239, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_numerator;
      _os_log_impl(&dword_182FBE000, v239, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_numerator);
    v240 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v240);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v241 = (id)gLogObj;
    if (os_log_type_enabled(v241, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_quic_denominator;
      _os_log_impl(&dword_182FBE000, v241, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_quic_denominator);
    v242 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v242);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v243 = (id)gLogObj;
    if (os_log_type_enabled(v243, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_ech_probe_numerator;
      _os_log_impl(&dword_182FBE000, v243, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_ech_probe_numerator);
    v244 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v244);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v245 = (id)gLogObj;
    if (os_log_type_enabled(v245, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_ech_probe_denominator;
      _os_log_impl(&dword_182FBE000, v245, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_ech_probe_denominator);
    v246 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v246);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v247 = (id)gLogObj;
    if (os_log_type_enabled(v247, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_ech_canary_numerator;
      _os_log_impl(&dword_182FBE000, v247, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_ech_canary_numerator);
    v248 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v248);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v249 = (id)gLogObj;
    if (os_log_type_enabled(v249, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_ech_canary_denominator;
      _os_log_impl(&dword_182FBE000, v249, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_ech_canary_denominator);
    v250 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v250);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v251 = (id)gLogObj;
    if (os_log_type_enabled(v251, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_flow_report_numerator;
      _os_log_impl(&dword_182FBE000, v251, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_flow_report_numerator);
    v252 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v252);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v253 = (id)gLogObj;
    if (os_log_type_enabled(v253, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_flow_report_denominator;
      _os_log_impl(&dword_182FBE000, v253, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_flow_report_denominator);
    v254 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v254);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v255 = (id)gLogObj;
    if (os_log_type_enabled(v255, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_proxy_race_report_numerator;
      _os_log_impl(&dword_182FBE000, v255, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_proxy_race_report_numerator);
    v256 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v256);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v257 = (id)gLogObj;
    if (os_log_type_enabled(v257, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_proxy_race_report_denominator;
      _os_log_impl(&dword_182FBE000, v257, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_proxy_race_report_denominator);
    v258 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v258);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v259 = (id)gLogObj;
    if (os_log_type_enabled(v259, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_l4s_numerator_old1;
      _os_log_impl(&dword_182FBE000, v259, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_l4s_numerator_old1);
    v260 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v260);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v261 = (id)gLogObj;
    if (os_log_type_enabled(v261, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_l4s_denominator_old1;
      _os_log_impl(&dword_182FBE000, v261, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_l4s_denominator_old1);
    v262 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v262);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v263 = (id)gLogObj;
    if (os_log_type_enabled(v263, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_l4s_numerator;
      _os_log_impl(&dword_182FBE000, v263, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_l4s_numerator);
    v264 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v264);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v265 = (id)gLogObj;
    if (os_log_type_enabled(v265, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_l4s_denominator;
      _os_log_impl(&dword_182FBE000, v265, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_l4s_denominator);
    v266 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v266);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v267 = (id)gLogObj;
    if (os_log_type_enabled(v267, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_accurate_ecn_numerator;
      _os_log_impl(&dword_182FBE000, v267, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_accurate_ecn_numerator);
    v268 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v268);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v269 = (id)gLogObj;
    if (os_log_type_enabled(v269, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_accurate_ecn_denominator;
      _os_log_impl(&dword_182FBE000, v269, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_accurate_ecn_denominator);
    v270 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v270);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v271 = (id)gLogObj;
    if (os_log_type_enabled(v271, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_tcp_l4s_numerator;
      _os_log_impl(&dword_182FBE000, v271, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_tcp_l4s_numerator);
    v272 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v272);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v273 = (id)gLogObj;
    if (os_log_type_enabled(v273, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_tcp_l4s_denominator;
      _os_log_impl(&dword_182FBE000, v273, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_tcp_l4s_denominator);
    v274 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v274);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v275 = (id)gLogObj;
    if (os_log_type_enabled(v275, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_disable_l4s_aqm;
      _os_log_impl(&dword_182FBE000, v275, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_disable_l4s_aqm);
    v276 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v276);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v277 = (id)gLogObj;
    if (os_log_type_enabled(v277, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_unified_http_numerator;
      _os_log_impl(&dword_182FBE000, v277, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_unified_http_numerator);
    v278 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v278);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v279 = (id)gLogObj;
    if (os_log_type_enabled(v279, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_unified_http_denominator;
      _os_log_impl(&dword_182FBE000, v279, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_unified_http_denominator);
    v280 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v280);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v281 = (id)gLogObj;
    if (os_log_type_enabled(v281, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_unified_http_numerator_old;
      _os_log_impl(&dword_182FBE000, v281, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_unified_http_numerator_old);
    v282 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v282);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v283 = (id)gLogObj;
    if (os_log_type_enabled(v283, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v307 = "addNewNetworkdSettings";
      v308 = 2080;
      v309 = (const char *)nw_setting_enable_unified_http_denominator_old;
      _os_log_impl(&dword_182FBE000, v283, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_enable_unified_http_denominator_old);
    v284 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v284);

  }
  objc_msgSend(v3, "description", v298);
  v285 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v285, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), &stru_1E14AEB08);
  v286 = (char *)objc_claimAutoreleasedReturnValue();

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v287 = (id)gLogObj;
  if (os_log_type_enabled(v287, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    v307 = "addNewNetworkdSettings";
    v308 = 2112;
    v309 = v286;
    _os_log_impl(&dword_182FBE000, v287, OS_LOG_TYPE_INFO, "%{public}s Overriding with new settings %@", buf, 0x16u);
  }

  v303 = 0u;
  v304 = 0u;
  v301 = 0u;
  v302 = 0u;
  v288 = v3;
  v289 = objc_msgSend(v288, "countByEnumeratingWithState:objects:count:", &v301, v305, 16);
  if (v289)
  {
    v290 = v289;
    v291 = *(_QWORD *)v302;
    do
    {
      for (i = 0; i != v290; ++i)
      {
        if (*(_QWORD *)v302 != v291)
          objc_enumerationMutation(v288);
        v293 = *(_QWORD *)(*((_QWORD *)&v301 + 1) + 8 * i);
        objc_msgSend(v288, "objectForKeyedSubscript:", v293);
        v294 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setObject:forKeyedSubscript:", v294, v293);

      }
      v290 = objc_msgSend(v288, "countByEnumeratingWithState:objects:count:", &v301, v305, 16);
    }
    while (v290);
  }

  objc_msgSend(v6, "description");
  v295 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v295, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), &stru_1E14AEB08);
  v296 = (char *)objc_claimAutoreleasedReturnValue();

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v297 = (id)gLogObj;
  if (os_log_type_enabled(v297, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    v307 = "addNewNetworkdSettings";
    v308 = 2112;
    v309 = v296;
    _os_log_impl(&dword_182FBE000, v297, OS_LOG_TYPE_INFO, "%{public}s Created new networkd settings %@", buf, 0x16u);
  }

  if (!objc_msgSend(v6, "count"))
  {

    v6 = 0;
  }
  saveAndPostNetworkdSettings(v6, v299, int64);

}

void __runProbes_block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  uint32_t int64_with_default;
  uint32_t v13;
  uint32_t v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  char *backtrace_string;
  _BOOL4 v27;
  char v28;
  os_log_type_t type;
  _BYTE buf[24];
  void *v31;
  id v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (gRunningProbes != 1)
  {
    gRunningProbes = 1;
    v4 = +[ManagedNetworkSettings sharedMNS](ManagedNetworkSettings, "sharedMNS");
    objc_msgSend(v4, "queue");
    v5 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v5);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nwphResetProbesOnQueue";
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Resetting ECH settings", buf, 0xCu);
    }

    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 1);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_ech_probe_enabled);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setValue:forKey:", MEMORY[0x1E0C9AAA0], v8);

    addNewNetworkdSettings(v7, 0);
    v9 = *(id *)(a1 + 32);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v11 = v10;
    if (v9)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwphRunProbes";
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s starting network probes", buf, 0xCu);
      }

      int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_ech_canary_numerator, 0);
      v13 = networkd_settings_get_int64_with_default((const char *)nw_setting_ech_canary_denominator, 0);
      v14 = arc4random_uniform(v13);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v16 = v15;
      if (v14 >= int64_with_default)
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nwphRunProbes";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v9;
          _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s Not selected to run ECH canary. Finished with transaction %@", buf, 0x16u);
        }

        gRunningProbes = 0;
      }
      else
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nwphShouldRunECHCanaryProbe";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = int64_with_default;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v13;
          _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s ECH canary sampled at %u / %u", buf, 0x18u);
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nwphRunProbes";
          _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s Running ECH canary probe", buf, 0xCu);
        }

        v18 = nw_activity_create(40, 1);
        nw_activity_activate(v18);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __nwphRunProbes_block_invoke;
        v31 = &unk_1E14A9AF0;
        v32 = v18;
        v33 = v9;
        v19 = v18;
        nwphRunECHProbes(1, v19, buf);

      }
LABEL_19:

      return;
    }
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nwphRunProbes";
    v20 = _os_log_send_and_compose_impl();
    v21 = v11;
    v22 = (void *)v20;

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault((const char *)v22, &type, &v28))
    {
LABEL_36:
      if (v22)
        free(v22);
      goto LABEL_19;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwphRunProbes";
        v25 = "%{public}s called with null transaction";
LABEL_34:
        _os_log_impl(&dword_182FBE000, v23, v24, v25, buf, 0xCu);
      }
    }
    else
    {
      if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        v27 = os_log_type_enabled(v23, type);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nwphRunProbes";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null transaction, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (!v27)
          goto LABEL_35;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwphRunProbes";
        v25 = "%{public}s called with null transaction, no backtrace";
        goto LABEL_34;
      }
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwphRunProbes";
        v25 = "%{public}s called with null transaction, backtrace limit exceeded";
        goto LABEL_34;
      }
    }
LABEL_35:

    goto LABEL_36;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "runProbes_block_invoke";
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v3;
    _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s Already running probes, skipping. Finished with transaction %@", buf, 0x16u);
  }

}

void __nwphRunProbes_block_invoke(uint64_t a1, int a2)
{
  void *v3;
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  id v7;
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __nwphRunProbes_block_invoke_2;
    v5[3] = &unk_1E14A9AF0;
    v6 = v3;
    v7 = *(id *)(a1 + 40);
    nwphRunECHProbes(0, v6, v5);

  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v9 = "nwphRunProbes_block_invoke";
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s ECH local probes failed, saving", buf, 0xCu);
    }

    nwphProbesComplete(0, *(void **)(a1 + 32), *(void **)(a1 + 40));
  }
}

void nwphRunECHProbes(int a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  int v10;
  __CFString *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _QWORD v19[4];
  __CFString *v20;
  id v21;
  id v22;
  _BYTE *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char v27;
  _QWORD v28[3];
  int v29;
  _QWORD v30[3];
  char v31;
  _QWORD v32[3];
  char v33;
  _BYTE buf[24];
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v9 = "generic";
      if (a1)
        v9 = "regional";
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nwphRunECHProbes";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s starting %{public}s network probes", buf, 0x16u);
    }

    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v35 = 0;
    v32[0] = 0;
    v32[1] = v32;
    v32[2] = 0x2020000000;
    v33 = 0;
    v30[0] = 0;
    v30[1] = v30;
    v30[2] = 0x2020000000;
    v31 = 0;
    if (a1)
      v10 = 2;
    else
      v10 = 5;
    if (a1)
      v11 = CFSTR("https://croissant.cdn-apple.com");
    else
      v11 = CFSTR("https://croissant.edge.apple");
    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x2020000000;
    v29 = v10;
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __nwphRunECHProbes_block_invoke;
    v19[3] = &unk_1E149D5F8;
    v27 = a1;
    v23 = buf;
    v24 = v28;
    v20 = v11;
    v21 = v5;
    v25 = v32;
    v26 = v30;
    v22 = v6;
    nwphRunProbe(v11, 0, v21, v10, v19);

    _Block_object_dispose(v28, 8);
    _Block_object_dispose(v30, 8);
    _Block_object_dispose(v32, 8);
    _Block_object_dispose(buf, 8);
    goto LABEL_13;
  }
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nwphRunECHProbes";
  v12 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v32[0]) = 16;
  LOBYTE(v30[0]) = 0;
  if (__nwlog_fault(v12, v32, v30))
  {
    if (LOBYTE(v32[0]) == 17)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v32[0];
      if (os_log_type_enabled(v13, v32[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwphRunECHProbes";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parent_activity", buf, 0xCu);
      }
    }
    else if (LOBYTE(v30[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = v32[0];
      v17 = os_log_type_enabled(v13, v32[0]);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nwphRunECHProbes";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parent_activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwphRunECHProbes";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parent_activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = v32[0];
      if (os_log_type_enabled(v13, v32[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwphRunECHProbes";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parent_activity, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_30:
  if (v12)
    free(v12);
  (*((void (**)(id, _QWORD))v6 + 2))(v6, 0);
LABEL_13:

}

void sub_18359ACA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void __nwphRunECHProbes_block_invoke(uint64_t a1, int a2)
{
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  int v7;
  void *v8;
  void *v9;
  char v10;
  int8x16_t v11;
  int v12;
  id v13;
  uint64_t v14;
  const char *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  int8x16_t v20;
  uint64_t v21;
  char v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v5)
    {
      v6 = "regional";
      if (!*(_BYTE *)(a1 + 88))
        v6 = "generic";
      *(_DWORD *)buf = 136446466;
      v24 = "nwphRunECHProbes_block_invoke";
      v25 = 2082;
      v26 = v6;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s First %{public}s ECH probe succeeded, starting second", buf, 0x16u);
    }

    if (*(_BYTE *)(a1 + 88))
      v7 = 3;
    else
      v7 = 6;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v7;
    v8 = *(void **)(a1 + 32);
    v9 = *(void **)(a1 + 40);
    v16[0] = MEMORY[0x1E0C809B0];
    v10 = *(_BYTE *)(a1 + 88);
    v11 = vextq_s8(*(int8x16_t *)(a1 + 64), *(int8x16_t *)(a1 + 64), 8uLL);
    v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    v16[1] = 3221225472;
    v16[2] = __nwphRunECHProbes_block_invoke_382;
    v16[3] = &unk_1E149D5D0;
    v22 = v10;
    v20 = v11;
    v17 = v8;
    v13 = *(id *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 80);
    v18 = v13;
    v21 = v14;
    v19 = *(id *)(a1 + 48);
    nwphRunProbe(v17, 1, v9, v12, v16);

  }
  else
  {
    if (v5)
    {
      v15 = "regional";
      if (!*(_BYTE *)(a1 + 88))
        v15 = "generic";
      *(_DWORD *)buf = 136446466;
      v24 = "nwphRunECHProbes_block_invoke";
      v25 = 2082;
      v26 = v15;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s First %{public}s ECH probe failed", buf, 0x16u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void nwphRunProbe(void *a1, int a2, void *a3, int a4, void *a5)
{
  char *v9;
  id v10;
  id v11;
  void (**v12)(_QWORD, _QWORD);
  void *v13;
  void *v14;
  void *v15;
  _DWORD *v16;
  _DWORD *v17;
  void *v18;
  NSObject *v19;
  id v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  NSObject *v28;
  os_log_type_t v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  void *v35;
  void *v36;
  void *v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  const char *v41;
  char *backtrace_string;
  _BOOL4 v43;
  char *v44;
  _BOOL4 v45;
  const char *v46;
  _BOOL4 v47;
  char *v48;
  _BOOL4 v49;
  id v50;
  _QWORD v51[4];
  id v52;
  id v53;
  void (**v54)(_QWORD, _QWORD);
  char v55;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  char *v60;
  __int16 v61;
  char *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a3;
  v11 = a5;
  v12 = (void (**)(_QWORD, _QWORD))v11;
  if (!v9)
  {
    __nwlog_obj();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nwphRunProbe";
    v31 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v31, &type, &v55))
      goto LABEL_86;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v55)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        v43 = os_log_type_enabled(v32, type);
        if (backtrace_string)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136446466;
            v58 = "nwphRunProbe";
            v59 = 2082;
            v60 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null probeTarget, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
LABEL_86:
          if (!v31)
          {
LABEL_88:
            v12[2](v12, 0);
            goto LABEL_24;
          }
LABEL_87:
          free(v31);
          goto LABEL_88;
        }
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nwphRunProbe";
          v34 = "%{public}s called with null probeTarget, no backtrace";
          goto LABEL_84;
        }
      }
      else
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nwphRunProbe";
          v34 = "%{public}s called with null probeTarget, backtrace limit exceeded";
          goto LABEL_84;
        }
      }
      goto LABEL_85;
    }
    __nwlog_obj();
    v32 = objc_claimAutoreleasedReturnValue();
    v33 = type;
    if (!os_log_type_enabled(v32, type))
      goto LABEL_85;
    *(_DWORD *)buf = 136446210;
    v58 = "nwphRunProbe";
    v34 = "%{public}s called with null probeTarget";
    goto LABEL_84;
  }
  if (!v10)
  {
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nwphRunProbe";
    v31 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v31, &type, &v55))
      goto LABEL_86;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nwphRunProbe";
          v34 = "%{public}s called with null parent_activity, backtrace limit exceeded";
          goto LABEL_84;
        }
        goto LABEL_85;
      }
      v44 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      v45 = os_log_type_enabled(v32, type);
      if (!v44)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nwphRunProbe";
          v34 = "%{public}s called with null parent_activity, no backtrace";
          goto LABEL_84;
        }
        goto LABEL_85;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        v58 = "nwphRunProbe";
        v59 = 2082;
        v60 = v44;
        v46 = "%{public}s called with null parent_activity, dumping backtrace:%{public}s";
LABEL_62:
        _os_log_impl(&dword_182FBE000, v32, v33, v46, buf, 0x16u);
      }
LABEL_63:

      free(v44);
      if (!v31)
        goto LABEL_88;
      goto LABEL_87;
    }
    __nwlog_obj();
    v32 = objc_claimAutoreleasedReturnValue();
    v33 = type;
    if (!os_log_type_enabled(v32, type))
      goto LABEL_85;
    *(_DWORD *)buf = 136446210;
    v58 = "nwphRunProbe";
    v34 = "%{public}s called with null parent_activity";
LABEL_84:
    _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
    goto LABEL_85;
  }
  if (!a4)
  {
    __nwlog_obj();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nwphRunProbe";
    v31 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v31, &type, &v55))
      goto LABEL_86;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nwphRunProbe";
        v34 = "%{public}s called with null label";
        goto LABEL_84;
      }
LABEL_85:

      goto LABEL_86;
    }
    if (!v55)
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nwphRunProbe";
        v34 = "%{public}s called with null label, backtrace limit exceeded";
        goto LABEL_84;
      }
      goto LABEL_85;
    }
    v44 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v32 = objc_claimAutoreleasedReturnValue();
    v33 = type;
    v47 = os_log_type_enabled(v32, type);
    if (!v44)
    {
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nwphRunProbe";
        v34 = "%{public}s called with null label, no backtrace";
        goto LABEL_84;
      }
      goto LABEL_85;
    }
    if (v47)
    {
      *(_DWORD *)buf = 136446466;
      v58 = "nwphRunProbe";
      v59 = 2082;
      v60 = v44;
      v46 = "%{public}s called with null label, dumping backtrace:%{public}s";
      goto LABEL_62;
    }
    goto LABEL_63;
  }
  if (v11)
  {
    objc_msgSend(MEMORY[0x1E0C92CA0], "ephemeralSessionConfiguration");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setHTTPCookieStorage:", 0);
    objc_msgSend(v13, "setURLCache:", 0);
    if (a2)
      objc_msgSend(v13, "set_allowsTLSECH:", 1);
    objc_msgSend(MEMORY[0x1E0C92C98], "sessionWithConfiguration:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v9);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      v16 = nw_activity_create(40, a4);
      nw_activity_set_parent_activity(v16, v10);
      nw_activity_activate(v16);
      v51[0] = MEMORY[0x1E0C809B0];
      v51[1] = 3221225472;
      v51[2] = __nwphRunProbe_block_invoke;
      v51[3] = &unk_1E149D620;
      v17 = v16;
      v52 = v17;
      v54 = v12;
      v53 = v14;
      objc_msgSend(v53, "dataTaskWithURL:completionHandler:", v15, v51);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "set_nw_activity:", v17);
      objc_msgSend(v18, "resume");
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v58 = "nwphRunProbe";
        v59 = 2112;
        v60 = v9;
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s started probe to %@", buf, 0x16u);
      }

      goto LABEL_23;
    }
    v50 = v10;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v58 = "nwphRunProbe";
    v59 = 2112;
    v60 = v9;
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (__nwlog_fault(v21, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v23 = type;
        if (!os_log_type_enabled(v22, type))
          goto LABEL_29;
        *(_DWORD *)buf = 136446466;
        v58 = "nwphRunProbe";
        v59 = 2112;
        v60 = v9;
        v24 = "%{public}s URLWithString %@ failed";
LABEL_27:
        v28 = v22;
        v29 = v23;
        goto LABEL_28;
      }
      if (!v55)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v23 = type;
        if (!os_log_type_enabled(v22, type))
          goto LABEL_29;
        *(_DWORD *)buf = 136446466;
        v58 = "nwphRunProbe";
        v59 = 2112;
        v60 = v9;
        v24 = "%{public}s URLWithString %@ failed, backtrace limit exceeded";
        goto LABEL_27;
      }
      v25 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      v26 = type;
      v27 = os_log_type_enabled(v22, type);
      if (!v25)
      {
        if (!v27)
        {
LABEL_29:

          if (!v21)
            goto LABEL_22;
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446466;
        v58 = "nwphRunProbe";
        v59 = 2112;
        v60 = v9;
        v24 = "%{public}s URLWithString %@ failed, no backtrace";
        v28 = v22;
        v29 = v26;
LABEL_28:
        _os_log_impl(&dword_182FBE000, v28, v29, v24, buf, 0x16u);
        goto LABEL_29;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446722;
        v58 = "nwphRunProbe";
        v59 = 2112;
        v60 = v9;
        v61 = 2082;
        v62 = v25;
        _os_log_impl(&dword_182FBE000, v22, v26, "%{public}s URLWithString %@ failed, dumping backtrace:%{public}s", buf, 0x20u);
      }

      free(v25);
    }
    if (!v21)
    {
LABEL_22:
      v12[2](v12, 0);
      v10 = v50;
LABEL_23:

      goto LABEL_24;
    }
LABEL_21:
    free(v21);
    goto LABEL_22;
  }
  __nwlog_obj();
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v58 = "nwphRunProbe";
  v38 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v55 = 0;
  if (__nwlog_fault(v38, &type, &v55))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nwphRunProbe";
        v41 = "%{public}s called with null completion";
LABEL_91:
        _os_log_impl(&dword_182FBE000, v39, v40, v41, buf, 0xCu);
      }
    }
    else
    {
      if (v55)
      {
        v48 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v39 = objc_claimAutoreleasedReturnValue();
        v40 = type;
        v49 = os_log_type_enabled(v39, type);
        if (v48)
        {
          if (v49)
          {
            *(_DWORD *)buf = 136446466;
            v58 = "nwphRunProbe";
            v59 = 2082;
            v60 = v48;
            _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v48);
          goto LABEL_93;
        }
        if (!v49)
          goto LABEL_92;
        *(_DWORD *)buf = 136446210;
        v58 = "nwphRunProbe";
        v41 = "%{public}s called with null completion, no backtrace";
        goto LABEL_91;
      }
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nwphRunProbe";
        v41 = "%{public}s called with null completion, backtrace limit exceeded";
        goto LABEL_91;
      }
    }
LABEL_92:

  }
LABEL_93:
  if (v38)
    free(v38);
LABEL_24:

}

void __nwphRunProbe_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  int v18;
  const char *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v18 = 136446210;
    v19 = "nwphRunProbe_block_invoke";
    _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s Probe complete", (uint8_t *)&v18, 0xCu);
  }

  if (v9)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v18 = 136446466;
      v19 = "nwphRunProbe_block_invoke";
      v20 = 2112;
      v21 = v9;
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s Got error: %@", (uint8_t *)&v18, 0x16u);
    }

  }
  if (!v8)
    goto LABEL_20;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v18 = 136446466;
    v19 = "nwphRunProbe_block_invoke";
    v20 = 2112;
    v21 = v8;
    _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s Got response: %@", (uint8_t *)&v18, 0x16u);
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_20;
  v13 = v8;
  if (objc_msgSend(v13, "statusCode") != 200)
  {

LABEL_20:
    v16 = *(void **)(a1 + 32);
    if (v9)
    {
      objc_msgSend(v9, "domain");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      nw_activity_complete_with_reason_and_underlying_error(v16, 3u, (int)v17, objc_msgSend(v9, "code"));

    }
    else
    {
      nw_activity_complete_with_reason_and_underlying_error(*(void **)(a1 + 32), 3u, 0, 0);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    objc_msgSend(*(id *)(a1 + 40), "invalidateAndCancel");
    goto LABEL_24;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v18 = 136446210;
    v19 = "nwphRunProbe_block_invoke";
    _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s Got back 200 OK", (uint8_t *)&v18, 0xCu);
  }

  if (v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      v18 = 136446466;
      v19 = "nwphRunProbe_block_invoke";
      v20 = 2112;
      v21 = v7;
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s Got back data: %@", (uint8_t *)&v18, 0x16u);
    }

  }
  nw_activity_complete_with_reason(*(void **)(a1 + 32), 2u);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  objc_msgSend(*(id *)(a1 + 40), "invalidateAndCancel");

LABEL_24:
}

void __nwphRunECHProbes_block_invoke_382(uint64_t a1, int a2)
{
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  int v7;
  uint64_t v8;
  int v9;
  void *v10;
  void *v11;
  const char *v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  char v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v5)
    {
      v6 = "regional";
      if (!*(_BYTE *)(a1 + 80))
        v6 = "generic";
      *(_DWORD *)buf = 136446466;
      v18 = "nwphRunECHProbes_block_invoke";
      v19 = 2082;
      v20 = v6;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s Second %{public}s ECH probe succeeded, starting third", buf, 0x16u);
    }

    if (*(_BYTE *)(a1 + 80))
      v7 = 4;
    else
      v7 = 7;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v7;
    v8 = *(_QWORD *)(a1 + 72);
    v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[2] = __nwphRunECHProbes_block_invoke_383;
    v13[3] = &unk_1E149D5A8;
    v10 = *(void **)(a1 + 32);
    v11 = *(void **)(a1 + 40);
    v13[1] = 3221225472;
    v15 = v8;
    v16 = *(_BYTE *)(a1 + 80);
    v14 = *(id *)(a1 + 48);
    nwphRunProbe(v10, 0, v11, v9, v13);

  }
  else
  {
    if (v5)
    {
      v12 = "regional";
      if (!*(_BYTE *)(a1 + 80))
        v12 = "generic";
      *(_DWORD *)buf = 136446466;
      v18 = "nwphRunECHProbes_block_invoke";
      v19 = 2082;
      v20 = v12;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s Second %{public}s ECH probe failed", buf, 0x16u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

uint64_t __nwphRunECHProbes_block_invoke_383(uint64_t a1, int a2)
{
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  const char *v7;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v5)
    {
      v6 = "regional";
      if (!*(_BYTE *)(a1 + 48))
        v6 = "generic";
      v9 = 136446466;
      v10 = "nwphRunECHProbes_block_invoke";
      v11 = 2082;
      v12 = v6;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s Third %{public}s ECH probe succeeded", (uint8_t *)&v9, 0x16u);
    }
  }
  else if (v5)
  {
    v7 = "regional";
    if (!*(_BYTE *)(a1 + 48))
      v7 = "generic";
    v9 = 136446466;
    v10 = "nwphRunECHProbes_block_invoke";
    v11 = 2082;
    v12 = v7;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s Third %{public}s ECH probe failed", (uint8_t *)&v9, 0x16u);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __nwphRunProbes_block_invoke_2(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = "failed";
    if (a2)
      v5 = "succeeded";
    v6 = 136446466;
    v7 = "nwphRunProbes_block_invoke_2";
    v8 = 2082;
    v9 = v5;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s ECH probes %{public}s, saving", (uint8_t *)&v6, 0x16u);
  }

  nwphProbesComplete(a2, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void nwphProbesComplete(char a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD block[4];
  id v25;
  _BYTE *v26;
  char v27;
  char v28;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nwphProbesComplete";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v11, &type, &v28))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwphProbesComplete";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null parent_activity", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nwphProbesComplete";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null parent_activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v11)
          goto LABEL_4;
LABEL_39:
        free(v11);
        goto LABEL_4;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwphProbesComplete";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null parent_activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwphProbesComplete";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null parent_activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v6)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v31 = __Block_byref_object_copy__23839;
    v32 = __Block_byref_object_dispose__23840;
    v33 = v6;
    v8 = +[ManagedNetworkSettings sharedMNS](ManagedNetworkSettings, "sharedMNS");
    objc_msgSend(v8, "queue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nwphProbesComplete_block_invoke;
    block[3] = &unk_1E14AB438;
    v27 = a1;
    v25 = v5;
    v26 = buf;
    dispatch_async(v9, block);

    _Block_object_dispose(buf, 8);
    goto LABEL_4;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nwphProbesComplete";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (!__nwlog_fault(v11, &type, &v28))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nwphProbesComplete";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null transaction", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v28)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nwphProbesComplete";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s called with null transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nwphProbesComplete";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nwphProbesComplete";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_39;
LABEL_4:

}

void sub_18359C910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23839(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23840(uint64_t a1)
{

}

void __nwphProbesComplete_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint32_t v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 1);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", nw_setting_ech_probe_enabled);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKey:", v3, v4);

  addNewNetworkdSettings(v2, 0);
  if (*(_BYTE *)(a1 + 48))
    v5 = 2;
  else
    v5 = 3;
  nw_activity_complete_with_reason(*(void **)(a1 + 32), v5);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(a1 + 48);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v11 = 136446722;
    v12 = "nwphProbesComplete_block_invoke";
    v13 = 1024;
    v14 = v7;
    v15 = 2112;
    v16 = v8;
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s Probes complete (success: %u). Finished with transaction %@", (uint8_t *)&v11, 0x1Cu);
  }

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = 0;

  gRunningProbes = 0;
}

uint64_t network_config_cellular_blocked_observer_create(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136446210;
    v7 = "network_config_cellular_blocked_observer_create";
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s creating cellular blocked observer", (uint8_t *)&v6, 0xCu);
  }
  return network_config_policy_observer_create(1, a1, a2);
}

uint64_t network_config_policy_observer_create(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  const char *v14;
  _BOOL4 v15;
  _QWORD block[7];
  int v17;
  char v18;
  os_log_type_t v19;
  _BYTE buf[24];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (a3)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      v21 = 0;
      if (nw_policy_event_queue(void)::onceToken != -1)
        dispatch_once(&nw_policy_event_queue(void)::onceToken, &__block_literal_global_23856);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___ZL37network_config_policy_observer_create34network_config_policy_event_type_tP16dispatch_queue_sU13block_pointerFvPvS2_S2_E_block_invoke;
      block[3] = &unk_1E149D870;
      v17 = a1;
      block[5] = buf;
      block[6] = a2;
      block[4] = a3;
      dispatch_sync((dispatch_queue_t)nw_policy_event_queue(void)::queue, block);
      v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      return v6;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "network_config_policy_observer_create";
    v8 = (char *)_os_log_send_and_compose_impl();
    v19 = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v8, &v19, &v18))
      goto LABEL_34;
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (os_log_type_enabled(v9, v19))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_policy_observer_create";
        v11 = "%{public}s called with null block";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v18)
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (os_log_type_enabled(v9, v19))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_policy_observer_create";
        v11 = "%{public}s called with null block, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v19;
    v15 = os_log_type_enabled(v9, v19);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_policy_observer_create";
        v11 = "%{public}s called with null block, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "network_config_policy_observer_create";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v14 = "%{public}s called with null block, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "network_config_policy_observer_create";
  v8 = (char *)_os_log_send_and_compose_impl();
  v19 = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (!__nwlog_fault(v8, &v19, &v18))
    goto LABEL_34;
  if (v19 != OS_LOG_TYPE_FAULT)
  {
    if (!v18)
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (os_log_type_enabled(v9, v19))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_policy_observer_create";
        v11 = "%{public}s called with null queue, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v19;
    v13 = os_log_type_enabled(v9, v19);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_policy_observer_create";
        v11 = "%{public}s called with null queue, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "network_config_policy_observer_create";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v14 = "%{public}s called with null queue, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v9, v10, v14, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  v9 = __nwlog_obj();
  v10 = v19;
  if (os_log_type_enabled(v9, v19))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "network_config_policy_observer_create";
    v11 = "%{public}s called with null queue";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
  }
LABEL_34:
  if (v8)
    free(v8);
  return 0;
}

void ___ZL37network_config_policy_observer_create34network_config_policy_event_type_tP16dispatch_queue_sU13block_pointerFvPvS2_S2_E_block_invoke(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  int v4;
  xpc_object_t *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  int v9;
  unsigned int v10;
  int v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  NSObject *v16;
  int v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  int v26;
  char *backtrace_string;
  _BOOL4 v28;
  char *v29;
  _BOOL4 v30;
  char *v31;
  _BOOL4 v32;
  const char *v33;
  NSObject *v34;
  uint64_t v35;
  char *v36;
  _BOOL4 v37;
  const char *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint32_t v41;
  _BOOL4 v42;
  NSObject *v43;
  os_log_type_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint32_t v47;
  _BOOL4 v48;
  _BOOL4 v49;
  _BOOL4 v50;
  os_log_type_t handler[8];
  uint64_t v52;
  void (*v53)(uint64_t);
  void *v54;
  unsigned int v55;
  char v56;
  os_log_type_t type[7];
  os_log_type_t v58;
  os_log_type_t v59[8];
  int v60;
  _BYTE buf[24];
  void *v62;
  unsigned int v63;
  uint8_t v64[4];
  const char *v65;
  __int16 v66;
  _WORD v67[17];

  *(_QWORD *)&v67[13] = *MEMORY[0x1E0C80C00];
  if (network_config_setup_policy_event_watcher(void)::kevsrc)
  {
    v2 = *(NSObject **)(a1 + 48);
    if (v2)
      goto LABEL_3;
    goto LABEL_52;
  }
  v9 = socket(32, 3, 1);
  if ((v9 & 0x80000000) == 0)
  {
    v10 = v9;
    v60 = 3;
    *(_QWORD *)v59 = 0x100000001;
    if (ioctl(v9, 0x800C6502uLL, v59))
    {
      v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)v64 = 136446466;
      v65 = "network_config_setup_policy_event_watcher";
      v66 = 1024;
      *(_DWORD *)v67 = v11;
      v12 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v58 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v12, type, &v58))
        goto LABEL_96;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = gLogObj;
        v14 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
          goto LABEL_96;
        *(_DWORD *)v64 = 136446466;
        v65 = "network_config_setup_policy_event_watcher";
        v66 = 1024;
        *(_DWORD *)v67 = v11;
        v15 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d";
LABEL_94:
        v45 = v13;
        v46 = v14;
        v47 = 18;
LABEL_95:
        _os_log_impl(&dword_182FBE000, v45, v46, v15, v64, v47);
        goto LABEL_96;
      }
      if (v58 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = gLogObj;
        v14 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
          goto LABEL_96;
        *(_DWORD *)v64 = 136446466;
        v65 = "network_config_setup_policy_event_watcher";
        v66 = 1024;
        *(_DWORD *)v67 = v11;
        v15 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_94;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = gLogObj;
      v14 = type[0];
      v28 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (!backtrace_string)
      {
        if (!v28)
          goto LABEL_96;
        *(_DWORD *)v64 = 136446466;
        v65 = "network_config_setup_policy_event_watcher";
        v66 = 1024;
        *(_DWORD *)v67 = v11;
        v15 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, no backtrace";
        goto LABEL_94;
      }
      if (v28)
      {
        *(_DWORD *)v64 = 136446722;
        v65 = "network_config_setup_policy_event_watcher";
        v66 = 1024;
        *(_DWORD *)v67 = v11;
        v67[2] = 2082;
        *(_QWORD *)&v67[3] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, dumping backtrace:%{public}s", v64, 0x1Cu);
      }
      free(backtrace_string);
LABEL_96:
      if (!v12)
      {
LABEL_98:
        close(v10);
        return;
      }
LABEL_97:
      free(v12);
      goto LABEL_98;
    }
    *(_DWORD *)type = 1;
    if (ioctl(v10, 0x8004667EuLL, type))
    {
      v26 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)v64 = 136446466;
      v65 = "network_config_setup_policy_event_watcher";
      v66 = 1024;
      *(_DWORD *)v67 = v26;
      v12 = (char *)_os_log_send_and_compose_impl();
      v58 = OS_LOG_TYPE_ERROR;
      v56 = 0;
      if (!__nwlog_fault(v12, &v58, &v56))
        goto LABEL_96;
      if (v58 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = gLogObj;
        v14 = v58;
        if (!os_log_type_enabled((os_log_t)gLogObj, v58))
          goto LABEL_96;
        *(_DWORD *)v64 = 136446466;
        v65 = "network_config_setup_policy_event_watcher";
        v66 = 1024;
        *(_DWORD *)v67 = v26;
        v15 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d";
        goto LABEL_94;
      }
      if (!v56)
      {
        v13 = __nwlog_obj();
        v14 = v58;
        if (!os_log_type_enabled(v13, v58))
          goto LABEL_96;
        *(_DWORD *)v64 = 136446466;
        v65 = "network_config_setup_policy_event_watcher";
        v66 = 1024;
        *(_DWORD *)v67 = v26;
        v15 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_94;
      }
      v36 = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = v58;
      v37 = os_log_type_enabled(v13, v58);
      if (!v36)
      {
        if (!v37)
          goto LABEL_96;
        *(_DWORD *)v64 = 136446466;
        v65 = "network_config_setup_policy_event_watcher";
        v66 = 1024;
        *(_DWORD *)v67 = v26;
        v15 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, no backtrace";
        goto LABEL_94;
      }
      if (v37)
      {
        *(_DWORD *)v64 = 136446722;
        v65 = "network_config_setup_policy_event_watcher";
        v66 = 1024;
        *(_DWORD *)v67 = v26;
        v67[2] = 2082;
        *(_QWORD *)&v67[3] = v36;
        v38 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, dumping backtrace:%{public}s";
        v39 = v13;
        v40 = v14;
        v41 = 28;
LABEL_60:
        _os_log_impl(&dword_182FBE000, v39, v40, v38, v64, v41);
        goto LABEL_61;
      }
      goto LABEL_61;
    }
    if (nw_policy_event_queue(void)::onceToken != -1)
      dispatch_once(&nw_policy_event_queue(void)::onceToken, &__block_literal_global_23856);
    v34 = dispatch_source_create(MEMORY[0x1E0C80DB8], v10, 0, (dispatch_queue_t)nw_policy_event_queue(void)::queue);
    network_config_setup_policy_event_watcher(void)::kevsrc = (uint64_t)v34;
    if (v34)
    {
      v35 = MEMORY[0x1E0C809B0];
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZL41network_config_setup_policy_event_watcherv_block_invoke;
      v62 = &__block_descriptor_tmp_10_23879;
      v63 = v10;
      dispatch_source_set_cancel_handler(v34, buf);
      *(_QWORD *)handler = v35;
      v52 = 0x40000000;
      v53 = ___ZL41network_config_setup_policy_event_watcherv_block_invoke_2;
      v54 = &__block_descriptor_tmp_12_23880;
      v55 = v10;
      dispatch_source_set_event_handler((dispatch_source_t)network_config_setup_policy_event_watcher(void)::kevsrc, handler);
      dispatch_activate((dispatch_object_t)network_config_setup_policy_event_watcher(void)::kevsrc);
      v2 = *(NSObject **)(a1 + 48);
      if (v2)
      {
LABEL_3:
        v3 = *(const void **)(a1 + 32);
        if (v3)
        {
          v4 = *(_DWORD *)(a1 + 56);
          if ((v4 - 1) >= 4)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v16 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v4;
              _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s Invalid policy event type %u", buf, 0x12u);
            }
            goto LABEL_108;
          }
          v5 = (xpc_object_t *)off_1E149D9C0[v4 - 1];
          if (*v5 || (v6 = xpc_array_create(0, 0), (*v5 = v6) != 0))
          {
            v7 = xpc_dictionary_create(0, 0, 0);
            if (v7)
            {
              v8 = v7;
              _Block_copy(v3);
              dispatch_retain(v2);
              xpc_dictionary_set_pointer();
              xpc_dictionary_set_pointer();
              xpc_array_append_value(*v5, v8);
LABEL_109:
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v8;
              return;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
            v22 = (char *)_os_log_send_and_compose_impl();
            handler[0] = OS_LOG_TYPE_ERROR;
            v64[0] = 0;
            if (!__nwlog_fault(v22, handler, v64))
              goto LABEL_106;
            if (handler[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v23 = gLogObj;
              v24 = handler[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, handler[0]))
                goto LABEL_106;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
              v25 = "%{public}s xpc_dictionary_create failed";
              goto LABEL_105;
            }
            if (!v64[0])
            {
              v23 = __nwlog_obj();
              v24 = handler[0];
              if (!os_log_type_enabled(v23, handler[0]))
                goto LABEL_106;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
              v25 = "%{public}s xpc_dictionary_create failed, backtrace limit exceeded";
              goto LABEL_105;
            }
            v31 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v23 = gLogObj;
            v24 = handler[0];
            v32 = os_log_type_enabled((os_log_t)gLogObj, handler[0]);
            if (!v31)
            {
              if (!v32)
                goto LABEL_106;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
              v25 = "%{public}s xpc_dictionary_create failed, no backtrace";
              goto LABEL_105;
            }
            if (v32)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v31;
              v33 = "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s";
LABEL_71:
              _os_log_impl(&dword_182FBE000, v23, v24, v33, buf, 0x16u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
            v22 = (char *)_os_log_send_and_compose_impl();
            handler[0] = OS_LOG_TYPE_ERROR;
            v64[0] = 0;
            if (!__nwlog_fault(v22, handler, v64))
              goto LABEL_106;
            if (handler[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v23 = gLogObj;
              v24 = handler[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, handler[0]))
                goto LABEL_106;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
              v25 = "%{public}s xpc_array_create failed";
              goto LABEL_105;
            }
            if (!v64[0])
            {
              v23 = __nwlog_obj();
              v24 = handler[0];
              if (!os_log_type_enabled(v23, handler[0]))
                goto LABEL_106;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
              v25 = "%{public}s xpc_array_create failed, backtrace limit exceeded";
              goto LABEL_105;
            }
            v31 = (char *)__nw_create_backtrace_string();
            v23 = __nwlog_obj();
            v24 = handler[0];
            v42 = os_log_type_enabled(v23, handler[0]);
            if (!v31)
            {
              if (!v42)
                goto LABEL_106;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
              v25 = "%{public}s xpc_array_create failed, no backtrace";
              goto LABEL_105;
            }
            if (v42)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v31;
              v33 = "%{public}s xpc_array_create failed, dumping backtrace:%{public}s";
              goto LABEL_71;
            }
          }
LABEL_72:
          free(v31);
          goto LABEL_106;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
        v22 = (char *)_os_log_send_and_compose_impl();
        handler[0] = OS_LOG_TYPE_ERROR;
        v64[0] = 0;
        if (__nwlog_fault(v22, handler, v64))
        {
          if (handler[0] == OS_LOG_TYPE_FAULT)
          {
            v23 = __nwlog_obj();
            v24 = handler[0];
            if (os_log_type_enabled(v23, handler[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
              v25 = "%{public}s called with null block";
LABEL_105:
              _os_log_impl(&dword_182FBE000, v23, v24, v25, buf, 0xCu);
              goto LABEL_106;
            }
          }
          else if (v64[0])
          {
            v31 = (char *)__nw_create_backtrace_string();
            v23 = __nwlog_obj();
            v24 = handler[0];
            v50 = os_log_type_enabled(v23, handler[0]);
            if (v31)
            {
              if (!v50)
                goto LABEL_72;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v31;
              v33 = "%{public}s called with null block, dumping backtrace:%{public}s";
              goto LABEL_71;
            }
            if (v50)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
              v25 = "%{public}s called with null block, no backtrace";
              goto LABEL_105;
            }
          }
          else
          {
            v23 = __nwlog_obj();
            v24 = handler[0];
            if (os_log_type_enabled(v23, handler[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
              v25 = "%{public}s called with null block, backtrace limit exceeded";
              goto LABEL_105;
            }
          }
        }
        goto LABEL_106;
      }
LABEL_52:
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
      v22 = (char *)_os_log_send_and_compose_impl();
      handler[0] = OS_LOG_TYPE_ERROR;
      v64[0] = 0;
      if (!__nwlog_fault(v22, handler, v64))
        goto LABEL_106;
      if (handler[0] == OS_LOG_TYPE_FAULT)
      {
        v23 = __nwlog_obj();
        v24 = handler[0];
        if (!os_log_type_enabled(v23, handler[0]))
          goto LABEL_106;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
        v25 = "%{public}s called with null queue";
        goto LABEL_105;
      }
      if (v64[0])
      {
        v31 = (char *)__nw_create_backtrace_string();
        v23 = __nwlog_obj();
        v24 = handler[0];
        v49 = os_log_type_enabled(v23, handler[0]);
        if (v31)
        {
          if (!v49)
            goto LABEL_72;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v31;
          v33 = "%{public}s called with null queue, dumping backtrace:%{public}s";
          goto LABEL_71;
        }
        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
          v25 = "%{public}s called with null queue, no backtrace";
          goto LABEL_105;
        }
      }
      else
      {
        v23 = __nwlog_obj();
        v24 = handler[0];
        if (os_log_type_enabled(v23, handler[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "network_config_add_policy_event_handler";
          v25 = "%{public}s called with null queue, backtrace limit exceeded";
          goto LABEL_105;
        }
      }
LABEL_106:
      if (v22)
        free(v22);
LABEL_108:
      v8 = 0;
      goto LABEL_109;
    }
    __nwlog_obj();
    *(_DWORD *)v64 = 136446210;
    v65 = "network_config_setup_policy_event_watcher";
    v12 = (char *)_os_log_send_and_compose_impl();
    v58 = OS_LOG_TYPE_ERROR;
    v56 = 0;
    if (!__nwlog_fault(v12, &v58, &v56))
      goto LABEL_96;
    if (v58 == OS_LOG_TYPE_FAULT)
    {
      v43 = __nwlog_obj();
      v44 = v58;
      if (!os_log_type_enabled(v43, v58))
        goto LABEL_96;
      *(_DWORD *)v64 = 136446210;
      v65 = "network_config_setup_policy_event_watcher";
      v15 = "%{public}s dispatch_source_create failed";
    }
    else if (v56)
    {
      v36 = (char *)__nw_create_backtrace_string();
      v43 = __nwlog_obj();
      v44 = v58;
      v48 = os_log_type_enabled(v43, v58);
      if (v36)
      {
        if (v48)
        {
          *(_DWORD *)v64 = 136446466;
          v65 = "network_config_setup_policy_event_watcher";
          v66 = 2082;
          *(_QWORD *)v67 = v36;
          v38 = "%{public}s dispatch_source_create failed, dumping backtrace:%{public}s";
          v39 = v43;
          v40 = v44;
          v41 = 22;
          goto LABEL_60;
        }
LABEL_61:
        free(v36);
        if (!v12)
          goto LABEL_98;
        goto LABEL_97;
      }
      if (!v48)
        goto LABEL_96;
      *(_DWORD *)v64 = 136446210;
      v65 = "network_config_setup_policy_event_watcher";
      v15 = "%{public}s dispatch_source_create failed, no backtrace";
    }
    else
    {
      v43 = __nwlog_obj();
      v44 = v58;
      if (!os_log_type_enabled(v43, v58))
        goto LABEL_96;
      *(_DWORD *)v64 = 136446210;
      v65 = "network_config_setup_policy_event_watcher";
      v15 = "%{public}s dispatch_source_create failed, backtrace limit exceeded";
    }
    v45 = v43;
    v46 = v44;
    v47 = 12;
    goto LABEL_95;
  }
  v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)v64 = 136446466;
  v65 = "network_config_setup_policy_event_watcher";
  v66 = 1024;
  *(_DWORD *)v67 = v17;
  v18 = (char *)_os_log_send_and_compose_impl();
  v59[0] = OS_LOG_TYPE_ERROR;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v18, v59, type))
  {
    if (v59[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = gLogObj;
      v20 = v59[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v59[0]))
        goto LABEL_80;
      *(_DWORD *)v64 = 136446466;
      v65 = "network_config_setup_policy_event_watcher";
      v66 = 1024;
      *(_DWORD *)v67 = v17;
      v21 = "%{public}s socket(PF_SYSTEM, SOCK_RAW, SYSPROTO_EVENT) failed %{darwin.errno}d";
      goto LABEL_79;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = gLogObj;
      v20 = v59[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v59[0]))
        goto LABEL_80;
      *(_DWORD *)v64 = 136446466;
      v65 = "network_config_setup_policy_event_watcher";
      v66 = 1024;
      *(_DWORD *)v67 = v17;
      v21 = "%{public}s socket(PF_SYSTEM, SOCK_RAW, SYSPROTO_EVENT) failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_79;
    }
    v29 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = gLogObj;
    v20 = v59[0];
    v30 = os_log_type_enabled((os_log_t)gLogObj, v59[0]);
    if (v29)
    {
      if (v30)
      {
        *(_DWORD *)v64 = 136446722;
        v65 = "network_config_setup_policy_event_watcher";
        v66 = 1024;
        *(_DWORD *)v67 = v17;
        v67[2] = 2082;
        *(_QWORD *)&v67[3] = v29;
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s socket(PF_SYSTEM, SOCK_RAW, SYSPROTO_EVENT) failed %{darwin.errno}d, dumping backtrace:%{public}s", v64, 0x1Cu);
      }
      free(v29);
      goto LABEL_80;
    }
    if (v30)
    {
      *(_DWORD *)v64 = 136446466;
      v65 = "network_config_setup_policy_event_watcher";
      v66 = 1024;
      *(_DWORD *)v67 = v17;
      v21 = "%{public}s socket(PF_SYSTEM, SOCK_RAW, SYSPROTO_EVENT) failed %{darwin.errno}d, no backtrace";
LABEL_79:
      _os_log_impl(&dword_182FBE000, v19, v20, v21, v64, 0x12u);
    }
  }
LABEL_80:
  if (v18)
    free(v18);
}

uint64_t ___ZL41network_config_setup_policy_event_watcherv_block_invoke(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void ___ZL41network_config_setup_policy_event_watcherv_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  ssize_t v3;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t *v10;
  void *v11;
  void **v12;
  int v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  char v20;
  os_log_type_t type;
  __int128 v22;
  __int128 v23;
  uint64_t value[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE applier[32];
  xpc_object_t v31;
  xpc_object_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  *(_OWORD *)value = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v2 = MEMORY[0x1E0C809B0];
  while (1)
  {
    v3 = recv(*(_DWORD *)(a1 + 32), &v22, 0x80uLL, 0);
    if (v3 < 1)
      break;
    if ((unint64_t)v3 >= 0x18
      && DWORD1(v22) == 1
      && DWORD2(v22) == 1
      && HIDWORD(v22) == 3
      && v22 >= 0x40
      && v3 >= (unint64_t)v22)
    {
      v8 = xpc_uint64_create(value[0]);
      v9 = xpc_uuid_create((const unsigned __int8 *)&value[1]);
      if (DWORD1(v23) == 1)
      {
        v12 = (void **)&g_wifi_blocked_handlers;
        if (DWORD2(v25) != 3)
          v12 = (void **)&g_cellular_blocked_handlers;
        v11 = *v12;
        if (!*v12)
        {
LABEL_33:
          if (!v8)
            goto LABEL_26;
LABEL_25:
          xpc_release(v8);
          goto LABEL_26;
        }
      }
      else if (DWORD1(v23) == 2)
      {
        v11 = (void *)g_cellular_failed_handlers;
        if (!g_cellular_failed_handlers)
          goto LABEL_33;
      }
      else
      {
        v10 = &g_cellular_blocked_handlers;
        if (DWORD1(v23) == 3)
        {
          v10 = &g_local_network_blocked_handlers;
          if (DWORD2(v25) != 1)
            goto LABEL_33;
        }
        v11 = (void *)*v10;
        if (!*v10)
          goto LABEL_33;
      }
      *(_QWORD *)applier = v2;
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = ___ZL42network_config_handle_policy_event_messagelP14kern_event_msg_block_invoke;
      *(_QWORD *)&applier[24] = &__block_descriptor_tmp_18_23904;
      v31 = v8;
      v32 = v9;
      xpc_array_apply(v11, applier);
      if (v8)
        goto LABEL_25;
LABEL_26:
      if (v9)
        xpc_release(v9);
    }
  }
  if (v3 < 0)
  {
    v13 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v13 != 35)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)applier = 136446466;
      *(_QWORD *)&applier[4] = "network_config_setup_policy_event_watcher_block_invoke_2";
      *(_WORD *)&applier[12] = 1024;
      *(_DWORD *)&applier[14] = v13;
      v14 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v20 = 0;
      if (!__nwlog_fault(v14, &type, &v20))
        goto LABEL_51;
      if (type != OS_LOG_TYPE_FAULT)
      {
        if (v20)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = gLogObj;
          v16 = type;
          v19 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v19)
            {
              *(_DWORD *)applier = 136446722;
              *(_QWORD *)&applier[4] = "network_config_setup_policy_event_watcher_block_invoke";
              *(_WORD *)&applier[12] = 1024;
              *(_DWORD *)&applier[14] = v13;
              *(_WORD *)&applier[18] = 2082;
              *(_QWORD *)&applier[20] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s recv from kernel event socket failed %{darwin.errno}d, dumping backtrace:%{public}s", applier, 0x1Cu);
            }
            free(backtrace_string);
            goto LABEL_51;
          }
          if (!v19)
            goto LABEL_51;
          *(_DWORD *)applier = 136446466;
          *(_QWORD *)&applier[4] = "network_config_setup_policy_event_watcher_block_invoke";
          *(_WORD *)&applier[12] = 1024;
          *(_DWORD *)&applier[14] = v13;
          v17 = "%{public}s recv from kernel event socket failed %{darwin.errno}d, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = gLogObj;
          v16 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_51;
          *(_DWORD *)applier = 136446466;
          *(_QWORD *)&applier[4] = "network_config_setup_policy_event_watcher_block_invoke";
          *(_WORD *)&applier[12] = 1024;
          *(_DWORD *)&applier[14] = v13;
          v17 = "%{public}s recv from kernel event socket failed %{darwin.errno}d, backtrace limit exceeded";
        }
LABEL_50:
        _os_log_impl(&dword_182FBE000, v15, v16, v17, applier, 0x12u);
        goto LABEL_51;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = gLogObj;
      v16 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)applier = 136446466;
        *(_QWORD *)&applier[4] = "network_config_setup_policy_event_watcher_block_invoke";
        *(_WORD *)&applier[12] = 1024;
        *(_DWORD *)&applier[14] = v13;
        v17 = "%{public}s recv from kernel event socket failed %{darwin.errno}d";
        goto LABEL_50;
      }
LABEL_51:
      if (v14)
        free(v14);
      dispatch_source_cancel((dispatch_source_t)network_config_setup_policy_event_watcher(void)::kevsrc);
    }
  }
}

uint64_t ___ZL42network_config_handle_policy_event_messagelP14kern_event_msg_block_invoke(uint64_t a1)
{
  uint64_t pointer;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  xpc_object_t v6;
  void *v7;
  xpc_object_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  _QWORD v13[8];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 buf;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  pointer = xpc_dictionary_get_pointer();
  v3 = xpc_dictionary_get_pointer();
  if (!pointer)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return 1;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = "network_config_handle_policy_event_message_block_invoke";
    v11 = "%{public}s Event handler has no block set";
LABEL_11:
    _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&buf, 0xCu);
    return 1;
  }
  v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return 1;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = "network_config_handle_policy_event_message_block_invoke";
    v11 = "%{public}s Event handler has no queue set";
    goto LABEL_11;
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v19 = 0x2000000000;
  v20 = 0;
  v5 = *(void **)(a1 + 32);
  if (v5)
  {
    v6 = xpc_retain(v5);
    *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = v6;
  }
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    v8 = xpc_retain(v7);
    v15[3] = (uint64_t)v8;
    v9 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v9 = 0;
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = ___ZL42network_config_handle_policy_event_messagelP14kern_event_msg_block_invoke_15;
  v13[3] = &unk_1E149D8D8;
  v13[4] = pointer;
  v13[5] = &buf;
  v13[6] = &v14;
  v13[7] = v9;
  dispatch_async(v4, v13);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&buf, 8);
  return 1;
}

void ___ZL42network_config_handle_policy_event_messagelP14kern_event_msg_block_invoke_15(_QWORD *a1)
{
  void *v2;
  void *v3;

  (*(void (**)(void))(a1[4] + 16))();
  v2 = *(void **)(*(_QWORD *)(a1[5] + 8) + 24);
  if (v2)
  {
    xpc_release(v2);
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
  }
  v3 = *(void **)(*(_QWORD *)(a1[6] + 8) + 24);
  if (v3)
  {
    xpc_release(v3);
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
  }
}

dispatch_queue_t ___ZL21nw_policy_event_queuev_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  result = dispatch_queue_create("com.apple.libnetwork.cellular_blocked", v0);
  nw_policy_event_queue(void)::queue = (uint64_t)result;
  return result;
}

uint64_t network_config_cellular_failed_observer_create(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136446210;
    v7 = "network_config_cellular_failed_observer_create";
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s creating cellular failed observer", (uint8_t *)&v6, 0xCu);
  }
  return network_config_policy_observer_create(2, a1, a2);
}

uint64_t network_config_wifi_blocked_observer_create(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136446210;
    v7 = "network_config_wifi_blocked_observer_create";
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s creating Wi-Fi blocked observer", (uint8_t *)&v6, 0xCu);
  }
  return network_config_policy_observer_create(3, a1, a2);
}

uint64_t network_config_local_network_blocked_observer_create(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136446210;
    v7 = "network_config_local_network_blocked_observer_create";
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s creating local network blocked observer", (uint8_t *)&v6, 0xCu);
  }
  return network_config_policy_observer_create(4, a1, a2);
}

void network_config_policy_observer_cancel(void *a1)
{
  NSObject *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  _QWORD block[5];
  char v10;
  os_log_type_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = gLogObj;
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v13 = "network_config_policy_observer_cancel";
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s cancelling cellular blocked observer", buf, 0xCu);
    }
    if (nw_policy_event_queue(void)::onceToken != -1)
      dispatch_once(&nw_policy_event_queue(void)::onceToken, &__block_literal_global_23856);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZL37network_config_policy_observer_cancelPv_block_invoke;
    block[3] = &__block_descriptor_tmp_19_23925;
    block[4] = a1;
    dispatch_sync((dispatch_queue_t)nw_policy_event_queue(void)::queue, block);
    return;
  }
  *(_DWORD *)buf = 136446210;
  v13 = "network_config_policy_observer_cancel";
  v3 = (char *)_os_log_send_and_compose_impl();
  v11 = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v3, &v11, &v10))
  {
    if (v11 == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = v11;
      if (!os_log_type_enabled(v4, v11))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v13 = "network_config_policy_observer_cancel";
      v6 = "%{public}s called with null observer";
      goto LABEL_21;
    }
    if (!v10)
    {
      v4 = __nwlog_obj();
      v5 = v11;
      if (!os_log_type_enabled(v4, v11))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v13 = "network_config_policy_observer_cancel";
      v6 = "%{public}s called with null observer, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = v11;
    v8 = os_log_type_enabled(v4, v11);
    if (backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        v13 = "network_config_policy_observer_cancel";
        v14 = 2082;
        v15 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null observer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_22;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446210;
      v13 = "network_config_policy_observer_cancel";
      v6 = "%{public}s called with null observer, no backtrace";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    }
  }
LABEL_22:
  if (v3)
    free(v3);
}

void ___ZL37network_config_policy_observer_cancelPv_block_invoke(uint64_t a1)
{
  network_config_remove_observer_from_array((void **)&g_cellular_blocked_handlers, *(void **)(a1 + 32));
  network_config_remove_observer_from_array((void **)&g_cellular_failed_handlers, *(void **)(a1 + 32));
  network_config_remove_observer_from_array(&g_wifi_blocked_handlers, *(void **)(a1 + 32));
  network_config_remove_observer_from_array((void **)&g_local_network_blocked_handlers, *(void **)(a1 + 32));
}

void network_config_remove_observer_from_array(void **a1, void *a2)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char *v14;
  _BOOL4 v15;
  _QWORD v16[6];
  _QWORD applier[6];
  char v18;
  os_log_type_t v19;
  _BYTE buf[24];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "network_config_remove_observer_from_array";
    v8 = (char *)_os_log_send_and_compose_impl();
    v19 = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v8, &v19, &v18))
      goto LABEL_36;
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (!os_log_type_enabled(v9, v19))
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "network_config_remove_observer_from_array";
      v11 = "%{public}s called with null array_ptr";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = v19;
      v13 = os_log_type_enabled(v9, v19);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "network_config_remove_observer_from_array";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null array_ptr, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v8)
          return;
LABEL_37:
        free(v8);
        return;
      }
      if (!v13)
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "network_config_remove_observer_from_array";
      v11 = "%{public}s called with null array_ptr, no backtrace";
    }
    else
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (!os_log_type_enabled(v9, v19))
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "network_config_remove_observer_from_array";
      v11 = "%{public}s called with null array_ptr, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
    goto LABEL_36;
  }
  if (a2)
  {
    v4 = *a1;
    if (v4)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      v21 = 0;
      v5 = MEMORY[0x1E0C809B0];
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 0x40000000;
      applier[2] = ___ZL41network_config_remove_observer_from_arrayPPvS__block_invoke;
      applier[3] = &unk_1E149D940;
      applier[4] = buf;
      applier[5] = a2;
      xpc_array_apply(v4, applier);
      v6 = xpc_array_create(0, 0);
      v7 = *a1;
      v16[0] = v5;
      v16[1] = 0x40000000;
      v16[2] = ___ZL41network_config_remove_observer_from_arrayPPvS__block_invoke_2;
      v16[3] = &__block_descriptor_tmp_21_23937;
      v16[4] = a2;
      v16[5] = v6;
      xpc_array_apply(v7, v16);
      if (*a1)
        xpc_release(*a1);
      *a1 = v6;
      _Block_object_dispose(buf, 8);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "network_config_remove_observer_from_array";
  v8 = (char *)_os_log_send_and_compose_impl();
  v19 = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (!__nwlog_fault(v8, &v19, &v18))
    goto LABEL_36;
  if (v19 == OS_LOG_TYPE_FAULT)
  {
    v9 = __nwlog_obj();
    v10 = v19;
    if (!os_log_type_enabled(v9, v19))
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "network_config_remove_observer_from_array";
    v11 = "%{public}s called with null observer";
    goto LABEL_35;
  }
  if (!v18)
  {
    v9 = __nwlog_obj();
    v10 = v19;
    if (!os_log_type_enabled(v9, v19))
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "network_config_remove_observer_from_array";
    v11 = "%{public}s called with null observer, backtrace limit exceeded";
    goto LABEL_35;
  }
  v14 = (char *)__nw_create_backtrace_string();
  v9 = __nwlog_obj();
  v10 = v19;
  v15 = os_log_type_enabled(v9, v19);
  if (!v14)
  {
    if (!v15)
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "network_config_remove_observer_from_array";
    v11 = "%{public}s called with null observer, no backtrace";
    goto LABEL_35;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "network_config_remove_observer_from_array";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v14;
    _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null observer, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v14);
  if (v8)
    goto LABEL_37;
}

BOOL ___ZL41network_config_remove_observer_from_arrayPPvS__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3 == a3)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return v3 != a3;
}

uint64_t ___ZL41network_config_remove_observer_from_arrayPPvS__block_invoke_2(uint64_t a1, int a2, xpc_object_t value)
{
  const void *pointer;
  NSObject *v4;

  if (*(xpc_object_t *)(a1 + 32) == value)
  {
    pointer = (const void *)xpc_dictionary_get_pointer();
    v4 = xpc_dictionary_get_pointer();
    if (pointer)
      _Block_release(pointer);
    if (v4)
      dispatch_release(v4);
    xpc_dictionary_set_pointer();
    xpc_dictionary_set_pointer();
  }
  else
  {
    xpc_array_append_value(*(xpc_object_t *)(a1 + 40), value);
  }
  return 1;
}

uint64_t network_config_mptcp_watcher_create(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  unsigned int v6;
  int v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  int v12;
  char *v13;
  _BOOL4 v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  char *v19;
  _BOOL4 v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *v26;
  _BOOL4 v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  const char *v31;
  char *backtrace_string;
  _BOOL4 v33;
  const char *v34;
  _BOOL4 v35;
  _QWORD v36[6];
  unsigned int v37;
  _QWORD handler[5];
  unsigned int v39;
  char v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  int v44;
  os_log_type_t type[4];
  const char *v46;
  __int16 v47;
  char *v48;
  _BYTE buf[32];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
    v28 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v43) = 0;
    if (!__nwlog_fault(v28, type, &v43))
      goto LABEL_90;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v43)
      {
        v29 = __nwlog_obj();
        v30 = type[0];
        if (!os_log_type_enabled(v29, type[0]))
          goto LABEL_90;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
        v31 = "%{public}s called with null queue, backtrace limit exceeded";
        goto LABEL_89;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v29 = __nwlog_obj();
      v30 = type[0];
      v33 = os_log_type_enabled(v29, type[0]);
      if (!backtrace_string)
      {
        if (!v33)
          goto LABEL_90;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
        v31 = "%{public}s called with null queue, no backtrace";
        goto LABEL_89;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v34 = "%{public}s called with null queue, dumping backtrace:%{public}s";
LABEL_79:
        _os_log_impl(&dword_182FBE000, v29, v30, v34, buf, 0x16u);
      }
LABEL_80:
      free(backtrace_string);
      goto LABEL_90;
    }
    v29 = __nwlog_obj();
    v30 = type[0];
    if (!os_log_type_enabled(v29, type[0]))
      goto LABEL_90;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
    v31 = "%{public}s called with null queue";
LABEL_89:
    _os_log_impl(&dword_182FBE000, v29, v30, v31, buf, 0xCu);
LABEL_90:
    if (v28)
      free(v28);
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
    v28 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v43) = 0;
    if (!__nwlog_fault(v28, type, &v43))
      goto LABEL_90;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v29 = __nwlog_obj();
      v30 = type[0];
      if (!os_log_type_enabled(v29, type[0]))
        goto LABEL_90;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
      v31 = "%{public}s called with null block";
      goto LABEL_89;
    }
    if (!(_BYTE)v43)
    {
      v29 = __nwlog_obj();
      v30 = type[0];
      if (!os_log_type_enabled(v29, type[0]))
        goto LABEL_90;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
      v31 = "%{public}s called with null block, backtrace limit exceeded";
      goto LABEL_89;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v29 = __nwlog_obj();
    v30 = type[0];
    v35 = os_log_type_enabled(v29, type[0]);
    if (backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v34 = "%{public}s called with null block, dumping backtrace:%{public}s";
        goto LABEL_79;
      }
      goto LABEL_80;
    }
    if (!v35)
      goto LABEL_90;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
    v31 = "%{public}s called with null block, no backtrace";
    goto LABEL_89;
  }
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s creating MPTCP watcher", buf, 0xCu);
  }
  v5 = socket(32, 3, 1);
  if (v5 < 0)
    return 0;
  v6 = v5;
  v44 = 12;
  v43 = 0x100000001;
  if (ioctl(v5, 0x800C6502uLL, &v43))
  {
    v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v7;
    v8 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v42) = 0;
    if (!__nwlog_fault(v8, type, &v42))
      goto LABEL_44;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_44;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      v11 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d";
      goto LABEL_43;
    }
    if (!(_BYTE)v42)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_44;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      v11 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_43;
    }
    v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type[0];
    v14 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!v13)
    {
      if (!v14)
        goto LABEL_44;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      v11 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, no backtrace";
      goto LABEL_43;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v13;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
    }
    free(v13);
    goto LABEL_44;
  }
  v42 = 1;
  if (!ioctl(v6, 0x8004667EuLL, &v42))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    *(_QWORD *)&buf[24] = 0;
    if (nw_policy_event_queue(void)::onceToken != -1)
      dispatch_once(&nw_policy_event_queue(void)::onceToken, &__block_literal_global_23856);
    *(_QWORD *)&buf[24] = dispatch_source_create(MEMORY[0x1E0C80DB8], v6, 0, (dispatch_queue_t)nw_policy_event_queue(void)::queue);
    v15 = *(NSObject **)(*(_QWORD *)&buf[8] + 24);
    if (v15)
    {
      v16 = MEMORY[0x1E0C809B0];
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 0x40000000;
      handler[2] = __network_config_mptcp_watcher_create_block_invoke;
      handler[3] = &unk_1E149D7D0;
      v39 = v6;
      handler[4] = buf;
      dispatch_source_set_cancel_handler(v15, handler);
      v17 = *(NSObject **)(*(_QWORD *)&buf[8] + 24);
      v36[0] = v16;
      v36[1] = 0x40000000;
      v36[2] = __network_config_mptcp_watcher_create_block_invoke_2;
      v36[3] = &unk_1E149D848;
      v37 = v6;
      v36[4] = a2;
      v36[5] = a1;
      dispatch_source_set_event_handler(v17, v36);
      dispatch_activate(*(dispatch_object_t *)(*(_QWORD *)&buf[8] + 24));
      v18 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
LABEL_62:
      _Block_object_dispose(buf, 8);
      return v18;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)type = 136446210;
    v46 = "network_config_mptcp_watcher_create";
    v21 = (char *)_os_log_send_and_compose_impl();
    v41 = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if (__nwlog_fault(v21, &v41, &v40))
    {
      if (v41 == OS_LOG_TYPE_FAULT)
      {
        v22 = __nwlog_obj();
        v23 = v41;
        if (os_log_type_enabled(v22, v41))
        {
          *(_DWORD *)type = 136446210;
          v46 = "network_config_mptcp_watcher_create";
          v24 = "%{public}s dispatch_source_create failed";
LABEL_58:
          _os_log_impl(&dword_182FBE000, v22, v23, v24, (uint8_t *)type, 0xCu);
        }
      }
      else if (v40)
      {
        v26 = (char *)__nw_create_backtrace_string();
        v22 = __nwlog_obj();
        v23 = v41;
        v27 = os_log_type_enabled(v22, v41);
        if (v26)
        {
          if (v27)
          {
            *(_DWORD *)type = 136446466;
            v46 = "network_config_mptcp_watcher_create";
            v47 = 2082;
            v48 = v26;
            _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s dispatch_source_create failed, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
          }
          free(v26);
          goto LABEL_59;
        }
        if (v27)
        {
          *(_DWORD *)type = 136446210;
          v46 = "network_config_mptcp_watcher_create";
          v24 = "%{public}s dispatch_source_create failed, no backtrace";
          goto LABEL_58;
        }
      }
      else
      {
        v22 = __nwlog_obj();
        v23 = v41;
        if (os_log_type_enabled(v22, v41))
        {
          *(_DWORD *)type = 136446210;
          v46 = "network_config_mptcp_watcher_create";
          v24 = "%{public}s dispatch_source_create failed, backtrace limit exceeded";
          goto LABEL_58;
        }
      }
    }
LABEL_59:
    if (v21)
      free(v21);
    close(v6);
    v18 = 0;
    goto LABEL_62;
  }
  v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  v8 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v41 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v8, type, &v41))
    goto LABEL_44;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type[0];
    if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
      goto LABEL_44;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    v11 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d";
    goto LABEL_43;
  }
  if (v41 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type[0];
    if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
      goto LABEL_44;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    v11 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, backtrace limit exceeded";
    goto LABEL_43;
  }
  v19 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = gLogObj;
  v10 = type[0];
  v20 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
  if (v19)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v19;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
    }
    free(v19);
    if (!v8)
      goto LABEL_46;
    goto LABEL_45;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "network_config_mptcp_watcher_create";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    v11 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, no backtrace";
LABEL_43:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0x12u);
  }
LABEL_44:
  if (v8)
LABEL_45:
    free(v8);
LABEL_46:
  close(v6);
  return 0;
}

void __network_config_mptcp_watcher_create_block_invoke(uint64_t a1)
{
  NSObject *v2;

  close(*(_DWORD *)(a1 + 40));
  v2 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
}

void __network_config_mptcp_watcher_create_block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  ssize_t v3;
  char *v5;
  uint64_t v6;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  int v11;
  NSObject *v12;
  _BOOL4 v13;
  const char *v14;
  NSObject *v15;
  char *backtrace_string;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  os_log_type_t v21;
  int v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *v27;
  _BOOL4 v28;
  NSObject *v29;
  _QWORD v30[5];
  _QWORD block[5];
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  _BYTE v37[20];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  while (1)
  {
    v3 = recv(*(_DWORD *)(a1 + 48), &v38, 0x80uLL, 0);
    if (v3 < 1)
      break;
    if (DWORD2(v38) == 1 && HIDWORD(v38) == 12)
    {
      if (DWORD1(v39) == 1)
      {
        v11 = DWORD2(v39);
        if ((((DWORD2(v39) == 0) ^ sMptcpUsesCell) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = gLogObj;
          v13 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT);
          v11 = DWORD2(v39);
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v14 = "on";
            if (!DWORD2(v39))
              v14 = "off";
            v35 = "network_config_mptcp_watcher_create_block_invoke";
            v36 = 2082;
            *(_QWORD *)v37 = v14;
            _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s MPTCP changing cell-icon to %{public}s", buf, 0x16u);
            v11 = DWORD2(v39);
          }
        }
        sMptcpUsesCell = v11 != 0;
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __network_config_mptcp_watcher_create_block_invoke_4;
        block[3] = &unk_1E149D7F8;
        v2 = *(NSObject **)(a1 + 40);
        block[4] = *(_QWORD *)(a1 + 32);
        dispatch_async(v2, block);
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446466;
          v35 = "network_config_mptcp_watcher_create_block_invoke";
          v36 = 1024;
          *(_DWORD *)v37 = DWORD1(v39);
          _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_INFO, "%{public}s Received unexpected event-code: %u", buf, 0x12u);
        }
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446722;
      v35 = "network_config_mptcp_watcher_create_block_invoke_2";
      v36 = 1024;
      *(_DWORD *)v37 = DWORD2(v38);
      *(_WORD *)&v37[4] = 1024;
      *(_DWORD *)&v37[6] = HIDWORD(v38);
      v5 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v32 = 0;
      if (__nwlog_fault(v5, &type, &v32))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v6 = gLogObj;
          v7 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            v35 = "network_config_mptcp_watcher_create_block_invoke";
            v36 = 1024;
            *(_DWORD *)v37 = DWORD2(v38);
            *(_WORD *)&v37[4] = 1024;
            *(_DWORD *)&v37[6] = HIDWORD(v38);
            v8 = v6;
            v9 = v7;
            v10 = "%{public}s Received unexpected msg: class %u subclass %u";
LABEL_29:
            _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0x18u);
          }
        }
        else if (v32)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v17 = gLogObj;
          v18 = type;
          v19 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v19)
            {
              *(_DWORD *)buf = 136446978;
              v35 = "network_config_mptcp_watcher_create_block_invoke";
              v36 = 1024;
              *(_DWORD *)v37 = DWORD2(v38);
              *(_WORD *)&v37[4] = 1024;
              *(_DWORD *)&v37[6] = HIDWORD(v38);
              *(_WORD *)&v37[10] = 2082;
              *(_QWORD *)&v37[12] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s Received unexpected msg: class %u subclass %u, dumping backtrace:%{public}s", buf, 0x22u);
            }
            free(backtrace_string);
          }
          else if (v19)
          {
            *(_DWORD *)buf = 136446722;
            v35 = "network_config_mptcp_watcher_create_block_invoke";
            v36 = 1024;
            *(_DWORD *)v37 = DWORD2(v38);
            *(_WORD *)&v37[4] = 1024;
            *(_DWORD *)&v37[6] = HIDWORD(v38);
            v8 = v17;
            v9 = v18;
            v10 = "%{public}s Received unexpected msg: class %u subclass %u, no backtrace";
            goto LABEL_29;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v20 = gLogObj;
          v21 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            v35 = "network_config_mptcp_watcher_create_block_invoke";
            v36 = 1024;
            *(_DWORD *)v37 = DWORD2(v38);
            *(_WORD *)&v37[4] = 1024;
            *(_DWORD *)&v37[6] = HIDWORD(v38);
            v8 = v20;
            v9 = v21;
            v10 = "%{public}s Received unexpected msg: class %u subclass %u, backtrace limit exceeded";
            goto LABEL_29;
          }
        }
      }
      if (v5)
        free(v5);
    }
  }
  if (v3 < 0)
  {
    v22 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v22 != 35)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      v35 = "network_config_mptcp_watcher_create_block_invoke_2";
      v36 = 1024;
      *(_DWORD *)v37 = v22;
      v23 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v32 = 0;
      if (!__nwlog_fault(v23, &type, &v32))
        goto LABEL_48;
      if (type != OS_LOG_TYPE_FAULT)
      {
        if (v32)
        {
          v27 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v24 = gLogObj;
          v25 = type;
          v28 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v27)
          {
            if (v28)
            {
              *(_DWORD *)buf = 136446722;
              v35 = "network_config_mptcp_watcher_create_block_invoke";
              v36 = 1024;
              *(_DWORD *)v37 = v22;
              *(_WORD *)&v37[4] = 2082;
              *(_QWORD *)&v37[6] = v27;
              _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s recv from kernel event socket failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }
            free(v27);
            goto LABEL_48;
          }
          if (!v28)
            goto LABEL_48;
          *(_DWORD *)buf = 136446466;
          v35 = "network_config_mptcp_watcher_create_block_invoke";
          v36 = 1024;
          *(_DWORD *)v37 = v22;
          v26 = "%{public}s recv from kernel event socket failed %{darwin.errno}d, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v24 = gLogObj;
          v25 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_48;
          *(_DWORD *)buf = 136446466;
          v35 = "network_config_mptcp_watcher_create_block_invoke";
          v36 = 1024;
          *(_DWORD *)v37 = v22;
          v26 = "%{public}s recv from kernel event socket failed %{darwin.errno}d, backtrace limit exceeded";
        }
LABEL_47:
        _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0x12u);
        goto LABEL_48;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v24 = gLogObj;
      v25 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v35 = "network_config_mptcp_watcher_create_block_invoke";
        v36 = 1024;
        *(_DWORD *)v37 = v22;
        v26 = "%{public}s recv from kernel event socket failed %{darwin.errno}d";
        goto LABEL_47;
      }
LABEL_48:
      if (v23)
        free(v23);
      v30[0] = MEMORY[0x1E0C809B0];
      v30[1] = 0x40000000;
      v30[2] = __network_config_mptcp_watcher_create_block_invoke_6;
      v30[3] = &unk_1E149D820;
      v29 = *(NSObject **)(a1 + 40);
      v30[4] = *(_QWORD *)(a1 + 32);
      dispatch_async(v29, v30);
    }
  }
}

uint64_t __network_config_mptcp_watcher_create_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __network_config_mptcp_watcher_create_block_invoke_6(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t network_config_mptcp_cell_in_use()
{
  return sMptcpUsesCell;
}

char *nw_connection_copy_description_level(void *a1, int a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  const char *description;
  const char *v7;
  char *v8;
  _DWORD *v9;
  void *v10;
  _BOOL8 v11;
  const char *v12;
  const char *v13;
  const char *v14;
  char *v15;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  _QWORD v25[4];
  id v26;
  _BYTE *v27;
  os_log_type_t *v28;
  os_log_type_t type[8];
  os_log_type_t *v30;
  uint64_t v31;
  char v32;
  char *v33;
  _BYTE buf[24];
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v33 = 0;
    v5 = (void *)v3[1];
    if (a2 == 1)
      description = nw_endpoint_get_description(v5);
    else
      description = nw_endpoint_get_logging_description(v5);
    v7 = description;
    v8 = nw_parameters_copy_description_internal(*((NWConcrete_nw_parameters **)v4 + 2), 0);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v35 = __Block_byref_object_copy__24122;
    v36 = __Block_byref_object_dispose__24123;
    v37 = 0;
    *(_QWORD *)type = 0;
    v30 = type;
    v31 = 0x2020000000;
    v32 = 0;
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = ___ZL36nw_connection_copy_description_levelP24NWConcrete_nw_connection26nw_context_privacy_level_t_block_invoke;
    v25[3] = &unk_1E14A54F0;
    v9 = v4;
    v26 = v9;
    v27 = buf;
    v28 = type;
    os_unfair_lock_lock((os_unfair_lock_t)v4 + 34);
    ___ZL36nw_connection_copy_description_levelP24NWConcrete_nw_connection26nw_context_privacy_level_t_block_invoke(v25);
    os_unfair_lock_unlock((os_unfair_lock_t)v4 + 34);
    v10 = *(void **)(*(_QWORD *)&buf[8] + 40);
    if (v10)
      v11 = nw_path_copy_description(v10);
    else
      v11 = 0;
    v12 = "";
    if (*((_BYTE *)v30 + 24))
      v13 = "connected ";
    else
      v13 = "";
    v14 = ", path ";
    if (v11)
      v12 = (const char *)v11;
    else
      v14 = "";
    asprintf(&v33, "[C%u %s%s %s%s%s]", v9[112], v13, v7, v8, v14, v12);
    if (v8)
      free(v8);
    if (v11)
      free((void *)v11);
    v15 = v33;

    _Block_object_dispose(type, 8);
    _Block_object_dispose(buf, 8);

    goto LABEL_19;
  }
  __nwlog_obj();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_copy_description_level";
  v18 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v33) = 0;
  if (__nwlog_fault(v18, type, &v33))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_description_level";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if ((_BYTE)v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v22 = type[0];
      v23 = os_log_type_enabled(v19, type[0]);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_copy_description_level";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_description_level";
        _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v24 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_description_level";
        _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_36:
  if (v18)
    free(v18);
  v15 = 0;
LABEL_19:

  return v15;
}

void sub_1835A0CD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24122(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24123(uint64_t a1)
{

}

void ___ZL36nw_connection_copy_description_levelP24NWConcrete_nw_connection26nw_context_privacy_level_t_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = a1[4];
  v3 = *(void **)(v2 + 144);
  if (v3)
  {
    if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
    {
      v8 = nw_endpoint_handler_copy_connected_path(v3);
      v9 = *(_QWORD *)(a1[5] + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v8;

      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else
    {
      v4 = v3;
      os_unfair_lock_lock((os_unfair_lock_t)v4 + 28);
      v5 = *((id *)v4 + 8);
      os_unfair_lock_unlock((os_unfair_lock_t)v4 + 28);

      v6 = *(_QWORD *)(a1[5] + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
  }
}

char *__cdecl nw_connection_copy_description(nw_connection_t connection)
{
  NSObject *v1;
  NSObject *v2;
  char *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = connection;
  v2 = v1;
  if (v1)
  {
    v3 = nw_connection_copy_description_level(v1, 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_connection_copy_description";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_copy_description";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_connection_copy_description";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_copy_description";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_copy_description";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_1835A1080(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_cancel_update_handler(NWConcrete_nw_connection *a1)
{
  NWConcrete_nw_connection *v1;
  os_unfair_lock_s *p_lock;
  NWConcrete_nw_connection *v3;
  uint64_t v4;
  _QWORD v5[4];
  NWConcrete_nw_connection *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v13[5];
  id v14;
  _QWORD v15[5];
  id v16;
  _QWORD v17[5];
  id v18;
  _QWORD v19[5];
  id v20;
  _QWORD v21[5];
  id v22;
  _QWORD v23[5];
  id v24;

  v1 = a1;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x3032000000;
  v23[3] = __Block_byref_object_copy__8;
  v23[4] = __Block_byref_object_dispose__9;
  v24 = 0;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x3032000000;
  v21[3] = __Block_byref_object_copy__8;
  v21[4] = __Block_byref_object_dispose__9;
  v22 = 0;
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x3032000000;
  v19[3] = __Block_byref_object_copy__8;
  v19[4] = __Block_byref_object_dispose__9;
  v20 = 0;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3032000000;
  v17[3] = __Block_byref_object_copy__8;
  v17[4] = __Block_byref_object_dispose__9;
  v18 = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x3032000000;
  v15[3] = __Block_byref_object_copy__8;
  v15[4] = __Block_byref_object_dispose__9;
  v16 = 0;
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x3032000000;
  v13[3] = __Block_byref_object_copy__8;
  v13[4] = __Block_byref_object_dispose__9;
  v14 = 0;
  p_lock = &v1->lock;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZL35nw_connection_cancel_update_handlerP24NWConcrete_nw_connection_block_invoke;
  v5[3] = &unk_1E149DD30;
  v6 = v1;
  v7 = v23;
  v8 = v21;
  v9 = v19;
  v10 = v17;
  v11 = v15;
  v12 = v13;
  v3 = v1;
  os_unfair_lock_lock(p_lock);
  ___ZL35nw_connection_cancel_update_handlerP24NWConcrete_nw_connection_block_invoke(v5, v4);
  os_unfair_lock_unlock(p_lock);

  _Block_object_dispose(v13, 8);
  _Block_object_dispose(v15, 8);

  _Block_object_dispose(v17, 8);
  _Block_object_dispose(v19, 8);

  _Block_object_dispose(v21, 8);
  _Block_object_dispose(v23, 8);

}

void *__Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void ___ZL35nw_connection_cancel_update_handlerP24NWConcrete_nw_connection_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;

  v3 = a1[4];
  v4 = *(_QWORD *)(v3 + 368);
  if (v4)
  {
    nw_queue_cancel_source(v4, a2);
    *(_QWORD *)(a1[4] + 368) = 0;
    v3 = a1[4];
  }
  v5 = *(void **)(v3 + 144);
  *(_QWORD *)(v3 + 144) = 0;

  v6 = a1[4];
  v7 = *(void **)(v6 + 176);
  *(_QWORD *)(v6 + 176) = 0;

  v8 = a1[4];
  v9 = *(void **)(v8 + 184);
  *(_QWORD *)(v8 + 184) = 0;

  v11 = a1[4];
  v12 = *(_QWORD *)(v11 + 224);
  if (v12)
  {
    nw_queue_cancel_source(v12, v10);
    *(_QWORD *)(a1[4] + 224) = 0;
    v11 = a1[4];
  }
  *(_BYTE *)(v11 + 109) &= ~0x40u;
  v13 = _Block_copy(*(const void **)(a1[4] + 208));
  v14 = *(_QWORD *)(a1[5] + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;

  v16 = a1[4];
  v17 = *(void **)(v16 + 208);
  *(_QWORD *)(v16 + 208) = 0;

  v18 = _Block_copy(*(const void **)(a1[4] + 232));
  v19 = *(_QWORD *)(a1[6] + 8);
  v20 = *(void **)(v19 + 40);
  *(_QWORD *)(v19 + 40) = v18;

  v21 = a1[4];
  v22 = *(void **)(v21 + 232);
  *(_QWORD *)(v21 + 232) = 0;

  v23 = _Block_copy(*(const void **)(a1[4] + 240));
  v24 = *(_QWORD *)(a1[7] + 8);
  v25 = *(void **)(v24 + 40);
  *(_QWORD *)(v24 + 40) = v23;

  v26 = a1[4];
  v27 = *(void **)(v26 + 240);
  *(_QWORD *)(v26 + 240) = 0;

  v28 = _Block_copy(*(const void **)(a1[4] + 248));
  v29 = *(_QWORD *)(a1[8] + 8);
  v30 = *(void **)(v29 + 40);
  *(_QWORD *)(v29 + 40) = v28;

  v31 = a1[4];
  v32 = *(void **)(v31 + 248);
  *(_QWORD *)(v31 + 248) = 0;

  v33 = _Block_copy(*(const void **)(a1[4] + 256));
  v34 = *(_QWORD *)(a1[9] + 8);
  v35 = *(void **)(v34 + 40);
  *(_QWORD *)(v34 + 40) = v33;

  v36 = a1[4];
  v37 = *(void **)(v36 + 256);
  *(_QWORD *)(v36 + 256) = 0;

  v38 = _Block_copy(*(const void **)(a1[4] + 384));
  v39 = *(_QWORD *)(a1[10] + 8);
  v40 = *(void **)(v39 + 40);
  *(_QWORD *)(v39 + 40) = v38;

  v41 = a1[4];
  v42 = *(void **)(v41 + 384);
  *(_QWORD *)(v41 + 384) = 0;

  v43 = *(_QWORD **)(a1[4] + 264);
  if (v43)
  {
    v45 = (_QWORD *)*v43;
    v44 = (_QWORD *)v43[1];
    if (*v43)
    {
      do
      {
        v45[1] = v44;
        *(_QWORD *)v43[1] = v45;
        free(v43);
        v43 = v45;
        v45 = (_QWORD *)*v45;
        v44 = (_QWORD *)v43[1];
      }
      while (v45);
    }
    *(_QWORD *)(a1[4] + 272) = v44;
    *v44 = 0;
    free(v43);
  }
}

void _nw_connection_send_idempotent_content_block_invoke()
{
  id v0;
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  char *backtrace_string;
  os_log_type_t v5;
  _BOOL4 v6;
  os_log_type_t v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v11 = "_nw_connection_send_idempotent_content_block_invoke";
  v1 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (!__nwlog_fault(v1, &type, &v8))
  {
LABEL_6:
    if (!v1)
      return;
    goto LABEL_7;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    v3 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)buf = 136446210;
      v11 = "_nw_connection_send_idempotent_content_block_invoke";
      _os_log_impl(&dword_182FBE000, v2, v3, "%{public}s _nw_connection_send_idempotent_content called directly", buf, 0xCu);
    }
LABEL_5:

    goto LABEL_6;
  }
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    v7 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)buf = 136446210;
      v11 = "_nw_connection_send_idempotent_content_block_invoke";
      _os_log_impl(&dword_182FBE000, v2, v7, "%{public}s _nw_connection_send_idempotent_content called directly, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_5;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  v5 = type;
  v6 = os_log_type_enabled(v2, type);
  if (!backtrace_string)
  {
    if (v6)
    {
      *(_DWORD *)buf = 136446210;
      v11 = "_nw_connection_send_idempotent_content_block_invoke";
      _os_log_impl(&dword_182FBE000, v2, v5, "%{public}s _nw_connection_send_idempotent_content called directly, no backtrace", buf, 0xCu);
    }
    goto LABEL_5;
  }
  if (v6)
  {
    *(_DWORD *)buf = 136446466;
    v11 = "_nw_connection_send_idempotent_content_block_invoke";
    v12 = 2082;
    v13 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v2, v5, "%{public}s _nw_connection_send_idempotent_content called directly, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v1)
LABEL_7:
    free(v1);
}

void _nw_connection_write_idempotent_block_invoke_2()
{
  id v0;
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  const char *v4;
  char *backtrace_string;
  os_log_type_t v6;
  _BOOL4 v7;
  NSObject *v8;
  os_log_type_t v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v13 = "_nw_connection_write_idempotent_block_invoke_2";
  v1 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (!__nwlog_fault(v1, &type, &v10))
    goto LABEL_10;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    v3 = type;
    if (!os_log_type_enabled(v2, type))
      goto LABEL_17;
    *(_DWORD *)buf = 136446210;
    v13 = "_nw_connection_write_idempotent_block_invoke_2";
    v4 = "%{public}s _nw_connection_write_idempotent called directly";
LABEL_15:
    v8 = v2;
    v9 = v3;
LABEL_16:
    _os_log_impl(&dword_182FBE000, v8, v9, v4, buf, 0xCu);
    goto LABEL_17;
  }
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    v3 = type;
    if (!os_log_type_enabled(v2, type))
      goto LABEL_17;
    *(_DWORD *)buf = 136446210;
    v13 = "_nw_connection_write_idempotent_block_invoke_2";
    v4 = "%{public}s _nw_connection_write_idempotent called directly, backtrace limit exceeded";
    goto LABEL_15;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  v6 = type;
  v7 = os_log_type_enabled(v2, type);
  if (backtrace_string)
  {
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "_nw_connection_write_idempotent_block_invoke_2";
      v14 = 2082;
      v15 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v2, v6, "%{public}s _nw_connection_write_idempotent called directly, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
LABEL_10:
    if (!v1)
      return;
    goto LABEL_11;
  }
  if (v7)
  {
    *(_DWORD *)buf = 136446210;
    v13 = "_nw_connection_write_idempotent_block_invoke_2";
    v4 = "%{public}s _nw_connection_write_idempotent called directly, no backtrace";
    v8 = v2;
    v9 = v6;
    goto LABEL_16;
  }
LABEL_17:

  if (v1)
LABEL_11:
    free(v1);
}

void nw_connection_async_if_needed(void *a1, void *a2)
{
  void (**v3)(_QWORD);
  dispatch_queue_t *v4;

  v4 = a1;
  v3 = a2;
  if (v4[5] && !dispatch_workloop_is_current())
    dispatch_async(v4[4], v3);
  else
    v3[2](v3);

}

void sub_1835A1A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL nw_connection_add_probe(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  void *v5;
  _BOOL8 v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  os_unfair_lock_s *v22;
  id v23;
  _BYTE *v24;
  char v25;
  os_log_type_t type;
  _BYTE buf[24];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v28 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_connection_add_probe_block_invoke;
      v21[3] = &unk_1E14A2D98;
      v24 = buf;
      v22 = v3;
      v23 = v5;
      os_unfair_lock_lock(v3 + 34);
      __nw_connection_add_probe_block_invoke((uint64_t)v21);
      os_unfair_lock_unlock(v3 + 34);
      v6 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;

      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_add_probe";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null probe", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v25)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null probe, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null probe, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_add_probe";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null probe, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_add_probe";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v25)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_add_probe";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_4:

  return v6;
}

uint64_t __nw_connection_add_probe_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = nw_connection_add_probe_locked(*(NWConcrete_nw_connection **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

uint64_t nw_connection_add_probe_locked(NWConcrete_nw_connection *a1, NWConcrete_nw_connection *a2)
{
  NWConcrete_nw_connection *v3;
  NWConcrete_nw_connection *v4;
  NWConcrete_nw_connection *v5;
  OS_nw_parameters *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  OS_nw_parameters *v10;
  OS_nw_array *probes;
  _BOOL8 v12;
  OS_nw_array *v13;
  void **v14;
  void **isa;
  OS_nw_parameters *parameters;
  NSObject *v17;
  unsigned int top_id;
  id v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  id v23;
  os_log_type_t v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  NSObject *cancel_group;
  dispatch_group_t v29;
  OS_dispatch_group *v30;
  void *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  char *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  OS_nw_parameters *v46;
  NSObject *v47;
  uint64_t v48;
  unsigned int v49;
  void *v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  void *v55;
  os_log_type_t v56;
  char *backtrace_string;
  os_log_type_t v58;
  _BOOL4 v59;
  os_log_type_t v60;
  _BOOL4 v61;
  os_log_type_t v62;
  os_log_type_t v63;
  char v64;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v67;
  __int16 v68;
  _BYTE v69[14];
  __int16 v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v67 = "nw_connection_add_probe_locked";
    v52 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v64 = 0;
    if (!__nwlog_fault(v52, &type, &v64))
      goto LABEL_129;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      v54 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)buf = 136446210;
        v67 = "nw_connection_add_probe_locked";
        _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s called with null connection", buf, 0xCu);
      }
      goto LABEL_128;
    }
    if (!v64)
    {
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      v62 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)buf = 136446210;
        v67 = "nw_connection_add_probe_locked";
        _os_log_impl(&dword_182FBE000, v53, v62, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_128;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v53 = objc_claimAutoreleasedReturnValue();
    v58 = type;
    v59 = os_log_type_enabled(v53, type);
    if (!backtrace_string)
    {
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        v67 = "nw_connection_add_probe_locked";
        _os_log_impl(&dword_182FBE000, v53, v58, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_128;
    }
    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      v67 = "nw_connection_add_probe_locked";
      v68 = 2082;
      *(_QWORD *)v69 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v53, v58, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_116;
  }
  if (!v4)
  {
    __nwlog_obj();
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v67 = "nw_connection_add_probe_locked";
    v52 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v64 = 0;
    if (!__nwlog_fault(v52, &type, &v64))
      goto LABEL_129;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      v56 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)buf = 136446210;
        v67 = "nw_connection_add_probe_locked";
        _os_log_impl(&dword_182FBE000, v53, v56, "%{public}s called with null probe", buf, 0xCu);
      }
LABEL_128:

LABEL_129:
      if (v52)
        free(v52);
      goto LABEL_11;
    }
    if (!v64)
    {
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      v63 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)buf = 136446210;
        v67 = "nw_connection_add_probe_locked";
        _os_log_impl(&dword_182FBE000, v53, v63, "%{public}s called with null probe, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_128;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v53 = objc_claimAutoreleasedReturnValue();
    v60 = type;
    v61 = os_log_type_enabled(v53, type);
    if (!backtrace_string)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        v67 = "nw_connection_add_probe_locked";
        _os_log_impl(&dword_182FBE000, v53, v60, "%{public}s called with null probe, no backtrace", buf, 0xCu);
      }
      goto LABEL_128;
    }
    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      v67 = "nw_connection_add_probe_locked";
      v68 = 2082;
      *(_QWORD *)v69 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v53, v60, "%{public}s called with null probe, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_116:

    free(backtrace_string);
    goto LABEL_129;
  }
  if (v3->state != 5)
  {
    v10 = v4->parameters;
    if ((nw_parameters_get_is_probe(v10) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v67 = "nw_connection_add_probe_locked";
      v20 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v64 = 0;
      if (!__nwlog_fault(v20, &type, &v64))
        goto LABEL_68;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v24 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s Cannot add probe without setting is_probe in parameters", buf, 0xCu);
        }
      }
      else if (v64)
      {
        v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v26 = type;
        v27 = os_log_type_enabled(v21, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            v67 = "nw_connection_add_probe_locked";
            v68 = 2082;
            *(_QWORD *)v69 = v25;
            _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s Cannot add probe without setting is_probe in parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v25);
          if (!v20)
            goto LABEL_70;
          goto LABEL_69;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s Cannot add probe without setting is_probe in parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v39 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_182FBE000, v21, v39, "%{public}s Cannot add probe without setting is_probe in parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_67;
    }
    probes = v3->probes;
    if (probes
      || (v12 = nw_array_create(),
          v13 = v3->probes,
          v3->probes = (OS_nw_array *)v12,
          v13,
          (probes = v3->probes) != 0))
    {
      isa = (void **)probes[2].super.super.isa;
      v14 = (void **)probes[3].super.super.isa;
      if (isa != v14)
      {
        while (*isa != v5)
        {
          if (++isa == v14)
          {
            isa = v14;
            break;
          }
        }
      }
      if (isa != v14)
      {
        parameters = v3->parameters;
        if (parameters && !nw_path_parameters_get_logging_disabled(*((_QWORD *)parameters + 13)))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v17 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            top_id = v3->top_id;
            *(_DWORD *)buf = 136446722;
            v67 = "nw_connection_add_probe_locked";
            v68 = 1024;
            *(_DWORD *)v69 = top_id;
            *(_WORD *)&v69[4] = 2112;
            *(_QWORD *)&v69[6] = v5;
            _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Cannot add probe %@ because probe list already contains this probe", buf, 0x1Cu);
          }

        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v67 = "nw_connection_add_probe_locked";
        v20 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v64 = 0;
        if (!__nwlog_fault(v20, &type, &v64))
        {
LABEL_68:
          if (!v20)
          {
LABEL_70:
            v9 = 0;
LABEL_95:

            goto LABEL_96;
          }
LABEL_69:
          free(v20);
          goto LABEL_70;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v21 = (id)gLogObj;
          v22 = type;
          if (os_log_type_enabled(v21, type))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_connection_add_probe_locked";
            _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s Cannot add probe to connection because the probe list already contains this probe", buf, 0xCu);
          }
        }
        else if (v64)
        {
          v35 = __nw_create_backtrace_string();
          if (v35)
          {
            v36 = (char *)v35;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v37 = (id)gLogObj;
            v38 = type;
            if (os_log_type_enabled(v37, type))
            {
              *(_DWORD *)buf = 136446466;
              v67 = "nw_connection_add_probe_locked";
              v68 = 2082;
              *(_QWORD *)v69 = v36;
              _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s Cannot add probe to connection because the probe list already contains this probe, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v36);
            if (!v20)
              goto LABEL_70;
            goto LABEL_69;
          }
          __nwlog_obj();
          v21 = objc_claimAutoreleasedReturnValue();
          v41 = type;
          if (os_log_type_enabled(v21, type))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_connection_add_probe_locked";
            _os_log_impl(&dword_182FBE000, v21, v41, "%{public}s Cannot add probe to connection because the probe list already contains this probe, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v21 = (id)gLogObj;
          v40 = type;
          if (os_log_type_enabled(v21, type))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_connection_add_probe_locked";
            _os_log_impl(&dword_182FBE000, v21, v40, "%{public}s Cannot add probe to connection because the probe list already contains this probe, backtrace limit exceeded", buf, 0xCu);
          }
        }
LABEL_67:

        goto LABEL_68;
      }
    }
    cancel_group = v3->cancel_group;
    if (cancel_group
      || (v29 = dispatch_group_create(),
          v30 = v3->cancel_group,
          v3->cancel_group = (OS_dispatch_group *)v29,
          v30,
          (cancel_group = v3->cancel_group) != 0))
    {
LABEL_85:
      dispatch_group_enter(cancel_group);
      nw_array_append((uint64_t)v3->probes, v5);
      v46 = v3->parameters;
      if (v46 && !nw_path_parameters_get_logging_disabled(*((_QWORD *)v46 + 13)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v47 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
        {
          v48 = (uint64_t)v3->probes;
          if (v48)
            v48 = (uint64_t)(*(_QWORD *)(v48 + 24) - *(_QWORD *)(v48 + 16)) >> 3;
          v49 = v3->top_id;
          *(_DWORD *)buf = 136446978;
          v67 = "nw_connection_add_probe_locked";
          v68 = 1024;
          *(_DWORD *)v69 = v49;
          *(_WORD *)&v69[4] = 2112;
          *(_QWORD *)&v69[6] = v5;
          v70 = 2048;
          v71 = v48;
          _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Added probe %@ to probe list, now have %zu probes", buf, 0x26u);
        }

      }
      v9 = 1;
      goto LABEL_95;
    }
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v67 = "nw_connection_add_probe_locked";
    v32 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v64 = 0;
    if (__nwlog_fault(v32, &type, &v64))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s dispatch_group_create failed", buf, 0xCu);
        }
      }
      else if (v64)
      {
        v42 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        v44 = os_log_type_enabled(v33, type);
        if (v42)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            v67 = "nw_connection_add_probe_locked";
            v68 = 2082;
            *(_QWORD *)v69 = v42;
            _os_log_impl(&dword_182FBE000, v33, v43, "%{public}s dispatch_group_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v42);
          goto LABEL_82;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_182FBE000, v33, v43, "%{public}s dispatch_group_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v45 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_182FBE000, v33, v45, "%{public}s dispatch_group_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_82:
    if (v32)
      free(v32);
    cancel_group = v3->cancel_group;
    goto LABEL_85;
  }
  v6 = v3->parameters;
  if (v6 && !nw_path_parameters_get_logging_disabled(*((_QWORD *)v6 + 13)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v7 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = v3->top_id;
      *(_DWORD *)buf = 136446466;
      v67 = "nw_connection_add_probe_locked";
      v68 = 1024;
      *(_DWORD *)v69 = v8;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection already cancelled, not adding probe", buf, 0x12u);
    }

  }
LABEL_11:
  v9 = 0;
LABEL_96:

  return v9;
}

void nw_connection_access_probe_connections(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  void *v5;
  os_unfair_lock_s *v6;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[6];
  char v23;
  os_log_type_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_connection_access_probe_connections";
    v9 = (char *)_os_log_send_and_compose_impl();

    v24 = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &v24, &v23))
      goto LABEL_38;
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_access_probe_connections";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v24;
      v16 = os_log_type_enabled(v10, v24);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_connection_access_probe_connections";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9)
          goto LABEL_4;
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_access_probe_connections";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_access_probe_connections";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_connection_access_probe_connections_block_invoke;
    v22[3] = &unk_1E14ACE18;
    v6 = v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_access_probe_connections_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_4;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_connection_access_probe_connections";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v9, &v24, &v23))
    goto LABEL_38;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_access_probe_connections";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null handler", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_access_probe_connections";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_access_probe_connections";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_connection_access_probe_connections";
    v27 = 2082;
    v28 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_39;
LABEL_4:

}

void __nw_connection_access_probe_connections_block_invoke(uint64_t a1)
{
  void *v1;
  _QWORD *v2;
  id v3;
  void *v4;
  unsigned __int8 *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  _BYTE buf[24];
  void *v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(a1 + 40);
  v2 = *(id *)(a1 + 32);
  v3 = v1;
  v4 = v3;
  if (!v2)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_access_probe_connections_locked";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_access_probe_connections_locked";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_access_probe_connections_locked";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7)
          goto LABEL_5;
LABEL_40:
        free(v7);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_access_probe_connections_locked";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_access_probe_connections_locked";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v3)
  {
    v5 = (unsigned __int8 *)v2[50];
    if (v5)
    {
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZL45nw_connection_access_probe_connections_lockedP24NWConcrete_nw_connectionU13block_pointerFbS0_E_block_invoke;
      v23 = &unk_1E14AC278;
      v24 = v3;
      nw_array_apply(v5, (uint64_t)buf);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_access_probe_connections_locked";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_access_probe_connections_locked";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null handler", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v20)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_access_probe_connections_locked";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_access_probe_connections_locked";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_connection_access_probe_connections_locked";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_40;
LABEL_5:

}

uint64_t ___ZL45nw_connection_access_probe_connections_lockedP24NWConcrete_nw_connectionU13block_pointerFbS0_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void nw_connection_remove_probe(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  void *v5;
  os_unfair_lock_s *v6;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[6];
  char v23;
  os_log_type_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_connection_remove_probe";
    v9 = (char *)_os_log_send_and_compose_impl();

    v24 = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &v24, &v23))
      goto LABEL_38;
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_remove_probe";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v24;
      v16 = os_log_type_enabled(v10, v24);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_connection_remove_probe";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9)
          goto LABEL_4;
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_remove_probe";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_remove_probe";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_connection_remove_probe_block_invoke;
    v22[3] = &unk_1E14ACE68;
    v6 = v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_remove_probe_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_4;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_connection_remove_probe";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v9, &v24, &v23))
    goto LABEL_38;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_remove_probe";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null probe", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_remove_probe";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null probe, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_remove_probe";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null probe, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_connection_remove_probe";
    v27 = 2082;
    v28 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null probe, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_39;
LABEL_4:

}

void __nw_connection_remove_probe_block_invoke(uint64_t a1)
{
  nw_connection_remove_probe_locked(*(NWConcrete_nw_connection **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40));
}

void nw_connection_remove_probe_locked(NWConcrete_nw_connection *a1, NWConcrete_nw_connection *a2)
{
  NWConcrete_nw_connection *v3;
  NWConcrete_nw_connection *v4;
  NWConcrete_nw_connection *v5;
  OS_nw_array *probes;
  NWConcrete_nw_connection **isa;
  NWConcrete_nw_connection **v8;
  NWConcrete_nw_connection **v9;
  uint64_t *p_probes;
  _BOOL8 v11;
  void *v12;
  void **v13;
  void **v14;
  OS_nw_parameters *parameters;
  NSObject *v16;
  uint64_t v17;
  unsigned int top_id;
  NSObject *cancel_group;
  OS_nw_parameters *v20;
  NSObject *v21;
  unsigned int v22;
  id v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  os_log_type_t v31;
  os_log_type_t v32;
  void *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  void *v37;
  os_log_type_t v38;
  char *backtrace_string;
  os_log_type_t v40;
  _BOOL4 v41;
  char *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  os_log_type_t v46;
  char v47;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  _BYTE v52[14];
  __int16 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_connection_remove_probe_locked";
    v34 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v34, &type, &v47))
      goto LABEL_90;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_connection_remove_probe_locked";
        _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      v41 = os_log_type_enabled(v35, type);
      if (backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "nw_connection_remove_probe_locked";
          v51 = 2082;
          *(_QWORD *)v52 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v35, v40, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_90:
        if (!v34)
          goto LABEL_56;
        goto LABEL_91;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_connection_remove_probe_locked";
        _os_log_impl(&dword_182FBE000, v35, v40, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v45 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_connection_remove_probe_locked";
        _os_log_impl(&dword_182FBE000, v35, v45, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_89:

    goto LABEL_90;
  }
  if (!v4)
  {
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_connection_remove_probe_locked";
    v34 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v34, &type, &v47))
      goto LABEL_90;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_connection_remove_probe_locked";
        _os_log_impl(&dword_182FBE000, v35, v38, "%{public}s called with null probe", buf, 0xCu);
      }
    }
    else if (v47)
    {
      v42 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      v44 = os_log_type_enabled(v35, type);
      if (v42)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "nw_connection_remove_probe_locked";
          v51 = 2082;
          *(_QWORD *)v52 = v42;
          _os_log_impl(&dword_182FBE000, v35, v43, "%{public}s called with null probe, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v42);
        if (!v34)
          goto LABEL_56;
LABEL_91:
        free(v34);
        goto LABEL_56;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_connection_remove_probe_locked";
        _os_log_impl(&dword_182FBE000, v35, v43, "%{public}s called with null probe, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_connection_remove_probe_locked";
        _os_log_impl(&dword_182FBE000, v35, v46, "%{public}s called with null probe, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_89;
  }
  probes = v3->probes;
  if (probes)
  {
    isa = (NWConcrete_nw_connection **)probes[2].super.super.isa;
    v8 = (NWConcrete_nw_connection **)probes[3].super.super.isa;
    v9 = isa;
    if (isa != v8)
    {
      while (*v9 != v4)
      {
        if (++v9 == v8)
        {
          v9 = (NWConcrete_nw_connection **)probes[3].super.super.isa;
          break;
        }
      }
    }
    if (v9 != v8)
    {
      p_probes = (uint64_t *)&v3->probes;
      v11 = nw_array_create();
      v12 = (void *)v11;
      if (isa != v8)
      {
        std::vector<nw_object_wrapper_t>::reserve(v11 + 16, ((probes[3].super.super.isa - probes[2].super.super.isa) >> 3) - 1);
        v14 = (void **)probes[2].super.super.isa;
        v13 = (void **)probes[3].super.super.isa;
        while (v14 != v13)
        {
          if (*v14 != v5)
            nw_array_append((uint64_t)v12, *v14);
          ++v14;
        }
      }
      objc_storeStrong((id *)&v3->probes, v12);
      parameters = v3->parameters;
      if (parameters && !nw_path_parameters_get_logging_disabled(*((_QWORD *)parameters + 13)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v16 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          v17 = *p_probes;
          if (*p_probes)
            v17 = (uint64_t)(*(_QWORD *)(v17 + 24) - *(_QWORD *)(v17 + 16)) >> 3;
          top_id = v3->top_id;
          *(_DWORD *)buf = 136446978;
          v50 = "nw_connection_remove_probe_locked";
          v51 = 1024;
          *(_DWORD *)v52 = top_id;
          *(_WORD *)&v52[4] = 2112;
          *(_QWORD *)&v52[6] = v5;
          v53 = 2048;
          v54 = v17;
          _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Removed probe %@ from probe list, now have %zu probes", buf, 0x26u);
        }

      }
      cancel_group = v3->cancel_group;
      if (cancel_group)
      {
        dispatch_group_leave(cancel_group);
LABEL_55:

        goto LABEL_56;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v50 = "nw_connection_remove_probe_locked";
      v24 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v47 = 0;
      if (__nwlog_fault(v24, &type, &v47))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v25 = (id)gLogObj;
          v26 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)buf = 136446210;
            v50 = "nw_connection_remove_probe_locked";
            _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s Cannot remove probe from cancel group because cancel group does not exist", buf, 0xCu);
          }
        }
        else if (v47)
        {
          v27 = __nw_create_backtrace_string();
          if (v27)
          {
            v28 = (char *)v27;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v29 = (id)gLogObj;
            v30 = type;
            if (os_log_type_enabled(v29, type))
            {
              *(_DWORD *)buf = 136446466;
              v50 = "nw_connection_remove_probe_locked";
              v51 = 2082;
              *(_QWORD *)v52 = v28;
              _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s Cannot remove probe from cancel group because cancel group does not exist, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v28);
            if (!v24)
              goto LABEL_55;
            goto LABEL_54;
          }
          __nwlog_obj();
          v25 = objc_claimAutoreleasedReturnValue();
          v32 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)buf = 136446210;
            v50 = "nw_connection_remove_probe_locked";
            _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s Cannot remove probe from cancel group because cancel group does not exist, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v25 = (id)gLogObj;
          v31 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)buf = 136446210;
            v50 = "nw_connection_remove_probe_locked";
            _os_log_impl(&dword_182FBE000, v25, v31, "%{public}s Cannot remove probe from cancel group because cancel group does not exist, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v24)
        goto LABEL_55;
LABEL_54:
      free(v24);
      goto LABEL_55;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v50 = "nw_connection_remove_probe_locked";
      v51 = 2112;
      *(_QWORD *)v52 = v5;
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_INFO, "%{public}s Not removing probe %@ because probe list does not contain this probe", buf, 0x16u);
    }
    goto LABEL_32;
  }
  v20 = v3->parameters;
  if (v20 && !nw_path_parameters_get_logging_disabled(*((_QWORD *)v20 + 13)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v21 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = v3->top_id;
      *(_DWORD *)buf = 136446722;
      v50 = "nw_connection_remove_probe_locked";
      v51 = 1024;
      *(_DWORD *)v52 = v22;
      *(_WORD *)&v52[4] = 2112;
      *(_QWORD *)&v52[6] = v5;
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_INFO, "%{public}s [C%u] Not removing probe %@ because probes array does not exist", buf, 0x1Cu);
    }
LABEL_32:

  }
LABEL_56:

}

void nw_connection_reset_client(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[4];
  os_unfair_lock_s *v18;
  _QWORD v19[4];
  os_unfair_lock_s *v20;
  _BYTE *v21;
  _QWORD v22[4];
  os_unfair_lock_s *v23;
  _BYTE *v24;
  char v25;
  os_log_type_t type[8];
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  void *v29;
  os_unfair_lock_s *v30;
  _BYTE buf[24];
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v32 = __Block_byref_object_copy__24122;
    v33 = __Block_byref_object_dispose__24123;
    v34 = 0;
    v3 = MEMORY[0x1E0C809B0];
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_connection_reset_client_block_invoke;
    v22[3] = &unk_1E14ACE40;
    v24 = buf;
    v4 = v1;
    v23 = v4;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_reset_client_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v2 + 34);
    v19[0] = v3;
    v19[1] = 3221225472;
    v19[2] = __nw_connection_reset_client_block_invoke_2;
    v19[3] = &unk_1E14ACE40;
    v5 = v4;
    v20 = v5;
    v21 = buf;
    nw_connection_async_if_needed(v5, v19);
    v17[0] = v3;
    v17[1] = 3221225472;
    v17[2] = __nw_connection_reset_client_block_invoke_3;
    v17[3] = &unk_1E14ACFD0;
    v6 = v5;
    v18 = v6;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_reset_client_block_invoke_3((uint64_t)v17);
    os_unfair_lock_unlock(v2 + 34);
    v7 = v6;
    *(_QWORD *)type = v3;
    v27 = 3221225472;
    v28 = __nw_connection_allow_reset_queue_block_invoke;
    v29 = &unk_1E14ACFD0;
    v8 = v7;
    v30 = v8;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_allow_reset_queue_block_invoke((uint64_t)type);
    os_unfair_lock_unlock(v2 + 34);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_reset_client";
  v10 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (__nwlog_fault(v10, type, &v25))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_reset_client";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type[0];
      v15 = os_log_type_enabled(v11, type[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_reset_client";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_reset_client";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_reset_client";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v10)
    free(v10);
LABEL_3:

}

void sub_1835A4B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  void *v29;
  uint64_t v30;

  _Block_object_dispose((const void *)(v30 - 144), 8);
  _Unwind_Resume(a1);
}

void __nw_connection_reset_client_block_invoke(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 200));
}

void __nw_connection_reset_client_block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  _DWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  void *v11;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 168);
  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v4 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
  nw_read_request_report_error_with_override(v2, v3, v4);

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 168);
  *(_QWORD *)(v5 + 168) = 0;

  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 160);
  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v9 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
  nw_write_request_report_error_with_override(v7, v8, v9);

  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(v10 + 160);
  *(_QWORD *)(v10 + 160) = 0;

  nw_endpoint_handler_cancel_read_write_requests(*(void **)(*(_QWORD *)(a1 + 32) + 144), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_1835A4C68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_connection_reset_client_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 200);
  *(_QWORD *)(v2 + 200) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 208);
  *(_QWORD *)(v4 + 208) = 0;

}

uint64_t __nw_connection_allow_reset_queue_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 109) &= ~0x10u;
  return result;
}

BOOL nw_connection_is_cancelled(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v19 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_is_cancelled_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v15 = buf;
    v14 = v1;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_is_cancelled_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_is_cancelled";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_is_cancelled";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_is_cancelled";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_is_cancelled";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_is_cancelled";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __nw_connection_is_cancelled_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = (*(_BYTE *)(*(_QWORD *)(result + 32) + 109) & 8) != 0;
  return result;
}

uint64_t __nw_connection_is_cancelled_or_failed_block_invoke(uint64_t result)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(result + 32);
  v2 = (*(_BYTE *)(v1 + 109) & 8) != 0 || (*(_DWORD *)(v1 + 80) & 0xFFFFFFFE) == 4;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = v2;
  return result;
}

BOOL nw_connection_should_run_probe(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v19 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_should_run_probe_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v15 = buf;
    v14 = v1;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_should_run_probe_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_should_run_probe";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_should_run_probe";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_should_run_probe";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_should_run_probe";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_should_run_probe";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL __nw_connection_should_run_probe_block_invoke(uint64_t a1)
{
  _BOOL8 result;

  result = nw_connection_should_run_probe_locked(*(NWConcrete_nw_connection **)(a1 + 32));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

BOOL nw_connection_should_run_probe_locked(NWConcrete_nw_connection *a1)
{
  NWConcrete_nw_connection *v1;
  NWConcrete_nw_connection *v2;
  OS_nw_parameters *parameters;
  NSObject *v4;
  unsigned int top_id;
  OS_nw_parameters *v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  OS_nw_parameters *v10;
  unsigned int v11;
  int data_mode;
  int server_mode;
  uint64_t *v14;
  unsigned int v15;
  int https_proxy_over_tls;
  uint64_t *v17;
  unsigned int v18;
  _BOOL8 v19;
  uint64_t *v21;
  OS_nw_parameters *v22;
  NSObject *v23;
  unsigned int v24;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  _WORD v38[9];

  *(_QWORD *)&v38[5] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_connection_should_run_probe_locked";
    v26 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v26, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_connection_should_run_probe_locked";
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        v31 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            v36 = "nw_connection_should_run_probe_locked";
            v37 = 2082;
            *(_QWORD *)v38 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_78;
        }
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_connection_should_run_probe_locked";
          _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_connection_should_run_probe_locked";
          _os_log_impl(&dword_182FBE000, v27, v32, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_78:
    if (v26)
      free(v26);
    goto LABEL_51;
  }
  if (nw_parameters_get_is_probe(v1->parameters))
  {
    parameters = v2->parameters;
    if (!parameters || nw_path_parameters_get_logging_disabled(*((_QWORD *)parameters + 13)))
      goto LABEL_51;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      top_id = v2->top_id;
      *(_DWORD *)buf = 136446466;
      v36 = "nw_connection_should_run_probe_locked";
      v37 = 1024;
      *(_DWORD *)v38 = top_id;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Not probing a probe", buf, 0x12u);
    }
LABEL_50:

LABEL_51:
    v19 = 0;
    goto LABEL_52;
  }
  if (nw_context_is_inline(v2->context))
  {
    v6 = v2->parameters;
    if (!v6 || nw_path_parameters_get_logging_disabled(*((_QWORD *)v6 + 13)))
      goto LABEL_51;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v7 = v2->top_id;
      *(_DWORD *)buf = 136446466;
      v36 = "nw_connection_should_run_probe_locked";
      v37 = 1024;
      *(_DWORD *)v38 = v7;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Not probing when context is inline", buf, 0x12u);
    }
    goto LABEL_50;
  }
  v8 = (uint64_t *)v2->parameters;
  if (v2->state == 5)
  {
    if (!v8 || nw_path_parameters_get_logging_disabled(v8[13]))
      goto LABEL_51;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v9 = v2->top_id;
      *(_DWORD *)buf = 136446466;
      v36 = "nw_connection_should_run_probe_locked";
      v37 = 1024;
      *(_DWORD *)v38 = v9;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Not probing a cancelled connection", buf, 0x12u);
    }
    goto LABEL_50;
  }
  if (nw_parameters_get_data_mode(v8) != 2 && nw_parameters_get_data_mode(v2->parameters))
  {
    v10 = v2->parameters;
    if (!v10 || nw_path_parameters_get_logging_disabled(*((_QWORD *)v10 + 13)))
      goto LABEL_51;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v11 = v2->top_id;
      data_mode = nw_parameters_get_data_mode(v2->parameters);
      *(_DWORD *)buf = 136446722;
      v36 = "nw_connection_should_run_probe_locked";
      v37 = 1024;
      *(_DWORD *)v38 = v11;
      v38[2] = 1024;
      *(_DWORD *)&v38[3] = data_mode;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Not probing a connection that was specified yet not streaming: %d", buf, 0x18u);
    }
    goto LABEL_50;
  }
  server_mode = nw_parameters_get_server_mode(v2->parameters);
  v14 = (uint64_t *)v2->parameters;
  if (server_mode)
  {
    if (!v14 || nw_path_parameters_get_logging_disabled(v14[13]))
      goto LABEL_51;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v15 = v2->top_id;
      *(_DWORD *)buf = 136446466;
      v36 = "nw_connection_should_run_probe_locked";
      v37 = 1024;
      *(_DWORD *)v38 = v15;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Not probing a connection that was not a client", buf, 0x12u);
    }
    goto LABEL_50;
  }
  https_proxy_over_tls = nw_parameters_get_https_proxy_over_tls(v14);
  v17 = (uint64_t *)v2->parameters;
  if (https_proxy_over_tls)
  {
    if (!v17 || nw_path_parameters_get_logging_disabled(v17[13]))
      goto LABEL_51;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v18 = v2->top_id;
      *(_DWORD *)buf = 136446466;
      v36 = "nw_connection_should_run_probe_locked";
      v37 = 1024;
      *(_DWORD *)v38 = v18;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Not probing a connection for an HTTPS proxy over TLS", buf, 0x12u);
    }
    goto LABEL_50;
  }
  v21 = v17;
  v19 = v21 != 0;
  if (!v21)
  {
    v22 = v2->parameters;
    if (v22)
    {
      if (!nw_path_parameters_get_logging_disabled(*((_QWORD *)v22 + 13)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v23 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          v24 = v2->top_id;
          *(_DWORD *)buf = 136446466;
          v36 = "nw_connection_should_run_probe_locked";
          v37 = 1024;
          *(_DWORD *)v38 = v24;
          _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Not probing a connection for which we cannot get the parameters", buf, 0x12u);
        }

      }
    }
  }

LABEL_52:
  return v19;
}

void sub_1835A5B3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_connection_check_experimental_probe_options(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  void *v5;
  _BOOL8 v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  os_unfair_lock_s *v22;
  id v23;
  uint64_t *v24;
  char v25;
  os_log_type_t type;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v30 = 0;
  if (v3)
  {
    if (v4)
    {
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_connection_check_experimental_probe_options_block_invoke;
      v21[3] = &unk_1E14A2D98;
      v24 = &v27;
      v22 = v3;
      v23 = v5;
      os_unfair_lock_lock(v3 + 34);
      __nw_connection_check_experimental_probe_options_block_invoke((uint64_t)v21);
      os_unfair_lock_unlock(v3 + 34);
      v6 = *((_BYTE *)v28 + 24) != 0;

      goto LABEL_4;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_connection_check_experimental_probe_options";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v25)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_connection_check_experimental_probe_options";
        v33 = 2082;
        v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_connection_check_experimental_probe_options";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v25)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_connection_check_experimental_probe_options";
        v33 = 2082;
        v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_4:
  _Block_object_dispose(&v27, 8);

  return v6;
}

uint64_t __nw_connection_check_experimental_probe_options_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = nw_connection_check_experimental_probe_options_locked(*(void **)(a1 + 32), *(void **)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

uint64_t nw_connection_check_experimental_probe_options_locked(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  char *identifier;
  void *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  Class Class;
  objc_class *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  _QWORD *v19;
  NSObject *v20;
  int v21;
  _QWORD *v22;
  int v23;
  const char *v24;
  int v25;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  void *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  os_log_type_t v40;
  char v41;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_connection_check_experimental_probe_options_locked";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v28, &type, &v41))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      v35 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v44 = "nw_connection_check_experimental_probe_options_locked";
          v45 = 2082;
          v46 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v28)
          goto LABEL_75;
        goto LABEL_74;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl(&dword_182FBE000, v29, v39, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_72;
  }
  if (!v4)
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_connection_check_experimental_probe_options_locked";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v28, &type, &v41))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v41)
    {
      v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      v38 = os_log_type_enabled(v29, type);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          v44 = "nw_connection_check_experimental_probe_options_locked";
          v45 = 2082;
          v46 = v36;
          _os_log_impl(&dword_182FBE000, v29, v37, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
LABEL_73:
        if (!v28)
        {
LABEL_75:
          v14 = 0;
          goto LABEL_38;
        }
LABEL_74:
        free(v28);
        goto LABEL_75;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl(&dword_182FBE000, v29, v37, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl(&dword_182FBE000, v29, v40, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_72:

    goto LABEL_73;
  }
  v6 = v3[2];
  if (v6)
  {
    v7 = (void *)nw_protocol_boringssl_copy_definition();
    identifier = nw_protocol_definition_get_identifier(v7);
    v9 = (void *)nw_protocol_boringssl_copy_definition();
    v10 = nw_parameters_copy_protocol_options_for_definition(v6, v9);

    v11 = v10;
    Class = object_getClass(v5);
    v13 = (objc_class *)MEMORY[0x1E0C812F8];
    if (Class != (Class)MEMORY[0x1E0C812F8])
    {
      v14 = 0;
LABEL_36:

      goto LABEL_37;
    }
    xpc_dictionary_get_value(v5, "validate");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (!v15 || object_getClass(v15) != v13)
    {
      v14 = 0;
LABEL_35:

      goto LABEL_36;
    }
    xpc_dictionary_get_value(v16, identifier);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
    {
      v18 = sec_protocol_options_matches_config();
      v19 = v3[2];
      if (v18)
      {
        if (!v19 || nw_path_parameters_get_logging_disabled(v19[13]))
        {
          v14 = 1;
          goto LABEL_34;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v20 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          v21 = *((_DWORD *)v3 + 112);
          *(_DWORD *)buf = 136446466;
          v44 = "nw_connection_check_experimental_probe_options_locked";
          v45 = 1024;
          LODWORD(v46) = v21;
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probing a TLS connection with a matching config.", buf, 0x12u);
        }
        v14 = 1;
        goto LABEL_33;
      }
      if (v19 && !nw_path_parameters_get_logging_disabled(v19[13]))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v20 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          goto LABEL_32;
        v25 = *((_DWORD *)v3 + 112);
        *(_DWORD *)buf = 136446466;
        v44 = "nw_connection_check_experimental_probe_options_locked";
        v45 = 1024;
        LODWORD(v46) = v25;
        v24 = "%{public}s [C%u] Not probing a TLS connection with a mismatched config.";
LABEL_31:
        _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, v24, buf, 0x12u);
LABEL_32:
        v14 = 0;
LABEL_33:

LABEL_34:
        goto LABEL_35;
      }
    }
    else
    {
      v22 = v3[2];
      if (v22 && !nw_path_parameters_get_logging_disabled(v22[13]))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v20 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          goto LABEL_32;
        v23 = *((_DWORD *)v3 + 112);
        *(_DWORD *)buf = 136446466;
        v44 = "nw_connection_check_experimental_probe_options_locked";
        v45 = 1024;
        LODWORD(v46) = v23;
        v24 = "%{public}s [C%u] Missing TLS config.";
        goto LABEL_31;
      }
    }
    v14 = 0;
    goto LABEL_34;
  }
  v14 = 0;
LABEL_37:

LABEL_38:
  return v14;
}

void sub_1835A6858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void *nw_connection_create_experimental_probe_configuration_block_for_protocol(void *a1, void *a2, uint64_t a3, void *a4)
{
  os_unfair_lock_s *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  _QWORD v37[4];
  os_unfair_lock_s *v38;
  id v39;
  id v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  os_log_type_t type;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *(*v48)(uint64_t, uint64_t);
  void (*v49)(uint64_t);
  id v50;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  char *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  v10 = v9;
  v45 = 0;
  v46 = &v45;
  v47 = 0x3032000000;
  v48 = __Block_byref_object_copy__8;
  v49 = __Block_byref_object_dispose__9;
  v50 = 0;
  if (!v7)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v14, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        v27 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
            v53 = 2082;
            v54 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v15, v26, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_182FBE000, v15, v26, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_182FBE000, v15, v34, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_48:
    if (v14)
      free(v14);
    goto LABEL_62;
  }
  if (!v8)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v18, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v43)
      {
        v28 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        v30 = os_log_type_enabled(v19, type);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
            v53 = 2082;
            v54 = v28;
            _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v28);
          goto LABEL_54;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v35 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_182FBE000, v19, v35, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_54:
    if (v18)
      free(v18);
    goto LABEL_62;
  }
  if (!v9)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v22, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null protocol_definition", buf, 0xCu);
        }
      }
      else if (v43)
      {
        v31 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        v33 = os_log_type_enabled(v23, type);
        if (v31)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
            v53 = 2082;
            v54 = v31;
            _os_log_impl(&dword_182FBE000, v23, v32, "%{public}s called with null protocol_definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v31);
          goto LABEL_60;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_182FBE000, v23, v32, "%{public}s called with null protocol_definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_182FBE000, v23, v36, "%{public}s called with null protocol_definition, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_60:
    if (v22)
      free(v22);
LABEL_62:
    v11 = _Block_copy(&__block_literal_global_18950);
    goto LABEL_5;
  }
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = __nw_connection_create_experimental_probe_configuration_block_for_protocol_block_invoke;
  v37[3] = &unk_1E149D9E8;
  v41 = &v45;
  v38 = v7;
  v39 = v8;
  v42 = a3;
  v40 = v10;
  os_unfair_lock_lock(v7 + 34);
  __nw_connection_create_experimental_probe_configuration_block_for_protocol_block_invoke((uint64_t)v37);
  os_unfair_lock_unlock(v7 + 34);
  v11 = _Block_copy((const void *)v46[5]);

LABEL_5:
  _Block_object_dispose(&v45, 8);

  return v11;
}

void __nw_connection_create_experimental_probe_configuration_block_for_protocol_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  nw_connection_create_experimental_probe_configuration_block_for_protocol_locked(*(void **)(a1 + 32), *(void **)(a1 + 40), *(_QWORD *)(a1 + 64), *(void **)(a1 + 48));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id nw_connection_create_experimental_probe_configuration_block_for_protocol_locked(void *a1, void *a2, uint64_t a3, void *a4)
{
  void **v7;
  id v8;
  id v9;
  void *v10;
  Class Class;
  objc_class *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  char *identifier;
  char *v18;
  id v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v27;
  void *v28;
  void *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  void *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  void *v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  void *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  char *backtrace_string;
  os_log_type_t v46;
  _BOOL4 v47;
  char *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  char *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  char *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  os_log_type_t v57;
  os_log_type_t v58;
  os_log_type_t v59;
  os_log_type_t v60;
  _QWORD aBlock[4];
  id v62;
  id v63;
  uint64_t v64;
  char v65;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v68;
  __int16 v69;
  char *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  v10 = v9;
  if (!v7)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
    v30 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v65 = 0;
    if (__nwlog_fault(v30, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v65)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v46 = type;
        v47 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
            v69 = 2082;
            v70 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v31, v46, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_77;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_182FBE000, v31, v46, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v57 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_182FBE000, v31, v57, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_77:
    if (v30)
      free(v30);
    goto LABEL_97;
  }
  if (!v8)
  {
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
    v34 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v65 = 0;
    if (__nwlog_fault(v34, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v65)
      {
        v48 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v49 = type;
        v50 = os_log_type_enabled(v35, type);
        if (v48)
        {
          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
            v69 = 2082;
            v70 = v48;
            _os_log_impl(&dword_182FBE000, v35, v49, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v48);
          goto LABEL_83;
        }
        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_182FBE000, v35, v49, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v58 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_182FBE000, v35, v58, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_83:
    if (v34)
      free(v34);
    goto LABEL_97;
  }
  if (!a3)
  {
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
    v38 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v65 = 0;
    if (__nwlog_fault(v38, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v39 = objc_claimAutoreleasedReturnValue();
        v40 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s called with null experiment_identifier", buf, 0xCu);
        }
      }
      else if (v65)
      {
        v51 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v39 = objc_claimAutoreleasedReturnValue();
        v52 = type;
        v53 = os_log_type_enabled(v39, type);
        if (v51)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
            v69 = 2082;
            v70 = v51;
            _os_log_impl(&dword_182FBE000, v39, v52, "%{public}s called with null experiment_identifier, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v51);
          goto LABEL_89;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_182FBE000, v39, v52, "%{public}s called with null experiment_identifier, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v39 = objc_claimAutoreleasedReturnValue();
        v59 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_182FBE000, v39, v59, "%{public}s called with null experiment_identifier, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_89:
    if (v38)
      free(v38);
    goto LABEL_97;
  }
  if (v9)
  {
    Class = object_getClass(v8);
    v12 = (objc_class *)MEMORY[0x1E0C812F8];
    if (Class != (Class)MEMORY[0x1E0C812F8])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_ERROR, "%{public}s Malformed experimental configuration blob", buf, 0xCu);
      }

      v14 = _Block_copy(&__block_literal_global_18950);
      goto LABEL_9;
    }
    v16 = (void *)nw_protocol_boringssl_copy_definition();
    identifier = nw_protocol_definition_get_identifier(v16);
    v18 = v10;

    v19 = nw_endpoint_handler_copy_protocol_metadata(v7[18], v16, 0, 0);
    v20 = v18 + 8;
    if (strncmp(identifier, v18 + 8, 0x20uLL))
    {
      v15 = _Block_copy(&__block_literal_global_18950);
LABEL_19:

      goto LABEL_20;
    }
    xpc_dictionary_get_value(v8, "transform");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (v21 && object_getClass(v21) == v12)
    {
      v23 = _Block_copy(&__block_literal_global_18950);
      xpc_dictionary_get_value(v22, v20);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = v24;
      if (v24 && object_getClass(v24) == v12)
      {
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = ___ZL79nw_connection_create_experimental_probe_configuration_block_for_protocol_lockedP24NWConcrete_nw_connectionPU24objcproto13OS_xpc_object8NSObjectPKcPU36objcproto25OS_nw_protocol_definitionS1__block_invoke;
        aBlock[3] = &unk_1E149DC28;
        v62 = v25;
        v64 = a3;
        v63 = v19;
        v27 = v25;
        v28 = _Block_copy(aBlock);

        v15 = _Block_copy(v28);
        goto LABEL_18;
      }

    }
    v15 = _Block_copy(&__block_literal_global_18950);
LABEL_18:

    goto LABEL_19;
  }
  __nwlog_obj();
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
  v42 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v65 = 0;
  if (!__nwlog_fault(v42, &type, &v65))
    goto LABEL_95;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v43 = objc_claimAutoreleasedReturnValue();
    v44 = type;
    if (os_log_type_enabled(v43, type))
    {
      *(_DWORD *)buf = 136446210;
      v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
      _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s called with null protocol_definition", buf, 0xCu);
    }
  }
  else if (v65)
  {
    v54 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v43 = objc_claimAutoreleasedReturnValue();
    v55 = type;
    v56 = os_log_type_enabled(v43, type);
    if (v54)
    {
      if (v56)
      {
        *(_DWORD *)buf = 136446466;
        v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
        v69 = 2082;
        v70 = v54;
        _os_log_impl(&dword_182FBE000, v43, v55, "%{public}s called with null protocol_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v54);
      goto LABEL_95;
    }
    if (v56)
    {
      *(_DWORD *)buf = 136446210;
      v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
      _os_log_impl(&dword_182FBE000, v43, v55, "%{public}s called with null protocol_definition, no backtrace", buf, 0xCu);
    }
  }
  else
  {
    __nwlog_obj();
    v43 = objc_claimAutoreleasedReturnValue();
    v60 = type;
    if (os_log_type_enabled(v43, type))
    {
      *(_DWORD *)buf = 136446210;
      v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
      _os_log_impl(&dword_182FBE000, v43, v60, "%{public}s called with null protocol_definition, backtrace limit exceeded", buf, 0xCu);
    }
  }

LABEL_95:
  if (v42)
    free(v42);
LABEL_97:
  v14 = _Block_copy(&__block_literal_global_18950);
LABEL_9:
  v15 = v14;
LABEL_20:

  return v15;
}

void sub_1835A7C18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void ___ZL79nw_connection_create_experimental_probe_configuration_block_for_protocol_lockedP24NWConcrete_nw_connectionPU24objcproto13OS_xpc_object8NSObjectPKcPU36objcproto25OS_nw_protocol_definitionS1__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  _BYTE buf[22];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if ((sec_protocol_options_apply_config() & 1) != 0)
    goto LABEL_9;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked_block_invoke";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked_block_invoke";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s sec_protocol_options_apply_config failed", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s sec_protocol_options_apply_config failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (v4)
          goto LABEL_8;
        goto LABEL_9;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked_block_invoke";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s sec_protocol_options_apply_config failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked_block_invoke";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s sec_protocol_options_apply_config failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
  if (v4)
LABEL_8:
    free(v4);
LABEL_9:
  sec_protocol_options_set_experiment_identifier();
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sec_protocol_metadata_copy_connection_id();
  sec_protocol_options_set_connection_id();

}

void sub_1835A7F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_connection_create_experimental_probe(void *a1, void *a2, uint64_t a3)
{
  os_unfair_lock_s *v5;
  id v6;
  void *v7;
  id v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[4];
  os_unfair_lock_s *v24;
  id v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  os_log_type_t type;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  v30 = 0;
  v31 = &v30;
  v32 = 0x3032000000;
  v33 = __Block_byref_object_copy__24122;
  v34 = __Block_byref_object_dispose__24123;
  v35 = 0;
  if (v5)
  {
    if (v6)
    {
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = __nw_connection_create_experimental_probe_block_invoke;
      v23[3] = &unk_1E14A2B60;
      v26 = &v30;
      v24 = v5;
      v25 = v7;
      v27 = a3;
      os_unfair_lock_lock(v5 + 34);
      __nw_connection_create_experimental_probe_block_invoke((uint64_t)v23);
      os_unfair_lock_unlock(v5 + 34);
      v8 = (id)v31[5];

      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_connection_create_experimental_probe";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v11, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null config", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v28)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        v37 = "nw_connection_create_experimental_probe";
        v38 = 2082;
        v39 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_connection_create_experimental_probe";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v11, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v28)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v37 = "nw_connection_create_experimental_probe";
        v38 = 2082;
        v39 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v11)
    free(v11);
  v8 = 0;
LABEL_4:
  _Block_object_dispose(&v30, 8);

  return v8;
}

void __nw_connection_create_experimental_probe_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NWConcrete_nw_connection *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  nw_parameters_t secure_tcp;
  NSObject *probe_locked;
  uint64_t v12;
  void *v13;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  os_log_type_t v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (NWConcrete_nw_connection *)*(id *)(a1 + 32);
  v5 = v2;
  v6 = v5;
  if (!v4)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_connection_create_experimental_probe_locked";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v15, &type, &v32))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null connection", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v32)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_182FBE000, v16, v29, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_connection_create_experimental_probe_locked";
      v36 = 2082;
      v37 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_40;
  }
  if (!v5)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_connection_create_experimental_probe_locked";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v15, &type, &v32))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null config", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v32)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_182FBE000, v16, v30, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_connection_create_experimental_probe_locked";
      v36 = 2082;
      v37 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_40;
  }
  if (!v3)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_connection_create_experimental_probe_locked";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v15, &type, &v32))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null experiment_identifier", buf, 0xCu);
      }
LABEL_58:

LABEL_59:
      if (v15)
        free(v15);
      goto LABEL_9;
    }
    if (!v32)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_182FBE000, v16, v31, "%{public}s called with null experiment_identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_182FBE000, v16, v27, "%{public}s called with null experiment_identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_connection_create_experimental_probe_locked";
      v36 = 2082;
      v37 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v16, v27, "%{public}s called with null experiment_identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_40:

    free(backtrace_string);
    goto LABEL_59;
  }
  if (!nw_connection_should_run_probe_locked(v4)
    || !nw_connection_check_experimental_probe_options_locked(v4, v6))
  {
    goto LABEL_9;
  }
  v7 = (void *)nw_protocol_boringssl_copy_definition();
  nw_connection_create_experimental_probe_configuration_block_for_protocol_locked(v4, v6, v3, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8 == &__block_literal_global_18950)
  {

LABEL_9:
    probe_locked = 0;
    goto LABEL_10;
  }
  secure_tcp = nw_parameters_create_secure_tcp(v8, &__block_literal_global_86);
  probe_locked = nw_connection_create_probe_locked(v4, secure_tcp);

LABEL_10:
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = probe_locked;

}

void sub_1835A8C84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

NSObject *nw_connection_create_probe_locked(void *a1, void *a2)
{
  char *v3;
  id v4;
  _QWORD *v5;
  NSObject *v6;
  nw_connection_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _QWORD handler[4];
  char *v21;
  NSObject *v22;
  char v23;
  os_log_type_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v4)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_connection_create_probe_locked";
    v12 = (char *)_os_log_send_and_compose_impl();

    v24 = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v12, &v24, &v23))
    {
      if (v24 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = v24;
        if (os_log_type_enabled(v13, v24))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_connection_create_probe_locked";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null probe_parameters", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v16 = v24;
        v17 = os_log_type_enabled(v13, v24);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v26 = "nw_connection_create_probe_locked";
            v27 = 2082;
            v28 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null probe_parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_connection_create_probe_locked";
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null probe_parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v18 = v24;
        if (os_log_type_enabled(v13, v24))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_connection_create_probe_locked";
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null probe_parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v12)
      free(v12);
    goto LABEL_22;
  }
  if (!nw_connection_should_run_probe_locked((NWConcrete_nw_connection *)v3))
  {
LABEL_22:
    v10 = 0;
    goto LABEL_23;
  }
  v5 = v4;
  v5[12] = v5[12] & 0xFFFFFFFFFFFFFF3FLL | 0x80;

  v6 = v5;
  v5[12] |= 0x400uLL;

  v7 = nw_connection_create(*((nw_endpoint_t *)v3 + 1), v6);
  BYTE4(v7[13].isa) |= 0x80u;
  v3[108] |= 0x40u;
  v3[109] |= 1u;
  *(_OWORD *)((char *)&v7[58].isa + 4) = *(_OWORD *)(v3 + 452);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = ___ZL33nw_connection_create_probe_lockedP24NWConcrete_nw_connectionPU27objcproto16OS_nw_parameters8NSObject_block_invoke;
  handler[3] = &unk_1E14AD048;
  v21 = v3;
  v8 = v7;
  v22 = v8;
  nw_connection_set_state_changed_handler(v8, handler);
  v9 = v22;
  v10 = v8;

LABEL_23:
  return v10;
}

void sub_1835A904C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void ___ZL33nw_connection_create_probe_lockedP24NWConcrete_nw_connectionPU27objcproto16OS_nw_parameters8NSObject_block_invoke(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  nw_connection_t *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  const char *v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  switch(a2)
  {
    case 3u:
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (v11 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v11 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v12 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          v13 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          v22 = 136446466;
          v23 = "nw_connection_create_probe_locked_block_invoke";
          v24 = 1024;
          v25 = v13;
          _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection succeeded", (uint8_t *)&v22, 0x12u);
        }

      }
      v14 = *(void **)(a1 + 40);
      v9 = (nw_connection_t *)(a1 + 40);
      nw_connection_remove_probe(*(v9 - 1), v14);
      goto LABEL_20;
    case 5u:
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (v15 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v15 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v16 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          v17 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          v22 = 136446466;
          v23 = "nw_connection_create_probe_locked_block_invoke";
          v24 = 1024;
          v25 = v17;
          _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection cancelled", (uint8_t *)&v22, 0x12u);
        }

      }
      nw_connection_remove_probe(*(void **)(a1 + 32), *(void **)(a1 + 40));
      break;
    case 4u:
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (v6 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v6 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v7 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          v22 = 136446466;
          v23 = "nw_connection_create_probe_locked_block_invoke";
          v24 = 1024;
          v25 = v8;
          _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection failed", (uint8_t *)&v22, 0x12u);
        }

      }
      v10 = *(void **)(a1 + 40);
      v9 = (nw_connection_t *)(a1 + 40);
      nw_connection_remove_probe(*(v9 - 1), v10);
LABEL_20:
      nw_connection_cancel(*v9);
      break;
    default:
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (v18 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v18 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v19 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          v20 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          if (a2 > 2)
            v21 = "unknown";
          else
            v21 = off_1E149DDC8[a2];
          v22 = 136446722;
          v23 = "nw_connection_create_probe_locked_block_invoke";
          v24 = 1024;
          v25 = v20;
          v26 = 2080;
          v27 = v21;
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection state: %s", (uint8_t *)&v22, 0x1Cu);
        }

      }
      break;
  }

}

void sub_1835A9424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_cancel_inner(NWConcrete_nw_connection *a1, char a2)
{
  NWConcrete_nw_connection *v3;
  uint64_t v4;
  NWConcrete_nw_connection *v5;
  _QWORD v6[4];
  NWConcrete_nw_connection *v7;
  char v8;
  _QWORD v9[5];

  v3 = a1;
  v4 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZL27nw_connection_set_cancelledP24NWConcrete_nw_connection_block_invoke;
  v9[3] = &unk_1E14ACFD0;
  v9[4] = v3;
  os_unfair_lock_lock(&v3->lock);
  ___ZL27nw_connection_set_cancelledP24NWConcrete_nw_connection_block_invoke((uint64_t)v9);
  os_unfair_lock_unlock(&v3->lock);

  v6[0] = v4;
  v6[1] = 3221225472;
  v6[2] = ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke;
  v6[3] = &unk_1E14A9B98;
  v5 = v3;
  v7 = v5;
  v8 = a2;
  nw_connection_async_if_needed(v5, v6);

}

void sub_1835A950C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t ___ZL27nw_connection_set_cancelledP24NWConcrete_nw_connection_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 109) |= 8u;
  return result;
}

void ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  BOOL logging_disabled;
  NSObject *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  const char *logging_description;
  uint64_t v15;
  const char *v16;
  os_unfair_lock_s *v17;
  int os_unfair_lock_opaque;
  os_unfair_lock_s *v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  os_unfair_lock_s *v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  void *v35;
  id v36;
  int v37;
  int v38;
  void **v39;
  void **v40;
  os_unfair_lock_s *v41;
  os_unfair_lock_s *v42;
  char *v43;
  int v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  unsigned int event_milliseconds;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  unsigned int v58;
  id v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  id v67;
  char *v68;
  void (**v69)(void *, id, id);
  NWConcrete_nw_endpoint_handler *v70;
  id *v71;
  id v72;
  void (*v73)(uint64_t);
  id v74;
  void *v75;
  void *v76;
  _DWORD *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  _DWORD *v81;
  uint64_t v82;
  void *v83;
  _QWORD *v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  os_unfair_lock_s *v91;
  os_unfair_lock_s *v92;
  void (**v93)(_QWORD);
  NSObject *v94;
  void *v95;
  char *v96;
  NSObject *v97;
  os_log_type_t v98;
  void *v99;
  char *v100;
  NSObject *v101;
  os_log_type_t v102;
  char *backtrace_string;
  os_log_type_t v104;
  _BOOL4 v105;
  char *v106;
  os_log_type_t v107;
  _BOOL4 v108;
  void *v109;
  char *v110;
  NSObject *v111;
  os_log_type_t v112;
  os_log_type_t v113;
  os_log_type_t v114;
  char *v115;
  os_log_type_t v116;
  _BOOL4 v117;
  os_log_type_t v118;
  _QWORD aBlock[4];
  id v120;
  _QWORD *v121;
  _QWORD *v122;
  _BYTE *v123;
  _QWORD v124[4];
  os_unfair_lock_s *v125;
  _BYTE *v126;
  os_log_type_t *v127;
  _QWORD *v128;
  uint64_t *v129;
  _QWORD *v130;
  _QWORD v131[5];
  id v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t (*v136)(uint64_t, uint64_t);
  void (*v137)(uint64_t);
  id v138;
  _QWORD v139[5];
  id v140;
  os_log_type_t type[8];
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(uint64_t, uint64_t);
  void (*v145)(uint64_t);
  id v146;
  int v147;
  _QWORD v148[4];
  os_unfair_lock_s *v149;
  _BYTE buf[54];
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 80);
  logging_disabled = nw_parameters_get_logging_disabled(*(_QWORD *)(v2 + 16));
  if (v3 != 5)
  {
    if (!logging_disabled && (nw_parameters_get_minimize_logging(*(void **)(*(_QWORD *)(a1 + 32) + 16)) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 32);
        v13 = *(_DWORD *)(v12 + 448);
        logging_description = nw_endpoint_get_logging_description(*(void **)(v12 + 8));
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
        v16 = "force-";
        if (!*(_BYTE *)(a1 + 40))
          v16 = "";
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 1042;
        *(_DWORD *)&buf[10] = 16;
        *(_WORD *)&buf[14] = 2098;
        *(_QWORD *)&buf[16] = v12 + 452;
        *(_WORD *)&buf[24] = 2082;
        *(_QWORD *)&buf[26] = logging_description;
        *(_WORD *)&buf[34] = 2114;
        *(_QWORD *)&buf[36] = v15;
        *(_WORD *)&buf[44] = 2082;
        *(_QWORD *)&buf[46] = v16;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEFAULT, "[C%u %{public,uuid_t}.16P %{public}s %{public}@] %{public}scancel", buf, 0x36u);
      }

    }
    v17 = *(os_unfair_lock_s **)(a1 + 32);
    os_unfair_lock_opaque = v17[20]._os_unfair_lock_opaque;
    v19 = v17 + 34;
    v20 = MEMORY[0x1E0C809B0];
    v148[0] = MEMORY[0x1E0C809B0];
    v148[1] = 3221225472;
    v148[2] = ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_233;
    v148[3] = &unk_1E14ACFD0;
    v149 = v17;
    os_unfair_lock_lock(v19);
    ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_233((uint64_t)v148);
    os_unfair_lock_unlock(v19);
    v21 = *(id *)(a1 + 32);
    v22 = v21;
    if (v21)
    {
      nw_context_assert_queue(*((void **)v21 + 3));
      v23 = v22[53];
      if (v23)
      {
        v24 = nw_array_create();
        if (v24 != v23)
        {
          v25 = v24;
          std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v24 + 16, *(void ***)(v23 + 16), *(void ***)(v23 + 24), (uint64_t)(*(_QWORD *)(v23 + 24) - *(_QWORD *)(v23 + 16)) >> 3);
          v23 = v25;
        }
        nw_array_apply((unsigned __int8 *)v23, (uint64_t)&__block_literal_global_228);

      }
      goto LABEL_24;
    }
    __nwlog_obj();
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_cleanup_data_transfer_reports_on_nw_queue";
    v96 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v139[0]) = 0;
    if (__nwlog_fault(v96, type, v139))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v97 = objc_claimAutoreleasedReturnValue();
        v98 = type[0];
        if (os_log_type_enabled(v97, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_cleanup_data_transfer_reports_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v97, v98, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (LOBYTE(v139[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v97 = objc_claimAutoreleasedReturnValue();
        v104 = type[0];
        v105 = os_log_type_enabled(v97, type[0]);
        if (backtrace_string)
        {
          if (v105)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_cleanup_data_transfer_reports_on_nw_queue";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v97, v104, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_132;
        }
        if (v105)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_cleanup_data_transfer_reports_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v97, v104, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v97 = objc_claimAutoreleasedReturnValue();
        v113 = type[0];
        if (os_log_type_enabled(v97, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_cleanup_data_transfer_reports_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v97, v113, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_132:
    if (v96)
      free(v96);
LABEL_24:

    v26 = *(_BYTE *)(a1 + 40);
    v27 = (os_unfair_lock_s *)*(id *)(a1 + 32);
    v28 = v27;
    if (v27)
    {
      *(_QWORD *)buf = v20;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E14A9B98;
      *(_QWORD *)&buf[32] = v27;
      buf[40] = v26;
      os_unfair_lock_lock(v28 + 34);
      (*(void (**)(_BYTE *))&buf[16])(buf);
      os_unfair_lock_unlock(v28 + 34);

      goto LABEL_26;
    }
    __nwlog_obj();
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_cancel_probes";
    v100 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v139[0]) = 0;
    if (__nwlog_fault(v100, type, v139))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v102 = type[0];
        if (os_log_type_enabled(v101, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_cancel_probes";
          _os_log_impl(&dword_182FBE000, v101, v102, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (LOBYTE(v139[0]))
      {
        v106 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v107 = type[0];
        v108 = os_log_type_enabled(v101, type[0]);
        if (v106)
        {
          if (v108)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_cancel_probes";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v106;
            _os_log_impl(&dword_182FBE000, v101, v107, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v106);
          goto LABEL_137;
        }
        if (v108)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_cancel_probes";
          _os_log_impl(&dword_182FBE000, v101, v107, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v114 = type[0];
        if (os_log_type_enabled(v101, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_cancel_probes";
          _os_log_impl(&dword_182FBE000, v101, v114, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_137:
    if (v100)
      free(v100);
LABEL_26:

    v29 = *(_QWORD *)(a1 + 32);
    v30 = *(void **)(v29 + 512);
    if (v30 && *(char *)(v29 + 109) < 0)
    {
      v31 = *(_QWORD *)(v29 + 16);
      if (v31 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v31 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v32 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          v33 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_cancel_inner_block_invoke_2";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v33;
          _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection cancelled, updating current interface", buf, 0x12u);
        }

      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 512) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 512), 0);
      v29 = *(_QWORD *)(a1 + 32);
      v30 = *(void **)(v29 + 512);
    }
    *(_QWORD *)(v29 + 512) = 0;

    v34 = *(_QWORD *)(a1 + 32);
    v35 = *(void **)(v34 + 520);
    *(_QWORD *)(v34 + 520) = 0;

    v147 = 524289;
    nw_connection_endpoint_report_on_nw_queue(0, 0, 5, (uint64_t)&v147, 0, *(void **)(a1 + 32));
    if (os_unfair_lock_opaque < 1)
      goto LABEL_80;
    nw_connection_send_stats_report_on_nw_queue(*(void **)(a1 + 32));
    if (os_unfair_lock_opaque > 2)
      goto LABEL_80;
    v36 = *(id *)(a1 + 32);
    v37 = 0;
    if (nw_connection_get_event_milliseconds(v36, 2, 2, 0, 0) == -1)
    {
      *(_WORD *)buf = 0;
      event_milliseconds = nw_connection_get_event_milliseconds(v36, 2, 1, buf, 0);
      if (event_milliseconds == -1)
      {
        v37 = 0;
      }
      else
      {
        v52 = event_milliseconds;
        v53 = mach_continuous_time();
        if (v53 <= 1)
          v54 = 1;
        else
          v54 = v53;
        v55 = nw_delta_nanos(*((_QWORD *)v36 + 9), v54);
        v37 = 0;
        v56 = v55 / 0xF4240;
        if (v55 > 0xF423FFFFFFFFFLL)
          LODWORD(v56) = -1;
        v57 = v56 >= v52;
        v58 = v56 - v52;
        if (v58 != 0 && v57 && v58 >> 3 >= 0x271)
        {
          v59 = nw_connection_copy_endpoint_handler_for_handler_id(*((NWConcrete_nw_connection **)v36 + 18), *(__int16 *)buf);
          nw_connection_report_symptom_on_nw_queue(v36, 421900, v59, 0);

          v37 = 1;
        }
      }
    }
    if (nw_connection_get_event_milliseconds(v36, 3, 6, 0, 0) == -1)
    {
      *(_WORD *)buf = 0;
      v60 = nw_connection_get_event_milliseconds(v36, 3, 3, buf, 0);
      if (v60 != -1)
      {
        v61 = v60;
        v62 = mach_continuous_time();
        if (v62 <= 1)
          v63 = 1;
        else
          v63 = v62;
        v64 = nw_delta_nanos(*((_QWORD *)v36 + 9), v63);
        v65 = v64 / 0xF4240;
        if (v64 > 0xF423FFFFFFFFFLL)
          LODWORD(v65) = -1;
        v57 = v65 >= v61;
        v66 = v65 - v61;
        if (v66 != 0 && v57 && v66 >> 3 >= 0x271)
        {
          v67 = nw_connection_copy_endpoint_handler_for_handler_id(*((NWConcrete_nw_connection **)v36 + 18), *(__int16 *)buf);
          nw_connection_report_symptom_on_nw_queue(v36, 421901, v67, 0);

          v37 = 1;
        }
      }
    }

    if (v37)
      v38 = 60;
    else
      v38 = 1301;
    v39 = (void **)*(id *)(a1 + 32);
    v40 = v39;
    if (v39)
    {
      nw_context_assert_queue(v39[3]);
      v41 = v40;
      *(_QWORD *)type = 0;
      v142 = (uint64_t)type;
      LODWORD(v144) = 0;
      v143 = 0x2020000000;
      v42 = v41 + 34;
      *(_QWORD *)buf = v20;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nw_connection_get_privacy_stance_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E14ACE40;
      *(_QWORD *)&buf[40] = type;
      v43 = v41;
      *(_QWORD *)&buf[32] = v43;
      os_unfair_lock_lock(v42);
      (*(void (**)(_BYTE *))&buf[16])(buf);
      os_unfair_lock_unlock(v42);
      v44 = *(_DWORD *)(v142 + 24);

      _Block_object_dispose(type, 8);
      if (v44 == 4)
        goto LABEL_46;
      v45 = v43;
      *(_QWORD *)type = 0;
      v142 = (uint64_t)type;
      LODWORD(v144) = 0;
      v143 = 0x2020000000;
      *(_QWORD *)buf = v20;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nw_connection_get_privacy_stance_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E14ACE40;
      *(_QWORD *)&buf[40] = type;
      v46 = v45;
      *(_QWORD *)&buf[32] = v46;
      os_unfair_lock_lock(v42);
      (*(void (**)(_BYTE *))&buf[16])(buf);
      os_unfair_lock_unlock(v42);
      v47 = *(_DWORD *)(v142 + 24);

      _Block_object_dispose(type, 8);
      if (v47 == 1)
      {
LABEL_46:
        v48 = *((_QWORD *)v43 + 2);
        if (v48 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v48 + 104)) && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v49 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
          {
            v50 = *((_DWORD *)v43 + 112);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_report_error_to_proxy_agent_on_nw_queue";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v50;
            _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] not reporting error for connection with ineligible privacy stance", buf, 0x12u);
          }

        }
      }
      else
      {
        *(_QWORD *)buf = v20;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E149DA60;
        v68 = v46;
        *(_QWORD *)&buf[32] = v68;
        *(_DWORD *)&buf[40] = v38;
        v69 = (void (**)(void *, id, id))_Block_copy(buf);
        if ((v68[109] & 0x40) != 0
          && (v70 = nw_endpoint_handler_copy_connected_flow_handler(*((void **)v68 + 18))) != 0)
        {
          v71 = v70;
          v72 = v71[4];

          v73 = v71;
          os_unfair_lock_lock((os_unfair_lock_t)v73 + 28);
          v74 = *((id *)v73 + 8);
          os_unfair_lock_unlock((os_unfair_lock_t)v73 + 28);

          v69[2](v69, v72, v74);
        }
        else
        {
          v75 = (void *)*((_QWORD *)v68 + 18);
          *(_QWORD *)type = v20;
          v142 = 3221225472;
          v143 = (uint64_t)__nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke_26;
          v144 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E149DA88;
          LODWORD(v146) = v38;
          v145 = v69;
          nw_endpoint_handler_apply_to_leaf_children(v75, type);
          v73 = v145;
        }

      }
LABEL_79:

LABEL_80:
      v76 = *(void **)(*(_QWORD *)(a1 + 32) + 168);
      v77 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
      nw_read_request_report_error_with_override(v76, 0, v77);

      v78 = *(_QWORD *)(a1 + 32);
      v79 = *(void **)(v78 + 168);
      *(_QWORD *)(v78 + 168) = 0;

      v80 = *(void **)(*(_QWORD *)(a1 + 32) + 160);
      v81 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
      nw_write_request_report_error_with_override(v80, 0, v81);

      v82 = *(_QWORD *)(a1 + 32);
      v83 = *(void **)(v82 + 160);
      *(_QWORD *)(v82 + 160) = 0;

      v84 = *(_QWORD **)(a1 + 32);
      v85 = (void *)v84[18];
      if (v85)
      {
        nw_endpoint_handler_cancel(v85, *(unsigned __int8 *)(a1 + 40), 0);
        v84 = *(_QWORD **)(a1 + 32);
      }
      v86 = (void *)v84[22];
      if (v86)
      {
        nw_endpoint_handler_cancel(v86, *(unsigned __int8 *)(a1 + 40), 0);
        v84 = *(_QWORD **)(a1 + 32);
      }
      v87 = (void *)v84[7];
      if (v87)
      {
        nw_candidate_manager_cancel(v87);
        v88 = *(_QWORD *)(a1 + 32);
        v89 = *(void **)(v88 + 56);
        *(_QWORD *)(v88 + 56) = 0;

        v84 = *(_QWORD **)(a1 + 32);
      }
      v90 = (void *)v84[8];
      v84[8] = 0;

      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      *(_QWORD *)&buf[24] = __Block_byref_object_copy__8;
      *(_QWORD *)&buf[32] = __Block_byref_object_dispose__9;
      *(_QWORD *)&buf[40] = 0;
      *(_QWORD *)type = 0;
      v142 = (uint64_t)type;
      v143 = 0x3032000000;
      v144 = __Block_byref_object_copy__24122;
      v145 = __Block_byref_object_dispose__24123;
      v146 = 0;
      v139[0] = 0;
      v139[1] = v139;
      v139[2] = 0x3032000000;
      v139[3] = __Block_byref_object_copy__24122;
      v139[4] = __Block_byref_object_dispose__24123;
      v140 = 0;
      v133 = 0;
      v134 = &v133;
      v135 = 0x3032000000;
      v136 = __Block_byref_object_copy__24122;
      v137 = __Block_byref_object_dispose__24123;
      v138 = 0;
      v131[0] = 0;
      v131[1] = v131;
      v131[2] = 0x3032000000;
      v131[3] = __Block_byref_object_copy__8;
      v131[4] = __Block_byref_object_dispose__9;
      v132 = 0;
      v91 = *(os_unfair_lock_s **)(a1 + 32);
      v92 = v91 + 34;
      v124[0] = v20;
      v124[1] = 3221225472;
      v124[2] = ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_234;
      v124[3] = &unk_1E149DD58;
      v126 = buf;
      v125 = v91;
      v127 = type;
      v128 = v139;
      v129 = &v133;
      v130 = v131;
      os_unfair_lock_lock(v92);
      ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_234(v124);
      os_unfair_lock_unlock(v92);
      nw_connection_cancel_update_handler(*(NWConcrete_nw_connection **)(a1 + 32));
      aBlock[0] = v20;
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_2;
      aBlock[3] = &unk_1E149DD80;
      v120 = *(id *)(a1 + 32);
      v121 = v131;
      v122 = v139;
      v123 = buf;
      v93 = (void (**)(_QWORD))_Block_copy(aBlock);
      v94 = *(NSObject **)(v142 + 40);
      if (v94)
        dispatch_group_notify(v94, (dispatch_queue_t)v134[5], v93);
      else
        v93[2](v93);

      _Block_object_dispose(v131, 8);
      _Block_object_dispose(&v133, 8);

      _Block_object_dispose(v139, 8);
      _Block_object_dispose(type, 8);

      _Block_object_dispose(buf, 8);
      v5 = v149;
      goto LABEL_90;
    }
    __nwlog_obj();
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_report_error_to_proxy_agent_on_nw_queue";
    v110 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v139[0]) = 0;
    if (__nwlog_fault(v110, type, v139))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v111 = objc_claimAutoreleasedReturnValue();
        v112 = type[0];
        if (os_log_type_enabled(v111, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_report_error_to_proxy_agent_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v111, v112, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (LOBYTE(v139[0]))
      {
        v115 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v111 = objc_claimAutoreleasedReturnValue();
        v116 = type[0];
        v117 = os_log_type_enabled(v111, type[0]);
        if (v115)
        {
          if (v117)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_report_error_to_proxy_agent_on_nw_queue";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v115;
            _os_log_impl(&dword_182FBE000, v111, v116, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v115);
          goto LABEL_145;
        }
        if (v117)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_report_error_to_proxy_agent_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v111, v116, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v111 = objc_claimAutoreleasedReturnValue();
        v118 = type[0];
        if (os_log_type_enabled(v111, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_report_error_to_proxy_agent_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v111, v118, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_145:
    if (v110)
      free(v110);
    goto LABEL_79;
  }
  if (logging_disabled)
    return;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v5 = (id)gconnectionLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_DWORD *)(v6 + 448);
    v8 = nw_endpoint_get_logging_description(*(void **)(v6 + 8));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (*(_BYTE *)(a1 + 40))
      v10 = "forced ";
    else
      v10 = "";
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = v8;
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v9;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = v10;
    _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "[C%u %{public}s %{public}@] is already cancelled, ignoring %{public}scancel", buf, 0x26u);
  }
LABEL_90:

}

void sub_1835AA784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  _Unwind_Resume(a1);
}

uint64_t ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_233(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 80) = 5;
  return result;
}

void ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL8 v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  _QWORD *v25;
  id v26;
  char v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 400);
  if (v2 && *(_QWORD *)(v2 + 24) != *(_QWORD *)(v2 + 16))
  {
    v4 = *(_QWORD *)(v1 + 16);
    if (v4 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v4 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v5 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_QWORD *)(v6 + 400);
        if (v7)
          v7 = (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 3;
        v8 = *(_DWORD *)(v6 + 448);
        *(_DWORD *)buf = 136446722;
        v29 = "nw_connection_cancel_probes_block_invoke";
        v30 = 1024;
        v31 = v8;
        v32 = 2048;
        v33 = v7;
        _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s [C%u] Waiting on %zu probes before cancelling", buf, 0x1Cu);
      }

    }
    v9 = nw_array_create();
    v10 = *(_QWORD **)(a1 + 32);
    v11 = (unsigned __int8 *)v10[50];
    v12 = MEMORY[0x1E0C809B0];
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_235;
    v24[3] = &unk_1E149DDA8;
    v25 = v10;
    v13 = (id)v9;
    v26 = v13;
    v27 = *(_BYTE *)(a1 + 40);
    nw_array_apply(v11, (uint64_t)v24);
    if (v13 && v13[3] != v13[2])
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (v14 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v14 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v15 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          v16 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          v29 = "nw_connection_cancel_probes_block_invoke";
          v30 = 1024;
          v31 = v16;
          _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_INFO, "%{public}s [C%u] Have probes to remove before cancel", buf, 0x12u);
        }

      }
      v22[0] = v12;
      v22[1] = 3221225472;
      v22[2] = ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_236;
      v22[3] = &unk_1E14AC200;
      v23 = *(id *)(a1 + 32);
      nw_array_apply((unsigned __int8 *)v13, (uint64_t)v22);

    }
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(v17 + 400);
    if (!v18 || *(_QWORD *)(v18 + 24) == *(_QWORD *)(v18 + 16))
    {
      v19 = *(_QWORD *)(v17 + 16);
      if (v19)
      {
        if (!nw_path_parameters_get_logging_disabled(*(_QWORD *)(v19 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v20 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            v21 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
            *(_DWORD *)buf = 136446466;
            v29 = "nw_connection_cancel_probes_block_invoke_2";
            v30 = 1024;
            v31 = v21;
            _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_INFO, "%{public}s [C%u] After removing invalid probes, no probes remain", buf, 0x12u);
          }

        }
      }
    }

  }
}

BOOL nw_connection_endpoint_report_on_nw_queue(void *a1, int a2, int a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  os_unfair_lock_s *v14;
  _QWORD v16[4];
  os_unfair_lock_s *v17;
  id v18;
  id v19;
  uint64_t v20;
  int v21;
  int v22;

  v11 = a1;
  v12 = a5;
  v13 = a6;
  v14 = (os_unfair_lock_s *)v13;
  if (v13)
  {
    nw_context_assert_queue(*((void **)v13 + 3));
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = ___ZL41nw_connection_endpoint_report_on_nw_queuePU33objcproto22OS_nw_endpoint_handler8NSObject26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS__block_invoke;
    v16[3] = &unk_1E14AACF8;
    v17 = v14;
    v20 = a4;
    v18 = v11;
    v19 = v12;
    v21 = a3;
    v22 = a2;
    os_unfair_lock_lock(v14 + 34);
    ___ZL41nw_connection_endpoint_report_on_nw_queuePU33objcproto22OS_nw_endpoint_handler8NSObject26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS__block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v14 + 34);

  }
  return v14 != 0;
}

void sub_1835AAD64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_234(_QWORD *a1)
{
  id v1;
  void *v3;
  uint64_t v4;
  void *v5;
  _BOOL4 is_inline;
  _BOOL8 v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;

  v3 = _Block_copy(*(const void **)(a1[4] + 216));
  v4 = *(_QWORD *)(a1[5] + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), *(id *)(a1[4] + 408));
  objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), *(id *)(a1[4] + 200));
  is_inline = nw_context_is_inline(*(void **)(a1[4] + 24));
  if (is_inline)
  {
    if (nw_context_copy_implicit_context::onceToken[0] != -1)
      dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    v1 = (id)nw_context_copy_implicit_context::implicit_context;
    v7 = nw_context_copy_workloop(v1);
  }
  else
  {
    v7 = nw_context_copy_workloop(*(void **)(a1[4] + 24));
  }
  objc_storeStrong((id *)(*(_QWORD *)(a1[8] + 8) + 40), (id)v7);
  if (is_inline)
  {

    v7 = (_BOOL8)v1;
  }

  v8 = _Block_copy(*(const void **)(a1[4] + 208));
  v9 = *(_QWORD *)(a1[9] + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  v11 = a1[4];
  v12 = *(void **)(v11 + 216);
  *(_QWORD *)(v11 + 216) = 0;

  v13 = a1[4];
  v14 = *(void **)(v13 + 48);
  *(_QWORD *)(v13 + 48) = 0;

}

void sub_1835AAEBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  void *v4;
  dispatch_qos_class_t v5;
  _QWORD v6[4];
  _DWORD *v7;
  uint64_t v8;

  nw_connection_report_state_with_handler_on_nw_queue(*(void **)(a1 + 32), 5u, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(*(_QWORD *)(v2 + 8) + 40))
  {
    v3 = *(_DWORD **)(a1 + 32);
    v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v5 = v3[48];
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_3;
    v6[3] = &unk_1E14ACE40;
    v8 = v2;
    v7 = v3;
    nw_connection_async_on_queue(v7, v4, v5, v6);

  }
}

void sub_1835AAF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void nw_connection_report_state_with_handler_on_nw_queue(void *a1, unsigned int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  const char *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  const char *v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  uint64_t v30;
  int v31;
  const char *v32;
  dispatch_qos_class_t v33;
  id v34;
  id v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  unsigned int v40;
  char v41;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  _BYTE v46[14];
  __int16 v47;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  v9 = a4;
  if (!v7)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_connection_report_state_with_handler_on_nw_queue";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v23, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_connection_report_state_with_handler_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v41)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        v28 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            v44 = "nw_connection_report_state_with_handler_on_nw_queue";
            v45 = 2082;
            *(_QWORD *)v46 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_72;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_connection_report_state_with_handler_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_connection_report_state_with_handler_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_72:
    if (v23)
      free(v23);
    goto LABEL_67;
  }
  nw_context_assert_queue(*((void **)v7 + 3));
  if (_nw_signposts_once != -1)
    dispatch_once(&_nw_signposts_once, &__block_literal_global_230);
  if (_nw_signposts_enabled && kdebug_is_enabled())
    kdebug_trace();
  if (v8)
  {
    v10 = _Block_copy(v8);
    if (a2 - 4 > 0xFFFFFFFD)
    {
      if (a2 != 3)
        goto LABEL_55;
      if (_nw_signposts_once == -1)
      {
        if (!_nw_signposts_enabled)
          goto LABEL_55;
      }
      else
      {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_230);
        if (!_nw_signposts_enabled)
          goto LABEL_55;
      }
      if (kdebug_is_enabled())
        kdebug_trace();
      goto LABEL_55;
    }
    v11 = *((_QWORD *)v7 + 55);
    if (v11 && (v12 = *(_QWORD *)(v11 + 24) - *(_QWORD *)(v11 + 16)) != 0)
    {
      nw_array_get_object_at_index(v11, (v12 >> 3) - 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (a2 != 4)
        goto LABEL_28;
    }
    else
    {
      v13 = 0;
      if (a2 != 4)
        goto LABEL_28;
    }
    if (!v13)
      v13 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 50);
LABEL_28:
    if (v13)
    {
      v18 = *((_QWORD *)v7 + 2);
      if (!v18 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v18 + 104)))
        goto LABEL_66;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v19 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v20 = *((_DWORD *)v7 + 112);
        if (a2 > 5)
          v21 = "unknown";
        else
          v21 = off_1E149DDE0[a2];
        *(_DWORD *)buf = 136446978;
        v44 = "nw_connection_report_state_with_handler_on_nw_queue";
        v45 = 1024;
        *(_DWORD *)v46 = v20;
        *(_WORD *)&v46[4] = 2082;
        *(_QWORD *)&v46[6] = v21;
        v47 = 2114;
        v48 = v13;
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s [C%u] reporting state %{public}s error %{public}@", buf, 0x26u);
      }
      goto LABEL_65;
    }
LABEL_55:
    v30 = *((_QWORD *)v7 + 2);
    if (!v30 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v30 + 104)))
    {
      v13 = 0;
      goto LABEL_66;
    }
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v19 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *((_DWORD *)v7 + 112);
      if (a2 > 5)
        v32 = "unknown";
      else
        v32 = off_1E149DE10[a2];
      *(_DWORD *)buf = 136446722;
      v44 = "nw_connection_report_state_with_handler_on_nw_queue";
      v45 = 1024;
      *(_DWORD *)v46 = v31;
      *(_WORD *)&v46[4] = 2082;
      *(_QWORD *)&v46[6] = v32;
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s [C%u] reporting state %{public}s", buf, 0x1Cu);
    }
    v13 = 0;
LABEL_65:

LABEL_66:
    v33 = *((_DWORD *)v7 + 48);
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = ___ZL51nw_connection_report_state_with_handler_on_nw_queueP24NWConcrete_nw_connection21nw_connection_state_tU13block_pointerFvS1_PU22objcproto11OS_nw_error8NSObjectEPU28objcproto17OS_dispatch_queueS2__block_invoke;
    v36[3] = &unk_1E14A5540;
    v34 = v10;
    v40 = a2;
    v39 = v34;
    v37 = v13;
    v38 = v7;
    v35 = v13;
    nw_connection_async_on_queue(v38, v9, v33, v36);

    goto LABEL_67;
  }
  v14 = *((_QWORD *)v7 + 2);
  if (v14 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v14 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v15 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *((_DWORD *)v7 + 112);
      if (a2 > 5)
        v17 = "unknown";
      else
        v17 = off_1E149DE10[a2];
      *(_DWORD *)buf = 136446722;
      v44 = "nw_connection_report_state_with_handler_on_nw_queue";
      v45 = 1024;
      *(_DWORD *)v46 = v16;
      *(_WORD *)&v46[4] = 2082;
      *(_QWORD *)&v46[6] = v17;
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s [C%u] not reporting state %{public}s", buf, 0x1Cu);
    }

  }
LABEL_67:

}

void sub_1835AB6B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) + 16))();
}

void nw_connection_async_on_queue(void *a1, void *a2, dispatch_qos_class_t a3, void *a4)
{
  void **v7;
  NSObject *v8;
  id v9;
  dispatch_block_t v10;
  _QWORD *v11;
  id v12;
  int v13;
  void *v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  const char *backtrace_string;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  os_log_type_t v23;
  int v24;
  os_log_type_t v25;
  int v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  if (v8)
  {
    v10 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, a3, 0, v9);
    dispatch_async(v8, v10);

    goto LABEL_3;
  }
  if (!v7[5])
  {
    nw_context_queue_block(v7[3], v9);
    goto LABEL_3;
  }
  v11 = v7[2];
  if (v11 && !nw_path_parameters_get_logging_disabled(v11[13]))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v12 = (id)gconnectionLogObj;
    v13 = *((_DWORD *)v7 + 112);
    *(_DWORD *)buf = 136446466;
    v30 = "nw_connection_async_on_queue";
    v31 = 1024;
    v32 = v13;
    v14 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault((const char *)v14, &type, &v27))
    {
LABEL_16:
      if (!v14)
        goto LABEL_3;
LABEL_17:
      free(v14);
      goto LABEL_3;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v15 = (id)gconnectionLogObj;
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        v17 = *((_DWORD *)v7 + 112);
        *(_DWORD *)buf = 136446466;
        v30 = "nw_connection_async_on_queue";
        v31 = 1024;
        v32 = v17;
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s [C%u] unable to dispatch block", buf, 0x12u);
      }
LABEL_15:

      goto LABEL_16;
    }
    if (!v27)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v15 = (id)gconnectionLogObj;
      v23 = type;
      if (os_log_type_enabled(v15, type))
      {
        v24 = *((_DWORD *)v7 + 112);
        *(_DWORD *)buf = 136446466;
        v30 = "nw_connection_async_on_queue";
        v31 = 1024;
        v32 = v24;
        _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s [C%u] unable to dispatch block, backtrace limit exceeded", buf, 0x12u);
      }
      goto LABEL_15;
    }
    backtrace_string = __nw_create_backtrace_string();
    if (!backtrace_string)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v15 = (id)gconnectionLogObj;
      v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        v26 = *((_DWORD *)v7 + 112);
        *(_DWORD *)buf = 136446466;
        v30 = "nw_connection_async_on_queue";
        v31 = 1024;
        v32 = v26;
        _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s [C%u] unable to dispatch block, no backtrace", buf, 0x12u);
      }
      goto LABEL_15;
    }
    v19 = (char *)backtrace_string;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v20 = (id)gconnectionLogObj;
    v21 = type;
    if (os_log_type_enabled(v20, type))
    {
      v22 = *((_DWORD *)v7 + 112);
      *(_DWORD *)buf = 136446722;
      v30 = "nw_connection_async_on_queue";
      v31 = 1024;
      v32 = v22;
      v33 = 2082;
      v34 = v19;
      _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s [C%u] unable to dispatch block, dumping backtrace:%{public}s", buf, 0x1Cu);
    }

    free(v19);
    if (v14)
      goto LABEL_17;
  }
LABEL_3:

}

void sub_1835ABB38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL51nw_connection_report_state_with_handler_on_nw_queueP24NWConcrete_nw_connection21nw_connection_state_tU13block_pointerFvS1_PU22objcproto11OS_nw_error8NSObjectEPU28objcproto17OS_dispatch_queueS2__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 32));
}

void __nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _BYTE *v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  char *v14;
  int is_null;
  uint64_t v16;
  int v17;
  int v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  unsigned __int8 *v31;
  unsigned __int8 uu[24];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  memset(uu, 0, 16);
  v6 = nw_parameters_copy_effective_proxy_config(a2);
  v7 = v6;
  if (!v6)
  {
LABEL_10:

    is_null = uuid_is_null(uu);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (is_null)
    {
      if (v16 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v16 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v11 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          v17 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          v18 = *(_DWORD *)(a1 + 40);
          v22 = 136446722;
          v23 = "nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke";
          v24 = 1024;
          v25 = v17;
          v26 = 1024;
          v27 = v18;
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Cannot report error %d, no proxy agent", (uint8_t *)&v22, 0x18u);
        }
        v8 = 0;
        goto LABEL_18;
      }
    }
    else
    {
      if (v16 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v16 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v19 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          v20 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          v21 = *(_DWORD *)(a1 + 40);
          v22 = 136447234;
          v23 = "nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke";
          v24 = 1024;
          v25 = v20;
          v26 = 1024;
          v27 = v21;
          v28 = 1042;
          v29 = 16;
          v30 = 2098;
          v31 = uu;
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, "%{public}s [C%u] Reporting error %d to proxy agent %{public, uuid_t}.16P", (uint8_t *)&v22, 0x28u);
        }

      }
      nw_path_report_error_to_agent(v5, uu, *(_DWORD *)(a1 + 40));
    }
    v8 = 0;
    goto LABEL_28;
  }
  v8 = v6;
  v9 = v8[170];

  if ((v9 & 1) != 0)
  {
    v14 = v8;
    *(_OWORD *)uu = *(_OWORD *)(v14 + 56);

    goto LABEL_10;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v10 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v10 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v11 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      v13 = *(_DWORD *)(a1 + 40);
      v22 = 136446722;
      v23 = "nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke";
      v24 = 1024;
      v25 = v12;
      v26 = 1024;
      v27 = v13;
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Not reporting error %d, not privacy proxy", (uint8_t *)&v22, 0x18u);
    }
LABEL_18:

  }
LABEL_28:

}

void sub_1835ABE8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke_26(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  void *v6;
  const char *v8;
  const char *v9;
  nw_endpoint_t v10;
  const char *v11;
  const char *v12;
  const char *v13;
  id v14;
  NSObject *v15;
  const char *id_string;
  const char *v17;
  const char *logging_description;
  const char *v19;
  const char *v20;
  id v21;
  int v22;
  void *v23;
  nw_endpoint_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((int)nw_endpoint_handler_get_state(v3) >= 1 && (int)nw_endpoint_handler_get_state(v3) <= 4)
  {
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v3) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v15 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v3);
        v17 = nw_endpoint_handler_dry_run_string(v3);
        v24 = nw_endpoint_handler_copy_endpoint(v3);
        logging_description = nw_endpoint_get_logging_description(v24);
        v19 = nw_endpoint_handler_state_string(v3);
        v20 = nw_endpoint_handler_mode_string(v3);
        v21 = nw_endpoint_handler_copy_current_path(v3);
        v22 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136448002;
        v26 = "nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke";
        v27 = 2082;
        v28 = id_string;
        v23 = v21;
        v29 = 2082;
        v30 = v17;
        v31 = 2082;
        v32 = logging_description;
        v33 = 2082;
        v34 = v19;
        v35 = 2082;
        v36 = v20;
        v37 = 2114;
        v38 = v21;
        v39 = 1024;
        v40 = v22;
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] reporting proxy error %d", buf, 0x4Eu);

      }
    }
    v4 = nw_endpoint_handler_copy_parameters(v3);
    v5 = nw_endpoint_handler_copy_current_path(v3);
    v6 = v5;
    if (v4 && v5)
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

LABEL_8:
    goto LABEL_10;
  }
  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v3) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v8 = nw_endpoint_handler_get_id_string(v3);
      v9 = nw_endpoint_handler_dry_run_string(v3);
      v10 = nw_endpoint_handler_copy_endpoint(v3);
      v11 = nw_endpoint_get_logging_description(v10);
      v12 = nw_endpoint_handler_state_string(v3);
      v13 = nw_endpoint_handler_mode_string(v3);
      *(_DWORD *)buf = 136447746;
      v26 = "nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke";
      v27 = 2082;
      v28 = v8;
      v14 = nw_endpoint_handler_copy_current_path(v3);
      v29 = 2082;
      v30 = v9;
      v31 = 2082;
      v32 = v11;
      v33 = 2082;
      v34 = v12;
      v35 = 2082;
      v36 = v13;
      v37 = 2114;
      v38 = v14;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] skipping endpoint handler that is not in correct state for reporting proxy errors", buf, 0x48u);

    }
    goto LABEL_8;
  }
LABEL_10:

  return 1;
}

void sub_1835AC1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZL41nw_connection_endpoint_report_on_nw_queuePU33objcproto22OS_nw_endpoint_handler8NSObject26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS__block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  _BYTE *v7;
  char v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  _BOOL8 v13;
  void *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  void *v24;
  uint64_t v25;
  __int16 v26;
  nw_endpoint_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  void *v31;
  nw_endpoint_t *v32;
  nw_endpoint_t *v33;
  void *v34;
  _WORD *v35;
  _BYTE *v36;
  _BOOL4 v37;
  NSObject *v38;
  os_log_type_t v39;
  _BYTE *v40;
  _BOOL4 v41;
  os_log_type_t v42;
  const char *v43;
  const char *v44;
  nw_endpoint_t v45;
  const char *v46;
  const char *v47;
  const char *v48;
  id v49;
  void *v50;
  unsigned __int16 *v51;
  unsigned int v52;
  const char *v53;
  const char *v54;
  const char *v55;
  nw_endpoint_t v56;
  const char *v57;
  const char *v58;
  const char *v59;
  id v60;
  void *v61;
  unsigned __int16 *v62;
  unsigned int v63;
  const char *v64;
  const char *v65;
  os_log_type_t is_dry_run;
  int v67;
  char **v68;
  const char *v69;
  os_log_type_t v70;
  int v71;
  char **v72;
  const char *id_string;
  const char *v74;
  nw_endpoint_t v75;
  const char *logging_description;
  const char *v77;
  const char *v78;
  id v79;
  unsigned __int16 *v80;
  int v81;
  const char *v82;
  const char *v83;
  const char *v84;
  nw_endpoint_t v85;
  const char *v86;
  const char *v87;
  const char *v88;
  id v89;
  unsigned __int16 *v90;
  int v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  void *v98;
  unsigned int v99;
  id v100;
  id v101;
  _DWORD *v102;
  int v103;
  unsigned __int16 *v104;
  int v105;
  void *v106;
  _DWORD *v107;
  int v108;
  unsigned __int16 *v109;
  _WORD *v110;
  void *v111;
  _DWORD *v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  void *v118;
  void **v119;
  void **v120;
  void *v121;
  uint64_t v122;
  _DWORD *v123;
  void *v124;
  int v125;
  void *v126;
  id v127;
  id v128;
  NWConcrete_nw_endpoint_handler *v129;
  uint64_t mode;
  id *v131;
  id v132;
  const char *v133;
  const char *v134;
  char *v135;
  NSObject *v136;
  os_log_type_t v137;
  const char *v138;
  char *v139;
  os_log_type_t v140;
  _BOOL4 v141;
  const char *v142;
  os_log_type_t v143;
  const char *v144;
  const char *v145;
  id v146;
  _QWORD *v147;
  unsigned __int8 *v148;
  void **v149;
  void **v150;
  NWConcrete_nw_connection *v151;
  uint64_t v152;
  NWConcrete_nw_connection *v153;
  void *v154;
  void (*v155)(uint64_t);
  void *v156;
  _BOOL4 should_skip_probe_sampling;
  _BOOL8 v158;
  char v159;
  _QWORD *v160;
  NSObject *v161;
  int v162;
  const char *v163;
  const char *v164;
  _QWORD *v165;
  int v166;
  const char *v167;
  NWConcrete_nw_connection *v168;
  NSObject *v169;
  id v170;
  void *v171;
  NSObject *v172;
  void *v173;
  void *v174;
  NSObject *v175;
  NSObject *v176;
  _QWORD *v177;
  NSObject *v178;
  unsigned int v179;
  const char *v180;
  NSObject *v181;
  os_log_type_t v182;
  uint32_t v183;
  NSObject *v184;
  nw_protocol_stack_t v185;
  NSObject *v186;
  NWConcrete_nw_connection *probe_locked;
  _BOOL8 v188;
  void *v189;
  NWConcrete_nw_connection *v190;
  _QWORD *v191;
  NSObject *v192;
  unsigned int v193;
  NSObject *v194;
  _QWORD *v195;
  unsigned int top_id;
  _QWORD *v197;
  unsigned int v198;
  _QWORD *v199;
  NSObject *v200;
  unsigned int v201;
  void **v202;
  void **v203;
  NWConcrete_nw_endpoint_handler *v204;
  NWConcrete_nw_endpoint_handler *v205;
  id *v206;
  id v207;
  id v208;
  void *v209;
  uint32_t v210;
  uint32_t v211;
  _QWORD *v212;
  NSObject *v213;
  int v214;
  void *v215;
  _BYTE *v216;
  _BOOL4 v217;
  id v218;
  void *v219;
  uint64_t v220;
  NSObject *v221;
  int v222;
  NSObject *v223;
  uint64_t v224;
  int v225;
  NSObject *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  void *v231;
  NWConcrete_nw_endpoint_handler *v232;
  uint64_t v233;
  uint64_t v234;
  id *v235;
  id v236;
  id v237;
  void *v238;
  _DWORD *v239;
  int v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  NSObject *v244;
  uint64_t v245;
  int v246;
  const char *v247;
  NSObject *v248;
  os_log_type_t v249;
  uint32_t v250;
  int v251;
  _QWORD *v252;
  id v253;
  uint64_t v254;
  NSObject *v255;
  int v256;
  uint64_t *v257;
  uint64_t v258;
  NSObject *v259;
  int v260;
  uint64_t v261;
  int v262;
  int v263;
  NSObject *v264;
  id v265;
  uint64_t v266;
  NSObject *v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t *v270;
  id v271;
  void *v272;
  void *v273;
  nw_endpoint_t v274;
  void *v275;
  uint64_t v276;
  NSObject *v277;
  unsigned int v278;
  NWConcrete_nw_connection *v279;
  nw_endpoint_type_t type;
  void *v281;
  NSObject *v282;
  unsigned int v283;
  const char *v284;
  NSObject *v285;
  os_log_type_t v286;
  uint64_t v287;
  unsigned int v288;
  id *v289;
  uint64_t v290;
  unsigned __int16 *v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  id v296;
  void *v297;
  unsigned int *v298;
  uint64_t v299;
  NWConcrete_nw_endpoint_handler *v300;
  int state;
  NWConcrete_nw_endpoint_mode_handler *v302;
  NWConcrete_nw_endpoint_handler *v303;
  OS_nw_parameters *v304;
  uint64_t v305;
  int v306;
  NSObject *v307;
  uint64_t v308;
  const char *v309;
  NSObject *v310;
  os_log_type_t v311;
  uint32_t v312;
  uint64_t v313;
  nw_parameters_t v314;
  nw_parameters_t v315;
  id v316;
  const char *v317;
  char *v318;
  NSObject *v319;
  os_log_type_t v320;
  const char *v321;
  char *v322;
  os_log_type_t v323;
  _BOOL4 v324;
  const char *v325;
  os_log_type_t v326;
  const char *v327;
  const char *v328;
  _QWORD *v329;
  NSObject *v330;
  unsigned int v331;
  uint64_t v332;
  char *v333;
  NSObject *v334;
  os_log_type_t v335;
  const char *v336;
  _QWORD *v337;
  NSObject *v338;
  unsigned int v339;
  uint32_t int64_with_default;
  uint32_t v341;
  _QWORD *v342;
  unsigned int v343;
  char *v344;
  _BOOL4 v345;
  _QWORD *v346;
  NSObject *v347;
  unsigned int v348;
  _QWORD *v349;
  NSObject *v350;
  unsigned int v351;
  _QWORD *v352;
  unsigned int v353;
  NSObject *v354;
  os_log_type_t v355;
  uint32_t v356;
  int v357;
  int v358;
  _WORD *v359;
  void *v360;
  _DWORD *v361;
  int v362;
  void *v363;
  void *v364;
  int error_code;
  void *v366;
  void **v367;
  void **v368;
  void **v369;
  uint64_t v370;
  _WORD *v371;
  void *v372;
  void *v373;
  void *v374;
  _DWORD *v375;
  int v376;
  _WORD *v377;
  void **v378;
  void **v379;
  void *v380;
  void *v381;
  void *v382;
  _DWORD *v383;
  int v384;
  int v385;
  int v386;
  _WORD *v387;
  void *v388;
  void *v389;
  void *v390;
  _DWORD *v391;
  int v392;
  void *v393;
  void *v394;
  NSObject *v395;
  int v396;
  _WORD *v397;
  void *v398;
  void *v399;
  nw_endpoint_t v400;
  id v401;
  NSObject *v402;
  NSObject *v403;
  NSObject *v404;
  _BOOL4 v405;
  char v406;
  NSObject *v407;
  uint64_t v408;
  _WORD *v409;
  unsigned int v410;
  uint64_t v411;
  _WORD *v412;
  NWConcrete_nw_connection *v413;
  int is_viable;
  uint64_t v415;
  _WORD *v416;
  int v417;
  int minimize_logging;
  char logging_disabled;
  NSObject *v420;
  const char *v421;
  const char *v422;
  nw_endpoint_t v423;
  const char *v424;
  const char *v425;
  const char *v426;
  char *v427;
  void *v428;
  uint64_t v429;
  void *v430;
  _WORD *v431;
  unsigned int v432;
  id v433;
  unsigned __int8 *v434;
  _WORD *v435;
  unsigned int v436;
  id v437;
  id v438;
  _WORD *v439;
  void *v440;
  void *v441;
  char *v442;
  NSObject *v443;
  os_log_type_t v444;
  char *v445;
  os_log_type_t v446;
  _BOOL4 v447;
  os_log_type_t v448;
  void *v449;
  char *v450;
  NSObject *v451;
  os_log_type_t v452;
  void *v453;
  char *v454;
  NSObject *v455;
  os_log_type_t v456;
  void *v457;
  char *v458;
  NSObject *v459;
  os_log_type_t v460;
  void *v461;
  char *v462;
  NSObject *v463;
  os_log_type_t v464;
  void *v465;
  char *v466;
  NSObject *v467;
  os_log_type_t v468;
  char *v469;
  os_log_type_t v470;
  _BOOL4 v471;
  char *v472;
  os_log_type_t v473;
  _BOOL4 v474;
  char *v475;
  os_log_type_t v476;
  _BOOL4 v477;
  char *v478;
  os_log_type_t v479;
  _BOOL4 v480;
  char *v481;
  os_log_type_t v482;
  _BOOL4 v483;
  void *v484;
  os_log_type_t v485;
  char *v486;
  os_log_type_t v487;
  _BOOL4 v488;
  void *v489;
  os_log_type_t v490;
  os_log_type_t v491;
  os_log_type_t v492;
  os_log_type_t v493;
  os_log_type_t v494;
  os_log_type_t v495;
  char *v496;
  os_log_type_t v497;
  _BOOL4 v498;
  os_log_type_t v499;
  const char *v500;
  const char *v501;
  nw_endpoint_t v502;
  const char *v503;
  const char *v504;
  const char *v505;
  char *v506;
  os_log_type_t v507;
  NSObject *v508;
  os_log_type_t v509;
  char *v510;
  _BOOL4 v511;
  unsigned __int8 *v512;
  NSObject *v513;
  nw_parameters_t v514;
  NSObject *v515;
  const char *v516;
  const char *v517;
  unsigned __int8 *v518;
  int v519;
  NWConcrete_nw_connection *v520;
  _QWORD v521[4];
  id v522;
  _BYTE buf[32];
  _BYTE v524[30];
  __int16 v525;
  const char *v526;
  __int16 v527;
  const char *v528;
  __int16 v529;
  int v530;
  __int16 v531;
  int v532;
  __int16 v533;
  _BYTE v534[14];
  __int16 v535;
  _BYTE *v536;
  _BYTE v537[32];
  void (*v538)(uint64_t);
  id v539;
  _BYTE aBlock[24];
  uint64_t (*v541)(uint64_t, uint64_t);
  void (*v542)(uint64_t);
  id v543;
  uint8_t v544[4];
  const char *v545;
  __int16 v546;
  unsigned int v547;
  __int16 v548;
  NWConcrete_nw_connection *v549;
  uint64_t v550;

  v550 = *MEMORY[0x1E0C80C00];
  v2 = mach_continuous_time();
  if (v2 <= 1)
    v3 = 1;
  else
    v3 = v2;
  v4 = nw_delta_nanos(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72), v3);
  v5 = v4 / 0xF4240;
  if (v4 > 0xF423FFFFFFFFFLL)
    LODWORD(v5) = -1;
  v519 = v5;
  if (!*(_QWORD *)(a1 + 56))
    goto LABEL_51;
  v6 = *(void **)(a1 + 40);
  if (!v6)
    goto LABEL_51;
  v7 = v6;
  v8 = v7[268];

  if ((v8 & 1) != 0)
    goto LABEL_51;
  v9 = *(void **)(a1 + 48);
  if (!v9)
  {
    LOBYTE(v15) = -1;
    goto LABEL_38;
  }
  v10 = *(id *)(a1 + 32);
  v11 = v9;
  if (!v10)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_add_error_locked_on_nw_queue";
    v17 = (char *)_os_log_send_and_compose_impl();

    aBlock[0] = 16;
    v537[0] = 0;
    if (__nwlog_fault(v17, aBlock, v537))
    {
      if (aBlock[0] == 17)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = aBlock[0];
        if (os_log_type_enabled(v18, (os_log_type_t)aBlock[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_add_error_locked_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v537[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v21 = aBlock[0];
        v22 = os_log_type_enabled(v18, (os_log_type_t)aBlock[0]);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_add_error_locked_on_nw_queue";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_34;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_add_error_locked_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v23 = aBlock[0];
        if (os_log_type_enabled(v18, (os_log_type_t)aBlock[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_add_error_locked_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_34:
    if (v17)
      free(v17);
    goto LABEL_36;
  }
  nw_context_assert_queue(*((void **)v10 + 3));
  v12 = *((_QWORD *)v10 + 55);
  if (!v12)
  {
    v13 = nw_array_create();
    v14 = (void *)*((_QWORD *)v10 + 55);
    *((_QWORD *)v10 + 55) = v13;

    v12 = *((_QWORD *)v10 + 55);
    if (!v12)
    {
      LOBYTE(v15) = 0;
      goto LABEL_17;
    }
  }
  if (*(_QWORD *)(v12 + 24) - *(_QWORD *)(v12 + 16) > 0x7F7uLL)
  {
LABEL_36:
    LOBYTE(v15) = -1;
    goto LABEL_37;
  }
  v15 = (uint64_t)(*(_QWORD *)(v12 + 24) - *(_QWORD *)(v12 + 16)) >> 3;
LABEL_17:
  nw_array_append(v12, v11);
LABEL_37:

LABEL_38:
  *(_QWORD *)buf = v3;
  *(_QWORD *)&buf[8] = 0;
  *(_DWORD *)&buf[8] = **(_DWORD **)(a1 + 56);
  v24 = *(void **)(a1 + 32);
  v25 = *(_QWORD *)(a1 + 40);
  if (v25)
    v26 = WORD1(v25) ^ WORD2(v25) ^ HIWORD(v25) ^ v25;
  else
    v26 = 0;
  *(_WORD *)&buf[12] = v26;
  *(_WORD *)&buf[14] = v15;
  nw_connection_add_timestamp_locked_on_nw_queue(v24, buf);
  v27 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
  if (v27)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 328);
    if (!v28)
    {
      v29 = nw_array_create();
      v30 = *(_QWORD *)(a1 + 32);
      v31 = *(void **)(v30 + 328);
      *(_QWORD *)(v30 + 328) = v29;

      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 328);
      if (!v28)
        goto LABEL_49;
    }
    v33 = *(nw_endpoint_t **)(v28 + 16);
    v32 = *(nw_endpoint_t **)(v28 + 24);
    if (v33 != v32)
    {
      while (*v33 != v27)
      {
        if (++v33 == v32)
        {
          v33 = *(nw_endpoint_t **)(v28 + 24);
          break;
        }
      }
    }
    if (v33 == v32)
LABEL_49:
      nw_array_append(v28, v27);
  }

LABEL_51:
  v34 = *(void **)(a1 + 40);
  if (!v34)
    goto LABEL_155;
  v35 = *(_WORD **)(a1 + 56);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v35 && *v35 == 1 && v35[1] != 1)
    {
      *(_QWORD *)aBlock = 0;
      *(_QWORD *)&aBlock[8] = 0;
      nw_endpoint_handler_get_client_id(v34, aBlock);
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v38 = (id)gconnectionLogObj;
        if ((nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 40)) & 1) != 0)
          is_dry_run = OS_LOG_TYPE_DEBUG;
        else
          is_dry_run = nw_endpoint_handler_is_dry_run(*(void **)(a1 + 40));
        if (os_log_type_enabled(v38, is_dry_run))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          v74 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          v75 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          v516 = v74;
          logging_description = nw_endpoint_get_logging_description(v75);
          v77 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          v78 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          v79 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          v80 = *(unsigned __int16 **)(a1 + 56);
          if (v80)
          {
            v81 = *v80;
            if ((v81 - 1) > 6)
              v82 = "unknown";
            else
              v82 = off_1E14A01A8[v81 - 1];
            v94 = nw_endpoint_event_event_string(v81, v80[1]);
          }
          else
          {
            v82 = "null";
            v94 = "null";
          }
          v95 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 136449282;
          *(_QWORD *)&buf[4] = id_string;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v516;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = logging_description;
          *(_WORD *)v524 = 2082;
          *(_QWORD *)&v524[2] = v77;
          *(_WORD *)&v524[10] = 2082;
          *(_QWORD *)&v524[12] = v78;
          *(_WORD *)&v524[20] = 2114;
          *(_QWORD *)&v524[22] = v79;
          v525 = 2082;
          v526 = v82;
          v527 = 2082;
          v528 = v94;
          v529 = 1024;
          v530 = v519 / 1000;
          v531 = 1024;
          v532 = v519 % 1000;
          v533 = 2114;
          *(_QWORD *)v534 = v95;
          *(_WORD *)&v534[8] = 1042;
          *(_DWORD *)&v534[10] = 16;
          v535 = 2098;
          v536 = aBlock;
          _os_log_impl(&dword_182FBE000, v38, is_dry_run, "[C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] event: %{public}s:%{public}s @%u.%03us, error %{public}@, uuid: %{public,uuid_t}.16P", buf, 0x78u);

        }
        goto LABEL_145;
      }
    }
    else
    {
      v36 = v34;
      v37 = (v36[268] & 0x20) == 0;

      if (v37)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v38 = (id)gconnectionLogObj;
        if ((nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 40)) & 1) != 0)
          v39 = OS_LOG_TYPE_DEBUG;
        else
          v39 = nw_endpoint_handler_is_dry_run(*(void **)(a1 + 40));
        if (os_log_type_enabled(v38, v39))
        {
          v43 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          v44 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          v45 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          v46 = nw_endpoint_get_logging_description(v45);
          v47 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          v48 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          v49 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          v50 = v49;
          v51 = *(unsigned __int16 **)(a1 + 56);
          if (v51)
          {
            v52 = *v51 - 1;
            if (v52 > 6)
              v53 = "unknown";
            else
              v53 = off_1E14A01A8[v52];
            v67 = v51[1];
            switch(v52)
            {
              case 0u:
                if (--v67 >= 0xA)
                  goto LABEL_122;
                v68 = off_1E14A01E0;
                goto LABEL_121;
              case 1u:
                LOWORD(v67) = v67 - 1;
                if ((unsigned __int16)v67 >= 8u)
                  goto LABEL_122;
                v68 = off_1E14A0230;
                goto LABEL_121;
              case 2u:
                if (--v67 >= 0xF)
                  goto LABEL_122;
                v68 = off_1E14A0270;
                goto LABEL_121;
              case 3u:
                if (--v67 >= 6)
                  goto LABEL_122;
                v68 = off_1E14A02E8;
                goto LABEL_121;
              case 4u:
                if (--v67 >= 5)
                  goto LABEL_122;
                v68 = off_1E14A0318;
                goto LABEL_121;
              case 5u:
                if (--v67 >= 5)
                  goto LABEL_122;
                v68 = off_1E14A0358;
                goto LABEL_121;
              case 6u:
                if (--v67 >= 3)
                  goto LABEL_122;
                v68 = off_1E14A0340;
LABEL_121:
                v65 = v68[(unsigned __int16)v67];
                break;
              default:
LABEL_122:
                v65 = "unknown";
                break;
            }
          }
          else
          {
            v53 = "null";
            v65 = "null";
          }
          v93 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 136448770;
          *(_QWORD *)&buf[4] = v43;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v44;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = v46;
          *(_WORD *)v524 = 2082;
          *(_QWORD *)&v524[2] = v47;
          *(_WORD *)&v524[10] = 2082;
          *(_QWORD *)&v524[12] = v48;
          *(_WORD *)&v524[20] = 2114;
          *(_QWORD *)&v524[22] = v49;
          v525 = 2082;
          v526 = v53;
          v527 = 2082;
          v528 = v65;
          v529 = 1024;
          v530 = v519 / 1000;
          v531 = 1024;
          v532 = v519 % 1000;
          v533 = 2114;
          *(_QWORD *)v534 = v93;
          _os_log_impl(&dword_182FBE000, v38, v39, "[C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] event: %{public}s:%{public}s @%u.%03us, error %{public}@", buf, 0x68u);

        }
LABEL_145:

      }
    }
  }
  else if (v35 && *v35 == 1 && v35[1] != 1)
  {
    *(_QWORD *)aBlock = 0;
    *(_QWORD *)&aBlock[8] = 0;
    nw_endpoint_handler_get_client_id(v34, aBlock);
    if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v38 = (id)gconnectionLogObj;
      if ((nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 40)) & 1) != 0)
        v70 = OS_LOG_TYPE_DEBUG;
      else
        v70 = nw_endpoint_handler_is_dry_run(*(void **)(a1 + 40));
      if (os_log_type_enabled(v38, v70))
      {
        v83 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
        v84 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
        v85 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
        v517 = v84;
        v86 = nw_endpoint_get_logging_description(v85);
        v87 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
        v88 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
        v89 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
        v90 = *(unsigned __int16 **)(a1 + 56);
        if (v90)
        {
          v91 = *v90;
          if ((v91 - 1) > 6)
            v92 = "unknown";
          else
            v92 = off_1E14A01A8[v91 - 1];
          v134 = nw_endpoint_event_event_string(v91, v90[1]);
        }
        else
        {
          v92 = "null";
          v134 = "null";
        }
        *(_DWORD *)buf = 136449026;
        *(_QWORD *)&buf[4] = v83;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v517;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v86;
        *(_WORD *)v524 = 2082;
        *(_QWORD *)&v524[2] = v87;
        *(_WORD *)&v524[10] = 2082;
        *(_QWORD *)&v524[12] = v88;
        *(_WORD *)&v524[20] = 2114;
        *(_QWORD *)&v524[22] = v89;
        v525 = 2082;
        v526 = v92;
        v527 = 2082;
        v528 = v134;
        v529 = 1024;
        v530 = v519 / 1000;
        v531 = 1024;
        v532 = v519 % 1000;
        v533 = 1042;
        *(_DWORD *)v534 = 16;
        *(_WORD *)&v534[4] = 2098;
        *(_QWORD *)&v534[6] = aBlock;
        _os_log_impl(&dword_182FBE000, v38, v70, "[C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] event: %{public}s:%{public}s @%u.%03us, uuid: %{public,uuid_t}.16P", buf, 0x6Eu);

      }
      goto LABEL_145;
    }
  }
  else
  {
    v40 = v34;
    v41 = (v40[268] & 0x20) == 0;

    if (v41)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v38 = (id)gconnectionLogObj;
      if ((nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 40)) & 1) != 0)
        v42 = OS_LOG_TYPE_DEBUG;
      else
        v42 = nw_endpoint_handler_is_dry_run(*(void **)(a1 + 40));
      if (os_log_type_enabled(v38, v42))
      {
        v54 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
        v55 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
        v56 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
        v57 = nw_endpoint_get_logging_description(v56);
        v58 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
        v59 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
        v60 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
        v61 = v60;
        v62 = *(unsigned __int16 **)(a1 + 56);
        if (v62)
        {
          v63 = *v62 - 1;
          if (v63 > 6)
            v64 = "unknown";
          else
            v64 = off_1E14A01A8[v63];
          v71 = v62[1];
          switch(v63)
          {
            case 0u:
              if (--v71 >= 0xA)
                goto LABEL_143;
              v72 = off_1E14A01E0;
              goto LABEL_142;
            case 1u:
              LOWORD(v71) = v71 - 1;
              if ((unsigned __int16)v71 >= 8u)
                goto LABEL_143;
              v72 = off_1E14A0230;
              goto LABEL_142;
            case 2u:
              if (--v71 >= 0xF)
                goto LABEL_143;
              v72 = off_1E14A0270;
              goto LABEL_142;
            case 3u:
              if (--v71 >= 6)
                goto LABEL_143;
              v72 = off_1E14A02E8;
              goto LABEL_142;
            case 4u:
              if (--v71 >= 5)
                goto LABEL_143;
              v72 = off_1E14A0318;
              goto LABEL_142;
            case 5u:
              if (--v71 >= 5)
                goto LABEL_143;
              v72 = off_1E14A0358;
              goto LABEL_142;
            case 6u:
              if (--v71 >= 3)
                goto LABEL_143;
              v72 = off_1E14A0340;
LABEL_142:
              v69 = v72[(unsigned __int16)v71];
              break;
            default:
LABEL_143:
              v69 = "unknown";
              break;
          }
        }
        else
        {
          v64 = "null";
          v69 = "null";
        }
        *(_DWORD *)buf = 136448514;
        *(_QWORD *)&buf[4] = v54;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v55;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v57;
        *(_WORD *)v524 = 2082;
        *(_QWORD *)&v524[2] = v58;
        *(_WORD *)&v524[10] = 2082;
        *(_QWORD *)&v524[12] = v59;
        *(_WORD *)&v524[20] = 2114;
        *(_QWORD *)&v524[22] = v60;
        v525 = 2082;
        v526 = v64;
        v527 = 2082;
        v528 = v69;
        v529 = 1024;
        v530 = v519 / 1000;
        v531 = 1024;
        v532 = v519 % 1000;
        _os_log_impl(&dword_182FBE000, v38, v42, "[C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] event: %{public}s:%{public}s @%u.%03us", buf, 0x5Eu);

      }
      goto LABEL_145;
    }
  }
  v96 = *(void **)(a1 + 40);
  if (v96)
  {
    v97 = *(_QWORD *)(a1 + 32);
    v98 = *(void **)(v97 + 144);
    if (v98)
    {
      if (v96 == v98 && !*(_DWORD *)(v97 + 280))
      {
        v99 = *(_DWORD *)(a1 + 64);
        if (v99 <= 5 && ((1 << v99) & 0x3A) != 0)
        {
          v100 = v96;
          os_unfair_lock_lock((os_unfair_lock_t)v100 + 28);
          v101 = *((id *)v100 + 8);
          os_unfair_lock_unlock((os_unfair_lock_t)v100 + 28);

          if (v101)
          {
            v102 = v101;
            v103 = v102[92];

            *(_DWORD *)(*(_QWORD *)(a1 + 32) + 280) = v103;
          }

        }
      }
    }
  }
LABEL_155:
  v104 = *(unsigned __int16 **)(a1 + 56);
  if (!v104)
    goto LABEL_172;
  v105 = *v104;
  if (v105 != 4)
    goto LABEL_162;
  v106 = *(void **)(a1 + 40);
  if (v106)
  {
    v107 = v106;
    v108 = v107[29];

    if (v108 == 3)
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 504) = nw_endpoint_handler_get_proxy_privacy_stance(*(void **)(a1 + 40));
  }
  v109 = *(unsigned __int16 **)(a1 + 56);
  if (v109)
  {
    v105 = *v109;
LABEL_162:
    if (v105 == 5 && !nw_parameters_get_multipath(*(void **)(*(_QWORD *)(a1 + 32) + 16)))
      nw_connection_enable_stats_report_on_nw_queue(*(void **)(a1 + 32), 1);
    v110 = *(_WORD **)(a1 + 56);
    if (v110)
    {
      if (*v110 == 5 && v110[1] == 1)
      {
        if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 288))
        {
          v111 = *(void **)(a1 + 40);
          if (v111)
          {
            v112 = v111;
            v113 = v112[29];

            if (v113 == 4)
              nw_endpoint_handler_reset_expected_progress_target(*(void **)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 288), (const unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 452));
          }
        }
      }
    }
  }
LABEL_172:
  v114 = *(_QWORD *)(a1 + 32);
  v115 = *(unsigned __int8 *)(v114 + 109);
  if ((v115 & 0x40) != 0 && *(_QWORD *)(v114 + 144) == *(_QWORD *)(a1 + 40) && *(_DWORD *)(a1 + 68) != 2)
  {
    *(_BYTE *)(v114 + 109) = v115 & 0xBF;
    v114 = *(_QWORD *)(a1 + 32);
    v115 = *(unsigned __int8 *)(v114 + 109);
  }
  v116 = (v115 >> 6) & 1;
  if (*(_DWORD *)(a1 + 68) == 2 && *(_DWORD *)(a1 + 64) == 3 && (v115 & 0x40) == 0)
  {
    v116 = 0;
    v117 = *(_QWORD *)(a1 + 40);
    if (v117)
    {
      if (v117 == *(_QWORD *)(v114 + 144))
      {
        v118 = *(void **)(v114 + 152);
        *(_QWORD *)(v114 + 152) = 0;

        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 109) |= 0x40u;
        v119 = (void **)*(id *)(a1 + 32);
        v120 = v119;
        if (v119)
        {
          nw_context_assert_queue(v119[3]);
          if ((*((_BYTE *)v120 + 109) & 0x40) != 0)
          {
            v121 = v120[18];
            if (v121)
            {
              v122 = (uint64_t)v120[36];
              if (v122)
              {
                v123 = v121;
                v124 = v123;
                v125 = v123[29];
                if (v125 == 4)
                {
                  nw_endpoint_fallback_reset_expected_progress_target(v123, v122);
                }
                else if (v125 == 2)
                {
                  nw_endpoint_flow_reset_expected_progress_target(v123, v122, (const unsigned __int8 *)v120 + 452);
                }

              }
              v126 = v120[25];
              if (v126)
              {
                v127 = v120[18];
                v128 = v126;
                if (v127)
                {
                  v129 = (NWConcrete_nw_endpoint_handler *)v127;
                  mode = v129->mode;

                  if ((_DWORD)mode == 2)
                  {
                    v131 = (id *)nw_endpoint_handler_copy_flow(v129);
                    objc_storeStrong(v131 + 105, v126);

LABEL_233:
                    goto LABEL_234;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v132 = (id)gLogObj;
                  if (mode > 5)
                    v133 = "unknown-mode";
                  else
                    v133 = off_1E149FC18[mode];
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_endpoint_handler_set_client_queue";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v133;
                  *(_WORD *)&buf[22] = 2082;
                  *(_QWORD *)&buf[24] = "flow";
                  v135 = (char *)_os_log_send_and_compose_impl();

                  aBlock[0] = 16;
                  v537[0] = 0;
                  if (!__nwlog_fault(v135, aBlock, v537))
                    goto LABEL_231;
                  if (aBlock[0] == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v136 = (id)gLogObj;
                    v137 = aBlock[0];
                    if (os_log_type_enabled(v136, (os_log_type_t)aBlock[0]))
                    {
                      if (mode > 5)
                        v138 = "unknown-mode";
                      else
                        v138 = off_1E149FC18[mode];
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_endpoint_handler_set_client_queue";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v138;
                      *(_WORD *)&buf[22] = 2082;
                      *(_QWORD *)&buf[24] = "flow";
                      _os_log_impl(&dword_182FBE000, v136, v137, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
                    }
                  }
                  else if (v537[0])
                  {
                    v139 = (char *)__nw_create_backtrace_string();
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v136 = (id)gLogObj;
                    v140 = aBlock[0];
                    v141 = os_log_type_enabled(v136, (os_log_type_t)aBlock[0]);
                    if (v139)
                    {
                      if (v141)
                      {
                        if (mode > 5)
                          v142 = "unknown-mode";
                        else
                          v142 = off_1E149FC18[mode];
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_endpoint_handler_set_client_queue";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v142;
                        *(_WORD *)&buf[22] = 2082;
                        *(_QWORD *)&buf[24] = "flow";
                        *(_WORD *)v524 = 2082;
                        *(_QWORD *)&v524[2] = v139;
                        _os_log_impl(&dword_182FBE000, v136, v140, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
                      }

                      free(v139);
                      if (!v135)
                        goto LABEL_233;
                      goto LABEL_232;
                    }
                    if (v141)
                    {
                      if (mode > 5)
                        v145 = "unknown-mode";
                      else
                        v145 = off_1E149FC18[mode];
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_endpoint_handler_set_client_queue";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v145;
                      *(_WORD *)&buf[22] = 2082;
                      *(_QWORD *)&buf[24] = "flow";
                      _os_log_impl(&dword_182FBE000, v136, v140, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v136 = (id)gLogObj;
                    v143 = aBlock[0];
                    if (os_log_type_enabled(v136, (os_log_type_t)aBlock[0]))
                    {
                      if (mode > 5)
                        v144 = "unknown-mode";
                      else
                        v144 = off_1E149FC18[mode];
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_endpoint_handler_set_client_queue";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v144;
                      *(_WORD *)&buf[22] = 2082;
                      *(_QWORD *)&buf[24] = "flow";
                      _os_log_impl(&dword_182FBE000, v136, v143, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
                    }
                  }
                  goto LABEL_230;
                }
                __nwlog_obj();
                v489 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_endpoint_handler_set_client_queue";
                v135 = (char *)_os_log_send_and_compose_impl();

                aBlock[0] = 16;
                v537[0] = 0;
                if (__nwlog_fault(v135, aBlock, v537))
                {
                  if (aBlock[0] == 17)
                  {
                    __nwlog_obj();
                    v136 = objc_claimAutoreleasedReturnValue();
                    v490 = aBlock[0];
                    if (os_log_type_enabled(v136, (os_log_type_t)aBlock[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_endpoint_handler_set_client_queue";
                      _os_log_impl(&dword_182FBE000, v136, v490, "%{public}s called with null handler", buf, 0xCu);
                    }
LABEL_230:

                    goto LABEL_231;
                  }
                  if (!v537[0])
                  {
                    __nwlog_obj();
                    v136 = objc_claimAutoreleasedReturnValue();
                    v507 = aBlock[0];
                    if (os_log_type_enabled(v136, (os_log_type_t)aBlock[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_endpoint_handler_set_client_queue";
                      _os_log_impl(&dword_182FBE000, v136, v507, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
                    }
                    goto LABEL_230;
                  }
                  v496 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v136 = objc_claimAutoreleasedReturnValue();
                  v497 = aBlock[0];
                  v498 = os_log_type_enabled(v136, (os_log_type_t)aBlock[0]);
                  if (!v496)
                  {
                    if (v498)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_endpoint_handler_set_client_queue";
                      _os_log_impl(&dword_182FBE000, v136, v497, "%{public}s called with null handler, no backtrace", buf, 0xCu);
                    }
                    goto LABEL_230;
                  }
                  if (v498)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_endpoint_handler_set_client_queue";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v496;
                    _os_log_impl(&dword_182FBE000, v136, v497, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v496);
                }
LABEL_231:
                if (!v135)
                  goto LABEL_233;
LABEL_232:
                free(v135);
                goto LABEL_233;
              }
            }
          }
LABEL_234:

          v146 = *(id *)(a1 + 32);
          v147 = v146;
          if (v146)
          {
            nw_context_assert_queue(*((void **)v146 + 3));
            v148 = (unsigned __int8 *)v147[53];
            if (v148)
            {
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 3221225472;
              *(_QWORD *)&buf[16] = ___ZL62nw_connection_take_initial_data_transfer_snapshots_on_nw_queueP24NWConcrete_nw_connection_block_invoke;
              *(_QWORD *)&buf[24] = &unk_1E14AC200;
              *(_QWORD *)v524 = v147;
              nw_array_apply(v148, (uint64_t)buf);

            }
            goto LABEL_237;
          }
          __nwlog_obj();
          v453 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_take_initial_data_transfer_snapshots_on_nw_queue";
          v454 = (char *)_os_log_send_and_compose_impl();

          aBlock[0] = 16;
          v537[0] = 0;
          if (__nwlog_fault(v454, aBlock, v537))
          {
            if (aBlock[0] == 17)
            {
              __nwlog_obj();
              v455 = objc_claimAutoreleasedReturnValue();
              v456 = aBlock[0];
              if (os_log_type_enabled(v455, (os_log_type_t)aBlock[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_take_initial_data_transfer_snapshots_on_nw_queue";
                _os_log_impl(&dword_182FBE000, v455, v456, "%{public}s called with null connection", buf, 0xCu);
              }
            }
            else if (v537[0])
            {
              v472 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v455 = objc_claimAutoreleasedReturnValue();
              v473 = aBlock[0];
              v474 = os_log_type_enabled(v455, (os_log_type_t)aBlock[0]);
              if (v472)
              {
                if (v474)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_connection_take_initial_data_transfer_snapshots_on_nw_queue";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v472;
                  _os_log_impl(&dword_182FBE000, v455, v473, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v472);
                goto LABEL_818;
              }
              if (v474)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_take_initial_data_transfer_snapshots_on_nw_queue";
                _os_log_impl(&dword_182FBE000, v455, v473, "%{public}s called with null connection, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v455 = objc_claimAutoreleasedReturnValue();
              v492 = aBlock[0];
              if (os_log_type_enabled(v455, (os_log_type_t)aBlock[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_take_initial_data_transfer_snapshots_on_nw_queue";
                _os_log_impl(&dword_182FBE000, v455, v492, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_818:
          if (v454)
            free(v454);
LABEL_237:

          v149 = (void **)*(id *)(a1 + 32);
          v150 = v149;
          if (v149)
          {
            nw_context_assert_queue(v149[3]);
            if ((nw_parameters_get_is_probe(v150[2]) & 1) != 0)
              goto LABEL_313;
            v151 = v150;
            nw_context_assert_queue(v150[3]);
            if (!nw_connection_should_run_probe_locked(v151)
              || (*((_BYTE *)v150[2] + 101) & 0x40) == 0
              && !networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_enable_tls_experiments))
            {
LABEL_262:

              v168 = v151;
              nw_context_assert_queue(v150[3]);
              if (!nw_connection_should_run_probe_locked(v168))
              {
LABEL_312:

                goto LABEL_313;
              }
              if ((nw_parameters_get_tls(v150[2]) & 1) == 0)
              {
                v195 = v150[2];
                if (!v195 || nw_path_parameters_get_logging_disabled(v195[13]))
                  goto LABEL_312;
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v169 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v169, OS_LOG_TYPE_DEBUG))
                {
                  top_id = v168->top_id;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_connection_run_ech_probe_locked_on_nw_queue";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = top_id;
                  _os_log_impl(&dword_182FBE000, v169, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] stack doesn't include TLS; not running ECH probe",
                    buf,
                    0x12u);
                }
                goto LABEL_311;
              }
              v169 = nw_protocol_boringssl_copy_definition();
              v170 = nw_connection_copy_protocol_metadata_locked((uint64_t)v168, v169, 0, 0);
              v171 = v170;
              if (v170)
              {
                v172 = v170;
                if (sec_protocol_metadata_get_negotiated_protocol_version(v172) != kTLSProtocol13)
                {
                  v199 = v150[2];
                  if (v199 && !nw_path_parameters_get_logging_disabled(v199[13]))
                  {
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v200 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v200, OS_LOG_TYPE_DEBUG))
                    {
                      v201 = v168->top_id;
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_connection_run_ech_probe_locked_on_nw_queue";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v201;
                      _os_log_impl(&dword_182FBE000, v200, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] TLS 1.3 wasn't the negotiated protocol; not running ECH probe",
                        buf,
                        0x12u);
                    }

                  }
                  goto LABEL_309;
                }
                if (nw_endpoint_get_type((nw_endpoint_t)v168->endpoint) == nw_endpoint_type_host)
                {
                  v520 = v168;
                  v173 = (void *)nw_endpoint_handler_copy_connected_path(v520->parent_endpoint_handler);
                  v174 = v173;
                  if (!v173)
                  {
                    v329 = v150[2];
                    if (v329 && !nw_path_parameters_get_logging_disabled(v329[13]))
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v330 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v330, OS_LOG_TYPE_DEBUG))
                      {
                        v331 = v520->top_id;
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_connection_has_eligible_interface_for_probe";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v331;
                        _os_log_impl(&dword_182FBE000, v330, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] no connected path, not probing", buf, 0x12u);
                      }

                    }
                    goto LABEL_309;
                  }
                  v175 = nw_path_copy_interface(v173);
                  v176 = v175;
                  if (!v175
                    || nw_interface_get_type(v175) != nw_interface_type_cellular
                    && nw_interface_get_type(v176) != nw_interface_type_wifi
                    && nw_interface_get_type(v176) != nw_interface_type_wired)
                  {
                    v337 = v150[2];
                    if (v337 && !nw_path_parameters_get_logging_disabled(v337[13]))
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v338 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v338, OS_LOG_TYPE_DEBUG))
                      {
                        v339 = v520->top_id;
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_connection_has_eligible_interface_for_probe";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v339;
                        _os_log_impl(&dword_182FBE000, v338, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] no interface or ineligible interface type, not probing", buf, 0x12u);
                      }

                    }
                    goto LABEL_309;
                  }

                  if (nw_parameters_get_should_skip_probe_sampling(v150[2]))
                  {
                    v177 = v150[2];
                    if (v177 && !nw_path_parameters_get_logging_disabled(v177[13]))
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v178 = (id)gconnectionLogObj;
                      if (!os_log_type_enabled(v178, OS_LOG_TYPE_INFO))
                        goto LABEL_280;
                      v179 = v520->top_id;
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_connection_run_ech_probe_locked_on_nw_queue";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v179;
                      v180 = "%{public}s [C%u] sampling overridden, running ECH probe";
                      v181 = v178;
                      v182 = OS_LOG_TYPE_INFO;
                      v183 = 18;
LABEL_279:
                      _os_log_impl(&dword_182FBE000, v181, v182, v180, buf, v183);
LABEL_280:

                      goto LABEL_281;
                    }
                    goto LABEL_281;
                  }
                  if (networkd_settings_get_BOOL((const char *)nw_setting_ech_probe_enabled))
                  {
                    int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_ech_probe_numerator, 0);
                    v341 = networkd_settings_get_int64_with_default((const char *)nw_setting_ech_probe_denominator, 0);
                    if (arc4random_uniform(v341) < int64_with_default)
                    {
                      v342 = v150[2];
                      if (v342 && !nw_path_parameters_get_logging_disabled(v342[13]))
                      {
                        if (__nwlog_connection_log::onceToken != -1)
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                        v178 = (id)gconnectionLogObj;
                        if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                          goto LABEL_280;
                        v343 = v520->top_id;
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_connection_run_ech_probe_locked_on_nw_queue";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v343;
                        *(_WORD *)&buf[18] = 1024;
                        *(_DWORD *)&buf[20] = int64_with_default;
                        *(_WORD *)&buf[24] = 1024;
                        *(_DWORD *)&buf[26] = v341;
                        v180 = "%{public}s [C%u] ECH probe sampled at %u / %u";
                        v181 = v178;
                        v182 = OS_LOG_TYPE_DEBUG;
                        v183 = 30;
                        goto LABEL_279;
                      }
LABEL_281:
                      v514 = nw_parameters_copy((nw_parameters_t)v150[2]);
                      v512 = nw_parameters_copy_protocol_options_for_definition(v514, v169);
                      sec_protocol_options_set_enable_encrypted_client_hello((sec_protocol_options_t)v512, 1);
                      *(_QWORD *)v537 = 0;
                      *(_QWORD *)&v537[8] = v537;
                      *(_QWORD *)&v537[16] = 0x2020000000;
                      v537[24] = 0;
                      v184 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v150[2]);
                      nw_parameters_clear_protocol_stack(v514, 5);
                      nw_parameters_clear_protocol_stack(v514, 4);
                      v185 = nw_parameters_copy_default_protocol_stack(v514);
                      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                      *(_QWORD *)&buf[8] = 3221225472;
                      *(_QWORD *)&buf[16] = ___ZL46nw_connection_run_ech_probe_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke;
                      *(_QWORD *)&buf[24] = &unk_1E149DC78;
                      *(_QWORD *)&v524[16] = v537;
                      v186 = v185;
                      *(_QWORD *)v524 = v186;
                      v518 = v512;
                      *(_QWORD *)&v524[8] = v518;
                      v513 = v184;
                      nw_protocol_stack_iterate_application_protocols(v184, buf);
                      v515 = v186;
                      probe_locked = (NWConcrete_nw_connection *)nw_connection_create_probe_locked(v520, v514);
                      if (probe_locked)
                      {
                        v188 = nw_queue_copy_current_workloop();
                        nw_connection_set_queue(&probe_locked->super, (dispatch_queue_t)v188);

                        nw_connection_add_probe_locked(v520, probe_locked);
                        v189 = v150[3];
                        *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&aBlock[8] = 3221225472;
                        *(_QWORD *)&aBlock[16] = ___ZL46nw_connection_run_ech_probe_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke_225;
                        v541 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E14ACFD0;
                        v190 = probe_locked;
                        v542 = (void (*)(uint64_t))v190;
                        nw_queue_context_async(v189, aBlock);
                        v191 = v150[2];
                        if (v191 && !nw_path_parameters_get_logging_disabled(v191[13]))
                        {
                          if (__nwlog_connection_log::onceToken != -1)
                            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                          v192 = (id)gconnectionLogObj;
                          if (os_log_type_enabled(v192, OS_LOG_TYPE_INFO))
                          {
                            v193 = v520->top_id;
                            *(_DWORD *)v544 = 136446722;
                            v545 = "nw_connection_run_ech_probe_locked_on_nw_queue";
                            v546 = 1024;
                            v547 = v193;
                            v548 = 2112;
                            v549 = v190;
                            _os_log_impl(&dword_182FBE000, v192, OS_LOG_TYPE_INFO, "%{public}s [C%u] Started ECH probe: %@", v544, 0x1Cu);
                          }

                        }
                        v194 = v542;
                      }
                      else
                      {
                        v352 = v150[2];
                        if (!v352 || nw_path_parameters_get_logging_disabled(v352[13]))
                          goto LABEL_571;
                        if (__nwlog_connection_log::onceToken != -1)
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                        v194 = (id)gconnectionLogObj;
                        if (os_log_type_enabled(v194, OS_LOG_TYPE_INFO))
                        {
                          v353 = v520->top_id;
                          *(_DWORD *)aBlock = 136446466;
                          *(_QWORD *)&aBlock[4] = "nw_connection_run_ech_probe_locked_on_nw_queue";
                          *(_WORD *)&aBlock[12] = 1024;
                          *(_DWORD *)&aBlock[14] = v353;
                          _os_log_impl(&dword_182FBE000, v194, OS_LOG_TYPE_INFO, "%{public}s [C%u] Could not create probe, nw_connection_create_probe_locked returned nil connection", aBlock, 0x12u);
                        }
                      }

LABEL_571:
                      _Block_object_dispose(v537, 8);

                      goto LABEL_309;
                    }
LABEL_557:
                    v349 = v150[2];
                    if (v349 && !nw_path_parameters_get_logging_disabled(v349[13]))
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v350 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v350, OS_LOG_TYPE_DEBUG))
                      {
                        v351 = v520->top_id;
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_connection_run_ech_probe_locked_on_nw_queue";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v351;
                        _os_log_impl(&dword_182FBE000, v350, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] connection wasn't sampled for ECH probe", buf, 0x12u);
                      }

                    }
                    goto LABEL_309;
                  }
                  v346 = v150[2];
                  if (v346)
                  {
                    if (!nw_path_parameters_get_logging_disabled(v346[13]))
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v347 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v347, OS_LOG_TYPE_DEBUG))
                      {
                        v348 = v520->top_id;
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_connection_run_ech_probe_locked_on_nw_queue";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v348;
                        _os_log_impl(&dword_182FBE000, v347, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] ECH probes not enabled on this network", buf, 0x12u);
                      }

                    }
                    goto LABEL_557;
                  }
                }
              }
              else
              {
                v197 = v150[2];
                if (!v197 || nw_path_parameters_get_logging_disabled(v197[13]))
                  goto LABEL_310;
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v172 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v172, OS_LOG_TYPE_DEBUG))
                {
                  v198 = v168->top_id;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_connection_run_ech_probe_locked_on_nw_queue";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v198;
                  _os_log_impl(&dword_182FBE000, v172, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] No TLS metadata; not running ECH probe",
                    buf,
                    0x12u);
                }
              }
LABEL_309:

LABEL_310:
LABEL_311:

              goto LABEL_312;
            }
            v152 = MEMORY[0x1E0C809B0];
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = ___ZL51nw_connection_run_sec_experiment_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke;
            *(_QWORD *)&buf[24] = &unk_1E14A8E38;
            v153 = v151;
            *(_QWORD *)v524 = v153;
            v154 = _Block_copy(buf);
            *(_QWORD *)aBlock = v152;
            *(_QWORD *)&aBlock[8] = 3221225472;
            *(_QWORD *)&aBlock[16] = ___ZL51nw_connection_run_sec_experiment_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke_221;
            v541 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E14A99D8;
            v155 = v153;
            v542 = v155;
            v156 = _Block_copy(aBlock);
            should_skip_probe_sampling = nw_parameters_get_should_skip_probe_sampling(v150[2]);
            v158 = nw_queue_copy_current_workloop();
            v159 = sec_experiment_run_async_with_sampling_disabled();

            if ((v159 & 1) != 0)
            {
              *((_BYTE *)v155 + 109) |= 1u;
              v160 = v150[2];
              if (!v160 || nw_path_parameters_get_logging_disabled(v160[13]))
                goto LABEL_261;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v161 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v161, OS_LOG_TYPE_DEBUG))
              {
LABEL_260:

LABEL_261:
                goto LABEL_262;
              }
              v162 = *((_DWORD *)v155 + 112);
              v163 = "enabled";
              *(_QWORD *)&v537[4] = "nw_connection_run_sec_experiment_locked_on_nw_queue";
              *(_DWORD *)v537 = 136446722;
              if (should_skip_probe_sampling)
                v163 = "disabled";
              *(_WORD *)&v537[12] = 1024;
              *(_DWORD *)&v537[14] = v162;
              *(_WORD *)&v537[18] = 2082;
              *(_QWORD *)&v537[20] = v163;
              v164 = "%{public}s [C%u] Probe connection started with sampling %{public}s";
            }
            else
            {
              v165 = v150[2];
              if (!v165 || nw_path_parameters_get_logging_disabled(v165[13]))
                goto LABEL_261;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v161 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v161, OS_LOG_TYPE_DEBUG))
                goto LABEL_260;
              v166 = *((_DWORD *)v155 + 112);
              v167 = "enabled";
              *(_QWORD *)&v537[4] = "nw_connection_run_sec_experiment_locked_on_nw_queue";
              *(_DWORD *)v537 = 136446722;
              if (should_skip_probe_sampling)
                v167 = "disabled";
              *(_WORD *)&v537[12] = 1024;
              *(_DWORD *)&v537[14] = v166;
              *(_WORD *)&v537[18] = 2082;
              *(_QWORD *)&v537[20] = v167;
              v164 = "%{public}s [C%u] Probe connection not run with sampling %{public}s";
            }
            _os_log_impl(&dword_182FBE000, v161, OS_LOG_TYPE_DEBUG, v164, v537, 0x1Cu);
            goto LABEL_260;
          }
          __nwlog_obj();
          v457 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_run_probes_locked_on_nw_queue";
          v458 = (char *)_os_log_send_and_compose_impl();

          aBlock[0] = 16;
          v537[0] = 0;
          if (__nwlog_fault(v458, aBlock, v537))
          {
            if (aBlock[0] == 17)
            {
              __nwlog_obj();
              v459 = objc_claimAutoreleasedReturnValue();
              v460 = aBlock[0];
              if (os_log_type_enabled(v459, (os_log_type_t)aBlock[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_run_probes_locked_on_nw_queue";
                _os_log_impl(&dword_182FBE000, v459, v460, "%{public}s called with null connection", buf, 0xCu);
              }
            }
            else if (v537[0])
            {
              v475 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v459 = objc_claimAutoreleasedReturnValue();
              v476 = aBlock[0];
              v477 = os_log_type_enabled(v459, (os_log_type_t)aBlock[0]);
              if (v475)
              {
                if (v477)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_connection_run_probes_locked_on_nw_queue";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v475;
                  _os_log_impl(&dword_182FBE000, v459, v476, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v475);
                goto LABEL_823;
              }
              if (v477)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_run_probes_locked_on_nw_queue";
                _os_log_impl(&dword_182FBE000, v459, v476, "%{public}s called with null connection, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v459 = objc_claimAutoreleasedReturnValue();
              v493 = aBlock[0];
              if (os_log_type_enabled(v459, (os_log_type_t)aBlock[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_run_probes_locked_on_nw_queue";
                _os_log_impl(&dword_182FBE000, v459, v493, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_823:
          if (v458)
            free(v458);
LABEL_313:

          v202 = (void **)*(id *)(a1 + 32);
          v203 = v202;
          if (v202)
          {
            nw_context_assert_queue(v202[3]);
            v204 = nw_endpoint_handler_copy_connected_flow_handler(v203[18]);
            v205 = v204;
            if (v204)
            {
              v206 = v204;
              v207 = v206[4];

              if (v207)
              {
                v208 = v207;
                v209 = v208;
                if (*((_QWORD *)v208 + 24)
                  || (v215 = (void *)*((_QWORD *)v208 + 23)) != 0
                  && (v216 = v215, v217 = (v216[171] & 0x40) == 0, v216, !v217))
                {

                  v210 = networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_race_report_numerator, 1);
                  v211 = networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_race_report_denominator, 20000);
                  if (arc4random_uniform(v211) < v210)
                  {
                    v212 = v203[2];
                    if (v212 && !nw_path_parameters_get_logging_disabled(v212[13]))
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v213 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG))
                      {
                        v214 = *((_DWORD *)v203 + 112);
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_connection_check_proxy_race_report_locked_on_nw_queue";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v214;
                        _os_log_impl(&dword_182FBE000, v213, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] selected for reporting (proxy race)", buf, 0x12u);
                      }

                    }
                    *((_BYTE *)v203 + 109) |= 2u;
                  }
                }
                else
                {

                }
              }

            }
            goto LABEL_331;
          }
          __nwlog_obj();
          v461 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_check_proxy_race_report_locked_on_nw_queue";
          v462 = (char *)_os_log_send_and_compose_impl();

          aBlock[0] = 16;
          v537[0] = 0;
          if (__nwlog_fault(v462, aBlock, v537))
          {
            if (aBlock[0] == 17)
            {
              __nwlog_obj();
              v463 = objc_claimAutoreleasedReturnValue();
              v464 = aBlock[0];
              if (os_log_type_enabled(v463, (os_log_type_t)aBlock[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_check_proxy_race_report_locked_on_nw_queue";
                _os_log_impl(&dword_182FBE000, v463, v464, "%{public}s called with null connection", buf, 0xCu);
              }
            }
            else if (v537[0])
            {
              v478 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v463 = objc_claimAutoreleasedReturnValue();
              v479 = aBlock[0];
              v480 = os_log_type_enabled(v463, (os_log_type_t)aBlock[0]);
              if (v478)
              {
                if (v480)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_connection_check_proxy_race_report_locked_on_nw_queue";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v478;
                  _os_log_impl(&dword_182FBE000, v463, v479, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v478);
                goto LABEL_828;
              }
              if (v480)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_check_proxy_race_report_locked_on_nw_queue";
                _os_log_impl(&dword_182FBE000, v463, v479, "%{public}s called with null connection, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v463 = objc_claimAutoreleasedReturnValue();
              v494 = aBlock[0];
              if (os_log_type_enabled(v463, (os_log_type_t)aBlock[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_check_proxy_race_report_locked_on_nw_queue";
                _os_log_impl(&dword_182FBE000, v463, v494, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_828:
          if (v462)
            free(v462);
LABEL_331:

          v218 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          v219 = v218;
          if (v218)
          {
            if (nw_path_is_multilayer_packet_logging_enabled(v218))
            {
              *(_QWORD *)aBlock = 0;
              *(_QWORD *)&aBlock[8] = 0;
              if (nw_endpoint_handler_get_flow_id(*(void **)(a1 + 40), aBlock))
              {
                v220 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
                if (v220 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v220 + 104)))
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v221 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
                  {
                    v222 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_connection_endpoint_report_on_nw_queue_block_invoke";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v222;
                    _os_log_impl(&dword_182FBE000, v221, OS_LOG_TYPE_DEFAULT, "%{public}s [C%u] Multilayer packet logging enabled", buf, 0x12u);
                  }

                }
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v223 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v223, OS_LOG_TYPE_DEFAULT))
                {
                  v224 = *(_QWORD *)(a1 + 32);
                  v225 = *(_DWORD *)(v224 + 448);
                  *(_DWORD *)buf = 67110146;
                  *(_DWORD *)&buf[4] = v225;
                  *(_WORD *)&buf[8] = 1042;
                  *(_DWORD *)&buf[10] = 16;
                  *(_WORD *)&buf[14] = 2098;
                  *(_QWORD *)&buf[16] = v224 + 452;
                  *(_WORD *)&buf[24] = 1042;
                  *(_DWORD *)&buf[26] = 16;
                  *(_WORD *)&buf[30] = 2098;
                  *(_QWORD *)v524 = aBlock;
                  _os_log_impl(&dword_182FBE000, v223, OS_LOG_TYPE_DEFAULT, "[C%u %{public,uuid_t}.16P] newly connected endpoint handler with UUID %{public,uuid_t}.16P", buf, 0x28u);
                }

                pthread_once(&nw_mpkl_log_init(void)::init_once, (void (*)(void))nw_mpkl_log_init_once);
                v226 = gMpklLogObj;
                if (os_log_type_enabled((os_log_t)gMpklLogObj, OS_LOG_TYPE_DEFAULT))
                {
                  v227 = *(_QWORD *)(a1 + 32);
                  v228 = v227 + 452;
                  LODWORD(v227) = *(unsigned __int8 *)(v227 + 500);
                  *(_DWORD *)buf = 67110658;
                  *(_DWORD *)&buf[4] = 140;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = 150;
                  *(_WORD *)&buf[14] = 1042;
                  *(_DWORD *)&buf[16] = 16;
                  *(_WORD *)&buf[20] = 2098;
                  *(_QWORD *)&buf[22] = v228;
                  *(_WORD *)&buf[30] = 1042;
                  *(_DWORD *)v524 = 16;
                  *(_WORD *)&v524[4] = 2098;
                  *(_QWORD *)&v524[6] = aBlock;
                  *(_WORD *)&v524[14] = 1024;
                  *(_DWORD *)&v524[16] = v227;
                  _os_log_impl(&dword_182FBE000, v226, OS_LOG_TYPE_DEFAULT, "33 {curProtocol: %hhu, nextProtocol: %hhu, curUUID: %{public}.16P, nextUUID: %{public}.16P, logSeqn: %hhu}", buf, 0x34u);
                }

                ++*(_BYTE *)(*(_QWORD *)(a1 + 32) + 500);
              }
            }
          }
          v229 = *(_QWORD *)(a1 + 32);
          v230 = *(void **)(v229 + 440);
          *(_QWORD *)(v229 + 440) = 0;

          v231 = *(void **)(*(_QWORD *)(a1 + 32) + 432);
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 432) = 0;

          v232 = nw_endpoint_handler_copy_connected_flow_handler(*(void **)(a1 + 40));
          v233 = MEMORY[0x1E0C809B0];
          v521[0] = MEMORY[0x1E0C809B0];
          v521[1] = 3221225472;
          v521[2] = ___ZL41nw_connection_endpoint_report_on_nw_queuePU33objcproto22OS_nw_endpoint_handler8NSObject26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS__block_invoke_215;
          v521[3] = &unk_1E149DC50;
          v522 = *(id *)(a1 + 32);
          nw_endpoint_handler_access_proxy_handler(v232, v521);
          nw_connection_fillout_establishment_report_on_nw_queue(*(void **)(a1 + 32), 1);
          v234 = *(_QWORD *)(a1 + 32);
          if ((*(_BYTE *)(v234 + 108) & 1) == 0)
          {
            v235 = (id *)(id)v234;
            v236 = v235[2];

            if (v236 && nw_parameters_get_ip_protocol(v236) == 6 && nw_parameters_get_multipath(v236))
              nw_connection_enable_stats_report_on_nw_queue(*(void **)(a1 + 32), 2);

            v234 = *(_QWORD *)(a1 + 32);
          }
          v237 = nw_endpoint_handler_copy_current_path(*(void **)(v234 + 144));
          v238 = v237;
          if (v237)
          {
            v239 = v237;
            v240 = v239[93];

            *(_DWORD *)(*(_QWORD *)(a1 + 32) + 284) = v240;
            v241 = *(_QWORD *)(a1 + 32);
            v242 = *(_DWORD *)(v241 + 284);
            v243 = *(_QWORD *)(v241 + 16);
            if (v242)
            {
              if (v243 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v243 + 104)))
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v244 = (id)gconnectionLogObj;
                if (!os_log_type_enabled(v244, OS_LOG_TYPE_INFO))
                  goto LABEL_369;
                v245 = *(_QWORD *)(a1 + 32);
                v246 = *(_DWORD *)(v245 + 448);
                LODWORD(v245) = *(_DWORD *)(v245 + 284);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_connection_endpoint_report_on_nw_queue_block_invoke_2";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v246;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v245;
                v247 = "%{public}s [C%u] Connected fallback generation %u";
                v248 = v244;
                v249 = OS_LOG_TYPE_INFO;
                v250 = 24;
LABEL_368:
                _os_log_impl(&dword_182FBE000, v248, v249, v247, buf, v250);
LABEL_369:

              }
            }
            else if (v243 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v243 + 104)))
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v244 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v244, OS_LOG_TYPE_DEBUG))
                goto LABEL_369;
              v251 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_connection_endpoint_report_on_nw_queue_block_invoke";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v251;
              v247 = "%{public}s [C%u] Connected fallback generation 0";
              v248 = v244;
              v249 = OS_LOG_TYPE_DEBUG;
              v250 = 18;
              goto LABEL_368;
            }
          }
          v252 = *(id *)(a1 + 32);
          v253 = v252;
          if (v252)
          {
            v254 = v252[2];
            if (v254 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v254 + 104)))
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v255 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v255, OS_LOG_TYPE_INFO))
              {
                v256 = *((_DWORD *)v253 + 112);
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_connection_start_candidate_manager_if_needed_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v256;
                _os_log_impl(&dword_182FBE000, v255, OS_LOG_TYPE_INFO, "%{public}s [C%u] Checking whether to start candidate manager", buf, 0x12u);
              }

            }
            if (nw_parameters_get_multipath_service(*((nw_parameters_t *)v253 + 2)))
            {
              v257 = (uint64_t *)*((_QWORD *)v253 + 2);
              if (*((_QWORD *)v253 + 52))
              {
                if (nw_parameters_get_server_mode(v257))
                {
                  v258 = *((_QWORD *)v253 + 2);
                  if (!v258 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v258 + 104)))
                    goto LABEL_440;
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v259 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v259, OS_LOG_TYPE_DEFAULT))
                  {
                    v260 = *((_DWORD *)v253 + 112);
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_connection_start_candidate_manager_if_needed_locked";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v260;
                    _os_log_impl(&dword_182FBE000, v259, OS_LOG_TYPE_DEFAULT, "%{public}s [C%u] Server side, will wait for call to set IDS endpoint", buf, 0x12u);
                  }
                  goto LABEL_401;
                }
                *(_QWORD *)aBlock = 0;
                *(_QWORD *)&aBlock[8] = aBlock;
                *(_QWORD *)&aBlock[16] = 0x3032000000;
                v541 = __Block_byref_object_copy__24122;
                v542 = __Block_byref_object_dispose__24123;
                v543 = 0;
                *(_QWORD *)v537 = 0;
                *(_QWORD *)&v537[8] = v537;
                *(_QWORD *)&v537[16] = 0x3032000000;
                *(_QWORD *)&v537[24] = __Block_byref_object_copy__24122;
                v538 = __Block_byref_object_dispose__24123;
                v539 = 0;
                v264 = *((_QWORD *)v253 + 52);
                *(_QWORD *)buf = v233;
                *(_QWORD *)&buf[8] = 3221225472;
                *(_QWORD *)&buf[16] = ___ZL54nw_connection_start_candidate_manager_if_needed_lockedP24NWConcrete_nw_connection_block_invoke;
                *(_QWORD *)&buf[24] = &unk_1E149DCA0;
                v265 = v253;
                *(_QWORD *)v524 = v265;
                *(_QWORD *)&v524[8] = aBlock;
                *(_QWORD *)&v524[16] = v537;
                nw_establishment_report_enumerate_resolution_reports(v264, buf);
                if ((nw_parameters_get_server_mode(*((void **)v253 + 2)) & 1) == 0)
                {
                  v266 = *((_QWORD *)v253 + 2);
                  if (v266 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v266 + 104)))
                  {
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v267 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
                    {
                      v268 = *((_DWORD *)v265 + 112);
                      *(_DWORD *)v544 = 136446466;
                      v545 = "nw_connection_start_candidate_manager_if_needed_locked";
                      v546 = 1024;
                      v547 = v268;
                      _os_log_impl(&dword_182FBE000, v267, OS_LOG_TYPE_DEFAULT, "%{public}s [C%u] Client side", v544, 0x12u);
                    }

                  }
                  v269 = *(_QWORD *)&aBlock[8];
                  if (!*(_QWORD *)(*(_QWORD *)&aBlock[8] + 40) && *(_QWORD *)(*(_QWORD *)&v537[8] + 40))
                  {
                    v274 = nw_connection_copy_endpoint((nw_connection_t)v265);
                    v275 = *(void **)(*(_QWORD *)&aBlock[8] + 40);
                    *(_QWORD *)(*(_QWORD *)&aBlock[8] + 40) = v274;

                    v276 = *((_QWORD *)v253 + 2);
                    if (v276 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v276 + 104)))
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v277 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v277, OS_LOG_TYPE_DEBUG))
                      {
                        v278 = *((_DWORD *)v265 + 112);
                        v279 = *(NWConcrete_nw_connection **)(*(_QWORD *)&aBlock[8] + 40);
                        *(_DWORD *)v544 = 136446722;
                        v545 = "nw_connection_start_candidate_manager_if_needed_locked";
                        v546 = 1024;
                        v547 = v278;
                        v548 = 2112;
                        v549 = v279;
                        _os_log_impl(&dword_182FBE000, v277, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Trying to use original endpoint %@", v544, 0x1Cu);
                      }

                    }
                    type = nw_endpoint_get_type(*(nw_endpoint_t *)(*(_QWORD *)&aBlock[8] + 40));
                    v269 = *(_QWORD *)&aBlock[8];
                    if (type != nw_endpoint_type_bonjour_service)
                    {
                      v281 = *(void **)(*(_QWORD *)&aBlock[8] + 40);
                      *(_QWORD *)(*(_QWORD *)&aBlock[8] + 40) = 0;

                      v269 = *(_QWORD *)&aBlock[8];
                    }
                  }
                  v270 = (uint64_t *)*((_QWORD *)v253 + 2);
                  if (!*(_QWORD *)(v269 + 40))
                  {
                    if (!v270 || nw_path_parameters_get_logging_disabled(v270[13]))
                      goto LABEL_439;
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v282 = (id)gconnectionLogObj;
                    if (!os_log_type_enabled(v282, OS_LOG_TYPE_DEBUG))
                      goto LABEL_438;
                    v283 = *((_DWORD *)v265 + 112);
                    *(_DWORD *)v544 = 136446466;
                    v545 = "nw_connection_start_candidate_manager_if_needed_locked";
                    v546 = 1024;
                    v547 = v283;
                    v284 = "%{public}s [C%u] No bonjour endpoint in establishment report, cannot start candidate manager";
                    v285 = v282;
                    v286 = OS_LOG_TYPE_DEBUG;
                    goto LABEL_437;
                  }
                  if (nw_parameters_get_stricter_path_scoping(v270))
                  {
                    v271 = nw_candidate_manager_create_with_connection(v265, *(void **)(*(_QWORD *)&aBlock[8] + 40));
                    v272 = (void *)*((_QWORD *)v265 + 7);
                    *((_QWORD *)v265 + 7) = v271;

                    v273 = (void *)*((_QWORD *)v265 + 7);
                    if (v273)
                    {
                      nw_candidate_manager_set_original_path(v273, *(void **)(*(_QWORD *)&v537[8] + 40));
                      nw_candidate_manager_start_client(*((void **)v265 + 7), 0);
                      goto LABEL_439;
                    }
                    v287 = *((_QWORD *)v253 + 2);
                    if (!v287 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v287 + 104)))
                      goto LABEL_439;
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v282 = (id)gconnectionLogObj;
                    if (!os_log_type_enabled(v282, OS_LOG_TYPE_INFO))
                    {
LABEL_438:

                      goto LABEL_439;
                    }
                    v288 = *((_DWORD *)v265 + 112);
                    *(_DWORD *)v544 = 136446466;
                    v545 = "nw_connection_start_candidate_manager_if_needed_locked";
                    v546 = 1024;
                    v547 = v288;
                    v284 = "%{public}s [C%u] Failed to create candidate manager";
                    v285 = v282;
                    v286 = OS_LOG_TYPE_INFO;
LABEL_437:
                    _os_log_impl(&dword_182FBE000, v285, v286, v284, v544, 0x12u);
                    goto LABEL_438;
                  }
                }
LABEL_439:

                _Block_object_dispose(v537, 8);
                _Block_object_dispose(aBlock, 8);

                goto LABEL_440;
              }
              if (!v257 || nw_path_parameters_get_logging_disabled(v257[13]))
                goto LABEL_440;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v259 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v259, OS_LOG_TYPE_ERROR))
              {
                v263 = *((_DWORD *)v253 + 112);
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_connection_start_candidate_manager_if_needed_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v263;
                _os_log_impl(&dword_182FBE000, v259, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Establishment report is not ready, cannot start candidate manager", buf, 0x12u);
              }
            }
            else
            {
              v261 = *((_QWORD *)v253 + 2);
              if (!v261 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v261 + 104)))
                goto LABEL_440;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v259 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v259, OS_LOG_TYPE_DEBUG))
              {
                v262 = *((_DWORD *)v253 + 112);
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_connection_start_candidate_manager_if_needed_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v262;
                _os_log_impl(&dword_182FBE000, v259, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Connection does not support multipath, not starting candidate manager", buf, 0x12u);
              }
            }
LABEL_401:

LABEL_440:
            v114 = *(_QWORD *)(a1 + 32);
            LOBYTE(v115) = *(_BYTE *)(v114 + 109);
            v116 = 1;
            goto LABEL_441;
          }
          __nwlog_obj();
          v465 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_start_candidate_manager_if_needed_locked";
          v466 = (char *)_os_log_send_and_compose_impl();

          aBlock[0] = 16;
          v537[0] = 0;
          if (__nwlog_fault(v466, aBlock, v537))
          {
            if (aBlock[0] == 17)
            {
              __nwlog_obj();
              v467 = objc_claimAutoreleasedReturnValue();
              v468 = aBlock[0];
              if (os_log_type_enabled(v467, (os_log_type_t)aBlock[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_start_candidate_manager_if_needed_locked";
                _os_log_impl(&dword_182FBE000, v467, v468, "%{public}s called with null connection", buf, 0xCu);
              }
            }
            else if (v537[0])
            {
              v481 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v467 = objc_claimAutoreleasedReturnValue();
              v482 = aBlock[0];
              v483 = os_log_type_enabled(v467, (os_log_type_t)aBlock[0]);
              if (v481)
              {
                if (v483)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_connection_start_candidate_manager_if_needed_locked";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v481;
                  _os_log_impl(&dword_182FBE000, v467, v482, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v481);
                goto LABEL_833;
              }
              if (v483)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_start_candidate_manager_if_needed_locked";
                _os_log_impl(&dword_182FBE000, v467, v482, "%{public}s called with null connection, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v467 = objc_claimAutoreleasedReturnValue();
              v495 = aBlock[0];
              if (os_log_type_enabled(v467, (os_log_type_t)aBlock[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_start_candidate_manager_if_needed_locked";
                _os_log_impl(&dword_182FBE000, v467, v495, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_833:
          if (v466)
            free(v466);
          goto LABEL_440;
        }
        __nwlog_obj();
        v449 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_set_event_handlers_on_connected_on_nw_queue";
        v450 = (char *)_os_log_send_and_compose_impl();

        aBlock[0] = 16;
        v537[0] = 0;
        if (__nwlog_fault(v450, aBlock, v537))
        {
          if (aBlock[0] == 17)
          {
            __nwlog_obj();
            v451 = objc_claimAutoreleasedReturnValue();
            v452 = aBlock[0];
            if (os_log_type_enabled(v451, (os_log_type_t)aBlock[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_connection_set_event_handlers_on_connected_on_nw_queue";
              _os_log_impl(&dword_182FBE000, v451, v452, "%{public}s called with null connection", buf, 0xCu);
            }
          }
          else if (v537[0])
          {
            v469 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v451 = objc_claimAutoreleasedReturnValue();
            v470 = aBlock[0];
            v471 = os_log_type_enabled(v451, (os_log_type_t)aBlock[0]);
            if (v469)
            {
              if (v471)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_connection_set_event_handlers_on_connected_on_nw_queue";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v469;
                _os_log_impl(&dword_182FBE000, v451, v470, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v469);
              goto LABEL_813;
            }
            if (v471)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_connection_set_event_handlers_on_connected_on_nw_queue";
              _os_log_impl(&dword_182FBE000, v451, v470, "%{public}s called with null connection, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v451 = objc_claimAutoreleasedReturnValue();
            v491 = aBlock[0];
            if (os_log_type_enabled(v451, (os_log_type_t)aBlock[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_connection_set_event_handlers_on_connected_on_nw_queue";
              _os_log_impl(&dword_182FBE000, v451, v491, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_813:
        if (v450)
          free(v450);
        goto LABEL_234;
      }
    }
  }
LABEL_441:
  if ((v115 & 0x40) == 0)
  {
    v290 = *(_QWORD *)(v114 + 152);
    v289 = (id *)(v114 + 152);
    if (!v290)
    {
      v291 = *(unsigned __int16 **)(a1 + 56);
      if (!v291)
        goto LABEL_582;
      v292 = *v291;
      if (v292 != 3)
        goto LABEL_445;
      if (v291[1] == 5)
      {
        objc_storeStrong(v289, *(id *)(a1 + 40));
        v313 = *(_QWORD *)(a1 + 32);
        if ((*(_BYTE *)(v313 + 108) & 1) == 0)
        {
          v314 = nw_connection_copy_parameters((nw_connection_t)v313);
          v315 = v314;
          if (v314 && nw_parameters_get_ip_protocol(v314) == 6 && nw_parameters_get_multipath(v315))
            nw_connection_enable_stats_report_on_nw_queue(*(void **)(a1 + 32), 2);

        }
      }
    }
  }
  v291 = *(unsigned __int16 **)(a1 + 56);
  if (!v291)
    goto LABEL_582;
  v292 = *v291;
LABEL_445:
  if (v292 == 5 && v291[1] - 3 <= 1)
  {
    v293 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v293 + 109) & 0x40) != 0 || *(_QWORD *)(v293 + 152))
    {
      if (nw_connection_used_fallback_locked((void *)v293))
      {
        v294 = *(_QWORD *)(a1 + 32);
        v295 = 144;
        if ((*(_BYTE *)(v294 + 109) & 0x40) == 0)
          v295 = 152;
        v296 = *(id *)(v294 + v295);
        v297 = v296;
        if (v296)
        {
          v298 = (unsigned int *)v296;
          v299 = v298[29];

          if ((_DWORD)v299 == 2)
          {
            v300 = v298;
            state = v300->state;

            if (state != 5)
            {
              v302 = nw_endpoint_handler_copy_flow(v300);
              if ((*((_BYTE *)v302 + 33) & 0x40) != 0)
                goto LABEL_580;
              v303 = v300;
              v304 = v303->parameters;

              LOBYTE(v303) = nw_parameters_multipath_fallback_allowed(v304);
              if ((v303 & 1) != 0)
                goto LABEL_580;
              v305 = *((_QWORD *)v302 + 114);
              if (!v305)
                goto LABEL_580;
              if (*(_UNKNOWN **)(v305 + 40) == &nw_protocol_ref_counted_handle)
              {
                *(_DWORD *)aBlock = 1;
                if (!setsockopt(*(_DWORD *)(v305 + 292), 0xFFFF, 4373, aBlock, 4u))
                {
                  if ((*(_WORD *)(v305 + 429) & 0x80) != 0)
                    goto LABEL_580;
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v332 = gconnectionLogObj;
                  if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
                    goto LABEL_580;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_socket_mark_fallback";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v305 + 436;
                  v309 = "%{public}s %{public}s Setting SO_MARK_CELLFALLBACK on socket";
                  v310 = v332;
                  v311 = OS_LOG_TYPE_INFO;
                  v312 = 22;
                  goto LABEL_523;
                }
                v306 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v307 = gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_socket_mark_fallback";
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = v305 + 436;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v306;
                  _os_log_impl(&dword_182FBE000, v307, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt SO_MARK_CELLFALLBACK failed %{darwin.errno}d", buf, 0x1Cu);
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v308 = gLogObj;
                if (v306 == 22)
                {
                  if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                  {
LABEL_580:

                    goto LABEL_581;
                  }
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_socket_mark_fallback";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 22;
                  v309 = "%{public}s setsockopt SO_MARK_CELLFALLBACK failed %{darwin.errno}d";
                  v310 = v308;
                  v311 = OS_LOG_TYPE_ERROR;
                  v312 = 18;
LABEL_523:
                  _os_log_impl(&dword_182FBE000, v310, v311, v309, buf, v312);
                  goto LABEL_580;
                }
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_socket_mark_fallback";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v306;
                v333 = (char *)_os_log_send_and_compose_impl();
                v537[0] = 16;
                v544[0] = 0;
                if (!__nwlog_fault(v333, v537, v544))
                  goto LABEL_578;
                if (v537[0] == 17)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v334 = gLogObj;
                  v335 = v537[0];
                  if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v537[0]))
                    goto LABEL_578;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_socket_mark_fallback";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v306;
                  v336 = "%{public}s setsockopt SO_MARK_CELLFALLBACK failed %{darwin.errno}d";
                  goto LABEL_576;
                }
                if (!v544[0])
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v334 = gLogObj;
                  v335 = v537[0];
                  if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v537[0]))
                    goto LABEL_578;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_socket_mark_fallback";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v306;
                  v336 = "%{public}s setsockopt SO_MARK_CELLFALLBACK failed %{darwin.errno}d, backtrace limit exceeded";
                  goto LABEL_576;
                }
                v344 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v334 = gLogObj;
                v335 = v537[0];
                v345 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v537[0]);
                if (v344)
                {
                  if (v345)
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_socket_mark_fallback";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v306;
                    *(_WORD *)&buf[18] = 2082;
                    *(_QWORD *)&buf[20] = v344;
                    _os_log_impl(&dword_182FBE000, v334, v335, "%{public}s setsockopt SO_MARK_CELLFALLBACK failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
                  }
                  free(v344);
                  if (!v333)
                    goto LABEL_580;
                  goto LABEL_579;
                }
                if (v345)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_socket_mark_fallback";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v306;
                  v336 = "%{public}s setsockopt SO_MARK_CELLFALLBACK failed %{darwin.errno}d, no backtrace";
LABEL_576:
                  v354 = v334;
                  v355 = v335;
                  v356 = 18;
LABEL_577:
                  _os_log_impl(&dword_182FBE000, v354, v355, v336, buf, v356);
                }
LABEL_578:
                if (!v333)
                  goto LABEL_580;
LABEL_579:
                free(v333);
                goto LABEL_580;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_socket_mark_fallback";
              v333 = (char *)_os_log_send_and_compose_impl();
              aBlock[0] = 16;
              v537[0] = 0;
              if (!__nwlog_fault(v333, aBlock, v537))
                goto LABEL_578;
              if (aBlock[0] == 17)
              {
                v508 = __nwlog_obj();
                v509 = aBlock[0];
                if (!os_log_type_enabled(v508, (os_log_type_t)aBlock[0]))
                  goto LABEL_578;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_socket_mark_fallback";
                v336 = "%{public}s called with null socket_handler";
              }
              else if (v537[0])
              {
                v510 = (char *)__nw_create_backtrace_string();
                v508 = __nwlog_obj();
                v509 = aBlock[0];
                v511 = os_log_type_enabled(v508, (os_log_type_t)aBlock[0]);
                if (v510)
                {
                  if (v511)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_socket_mark_fallback";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v510;
                    _os_log_impl(&dword_182FBE000, v508, v509, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v510);
                  goto LABEL_578;
                }
                if (!v511)
                  goto LABEL_578;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_socket_mark_fallback";
                v336 = "%{public}s called with null socket_handler, no backtrace";
              }
              else
              {
                v508 = __nwlog_obj();
                v509 = aBlock[0];
                if (!os_log_type_enabled(v508, (os_log_type_t)aBlock[0]))
                  goto LABEL_578;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_socket_mark_fallback";
                v336 = "%{public}s called with null socket_handler, backtrace limit exceeded";
              }
              v354 = v508;
              v355 = v509;
              v356 = 12;
              goto LABEL_577;
            }
LABEL_581:

            goto LABEL_582;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v316 = (id)gLogObj;
          if (v299 > 5)
            v317 = "unknown-mode";
          else
            v317 = off_1E149FC18[v299];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_mark_fallback";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v317;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = "flow";
          v318 = (char *)_os_log_send_and_compose_impl();

          aBlock[0] = 16;
          v537[0] = 0;
          if (!__nwlog_fault(v318, aBlock, v537))
            goto LABEL_516;
          if (aBlock[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v319 = (id)gLogObj;
            v320 = aBlock[0];
            if (os_log_type_enabled(v319, (os_log_type_t)aBlock[0]))
            {
              if (v299 > 5)
                v321 = "unknown-mode";
              else
                v321 = off_1E149FC18[v299];
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_endpoint_handler_mark_fallback";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v321;
              *(_WORD *)&buf[22] = 2082;
              *(_QWORD *)&buf[24] = "flow";
              _os_log_impl(&dword_182FBE000, v319, v320, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
            }
          }
          else if (v537[0])
          {
            v322 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v319 = (id)gLogObj;
            v323 = aBlock[0];
            v324 = os_log_type_enabled(v319, (os_log_type_t)aBlock[0]);
            if (v322)
            {
              if (v324)
              {
                if (v299 > 5)
                  v325 = "unknown-mode";
                else
                  v325 = off_1E149FC18[v299];
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_endpoint_handler_mark_fallback";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v325;
                *(_WORD *)&buf[22] = 2082;
                *(_QWORD *)&buf[24] = "flow";
                *(_WORD *)v524 = 2082;
                *(_QWORD *)&v524[2] = v322;
                _os_log_impl(&dword_182FBE000, v319, v323, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
              }

              free(v322);
              if (!v318)
                goto LABEL_581;
              goto LABEL_517;
            }
            if (v324)
            {
              if (v299 > 5)
                v328 = "unknown-mode";
              else
                v328 = off_1E149FC18[v299];
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_endpoint_handler_mark_fallback";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v328;
              *(_WORD *)&buf[22] = 2082;
              *(_QWORD *)&buf[24] = "flow";
              _os_log_impl(&dword_182FBE000, v319, v323, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v319 = (id)gLogObj;
            v326 = aBlock[0];
            if (os_log_type_enabled(v319, (os_log_type_t)aBlock[0]))
            {
              if (v299 > 5)
                v327 = "unknown-mode";
              else
                v327 = off_1E149FC18[v299];
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_endpoint_handler_mark_fallback";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v327;
              *(_WORD *)&buf[22] = 2082;
              *(_QWORD *)&buf[24] = "flow";
              _os_log_impl(&dword_182FBE000, v319, v326, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
            }
          }
          goto LABEL_515;
        }
        __nwlog_obj();
        v484 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_mark_fallback";
        v318 = (char *)_os_log_send_and_compose_impl();

        aBlock[0] = 16;
        v537[0] = 0;
        if (__nwlog_fault(v318, aBlock, v537))
        {
          if (aBlock[0] == 17)
          {
            __nwlog_obj();
            v319 = objc_claimAutoreleasedReturnValue();
            v485 = aBlock[0];
            if (os_log_type_enabled(v319, (os_log_type_t)aBlock[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_endpoint_handler_mark_fallback";
              _os_log_impl(&dword_182FBE000, v319, v485, "%{public}s called with null handler", buf, 0xCu);
            }
LABEL_515:

            goto LABEL_516;
          }
          if (!v537[0])
          {
            __nwlog_obj();
            v319 = objc_claimAutoreleasedReturnValue();
            v499 = aBlock[0];
            if (os_log_type_enabled(v319, (os_log_type_t)aBlock[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_endpoint_handler_mark_fallback";
              _os_log_impl(&dword_182FBE000, v319, v499, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_515;
          }
          v486 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v319 = objc_claimAutoreleasedReturnValue();
          v487 = aBlock[0];
          v488 = os_log_type_enabled(v319, (os_log_type_t)aBlock[0]);
          if (!v486)
          {
            if (v488)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_endpoint_handler_mark_fallback";
              _os_log_impl(&dword_182FBE000, v319, v487, "%{public}s called with null handler, no backtrace", buf, 0xCu);
            }
            goto LABEL_515;
          }
          if (v488)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_mark_fallback";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v486;
            _os_log_impl(&dword_182FBE000, v319, v487, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v486);
        }
LABEL_516:
        if (!v318)
          goto LABEL_581;
LABEL_517:
        free(v318);
        goto LABEL_581;
      }
    }
  }
LABEL_582:
  v357 = *(_DWORD *)(a1 + 64);
  v358 = *(_DWORD *)(a1 + 68);
  v359 = *(_WORD **)(a1 + 56);
  if (v358 == 1 && v357 == 4 && v359 && *v359 == 2 && v359[1] == 2)
  {
    v360 = *(void **)(a1 + 48);
    if (v360)
    {
      v361 = v360;
      v362 = v361[3];

      if (v362 != -65554)
      {
        v363 = *(void **)(a1 + 32);
        v364 = *(void **)(a1 + 40);
        error_code = nw_error_get_error_code(*(nw_error_t *)(a1 + 48));
        nw_connection_report_symptom_on_nw_queue(v363, 421894, v364, error_code);
      }
    }
    v366 = *(void **)(a1 + 40);
    if (v366)
      goto LABEL_591;
    goto LABEL_639;
  }
  v367 = (void **)*(id *)(a1 + 32);
  v368 = v367;
  if (v367)
  {
    nw_context_assert_queue(v367[3]);
    if (v358 == 2
      && v357 == 4
      && v359
      && *v359 == 3
      && v359[1] == 7
      && ((nw_parameters_get_tls(v368[2]) & 1) != 0
       || (*((_BYTE *)v368 + 109) & 0x40) != 0 && nw_endpoint_handler_stack_uses_tls(v368[18])))
    {
      v369 = v368;
      nw_context_assert_queue(v368[3]);
      v370 = *((unsigned __int16 *)v369 + 161);
      if (*((_WORD *)v369 + 161))
      {
        v371 = (char *)v369[39] + 10;
        while (*(v371 - 1) != 3 || *v371 != 5)
        {
          v371 += 8;
          if (!--v370)
            goto LABEL_609;
        }

        v373 = *(void **)(a1 + 32);
        v372 = *(void **)(a1 + 40);
        v374 = *(void **)(a1 + 48);
        if (v374)
        {
          v375 = v374;
          v376 = v375[3];

        }
        else
        {
          v376 = 0;
        }
        nw_connection_report_symptom_on_nw_queue(v373, 421893, v372, v376);
        goto LABEL_639;
      }
LABEL_609:

    }
    goto LABEL_610;
  }
  __nwlog_obj();
  v441 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_event_is_tls_failure_on_nw_queue";
  v442 = (char *)_os_log_send_and_compose_impl();

  aBlock[0] = 16;
  v537[0] = 0;
  if (__nwlog_fault(v442, aBlock, v537))
  {
    if (aBlock[0] == 17)
    {
      __nwlog_obj();
      v443 = objc_claimAutoreleasedReturnValue();
      v444 = aBlock[0];
      if (os_log_type_enabled(v443, (os_log_type_t)aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_event_is_tls_failure_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v443, v444, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v537[0])
    {
      v445 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v443 = objc_claimAutoreleasedReturnValue();
      v446 = aBlock[0];
      v447 = os_log_type_enabled(v443, (os_log_type_t)aBlock[0]);
      if (v445)
      {
        if (v447)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_event_is_tls_failure_on_nw_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v445;
          _os_log_impl(&dword_182FBE000, v443, v446, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v445);
        goto LABEL_753;
      }
      if (v447)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_event_is_tls_failure_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v443, v446, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v443 = objc_claimAutoreleasedReturnValue();
      v448 = aBlock[0];
      if (os_log_type_enabled(v443, (os_log_type_t)aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_event_is_tls_failure_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v443, v448, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_753:
  if (v442)
    free(v442);
LABEL_610:

  v377 = *(_WORD **)(a1 + 56);
  v378 = (void **)*(id *)(a1 + 32);
  v379 = v378;
  if (v377 && *v377 == 5 && v377[1] == 5 && (nw_parameters_get_tls(v378[2]) & 1) != 0)
  {

    v381 = *(void **)(a1 + 32);
    v380 = *(void **)(a1 + 40);
    v382 = *(void **)(a1 + 48);
    if (v382)
    {
      v383 = v382;
      v384 = v383[3];

    }
    else
    {
      v384 = 0;
    }
    nw_connection_report_symptom_on_nw_queue(v381, 421895, v380, v384);
    nw_connection_enable_stats_report_on_nw_queue(*(void **)(a1 + 32), 5);
  }
  else
  {

    v385 = *(_DWORD *)(a1 + 64);
    v386 = *(_DWORD *)(a1 + 68);
    v387 = *(_WORD **)(a1 + 56);
    if (v386 == 2 && v385 == 4 && v387)
    {
      if (*v387 == 3 && v387[1] == 7)
      {
        v389 = *(void **)(a1 + 32);
        v388 = *(void **)(a1 + 40);
        v390 = *(void **)(a1 + 48);
        if (v390)
        {
          v391 = v390;
          v392 = v391[3];

        }
        else
        {
          v392 = 0;
        }
        nw_connection_report_symptom_on_nw_queue(v389, 421904, v388, v392);
      }
    }
    else if (v386 == 3 && v385 == 4 && v387 && *v387 == 4 && v387[1] == 5)
    {
      v393 = *(void **)(a1 + 32);
      v394 = *(void **)(a1 + 40);
      v395 = *(NSObject **)(a1 + 48);
      v396 = v395 ? nw_error_get_error_code(v395) : 0;
      nw_connection_report_symptom_on_nw_queue(v393, 421902, v394, v396);
      v366 = *(void **)(a1 + 40);
      if (v366)
LABEL_591:
        nw_connection_fillout_failed_resolution_report_on_nw_queue(*(void **)(a1 + 32), v366);
    }
  }
LABEL_639:
  if (*(_DWORD *)(a1 + 64) == 4 && (v397 = *(_WORD **)(a1 + 56)) != 0 && *v397 == 1 && v397[1] == 9)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 110) |= 1u;
  }
  else
  {
    v398 = *(void **)(a1 + 40);
    if (v398)
    {
      v399 = *(void **)(a1 + 32);
      v400 = nw_endpoint_handler_copy_endpoint(v398);
      v401 = v399;
      v402 = v400;
      v403 = v402;
      if (v402)
      {
        if (v402[11].isa)
        {
          if ((*((_BYTE *)v401 + 110) & 4) == 0)
          {
            v404 = v402;
            v405 = (HIBYTE(v404[28].isa) & 0x40) == 0;

            if (v405
              && nw_parameters_get_attribution(*((nw_parameters_t *)v401 + 2)) == nw_parameters_attribution_developer
              && ne_tracker_should_save_stacktrace())
            {
              v406 = *((_BYTE *)v401 + 110);
              *((_BYTE *)v401 + 110) = v406 | 4;
              v407 = *((_QWORD *)v401 + 11);
              if (v407)
              {
                *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                *(_QWORD *)&buf[8] = 3221225472;
                *(_QWORD *)&buf[16] = ___ZL49nw_connection_check_for_unlisted_tracker_on_queueP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObject_block_invoke;
                *(_QWORD *)&buf[24] = &unk_1E149DCC8;
                *(_QWORD *)v524 = v404;
                dispatch_data_apply(v407, buf);

              }
              else
              {
                *((_BYTE *)v401 + 110) = v406 | 6;
              }
            }
          }
        }
      }

    }
  }
  if (!v116)
  {
    v410 = *(_DWORD *)(a1 + 64);
    v411 = *(_QWORD *)(a1 + 32);
    if (v410 != 5)
      goto LABEL_671;
LABEL_670:
    nw_connection_set_state_on_nw_queue((NWConcrete_nw_connection *)v411, 5u);
    goto LABEL_687;
  }
  v408 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v408 + 176) && !nw_endpoint_handler_uses_multipath(*(void **)(v408 + 144)))
  {
    v409 = *(_WORD **)(a1 + 56);
    if (v409)
    {
      if (*v409 == 1 && v409[1] == 5)
        nw_connection_start_dry_run_on_nw_queue(*(NWConcrete_nw_connection **)(a1 + 32));
    }
  }
  v410 = *(_DWORD *)(a1 + 64);
  v411 = *(_QWORD *)(a1 + 32);
  if (v410 == 5)
    goto LABEL_670;
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(v411 + 144))
  {
    v412 = *(_WORD **)(a1 + 56);
    if (v412 && *v412 == 3 && v412[1] == 8)
    {
      nw_connection_update_better_path_locked_on_nw_queue((NWConcrete_nw_connection *)v411);
      v413 = *(NWConcrete_nw_connection **)(a1 + 32);
      is_viable = nw_endpoint_handler_is_viable(*(void **)(a1 + 40));
      nw_connection_send_viability_changed_on_nw_queue(v413, is_viable);
      v411 = *(_QWORD *)(a1 + 32);
      v410 = *(_DWORD *)(a1 + 64);
    }
    goto LABEL_686;
  }
LABEL_671:
  if ((*(_BYTE *)(v411 + 109) & 0x40) == 0)
  {
    v415 = *(_QWORD *)(v411 + 144);
    if (*(_QWORD *)(a1 + 40) == v415)
    {
      if (v415)
      {
        if (v410 != 1
          || (v416 = *(_WORD **)(a1 + 56)) == 0
          || *v416 != 1
          || (v417 = (unsigned __int16)v416[1], v417 != 5) && v417 != 3)
        {
LABEL_686:
          nw_connection_set_state_on_nw_queue((NWConcrete_nw_connection *)v411, v410);
          goto LABEL_687;
        }
        minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 40));
        logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40));
        if (!minimize_logging)
        {
          if ((logging_disabled & 1) != 0)
            goto LABEL_687;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v420 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v420, OS_LOG_TYPE_INFO))
          {
            v421 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
            v422 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
            v423 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
            v424 = nw_endpoint_get_logging_description(v423);
            v425 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
            v426 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
            v427 = (char *)nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_connection_endpoint_report_on_nw_queue_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v421;
            *(_WORD *)&buf[22] = 2082;
            *(_QWORD *)&buf[24] = v422;
            *(_WORD *)v524 = 2082;
            *(_QWORD *)&v524[2] = v424;
            *(_WORD *)&v524[10] = 2082;
            *(_QWORD *)&v524[12] = v425;
            *(_WORD *)&v524[20] = 2082;
            *(_QWORD *)&v524[22] = v426;
            v525 = 2114;
            v526 = v427;
            _os_log_impl(&dword_182FBE000, v420, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] skipping state update", buf, 0x48u);

          }
          goto LABEL_685;
        }
        if ((logging_disabled & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v420 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v420, OS_LOG_TYPE_DEBUG))
          {
            v500 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
            v501 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
            v502 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
            v503 = nw_endpoint_get_logging_description(v502);
            v504 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
            v505 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
            v506 = (char *)nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_connection_endpoint_report_on_nw_queue_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v500;
            *(_WORD *)&buf[22] = 2082;
            *(_QWORD *)&buf[24] = v501;
            *(_WORD *)v524 = 2082;
            *(_QWORD *)&v524[2] = v503;
            *(_WORD *)&v524[10] = 2082;
            *(_QWORD *)&v524[12] = v504;
            *(_WORD *)&v524[20] = 2082;
            *(_QWORD *)&v524[22] = v505;
            v525 = 2114;
            v526 = v506;
            _os_log_impl(&dword_182FBE000, v420, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] skipping state update", buf, 0x48u);

          }
LABEL_685:

        }
      }
    }
  }
LABEL_687:
  v429 = *(_QWORD *)(a1 + 32);
  v428 = *(void **)(a1 + 40);
  v430 = *(void **)(v429 + 144);
  if (v428 == v430)
  {
    if ((*(_BYTE *)(v429 + 109) & 0x40) != 0
      && (v431 = *(_WORD **)(a1 + 56)) != 0
      && *v431 == 1
      && (v432 = (unsigned __int16)v431[1], v432 <= 6)
      && ((1 << v432) & 0x68) != 0)
    {
      v433 = (id)v429;
      nw_context_assert_queue(*((void **)v433 + 3));
      v434 = (unsigned __int8 *)*((_QWORD *)v433 + 53);
      if (v434)
        nw_array_apply(v434, (uint64_t)&__block_literal_global_229);

      v429 = *(_QWORD *)(a1 + 32);
      v428 = *(void **)(a1 + 40);
      v430 = *(void **)(v429 + 144);
    }
    else
    {
      v430 = *(void **)(a1 + 40);
    }
  }
  if (v428 == v430 && v430)
  {
    v435 = *(_WORD **)(a1 + 56);
    if (v435 && *v435 == 1 && (v436 = (unsigned __int16)v435[1], v436 <= 6) && ((1 << v436) & 0x68) != 0)
    {
      v437 = v430;
      os_unfair_lock_lock((os_unfair_lock_t)v437 + 28);
      v438 = *((id *)v437 + 8);
      os_unfair_lock_unlock((os_unfair_lock_t)v437 + 28);

      nw_connection_send_path_changed_on_nw_queue((void *)v429, v438);
      v429 = *(_QWORD *)(a1 + 32);
      v428 = *(void **)(a1 + 40);
      v430 = *(void **)(v429 + 144);
    }
    else
    {
      v428 = v430;
    }
  }
  if (v428 == v430)
  {
    if (v430)
    {
      v439 = *(_WORD **)(a1 + 56);
      if (v439)
      {
        if (*v439 == 1 && v439[1] == 10)
        {
          v440 = (void *)nw_endpoint_handler_copy_connected_path(v430);
          nw_connection_send_path_changed_on_nw_queue((void *)v429, v440);

        }
      }
    }
  }
}

void sub_1835B1574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL62nw_connection_take_initial_data_transfer_snapshots_on_nw_queueP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  nw_connection_initial_data_transfer_report_snapshot_on_nw_queue(*(void **)(a1 + 32), a3);
  return 1;
}

BOOL ___ZL51nw_connection_run_sec_experiment_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *experimental_probe;
  uint64_t v7;
  NSObject *v8;
  int v9;
  _BOOL8 v10;
  void *v11;
  NSObject *v12;
  int v13;
  _QWORD v15[4];
  NSObject *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  experimental_probe = nw_connection_create_experimental_probe(*(void **)(a1 + 32), v5, a2);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (experimental_probe)
  {
    if (v7 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v7 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        *(_DWORD *)buf = 136446722;
        v18 = "nw_connection_run_sec_experiment_locked_on_nw_queue_block_invoke";
        v19 = 1024;
        v20 = v9;
        v21 = 2082;
        v22 = a2;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection started for experiment %{public}s", buf, 0x1Cu);
      }

    }
    v10 = nw_queue_copy_current_workloop();
    nw_connection_set_queue(experimental_probe, (dispatch_queue_t)v10);

    nw_connection_add_probe(*(void **)(a1 + 32), experimental_probe);
    v11 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = ___ZL51nw_connection_run_sec_experiment_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke_218;
    v15[3] = &unk_1E14ACFD0;
    v16 = experimental_probe;
    nw_queue_context_async(v11, v15);
    v12 = v16;
LABEL_16:

    goto LABEL_17;
  }
  if (v7 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v7 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v12 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446722;
      v18 = "nw_connection_run_sec_experiment_locked_on_nw_queue_block_invoke_2";
      v19 = 1024;
      v20 = v13;
      v21 = 2082;
      v22 = a2;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection skipped for experiment %{public}s: nw_connection_create_experimental_probe returned nil connection", buf, 0x1Cu);
    }
    goto LABEL_16;
  }
LABEL_17:

  return experimental_probe != 0;
}

void sub_1835B1B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL51nw_connection_run_sec_experiment_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke_221(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v2 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v2 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v5 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      v7 = 136446722;
      v8 = "nw_connection_run_sec_experiment_locked_on_nw_queue_block_invoke";
      v9 = 1024;
      v10 = v6;
      v11 = 2082;
      v12 = a2;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection skipped for experiment %{public}s", (uint8_t *)&v7, 0x1Cu);
    }

  }
}

id nw_connection_copy_protocol_metadata_locked(uint64_t a1, void *a2, int a3, int a4)
{
  id v7;
  id v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  if (a1)
  {
    v8 = nw_endpoint_handler_copy_protocol_metadata(*(void **)(a1 + 144), v7, a3, a4);
    goto LABEL_3;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_connection_copy_protocol_metadata_locked";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_connection_copy_protocol_metadata_locked";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_connection_copy_protocol_metadata_locked";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_connection_copy_protocol_metadata_locked";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_connection_copy_protocol_metadata_locked";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v11)
    free(v11);
  v8 = 0;
LABEL_3:

  return v8;
}

void sub_1835B1F64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL46nw_connection_run_ech_probe_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NWConcrete_nw_protocol_options *v5;
  id v6;

  v3 = a2;
  v6 = v3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v4 = *(void **)(a1 + 32);
    v5 = nw_protocol_options_copy(v3);
    nw_protocol_stack_append_application_protocol(v4, v5);

  }
  else if (nw_protocol_options_is_tls(v3))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    nw_protocol_stack_append_application_protocol(*(void **)(a1 + 32), *(void **)(a1 + 40));
  }

}

void sub_1835B1FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZL46nw_connection_run_ech_probe_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke_225(uint64_t a1)
{
  nw_connection_start(*(nw_connection_t *)(a1 + 32));
}

void ___ZL41nw_connection_endpoint_report_on_nw_queuePU33objcproto22OS_nw_endpoint_handler8NSObject26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS__block_invoke_215(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 504) = nw_endpoint_handler_get_proxy_privacy_stance(v3);

}

nw_parameters_t nw_connection_copy_parameters(nw_connection_t connection)
{
  nw_connection_t v1;
  nw_connection_t v2;
  NSObject *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = connection;
  v2 = v1;
  if (v1)
  {
    v3 = v1[2].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_connection_copy_parameters";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_connection_copy_parameters";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t ___ZL54nw_connection_start_candidate_manager_if_needed_lockedP24NWConcrete_nw_connection_block_invoke(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  nw_endpoint_type_t type;
  uint64_t v9;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  NSObject *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = nw_resolution_report_copy_successful_endpoint(v3);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      v11 = 136446722;
      v12 = "nw_connection_start_candidate_manager_if_needed_locked_block_invoke";
      v13 = 1024;
      v14 = v7;
      v15 = 2112;
      v16 = v4;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Found endpoint %@", (uint8_t *)&v11, 0x1Cu);
    }

  }
  type = nw_endpoint_get_type(v4);
  if (type == nw_endpoint_type_address)
  {
    v9 = a1 + 48;
    goto LABEL_12;
  }
  if (type == nw_endpoint_type_bonjour_service)
  {
    v9 = a1 + 40;
LABEL_12:
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)v9 + 8) + 40), v4);
  }

  return 1;
}

void sub_1835B2460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL49nw_connection_check_for_unlisted_tracker_on_queueP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObject_block_invoke()
{
  ne_tracker_create_xcode_issue();
  return 0;
}

void nw_connection_start_dry_run_on_nw_queue(NWConcrete_nw_connection *a1)
{
  NWConcrete_nw_connection *v1;
  NWConcrete_nw_connection *v2;
  uint64_t *parameters;
  NSObject *v4;
  unsigned int top_id;
  uint64_t *v6;
  _BOOL8 v7;
  id *inner;
  OS_nw_endpoint_handler *dry_run_endpoint_handler;
  OS_nw_parameters *v10;
  NSObject *v11;
  unsigned int v12;
  const char *id_string;
  OS_nw_context *context;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _QWORD v23[4];
  NWConcrete_nw_connection *v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  _WORD v30[17];

  *(_QWORD *)&v30[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1->context);
    parameters = (uint64_t *)v2->parameters;
    if (v2->dry_run_endpoint_handler)
    {
      if (parameters && !nw_path_parameters_get_logging_disabled(parameters[13]))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v4 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          top_id = v2->top_id;
          *(_DWORD *)buf = 136446466;
          v28 = "nw_connection_start_dry_run_on_nw_queue";
          v29 = 1024;
          *(_DWORD *)v30 = top_id;
          _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Dry run endpoint handler already started", buf, 0x12u);
        }

      }
    }
    else
    {
      v6 = parameters;
      v7 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v6, 0, 0);

      nw_parameters_set_dry_run((void *)v7, 1u);
      nw_parameters_set_indefinite((void *)v7, 1);
      inner = nw_endpoint_handler_create_inner(v2->endpoint, (void *)v7, nw_connection_endpoint_report_dry_run_on_nw_queue, v2, 0, 0, 1);
      dry_run_endpoint_handler = v2->dry_run_endpoint_handler;
      v2->dry_run_endpoint_handler = (OS_nw_endpoint_handler *)inner;

      v10 = v2->parameters;
      if (v10 && !nw_path_parameters_get_logging_disabled(*((_QWORD *)v10 + 13)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v11 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          v12 = v2->top_id;
          id_string = nw_endpoint_handler_get_id_string(v2->dry_run_endpoint_handler);
          *(_DWORD *)buf = 136446722;
          v28 = "nw_connection_start_dry_run_on_nw_queue";
          v29 = 1024;
          *(_DWORD *)v30 = v12;
          v30[2] = 2082;
          *(_QWORD *)&v30[3] = id_string;
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s [C%u] Starting dry-run endpoint handler [C%{public}s] to check for a better path", buf, 0x1Cu);
        }

      }
      context = v2->context;
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = ___ZL39nw_connection_start_dry_run_on_nw_queueP24NWConcrete_nw_connection_block_invoke;
      v23[3] = &unk_1E14ACFD0;
      v24 = v2;
      nw_queue_context_async(context, v23);

    }
    goto LABEL_18;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_connection_start_dry_run_on_nw_queue";
  v16 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (__nwlog_fault(v16, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_connection_start_dry_run_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_connection_start_dry_run_on_nw_queue";
          v29 = 2082;
          *(_QWORD *)v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_connection_start_dry_run_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_connection_start_dry_run_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_35:
  if (v16)
    free(v16);
LABEL_18:

}

void sub_1835B2970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void nw_connection_set_state_on_nw_queue(NWConcrete_nw_connection *a1, unsigned int a2)
{
  NWConcrete_nw_connection *v3;
  NWConcrete_nw_connection *v4;
  int state;
  NWConcrete_nw_connection *v7;
  OS_nw_array *data_transfer_reports;
  OS_nw_array *v9;
  OS_nw_array *v10;
  void **v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    nw_context_assert_queue(v3->context);
    state = v4->state;
    if (state != a2 && state != 5)
    {
      v4->state = a2;
      if (a2 == 4)
      {
        v7 = v4;
        nw_context_assert_queue(v4->context);
        data_transfer_reports = v7->data_transfer_reports;
        if (data_transfer_reports)
        {
          v9 = (OS_nw_array *)nw_array_create();
          if (v9 != data_transfer_reports)
          {
            v10 = v9;
            std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>((uint64_t)&v9[2], (void **)data_transfer_reports[2].super.super.isa, (void **)data_transfer_reports[3].super.super.isa, (data_transfer_reports[3].super.super.isa - data_transfer_reports[2].super.super.isa) >> 3);
            data_transfer_reports = v10;
          }
          nw_array_apply((unsigned __int8 *)data_transfer_reports, (uint64_t)&__block_literal_global_228);

        }
      }
      v11 = v4;
      nw_context_assert_queue(v4->context);
      nw_connection_report_state_with_handler_on_nw_queue(v11, a2, v11[26], v11[25]);

    }
    goto LABEL_13;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_connection_set_state_on_nw_queue";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_set_state_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_connection_set_state_on_nw_queue";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_set_state_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_set_state_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_30:
  if (v13)
    free(v13);
LABEL_13:

}

void sub_1835B2CD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_connection_update_better_path_locked_on_nw_queue(NWConcrete_nw_connection *a1)
{
  NWConcrete_nw_connection *v1;
  NWConcrete_nw_connection *v2;
  OS_nw_endpoint_handler *v3;
  NWConcrete_nw_endpoint_handler *v4;
  OS_nw_endpoint_handler *v5;
  NWConcrete_nw_endpoint_handler *v6;
  OS_nw_endpoint_handler *v7;
  id v8;
  OS_nw_parameters *parameters;
  NSObject *v10;
  unsigned int top_id;
  netcore_stats_tcp_report *stats_report;
  char v13;
  int v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int alternate_path_state;
  OS_nw_parameters *v21;
  NSObject *v22;
  unsigned int v23;
  const char *v24;
  OS_nw_parameters *v25;
  unsigned int v26;
  OS_nw_parameters *v27;
  unsigned int v28;
  NWConcrete_nw_connection *v29;
  id better_path_available_handler;
  void *v31;
  dispatch_qos_class_t v32;
  id v33;
  NWConcrete_nw_connection *v34;
  id alternate_path_state_handler;
  void *v36;
  dispatch_qos_class_t client_qos_class;
  id v38;
  void *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  char *backtrace_string;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  char v47;
  os_log_type_t type;
  _BYTE buf[24];
  void *v50;
  id v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1->context);
    v3 = v2->parent_endpoint_handler;
    if ((*((_BYTE *)v2 + 109) & 0x40) != 0)
      v4 = nw_endpoint_handler_copy_connected_flow_handler(v2->parent_endpoint_handler);
    else
      v4 = 0;
    v5 = v2->ready_dry_run_endpoint_handler;
    if (v5 || (v6 = v4, v3, v5 = v6, (v3 = v5) != 0))
    {
      v7 = v5;
      os_unfair_lock_lock((os_unfair_lock_t)v7 + 28);
      v8 = *((id *)v7 + 8);
      os_unfair_lock_unlock((os_unfair_lock_t)v7 + 28);

      if (!v4)
        goto LABEL_21;
      if (nw_endpoint_handler_get_alternate_path_state(v4, v3, v7, v8))
      {
        if (v2->alternate_path_state != 1)
        {
          v2->alternate_path_state = 1;
          parameters = v2->parameters;
          if (parameters && !nw_path_parameters_get_logging_disabled(*((_QWORD *)parameters + 13)))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v10 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              top_id = v2->top_id;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_connection_update_better_path_locked_on_nw_queue";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = top_id;
              _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s [C%u] Better alternate path available", buf, 0x12u);
            }

          }
          stats_report = v2->stats_report;
          if (stats_report)
            ++stats_report->u.legacy.statistics_report.better_route_event_count;
          v13 = 1;
          v14 = 1;
          goto LABEL_54;
        }
LABEL_62:

        goto LABEL_63;
      }
      if ((nw_connection_used_fallback_locked(v2) & 1) == 0)
      {
        v15 = nw_endpoint_handler_copy_current_path(v2->parent_endpoint_handler);
        v16 = v15;
        if (v15
          && (v17 = v15[14]) != 0
          && *(_DWORD *)(v17 + 8)
          && (v18 = v15, v19 = v18[93], v18, v19 != v2->connected_fallback_generation))
        {
          if (nw_path_fallback_is_weak(v18))
            v14 = 2;
          else
            v14 = 3;
        }
        else
        {
          v14 = 0;
        }

      }
      else
      {
LABEL_21:
        v14 = 0;
      }
    }
    else
    {
      v8 = 0;
      v7 = 0;
      v14 = 0;
    }
    alternate_path_state = v2->alternate_path_state;
    if (alternate_path_state == v14)
      goto LABEL_62;
    v2->alternate_path_state = v14;
    if (v14 == 3)
    {
      v25 = v2->parameters;
      if (!v25 || nw_path_parameters_get_logging_disabled(*((_QWORD *)v25 + 13)))
        goto LABEL_52;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v22 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        goto LABEL_51;
      v26 = v2->top_id;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_update_better_path_locked_on_nw_queue";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v26;
      v24 = "%{public}s [C%u] Alternate path recommended";
    }
    else if (v14 == 2)
    {
      v27 = v2->parameters;
      if (!v27 || nw_path_parameters_get_logging_disabled(*((_QWORD *)v27 + 13)))
        goto LABEL_52;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v22 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        goto LABEL_51;
      v28 = v2->top_id;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_update_better_path_locked_on_nw_queue";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v28;
      v24 = "%{public}s [C%u] Alternate path potentially available";
    }
    else
    {
      v21 = v2->parameters;
      if (!v21 || nw_path_parameters_get_logging_disabled(*((_QWORD *)v21 + 13)))
        goto LABEL_52;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v22 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
LABEL_51:

LABEL_52:
        if (alternate_path_state != 1)
        {
LABEL_58:
          v34 = v2;
          nw_context_assert_queue(v2->context);
          alternate_path_state_handler = v34->alternate_path_state_handler;
          if (alternate_path_state_handler && v34->state != 5)
          {
            v36 = _Block_copy(alternate_path_state_handler);
            client_qos_class = v34->client_qos_class;
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = ___ZL59nw_connection_send_alternate_path_state_changed_on_nw_queueP24NWConcrete_nw_connection36nw_connection_alternate_path_state_t_block_invoke;
            v50 = &unk_1E14AC408;
            v51 = v36;
            v52 = v14;
            v38 = v36;
            nw_connection_async_client(v34, client_qos_class, buf);

          }
          goto LABEL_62;
        }
        v13 = 0;
LABEL_54:
        v29 = v2;
        nw_context_assert_queue(v2->context);
        better_path_available_handler = v29->better_path_available_handler;
        if (better_path_available_handler && v29->state != 5)
        {
          v31 = _Block_copy(better_path_available_handler);
          v32 = v29->client_qos_class;
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL50nw_connection_send_better_path_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke;
          v50 = &unk_1E14AAE50;
          v51 = v31;
          LOBYTE(v52) = v13;
          v33 = v31;
          nw_connection_async_client(v29, v32, buf);

        }
        goto LABEL_58;
      }
      v23 = v2->top_id;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_update_better_path_locked_on_nw_queue";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v23;
      v24 = "%{public}s [C%u] Alternate path not available";
    }
    _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_INFO, v24, buf, 0x12u);
    goto LABEL_51;
  }
  __nwlog_obj();
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_update_better_path_locked_on_nw_queue";
  v40 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v47 = 0;
  if (__nwlog_fault(v40, &type, &v47))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_update_better_path_locked_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      v45 = os_log_type_enabled(v41, type);
      if (backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_update_better_path_locked_on_nw_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_83;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_update_better_path_locked_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_update_better_path_locked_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v41, v46, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_83:
  if (v40)
    free(v40);
LABEL_63:

}

void sub_1835B3498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void nw_connection_send_viability_changed_on_nw_queue(NWConcrete_nw_connection *a1, int a2)
{
  NWConcrete_nw_connection *v3;
  NWConcrete_nw_connection *v4;
  int reported_viable;
  id viability_changed_handler;
  id v7;
  OS_nw_parameters *parameters;
  NSObject *v9;
  unsigned int top_id;
  int64_t int64_with_default;
  uint64_t viability_changed_timer;
  id v13;
  dispatch_time_t v14;
  uint64_t v15;
  dispatch_qos_class_t client_qos_class;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  _QWORD v25[4];
  id v26;
  char v27;
  _QWORD v28[4];
  NWConcrete_nw_connection *v29;
  id v30;
  char v31;
  char v32;
  os_log_type_t v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_connection_send_viability_changed_on_nw_queue";
    v18 = (char *)_os_log_send_and_compose_impl();

    v33 = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (__nwlog_fault(v18, &v33, &v32))
    {
      if (v33 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = v33;
        if (os_log_type_enabled(v19, v33))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_connection_send_viability_changed_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v22 = v33;
        v23 = os_log_type_enabled(v19, v33);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            v35 = "nw_connection_send_viability_changed_on_nw_queue";
            v36 = 2082;
            v37 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_connection_send_viability_changed_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v24 = v33;
        if (os_log_type_enabled(v19, v33))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_connection_send_viability_changed_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_40:
    if (v18)
      free(v18);
    goto LABEL_23;
  }
  nw_context_assert_queue(v3->context);
  reported_viable = v4->reported_viable;
  if (a2)
  {
    if (reported_viable == 1)
      goto LABEL_23;
  }
  else if (reported_viable == 2)
  {
    goto LABEL_23;
  }
  viability_changed_handler = v4->viability_changed_handler;
  if (viability_changed_handler && v4->state != 5)
  {
    if (a2)
    {
      v4->reported_viable = 1;
      v7 = _Block_copy(viability_changed_handler);
    }
    else
    {
      v4->reported_viable = 2;
      v7 = _Block_copy(viability_changed_handler);
      if (nw_endpoint_handler_uses_multipath(v4->parent_endpoint_handler))
      {
        parameters = v4->parameters;
        if (parameters && !nw_path_parameters_get_logging_disabled(*((_QWORD *)parameters + 13)))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v9 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            top_id = v4->top_id;
            *(_DWORD *)buf = 136446466;
            v35 = "nw_connection_send_viability_changed_on_nw_queue";
            v36 = 1024;
            LODWORD(v37) = top_id;
            _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_INFO, "%{public}s [C%u] Delaying not viable notification on a multipath protocol", buf, 0x12u);
          }

        }
        int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_multipath_viability_delay, 500);
        viability_changed_timer = (uint64_t)v4->viability_changed_timer;
        if (!viability_changed_timer)
        {
          v13 = nw_context_copy_implicit_context();
          v28[0] = MEMORY[0x1E0C809B0];
          v28[1] = 3221225472;
          v28[2] = ___ZL48nw_connection_send_viability_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke;
          v28[3] = &unk_1E149FEA8;
          v29 = v4;
          v30 = v7;
          v31 = 0;
          v4->viability_changed_timer = (void *)nw_queue_context_create_source(v13, 2, 3, 0, v28, 0);

          viability_changed_timer = (uint64_t)v4->viability_changed_timer;
        }
        v14 = dispatch_time(0x8000000000000000, 1000000 * int64_with_default);
        nw_queue_set_timer_values(viability_changed_timer, v14, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
        nw_queue_activate_source((uint64_t)v4->viability_changed_timer, v15);
        goto LABEL_22;
      }
    }
    client_qos_class = v4->client_qos_class;
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = ___ZL48nw_connection_send_viability_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke_3;
    v25[3] = &unk_1E14AAE50;
    v7 = v7;
    v26 = v7;
    v27 = a2;
    nw_connection_async_client(v4, client_qos_class, v25);

LABEL_22:
  }
LABEL_23:

}

void sub_1835B39D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void nw_connection_send_path_changed_on_nw_queue(void *a1, void *a2)
{
  id v3;
  id v4;
  const void *v5;
  void *v6;
  dispatch_qos_class_t v7;
  id v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[4];
  id v18;
  id v19;
  char v20;
  os_log_type_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    nw_context_assert_queue(*((void **)v3 + 3));
    v5 = (const void *)*((_QWORD *)v3 + 32);
    if (v5 && *((_DWORD *)v3 + 20) != 5)
    {
      v6 = _Block_copy(v5);
      v7 = *((_DWORD *)v3 + 48);
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = ___ZL43nw_connection_send_path_changed_on_nw_queueP24NWConcrete_nw_connectionPU21objcproto10OS_nw_path8NSObject_block_invoke;
      v17[3] = &unk_1E14ACE18;
      v19 = v6;
      v18 = v4;
      v8 = v6;
      nw_connection_async_client(v3, v7, v17);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_connection_send_path_changed_on_nw_queue";
  v10 = (char *)_os_log_send_and_compose_impl();

  v21 = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v10, &v21, &v20))
  {
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = v21;
      if (os_log_type_enabled(v11, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_send_path_changed_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = v21;
      v15 = os_log_type_enabled(v11, v21);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_connection_send_path_changed_on_nw_queue";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_send_path_changed_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = v21;
      if (os_log_type_enabled(v11, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_send_path_changed_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v10)
    free(v10);
LABEL_5:

}

void sub_1835B3D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_connection_send_path_changed_on_nw_queueP24NWConcrete_nw_connectionPU21objcproto10OS_nw_path8NSObject_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t ___ZL54nw_connection_update_data_transfer_reports_on_nw_queueP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  nw_data_transfer_report_add_snapshot_on_nw_queue(a3);
  return 1;
}

void ___ZL48nw_connection_send_viability_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke(uint64_t a1)
{
  _DWORD *v1;
  dispatch_qos_class_t v3;
  _QWORD v4[4];
  id v5;
  char v6;

  v1 = *(_DWORD **)(a1 + 32);
  if (v1[32] == 2)
  {
    v3 = v1[48];
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = ___ZL48nw_connection_send_viability_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke_2;
    v4[3] = &unk_1E14AAE50;
    v5 = *(id *)(a1 + 40);
    v6 = *(_BYTE *)(a1 + 48);
    nw_connection_async_client(v1, v3, v4);

  }
}

void sub_1835B3E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZL48nw_connection_send_viability_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZL48nw_connection_send_viability_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZL50nw_connection_send_better_path_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZL59nw_connection_send_alternate_path_state_changed_on_nw_queueP24NWConcrete_nw_connection36nw_connection_alternate_path_state_t_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t nw_connection_endpoint_report_dry_run_on_nw_queue(void *a1, int a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v9;
  void **v10;
  os_unfair_lock_s *v11;
  void **v12;
  id v13;
  _QWORD v15[6];
  int v16;
  int v17;

  v9 = a1;
  v10 = a6;
  nw_context_assert_queue(v10[3]);
  v11 = (os_unfair_lock_s *)(v10 + 17);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___ZL49nw_connection_endpoint_report_dry_run_on_nw_queuePU33objcproto22OS_nw_endpoint_handler8NSObject26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS__block_invoke;
  v15[3] = &unk_1E14AB278;
  v12 = v10;
  v15[4] = v12;
  v13 = v9;
  v15[5] = v13;
  v16 = a3;
  v17 = a2;
  os_unfair_lock_lock(v11);
  ___ZL49nw_connection_endpoint_report_dry_run_on_nw_queuePU33objcproto22OS_nw_endpoint_handler8NSObject26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS__block_invoke((uint64_t)v15);
  os_unfair_lock_unlock(v11);

  return 1;
}

void sub_1835B3F80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL39nw_connection_start_dry_run_on_nw_queueP24NWConcrete_nw_connection_block_invoke(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 176);
  if (v1)
    nw_endpoint_handler_start(v1);
}

void ___ZL49nw_connection_endpoint_report_dry_run_on_nw_queuePU33objcproto22OS_nw_endpoint_handler8NSObject26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS__block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  NWConcrete_nw_connection *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v2 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v2 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v3 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      v5 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
      v6 = *(unsigned int *)(a1 + 48);
      if (v6 > 5)
        v7 = "unknown-state";
      else
        v7 = off_1E149FC48[v6];
      v9 = 136446978;
      v10 = "nw_connection_endpoint_report_dry_run_on_nw_queue_block_invoke";
      v11 = 1024;
      v12 = v4;
      v13 = 2082;
      v14 = v5;
      v15 = 2082;
      v16 = v7;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Dry run state update (mode %{public}s, state %{public}s)", (uint8_t *)&v9, 0x26u);
    }

  }
  if (*(_DWORD *)(a1 + 52) == 2 && *(_DWORD *)(a1 + 48) == 3)
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 184), *(id *)(a1 + 40));
  v8 = *(NWConcrete_nw_connection **)(a1 + 32);
  if (*(OS_nw_endpoint_handler **)(a1 + 40) == v8->dry_run_endpoint_handler)
    nw_connection_update_better_path_locked_on_nw_queue(v8);
}

uint64_t __nw_connection_start_block_invoke_15(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 109) |= 0x10u;
  return result;
}

uint64_t __nw_connection_start_block_invoke_16(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = mach_continuous_time();
  if (result <= 1)
    v3 = 1;
  else
    v3 = result;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) = v3;
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 504) = 1;
  return result;
}

void ___ZL51nw_connection_run_sec_experiment_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke_218(uint64_t a1)
{
  nw_connection_start(*(nw_connection_t *)(a1 + 32));
}

uint64_t ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_235(uint64_t a1, uint64_t a2, void *a3)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  NSObject *v6;
  id v7;
  id v8;
  _QWORD v10[7];

  v4 = a3;
  v5 = v4 + 34;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_2;
  v10[3] = &unk_1E14AAAA0;
  v6 = v4;
  v10[4] = v6;
  v7 = *(id *)(a1 + 32);
  v10[5] = v7;
  v8 = *(id *)(a1 + 40);
  v10[6] = v8;
  os_unfair_lock_lock(v5);
  ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_2((uint64_t)v10);
  os_unfair_lock_unlock(v5);
  if (*(_BYTE *)(a1 + 48))
    nw_connection_force_cancel(v6);
  else
    nw_connection_cancel(v6);

  return 1;
}

void sub_1835B4268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_236(uint64_t a1, int a2, NWConcrete_nw_connection *a3)
{
  nw_connection_remove_probe_locked(*(NWConcrete_nw_connection **)(a1 + 32), a3);
  return 1;
}

void ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 80) == 5)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
    if (!v3 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
      goto LABEL_10;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
LABEL_9:

LABEL_10:
      nw_array_append(*(_QWORD *)(a1 + 48), *(void **)(a1 + 32));
      return;
    }
    v5 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 448);
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
    v11 = 136446722;
    v12 = "nw_connection_cancel_probes_block_invoke_2";
    v13 = 1024;
    v14 = v5;
    v15 = 1024;
    v16 = v6;
    v7 = "%{public}s [C%u] Probe already cancelled, removing probe [C%u]";
LABEL_8:
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v11, 0x18u);
    goto LABEL_9;
  }
  if (!*(_QWORD *)(v2 + 216) && !*(_QWORD *)(v2 + 208))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
    if (!v8 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v8 + 104)))
      goto LABEL_10;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 448);
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
    v11 = 136446722;
    v12 = "nw_connection_cancel_probes_block_invoke";
    v13 = 1024;
    v14 = v9;
    v15 = 1024;
    v16 = v10;
    v7 = "%{public}s [C%u] Probe has no handlers that would communicate cancelled state, removing probe [C%u]";
    goto LABEL_8;
  }
}

void nw_connection_force_cancel(nw_connection_t connection)
{
  NWConcrete_nw_connection *v1;
  NWConcrete_nw_connection *v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = connection;
  v2 = v1;
  if (v1)
  {
    nw_connection_cancel_inner(v1, 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_connection_force_cancel";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_connection_force_cancel";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_connection_force_cancel";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_connection_force_cancel";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_connection_force_cancel";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v4)
    free(v4);
LABEL_3:

}

void sub_1835B4720(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL55nw_connection_cleanup_data_transfer_reports_on_nw_queueP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  nw_data_transfer_report_collect_on_nw_queue(a3, 0);
  return 1;
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_24693()
{
  _BOOL8 result;

  result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

uint64_t nw_connection_get_attempted_probe_on_queue(void *a1)
{
  id v1;
  _BYTE *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(*((void **)v1 + 3));
    v3 = v2[109] & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_connection_get_attempted_probe_on_queue";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_get_attempted_probe_on_queue";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_connection_get_attempted_probe_on_queue";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_get_attempted_probe_on_queue";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_get_attempted_probe_on_queue";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_1835B4A14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *nw_connection_create_with_connection(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NWConcrete_nw_connection *v6;
  void *v7;
  id v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  int v17;
  _DWORD *v18;
  void *v19;
  id *v20;
  NSObject *v21;
  _QWORD *v22;
  id v23;
  void *v24;
  unsigned int v25;
  _DWORD *v26;
  id v27;
  NWConcrete_nw_endpoint_handler *v28;
  NWConcrete_nw_endpoint_handler *v29;
  NWConcrete_nw_endpoint_mode_handler *mode_handler;
  id *v31;
  id *v32;
  char isa;
  id v34;
  NWConcrete_nw_endpoint_flow *v35;
  id v36;
  id *v37;
  NSObject *v38;
  id *v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  id v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  char *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  NSObject *v51;
  int v52;
  os_log_type_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  NSObject *v58;
  const char *v59;
  nw_endpoint_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  const char *v64;
  nw_endpoint_t v65;
  const char *logging_description;
  uint64_t v67;
  const char *v68;
  char *v69;
  const char *v70;
  _DWORD *v71;
  _DWORD *v72;
  os_unfair_lock_s *v73;
  const char *v74;
  id v75;
  char *v76;
  NSObject *v77;
  os_log_type_t v78;
  os_unfair_lock_s *v79;
  id *v80;
  id v81;
  char *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  os_unfair_lock_s *v85;
  id *v86;
  id v87;
  os_log_type_t v88;
  void *v89;
  char *v90;
  NSObject *v91;
  os_log_type_t v92;
  void *v93;
  os_log_type_t v94;
  void *v95;
  uint64_t v96;
  NSObject *v97;
  int v98;
  int v99;
  int v100;
  char *backtrace_string;
  os_log_type_t v103;
  _BOOL4 v104;
  char *v105;
  os_log_type_t v106;
  _BOOL4 v107;
  os_log_type_t v108;
  os_log_type_t v109;
  void *v110;
  char *v111;
  NSObject *v112;
  os_log_type_t v113;
  void *v114;
  os_log_type_t v115;
  char *v116;
  _BOOL4 v117;
  char *v118;
  _BOOL4 v119;
  os_log_type_t v120;
  os_log_type_t v121;
  void *v122;
  NSObject *v123;
  os_log_type_t v124;
  char *v125;
  _BOOL4 v126;
  os_log_type_t v127;
  os_log_type_t v128[8];
  os_log_type_t v129;
  const char *v130;
  const char *v131;
  const char *v132;
  nw_endpoint_t v133;
  char *v134;
  id *v135;
  const char *v136;
  const char *v137;
  const char *v138;
  NWConcrete_nw_endpoint_handler *v139;
  os_log_type_t v140[8];
  os_log_type_t v141;
  os_log_type_t v142;
  NSObject *log;
  nw_endpoint_t loga;
  void *v145;
  _DWORD *v146;
  _QWORD *v147;
  _QWORD v148[4];
  id v149;
  uint64_t *v150;
  os_log_type_t *v151;
  os_log_type_t type[8];
  os_log_type_t *v153;
  uint64_t v154;
  uint64_t (*v155)(uint64_t, uint64_t);
  void (*v156)(uint64_t);
  id v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  char v161;
  char v162;
  os_log_type_t v163;
  uint8_t buf[4];
  const char *v165;
  __int16 v166;
  _BYTE v167[10];
  const char *v168;
  __int16 v169;
  const char *v170;
  __int16 v171;
  const char *v172;
  __int16 v173;
  const char *v174;
  __int16 v175;
  id v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v165 = "nw_connection_create_with_connection";
    v90 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v158) = 0;
    if (!__nwlog_fault(v90, type, &v158))
      goto LABEL_197;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v91 = objc_claimAutoreleasedReturnValue();
      v92 = type[0];
      if (os_log_type_enabled(v91, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v165 = "nw_connection_create_with_connection";
        _os_log_impl(&dword_182FBE000, v91, v92, "%{public}s called with null original_connection", buf, 0xCu);
      }
    }
    else if ((_BYTE)v158)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v91 = objc_claimAutoreleasedReturnValue();
      v103 = type[0];
      v104 = os_log_type_enabled(v91, type[0]);
      if (backtrace_string)
      {
        if (v104)
        {
          *(_DWORD *)buf = 136446466;
          v165 = "nw_connection_create_with_connection";
          v166 = 2082;
          *(_QWORD *)v167 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v91, v103, "%{public}s called with null original_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v90)
          goto LABEL_199;
        goto LABEL_198;
      }
      if (v104)
      {
        *(_DWORD *)buf = 136446210;
        v165 = "nw_connection_create_with_connection";
        _os_log_impl(&dword_182FBE000, v91, v103, "%{public}s called with null original_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v91 = objc_claimAutoreleasedReturnValue();
      v108 = type[0];
      if (os_log_type_enabled(v91, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v165 = "nw_connection_create_with_connection";
        _os_log_impl(&dword_182FBE000, v91, v108, "%{public}s called with null original_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_196;
  }
  if (!v4)
  {
    __nwlog_obj();
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v165 = "nw_connection_create_with_connection";
    v90 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v158) = 0;
    if (!__nwlog_fault(v90, type, &v158))
      goto LABEL_197;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v91 = objc_claimAutoreleasedReturnValue();
      v94 = type[0];
      if (os_log_type_enabled(v91, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v165 = "nw_connection_create_with_connection";
        _os_log_impl(&dword_182FBE000, v91, v94, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if ((_BYTE)v158)
    {
      v105 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v91 = objc_claimAutoreleasedReturnValue();
      v106 = type[0];
      v107 = os_log_type_enabled(v91, type[0]);
      if (v105)
      {
        if (v107)
        {
          *(_DWORD *)buf = 136446466;
          v165 = "nw_connection_create_with_connection";
          v166 = 2082;
          *(_QWORD *)v167 = v105;
          _os_log_impl(&dword_182FBE000, v91, v106, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v105);
LABEL_197:
        if (!v90)
        {
LABEL_199:
          v42 = 0;
          goto LABEL_173;
        }
LABEL_198:
        free(v90);
        goto LABEL_199;
      }
      if (v107)
      {
        *(_DWORD *)buf = 136446210;
        v165 = "nw_connection_create_with_connection";
        _os_log_impl(&dword_182FBE000, v91, v106, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v91 = objc_claimAutoreleasedReturnValue();
      v109 = type[0];
      if (os_log_type_enabled(v91, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v165 = "nw_connection_create_with_connection";
        _os_log_impl(&dword_182FBE000, v91, v109, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_196:

    goto LABEL_197;
  }
  v6 = [NWConcrete_nw_connection alloc];
  v7 = (void *)*((_QWORD *)v3 + 1);
  v8 = v5;
  v9 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v8, 0, 0);

  v10 = -[NWConcrete_nw_connection initWithEndpoint:parameters:identifier:]((void **)&v6->super.isa, v7, (void *)v9, 0);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(_QWORD *)(v10 + 16);
    nw_allow_use_of_dispatch_internal();
    if (has_modifiers == 1)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_modify_lock);
      v13 = (_QWORD *)g_modifier_list;
      if (g_modifier_list)
      {
        while (1)
        {
          v14 = (uint64_t (*)(uint64_t, uint64_t))v13[2];
          if (v14)
          {
            if ((v14(v11, v12) & 1) != 0)
              break;
          }
          v13 = (_QWORD *)*v13;
          if (!v13)
            goto LABEL_6;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_modify_lock);
        v15 = *(_QWORD *)(v10 + 16);
        if (v15 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v15 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v16 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            v17 = *(_DWORD *)(v10 + 448);
            *(_DWORD *)buf = 136446466;
            v165 = "nw_connection_create_with_connection";
            v166 = 1024;
            *(_DWORD *)v167 = v17;
            _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Connection parameters were modified", buf, 0x12u);
          }

        }
      }
      else
      {
LABEL_6:
        os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_modify_lock);
      }
    }
    v158 = 0;
    v159 = &v158;
    v160 = 0x2020000000;
    v161 = 0;
    *(_QWORD *)type = 0;
    v153 = type;
    v154 = 0x3032000000;
    v155 = __Block_byref_object_copy__24122;
    v156 = __Block_byref_object_dispose__24123;
    v157 = 0;
    v148[0] = MEMORY[0x1E0C809B0];
    v148[1] = 3221225472;
    v148[2] = __nw_connection_create_with_connection_block_invoke;
    v148[3] = &unk_1E14A54F0;
    v150 = &v158;
    v18 = v3;
    v149 = v18;
    v151 = type;
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 34);
    __nw_connection_create_with_connection_block_invoke(v148);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 34);
    if (!*((_BYTE *)v159 + 24) || (v19 = (void *)*((_QWORD *)v153 + 5)) == 0)
    {
      v40 = *(_QWORD *)(v10 + 16);
      if (!v40 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v40 + 104)))
      {
        v42 = 0;
LABEL_171:

        _Block_object_dispose(type, 8);
        _Block_object_dispose(&v158, 8);
        goto LABEL_172;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v21 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v41 = *(_DWORD *)(v10 + 448);
        *(_DWORD *)buf = 136446466;
        v165 = "nw_connection_create_with_connection";
        v166 = 1024;
        *(_DWORD *)v167 = v41;
        _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Original connection not yet connected", buf, 0x12u);
      }
      v42 = 0;
LABEL_170:

      goto LABEL_171;
    }
    v20 = v19;
    v21 = v20[5];

    v22 = v8;
    v23 = *(id *)(v22[13] + 136);

    if (!v21)
    {
      v50 = *(_QWORD *)(v10 + 16);
      if (!v50 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v50 + 104)))
        goto LABEL_168;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v51 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        v52 = *(_DWORD *)(v10 + 448);
        *(_DWORD *)buf = 136446466;
        v165 = "nw_connection_create_with_connection";
        v166 = 1024;
        *(_DWORD *)v167 = v52;
        _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Cannot get context from existing connection", buf, 0x12u);
      }
      goto LABEL_167;
    }
    if (!v23)
    {
      v54 = *(_QWORD *)(v10 + 16);
      if (!v54 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v54 + 104)))
        goto LABEL_168;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v51 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        v55 = *(_DWORD *)(v10 + 448);
        *(_DWORD *)buf = 136446466;
        v165 = "nw_connection_create_with_connection";
        v166 = 1024;
        *(_DWORD *)v167 = v55;
        _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Cannot get context from new parameters", buf, 0x12u);
      }
      goto LABEL_167;
    }
    if (!nw_context_shares_workloop(v21, v23))
    {
      v56 = *(_QWORD *)(v10 + 16);
      if (!v56 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v56 + 104)))
        goto LABEL_168;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v51 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        v57 = *(_DWORD *)(v10 + 448);
        *(_DWORD *)buf = 136446466;
        v165 = "nw_connection_create_with_connection";
        v166 = 1024;
        *(_DWORD *)v167 = v57;
        _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_ERROR, "%{public}s [C%u] New parameters do not share workloop with existing connection", buf, 0x12u);
      }
      goto LABEL_167;
    }
    v24 = *(void **)(v10 + 16);
    v25 = *(_DWORD *)(v10 + 448);
    v26 = *((id *)v153 + 5);
    v27 = v24;
    v146 = v26;
    v147 = (id)v10;
    v145 = v27;
    if (v26)
    {
      if (v27)
      {
        if (v26[29] == 2)
        {
          v28 = nw_endpoint_flow_copy_joinable_clone_handler(v26, v27);
          v29 = v28;
          v139 = v28;
          if (!v28 || v28->mode != 2)
          {
            if ((v26[67] & 0x20) != 0)
            {
              v32 = 0;
              goto LABEL_151;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            log = (id)gconnectionLogObj;
            if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
            {
              if ((v26[67] & 1) != 0)
                v64 = "dry-run ";
              else
                v64 = "";
              v137 = v64;
              v65 = nw_endpoint_handler_copy_endpoint(v26);
              logging_description = nw_endpoint_get_logging_description(v65);
              v67 = v26[30];
              v130 = logging_description;
              if (v67 > 5)
                v68 = "unknown-state";
              else
                v68 = off_1E149FC48[v67];
              *(_QWORD *)v128 = v68;
              v71 = v26;
              v72 = v26;
              v73 = (os_unfair_lock_s *)v71;
              v133 = v65;
              v74 = "path";
              switch(v72[29])
              {
                case 0:
                  break;
                case 1:
                  v74 = "resolver";
                  break;
                case 2:
                  v74 = nw_endpoint_flow_mode_string(*((void **)v71 + 31));
                  break;
                case 3:
                  v74 = "proxy";
                  break;
                case 4:
                  v74 = "fallback";
                  break;
                case 5:
                  v74 = "transform";
                  break;
                default:
                  v74 = "unknown-mode";
                  break;
              }

              v85 = v73 + 28;
              v86 = v73;
              os_unfair_lock_lock(v73 + 28);
              v87 = v86[8];
              os_unfair_lock_unlock(v85);

              *(_DWORD *)buf = 136447746;
              v165 = "nw_endpoint_handler_create_with_existing";
              v166 = 2082;
              *(_QWORD *)v167 = v146 + 42;
              *(_WORD *)&v167[8] = 2082;
              v168 = v137;
              v169 = 2082;
              v170 = v130;
              v171 = 2082;
              v172 = *(const char **)v128;
              v173 = 2082;
              v174 = v74;
              v175 = 2114;
              v176 = v87;
              _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Could not find joinable endpoint flow to clone from", buf, 0x48u);

            }
            v32 = 0;
LABEL_150:

LABEL_151:
            goto LABEL_152;
          }
          mode_handler = v28->mode_handler;
          log = mode_handler;
          v31 = -[NWConcrete_nw_endpoint_handler initWithEndpoint:parameters:reportCallback:context:parent:identifier:]((id *)[NWConcrete_nw_endpoint_handler alloc], v29->endpoint, v27, nw_connection_endpoint_report_on_nw_queue, v147, 0, v25);
          v32 = v31;
          if (v31)
          {
            isa = (char)log[4].isa;
            *((_DWORD *)v31 + 29) = 2;
            v34 = v31[9];
            v35 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
            *((_BYTE *)v35 + 32) = isa & 2 | *((_BYTE *)v35 + 32) & 0xFC | (v34 == 0);
            v36 = v32[31];
            v32[31] = v35;

            v37 = (id *)v32[31];
            v38 = log;
            v135 = v37;
            if (v37)
            {
              objc_storeStrong(v37 + 5, mode_handler);
              BYTE3(v38[4].isa) |= 0x20u;
LABEL_30:

              v39 = v32;
LABEL_149:

              goto LABEL_150;
            }
            __nwlog_obj();
            v122 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v165 = "nw_endpoint_flow_set_clone_flow";
            v134 = (char *)_os_log_send_and_compose_impl();

            v163 = OS_LOG_TYPE_ERROR;
            v162 = 0;
            if (__nwlog_fault(v134, &v163, &v162))
            {
              if (v163 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v123 = objc_claimAutoreleasedReturnValue();
                v124 = v163;
                if (os_log_type_enabled(v123, v163))
                {
                  *(_DWORD *)buf = 136446210;
                  v165 = "nw_endpoint_flow_set_clone_flow";
                  _os_log_impl(&dword_182FBE000, v123, v124, "%{public}s called with null endpoint_flow", buf, 0xCu);
                }
              }
              else if (v162)
              {
                v125 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v123 = objc_claimAutoreleasedReturnValue();
                v129 = v163;
                v126 = os_log_type_enabled(v123, v163);
                if (v125)
                {
                  if (v126)
                  {
                    *(_DWORD *)buf = 136446466;
                    v165 = "nw_endpoint_flow_set_clone_flow";
                    v166 = 2082;
                    *(_QWORD *)v167 = v125;
                    _os_log_impl(&dword_182FBE000, v123, v129, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v125);
                  goto LABEL_252;
                }
                if (v126)
                {
                  *(_DWORD *)buf = 136446210;
                  v165 = "nw_endpoint_flow_set_clone_flow";
                  _os_log_impl(&dword_182FBE000, v123, v129, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v123 = objc_claimAutoreleasedReturnValue();
                v127 = v163;
                if (os_log_type_enabled(v123, v163))
                {
                  *(_DWORD *)buf = 136446210;
                  v165 = "nw_endpoint_flow_set_clone_flow";
                  _os_log_impl(&dword_182FBE000, v123, v127, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
                }
              }

            }
LABEL_252:
            if (v134)
              free(v134);
            goto LABEL_30;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v75 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v165 = "nw_endpoint_handler_create_with_existing";
          v138 = (const char *)_os_log_send_and_compose_impl();

          v163 = OS_LOG_TYPE_ERROR;
          v162 = 0;
          v76 = (char *)v138;
          if ((__nwlog_fault(v138, &v163, &v162) & 1) == 0)
          {
LABEL_147:
            if (v76)
              free(v76);
            goto LABEL_149;
          }
          if (v163 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v77 = (id)gLogObj;
            v78 = v163;
            if (os_log_type_enabled(v77, v163))
            {
              *(_DWORD *)buf = 136446210;
              v165 = "nw_endpoint_handler_create_with_existing";
              _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed", buf, 0xCu);
            }
          }
          else if (v162)
          {
            v82 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v77 = objc_claimAutoreleasedReturnValue();
            v83 = v163;
            v84 = os_log_type_enabled(v77, v163);
            if (v82)
            {
              if (v84)
              {
                *(_DWORD *)buf = 136446466;
                v165 = "nw_endpoint_handler_create_with_existing";
                v166 = 2082;
                *(_QWORD *)v167 = v82;
                _os_log_impl(&dword_182FBE000, v77, v83, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v82);
              goto LABEL_146;
            }
            if (v84)
            {
              *(_DWORD *)buf = 136446210;
              v165 = "nw_endpoint_handler_create_with_existing";
              _os_log_impl(&dword_182FBE000, v77, v83, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v77 = objc_claimAutoreleasedReturnValue();
            v88 = v163;
            if (os_log_type_enabled(v77, v163))
            {
              *(_DWORD *)buf = 136446210;
              v165 = "nw_endpoint_handler_create_with_existing";
              _os_log_impl(&dword_182FBE000, v77, v88, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, backtrace limit exceeded", buf, 0xCu);
            }
          }

LABEL_146:
          v76 = (char *)v138;
          goto LABEL_147;
        }
        if ((v26[67] & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v58 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            if ((v26[67] & 1) != 0)
              v59 = "dry-run ";
            else
              v59 = "";
            v60 = nw_endpoint_handler_copy_endpoint(v26);
            v61 = nw_endpoint_get_logging_description(v60);
            v62 = v146[30];
            *(_QWORD *)v140 = v59;
            loga = v60;
            v136 = v61;
            if (v62 > 5)
              v63 = "unknown-state";
            else
              v63 = off_1E149FC48[v62];
            v132 = v63;
            v69 = v146;
            v70 = "path";
            switch(v146[29])
            {
              case 0:
                break;
              case 1:
                v70 = "resolver";
                break;
              case 2:
                v70 = nw_endpoint_flow_mode_string(*((void **)v69 + 31));
                break;
              case 3:
                v70 = "proxy";
                break;
              case 4:
                v70 = "fallback";
                break;
              case 5:
                v70 = "transform";
                break;
              default:
                v70 = "unknown-mode";
                break;
            }
            v131 = v70;

            v79 = (os_unfair_lock_s *)(v69 + 112);
            v80 = v69;
            os_unfair_lock_lock((os_unfair_lock_t)v69 + 28);
            v81 = v80[8];
            os_unfair_lock_unlock(v79);

            *(_DWORD *)buf = 136447746;
            v165 = "nw_endpoint_handler_create_with_existing";
            v166 = 2082;
            *(_QWORD *)v167 = v146 + 42;
            *(_WORD *)&v167[8] = 2082;
            v168 = *(const char **)v140;
            v169 = 2082;
            v170 = v136;
            v171 = 2082;
            v172 = v132;
            v173 = 2082;
            v174 = v131;
            v175 = 2114;
            v176 = v81;
            _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Existing endpoint handler not eligible for peel-off", buf, 0x48u);

          }
        }
LABEL_116:
        v32 = 0;
LABEL_152:

        v95 = (void *)v147[18];
        v147[18] = v32;

        v96 = *(_QWORD *)(v10 + 16);
        if (v147[18])
        {
          if (v96 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v96 + 104)))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v97 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
            {
              v98 = *(_DWORD *)(v10 + 448);
              v99 = v18[112];
              *(_DWORD *)buf = 136446722;
              v165 = "nw_connection_create_with_connection";
              v166 = 1024;
              *(_DWORD *)v167 = v98;
              *(_WORD *)&v167[4] = 1024;
              *(_DWORD *)&v167[6] = v99;
              _os_log_impl(&dword_182FBE000, v97, OS_LOG_TYPE_INFO, "%{public}s [C%u] create connection from [C%u]", buf, 0x18u);
            }

          }
          v42 = v147;
          goto LABEL_169;
        }
        if (!v96 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v96 + 104)))
        {
LABEL_168:
          v42 = 0;
LABEL_169:

          goto LABEL_170;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v51 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          v100 = *(_DWORD *)(v10 + 448);
          *(_DWORD *)buf = 136446466;
          v165 = "nw_connection_create_with_connection";
          v166 = 1024;
          *(_DWORD *)v167 = v100;
          _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_ERROR, "%{public}s [C%u] nw_endpoint_handler_create_with_existing failed", buf, 0x12u);
        }
LABEL_167:

        goto LABEL_168;
      }
      __nwlog_obj();
      v114 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v165 = "nw_endpoint_handler_create_with_existing";
      v111 = (char *)_os_log_send_and_compose_impl();

      v163 = OS_LOG_TYPE_ERROR;
      v162 = 0;
      if (!__nwlog_fault(v111, &v163, &v162))
        goto LABEL_234;
      if (v163 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v112 = objc_claimAutoreleasedReturnValue();
        v115 = v163;
        if (os_log_type_enabled(v112, v163))
        {
          *(_DWORD *)buf = 136446210;
          v165 = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_182FBE000, v112, v115, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v162)
      {
        v118 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v112 = objc_claimAutoreleasedReturnValue();
        v142 = v163;
        v119 = os_log_type_enabled(v112, v163);
        if (v118)
        {
          if (v119)
          {
            *(_DWORD *)buf = 136446466;
            v165 = "nw_endpoint_handler_create_with_existing";
            v166 = 2082;
            *(_QWORD *)v167 = v118;
            _os_log_impl(&dword_182FBE000, v112, v142, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v118);
          if (!v111)
            goto LABEL_116;
          goto LABEL_235;
        }
        if (v119)
        {
          *(_DWORD *)buf = 136446210;
          v165 = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_182FBE000, v112, v142, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v112 = objc_claimAutoreleasedReturnValue();
        v121 = v163;
        if (os_log_type_enabled(v112, v163))
        {
          *(_DWORD *)buf = 136446210;
          v165 = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_182FBE000, v112, v121, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v110 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v165 = "nw_endpoint_handler_create_with_existing";
      v111 = (char *)_os_log_send_and_compose_impl();

      v163 = OS_LOG_TYPE_ERROR;
      v162 = 0;
      if (!__nwlog_fault(v111, &v163, &v162))
        goto LABEL_234;
      if (v163 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v112 = objc_claimAutoreleasedReturnValue();
        v113 = v163;
        if (os_log_type_enabled(v112, v163))
        {
          *(_DWORD *)buf = 136446210;
          v165 = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_182FBE000, v112, v113, "%{public}s called with null original_endpoint_handler", buf, 0xCu);
        }
      }
      else if (v162)
      {
        v116 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v112 = objc_claimAutoreleasedReturnValue();
        v141 = v163;
        v117 = os_log_type_enabled(v112, v163);
        if (v116)
        {
          if (v117)
          {
            *(_DWORD *)buf = 136446466;
            v165 = "nw_endpoint_handler_create_with_existing";
            v166 = 2082;
            *(_QWORD *)v167 = v116;
            _os_log_impl(&dword_182FBE000, v112, v141, "%{public}s called with null original_endpoint_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v116);
LABEL_234:
          if (!v111)
            goto LABEL_116;
LABEL_235:
          free(v111);
          goto LABEL_116;
        }
        if (v117)
        {
          *(_DWORD *)buf = 136446210;
          v165 = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_182FBE000, v112, v141, "%{public}s called with null original_endpoint_handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v112 = objc_claimAutoreleasedReturnValue();
        v120 = v163;
        if (os_log_type_enabled(v112, v163))
        {
          *(_DWORD *)buf = 136446210;
          v165 = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_182FBE000, v112, v120, "%{public}s called with null original_endpoint_handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_234;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v43 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v165 = "nw_connection_create_with_connection";
  v44 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v158) = 0;
  if (__nwlog_fault(v44, type, &v158))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v45 = (id)gLogObj;
      v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v165 = "nw_connection_create_with_connection";
        _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s [nw_connection initWithEndpoint:parameters:] failed", buf, 0xCu);
      }
    }
    else if ((_BYTE)v158)
    {
      v47 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v45 = (id)gLogObj;
      v48 = type[0];
      v49 = os_log_type_enabled(v45, type[0]);
      if (v47)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          v165 = "nw_connection_create_with_connection";
          v166 = 2082;
          *(_QWORD *)v167 = v47;
          _os_log_impl(&dword_182FBE000, v45, v48, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v47);
        if (!v44)
          goto LABEL_79;
        goto LABEL_78;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        v165 = "nw_connection_create_with_connection";
        _os_log_impl(&dword_182FBE000, v45, v48, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v45 = (id)gLogObj;
      v53 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v165 = "nw_connection_create_with_connection";
        _os_log_impl(&dword_182FBE000, v45, v53, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
  if (v44)
LABEL_78:
    free(v44);
LABEL_79:
  v42 = 0;
LABEL_172:

LABEL_173:
  return v42;
}

void sub_1835B66AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v43 - 216), 8);

  _Unwind_Resume(a1);
}

void __nw_connection_create_with_connection_block_invoke(_QWORD *a1)
{
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = (*(_BYTE *)(a1[4] + 109) & 0x40) != 0;
  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), *(id *)(a1[4] + 144));
}

_QWORD *nw_connection_create_with_client_id(const unsigned __int8 *a1, void *a2)
{
  id v3;
  NWConcrete_nw_path_evaluator *evaluator_for_client_id;
  os_unfair_lock_s *v5;
  id *v6;
  NSObject *v7;
  _BOOL8 v8;
  unsigned int v9;
  _DWORD *v10;
  id *v11;
  _QWORD *v12;
  id *v13;
  id v14;
  id v15;
  id v16;
  id *v17;
  id *v18;
  NWConcrete_nw_endpoint_flow *v19;
  id v20;
  id *v21;
  _QWORD *v22;
  void *v23;
  id v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  id v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  char *v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  void *v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  NSObject *v43;
  int v44;
  void *v45;
  void *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  void *v51;
  os_log_type_t v52;
  char *backtrace_string;
  os_log_type_t v54;
  _BOOL4 v55;
  char *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  os_log_type_t v59;
  os_log_type_t v60;
  os_log_type_t v61;
  const char *v62;
  id *v63;
  _DWORD *v64;
  id v65;
  id v66;
  id v67;
  char v68;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v71;
  __int16 v72;
  _BYTE v73[20];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!v3)
  {
    v45 = 0;
    __nwlog_obj();
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v71 = "nw_connection_create_with_client_id";
    v48 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v68 = 0;
    if (!__nwlog_fault(v48, &type, &v68))
      goto LABEL_103;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v49 = objc_claimAutoreleasedReturnValue();
      v50 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)buf = 136446210;
        v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v68)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v49 = objc_claimAutoreleasedReturnValue();
      v54 = type;
      v55 = os_log_type_enabled(v49, type);
      if (backtrace_string)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          v71 = "nw_connection_create_with_client_id";
          v72 = 2082;
          *(_QWORD *)v73 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v49, v54, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v48)
          goto LABEL_105;
        goto LABEL_104;
      }
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_182FBE000, v49, v54, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v49 = objc_claimAutoreleasedReturnValue();
      v59 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)buf = 136446210;
        v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_182FBE000, v49, v59, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_102;
  }
  v67 = v3;
  if (uuid_is_null(a1))
  {
    v45 = v3;
    __nwlog_obj();
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v71 = "nw_connection_create_with_client_id";
    v48 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v68 = 0;
    if (!__nwlog_fault(v48, &type, &v68))
      goto LABEL_103;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v49 = objc_claimAutoreleasedReturnValue();
      v52 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)buf = 136446210;
        v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_182FBE000, v49, v52, "%{public}s called with null !uuid_is_null(client_id)", buf, 0xCu);
      }
    }
    else if (v68)
    {
      v56 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v49 = objc_claimAutoreleasedReturnValue();
      v57 = type;
      v58 = os_log_type_enabled(v49, type);
      if (v56)
      {
        if (v58)
        {
          *(_DWORD *)buf = 136446466;
          v71 = "nw_connection_create_with_client_id";
          v72 = 2082;
          *(_QWORD *)v73 = v56;
          _os_log_impl(&dword_182FBE000, v49, v57, "%{public}s called with null !uuid_is_null(client_id), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v56);
LABEL_103:
        if (!v48)
        {
LABEL_105:
          v22 = 0;
          goto LABEL_69;
        }
LABEL_104:
        free(v48);
        goto LABEL_105;
      }
      if (v58)
      {
        *(_DWORD *)buf = 136446210;
        v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_182FBE000, v49, v57, "%{public}s called with null !uuid_is_null(client_id), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v49 = objc_claimAutoreleasedReturnValue();
      v60 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)buf = 136446210;
        v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_182FBE000, v49, v60, "%{public}s called with null !uuid_is_null(client_id), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_102:

    goto LABEL_103;
  }
  evaluator_for_client_id = nw_path_create_evaluator_for_client_id(a1, v3);
  v5 = (os_unfair_lock_s *)evaluator_for_client_id;
  if (!evaluator_for_client_id)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v71 = "nw_connection_create_with_client_id";
      v72 = 1040;
      *(_DWORD *)v73 = 16;
      *(_WORD *)&v73[4] = 2096;
      *(_QWORD *)&v73[6] = a1;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s Cannot create path evaluator for client ID %{uuid_t}.16P", buf, 0x1Cu);
    }
    v22 = 0;
    goto LABEL_68;
  }
  v6 = evaluator_for_client_id;
  os_unfair_lock_lock(v5 + 24);
  v7 = v6[6];
  os_unfair_lock_unlock(v5 + 24);

  v65 = nw_path_copy_endpoint(v7);
  v66 = nw_path_copy_parameters(v7);
  v8 = -[NWConcrete_nw_connection initWithEndpoint:parameters:identifier:]((void **)[NWConcrete_nw_connection alloc], v65, v66, 0);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 448);
    v10 = (_DWORD *)v8;
    v11 = v6;
    v64 = v10;
    v12 = v10;
    v13 = v11;
    os_unfair_lock_lock(v5 + 24);
    v14 = v6[6];
    os_unfair_lock_unlock(v5 + 24);
    v63 = v13;

    v15 = nw_path_copy_endpoint(v14);
    v16 = nw_path_copy_parameters(v14);
    v17 = -[NWConcrete_nw_endpoint_handler initWithEndpoint:parameters:reportCallback:context:parent:identifier:]((id *)[NWConcrete_nw_endpoint_handler alloc], v15, v16, nw_connection_endpoint_report_on_nw_queue, v12, 0, v9);
    v18 = v17;
    if (v17)
    {
      *((_DWORD *)v17 + 29) = 2;
      v19 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
      *((_BYTE *)v19 + 32) = *((_BYTE *)v19 + 32) & 0xFC | 1;
      v20 = v18[31];
      v18[31] = v19;

      objc_storeStrong(v18 + 32, v5);
      v21 = v18;
LABEL_49:

      v39 = (void *)v12[18];
      v12[18] = v18;

      v40 = v12[2];
      if (v12[18])
      {
        if (v40 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v40 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v41 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            v42 = v64[112];
            *(_DWORD *)buf = 136446978;
            v71 = "nw_connection_create_with_client_id";
            v72 = 1024;
            *(_DWORD *)v73 = v42;
            *(_WORD *)&v73[4] = 1042;
            *(_DWORD *)&v73[6] = 16;
            *(_WORD *)&v73[10] = 2098;
            *(_QWORD *)&v73[12] = a1;
            _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_INFO, "%{public}s [C%u] create connection from ID %{public,uuid_t}.16P", buf, 0x22u);
          }

        }
        v22 = v12;
      }
      else
      {
        if (v40 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v40 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v43 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            v44 = v64[112];
            *(_DWORD *)buf = 136446466;
            v71 = "nw_connection_create_with_client_id";
            v72 = 1024;
            *(_DWORD *)v73 = v44;
            _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_ERROR, "%{public}s [C%u] nw_endpoint_handler_create_with_path_evaluator failed", buf, 0x12u);
          }

        }
        v22 = 0;
      }
      v23 = v64;
      goto LABEL_67;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v28 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v71 = "nw_endpoint_handler_create_with_path_evaluator";
    v62 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v68 = 0;
    v29 = (char *)v62;
    if ((__nwlog_fault(v62, &type, &v68) & 1) == 0)
    {
LABEL_47:
      if (v29)
        free(v29);
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = (id)gLogObj;
      v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v71 = "nw_endpoint_handler_create_with_path_evaluator";
        _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed", buf, 0xCu);
      }
    }
    else if (v68)
    {
      v35 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = (id)gLogObj;
      v61 = type;
      v36 = os_log_type_enabled(v30, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v71 = "nw_endpoint_handler_create_with_path_evaluator";
          v72 = 2082;
          *(_QWORD *)v73 = v35;
          _os_log_impl(&dword_182FBE000, v30, v61, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v35);
        goto LABEL_46;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v71 = "nw_endpoint_handler_create_with_path_evaluator";
        _os_log_impl(&dword_182FBE000, v30, v61, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = (id)gLogObj;
      v38 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v71 = "nw_endpoint_handler_create_with_path_evaluator";
        _os_log_impl(&dword_182FBE000, v30, v38, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_46:
    v29 = (char *)v62;
    goto LABEL_47;
  }
  v23 = 0;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v24 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v71 = "nw_connection_create_with_client_id";
  v25 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v68 = 0;
  if (__nwlog_fault(v25, &type, &v68))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = (id)gLogObj;
      v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s [nw_connection initWithEndpoint:parameters:] failed", buf, 0xCu);
      }
    }
    else if (v68)
    {
      v32 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = (id)gLogObj;
      v33 = type;
      v34 = os_log_type_enabled(v26, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v71 = "nw_connection_create_with_client_id";
          v72 = 2082;
          *(_QWORD *)v73 = v32;
          _os_log_impl(&dword_182FBE000, v26, v33, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v32);
        if (!v25)
          goto LABEL_39;
        goto LABEL_38;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_182FBE000, v26, v33, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = (id)gLogObj;
      v37 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_182FBE000, v26, v37, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
  if (v25)
LABEL_38:
    free(v25);
LABEL_39:
  v22 = 0;
LABEL_67:

LABEL_68:
  v45 = v67;
LABEL_69:

  return v22;
}

void sub_1835B755C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void nw_connection_add_initial_inbound_data(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  id v23;
  id v24;
  int v25;
  char v26;
  os_log_type_t v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_connection_add_initial_inbound_data";
    v9 = (char *)_os_log_send_and_compose_impl();

    v27 = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v9, &v27, &v26))
      goto LABEL_38;
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v27;
      if (os_log_type_enabled(v10, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_connection_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v27;
      v16 = os_log_type_enabled(v10, v27);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_connection_add_initial_inbound_data";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9)
          goto LABEL_4;
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_connection_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = v27;
      if (os_log_type_enabled(v10, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_connection_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v6)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_connection_add_initial_inbound_data_block_invoke;
    v22[3] = &unk_1E14ACF20;
    v23 = v5;
    v24 = v7;
    v25 = a3;
    nw_connection_async_if_needed(v23, v22);

    goto LABEL_4;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_connection_add_initial_inbound_data";
  v9 = (char *)_os_log_send_and_compose_impl();

  v27 = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (!__nwlog_fault(v9, &v27, &v26))
    goto LABEL_38;
  if (v27 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = v27;
    if (os_log_type_enabled(v10, v27))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_add_initial_inbound_data";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null initial_inbound_data", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v26)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = v27;
    if (os_log_type_enabled(v10, v27))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_add_initial_inbound_data";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null initial_inbound_data, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = v27;
  v19 = os_log_type_enabled(v10, v27);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_add_initial_inbound_data";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null initial_inbound_data, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v29 = "nw_connection_add_initial_inbound_data";
    v30 = 2082;
    v31 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null initial_inbound_data, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_39;
LABEL_4:

}

void sub_1835B7AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_connection_add_initial_inbound_data_block_invoke(uint64_t a1)
{
  void *v1;
  int v2;
  id v3;
  NSObject *v4;
  NWConcrete_nw_endpoint_handler *v5;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v7;
  NWConcrete_nw_endpoint_mode_handler *v8;
  uint64_t v9;
  unsigned int size;
  unsigned int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  const char *v25;
  uint64_t *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  const char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *v34;
  _BOOL4 v35;
  const char *v36;
  char *v37;
  id v38;
  os_log_type_t v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  char *backtrace_string;
  os_log_type_t v44;
  _BOOL4 v45;
  id v46;
  os_log_type_t v47;
  id v48;
  os_log_type_t v49;
  NSObject *v50;
  os_log_type_t v51;
  const char *v52;
  void *v53;
  const char *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  char *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  os_log_type_t v60;
  _BOOL4 v61;
  char *v62;
  _BOOL4 v63;
  os_log_type_t v64;
  os_log_type_t v65;
  os_log_type_t v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  os_log_type_t type[8];
  os_log_type_t *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE applier[24];
  _BYTE v77[24];
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(a1 + 40);
  v2 = *(_DWORD *)(a1 + 48);
  v3 = *(id *)(*(_QWORD *)(a1 + 32) + 144);
  v4 = v1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v38 = (id)gLogObj;
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    v18 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (!__nwlog_fault(v18, type, &v68))
      goto LABEL_72;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v39 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v19, v39, "%{public}s called with null handler", applier, 0xCu);
      }
    }
    else if ((_BYTE)v68)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v44 = type[0];
      v45 = os_log_type_enabled(v19, type[0]);
      if (backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)applier = 136446466;
          *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(_QWORD *)&applier[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v44, "%{public}s called with null handler, dumping backtrace:%{public}s", applier, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_72;
      }
      if (v45)
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v19, v44, "%{public}s called with null handler, no backtrace", applier, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v64 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v19, v64, "%{public}s called with null handler, backtrace limit exceeded", applier, 0xCu);
      }
    }
LABEL_71:

    goto LABEL_72;
  }
  v5 = (NWConcrete_nw_endpoint_handler *)v3;
  mode = v5->mode;

  if ((_DWORD)mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    if (mode > 5)
      v17 = "unknown-mode";
    else
      v17 = off_1E149FC18[mode];
    *(_DWORD *)applier = 136446722;
    *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    *(_WORD *)&applier[12] = 2082;
    *(_QWORD *)&applier[14] = v17;
    *(_WORD *)&applier[22] = 2082;
    *(_QWORD *)v77 = "flow";
    v18 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (__nwlog_fault(v18, type, &v68))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v20 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          if (mode > 5)
            v21 = "unknown-mode";
          else
            v21 = off_1E149FC18[mode];
          *(_DWORD *)applier = 136446722;
          *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(_QWORD *)&applier[14] = v21;
          *(_WORD *)&applier[22] = 2082;
          *(_QWORD *)v77 = "flow";
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s Handler is in mode %{public}s, expected %{public}s", applier, 0x20u);
        }
      }
      else if ((_BYTE)v68)
      {
        v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v23 = type[0];
        v24 = os_log_type_enabled(v19, type[0]);
        if (v22)
        {
          if (v24)
          {
            if (mode > 5)
              v25 = "unknown-mode";
            else
              v25 = off_1E149FC18[mode];
            *(_DWORD *)applier = 136446978;
            *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = v25;
            *(_WORD *)&applier[22] = 2082;
            *(_QWORD *)v77 = "flow";
            *(_WORD *)&v77[8] = 2082;
            *(_QWORD *)&v77[10] = v22;
            _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", applier, 0x2Au);
          }

          free(v22);
          if (!v18)
            goto LABEL_74;
          goto LABEL_73;
        }
        if (v24)
        {
          if (mode > 5)
            v36 = "unknown-mode";
          else
            v36 = off_1E149FC18[mode];
          *(_DWORD *)applier = 136446722;
          *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(_QWORD *)&applier[14] = v36;
          *(_WORD *)&applier[22] = 2082;
          *(_QWORD *)v77 = "flow";
          _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", applier, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v28 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          if (mode > 5)
            v29 = "unknown-mode";
          else
            v29 = off_1E149FC18[mode];
          *(_DWORD *)applier = 136446722;
          *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(_QWORD *)&applier[14] = v29;
          *(_WORD *)&applier[22] = 2082;
          *(_QWORD *)v77 = "flow";
          _os_log_impl(&dword_182FBE000, v19, v28, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", applier, 0x20u);
        }
      }
      goto LABEL_71;
    }
LABEL_72:
    if (!v18)
      goto LABEL_74;
LABEL_73:
    free(v18);
    goto LABEL_74;
  }
  v7 = nw_endpoint_handler_copy_flow(v5);
  v8 = v7;
  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v40 = (id)gLogObj;
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if ((__nwlog_fault(v13, type, &v68) & 1) == 0)
      goto LABEL_66;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = (id)gLogObj;
      v42 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s called with null endpoint_flow", applier, 0xCu);
      }
    }
    else if ((_BYTE)v68)
    {
      v54 = __nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = (id)gLogObj;
      v55 = type[0];
      v56 = os_log_type_enabled(v41, type[0]);
      if (v54)
      {
        if (v56)
        {
          *(_DWORD *)applier = 136446466;
          *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(_QWORD *)&applier[14] = v54;
          _os_log_impl(&dword_182FBE000, v41, v55, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", applier, 0x16u);
        }

        v37 = (char *)v54;
LABEL_65:
        free(v37);
        goto LABEL_66;
      }
      if (v56)
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v41, v55, "%{public}s called with null endpoint_flow, no backtrace", applier, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = (id)gLogObj;
      v65 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v41, v65, "%{public}s called with null endpoint_flow, backtrace limit exceeded", applier, 0xCu);
      }
    }
    goto LABEL_153;
  }
  v9 = *((_QWORD *)v7 + 114);
  if (!v9)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v46 = (id)gLogObj;
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (!__nwlog_fault(v13, type, &v68))
      goto LABEL_66;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = (id)gLogObj;
      v47 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v41, v47, "%{public}s called with null endpoint_flow->socket_protocol", applier, 0xCu);
      }
      goto LABEL_153;
    }
    if (!(_BYTE)v68)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = (id)gLogObj;
      v66 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v41, v66, "%{public}s called with null endpoint_flow->socket_protocol, backtrace limit exceeded", applier, 0xCu);
      }
      goto LABEL_153;
    }
    v57 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v41 = (id)gLogObj;
    v58 = type[0];
    v59 = os_log_type_enabled(v41, type[0]);
    if (!v57)
    {
      if (v59)
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v41, v58, "%{public}s called with null endpoint_flow->socket_protocol, no backtrace", applier, 0xCu);
      }
      goto LABEL_153;
    }
    if (v59)
    {
      *(_DWORD *)applier = 136446466;
      *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
      *(_WORD *)&applier[12] = 2082;
      *(_QWORD *)&applier[14] = v57;
      _os_log_impl(&dword_182FBE000, v41, v58, "%{public}s called with null endpoint_flow->socket_protocol, dumping backtrace:%{public}s", applier, 0x16u);
    }
    goto LABEL_120;
  }
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v48 = (id)gLogObj;
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (!__nwlog_fault(v13, type, &v68))
      goto LABEL_66;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = (id)gLogObj;
      v49 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v41, v49, "%{public}s called with null initial_inbound_data", applier, 0xCu);
      }
LABEL_153:

      goto LABEL_66;
    }
    if (!(_BYTE)v68)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = (id)gLogObj;
      v67 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v41, v67, "%{public}s called with null initial_inbound_data, backtrace limit exceeded", applier, 0xCu);
      }
      goto LABEL_153;
    }
    v57 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v41 = (id)gLogObj;
    v60 = type[0];
    v61 = os_log_type_enabled(v41, type[0]);
    if (!v57)
    {
      if (v61)
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_182FBE000, v41, v60, "%{public}s called with null initial_inbound_data, no backtrace", applier, 0xCu);
      }
      goto LABEL_153;
    }
    if (v61)
    {
      *(_DWORD *)applier = 136446466;
      *(_QWORD *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
      *(_WORD *)&applier[12] = 2082;
      *(_QWORD *)&applier[14] = v57;
      _os_log_impl(&dword_182FBE000, v41, v60, "%{public}s called with null initial_inbound_data, dumping backtrace:%{public}s", applier, 0x16u);
    }
LABEL_120:

    free(v57);
    if (!v13)
      goto LABEL_68;
    goto LABEL_67;
  }
  if (*(_UNKNOWN **)(v9 + 40) != &nw_protocol_ref_counted_handle)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_socket_add_initial_inbound_data";
    v13 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (!__nwlog_fault(v13, type, &v68))
      goto LABEL_66;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v50 = gLogObj;
      v51 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_66;
      *(_DWORD *)applier = 136446210;
      *(_QWORD *)&applier[4] = "nw_socket_add_initial_inbound_data";
      v52 = "%{public}s called with null socket_handler";
    }
    else if ((_BYTE)v68)
    {
      v62 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v50 = gLogObj;
      v51 = type[0];
      v63 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v62)
      {
        if (v63)
        {
          *(_DWORD *)applier = 136446466;
          *(_QWORD *)&applier[4] = "nw_socket_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(_QWORD *)&applier[14] = v62;
          _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", applier, 0x16u);
        }
        free(v62);
        if (!v13)
          goto LABEL_68;
        goto LABEL_67;
      }
      if (!v63)
      {
LABEL_66:
        if (!v13)
        {
LABEL_68:

LABEL_74:
          return;
        }
LABEL_67:
        free(v13);
        goto LABEL_68;
      }
      *(_DWORD *)applier = 136446210;
      *(_QWORD *)&applier[4] = "nw_socket_add_initial_inbound_data";
      v52 = "%{public}s called with null socket_handler, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v50 = gLogObj;
      v51 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_66;
      *(_DWORD *)applier = 136446210;
      *(_QWORD *)&applier[4] = "nw_socket_add_initial_inbound_data";
      v52 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v50, v51, v52, applier, 0xCu);
    goto LABEL_66;
  }
  size = dispatch_data_get_size(v4);
  v11 = size;
  if (!size)
  {
    v15 = nw_frame_create(0, 0, 0, (uint64_t)nw_socket_frame_input_finalizer, v9 + 96);
    if (v15)
      goto LABEL_26;
    v13 = 0;
    goto LABEL_36;
  }
  v12 = (char *)malloc_type_malloc(size, 0xF2B69DE5uLL);
  v13 = v12;
  if (v12)
  {
    *(_QWORD *)type = 0;
    v73 = type;
    v74 = 0x2000000000;
    v75 = 0;
    v68 = 0;
    v69 = &v68;
    v70 = 0x2000000000;
    v71 = v12;
    *(_QWORD *)applier = MEMORY[0x1E0C809B0];
    *(_QWORD *)&applier[8] = 0x40000000;
    *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(_QWORD *)v77 = &unk_1E14A3448;
    *(_QWORD *)&v77[16] = &v68;
    v78 = v11;
    *(_QWORD *)&v77[8] = type;
    dispatch_data_apply(v4, applier);
    _Block_object_dispose(&v68, 8);
    _Block_object_dispose(type, 8);
    v14 = (uint64_t)v13;
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446466;
  *(_QWORD *)&applier[4] = "strict_malloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = v11;
  v53 = (void *)_os_log_send_and_compose_impl();
  if (!__nwlog_abort((uint64_t)v53))
  {
    free(v53);
    *(_QWORD *)type = 0;
    v73 = type;
    v74 = 0x2000000000;
    v75 = 0;
    v68 = 0;
    v69 = &v68;
    v70 = 0x2000000000;
    v71 = 0;
    *(_QWORD *)applier = MEMORY[0x1E0C809B0];
    *(_QWORD *)&applier[8] = 0x40000000;
    *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(_QWORD *)v77 = &unk_1E14A3448;
    *(_QWORD *)&v77[16] = &v68;
    v78 = v11;
    *(_QWORD *)&v77[8] = type;
    dispatch_data_apply(v4, applier);
    _Block_object_dispose(&v68, 8);
    _Block_object_dispose(type, 8);
    v14 = 0;
LABEL_10:
    v15 = nw_frame_create(0, v14, v11, (uint64_t)nw_socket_frame_input_finalizer, v9 + 96);
    if (v15)
    {
      *(_WORD *)(v15 + 204) |= 1u;
LABEL_26:
      *(_BYTE *)(v15 + 186) = *(_BYTE *)(v15 + 186) & 0xFC | v2 & 3;
      *(_QWORD *)(v15 + 16) = 0;
      v26 = *(uint64_t **)(v9 + 416);
      *(_QWORD *)(v15 + 24) = v26;
      *v26 = v15;
      *(_QWORD *)(v9 + 416) = v15 + 16;
      if ((*(_WORD *)(v9 + 429) & 0x80) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v27 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)applier = 136446978;
          *(_QWORD *)&applier[4] = "nw_socket_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(_QWORD *)&applier[14] = v9 + 436;
          *(_WORD *)&applier[22] = 1024;
          *(_DWORD *)v77 = v11;
          *(_WORD *)&v77[4] = 1024;
          *(_DWORD *)&v77[6] = v2;
          _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Adding initial packet of length %u, ECN %u", applier, 0x22u);
        }
      }
      goto LABEL_68;
    }
LABEL_36:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_socket_add_initial_inbound_data";
    v30 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (__nwlog_fault(v30, type, &v68))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v31 = gLogObj;
        v32 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_socket_add_initial_inbound_data";
          v33 = "%{public}s nw_frame_create failed";
LABEL_62:
          _os_log_impl(&dword_182FBE000, v31, v32, v33, applier, 0xCu);
        }
      }
      else if ((_BYTE)v68)
      {
        v34 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v31 = gLogObj;
        v32 = type[0];
        v35 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v34)
        {
          if (v35)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_socket_add_initial_inbound_data";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = v34;
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s nw_frame_create failed, dumping backtrace:%{public}s", applier, 0x16u);
          }
          free(v34);
          goto LABEL_63;
        }
        if (v35)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_socket_add_initial_inbound_data";
          v33 = "%{public}s nw_frame_create failed, no backtrace";
          goto LABEL_62;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v31 = gLogObj;
        v32 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_socket_add_initial_inbound_data";
          v33 = "%{public}s nw_frame_create failed, backtrace limit exceeded";
          goto LABEL_62;
        }
      }
    }
LABEL_63:
    if (!v30)
      goto LABEL_66;
    v37 = (char *)v30;
    goto LABEL_65;
  }
  __break(1u);
}

void sub_1835B90D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *nw_connection_create_with_connected_socket_internal(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v10;
  id v11;
  _QWORD *v12;
  id v13;
  _QWORD *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  int fd;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned int v24;
  id v25;
  id v26;
  _QWORD *v27;
  id *v28;
  id *v29;
  id v30;
  NWConcrete_nw_endpoint_flow *v31;
  id v32;
  _QWORD *v33;
  _BOOL4 v34;
  id v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  id v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  id v43;
  id v44;
  id v45;
  char v46;
  id *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  NSObject *v56;
  const char *v57;
  nw_endpoint_t v58;
  const char *logging_description;
  uint64_t v60;
  const char *v61;
  os_log_type_t v62;
  os_log_type_t v63;
  os_unfair_lock_s *v64;
  const char *v65;
  os_unfair_lock_s *v66;
  id *v67;
  id v68;
  void *v69;
  uint64_t v70;
  NSObject *v71;
  int v72;
  _QWORD *v73;
  id v74;
  os_log_type_t v75;
  os_log_type_t v76;
  _BOOL4 v77;
  os_log_type_t v78;
  void *v80;
  char *v81;
  NSObject *v82;
  os_log_type_t v83;
  void *v84;
  os_log_type_t v85;
  void *v86;
  char *v87;
  NSObject *v88;
  os_log_type_t v89;
  void *v90;
  os_log_type_t v91;
  char *backtrace_string;
  NSObject *v93;
  os_log_type_t v94;
  _BOOL4 v95;
  char *v96;
  os_log_type_t v97;
  _BOOL4 v98;
  void *v99;
  char *v100;
  NSObject *v101;
  os_log_type_t v102;
  void *v103;
  char *v104;
  NSObject *v105;
  os_log_type_t v106;
  char *v107;
  NSObject *v108;
  os_log_type_t v109;
  _BOOL4 v110;
  char *v111;
  os_log_type_t v112;
  _BOOL4 v113;
  os_log_type_t v114;
  os_log_type_t v115;
  char *v116;
  NSObject *v117;
  os_log_type_t v118;
  _BOOL4 v119;
  char *v120;
  NSObject *v121;
  os_log_type_t v122;
  _BOOL4 v123;
  os_log_type_t v124;
  os_log_type_t v125;
  os_log_type_t v126;
  os_log_type_t v127;
  const char *v128;
  const char *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  void *v133;
  void *v134;
  id v135;
  NSObject *v136;
  void *v137;
  id v138;
  _QWORD v139[5];
  _QWORD v140[5];
  char v141;
  os_log_type_t type;
  _BYTE buf[32];
  _BYTE v144[20];
  __int16 v145;
  const char *v146;
  __int16 v147;
  id v148;
  uint8_t v149[4];
  const char *v150;
  __int16 v151;
  id v152;
  __int16 v153;
  char *v154;
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  v10 = a1;
  v11 = a2;
  v136 = a3;
  v138 = a4;
  nw_allow_use_of_dispatch_internal();
  v137 = v10;
  if (!v11)
  {
    __nwlog_obj();
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
    v81 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v81, v149, &type))
      goto LABEL_196;
    if (v149[0] == 17)
    {
      __nwlog_obj();
      v82 = objc_claimAutoreleasedReturnValue();
      v83 = v149[0];
      if (os_log_type_enabled(v82, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_182FBE000, v82, v83, "%{public}s called with null parameters", buf, 0xCu);
      }
      goto LABEL_179;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v82 = objc_claimAutoreleasedReturnValue();
      v114 = v149[0];
      if (os_log_type_enabled(v82, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_182FBE000, v82, v114, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_179;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v93 = objc_claimAutoreleasedReturnValue();
    v94 = v149[0];
    v95 = os_log_type_enabled(v93, (os_log_type_t)v149[0]);
    if (backtrace_string)
    {
      if (v95)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v93, v94, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
      if (!v81)
        goto LABEL_198;
      goto LABEL_197;
    }
    if (v95)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
      _os_log_impl(&dword_182FBE000, v93, v94, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }
    goto LABEL_195;
  }
  if (!v10)
  {
    __nwlog_obj();
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
    v81 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v81, v149, &type))
      goto LABEL_196;
    if (v149[0] == 17)
    {
      __nwlog_obj();
      v82 = objc_claimAutoreleasedReturnValue();
      v85 = v149[0];
      if (os_log_type_enabled(v82, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_182FBE000, v82, v85, "%{public}s called with null fd_wrapper", buf, 0xCu);
      }
LABEL_179:

      goto LABEL_196;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v82 = objc_claimAutoreleasedReturnValue();
      v115 = v149[0];
      if (os_log_type_enabled(v82, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_182FBE000, v82, v115, "%{public}s called with null fd_wrapper, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_179;
    }
    v96 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v93 = objc_claimAutoreleasedReturnValue();
    v97 = v149[0];
    v98 = os_log_type_enabled(v93, (os_log_type_t)v149[0]);
    if (v96)
    {
      if (v98)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v96;
        _os_log_impl(&dword_182FBE000, v93, v97, "%{public}s called with null fd_wrapper, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v96);
LABEL_196:
      if (!v81)
      {
LABEL_198:
        v73 = 0;
        goto LABEL_121;
      }
LABEL_197:
      free(v81);
      goto LABEL_198;
    }
    if (v98)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
      _os_log_impl(&dword_182FBE000, v93, v97, "%{public}s called with null fd_wrapper, no backtrace", buf, 0xCu);
    }
LABEL_195:

    goto LABEL_196;
  }
  if (a5)
  {
    v12 = v11;
    v13 = *(id *)(v12[13] + 136);

    nw_context_assert_queue(v13);
  }
  v14 = v11;
  v14[12] = v14[12] & 0xFFFFFFFFFFFFFF3FLL | 0x80;

  v15 = v14;
  v16 = v14[12];

  if ((v16 & 0x1000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v137;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s prohibit joining for connection to connected fd %{public}@", buf, 0x16u);
    }

    v18 = v15;
    v14[12] |= 0x800000uLL;

  }
  if (!v138)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__24122;
    *(_QWORD *)v144 = __Block_byref_object_dispose__24123;
    *(_QWORD *)&v144[8] = 0;
    v140[0] = MEMORY[0x1E0C809B0];
    v140[1] = 3221225472;
    v140[2] = ___ZL51nw_connection_create_with_connected_socket_internalPU27objcproto16OS_nw_fd_wrapper8NSObjectPU27objcproto16OS_nw_parametersS_PU25objcproto14OS_nw_endpointS_S5_b_block_invoke;
    v140[3] = &unk_1E14AB578;
    v140[4] = buf;
    fd = nw_fd_wrapper_get_fd(v137, v140);
    v138 = (fd & 1) != 0 ? *(id *)(*(_QWORD *)&buf[8] + 40) : 0;
    _Block_object_dispose(buf, 8);

    if (!fd)
      goto LABEL_198;
  }
  v20 = v136;
  if (v136)
    goto LABEL_16;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  *(_QWORD *)&buf[24] = __Block_byref_object_copy__24122;
  *(_QWORD *)v144 = __Block_byref_object_dispose__24123;
  *(_QWORD *)&v144[8] = 0;
  v139[0] = MEMORY[0x1E0C809B0];
  v139[1] = 3221225472;
  v139[2] = ___ZL51nw_connection_create_with_connected_socket_internalPU27objcproto16OS_nw_fd_wrapper8NSObjectPU27objcproto16OS_nw_parametersS_PU25objcproto14OS_nw_endpointS_S5_b_block_invoke_2;
  v139[3] = &unk_1E14AB578;
  v139[4] = buf;
  nw_fd_wrapper_get_fd(v137, v139);
  v20 = *(id *)(*(_QWORD *)&buf[8] + 40);
  _Block_object_dispose(buf, 8);

  if (v20)
LABEL_16:
    nw_parameters_set_local_endpoint(v15, v20);
  v136 = v20;
  v21 = -[NWConcrete_nw_connection initWithEndpoint:parameters:identifier:]((void **)[NWConcrete_nw_connection alloc], v138, v15, 0);
  v22 = v21;
  if (!v21)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v35 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
    v36 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v36, v149, &type))
      goto LABEL_117;
    if (v149[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v37 = (id)gLogObj;
      v38 = v149[0];
      if (os_log_type_enabled(v37, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s [nw_connection initWithEndpoint:parameters:] failed", buf, 0xCu);
      }
      goto LABEL_113;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v37 = (id)gLogObj;
      v62 = v149[0];
      if (os_log_type_enabled(v37, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_182FBE000, v37, v62, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_113;
    }
    v48 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v49 = (id)gLogObj;
    v50 = v149[0];
    v51 = os_log_type_enabled(v49, (os_log_type_t)v149[0]);
    if (v48)
    {
      if (v51)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v48;
        _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_109:

      free(v48);
      if (!v36)
        goto LABEL_119;
      goto LABEL_118;
    }
    if (v51)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
      _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, no backtrace", buf, 0xCu);
    }
LABEL_116:

LABEL_117:
    if (!v36)
    {
LABEL_119:
      v73 = 0;
      goto LABEL_120;
    }
LABEL_118:
    free(v36);
    goto LABEL_119;
  }
  v23 = *(void **)(v21 + 16);
  v24 = *(_DWORD *)(v21 + 448);
  v25 = *(id *)(v21 + 8);
  v26 = v23;
  v135 = v137;
  v27 = (id)v22;
  v133 = v26;
  v134 = v25;
  if (!v25)
  {
    __nwlog_obj();
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
    v87 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v87, v149, &type))
      goto LABEL_211;
    if (v149[0] == 17)
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v89 = v149[0];
      if (os_log_type_enabled(v88, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_182FBE000, v88, v89, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_204;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v124 = v149[0];
      if (os_log_type_enabled(v88, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_182FBE000, v88, v124, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_204;
    }
    v107 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v108 = objc_claimAutoreleasedReturnValue();
    v109 = v149[0];
    v110 = os_log_type_enabled(v108, (os_log_type_t)v149[0]);
    if (v107)
    {
      if (v110)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v107;
        _os_log_impl(&dword_182FBE000, v108, v109, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v107);
      if (!v87)
        goto LABEL_213;
      goto LABEL_212;
    }
    if (v110)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
      _os_log_impl(&dword_182FBE000, v108, v109, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_210;
  }
  if (!v26)
  {
    __nwlog_obj();
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
    v87 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v87, v149, &type))
      goto LABEL_211;
    if (v149[0] == 17)
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v91 = v149[0];
      if (os_log_type_enabled(v88, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_182FBE000, v88, v91, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_204:

      goto LABEL_211;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v125 = v149[0];
      if (os_log_type_enabled(v88, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_182FBE000, v88, v125, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_204;
    }
    v111 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v108 = objc_claimAutoreleasedReturnValue();
    v112 = v149[0];
    v113 = os_log_type_enabled(v108, (os_log_type_t)v149[0]);
    if (v111)
    {
      if (v113)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v111;
        _os_log_impl(&dword_182FBE000, v108, v112, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v111);
LABEL_211:
      if (!v87)
      {
LABEL_213:
        v47 = 0;
        goto LABEL_91;
      }
LABEL_212:
      free(v87);
      goto LABEL_213;
    }
    if (v113)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
      _os_log_impl(&dword_182FBE000, v108, v112, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }
LABEL_210:

    goto LABEL_211;
  }
  v28 = -[NWConcrete_nw_endpoint_handler initWithEndpoint:parameters:reportCallback:context:parent:identifier:]((id *)[NWConcrete_nw_endpoint_handler alloc], v25, v26, nw_connection_endpoint_report_on_nw_queue, v27, 0, v24);
  v29 = v28;
  if (!v28)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v39 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
    v40 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if ((__nwlog_fault(v40, v149, &type) & 1) == 0)
      goto LABEL_76;
    if (v149[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = (id)gLogObj;
      v42 = v149[0];
      if (os_log_type_enabled(v41, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed", buf, 0xCu);
      }
    }
    else
    {
      if (type)
      {
        v52 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v53 = (id)gLogObj;
        v54 = v149[0];
        v55 = os_log_type_enabled(v53, (os_log_type_t)v149[0]);
        if (v52)
        {
          if (v55)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v52;
            _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v52);
          if (!v40)
            goto LABEL_89;
          goto LABEL_77;
        }
        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
          _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, no backtrace", buf, 0xCu);
        }

LABEL_76:
        if (!v40)
        {
LABEL_89:
          v47 = 0;
          goto LABEL_90;
        }
LABEL_77:
        free(v40);
        goto LABEL_89;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = (id)gLogObj;
      v63 = v149[0];
      if (os_log_type_enabled(v41, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_182FBE000, v41, v63, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_76;
  }
  *((_DWORD *)v28 + 29) = 2;
  v30 = v28[9];
  v31 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
  *((_BYTE *)v31 + 32) = *((_BYTE *)v31 + 32) & 0xFC | (v30 == 0) | 2;
  v32 = v29[31];
  v29[31] = v31;

  if (a5)
  {
    v33 = v133;
    v34 = (*(_WORD *)(v33[13] + 100) & 0x10) == 0;

  }
  else
  {
    v34 = 0;
  }
  v43 = v29[31];
  v44 = v135;
  if (v43)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_endpoint_flow_set_pre_connected_fd_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E14AB528;
    v45 = v43;
    *(_QWORD *)v144 = v45;
    if ((nw_fd_wrapper_get_fd(v44, buf) & 1) != 0)
    {
      *((_BYTE *)v45 + 34) |= 0x40u;
      objc_storeStrong((id *)v45 + 111, a1);
      if (v34)
        v46 = 0x80;
      else
        v46 = 0;
      *((_BYTE *)v45 + 35) = v46 & 0x80 | *((_BYTE *)v45 + 35) & 0x7F;
LABEL_40:

      goto LABEL_41;
    }
    __nwlog_obj();
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v149 = 136446466;
    v150 = "nw_endpoint_flow_set_pre_connected_fd";
    v151 = 2114;
    v152 = v44;
    v132 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v141 = 0;
    v104 = (char *)v132;
    if ((__nwlog_fault(v132, &type, &v141) & 1) == 0)
    {
LABEL_230:
      if (v104)
        free(v104);
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v105 = objc_claimAutoreleasedReturnValue();
      v106 = type;
      if (os_log_type_enabled(v105, type))
      {
        *(_DWORD *)v149 = 136446466;
        v150 = "nw_endpoint_flow_set_pre_connected_fd";
        v151 = 2114;
        v152 = v44;
        _os_log_impl(&dword_182FBE000, v105, v106, "%{public}s invalid pre_connected_fd: %{public}@", v149, 0x16u);
      }
    }
    else
    {
      if (v141)
      {
        v120 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v121 = objc_claimAutoreleasedReturnValue();
        v122 = type;
        v123 = os_log_type_enabled(v121, type);
        if (v120)
        {
          if (v123)
          {
            *(_DWORD *)v149 = 136446722;
            v150 = "nw_endpoint_flow_set_pre_connected_fd";
            v151 = 2114;
            v152 = v44;
            v153 = 2082;
            v154 = v120;
            _os_log_impl(&dword_182FBE000, v121, v122, "%{public}s invalid pre_connected_fd: %{public}@, dumping backtrace:%{public}s", v149, 0x20u);
          }

          free(v120);
        }
        else
        {
          if (v123)
          {
            *(_DWORD *)v149 = 136446466;
            v150 = "nw_endpoint_flow_set_pre_connected_fd";
            v151 = 2114;
            v152 = v44;
            _os_log_impl(&dword_182FBE000, v121, v122, "%{public}s invalid pre_connected_fd: %{public}@, no backtrace", v149, 0x16u);
          }

        }
        goto LABEL_229;
      }
      __nwlog_obj();
      v105 = objc_claimAutoreleasedReturnValue();
      v127 = type;
      if (os_log_type_enabled(v105, type))
      {
        *(_DWORD *)v149 = 136446466;
        v150 = "nw_endpoint_flow_set_pre_connected_fd";
        v151 = 2114;
        v152 = v44;
        _os_log_impl(&dword_182FBE000, v105, v127, "%{public}s invalid pre_connected_fd: %{public}@, backtrace limit exceeded", v149, 0x16u);
      }
    }

LABEL_229:
    v104 = (char *)v132;
    goto LABEL_230;
  }
  __nwlog_obj();
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_flow_set_pre_connected_fd";
  v131 = (const char *)_os_log_send_and_compose_impl();

  v149[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  v100 = (char *)v131;
  if (__nwlog_fault(v131, v149, &type))
  {
    if (v149[0] == 17)
    {
      __nwlog_obj();
      v101 = objc_claimAutoreleasedReturnValue();
      v102 = v149[0];
      if (os_log_type_enabled(v101, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_set_pre_connected_fd";
        _os_log_impl(&dword_182FBE000, v101, v102, "%{public}s called with null endpoint_flow", buf, 0xCu);
      }
    }
    else
    {
      if (type)
      {
        v116 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v117 = objc_claimAutoreleasedReturnValue();
        v118 = v149[0];
        v119 = os_log_type_enabled(v117, (os_log_type_t)v149[0]);
        if (v116)
        {
          if (v119)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_set_pre_connected_fd";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v116;
            _os_log_impl(&dword_182FBE000, v117, v118, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v116);
        }
        else
        {
          if (v119)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_set_pre_connected_fd";
            _os_log_impl(&dword_182FBE000, v117, v118, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
          }

        }
        goto LABEL_223;
      }
      __nwlog_obj();
      v101 = objc_claimAutoreleasedReturnValue();
      v126 = v149[0];
      if (os_log_type_enabled(v101, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_set_pre_connected_fd";
        _os_log_impl(&dword_182FBE000, v101, v126, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_223:
    v100 = (char *)v131;
  }
  if (v100)
    free(v100);
LABEL_41:

  if (a5 && !nw_endpoint_flow_pre_attach_protocols(v29, 0))
  {
    if ((*((_BYTE *)v29 + 268) & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v56 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        if ((*((_BYTE *)v29 + 268) & 1) != 0)
          v57 = "dry-run ";
        else
          v57 = "";
        v58 = nw_endpoint_handler_copy_endpoint(v29);
        logging_description = nw_endpoint_get_logging_description(v58);
        v60 = *((unsigned int *)v29 + 30);
        v130 = v57;
        v129 = logging_description;
        if (v60 > 5)
          v61 = "unknown-state";
        else
          v61 = off_1E149FC48[v60];
        v128 = v61;
        v64 = v29;
        v65 = "path";
        switch(*((_DWORD *)v29 + 29))
        {
          case 0:
            break;
          case 1:
            v65 = "resolver";
            break;
          case 2:
            v65 = nw_endpoint_flow_mode_string(v29[31]);
            break;
          case 3:
            v65 = "proxy";
            break;
          case 4:
            v65 = "fallback";
            break;
          case 5:
            v65 = "transform";
            break;
          default:
            v65 = "unknown-mode";
            break;
        }

        v66 = v64 + 28;
        v67 = v64;
        os_unfair_lock_lock(v64 + 28);
        v68 = v67[8];
        os_unfair_lock_unlock(v66);

        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v29 + 21;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v130;
        *(_WORD *)v144 = 2082;
        *(_QWORD *)&v144[2] = v129;
        *(_WORD *)&v144[10] = 2082;
        *(_QWORD *)&v144[12] = v128;
        v145 = 2082;
        v146 = v65;
        v147 = 2114;
        v148 = v68;
        _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] nw_endpoint_flow_pre_attach_protocols", buf, 0x48u);

      }
    }
    nw_endpoint_handler_cancel(v29, 1, 0);
    goto LABEL_89;
  }
  v47 = v29;
LABEL_90:

LABEL_91:
  v69 = (void *)v27[18];
  v27[18] = v47;

  v70 = *(_QWORD *)(v22 + 16);
  if (v70 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v70 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v71 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
    {
      v72 = *(_DWORD *)(v22 + 448);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v72;
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v135;
      _os_log_impl(&dword_182FBE000, v71, OS_LOG_TYPE_INFO, "%{public}s [C%u] create connection to connected fd %{public}@", buf, 0x1Cu);
    }

  }
  if (!v27[18])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v74 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
    v36 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v36, v149, &type))
      goto LABEL_117;
    if (v149[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v37 = (id)gLogObj;
      v75 = v149[0];
      if (os_log_type_enabled(v37, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_182FBE000, v37, v75, "%{public}s nw_endpoint_handler_create_with_connected_socket failed", buf, 0xCu);
      }
LABEL_113:

      goto LABEL_117;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v37 = (id)gLogObj;
      v78 = v149[0];
      if (os_log_type_enabled(v37, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_182FBE000, v37, v78, "%{public}s nw_endpoint_handler_create_with_connected_socket failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_113;
    }
    v48 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v49 = (id)gLogObj;
    v76 = v149[0];
    v77 = os_log_type_enabled(v49, (os_log_type_t)v149[0]);
    if (v48)
    {
      if (v77)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v48;
        _os_log_impl(&dword_182FBE000, v49, v76, "%{public}s nw_endpoint_handler_create_with_connected_socket failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_109;
    }
    if (v77)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_create_with_connected_socket_internal";
      _os_log_impl(&dword_182FBE000, v49, v76, "%{public}s nw_endpoint_handler_create_with_connected_socket failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_116;
  }
  v73 = v27;
LABEL_120:

LABEL_121:
  return v73;
}

void sub_1835BACA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

BOOL ___ZL51nw_connection_create_with_connected_socket_internalPU27objcproto16OS_nw_fd_wrapper8NSObjectPU27objcproto16OS_nw_parametersS_PU25objcproto14OS_nw_endpointS_S5_b_block_invoke(uint64_t a1, int a2)
{
  nw_endpoint_t v3;
  uint64_t v4;
  void *v5;

  v3 = nw_endpoint_create_with_peer_name(a2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;
}

uint64_t ___ZL51nw_connection_create_with_connected_socket_internalPU27objcproto16OS_nw_fd_wrapper8NSObjectPU27objcproto16OS_nw_parametersS_PU25objcproto14OS_nw_endpointS_S5_b_block_invoke_2(uint64_t a1, int a2)
{
  nw_endpoint_t v3;
  uint64_t v4;
  void *v5;

  v3 = nw_endpoint_create_with_sock_name(a2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

_QWORD *nw_connection_create_with_connected_socket(int a1, unsigned int a2)
{
  nw_parameters_t v4;
  _DWORD *do_not_guard;
  _QWORD *v6;

  nw_allow_use_of_dispatch_internal();
  v4 = nw_parameters_create();
  nw_parameters_set_data_mode(v4, a2);
  do_not_guard = nw_fd_wrapper_create_do_not_guard(a1);
  v6 = nw_connection_create_with_connected_socket_internal(do_not_guard, v4, 0, 0, 0);
  if (!v6)
    nw_fd_wrapper_relinquish_fd(do_not_guard);

  return v6;
}

void sub_1835BAEC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_connection_get_connected_socket_block_invoke_12(uint64_t a1, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return 1;
}

const char *nw_connection_state_to_string(unsigned int a1)
{
  if (a1 > 5)
    return "unknown";
  else
    return off_1E149DE10[a1];
}

void nw_connection_restart(nw_connection_t connection)
{
  nw_connection_t v1;
  nw_connection_t v2;
  NSObject *v3;
  int isa;
  const char *logging_description;
  Class v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[4];
  NSObject *v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  _BYTE v20[24];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = connection;
  v2 = v1;
  if (v1)
  {
    if (!nw_parameters_get_logging_disabled((uint64_t)v1[2].isa))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v3 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        isa = (int)v2[56].isa;
        logging_description = nw_endpoint_get_logging_description(v2[1].isa);
        v6 = v2[2].isa;
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)v20 = isa;
        *(_WORD *)&v20[4] = 2082;
        *(_QWORD *)&v20[6] = logging_description;
        *(_WORD *)&v20[14] = 2114;
        *(_QWORD *)&v20[16] = v6;
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEFAULT, "[C%u %{public}s %{public}@] restart", buf, 0x1Cu);
      }

    }
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_restart_block_invoke;
    v15[3] = &unk_1E14ACFD0;
    v16 = v2;
    nw_connection_async_if_needed(v16, v15);

    goto LABEL_9;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)v20 = "nw_connection_restart";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v8, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v20 = "nw_connection_restart";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)v20 = "nw_connection_restart";
          *(_WORD *)&v20[8] = 2082;
          *(_QWORD *)&v20[10] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v20 = "nw_connection_restart";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v20 = "nw_connection_restart";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_26:
  if (v8)
    free(v8);
LABEL_9:

}

void sub_1835BB2B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __nw_connection_restart_block_invoke(uint64_t a1)
{
  id v1;
  void *v2;
  NWConcrete_nw_endpoint_handler *v3;
  NWConcrete_nw_endpoint_handler *v4;
  OS_nw_parameters *parameters;
  OS_nw_parameters *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  nw_endpoint_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  NWConcrete_nw_endpoint_handler *v15;
  os_unfair_lock_s *v16;
  void *v17;
  const char *v18;
  os_unfair_lock_s *v19;
  id *v20;
  id v21;
  OS_nw_path *v22;
  OS_nw_path *current_path;
  NSObject *v24;
  const char *v25;
  nw_endpoint_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  nw_endpoint_t v32;
  const char *v33;
  uint64_t state;
  const char *v35;
  const char *v36;
  NWConcrete_nw_endpoint_handler *v37;
  os_unfair_lock_s *v38;
  const char *v39;
  NWConcrete_nw_endpoint_handler *v40;
  os_unfair_lock_s *v41;
  const char *v42;
  void *v43;
  os_unfair_lock_s *v44;
  id *v45;
  id v46;
  os_unfair_lock_s *v47;
  void *v48;
  os_unfair_lock_s *v49;
  id *v50;
  id v51;
  os_unfair_lock_s *v52;
  id v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  NWConcrete_nw_endpoint_handler *v57;
  char v58;
  char *v59;
  char *v60;
  char v61;
  const char *v62;
  nw_endpoint_t v63;
  const char *logging_description;
  unsigned int *v65;
  unsigned int *v66;
  uint64_t v67;
  const char *v68;
  char *backtrace_string;
  os_log_type_t v70;
  _BOOL4 v71;
  void **v72;
  void **v73;
  void *v74;
  const char *v75;
  os_log_type_t v76;
  void **v77;
  id v78;
  const char *v79;
  NSObject *log;
  const char *loga;
  const char *logb;
  char *logc;
  char v84;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v87;
  __int16 v88;
  char *id_str;
  __int16 v90;
  const char *v91;
  __int16 v92;
  const char *v93;
  __int16 v94;
  const char *v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  id v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v1 = *(id *)(*(_QWORD *)(a1 + 32) + 144);
  v2 = v1;
  if (v1)
  {
    v3 = (NWConcrete_nw_endpoint_handler *)v1;
    v4 = v3;
    parameters = v3->parameters;
    if (parameters)
    {
      v6 = parameters;
      v7 = *((_QWORD *)v6 + 12);

      if ((v7 & 0x4000000000) != 0)
      {
        v57 = v4;
        v58 = *((_BYTE *)v57 + 268);

        if ((v58 & 0x20) != 0)
          goto LABEL_25;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v8 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          v59 = v57;

          v60 = v59;
          v61 = *((_BYTE *)v57 + 268);

          if ((v61 & 1) != 0)
            v62 = "dry-run ";
          else
            v62 = "";
          v63 = nw_endpoint_handler_copy_endpoint(v60);
          logging_description = nw_endpoint_get_logging_description(v63);
          logc = v59 + 168;
          v65 = v60;
          v66 = v65;
          v67 = v65[30];
          if (v67 > 5)
            v68 = "unknown-state";
          else
            v68 = off_1E149FC48[v67];
          v79 = v68;

          v72 = v66;
          v73 = v72;
          v74 = v2;
          v75 = "path";
          switch(*((_DWORD *)v72 + 29))
          {
            case 0:
              break;
            case 1:
              v75 = "resolver";
              break;
            case 2:
              v75 = nw_endpoint_flow_mode_string(v72[31]);
              break;
            case 3:
              v75 = "proxy";
              break;
            case 4:
              v75 = "fallback";
              break;
            case 5:
              v75 = "transform";
              break;
            default:
              v75 = "unknown-mode";
              break;
          }

          v77 = v73;
          os_unfair_lock_lock((os_unfair_lock_t)v77 + 28);
          v78 = v77[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v77 + 28);

          *(_DWORD *)buf = 136447746;
          v87 = "nw_endpoint_handler_restart";
          v88 = 2082;
          id_str = logc;
          v90 = 2082;
          v91 = v62;
          v92 = 2082;
          v93 = logging_description;
          v94 = 2082;
          v95 = v79;
          v96 = 2082;
          v97 = v75;
          v98 = 2114;
          v99 = v78;
          _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x48u);

          v2 = v74;
        }
LABEL_24:

        goto LABEL_25;
      }
      if ((*((_BYTE *)v4 + 268) & 0x20) != 0)
      {
LABEL_25:
        if (v4->state == 1)
        {
          if ((nw_parameters_get_indefinite(v4->parameters) & 1) != 0)
          {
            v4->event = (nw_endpoint_handler_event_s)262145;
            nw_endpoint_handler_report(v4, 0, &v4->event.domain, 0);
            v22 = (OS_nw_path *)nw_association_copy_current_path(v4->association, v4->parameters);
            os_unfair_lock_lock(&v4->lock);
            current_path = v4->current_path;
            v4->current_path = v22;

            os_unfair_lock_unlock(&v4->lock);
            nw_endpoint_handler_path_change(v4);
            goto LABEL_66;
          }
          if ((*((_BYTE *)v4 + 268) & 0x20) != 0)
            goto LABEL_66;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v24 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            if ((*((_BYTE *)v4 + 268) & 1) != 0)
              v31 = "dry-run ";
            else
              v31 = "";
            v32 = nw_endpoint_handler_copy_endpoint(v4);
            v33 = nw_endpoint_get_logging_description(v32);
            state = v4->state;
            v35 = v33;
            if (state > 5)
              v36 = "unknown-state";
            else
              v36 = off_1E149FC48[state];
            logb = v36;
            v40 = v4;
            v41 = (os_unfair_lock_s *)v40;
            v42 = "path";
            switch(v40->mode)
            {
              case 0:
                break;
              case 1:
                v42 = "resolver";
                break;
              case 2:
                v42 = nw_endpoint_flow_mode_string(v40->mode_handler);
                break;
              case 3:
                v42 = "proxy";
                break;
              case 4:
                v42 = "fallback";
                break;
              case 5:
                v42 = "transform";
                break;
              default:
                v42 = "unknown-mode";
                break;
            }

            v48 = v2;
            v49 = v41 + 28;
            v50 = v41;
            os_unfair_lock_lock(v41 + 28);
            v51 = v50[8];
            v52 = v49;
            v2 = v48;
            os_unfair_lock_unlock(v52);

            *(_DWORD *)buf = 136447746;
            v87 = "nw_endpoint_handler_restart";
            v88 = 2082;
            id_str = v4->id_str;
            v90 = 2082;
            v91 = v31;
            v92 = 2082;
            v93 = v35;
            v94 = 2082;
            v95 = logb;
            v96 = 2082;
            v97 = v42;
            v98 = 2114;
            v99 = v51;
            _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] skipping restart on non-indefinite connection", buf, 0x48u);

          }
        }
        else
        {
          if ((*((_BYTE *)v4 + 268) & 0x20) != 0)
            goto LABEL_66;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v24 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            if ((*((_BYTE *)v4 + 268) & 1) != 0)
              v25 = "dry-run ";
            else
              v25 = "";
            v26 = nw_endpoint_handler_copy_endpoint(v4);
            v27 = nw_endpoint_get_logging_description(v26);
            loga = v25;
            v28 = v4->state;
            v29 = v27;
            if (v28 > 5)
              v30 = "unknown-state";
            else
              v30 = off_1E149FC48[v28];
            v37 = v4;
            v38 = (os_unfair_lock_s *)v37;
            v39 = "path";
            switch(v37->mode)
            {
              case 0:
                break;
              case 1:
                v39 = "resolver";
                break;
              case 2:
                v39 = nw_endpoint_flow_mode_string(v37->mode_handler);
                break;
              case 3:
                v39 = "proxy";
                break;
              case 4:
                v39 = "fallback";
                break;
              case 5:
                v39 = "transform";
                break;
              default:
                v39 = "unknown-mode";
                break;
            }

            v43 = v2;
            v44 = v38 + 28;
            v45 = v38;
            os_unfair_lock_lock(v38 + 28);
            v46 = v45[8];
            v47 = v44;
            v2 = v43;
            os_unfair_lock_unlock(v47);

            *(_DWORD *)buf = 136447746;
            v87 = "nw_endpoint_handler_restart";
            v88 = 2082;
            id_str = v4->id_str;
            v90 = 2082;
            v91 = loga;
            v92 = 2082;
            v93 = v29;
            v94 = 2082;
            v95 = v30;
            v96 = 2082;
            v97 = v39;
            v98 = 2114;
            v99 = v46;
            _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] skipping restart due to wrong state", buf, 0x48u);

          }
        }

        goto LABEL_66;
      }
    }
    else
    {

      if ((*((_BYTE *)v4 + 268) & 0x20) != 0)
        goto LABEL_25;
    }
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v8 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      log = v8;
      if ((*((_BYTE *)v4 + 268) & 1) != 0)
        v9 = "dry-run ";
      else
        v9 = "";
      v10 = nw_endpoint_handler_copy_endpoint(v4);
      v11 = nw_endpoint_get_logging_description(v10);
      v12 = v4->state;
      v13 = v11;
      if (v12 > 5)
        v14 = "unknown-state";
      else
        v14 = off_1E149FC48[v12];
      v15 = v4;
      v16 = (os_unfair_lock_s *)v15;
      v17 = v2;
      v18 = "path";
      switch(v15->mode)
      {
        case 0:
          break;
        case 1:
          v18 = "resolver";
          break;
        case 2:
          v18 = nw_endpoint_flow_mode_string(v15->mode_handler);
          break;
        case 3:
          v18 = "proxy";
          break;
        case 4:
          v18 = "fallback";
          break;
        case 5:
          v18 = "transform";
          break;
        default:
          v18 = "unknown-mode";
          break;
      }

      v19 = v16 + 28;
      v20 = v16;
      os_unfair_lock_lock(v16 + 28);
      v21 = v20[8];
      os_unfair_lock_unlock(v19);

      *(_DWORD *)buf = 136447746;
      v87 = "nw_endpoint_handler_restart";
      v88 = 2082;
      id_str = v4->id_str;
      v90 = 2082;
      v91 = v9;
      v92 = 2082;
      v93 = v13;
      v94 = 2082;
      v95 = v14;
      v96 = 2082;
      v97 = v18;
      v98 = 2114;
      v99 = v21;
      v8 = log;
      _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x48u);

      v2 = v17;
    }
    goto LABEL_24;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v53 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v87 = "nw_endpoint_handler_restart";
  v54 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v84 = 0;
  if (__nwlog_fault(v54, &type, &v84))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v55 = (id)gLogObj;
      v56 = type;
      if (os_log_type_enabled(v55, type))
      {
        *(_DWORD *)buf = 136446210;
        v87 = "nw_endpoint_handler_restart";
        _os_log_impl(&dword_182FBE000, v55, v56, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v84)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v55 = (id)gLogObj;
      v70 = type;
      v71 = os_log_type_enabled(v55, type);
      if (backtrace_string)
      {
        if (v71)
        {
          *(_DWORD *)buf = 136446466;
          v87 = "nw_endpoint_handler_restart";
          v88 = 2082;
          id_str = backtrace_string;
          _os_log_impl(&dword_182FBE000, v55, v70, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_95;
      }
      if (v71)
      {
        *(_DWORD *)buf = 136446210;
        v87 = "nw_endpoint_handler_restart";
        _os_log_impl(&dword_182FBE000, v55, v70, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v55 = (id)gLogObj;
      v76 = type;
      if (os_log_type_enabled(v55, type))
      {
        *(_DWORD *)buf = 136446210;
        v87 = "nw_endpoint_handler_restart";
        _os_log_impl(&dword_182FBE000, v55, v76, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_95:
  if (v54)
    free(v54);
LABEL_66:

}

void sub_1835BBE38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_connection_cancel_current_endpoint(nw_connection_t connection)
{
  nw_connection_t v1;
  nw_connection_t v2;
  NSObject *v3;
  int isa;
  const char *logging_description;
  Class v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[4];
  NSObject *v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  _BYTE v20[24];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = connection;
  v2 = v1;
  if (v1)
  {
    if (!nw_parameters_get_logging_disabled((uint64_t)v1[2].isa))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v3 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        isa = (int)v2[56].isa;
        logging_description = nw_endpoint_get_logging_description(v2[1].isa);
        v6 = v2[2].isa;
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)v20 = isa;
        *(_WORD *)&v20[4] = 2082;
        *(_QWORD *)&v20[6] = logging_description;
        *(_WORD *)&v20[14] = 2114;
        *(_QWORD *)&v20[16] = v6;
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEFAULT, "[C%u %{public}s %{public}@] cancel current endpoint", buf, 0x1Cu);
      }

    }
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_cancel_current_endpoint_block_invoke;
    v15[3] = &unk_1E14ACFD0;
    v16 = v2;
    nw_connection_async_if_needed(v16, v15);

    goto LABEL_9;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)v20 = "nw_connection_cancel_current_endpoint";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v8, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v20 = "nw_connection_cancel_current_endpoint";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)v20 = "nw_connection_cancel_current_endpoint";
          *(_WORD *)&v20[8] = 2082;
          *(_QWORD *)&v20[10] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v20 = "nw_connection_cancel_current_endpoint";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v20 = "nw_connection_cancel_current_endpoint";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_26:
  if (v8)
    free(v8);
LABEL_9:

}

void sub_1835BC298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __nw_connection_cancel_current_endpoint_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *p_super;
  int v5;
  NWConcrete_nw_endpoint_handler *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    v6 = nw_endpoint_handler_copy_connected_flow_handler(*(void **)(v2 + 144));
    if (v6)
    {
      p_super = &v6->super;
      nw_endpoint_handler_cancel(v6, 0, 1);
    }
    else
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (v7 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v7 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v8 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          v9 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          v10 = 136446466;
          v11 = "nw_connection_cancel_current_endpoint_block_invoke";
          v12 = 1024;
          v13 = v9;
          _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection had no connected handler, cannot cancel endpoint", (uint8_t *)&v10, 0x12u);
        }

      }
      p_super = 0;
    }
    goto LABEL_18;
  }
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    p_super = (id)gconnectionLogObj;
    if (os_log_type_enabled(p_super, OS_LOG_TYPE_INFO))
    {
      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      v10 = 136446466;
      v11 = "nw_connection_cancel_current_endpoint_block_invoke";
      v12 = 1024;
      v13 = v5;
      _os_log_impl(&dword_182FBE000, p_super, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection is not ready, cannot cancel endpoint", (uint8_t *)&v10, 0x12u);
    }
LABEL_18:

  }
}

void sub_1835BC4A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_connection_get_listener_protocol_on_nw_queue(void *a1, void *a2, int a3)
{
  void **v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t listener_protocol_on_nw_queue;
  NWConcrete_nw_endpoint_handler *v10;
  _QWORD *v11;
  NSObject *v12;
  int v13;
  _QWORD *v15;
  NSObject *v16;
  int v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  os_log_type_t v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_connection_get_listener_protocol_on_nw_queue";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v19, &type, &v32))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_connection_get_listener_protocol_on_nw_queue";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_62:
        if (!v19)
        {
LABEL_19:
          listener_protocol_on_nw_queue = 0;
          goto LABEL_20;
        }
LABEL_63:
        free(v19);
        goto LABEL_19;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  if (!v6)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_connection_get_listener_protocol_on_nw_queue";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v19, &type, &v32))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v32)
    {
      v27 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      v29 = os_log_type_enabled(v20, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_connection_get_listener_protocol_on_nw_queue";
          v36 = 2082;
          v37 = v27;
          _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v27);
        if (!v19)
          goto LABEL_19;
        goto LABEL_63;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v31, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_61;
  }
  nw_context_assert_queue(v5[3]);
  v8 = v5[18];
  if (!v8)
  {
    v11 = v5[2];
    if (v11 && !nw_path_parameters_get_logging_disabled(v11[13]))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v12 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = *((_DWORD *)v5 + 112);
        *(_DWORD *)buf = 136446466;
        v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        v36 = 1024;
        LODWORD(v37) = v13;
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection has no parent handler", buf, 0x12u);
      }

    }
    goto LABEL_19;
  }
  if (!a3)
    goto LABEL_7;
  listener_protocol_on_nw_queue = nw_endpoint_handler_get_listener_protocol_on_nw_queue(v8, v7);
  if (!listener_protocol_on_nw_queue)
  {
    v8 = v5[18];
LABEL_7:
    v10 = nw_endpoint_handler_copy_connected_flow_handler(v8);
    if (!v10)
    {
      if (!nw_endpoint_handler_has_connected_flow(v5[18]))
      {
        v15 = v5[2];
        if (v15 && !nw_path_parameters_get_logging_disabled(v15[13]))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v16 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            v17 = *((_DWORD *)v5 + 112);
            *(_DWORD *)buf = 136446466;
            v35 = "nw_connection_get_listener_protocol_on_nw_queue";
            v36 = 1024;
            LODWORD(v37) = v17;
            _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection has no available handler", buf, 0x12u);
          }

        }
        v10 = 0;
        listener_protocol_on_nw_queue = 0;
        goto LABEL_11;
      }
      v10 = v5[18];
    }
    listener_protocol_on_nw_queue = nw_endpoint_handler_get_listener_protocol_on_nw_queue(v10, v7);
LABEL_11:

  }
LABEL_20:

  return listener_protocol_on_nw_queue;
}

void sub_1835BCB2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_connection_copy_connected_parameters_with_protocol(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[4];
  os_unfair_lock_s *v16;
  id v17;
  _BYTE *v18;
  char v19;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v22 = __Block_byref_object_copy__24122;
    v23 = __Block_byref_object_dispose__24123;
    v24 = 0;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[2] = __nw_connection_copy_connected_parameters_with_protocol_block_invoke;
    v15[3] = &unk_1E14A2D98;
    v15[1] = 3221225472;
    v16 = v3;
    v18 = buf;
    v17 = v4;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_copy_connected_parameters_with_protocol_block_invoke((uint64_t)v15);
    os_unfair_lock_unlock(v3 + 34);
    v5 = *(id *)(*(_QWORD *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_copy_connected_parameters_with_protocol";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v8, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_connected_parameters_with_protocol";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_copy_connected_parameters_with_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_connected_parameters_with_protocol";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_connected_parameters_with_protocol";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_3:

  return v5;
}

void __nw_connection_copy_connected_parameters_with_protocol_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    v6 = nw_endpoint_handler_copy_connected_parameters_with_protocol(*(void **)(v2 + 144), *(void **)(a1 + 40));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  else
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        v9 = 136446466;
        v10 = "nw_connection_copy_connected_parameters_with_protocol_block_invoke";
        v11 = 1024;
        v12 = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client called nw_connection_copy_connected_parameters_with_protocol on unconnected nw_connection", (uint8_t *)&v9, 0x12u);
      }

    }
  }
}

BOOL nw_connection_uses_sleep_proxy(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v19 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_uses_sleep_proxy_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v14 = v1;
    v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_uses_sleep_proxy_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_uses_sleep_proxy";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_uses_sleep_proxy";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_uses_sleep_proxy";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_uses_sleep_proxy";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_uses_sleep_proxy";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_uses_sleep_proxy_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = nw_endpoint_handler_uses_sleep_proxy(*(void **)(v2 + 144));
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        v6 = 136446466;
        v7 = "nw_connection_uses_sleep_proxy_block_invoke";
        v8 = 1024;
        v9 = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client called nw_connection_uses_sleep_proxy on unconnected nw_connection", (uint8_t *)&v6, 0x12u);
      }

    }
  }
}

uint64_t nw_connection_get_flow_id_on_nw_queue(void *a1, _OWORD *a2)
{
  void **v3;
  void **v4;
  uint64_t flow_id;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    nw_context_assert_queue(v3[3]);
    flow_id = nw_endpoint_handler_get_flow_id(v4[18], a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_connection_get_flow_id_on_nw_queue";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_connection_get_flow_id_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_connection_get_flow_id_on_nw_queue";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_connection_get_flow_id_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_connection_get_flow_id_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
  flow_id = 0;
LABEL_3:

  return flow_id;
}

void sub_1835BD710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint32_t nw_connection_get_maximum_datagram_size(nw_connection_t connection)
{
  NSObject *v1;
  NSObject *v2;
  nw_path_t v3;
  nw_path_t v4;
  uint32_t maximum_datagram_size;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = connection;
  v2 = v1;
  if (v1)
  {
    v3 = nw_connection_copy_current_path(v1);
    v4 = v3;
    if (v3)
      maximum_datagram_size = nw_path_get_maximum_datagram_size(v3);
    else
      maximum_datagram_size = 1500;

    goto LABEL_6;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_connection_get_maximum_datagram_size";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_connection_get_maximum_datagram_size";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_connection_get_maximum_datagram_size";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_connection_get_maximum_datagram_size";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_connection_get_maximum_datagram_size";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v8)
    free(v8);
  maximum_datagram_size = 0;
LABEL_6:

  return maximum_datagram_size;
}

void sub_1835BD9D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_connection_copy_host_endpoint(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v19 = __Block_byref_object_copy__24122;
    v20 = __Block_byref_object_dispose__24123;
    v21 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_copy_host_endpoint_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v14 = v1;
    v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_host_endpoint_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(id *)(*(_QWORD *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_copy_host_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_host_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_copy_host_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_host_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_host_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_copy_host_endpoint_block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *p_super;
  NWConcrete_nw_endpoint_handler *v5;
  NSObject *v6;
  id *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 144);
  v3 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    p_super = v2;
    if ((*(_BYTE *)(v3 + 109) & 0x40) == 0
      || (v5 = nw_endpoint_handler_copy_connected_flow_handler(v2), p_super, (p_super = &v5->super) != 0))
    {
      while (1)
      {
        v6 = nw_endpoint_handler_copy_endpoint(p_super);
        if (nw_endpoint_get_type(v6) == nw_endpoint_type_host)
          break;
        v7 = p_super;
        p_super = v7[9];

        if (!p_super)
          return;
      }
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v6;

      goto LABEL_14;
    }
  }
  else
  {
    v8 = *(_QWORD *)(v3 + 16);
    if (v8 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v8 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      p_super = (id)gconnectionLogObj;
      if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
      {
        v9 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        v12 = 136446466;
        v13 = "nw_connection_copy_host_endpoint_block_invoke";
        v14 = 1024;
        v15 = v9;
        _os_log_impl(&dword_182FBE000, p_super, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client error, called nw_connection_copy_host_endpoint on connection in wrong state", (uint8_t *)&v12, 0x12u);
      }
LABEL_14:

    }
  }
}

void sub_1835BDEC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_connection_add_extra_interface_option_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  void *v6;
  NWConcrete_nw_endpoint_handler *v7;
  id v8;
  NWConcrete_nw_endpoint_handler *v9;
  uint64_t mode;
  _QWORD *v11;
  NWConcrete_nw_endpoint_handler *v12;
  char v13;
  NSObject *v14;
  NWConcrete_nw_endpoint_handler *v15;
  NWConcrete_nw_endpoint_handler *v16;
  char v17;
  const char *v18;
  nw_endpoint_t v19;
  char *v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  const char *v24;
  id v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  const char *v34;
  void **v35;
  void **v36;
  const char *v37;
  os_log_type_t v38;
  const char *v39;
  const char *v40;
  void **v41;
  id v42;
  NWConcrete_nw_endpoint_mode_handler *v43;
  void *v44;
  NSObject *v45;
  const char *v46;
  id v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  id v51;
  void *v52;
  void *v53;
  char v54;
  NWConcrete_nw_endpoint_handler *v55;
  _BOOL4 v56;
  NWConcrete_nw_endpoint_handler *v57;
  NWConcrete_nw_endpoint_handler *v58;
  _BOOL4 v59;
  const char *v60;
  nw_endpoint_t v61;
  const char *v62;
  unsigned int *v63;
  unsigned int *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(const char *, char *, id);
  void **v73;
  const char *v74;
  void **v75;
  id v76;
  void *v77;
  os_log_type_t v78;
  const char *v79;
  const char *v80;
  nw_endpoint_t v81;
  const char *v82;
  const char *v83;
  const char *v84;
  id v85;
  void *v86;
  const char *v87;
  char *v88;
  NSObject *v89;
  os_log_type_t v90;
  const char *v91;
  char *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  const char *id_string;
  const char *v96;
  nw_endpoint_t v97;
  const char *logging_description;
  const char *v99;
  const char *v100;
  id v101;
  void *v102;
  os_log_type_t v103;
  char *backtrace_string;
  NSObject *v105;
  _BOOL4 v106;
  const char *v107;
  os_log_type_t v108;
  char *v109;
  os_log_type_t v110;
  _BOOL4 v111;
  os_log_type_t v112;
  const char *v113;
  const char *v114;
  os_log_type_t v115;
  os_log_type_t v116;
  const char *v117;
  const char *v118;
  NWConcrete_nw_endpoint_handler *v119;
  void *v120;
  NWConcrete_nw_endpoint_handler *v121;
  char v122;
  os_log_type_t v123;
  uint64_t v124;
  char v125;
  os_log_type_t type[8];
  char v127;
  uint8_t buf[4];
  const char *v129;
  __int16 v130;
  char *id_str;
  __int16 v132;
  const char *v133;
  __int16 v134;
  void *v135;
  __int16 v136;
  const char *v137;
  __int16 v138;
  const char *v139;
  __int16 v140;
  id v141;
  __int16 v142;
  id v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    v121 = nw_endpoint_handler_copy_connected_flow_handler(*(void **)(v2 + 144));
    if (!v121)
    {
LABEL_120:

      return;
    }
    v6 = *(void **)(a1 + 40);
    v7 = v121;
    v8 = v6;
    v9 = v7;
    mode = v9->mode;

    v119 = v9;
    v120 = v8;
    if ((_DWORD)mode == 2)
    {
      if (v8)
      {
        v11 = &unk_1ECD84000;
        if (nw_endpoint_handler_get_minimize_logging(v9))
        {
          if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) != 0)
          {
LABEL_55:
            v43 = nw_endpoint_handler_copy_flow(v9);
            v44 = (void *)*((_QWORD *)v43 + 104);
            if (v44)
            {
              nw_path_flow_registration_add_extra_interface_option(v44, v8);
              v45 = nw_path_flow_registration_copy_path(*((void **)v43 + 104));
              os_unfair_lock_lock((os_unfair_lock_t)v43 + 220);
              objc_storeStrong((id *)v43 + 2, v45);
              if ((*((_BYTE *)v43 + 33) & 4) != 0)
                objc_storeStrong((id *)v43 + 1, v45);
              os_unfair_lock_unlock((os_unfair_lock_t)v43 + 220);
              v46 = (const char *)*((_QWORD *)v43 + 51);
              v47 = *((id *)v43 + 2);
              if (v46 && (v48 = *((_QWORD *)v46 + 3)) != 0)
              {
                if (*(_QWORD *)(v48 + 168))
                  v49 = v47 == 0;
                else
                  v49 = 1;
                v50 = !v49;

                if (v50)
                {
                  v51 = *((id *)v43 + 2);
                  v52 = v51;
                  v53 = (void *)*((_QWORD *)v46 + 5);
                  if (v53 == &nw_protocol_ref_counted_handle)
                  {
                    v67 = *((_QWORD *)v46 + 11);
                    if (v67)
                      *((_QWORD *)v46 + 11) = v67 + 1;
                    v54 = -1;
                  }
                  else
                  {
                    v54 = 0;
                  }
                  *(_QWORD *)type = v46;
                  v127 = v54;
                  v68 = (void *)*((_QWORD *)v43 + 52);
                  if (v68 == &nw_protocol_ref_counted_handle)
                  {
                    v70 = *((_QWORD *)v43 + 58);
                    if (v70)
                      *((_QWORD *)v43 + 58) = v70 + 1;
                    v69 = -1;
                  }
                  else
                  {
                    v69 = 0;
                  }
                  v124 = (uint64_t)v43 + 376;
                  v125 = v69;
                  if (v51)
                  {
                    v71 = *((_QWORD *)v46 + 3);
                    if (v71)
                    {
                      v72 = *(void (**)(const char *, char *, id))(v71 + 168);
                      if (v72)
                      {
                        v72(v46, (char *)v43 + 376, v51);
LABEL_91:
                        if (v68 == &nw_protocol_ref_counted_handle)
                          nw::release_if_needed<nw_protocol *>(&v124);
                        if (v53 == &nw_protocol_ref_counted_handle)
                          nw::release_if_needed<nw_protocol *>((uint64_t *)type);

                        goto LABEL_117;
                      }
                    }
                    __nwlog_obj();
                    v86 = (void *)objc_claimAutoreleasedReturnValue();
                    v87 = (const char *)*((_QWORD *)v46 + 2);
                    *(_DWORD *)buf = 136446722;
                    v129 = "__nw_protocol_updated_path";
                    if (!v87)
                      v87 = "invalid";
                    v130 = 2082;
                    id_str = (char *)v87;
                    v132 = 2048;
                    v133 = v46;
                    v88 = (char *)_os_log_send_and_compose_impl();

                    v123 = OS_LOG_TYPE_ERROR;
                    v122 = 0;
                    if (!__nwlog_fault(v88, &v123, &v122))
                      goto LABEL_193;
                    if (v123 == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v89 = objc_claimAutoreleasedReturnValue();
                      v90 = v123;
                      if (os_log_type_enabled(v89, v123))
                      {
                        v91 = (const char *)*((_QWORD *)v46 + 2);
                        if (!v91)
                          v91 = "invalid";
                        *(_DWORD *)buf = 136446722;
                        v129 = "__nw_protocol_updated_path";
                        v130 = 2082;
                        id_str = (char *)v91;
                        v132 = 2048;
                        v133 = v46;
                        _os_log_impl(&dword_182FBE000, v89, v90, "%{public}s protocol %{public}s (%p) has invalid updated_path callback", buf, 0x20u);
                      }
                    }
                    else
                    {
                      if (v122)
                      {
                        backtrace_string = (char *)__nw_create_backtrace_string();
                        __nwlog_obj();
                        v105 = objc_claimAutoreleasedReturnValue();
                        v116 = v123;
                        v106 = os_log_type_enabled(v105, v123);
                        if (backtrace_string)
                        {
                          if (v106)
                          {
                            v107 = (const char *)*((_QWORD *)v46 + 2);
                            if (!v107)
                              v107 = "invalid";
                            *(_DWORD *)buf = 136446978;
                            v129 = "__nw_protocol_updated_path";
                            v130 = 2082;
                            id_str = (char *)v107;
                            v132 = 2048;
                            v133 = v46;
                            v134 = 2082;
                            v135 = backtrace_string;
                            _os_log_impl(&dword_182FBE000, v105, v116, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
                          }

                          free(backtrace_string);
                        }
                        else
                        {
                          if (v106)
                          {
                            v114 = (const char *)*((_QWORD *)v46 + 2);
                            if (!v114)
                              v114 = "invalid";
                            *(_DWORD *)buf = 136446722;
                            v129 = "__nw_protocol_updated_path";
                            v130 = 2082;
                            id_str = (char *)v114;
                            v132 = 2048;
                            v133 = v46;
                            _os_log_impl(&dword_182FBE000, v105, v116, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, no backtrace", buf, 0x20u);
                          }

                        }
LABEL_193:
                        if (!v88)
                          goto LABEL_91;
LABEL_194:
                        free(v88);
                        goto LABEL_91;
                      }
                      __nwlog_obj();
                      v89 = objc_claimAutoreleasedReturnValue();
                      v112 = v123;
                      if (os_log_type_enabled(v89, v123))
                      {
                        v113 = (const char *)*((_QWORD *)v46 + 2);
                        if (!v113)
                          v113 = "invalid";
                        *(_DWORD *)buf = 136446722;
                        v129 = "__nw_protocol_updated_path";
                        v130 = 2082;
                        id_str = (char *)v113;
                        v132 = 2048;
                        v133 = v46;
                        _os_log_impl(&dword_182FBE000, v89, v112, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, backtrace limit exceeded", buf, 0x20u);
                      }
                    }
                  }
                  else
                  {
                    __nwlog_obj();
                    v102 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446210;
                    v129 = "__nw_protocol_updated_path";
                    v88 = (char *)_os_log_send_and_compose_impl();

                    v123 = OS_LOG_TYPE_ERROR;
                    v122 = 0;
                    if (!__nwlog_fault(v88, &v123, &v122))
                      goto LABEL_193;
                    if (v123 == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v89 = objc_claimAutoreleasedReturnValue();
                      v103 = v123;
                      if (os_log_type_enabled(v89, v123))
                      {
                        *(_DWORD *)buf = 136446210;
                        v129 = "__nw_protocol_updated_path";
                        _os_log_impl(&dword_182FBE000, v89, v103, "%{public}s called with null path", buf, 0xCu);
                      }
                    }
                    else if (v122)
                    {
                      v109 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v89 = objc_claimAutoreleasedReturnValue();
                      v110 = v123;
                      v111 = os_log_type_enabled(v89, v123);
                      if (v109)
                      {
                        if (v111)
                        {
                          *(_DWORD *)buf = 136446466;
                          v129 = "__nw_protocol_updated_path";
                          v130 = 2082;
                          id_str = v109;
                          _os_log_impl(&dword_182FBE000, v89, v110, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v109);
                        if (!v88)
                          goto LABEL_91;
                        goto LABEL_194;
                      }
                      if (v111)
                      {
                        *(_DWORD *)buf = 136446210;
                        v129 = "__nw_protocol_updated_path";
                        _os_log_impl(&dword_182FBE000, v89, v110, "%{public}s called with null path, no backtrace", buf, 0xCu);
                      }
                    }
                    else
                    {
                      __nwlog_obj();
                      v89 = objc_claimAutoreleasedReturnValue();
                      v115 = v123;
                      if (os_log_type_enabled(v89, v123))
                      {
                        *(_DWORD *)buf = 136446210;
                        v129 = "__nw_protocol_updated_path";
                        _os_log_impl(&dword_182FBE000, v89, v115, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
                      }
                    }
                  }

                  goto LABEL_193;
                }
              }
              else
              {

              }
            }
            else if (nw_endpoint_handler_get_minimize_logging(v9))
            {
              if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) != 0)
                goto LABEL_118;
              if (v11[413] != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v45 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
              {
                id_string = nw_endpoint_handler_get_id_string(v119);
                v96 = nw_endpoint_handler_dry_run_string(v119);
                v97 = nw_endpoint_handler_copy_endpoint(v119);
                logging_description = nw_endpoint_get_logging_description(v97);
                v99 = nw_endpoint_handler_state_string(v119);
                v100 = nw_endpoint_handler_mode_string(v119);
                v101 = nw_endpoint_handler_copy_current_path(v119);
                *(_DWORD *)buf = 136447746;
                v129 = "nw_endpoint_handler_add_extra_interface_option";
                v130 = 2082;
                id_str = (char *)id_string;
                v132 = 2082;
                v133 = v96;
                v134 = 2082;
                v135 = (void *)logging_description;
                v136 = 2082;
                v137 = v99;
                v138 = 2082;
                v139 = v100;
                v140 = 2114;
                v141 = v101;
                _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping adding extra interface option, no active flow registration", buf, 0x48u);

              }
            }
            else
            {
              v55 = v9;
              v56 = (*((_BYTE *)v55 + 268) & 0x20) == 0;

              if (!v56)
              {
LABEL_118:

                goto LABEL_119;
              }
              if (v11[413] != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v45 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
              {
                v57 = v55;

                v58 = v57;
                v59 = (*((_BYTE *)v55 + 268) & 1) == 0;

                if (v59)
                  v60 = "";
                else
                  v60 = "dry-run ";
                v61 = nw_endpoint_handler_copy_endpoint(v58);
                v62 = nw_endpoint_get_logging_description(v61);
                v63 = v58;
                v64 = v63;
                v65 = v63[30];
                if (v65 > 5)
                  v66 = "unknown-state";
                else
                  v66 = off_1E149FC48[v65];

                v73 = v64;
                v74 = "path";
                switch(v119->mode)
                {
                  case 0:
                    break;
                  case 1:
                    v74 = "resolver";
                    break;
                  case 2:
                    v74 = nw_endpoint_flow_mode_string(v73[31]);
                    break;
                  case 3:
                    v74 = "proxy";
                    break;
                  case 4:
                    v74 = "fallback";
                    break;
                  case 5:
                    v74 = "transform";
                    break;
                  default:
                    v74 = "unknown-mode";
                    break;
                }
                v118 = v74;

                v75 = v73;
                os_unfair_lock_lock((os_unfair_lock_t)v75 + 28);
                v76 = v75[8];
                os_unfair_lock_unlock((os_unfair_lock_t)v75 + 28);

                *(_DWORD *)buf = 136447746;
                v129 = "nw_endpoint_handler_add_extra_interface_option";
                v130 = 2082;
                id_str = v57->id_str;
                v132 = 2082;
                v133 = v60;
                v134 = 2082;
                v135 = (void *)v62;
                v136 = 2082;
                v137 = v66;
                v138 = 2082;
                v139 = v118;
                v140 = 2114;
                v141 = v76;
                _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping adding extra interface option, no active flow registration", buf, 0x48u);

              }
            }
LABEL_117:

            goto LABEL_118;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v14 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            v79 = nw_endpoint_handler_get_id_string(v9);
            v80 = nw_endpoint_handler_dry_run_string(v9);
            v81 = nw_endpoint_handler_copy_endpoint(v9);
            v82 = nw_endpoint_get_logging_description(v81);
            v83 = nw_endpoint_handler_state_string(v119);
            v84 = nw_endpoint_handler_mode_string(v119);
            v85 = nw_endpoint_handler_copy_current_path(v119);
            *(_DWORD *)buf = 136448002;
            v129 = "nw_endpoint_handler_add_extra_interface_option";
            v130 = 2082;
            id_str = (char *)v79;
            v132 = 2082;
            v133 = v80;
            v134 = 2082;
            v135 = (void *)v82;
            v136 = 2082;
            v137 = v83;
            v138 = 2082;
            v139 = v84;
            v140 = 2114;
            v141 = v85;
            v142 = 2112;
            v143 = v8;
            _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding interface option details %@ to endpoint handler", buf, 0x52u);

            v11 = (_QWORD *)&unk_1ECD84000;
          }
        }
        else
        {
          v12 = v9;
          v13 = *((_BYTE *)v12 + 268);

          if ((v13 & 0x20) != 0)
            goto LABEL_55;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v14 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            v15 = v12;

            v16 = v15;
            v17 = *((_BYTE *)v12 + 268);

            if ((v17 & 1) != 0)
              v18 = "dry-run ";
            else
              v18 = "";
            v19 = nw_endpoint_handler_copy_endpoint(v16);
            v117 = nw_endpoint_get_logging_description(v19);
            v20 = v15->id_str;
            v21 = v16;
            v22 = v21;
            v23 = v21[30];
            if (v23 > 5)
              v24 = "unknown-state";
            else
              v24 = off_1E149FC48[v23];

            v35 = v22;
            v36 = v35;
            v37 = "path";
            switch(v9->mode)
            {
              case 0:
                break;
              case 1:
                v37 = "resolver";
                break;
              case 2:
                v37 = nw_endpoint_flow_mode_string(v35[31]);
                break;
              case 3:
                v37 = "proxy";
                break;
              case 4:
                v37 = "fallback";
                break;
              case 5:
                v37 = "transform";
                break;
              default:
                v37 = "unknown-mode";
                break;
            }

            v41 = v36;
            os_unfair_lock_lock((os_unfair_lock_t)v41 + 28);
            v42 = v41[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v41 + 28);

            *(_DWORD *)buf = 136448002;
            v129 = "nw_endpoint_handler_add_extra_interface_option";
            v130 = 2082;
            id_str = v20;
            v132 = 2082;
            v133 = v18;
            v134 = 2082;
            v135 = (void *)v117;
            v136 = 2082;
            v137 = v24;
            v138 = 2082;
            v139 = v37;
            v140 = 2114;
            v141 = v42;
            v142 = 2112;
            v143 = v120;
            _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding interface option details %@ to endpoint handler", buf, 0x52u);

            v11 = &unk_1ECD84000;
          }
        }

        v9 = v119;
        v8 = v120;
        goto LABEL_55;
      }
      __nwlog_obj();
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v129 = "nw_endpoint_handler_add_extra_interface_option";
      v27 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v124) = 0;
      if (__nwlog_fault(v27, type, &v124))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v28 = objc_claimAutoreleasedReturnValue();
          v78 = type[0];
          if (os_log_type_enabled(v28, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v129 = "nw_endpoint_handler_add_extra_interface_option";
            _os_log_impl(&dword_182FBE000, v28, v78, "%{public}s called with null interface_option_details", buf, 0xCu);
          }
        }
        else if ((_BYTE)v124)
        {
          v92 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v28 = objc_claimAutoreleasedReturnValue();
          v93 = type[0];
          v94 = os_log_type_enabled(v28, type[0]);
          if (v92)
          {
            if (v94)
            {
              *(_DWORD *)buf = 136446466;
              v129 = "nw_endpoint_handler_add_extra_interface_option";
              v130 = 2082;
              id_str = v92;
              _os_log_impl(&dword_182FBE000, v28, v93, "%{public}s called with null interface_option_details, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v92);
            if (!v27)
              goto LABEL_119;
            goto LABEL_110;
          }
          if (v94)
          {
            *(_DWORD *)buf = 136446210;
            v129 = "nw_endpoint_handler_add_extra_interface_option";
            _os_log_impl(&dword_182FBE000, v28, v93, "%{public}s called with null interface_option_details, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v28 = objc_claimAutoreleasedReturnValue();
          v108 = type[0];
          if (os_log_type_enabled(v28, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v129 = "nw_endpoint_handler_add_extra_interface_option";
            _os_log_impl(&dword_182FBE000, v28, v108, "%{public}s called with null interface_option_details, backtrace limit exceeded", buf, 0xCu);
          }
        }
LABEL_108:

      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (id)gLogObj;
      if (mode > 5)
        v26 = "unknown-mode";
      else
        v26 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v129 = "nw_endpoint_handler_add_extra_interface_option";
      v130 = 2082;
      id_str = (char *)v26;
      v132 = 2082;
      v133 = "flow";
      v27 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v124) = 0;
      if (__nwlog_fault(v27, type, &v124))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v28 = (id)gLogObj;
          v29 = type[0];
          if (os_log_type_enabled(v28, type[0]))
          {
            if (mode > 5)
              v30 = "unknown-mode";
            else
              v30 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446722;
            v129 = "nw_endpoint_handler_add_extra_interface_option";
            v130 = 2082;
            id_str = (char *)v30;
            v132 = 2082;
            v133 = "flow";
            _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
          }
        }
        else if ((_BYTE)v124)
        {
          v31 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v28 = (id)gLogObj;
          v32 = type[0];
          v33 = os_log_type_enabled(v28, type[0]);
          if (v31)
          {
            if (v33)
            {
              if (mode > 5)
                v34 = "unknown-mode";
              else
                v34 = off_1E149FC18[mode];
              *(_DWORD *)buf = 136446978;
              v129 = "nw_endpoint_handler_add_extra_interface_option";
              v130 = 2082;
              id_str = (char *)v34;
              v132 = 2082;
              v133 = "flow";
              v134 = 2082;
              v135 = v31;
              _os_log_impl(&dword_182FBE000, v28, v32, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v31);
            if (!v27)
              goto LABEL_119;
            goto LABEL_110;
          }
          if (v33)
          {
            if (mode > 5)
              v40 = "unknown-mode";
            else
              v40 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446722;
            v129 = "nw_endpoint_handler_add_extra_interface_option";
            v130 = 2082;
            id_str = (char *)v40;
            v132 = 2082;
            v133 = "flow";
            _os_log_impl(&dword_182FBE000, v28, v32, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v28 = (id)gLogObj;
          v38 = type[0];
          if (os_log_type_enabled(v28, type[0]))
          {
            if (mode > 5)
              v39 = "unknown-mode";
            else
              v39 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446722;
            v129 = "nw_endpoint_handler_add_extra_interface_option";
            v130 = 2082;
            id_str = (char *)v39;
            v132 = 2082;
            v133 = "flow";
            _os_log_impl(&dword_182FBE000, v28, v38, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
          }
        }
        goto LABEL_108;
      }
    }
    if (!v27)
    {
LABEL_119:

      goto LABEL_120;
    }
LABEL_110:
    free(v27);
    goto LABEL_119;
  }
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v129 = "nw_connection_add_extra_interface_option_block_invoke";
      v130 = 1024;
      LODWORD(id_str) = v5;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection is not ready, ignore", buf, 0x12u);
    }

  }
}

void sub_1835BF374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void __nw_connection_remove_extra_interface_option_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  void *v6;
  NWConcrete_nw_endpoint_handler *v7;
  id v8;
  NWConcrete_nw_endpoint_handler *v9;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v11;
  uint64_t v12;
  int minimize_logging;
  NWConcrete_nw_endpoint_handler *v14;
  char v15;
  NSObject *v16;
  NWConcrete_nw_endpoint_handler *v17;
  NWConcrete_nw_endpoint_handler *v18;
  char v19;
  const char *v20;
  nw_endpoint_t v21;
  const char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  id v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  const char *v38;
  NWConcrete_nw_endpoint_handler *v39;
  char v40;
  NSObject *v41;
  NWConcrete_nw_endpoint_handler *v42;
  NWConcrete_nw_endpoint_handler *v43;
  char v44;
  const char *v45;
  nw_endpoint_t v46;
  const char *v47;
  char *id_str;
  unsigned int *v49;
  unsigned int *v50;
  uint64_t v51;
  const char *v52;
  os_log_type_t v53;
  const char *v54;
  void **v55;
  void **v56;
  int v57;
  const char *v58;
  const char *v59;
  const char *v60;
  void **v61;
  void **v62;
  const char *v63;
  void **v64;
  id v65;
  const char *v66;
  id v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  id v71;
  void *v72;
  void *v73;
  char v74;
  uint64_t v75;
  void *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(const char *, char *, id);
  void **v81;
  id v82;
  void *v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  const char *v87;
  nw_endpoint_t v88;
  const char *v89;
  const char *v90;
  const char *v91;
  id v92;
  void *v93;
  const char *v94;
  NSObject *v95;
  os_log_type_t v96;
  const char *v97;
  char *v98;
  os_log_type_t v99;
  _BOOL4 v100;
  const char *v101;
  nw_endpoint_t v102;
  const char *logging_description;
  const char *v104;
  const char *v105;
  id v106;
  void *v107;
  os_log_type_t v108;
  char *backtrace_string;
  NSObject *v110;
  _BOOL4 v111;
  const char *v112;
  os_log_type_t v113;
  char *v114;
  _BOOL4 v115;
  os_log_type_t v116;
  const char *v117;
  const char *v118;
  os_log_type_t v119;
  os_log_type_t v120;
  os_log_type_t v121;
  const char *v122;
  const char *v123;
  NWConcrete_nw_endpoint_handler *v124;
  const char *v125;
  void *v126;
  const char *id_string;
  id v128;
  NWConcrete_nw_endpoint_handler *v129;
  char v130;
  os_log_type_t v131;
  uint64_t v132;
  char v133;
  os_log_type_t type[8];
  char v135;
  uint8_t buf[4];
  const char *v137;
  __int16 v138;
  void *v139;
  __int16 v140;
  const char *v141;
  __int16 v142;
  void *v143;
  __int16 v144;
  const char *v145;
  __int16 v146;
  const char *v147;
  __int16 v148;
  id v149;
  __int16 v150;
  id v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    v129 = nw_endpoint_handler_copy_connected_flow_handler(*(void **)(v2 + 144));
    if (!v129)
    {
LABEL_120:

      return;
    }
    v6 = *(void **)(a1 + 40);
    v7 = v129;
    v8 = v6;
    v9 = v7;
    mode = v9->mode;

    if ((_DWORD)mode == 2)
    {
      if (v8)
      {
        v128 = v8;
        v11 = nw_endpoint_handler_copy_flow(v9);
        v12 = *((_QWORD *)v11 + 104);
        minimize_logging = nw_endpoint_handler_get_minimize_logging(v9);
        if (!v12)
        {
          if (minimize_logging)
          {
            if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) != 0)
              goto LABEL_118;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v41 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_endpoint_handler_get_id_string(v9);
              v101 = nw_endpoint_handler_dry_run_string(v9);
              v102 = nw_endpoint_handler_copy_endpoint(v9);
              logging_description = nw_endpoint_get_logging_description(v102);
              v104 = nw_endpoint_handler_state_string(v9);
              v105 = nw_endpoint_handler_mode_string(v9);
              v106 = nw_endpoint_handler_copy_current_path(v9);
              *(_DWORD *)buf = 136448002;
              v137 = "nw_endpoint_handler_remove_extra_interface_option";
              v138 = 2082;
              v139 = (void *)id_string;
              v140 = 2082;
              v141 = v101;
              v142 = 2082;
              v143 = (void *)logging_description;
              v144 = 2082;
              v145 = v104;
              v146 = 2082;
              v147 = v105;
              v148 = 2114;
              v149 = v106;
              v150 = 2112;
              v151 = v128;
              _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping remove extra interface option %@, no active flow registration", buf, 0x52u);

            }
          }
          else
          {
            v39 = v9;
            v40 = *((_BYTE *)v39 + 268);

            if ((v40 & 0x20) != 0)
            {
LABEL_118:

              v28 = v128;
              goto LABEL_119;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v41 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
            {
              v42 = v39;

              v43 = v42;
              v44 = *((_BYTE *)v39 + 268);

              if ((v44 & 1) != 0)
                v45 = "dry-run ";
              else
                v45 = "";
              v46 = nw_endpoint_handler_copy_endpoint(v43);
              v47 = nw_endpoint_get_logging_description(v46);
              id_str = v42->id_str;
              v49 = v43;
              v50 = v49;
              v51 = v49[30];
              if (v51 > 5)
                v52 = "unknown-state";
              else
                v52 = off_1E149FC48[v51];
              v123 = v52;

              v61 = v50;
              v62 = v61;
              v63 = "path";
              switch(v9->mode)
              {
                case 0:
                  break;
                case 1:
                  v63 = "resolver";
                  break;
                case 2:
                  v63 = nw_endpoint_flow_mode_string(v61[31]);
                  break;
                case 3:
                  v63 = "proxy";
                  break;
                case 4:
                  v63 = "fallback";
                  break;
                case 5:
                  v63 = "transform";
                  break;
                default:
                  v63 = "unknown-mode";
                  break;
              }

              v81 = v62;
              os_unfair_lock_lock((os_unfair_lock_t)v81 + 28);
              v82 = v81[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v81 + 28);

              *(_DWORD *)buf = 136448002;
              v137 = "nw_endpoint_handler_remove_extra_interface_option";
              v138 = 2082;
              v139 = id_str;
              v140 = 2082;
              v141 = v45;
              v142 = 2082;
              v143 = (void *)v47;
              v144 = 2082;
              v145 = v123;
              v146 = 2082;
              v147 = v63;
              v148 = 2114;
              v149 = v82;
              v150 = 2112;
              v151 = v128;
              _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping remove extra interface option %@, no active flow registration", buf, 0x52u);

            }
          }
          goto LABEL_117;
        }
        if (minimize_logging)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) != 0)
          {
LABEL_76:
            nw_path_flow_registration_remove_extra_interface_option(*((void **)v11 + 104), v8);
            v41 = nw_path_flow_registration_copy_path(*((void **)v11 + 104));
            os_unfair_lock_lock((os_unfair_lock_t)v11 + 220);
            objc_storeStrong((id *)v11 + 2, v41);
            if ((*((_BYTE *)v11 + 33) & 4) != 0)
              objc_storeStrong((id *)v11 + 1, v41);
            os_unfair_lock_unlock((os_unfair_lock_t)v11 + 220);
            v66 = (const char *)*((_QWORD *)v11 + 51);
            v67 = *((id *)v11 + 2);
            if (v66 && (v68 = *((_QWORD *)v66 + 3)) != 0)
            {
              if (*(_QWORD *)(v68 + 168))
                v69 = v67 == 0;
              else
                v69 = 1;
              v70 = !v69;

              if (v70)
              {
                v71 = *((id *)v11 + 2);
                v72 = v71;
                v73 = (void *)*((_QWORD *)v66 + 5);
                if (v73 == &nw_protocol_ref_counted_handle)
                {
                  v75 = *((_QWORD *)v66 + 11);
                  if (v75)
                    *((_QWORD *)v66 + 11) = v75 + 1;
                  v74 = -1;
                }
                else
                {
                  v74 = 0;
                }
                *(_QWORD *)type = v66;
                v135 = v74;
                v76 = (void *)*((_QWORD *)v11 + 52);
                if (v76 == &nw_protocol_ref_counted_handle)
                {
                  v78 = *((_QWORD *)v11 + 58);
                  if (v78)
                    *((_QWORD *)v11 + 58) = v78 + 1;
                  v77 = -1;
                }
                else
                {
                  v77 = 0;
                }
                v132 = (uint64_t)v11 + 376;
                v133 = v77;
                if (v71)
                {
                  v79 = *((_QWORD *)v66 + 3);
                  if (v79)
                  {
                    v80 = *(void (**)(const char *, char *, id))(v79 + 168);
                    if (v80)
                    {
                      v80(v66, (char *)v11 + 376, v71);
LABEL_101:
                      if (v76 == &nw_protocol_ref_counted_handle)
                        nw::release_if_needed<nw_protocol *>(&v132);
                      if (v73 == &nw_protocol_ref_counted_handle)
                        nw::release_if_needed<nw_protocol *>((uint64_t *)type);

                      goto LABEL_117;
                    }
                  }
                  __nwlog_obj();
                  v93 = (void *)objc_claimAutoreleasedReturnValue();
                  v94 = (const char *)*((_QWORD *)v66 + 2);
                  *(_DWORD *)buf = 136446722;
                  v137 = "__nw_protocol_updated_path";
                  if (!v94)
                    v94 = "invalid";
                  v138 = 2082;
                  v139 = (void *)v94;
                  v140 = 2048;
                  v141 = v66;
                  v126 = (void *)_os_log_send_and_compose_impl();

                  v131 = OS_LOG_TYPE_ERROR;
                  v130 = 0;
                  if (!__nwlog_fault((const char *)v126, &v131, &v130))
                  {
LABEL_195:
                    if (v126)
                      free(v126);
                    goto LABEL_101;
                  }
                  if (v131 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v95 = objc_claimAutoreleasedReturnValue();
                    v96 = v131;
                    if (os_log_type_enabled(v95, v131))
                    {
                      v97 = (const char *)*((_QWORD *)v66 + 2);
                      if (!v97)
                        v97 = "invalid";
                      *(_DWORD *)buf = 136446722;
                      v137 = "__nw_protocol_updated_path";
                      v138 = 2082;
                      v139 = (void *)v97;
                      v140 = 2048;
                      v141 = v66;
                      _os_log_impl(&dword_182FBE000, v95, v96, "%{public}s protocol %{public}s (%p) has invalid updated_path callback", buf, 0x20u);
                    }
                  }
                  else
                  {
                    if (v130)
                    {
                      backtrace_string = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v110 = objc_claimAutoreleasedReturnValue();
                      v120 = v131;
                      v111 = os_log_type_enabled(v110, v131);
                      if (backtrace_string)
                      {
                        if (v111)
                        {
                          v112 = (const char *)*((_QWORD *)v66 + 2);
                          if (!v112)
                            v112 = "invalid";
                          *(_DWORD *)buf = 136446978;
                          v137 = "__nw_protocol_updated_path";
                          v138 = 2082;
                          v139 = (void *)v112;
                          v140 = 2048;
                          v141 = v66;
                          v142 = 2082;
                          v143 = backtrace_string;
                          _os_log_impl(&dword_182FBE000, v110, v120, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
                        }

                        free(backtrace_string);
                      }
                      else
                      {
                        if (v111)
                        {
                          v118 = (const char *)*((_QWORD *)v66 + 2);
                          if (!v118)
                            v118 = "invalid";
                          *(_DWORD *)buf = 136446722;
                          v137 = "__nw_protocol_updated_path";
                          v138 = 2082;
                          v139 = (void *)v118;
                          v140 = 2048;
                          v141 = v66;
                          _os_log_impl(&dword_182FBE000, v110, v120, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, no backtrace", buf, 0x20u);
                        }

                      }
                      goto LABEL_195;
                    }
                    __nwlog_obj();
                    v95 = objc_claimAutoreleasedReturnValue();
                    v116 = v131;
                    if (os_log_type_enabled(v95, v131))
                    {
                      v117 = (const char *)*((_QWORD *)v66 + 2);
                      if (!v117)
                        v117 = "invalid";
                      *(_DWORD *)buf = 136446722;
                      v137 = "__nw_protocol_updated_path";
                      v138 = 2082;
                      v139 = (void *)v117;
                      v140 = 2048;
                      v141 = v66;
                      _os_log_impl(&dword_182FBE000, v95, v116, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, backtrace limit exceeded", buf, 0x20u);
                    }
                  }
                }
                else
                {
                  __nwlog_obj();
                  v107 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446210;
                  v137 = "__nw_protocol_updated_path";
                  v126 = (void *)_os_log_send_and_compose_impl();

                  v131 = OS_LOG_TYPE_ERROR;
                  v130 = 0;
                  if (!__nwlog_fault((const char *)v126, &v131, &v130))
                    goto LABEL_195;
                  if (v131 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v95 = objc_claimAutoreleasedReturnValue();
                    v108 = v131;
                    if (os_log_type_enabled(v95, v131))
                    {
                      *(_DWORD *)buf = 136446210;
                      v137 = "__nw_protocol_updated_path";
                      _os_log_impl(&dword_182FBE000, v95, v108, "%{public}s called with null path", buf, 0xCu);
                    }
                  }
                  else if (v130)
                  {
                    v114 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v95 = objc_claimAutoreleasedReturnValue();
                    v121 = v131;
                    v115 = os_log_type_enabled(v95, v131);
                    if (v114)
                    {
                      if (v115)
                      {
                        *(_DWORD *)buf = 136446466;
                        v137 = "__nw_protocol_updated_path";
                        v138 = 2082;
                        v139 = v114;
                        _os_log_impl(&dword_182FBE000, v95, v121, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
                      }

                      free(v114);
                      goto LABEL_195;
                    }
                    if (v115)
                    {
                      *(_DWORD *)buf = 136446210;
                      v137 = "__nw_protocol_updated_path";
                      _os_log_impl(&dword_182FBE000, v95, v121, "%{public}s called with null path, no backtrace", buf, 0xCu);
                    }
                  }
                  else
                  {
                    __nwlog_obj();
                    v95 = objc_claimAutoreleasedReturnValue();
                    v119 = v131;
                    if (os_log_type_enabled(v95, v131))
                    {
                      *(_DWORD *)buf = 136446210;
                      v137 = "__nw_protocol_updated_path";
                      _os_log_impl(&dword_182FBE000, v95, v119, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
                    }
                  }
                }

                goto LABEL_195;
              }
            }
            else
            {

            }
LABEL_117:

            goto LABEL_118;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v16 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            v125 = nw_endpoint_handler_get_id_string(v9);
            v87 = nw_endpoint_handler_dry_run_string(v9);
            v88 = nw_endpoint_handler_copy_endpoint(v9);
            v89 = nw_endpoint_get_logging_description(v88);
            v90 = nw_endpoint_handler_state_string(v9);
            v91 = nw_endpoint_handler_mode_string(v9);
            v92 = nw_endpoint_handler_copy_current_path(v9);
            *(_DWORD *)buf = 136448002;
            v137 = "nw_endpoint_handler_remove_extra_interface_option";
            v138 = 2082;
            v139 = (void *)v125;
            v140 = 2082;
            v141 = v87;
            v142 = 2082;
            v143 = (void *)v89;
            v144 = 2082;
            v145 = v90;
            v146 = 2082;
            v147 = v91;
            v148 = 2114;
            v149 = v92;
            v150 = 2112;
            v151 = v128;
            _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Removing interface option details %@", buf, 0x52u);

          }
        }
        else
        {
          v14 = v9;
          v15 = *((_BYTE *)v14 + 268);

          if ((v15 & 0x20) != 0)
            goto LABEL_76;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v16 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            v17 = v14;

            v18 = v17;
            v19 = *((_BYTE *)v14 + 268);

            if ((v19 & 1) != 0)
              v20 = "dry-run ";
            else
              v20 = "";
            v21 = nw_endpoint_handler_copy_endpoint(v18);
            v22 = nw_endpoint_get_logging_description(v21);
            v23 = v17->id_str;
            v24 = v18;
            v25 = v24;
            v26 = v24[30];
            if (v26 > 5)
              v27 = "unknown-state";
            else
              v27 = off_1E149FC48[v26];
            v122 = v27;

            v55 = v25;
            v56 = v55;
            v124 = v9;
            v57 = v9->mode;
            v58 = v22;
            v59 = "path";
            switch(v57)
            {
              case 0:
                break;
              case 1:
                v59 = "resolver";
                break;
              case 2:
                v59 = nw_endpoint_flow_mode_string(v55[31]);
                break;
              case 3:
                v59 = "proxy";
                break;
              case 4:
                v59 = "fallback";
                break;
              case 5:
                v59 = "transform";
                break;
              default:
                v59 = "unknown-mode";
                break;
            }

            v64 = v56;
            os_unfair_lock_lock((os_unfair_lock_t)v64 + 28);
            v65 = v64[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v64 + 28);

            *(_DWORD *)buf = 136448002;
            v137 = "nw_endpoint_handler_remove_extra_interface_option";
            v138 = 2082;
            v139 = v23;
            v140 = 2082;
            v141 = v20;
            v142 = 2082;
            v143 = (void *)v58;
            v144 = 2082;
            v145 = v122;
            v146 = 2082;
            v147 = v59;
            v148 = 2114;
            v149 = v65;
            v150 = 2112;
            v151 = v128;
            _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Removing interface option details %@", buf, 0x52u);

            v9 = v124;
          }
        }

        v8 = v128;
        goto LABEL_76;
      }
      __nwlog_obj();
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v137 = "nw_endpoint_handler_remove_extra_interface_option";
      v84 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v132) = 0;
      if (__nwlog_fault(v84, type, &v132))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v85 = objc_claimAutoreleasedReturnValue();
          v86 = type[0];
          if (os_log_type_enabled(v85, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v137 = "nw_endpoint_handler_remove_extra_interface_option";
            _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s called with null details", buf, 0xCu);
          }
        }
        else if ((_BYTE)v132)
        {
          v98 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v85 = objc_claimAutoreleasedReturnValue();
          v99 = type[0];
          v100 = os_log_type_enabled(v85, type[0]);
          if (v98)
          {
            if (v100)
            {
              *(_DWORD *)buf = 136446466;
              v137 = "nw_endpoint_handler_remove_extra_interface_option";
              v138 = 2082;
              v139 = v98;
              _os_log_impl(&dword_182FBE000, v85, v99, "%{public}s called with null details, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v98);
            goto LABEL_176;
          }
          if (v100)
          {
            *(_DWORD *)buf = 136446210;
            v137 = "nw_endpoint_handler_remove_extra_interface_option";
            _os_log_impl(&dword_182FBE000, v85, v99, "%{public}s called with null details, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v85 = objc_claimAutoreleasedReturnValue();
          v113 = type[0];
          if (os_log_type_enabled(v85, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v137 = "nw_endpoint_handler_remove_extra_interface_option";
            _os_log_impl(&dword_182FBE000, v85, v113, "%{public}s called with null details, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_176:
      if (v84)
        free(v84);
      v28 = 0;
      goto LABEL_119;
    }
    v28 = v8;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v29 = (id)gLogObj;
    if (mode > 5)
      v30 = "unknown-mode";
    else
      v30 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    v137 = "nw_endpoint_handler_remove_extra_interface_option";
    v138 = 2082;
    v139 = (void *)v30;
    v140 = 2082;
    v141 = "flow";
    v31 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v132) = 0;
    if (__nwlog_fault(v31, type, &v132))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = (id)gLogObj;
        v33 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          if (mode > 5)
            v34 = "unknown-mode";
          else
            v34 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v137 = "nw_endpoint_handler_remove_extra_interface_option";
          v138 = 2082;
          v139 = (void *)v34;
          v140 = 2082;
          v141 = "flow";
          _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if ((_BYTE)v132)
      {
        v35 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = (id)gLogObj;
        v36 = type[0];
        v37 = os_log_type_enabled(v32, type[0]);
        if (v35)
        {
          if (v37)
          {
            if (mode > 5)
              v38 = "unknown-mode";
            else
              v38 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446978;
            v137 = "nw_endpoint_handler_remove_extra_interface_option";
            v138 = 2082;
            v139 = (void *)v38;
            v140 = 2082;
            v141 = "flow";
            v142 = 2082;
            v143 = v35;
            _os_log_impl(&dword_182FBE000, v32, v36, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v35);
          if (!v31)
            goto LABEL_119;
          goto LABEL_110;
        }
        if (v37)
        {
          if (mode > 5)
            v60 = "unknown-mode";
          else
            v60 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v137 = "nw_endpoint_handler_remove_extra_interface_option";
          v138 = 2082;
          v139 = (void *)v60;
          v140 = 2082;
          v141 = "flow";
          _os_log_impl(&dword_182FBE000, v32, v36, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = (id)gLogObj;
        v53 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          if (mode > 5)
            v54 = "unknown-mode";
          else
            v54 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v137 = "nw_endpoint_handler_remove_extra_interface_option";
          v138 = 2082;
          v139 = (void *)v54;
          v140 = 2082;
          v141 = "flow";
          _os_log_impl(&dword_182FBE000, v32, v53, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v31)
    {
LABEL_119:

      goto LABEL_120;
    }
LABEL_110:
    free(v31);
    goto LABEL_119;
  }
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v137 = "nw_connection_remove_extra_interface_option_block_invoke";
      v138 = 1024;
      LODWORD(v139) = v5;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection is not ready, ignore", buf, 0x12u);
    }

  }
}

void sub_1835C08F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void nw_connection_remove_all_interface_options(void *a1)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  _DWORD *v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 2);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = v2[112];
        *(_DWORD *)buf = 136446466;
        v19 = "nw_connection_remove_all_interface_options";
        v20 = 1024;
        LODWORD(v21) = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u] Removing paths from connection", buf, 0x12u);
      }

    }
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_connection_remove_all_interface_options_block_invoke;
    v14[3] = &unk_1E14ACFD0;
    v15 = v2;
    nw_connection_async_if_needed(v15, v14);

    goto LABEL_10;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_connection_remove_all_interface_options";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_remove_all_interface_options";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_connection_remove_all_interface_options";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_remove_all_interface_options";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_remove_all_interface_options";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_27:
  if (v7)
    free(v7);
LABEL_10:

}

void sub_1835C0D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void __nw_connection_remove_all_interface_options_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v1 + 109) & 0x40) != 0)
  {
    nw_endpoint_handler_remove_all_interface_options(*(void **)(v1 + 144));
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 16);
    if (v2 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v2 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        v6 = 136446466;
        v7 = "nw_connection_remove_all_interface_options_block_invoke";
        v8 = 1024;
        v9 = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection is not ready, ignore", (uint8_t *)&v6, 0x12u);
      }

    }
  }
}

void nw_connection_set_interface_use_callback(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  _QWORD aBlock[4];
  _QWORD *v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_connection_set_interface_use_callback";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (__nwlog_fault(v15, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_connection_set_interface_use_callback";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        v24 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            v35 = "nw_connection_set_interface_use_callback";
            v36 = 2082;
            v37 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_connection_set_interface_use_callback";
          _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_connection_set_interface_use_callback";
          _os_log_impl(&dword_182FBE000, v16, v28, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_40:
    if (v15)
      free(v15);
    goto LABEL_13;
  }
  v5 = v3[2];
  if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *((_DWORD *)v3 + 112);
      *(_DWORD *)buf = 136446466;
      v35 = "nw_connection_set_interface_use_callback";
      v36 = 1024;
      LODWORD(v37) = v7;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s [C%u] Setting interface use callback on connection", buf, 0x12u);
    }

  }
  if (v3[18])
  {
    v8 = _Block_copy(v4);
    v9 = (void *)v3[64];
    v3[64] = v8;

    v10 = (void *)v3[18];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_set_interface_use_callback_block_invoke;
    aBlock[3] = &unk_1E149DAB0;
    v31 = v3;
    v11 = v10;
    if (v11)
    {
      v12 = _Block_copy(aBlock);
      v13 = (void *)v11[6];
      v11[6] = v12;

LABEL_12:
      goto LABEL_13;
    }
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_endpoint_handler_set_migration_callback";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (__nwlog_fault(v19, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_handler_set_migration_callback";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v32)
      {
        v25 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        v27 = os_log_type_enabled(v20, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            v35 = "nw_endpoint_handler_set_migration_callback";
            v36 = 2082;
            v37 = v25;
            _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v25);
          goto LABEL_48;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_handler_set_migration_callback";
          _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_handler_set_migration_callback";
          _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_48:
    if (v19)
      free(v19);
    goto LABEL_12;
  }
LABEL_13:

}

void __nw_connection_set_interface_use_callback_block_invoke(uint64_t a1, void *a2)
{
  char *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  const char *v8;
  _BOOL4 v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      v8 = v4 + 104;
      if (!v4)
        v8 = "(null)";
      v19 = 136446722;
      v20 = "nw_connection_set_interface_use_callback_block_invoke";
      v21 = 1024;
      v22 = v7;
      v23 = 2080;
      v24 = v8;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s [C%u] Got migration callback interface %s", (uint8_t *)&v19, 0x1Cu);
    }

  }
  v9 = nw_interface_shallow_compare(v4, *(void **)(*(_QWORD *)(a1 + 32) + 520));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v9)
  {
    if (v10 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v10 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        v19 = 136446466;
        v20 = "nw_connection_set_interface_use_callback_block_invoke";
        v21 = 1024;
        v22 = v12;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s [C%u] No change in AWDL usage", (uint8_t *)&v19, 0x12u);
      }

    }
  }
  else
  {
    if (v10 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v10 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v13 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v14 = *(_QWORD *)(a1 + 32);
        v15 = *(_DWORD *)(v14 + 448);
        v16 = *(_QWORD *)(v14 + 520);
        if (v16)
          v17 = (const char *)(v16 + 104);
        else
          v17 = "(null)";
        v18 = v4 + 104;
        if (!v4)
          v18 = "(null)";
        v19 = 136446978;
        v20 = "nw_connection_set_interface_use_callback_block_invoke";
        v21 = 1024;
        v22 = v15;
        v23 = 2080;
        v24 = v17;
        v25 = 2080;
        v26 = v18;
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_INFO, "%{public}s [C%u] Changed from %s to %s", (uint8_t *)&v19, 0x26u);
      }

    }
    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 512) + 16))();
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 520), a2);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 109) |= 0x80u;
  }

}

void sub_1835C1798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_set_internet_fallback_endpoint(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  id v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[4];
  id v18;
  id v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  _WORD v25[17];

  *(_QWORD *)&v25[13] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 2);
    if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v6 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = *((_DWORD *)v3 + 112);
        *(_DWORD *)buf = 136446722;
        v23 = "nw_connection_set_internet_fallback_endpoint";
        v24 = 1024;
        *(_DWORD *)v25 = v7;
        v25[2] = 2112;
        *(_QWORD *)&v25[3] = v4;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s [C%u] Setting internet fallback endpoint %@", buf, 0x1Cu);
      }

    }
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __nw_connection_set_internet_fallback_endpoint_block_invoke;
    v17[3] = &unk_1E14ACE68;
    v18 = v3;
    v8 = v4;
    v19 = v8;
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 34);
    __nw_connection_set_internet_fallback_endpoint_block_invoke((uint64_t)v17);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 34);

    goto LABEL_10;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_connection_set_internet_fallback_endpoint";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v10, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_set_internet_fallback_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_connection_set_internet_fallback_endpoint";
          v24 = 2082;
          *(_QWORD *)v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_set_internet_fallback_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_set_internet_fallback_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_27:
  if (v10)
    free(v10);
LABEL_10:

}

void __nw_connection_set_internet_fallback_endpoint_block_invoke(uint64_t a1)
{
  _BOOL4 local_only;
  uint64_t v3;
  id v4;
  int v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  nw_multipath_service_t multipath_service;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  id v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  int v24;
  id v25;
  int v26;
  os_log_type_t v27;
  int v28;
  void *v29;
  uint64_t v30;
  char *v31;
  int v32;
  os_log_type_t v33;
  int v34;
  os_log_type_t v35;
  _BOOL4 v36;
  int v37;
  int v38;
  os_log_type_t v39;
  int v40;
  int v41;
  char v42;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  char *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  local_only = nw_parameters_get_local_only(*(nw_parameters_t *)(*(_QWORD *)(a1 + 32) + 16));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (local_only)
  {
    if (!v3 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
      return;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
    *(_DWORD *)buf = 136446466;
    v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
    v46 = 1024;
    v47 = v5;
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v6, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v7 = (id)gconnectionLogObj;
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          v9 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
          v46 = 1024;
          v47 = v9;
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s [C%u] Connection is local only", buf, 0x12u);
        }
LABEL_83:

        goto LABEL_84;
      }
      if (!v42)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v7 = (id)gconnectionLogObj;
        v33 = type;
        if (os_log_type_enabled(v7, type))
        {
          v34 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
          v46 = 1024;
          v47 = v34;
          _os_log_impl(&dword_182FBE000, v7, v33, "%{public}s [C%u] Connection is local only, backtrace limit exceeded", buf, 0x12u);
        }
        goto LABEL_83;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v7 = (id)gconnectionLogObj;
      v22 = type;
      v23 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          v38 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
          v46 = 1024;
          v47 = v38;
          _os_log_impl(&dword_182FBE000, v7, v22, "%{public}s [C%u] Connection is local only, no backtrace", buf, 0x12u);
        }
        goto LABEL_83;
      }
      if (v23)
      {
        v24 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        *(_DWORD *)buf = 136446722;
        v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
        v46 = 1024;
        v47 = v24;
        v48 = 2082;
        v49 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v22, "%{public}s [C%u] Connection is local only, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      goto LABEL_71;
    }
LABEL_84:
    if (!v6)
      return;
    goto LABEL_85;
  }
  multipath_service = nw_parameters_get_multipath_service((nw_parameters_t)v3);
  v11 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 16);
  if (multipath_service)
  {
    if ((nw_parameters_get_server_mode(v11) & 1) != 0)
    {
      v12 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(a1 + 40) && !*(_QWORD *)(v12 + 56))
      {
        v13 = *(_QWORD *)(v12 + 16);
        if (v13 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v13 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v14 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            v15 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
            *(_DWORD *)buf = 136446466;
            v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
            v46 = 1024;
            v47 = v15;
            _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s [C%u] Starting server side candidate manager", buf, 0x12u);
          }

        }
        v16 = nw_candidate_manager_create_with_connection(*(void **)(a1 + 32), 0);
        v17 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = v16;

        v12 = *(_QWORD *)(a1 + 32);
        if (!*(_QWORD *)(v12 + 56))
        {
          v18 = *(_QWORD *)(v12 + 16);
          if (!v18 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v18 + 104)))
            return;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v19 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
            *(_DWORD *)buf = 136446466;
            v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
            v46 = 1024;
            v47 = v20;
            _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Failed to create candidate manager", buf, 0x12u);
          }
          goto LABEL_31;
        }
      }
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 32);
    }
    v29 = *(void **)(v12 + 56);
    if (v29)
    {
      nw_candidate_manager_set_internet_fallback(v29, *(void **)(a1 + 40));
      return;
    }
    v30 = *(_QWORD *)(v12 + 16);
    if (!v30 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v30 + 104)))
      return;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v19 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v31 = *(char **)(a1 + 40);
      v32 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446722;
      v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
      v46 = 1024;
      v47 = v32;
      v48 = 2112;
      v49 = v31;
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s [C%u] No candidate manager present, can't set internet fallback %@", buf, 0x1Cu);
    }
LABEL_31:

    return;
  }
  if (!v11 || nw_path_parameters_get_logging_disabled(v11[13]))
    return;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v25 = (id)gconnectionLogObj;
  v26 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
  *(_DWORD *)buf = 136446466;
  v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
  v46 = 1024;
  v47 = v26;
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v42 = 0;
  if (!__nwlog_fault(v6, &type, &v42))
    goto LABEL_84;
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v7 = (id)gconnectionLogObj;
    v27 = type;
    if (os_log_type_enabled(v7, type))
    {
      v28 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
      v46 = 1024;
      v47 = v28;
      _os_log_impl(&dword_182FBE000, v7, v27, "%{public}s [C%u] Connection does not support multi-path", buf, 0x12u);
    }
    goto LABEL_83;
  }
  if (!v42)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v7 = (id)gconnectionLogObj;
    v39 = type;
    if (os_log_type_enabled(v7, type))
    {
      v40 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
      v46 = 1024;
      v47 = v40;
      _os_log_impl(&dword_182FBE000, v7, v39, "%{public}s [C%u] Connection does not support multi-path, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_83;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v7 = (id)gconnectionLogObj;
  v35 = type;
  v36 = os_log_type_enabled(v7, type);
  if (!backtrace_string)
  {
    if (v36)
    {
      v41 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
      v46 = 1024;
      v47 = v41;
      _os_log_impl(&dword_182FBE000, v7, v35, "%{public}s [C%u] Connection does not support multi-path, no backtrace", buf, 0x12u);
    }
    goto LABEL_83;
  }
  if (v36)
  {
    v37 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
    *(_DWORD *)buf = 136446722;
    v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
    v46 = 1024;
    v47 = v37;
    v48 = 2082;
    v49 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v7, v35, "%{public}s [C%u] Connection does not support multi-path, dumping backtrace:%{public}s", buf, 0x1Cu);
  }
LABEL_71:

  free(backtrace_string);
  if (v6)
LABEL_85:
    free(v6);
}

void nw_connection_reset_traffic_class(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  id v14;
  int v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_reset_traffic_class_block_invoke;
    v13[3] = &unk_1E14AB378;
    v14 = v3;
    v15 = a2;
    nw_connection_async_if_needed(v14, v13);

    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_connection_reset_traffic_class";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_reset_traffic_class";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_connection_reset_traffic_class";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_reset_traffic_class";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_reset_traffic_class";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void sub_1835C2764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void __nw_connection_reset_traffic_class_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    nw_endpoint_handler_reset_traffic_class(*(void **)(v2 + 144), *(_DWORD *)(a1 + 40));
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        v6 = 136446466;
        v7 = "nw_connection_reset_traffic_class_block_invoke";
        v8 = 1024;
        v9 = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection is not ready, ignore", (uint8_t *)&v6, 0x12u);
      }

    }
  }
}

void nw_connection_reset_expected_progress_target(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  char v16;
  os_log_type_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_reset_expected_progress_target_block_invoke;
    v13[3] = &unk_1E14AA348;
    v14 = v3;
    v15 = a2;
    nw_connection_async_if_needed(v14, v13);

    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_connection_reset_expected_progress_target";
  v6 = (char *)_os_log_send_and_compose_impl();

  v17 = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_reset_expected_progress_target";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = v17;
      v11 = os_log_type_enabled(v7, v17);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_connection_reset_expected_progress_target";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_reset_expected_progress_target";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_reset_expected_progress_target";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void sub_1835C2B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void __nw_connection_reset_expected_progress_target_block_invoke(uint64_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  _QWORD v6[6];

  v2 = *(os_unfair_lock_s **)(a1 + 32);
  v3 = v2 + 34;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __nw_connection_reset_expected_progress_target_block_invoke_2;
  v6[3] = &unk_1E14AA348;
  v5 = v2;
  v4 = *(_QWORD *)(a1 + 40);
  v6[4] = v5;
  v6[5] = v4;
  os_unfair_lock_lock(v3);
  __nw_connection_reset_expected_progress_target_block_invoke_2((uint64_t)v6);
  os_unfair_lock_unlock(v3);

}

void __nw_connection_reset_expected_progress_target_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 80) == 3 && (*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    *(_QWORD *)(v2 + 288) = 0;
    nw_endpoint_handler_reset_expected_progress_target(*(void **)(*(_QWORD *)(a1 + 32) + 144), *(_QWORD *)(a1 + 40), (const unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 452));
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        v6 = 136446466;
        v7 = "nw_connection_reset_expected_progress_target_block_invoke_2";
        v8 = 1024;
        v9 = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection is not ready, pending progress target", (uint8_t *)&v6, 0x12u);
      }

    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 288) = *(_QWORD *)(a1 + 40);
    nw_endpoint_handler_reset_expected_progress_target(*(void **)(*(_QWORD *)(a1 + 32) + 144), *(_QWORD *)(a1 + 40), (const unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 452));
  }
}

void nw_connection_decrement_estimated_bytes(void *a1, char a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_connection_decrement_estimated_bytes";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_connection_decrement_estimated_bytes";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_connection_decrement_estimated_bytes";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          goto LABEL_4;
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_connection_decrement_estimated_bytes";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_connection_decrement_estimated_bytes";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a3)
  {
    nw_connection_modify_estimated_bytes(v5, a2, 0, a3);
    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_connection_decrement_estimated_bytes";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_decrement_estimated_bytes";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null estimated_bytes", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v21)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_decrement_estimated_bytes";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null estimated_bytes, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_decrement_estimated_bytes";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null estimated_bytes, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_connection_decrement_estimated_bytes";
    v25 = 2082;
    v26 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null estimated_bytes, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_39;
LABEL_4:

}

void sub_1835C3254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_inject_up(void *a1, int a2, uint64_t a3)
{
  id v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  _QWORD v19[4];
  id v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint8_t buf[40];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    if (a3)
    {
      v7 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)buf = *(_OWORD *)a3;
      *(_OWORD *)&buf[16] = v7;
      v8 = *(_QWORD *)(a3 + 32);
    }
    else
    {
      v8 = 0;
      memset(buf, 0, 32);
    }
    v19[1] = 3221225472;
    v21 = *(_OWORD *)buf;
    v22 = *(_OWORD *)&buf[16];
    v19[0] = MEMORY[0x1E0C809B0];
    v19[2] = __nw_connection_inject_up_block_invoke;
    v19[3] = &unk_1E149DAD8;
    v25 = a3 != 0;
    v23 = v8;
    v24 = a2;
    v20 = v5;
    nw_connection_async_if_needed(v20, v19);

    goto LABEL_6;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_inject_up";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_inject_up";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_inject_up";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_inject_up";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_inject_up";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v10)
    free(v10);
LABEL_6:

}

void sub_1835C3570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void __nw_connection_inject_up_block_invoke(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  id v18;
  int v19;
  void *v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  NSObject *v24;
  int v25;
  id v26;
  void *v27;
  NWConcrete_nw_endpoint_handler *v28;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v30;
  NWConcrete_nw_endpoint_mode_handler *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  NWConcrete_nw_endpoint_handler *v45;
  _BOOL4 v46;
  NSObject *v47;
  const char *id_string;
  const char *v49;
  const char *v50;
  const char *logging_description;
  const char *v52;
  const char *v53;
  id v54;
  NSObject *v55;
  int v56;
  NSObject *v57;
  int v58;
  char *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  int v62;
  id v63;
  const char *v64;
  os_log_type_t v65;
  int v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  const char *v70;
  char *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  const char *v74;
  int v75;
  id v76;
  char *v77;
  NSObject *v78;
  os_log_type_t v79;
  os_log_type_t v80;
  const char *v81;
  char *backtrace_string;
  os_log_type_t v83;
  _BOOL4 v84;
  const char *v85;
  os_log_type_t v86;
  void *v87;
  os_log_type_t v88;
  char *v89;
  os_log_type_t v90;
  _BOOL4 v91;
  os_log_type_t v92;
  nw_endpoint_t v93;
  char v94;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v97;
  __int16 v98;
  _BYTE v99[18];
  __int16 v100;
  void *v101;
  __int16 v102;
  const char *v103;
  __int16 v104;
  const char *v105;
  __int16 v106;
  id v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 84);
  if (*(_BYTE *)(a1 + 84))
    v3 = (_QWORD *)(a1 + 40);
  else
    v3 = 0;
  v4 = *(_DWORD *)(a1 + 80);
  if (v4 == 3)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_BYTE *)(v10 + 109);
    v12 = *(_QWORD *)(v10 + 16);
    if ((v11 & 0x40) != 0)
    {
      if (v12 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v12 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v55 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
        {
          v56 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          v97 = "nw_connection_inject_up_block_invoke";
          v98 = 1024;
          *(_DWORD *)v99 = v56;
          _os_log_impl(&dword_182FBE000, v55, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] injecting timed out", buf, 0x12u);
        }

      }
      nw_endpoint_handler_inject_disconnect_error(*(void **)(*(_QWORD *)(a1 + 32) + 144), v3, 60);
    }
    else if (v12 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v12 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v13 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        *(_DWORD *)buf = 136446466;
        v97 = "nw_connection_inject_up_block_invoke";
        v98 = 1024;
        *(_DWORD *)v99 = v13;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s [C%u] timed out failed, not connected", buf, 0x12u);
      }
      goto LABEL_30;
    }
    return;
  }
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_BYTE *)(v5 + 109);
      v7 = *(_QWORD *)(v5 + 16);
      if ((v6 & 0x40) == 0)
      {
        if (v7 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v7 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v8 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            v9 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
            *(_DWORD *)buf = 136446466;
            v97 = "nw_connection_inject_up_block_invoke";
            v98 = 1024;
            *(_DWORD *)v99 = v9;
            _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s [C%u] read close failed, not connected", buf, 0x12u);
          }
LABEL_30:

          return;
        }
        return;
      }
      if (v7 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v7 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v24 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          v25 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          v97 = "nw_connection_inject_up_block_invoke";
          v98 = 1024;
          *(_DWORD *)v99 = v25;
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] injecting read close", buf, 0x12u);
        }

      }
      v26 = *(id *)(*(_QWORD *)(a1 + 32) + 144);
      v27 = v26;
      if (v26)
      {
        v28 = (NWConcrete_nw_endpoint_handler *)v26;
        mode = v28->mode;

        if ((_DWORD)mode == 2)
        {
          v30 = nw_endpoint_handler_copy_flow(v28);
          v31 = v30;
          if (v30)
          {
            if ((*((_BYTE *)v30 + 33) & 4) != 0 && (*((_WORD *)v30 + 354) & 0x10) == 0)
            {
              v32 = (char *)v30 + 376;
              if (v2)
              {
                v33 = (char *)*((_QWORD *)v31 + 51);
                if (!v33)
                {
LABEL_64:
                  v45 = v28;
                  v46 = (*((_BYTE *)v45 + 268) & 0x20) == 0;

                  if (v46)
                  {
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v47 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
                    {
                      id_string = nw_endpoint_handler_get_id_string(v45);
                      v49 = nw_endpoint_handler_dry_run_string(v45);
                      v50 = id_string;
                      v93 = nw_endpoint_handler_copy_endpoint(v45);
                      logging_description = nw_endpoint_get_logging_description(v93);
                      v52 = nw_endpoint_handler_state_string(v45);
                      v53 = nw_endpoint_handler_mode_string(v45);
                      v54 = nw_endpoint_handler_copy_current_path(v45);
                      *(_DWORD *)buf = 136447746;
                      v97 = "nw_endpoint_handler_inject_read_closed";
                      v98 = 2082;
                      *(_QWORD *)v99 = v50;
                      *(_WORD *)&v99[8] = 2082;
                      *(_QWORD *)&v99[10] = v49;
                      v100 = 2082;
                      v101 = (void *)logging_description;
                      v102 = 2082;
                      v103 = v52;
                      v104 = 2082;
                      v105 = v53;
                      v106 = 2114;
                      v107 = v54;
                      _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Inject read-closed failed, could not locate protocol", buf, 0x48u);

                    }
                  }
                  goto LABEL_148;
                }
                while (1)
                {
                  v34 = v33;
                  v35 = (uint64_t *)*((_QWORD *)v33 + 2);
                  v36 = *v35;
                  v37 = v35[1];
                  v38 = v35[2];
                  v39 = v35[3];
                  v40 = v35[4];
                  v41 = *v3 == v36 && v3[1] == v37;
                  v42 = v41 && v3[2] == v38;
                  v43 = v42 && v3[3] == v39;
                  if (v43 && v3[4] == v40)
                    break;
                  v33 = (char *)*((_QWORD *)v34 + 4);
                  v32 = v34;
                  if (!v33)
                    goto LABEL_64;
                }
              }
              (*(void (**)(void))(*((_QWORD *)v32 + 3) + 184))();
            }
LABEL_148:

LABEL_154:
            return;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v76 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v97 = "nw_endpoint_handler_inject_read_closed";
          v77 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v94 = 0;
          if ((__nwlog_fault(v77, &type, &v94) & 1) != 0)
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v78 = (id)gLogObj;
              v79 = type;
              if (os_log_type_enabled(v78, type))
              {
                *(_DWORD *)buf = 136446210;
                v97 = "nw_endpoint_handler_inject_read_closed";
                _os_log_impl(&dword_182FBE000, v78, v79, "%{public}s No endpoint flow", buf, 0xCu);
              }
            }
            else if (v94)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v78 = (id)gLogObj;
              v83 = type;
              v84 = os_log_type_enabled(v78, type);
              if (backtrace_string)
              {
                if (v84)
                {
                  *(_DWORD *)buf = 136446466;
                  v97 = "nw_endpoint_handler_inject_read_closed";
                  v98 = 2082;
                  *(_QWORD *)v99 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v78, v83, "%{public}s No endpoint flow, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(backtrace_string);
                goto LABEL_146;
              }
              if (v84)
              {
                *(_DWORD *)buf = 136446210;
                v97 = "nw_endpoint_handler_inject_read_closed";
                _os_log_impl(&dword_182FBE000, v78, v83, "%{public}s No endpoint flow, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v78 = (id)gLogObj;
              v86 = type;
              if (os_log_type_enabled(v78, type))
              {
                *(_DWORD *)buf = 136446210;
                v97 = "nw_endpoint_handler_inject_read_closed";
                _os_log_impl(&dword_182FBE000, v78, v86, "%{public}s No endpoint flow, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_146:
          if (v77)
            free(v77);
          goto LABEL_148;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v63 = (id)gLogObj;
        if (mode > 5)
          v64 = "unknown-mode";
        else
          v64 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v97 = "nw_endpoint_handler_inject_read_closed";
        v98 = 2082;
        *(_QWORD *)v99 = v64;
        *(_WORD *)&v99[8] = 2082;
        *(_QWORD *)&v99[10] = "flow";
        v67 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v94 = 0;
        if (!__nwlog_fault(v67, &type, &v94))
          goto LABEL_152;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v68 = (id)gLogObj;
          v69 = type;
          if (os_log_type_enabled(v68, type))
          {
            if (mode > 5)
              v70 = "unknown-mode";
            else
              v70 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446722;
            v97 = "nw_endpoint_handler_inject_read_closed";
            v98 = 2082;
            *(_QWORD *)v99 = v70;
            *(_WORD *)&v99[8] = 2082;
            *(_QWORD *)&v99[10] = "flow";
            _os_log_impl(&dword_182FBE000, v68, v69, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
          }
        }
        else if (v94)
        {
          v71 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v68 = (id)gLogObj;
          v72 = type;
          v73 = os_log_type_enabled(v68, type);
          if (v71)
          {
            if (v73)
            {
              if (mode > 5)
                v74 = "unknown-mode";
              else
                v74 = off_1E149FC18[mode];
              *(_DWORD *)buf = 136446978;
              v97 = "nw_endpoint_handler_inject_read_closed";
              v98 = 2082;
              *(_QWORD *)v99 = v74;
              *(_WORD *)&v99[8] = 2082;
              *(_QWORD *)&v99[10] = "flow";
              v100 = 2082;
              v101 = v71;
              _os_log_impl(&dword_182FBE000, v68, v72, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v71);
            if (!v67)
              goto LABEL_154;
            goto LABEL_153;
          }
          if (v73)
          {
            if (mode > 5)
              v85 = "unknown-mode";
            else
              v85 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446722;
            v97 = "nw_endpoint_handler_inject_read_closed";
            v98 = 2082;
            *(_QWORD *)v99 = v85;
            *(_WORD *)&v99[8] = 2082;
            *(_QWORD *)&v99[10] = "flow";
            _os_log_impl(&dword_182FBE000, v68, v72, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v68 = (id)gLogObj;
          v80 = type;
          if (os_log_type_enabled(v68, type))
          {
            if (mode > 5)
              v81 = "unknown-mode";
            else
              v81 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446722;
            v97 = "nw_endpoint_handler_inject_read_closed";
            v98 = 2082;
            *(_QWORD *)v99 = v81;
            *(_WORD *)&v99[8] = 2082;
            *(_QWORD *)&v99[10] = "flow";
            _os_log_impl(&dword_182FBE000, v68, v80, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
          }
        }
        goto LABEL_151;
      }
      __nwlog_obj();
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v97 = "nw_endpoint_handler_inject_read_closed";
      v67 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v94 = 0;
      if (__nwlog_fault(v67, &type, &v94))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v68 = objc_claimAutoreleasedReturnValue();
          v88 = type;
          if (os_log_type_enabled(v68, type))
          {
            *(_DWORD *)buf = 136446210;
            v97 = "nw_endpoint_handler_inject_read_closed";
            _os_log_impl(&dword_182FBE000, v68, v88, "%{public}s called with null handler", buf, 0xCu);
          }
LABEL_151:

          goto LABEL_152;
        }
        if (!v94)
        {
          __nwlog_obj();
          v68 = objc_claimAutoreleasedReturnValue();
          v92 = type;
          if (os_log_type_enabled(v68, type))
          {
            *(_DWORD *)buf = 136446210;
            v97 = "nw_endpoint_handler_inject_read_closed";
            _os_log_impl(&dword_182FBE000, v68, v92, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_151;
        }
        v89 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v68 = objc_claimAutoreleasedReturnValue();
        v90 = type;
        v91 = os_log_type_enabled(v68, type);
        if (!v89)
        {
          if (v91)
          {
            *(_DWORD *)buf = 136446210;
            v97 = "nw_endpoint_handler_inject_read_closed";
            _os_log_impl(&dword_182FBE000, v68, v90, "%{public}s called with null handler, no backtrace", buf, 0xCu);
          }
          goto LABEL_151;
        }
        if (v91)
        {
          *(_DWORD *)buf = 136446466;
          v97 = "nw_endpoint_handler_inject_read_closed";
          v98 = 2082;
          *(_QWORD *)v99 = v89;
          _os_log_impl(&dword_182FBE000, v68, v90, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v89);
      }
LABEL_152:
      if (!v67)
        goto LABEL_154;
LABEL_153:
      free(v67);
      goto LABEL_154;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    v19 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)buf = 136446466;
    v97 = "nw_connection_inject_up_block_invoke";
    v98 = 1024;
    *(_DWORD *)v99 = v19;
    v20 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v94 = 0;
    if (__nwlog_fault((const char *)v20, &type, &v94))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          v23 = *(_DWORD *)(a1 + 80);
          *(_DWORD *)buf = 136446466;
          v97 = "nw_connection_inject_up_block_invoke";
          v98 = 1024;
          *(_DWORD *)v99 = v23;
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s Unhandled failure type: %d", buf, 0x12u);
        }
      }
      else if (v94)
      {
        v59 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v60 = type;
        v61 = os_log_type_enabled(v21, type);
        if (v59)
        {
          if (v61)
          {
            v62 = *(_DWORD *)(a1 + 80);
            *(_DWORD *)buf = 136446722;
            v97 = "nw_connection_inject_up_block_invoke";
            v98 = 1024;
            *(_DWORD *)v99 = v62;
            *(_WORD *)&v99[4] = 2082;
            *(_QWORD *)&v99[6] = v59;
            _os_log_impl(&dword_182FBE000, v21, v60, "%{public}s Unhandled failure type: %d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v59);
          if (!v20)
            return;
LABEL_112:
          free(v20);
          return;
        }
        if (v61)
        {
          v75 = *(_DWORD *)(a1 + 80);
          *(_DWORD *)buf = 136446466;
          v97 = "nw_connection_inject_up_block_invoke";
          v98 = 1024;
          *(_DWORD *)v99 = v75;
          _os_log_impl(&dword_182FBE000, v21, v60, "%{public}s Unhandled failure type: %d, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v65 = type;
        if (os_log_type_enabled(v21, type))
        {
          v66 = *(_DWORD *)(a1 + 80);
          *(_DWORD *)buf = 136446466;
          v97 = "nw_connection_inject_up_block_invoke";
          v98 = 1024;
          *(_DWORD *)v99 = v66;
          _os_log_impl(&dword_182FBE000, v21, v65, "%{public}s Unhandled failure type: %d, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v20)
      return;
    goto LABEL_112;
  }
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(v14 + 109);
  v16 = *(_QWORD *)(v14 + 16);
  if ((v15 & 0x40) != 0)
  {
    if (v16 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v16 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v57 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        v58 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        *(_DWORD *)buf = 136446466;
        v97 = "nw_connection_inject_up_block_invoke";
        v98 = 1024;
        *(_DWORD *)v99 = v58;
        _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] injecting reset", buf, 0x12u);
      }

    }
    nw_endpoint_handler_inject_disconnect_error(*(void **)(*(_QWORD *)(a1 + 32) + 144), v3, 54);
  }
  else if (v16 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v16 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v8 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v97 = "nw_connection_inject_up_block_invoke";
      v98 = 1024;
      *(_DWORD *)v99 = v17;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s [C%u] reset failed, not connected", buf, 0x12u);
    }
    goto LABEL_30;
  }
}

void sub_1835C4714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

BOOL nw_connection_read_multiple(void *a1, unsigned int a2, unsigned int a3, void *a4)
{
  os_unfair_lock_s *v7;
  id v8;
  void *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  NWConcrete_nw_read_request *multiple;
  _BOOL8 v13;
  uint64_t v14;
  id v15;
  uint32_t os_unfair_lock_opaque;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint32_t v20;
  id v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint32_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint32_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  uint32_t v37;
  void *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  void *v43;
  os_log_type_t v44;
  char *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  os_log_type_t v48;
  _BOOL4 v49;
  os_log_type_t v50;
  os_log_type_t v51;
  _QWORD v52[4];
  id v53;
  char v54;
  _QWORD v55[4];
  os_unfair_lock_s *v56;
  _BYTE *v57;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  _QWORD v62[2];
  _BYTE v63[24];
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a4;
  v9 = v8;
  if (v7)
  {
    if (v8)
    {
      *(_QWORD *)v63 = 0;
      *(_QWORD *)&v63[8] = v63;
      *(_QWORD *)&v63[16] = 0x2020000000;
      v64 = 1;
      v10 = MEMORY[0x1E0C809B0];
      v55[0] = MEMORY[0x1E0C809B0];
      v55[1] = 3221225472;
      v55[2] = __nw_connection_read_multiple_block_invoke;
      v55[3] = &unk_1E14ACE40;
      v57 = v63;
      v11 = v7;
      v56 = v11;
      os_unfair_lock_lock(v7 + 34);
      __nw_connection_read_multiple_block_invoke((uint64_t)v55);
      os_unfair_lock_unlock(v7 + 34);
      if (*(_BYTE *)(*(_QWORD *)&v63[8] + 24))
      {
        v52[0] = v10;
        v52[1] = 3221225472;
        v52[2] = __nw_connection_read_multiple_block_invoke_30;
        v52[3] = &unk_1E149DB00;
        v53 = v9;
        multiple = nw_read_request_create_multiple(a2, a3, v11, v52);
        v13 = multiple != 0;
        if (multiple)
        {
          nw_connection_add_read_request(v11, multiple);
LABEL_57:

          goto LABEL_58;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v60 = "nw_connection_read_multiple";
        v22 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v54 = 0;
        if (__nwlog_fault(v22, &type, &v54))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v23 = (id)gLogObj;
            v24 = type;
            if (os_log_type_enabled(v23, type))
            {
              *(_DWORD *)buf = 136446210;
              v60 = "nw_connection_read_multiple";
              _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s nw_read_request_create_multiple failed", buf, 0xCu);
            }
          }
          else if (v54)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v23 = (id)gLogObj;
            v31 = type;
            v32 = os_log_type_enabled(v23, type);
            if (backtrace_string)
            {
              if (v32)
              {
                *(_DWORD *)buf = 136446466;
                v60 = "nw_connection_read_multiple";
                v61 = 2082;
                v62[0] = backtrace_string;
                _os_log_impl(&dword_182FBE000, v23, v31, "%{public}s nw_read_request_create_multiple failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
              if (!v22)
                goto LABEL_57;
              goto LABEL_56;
            }
            if (v32)
            {
              *(_DWORD *)buf = 136446210;
              v60 = "nw_connection_read_multiple";
              _os_log_impl(&dword_182FBE000, v23, v31, "%{public}s nw_read_request_create_multiple failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v23 = (id)gLogObj;
            v35 = type;
            if (os_log_type_enabled(v23, type))
            {
              *(_DWORD *)buf = 136446210;
              v60 = "nw_connection_read_multiple";
              _os_log_impl(&dword_182FBE000, v23, v35, "%{public}s nw_read_request_create_multiple failed, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
        if (!v22)
          goto LABEL_57;
LABEL_56:
        free(v22);
        goto LABEL_57;
      }
      v14 = *(_QWORD *)&v11[4]._os_unfair_lock_opaque;
      if (v14 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v14 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v15 = (id)gconnectionLogObj;
        os_unfair_lock_opaque = v11[112]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446466;
        v60 = "nw_connection_read_multiple";
        v61 = 1024;
        LODWORD(v62[0]) = os_unfair_lock_opaque;
        v17 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v54 = 0;
        if (__nwlog_fault(v17, &type, &v54))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v18 = (id)gconnectionLogObj;
            v19 = type;
            if (os_log_type_enabled(v18, type))
            {
              v20 = v11[112]._os_unfair_lock_opaque;
              *(_DWORD *)buf = 136446466;
              v60 = "nw_connection_read_multiple";
              v61 = 1024;
              LODWORD(v62[0]) = v20;
              _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s [C%u] client_queue is nil", buf, 0x12u);
            }
          }
          else if (v54)
          {
            v25 = __nw_create_backtrace_string();
            if (v25)
            {
              v26 = (char *)v25;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v27 = (id)gconnectionLogObj;
              v28 = type;
              if (os_log_type_enabled(v27, type))
              {
                v29 = v11[112]._os_unfair_lock_opaque;
                *(_DWORD *)buf = 136446722;
                v60 = "nw_connection_read_multiple";
                v61 = 1024;
                LODWORD(v62[0]) = v29;
                WORD2(v62[0]) = 2082;
                *(_QWORD *)((char *)v62 + 6) = v26;
                _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s [C%u] client_queue is nil, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v26);
              if (!v17)
                goto LABEL_51;
              goto LABEL_50;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v18 = (id)gconnectionLogObj;
            v36 = type;
            if (os_log_type_enabled(v18, type))
            {
              v37 = v11[112]._os_unfair_lock_opaque;
              *(_DWORD *)buf = 136446466;
              v60 = "nw_connection_read_multiple";
              v61 = 1024;
              LODWORD(v62[0]) = v37;
              _os_log_impl(&dword_182FBE000, v18, v36, "%{public}s [C%u] client_queue is nil, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v18 = (id)gconnectionLogObj;
            v33 = type;
            if (os_log_type_enabled(v18, type))
            {
              v34 = v11[112]._os_unfair_lock_opaque;
              *(_DWORD *)buf = 136446466;
              v60 = "nw_connection_read_multiple";
              v61 = 1024;
              LODWORD(v62[0]) = v34;
              _os_log_impl(&dword_182FBE000, v18, v33, "%{public}s [C%u] client_queue is nil, backtrace limit exceeded", buf, 0x12u);
            }
          }

        }
        if (v17)
LABEL_50:
          free(v17);
      }
LABEL_51:
      v13 = 0;
LABEL_58:

      _Block_object_dispose(v63, 8);
      goto LABEL_59;
    }
    __nwlog_obj();
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v63 = 136446210;
    *(_QWORD *)&v63[4] = "nw_connection_read_multiple";
    v40 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v40, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v44 = buf[0];
        if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v63 = 136446210;
          *(_QWORD *)&v63[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null handler", v63, 0xCu);
        }
LABEL_91:

        goto LABEL_92;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v51 = buf[0];
        if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v63 = 136446210;
          *(_QWORD *)&v63[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_182FBE000, v41, v51, "%{public}s called with null handler, backtrace limit exceeded", v63, 0xCu);
        }
        goto LABEL_91;
      }
      v45 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v48 = buf[0];
      v49 = os_log_type_enabled(v41, (os_log_type_t)buf[0]);
      if (!v45)
      {
        if (v49)
        {
          *(_DWORD *)v63 = 136446210;
          *(_QWORD *)&v63[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_182FBE000, v41, v48, "%{public}s called with null handler, no backtrace", v63, 0xCu);
        }
        goto LABEL_91;
      }
      if (v49)
      {
        *(_DWORD *)v63 = 136446466;
        *(_QWORD *)&v63[4] = "nw_connection_read_multiple";
        *(_WORD *)&v63[12] = 2082;
        *(_QWORD *)&v63[14] = v45;
        _os_log_impl(&dword_182FBE000, v41, v48, "%{public}s called with null handler, dumping backtrace:%{public}s", v63, 0x16u);
      }
      goto LABEL_79;
    }
  }
  else
  {
    __nwlog_obj();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v63 = 136446210;
    *(_QWORD *)&v63[4] = "nw_connection_read_multiple";
    v40 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v40, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v42 = buf[0];
        if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v63 = 136446210;
          *(_QWORD *)&v63[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s called with null connection", v63, 0xCu);
        }
        goto LABEL_91;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v50 = buf[0];
        if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v63 = 136446210;
          *(_QWORD *)&v63[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_182FBE000, v41, v50, "%{public}s called with null connection, backtrace limit exceeded", v63, 0xCu);
        }
        goto LABEL_91;
      }
      v45 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v46 = buf[0];
      v47 = os_log_type_enabled(v41, (os_log_type_t)buf[0]);
      if (!v45)
      {
        if (v47)
        {
          *(_DWORD *)v63 = 136446210;
          *(_QWORD *)&v63[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_182FBE000, v41, v46, "%{public}s called with null connection, no backtrace", v63, 0xCu);
        }
        goto LABEL_91;
      }
      if (v47)
      {
        *(_DWORD *)v63 = 136446466;
        *(_QWORD *)&v63[4] = "nw_connection_read_multiple";
        *(_WORD *)&v63[12] = 2082;
        *(_QWORD *)&v63[14] = v45;
        _os_log_impl(&dword_182FBE000, v41, v46, "%{public}s called with null connection, dumping backtrace:%{public}s", v63, 0x16u);
      }
LABEL_79:

      free(v45);
    }
  }
LABEL_92:
  if (v40)
    free(v40);
  v13 = 0;
LABEL_59:

  return v13;
}

void sub_1835C52B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Unwind_Resume(a1);
}

BOOL __nw_connection_read_multiple_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 200))
    result = 1;
  else
    result = nw_context_is_inline(*(void **)(v2 + 24));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void __nw_connection_read_multiple_block_invoke_30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6;
  id v7;

  v6 = a5;
  v7 = v6;
  if (v6)

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1835C53A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_connection_add_read_request(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  _QWORD v9[4];
  os_unfair_lock_s *v10;
  id v11;
  _QWORD v12[4];
  os_unfair_lock_s *v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v3 = a1;
  v4 = a2;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 1;
  v5 = v3 + 34;
  v6 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZL30nw_connection_add_read_requestP24NWConcrete_nw_connectionPU29objcproto18OS_nw_read_request8NSObject_block_invoke;
  v12[3] = &unk_1E14A2D98;
  v7 = v3;
  v13 = v7;
  v8 = v4;
  v14 = v8;
  v15 = &v16;
  os_unfair_lock_lock(v5);
  ___ZL30nw_connection_add_read_requestP24NWConcrete_nw_connectionPU29objcproto18OS_nw_read_request8NSObject_block_invoke((uint64_t)v12);
  os_unfair_lock_unlock(v5);
  if (*((_BYTE *)v17 + 24))
  {
    v9[0] = v6;
    v9[1] = 3221225472;
    v9[2] = ___ZL30nw_connection_add_read_requestP24NWConcrete_nw_connectionPU29objcproto18OS_nw_read_request8NSObject_block_invoke_2;
    v9[3] = &unk_1E14ACE68;
    v10 = v7;
    v11 = v8;
    nw_connection_async_if_needed(v10, v9);

  }
  _Block_object_dispose(&v16, 8);

}

void sub_1835C5504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose((const void *)(v23 - 96), 8);
  _Unwind_Resume(a1);
}

void ___ZL30nw_connection_add_read_requestP24NWConcrete_nw_connectionPU29objcproto18OS_nw_read_request8NSObject_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 request_list_append;
  uint64_t v4;
  void *v5;

  v1 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v1 + 109) & 0x20) != 0)
  {
    request_list_append = nw_read_request_list_append(*(void **)(v1 + 120), *(void **)(a1 + 40));
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 120);
    *(_QWORD *)(v4 + 120) = request_list_append;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }
}

void ___ZL30nw_connection_add_read_requestP24NWConcrete_nw_connectionPU29objcproto18OS_nw_read_request8NSObject_block_invoke_2(uint64_t a1)
{
  nw_connection_add_read_request_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40), 1);
}

void nw_connection_add_read_request_on_queue(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void **v7;
  int v8;
  _QWORD v9[4];
  void **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v5 = a1;
  v6 = a2;
  nw_context_assert_queue(*((void **)v5 + 3));
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZL39nw_connection_add_read_request_on_queueP24NWConcrete_nw_connectionPU29objcproto18OS_nw_read_request8NSObjectb_block_invoke;
  v9[3] = &unk_1E14ACE40;
  v11 = &v12;
  v7 = (void **)v5;
  v10 = v7;
  os_unfair_lock_lock((os_unfair_lock_t)v5 + 34);
  ___ZL39nw_connection_add_read_request_on_queueP24NWConcrete_nw_connectionPU29objcproto18OS_nw_read_request8NSObjectb_block_invoke((uint64_t)v9);
  os_unfair_lock_unlock((os_unfair_lock_t)v5 + 34);
  if (*((_BYTE *)v13 + 24))
  {
    v8 = 89;
LABEL_8:
    nw_read_request_fail(v6, v8);
    goto LABEL_9;
  }
  if (!nw_endpoint_handler_add_read_request(v7[18], v6))
  {
    v8 = 57;
    goto LABEL_8;
  }
  if (a3 && (*((_BYTE *)v7 + 109) & 0x40) != 0)
    nw_endpoint_handler_service_reads(v7[18]);
LABEL_9:

  _Block_object_dispose(&v12, 8);
}

void sub_1835C56C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL39nw_connection_add_read_request_on_queueP24NWConcrete_nw_connectionPU29objcproto18OS_nw_read_request8NSObjectb_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = (*(_BYTE *)(*(_QWORD *)(result + 32) + 109) & 8) != 0;
  return result;
}

uint64_t nw_connection_read_buffer(void *a1, char *a2, unint64_t a3, unint64_t a4, void *a5)
{
  os_unfair_lock_s *v10;
  id v11;
  void *v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  id v15;
  unint64_t v16;
  id v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  id v22;
  uint32_t os_unfair_lock_opaque;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint32_t v27;
  NWConcrete_nw_read_request *v28;
  void *v29;
  id buffer_completion;
  qos_class_t v31;
  NWConcrete_nw_read_request *v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint32_t v38;
  char *backtrace_string;
  os_log_type_t v40;
  _BOOL4 v41;
  id v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  os_log_type_t v46;
  uint32_t v47;
  os_log_type_t v48;
  char *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  os_log_type_t v52;
  uint32_t v53;
  os_log_type_t v54;
  id v55;
  char *v56;
  NSObject *v57;
  os_log_type_t v58;
  char *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  os_log_type_t v62;
  void *v64;
  char *v65;
  NSObject *v66;
  os_log_type_t v67;
  void *v68;
  os_log_type_t v69;
  void *v70;
  NSObject *v71;
  os_log_type_t v72;
  char *v73;
  os_log_type_t v74;
  _BOOL4 v75;
  os_log_type_t v76;
  _BOOL4 v77;
  char *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  os_log_type_t v81;
  os_log_type_t v82;
  os_log_type_t v83;
  _QWORD v84[4];
  os_unfair_lock_s *v85;
  os_log_type_t *v86;
  os_log_type_t v87[8];
  os_log_type_t *v88;
  uint64_t v89;
  char v90;
  char v91;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v94;
  __int16 v95;
  _BYTE v96[18];
  __int16 v97;
  char *v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v10 = a1;
  v11 = a5;
  v12 = v11;
  if (v10)
  {
    if (v11)
    {
      *(_QWORD *)v87 = 0;
      v88 = v87;
      v89 = 0x2020000000;
      v90 = 1;
      v84[0] = MEMORY[0x1E0C809B0];
      v84[1] = 3221225472;
      v84[2] = __nw_connection_read_buffer_block_invoke;
      v84[3] = &unk_1E14ACE40;
      v86 = v87;
      v13 = v10;
      v85 = v13;
      os_unfair_lock_lock(v10 + 34);
      __nw_connection_read_buffer_block_invoke((uint64_t)v84);
      os_unfair_lock_unlock(v10 + 34);
      if (*((_BYTE *)v88 + 24))
      {
        v14 = v13;
        v15 = v12;
        if (a2)
        {
          if (a3 <= 1)
            v16 = 1;
          else
            v16 = a3;
          if (v16 > a4)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v17 = (id)gLogObj;
            *(_DWORD *)buf = 136446722;
            v94 = "nw_read_request_create_with_buffer";
            v95 = 2048;
            *(_QWORD *)v96 = v16;
            *(_WORD *)&v96[8] = 2048;
            *(_QWORD *)&v96[10] = a4;
            v18 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v91 = 0;
            if (!__nwlog_fault(v18, &type, &v91))
              goto LABEL_76;
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v19 = (id)gLogObj;
              v20 = type;
              if (os_log_type_enabled(v19, type))
              {
                *(_DWORD *)buf = 136446722;
                v94 = "nw_read_request_create_with_buffer";
                v95 = 2048;
                *(_QWORD *)v96 = v16;
                *(_WORD *)&v96[8] = 2048;
                *(_QWORD *)&v96[10] = a4;
                _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s minlength (%zu) > max_data_count (%zu)", buf, 0x20u);
              }
LABEL_75:

              goto LABEL_76;
            }
            if (!v91)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v19 = (id)gLogObj;
              v48 = type;
              if (os_log_type_enabled(v19, type))
              {
                *(_DWORD *)buf = 136446722;
                v94 = "nw_read_request_create_with_buffer";
                v95 = 2048;
                *(_QWORD *)v96 = v16;
                *(_WORD *)&v96[8] = 2048;
                *(_QWORD *)&v96[10] = a4;
                _os_log_impl(&dword_182FBE000, v19, v48, "%{public}s minlength (%zu) > max_data_count (%zu), backtrace limit exceeded", buf, 0x20u);
              }
              goto LABEL_75;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v19 = (id)gLogObj;
            v40 = type;
            v41 = os_log_type_enabled(v19, type);
            if (!backtrace_string)
            {
              if (v41)
              {
                *(_DWORD *)buf = 136446722;
                v94 = "nw_read_request_create_with_buffer";
                v95 = 2048;
                *(_QWORD *)v96 = v16;
                *(_WORD *)&v96[8] = 2048;
                *(_QWORD *)&v96[10] = a4;
                _os_log_impl(&dword_182FBE000, v19, v40, "%{public}s minlength (%zu) > max_data_count (%zu), no backtrace", buf, 0x20u);
              }
              goto LABEL_75;
            }
            if (v41)
            {
              *(_DWORD *)buf = 136446978;
              v94 = "nw_read_request_create_with_buffer";
              v95 = 2048;
              *(_QWORD *)v96 = v16;
              *(_WORD *)&v96[8] = 2048;
              *(_QWORD *)&v96[10] = a4;
              v97 = 2082;
              v98 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v19, v40, "%{public}s minlength (%zu) > max_data_count (%zu), dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
            if (v18)
LABEL_77:
              free(v18);
LABEL_87:

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v55 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            v94 = "nw_connection_read_buffer";
            v56 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v91 = 0;
            if (__nwlog_fault(v56, &type, &v91))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v57 = (id)gLogObj;
                v58 = type;
                if (os_log_type_enabled(v57, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v94 = "nw_connection_read_buffer";
                  _os_log_impl(&dword_182FBE000, v57, v58, "%{public}s nw_read_request_create_with_buffer failed", buf, 0xCu);
                }
              }
              else if (v91)
              {
                v59 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v57 = (id)gLogObj;
                v60 = type;
                v61 = os_log_type_enabled(v57, type);
                if (v59)
                {
                  if (v61)
                  {
                    *(_DWORD *)buf = 136446466;
                    v94 = "nw_connection_read_buffer";
                    v95 = 2082;
                    *(_QWORD *)v96 = v59;
                    _os_log_impl(&dword_182FBE000, v57, v60, "%{public}s nw_read_request_create_with_buffer failed, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v59);
                  if (!v56)
                    goto LABEL_106;
                  goto LABEL_105;
                }
                if (v61)
                {
                  *(_DWORD *)buf = 136446210;
                  v94 = "nw_connection_read_buffer";
                  _os_log_impl(&dword_182FBE000, v57, v60, "%{public}s nw_read_request_create_with_buffer failed, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v57 = (id)gLogObj;
                v62 = type;
                if (os_log_type_enabled(v57, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v94 = "nw_connection_read_buffer";
                  _os_log_impl(&dword_182FBE000, v57, v62, "%{public}s nw_read_request_create_with_buffer failed, backtrace limit exceeded", buf, 0xCu);
                }
              }

            }
            if (!v56)
            {
LABEL_106:
              v33 = 0;
              v32 = 0;
LABEL_107:

              goto LABEL_108;
            }
LABEL_105:
            free(v56);
            goto LABEL_106;
          }
          v28 = objc_alloc_init(NWConcrete_nw_read_request);
          if (v28)
          {
            v29 = _Block_copy(v15);
            buffer_completion = v28->buffer_completion;
            v28->buffer_completion = v29;

            objc_storeStrong((id *)&v28->connection, a1);
            v31 = qos_class_self();
            v28->min = v16;
            v28->max = a4;
            v28->buffer = a2;
            v28->qos_class = v31;
            v28->variant = 2;
            if (_nw_signposts_once != -1)
              dispatch_once(&_nw_signposts_once, &__block_literal_global_51698);
            if (_nw_signposts_enabled && kdebug_is_enabled())
              kdebug_trace();
            v32 = v28;

            nw_connection_add_read_request(v14, v32);
            v33 = 1;
            goto LABEL_107;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v42 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v94 = "nw_read_request_create_with_buffer";
          v43 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v91 = 0;
          if ((__nwlog_fault(v43, &type, &v91) & 1) != 0)
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v44 = (id)gLogObj;
              v45 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                v94 = "nw_read_request_create_with_buffer";
                _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed", buf, 0xCu);
              }
            }
            else if (v91)
            {
              v49 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v44 = (id)gLogObj;
              v50 = type;
              v51 = os_log_type_enabled(v44, type);
              if (v49)
              {
                if (v51)
                {
                  *(_DWORD *)buf = 136446466;
                  v94 = "nw_read_request_create_with_buffer";
                  v95 = 2082;
                  *(_QWORD *)v96 = v49;
                  _os_log_impl(&dword_182FBE000, v44, v50, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v49);
                if (!v43)
                  goto LABEL_86;
                goto LABEL_85;
              }
              if (v51)
              {
                *(_DWORD *)buf = 136446210;
                v94 = "nw_read_request_create_with_buffer";
                _os_log_impl(&dword_182FBE000, v44, v50, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v44 = (id)gLogObj;
              v54 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                v94 = "nw_read_request_create_with_buffer";
                _os_log_impl(&dword_182FBE000, v44, v54, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
          if (!v43)
          {
LABEL_86:

            goto LABEL_87;
          }
LABEL_85:
          free(v43);
          goto LABEL_86;
        }
        __nwlog_obj();
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v94 = "nw_read_request_create_with_buffer";
        v18 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v91 = 0;
        if (__nwlog_fault(v18, &type, &v91))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v71 = objc_claimAutoreleasedReturnValue();
            v72 = type;
            if (os_log_type_enabled(v71, type))
            {
              *(_DWORD *)buf = 136446210;
              v94 = "nw_read_request_create_with_buffer";
              _os_log_impl(&dword_182FBE000, v71, v72, "%{public}s called with null buffer", buf, 0xCu);
            }
LABEL_160:

            goto LABEL_76;
          }
          if (!v91)
          {
            __nwlog_obj();
            v71 = objc_claimAutoreleasedReturnValue();
            v83 = type;
            if (os_log_type_enabled(v71, type))
            {
              *(_DWORD *)buf = 136446210;
              v94 = "nw_read_request_create_with_buffer";
              _os_log_impl(&dword_182FBE000, v71, v83, "%{public}s called with null buffer, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_160;
          }
          v78 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v71 = objc_claimAutoreleasedReturnValue();
          v79 = type;
          v80 = os_log_type_enabled(v71, type);
          if (!v78)
          {
            if (v80)
            {
              *(_DWORD *)buf = 136446210;
              v94 = "nw_read_request_create_with_buffer";
              _os_log_impl(&dword_182FBE000, v71, v79, "%{public}s called with null buffer, no backtrace", buf, 0xCu);
            }
            goto LABEL_160;
          }
          if (v80)
          {
            *(_DWORD *)buf = 136446466;
            v94 = "nw_read_request_create_with_buffer";
            v95 = 2082;
            *(_QWORD *)v96 = v78;
            _os_log_impl(&dword_182FBE000, v71, v79, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v78);
        }
LABEL_76:
        if (!v18)
          goto LABEL_87;
        goto LABEL_77;
      }
      v21 = *(_QWORD *)&v13[4]._os_unfair_lock_opaque;
      if (v21 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v21 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v22 = (id)gconnectionLogObj;
        os_unfair_lock_opaque = v13[112]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446466;
        v94 = "nw_connection_read_buffer";
        v95 = 1024;
        *(_DWORD *)v96 = os_unfair_lock_opaque;
        v24 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v91 = 0;
        if (__nwlog_fault(v24, &type, &v91))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v25 = (id)gconnectionLogObj;
            v26 = type;
            if (os_log_type_enabled(v25, type))
            {
              v27 = v13[112]._os_unfair_lock_opaque;
              *(_DWORD *)buf = 136446466;
              v94 = "nw_connection_read_buffer";
              v95 = 1024;
              *(_DWORD *)v96 = v27;
              _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s [C%u] client_queue is nil", buf, 0x12u);
            }
          }
          else if (v91)
          {
            v34 = __nw_create_backtrace_string();
            if (v34)
            {
              v35 = (char *)v34;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v36 = (id)gconnectionLogObj;
              v37 = type;
              if (os_log_type_enabled(v36, type))
              {
                v38 = v13[112]._os_unfair_lock_opaque;
                *(_DWORD *)buf = 136446722;
                v94 = "nw_connection_read_buffer";
                v95 = 1024;
                *(_DWORD *)v96 = v38;
                *(_WORD *)&v96[4] = 2082;
                *(_QWORD *)&v96[6] = v35;
                _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s [C%u] client_queue is nil, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v35);
              if (!v24)
                goto LABEL_72;
              goto LABEL_71;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v25 = (id)gconnectionLogObj;
            v52 = type;
            if (os_log_type_enabled(v25, type))
            {
              v53 = v13[112]._os_unfair_lock_opaque;
              *(_DWORD *)buf = 136446466;
              v94 = "nw_connection_read_buffer";
              v95 = 1024;
              *(_DWORD *)v96 = v53;
              _os_log_impl(&dword_182FBE000, v25, v52, "%{public}s [C%u] client_queue is nil, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v25 = (id)gconnectionLogObj;
            v46 = type;
            if (os_log_type_enabled(v25, type))
            {
              v47 = v13[112]._os_unfair_lock_opaque;
              *(_DWORD *)buf = 136446466;
              v94 = "nw_connection_read_buffer";
              v95 = 1024;
              *(_DWORD *)v96 = v47;
              _os_log_impl(&dword_182FBE000, v25, v46, "%{public}s [C%u] client_queue is nil, backtrace limit exceeded", buf, 0x12u);
            }
          }

        }
        if (v24)
LABEL_71:
          free(v24);
      }
LABEL_72:
      v33 = 0;
LABEL_108:

      _Block_object_dispose(v87, 8);
      goto LABEL_109;
    }
    __nwlog_obj();
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v94 = "nw_connection_read_buffer";
    v65 = (char *)_os_log_send_and_compose_impl();

    v87[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v65, v87, &type))
    {
      if (v87[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v66 = objc_claimAutoreleasedReturnValue();
        v69 = v87[0];
        if (os_log_type_enabled(v66, v87[0]))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_connection_read_buffer";
          _os_log_impl(&dword_182FBE000, v66, v69, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_151:

        goto LABEL_152;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v66 = objc_claimAutoreleasedReturnValue();
        v82 = v87[0];
        if (os_log_type_enabled(v66, v87[0]))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_connection_read_buffer";
          _os_log_impl(&dword_182FBE000, v66, v82, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_151;
      }
      v73 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v66 = objc_claimAutoreleasedReturnValue();
      v76 = v87[0];
      v77 = os_log_type_enabled(v66, v87[0]);
      if (!v73)
      {
        if (v77)
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_connection_read_buffer";
          _os_log_impl(&dword_182FBE000, v66, v76, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (v77)
      {
        *(_DWORD *)buf = 136446466;
        v94 = "nw_connection_read_buffer";
        v95 = 2082;
        *(_QWORD *)v96 = v73;
        _os_log_impl(&dword_182FBE000, v66, v76, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_134;
    }
  }
  else
  {
    __nwlog_obj();
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v94 = "nw_connection_read_buffer";
    v65 = (char *)_os_log_send_and_compose_impl();

    v87[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v65, v87, &type))
    {
      if (v87[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v66 = objc_claimAutoreleasedReturnValue();
        v67 = v87[0];
        if (os_log_type_enabled(v66, v87[0]))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_connection_read_buffer";
          _os_log_impl(&dword_182FBE000, v66, v67, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v66 = objc_claimAutoreleasedReturnValue();
        v81 = v87[0];
        if (os_log_type_enabled(v66, v87[0]))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_connection_read_buffer";
          _os_log_impl(&dword_182FBE000, v66, v81, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_151;
      }
      v73 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v66 = objc_claimAutoreleasedReturnValue();
      v74 = v87[0];
      v75 = os_log_type_enabled(v66, v87[0]);
      if (!v73)
      {
        if (v75)
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_connection_read_buffer";
          _os_log_impl(&dword_182FBE000, v66, v74, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (v75)
      {
        *(_DWORD *)buf = 136446466;
        v94 = "nw_connection_read_buffer";
        v95 = 2082;
        *(_QWORD *)v96 = v73;
        _os_log_impl(&dword_182FBE000, v66, v74, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_134:

      free(v73);
    }
  }
LABEL_152:
  if (v65)
    free(v65);
  v33 = 0;
LABEL_109:

  return v33;
}

void sub_1835C6A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_connection_read_buffer_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 200))
    result = 1;
  else
    result = nw_context_is_inline(*(void **)(v2 + 24));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void nw_connection_receive_multiple(void *a1, unsigned int a2, unsigned int a3, void *a4)
{
  _DWORD *v7;
  id v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  NWConcrete_nw_read_request *multiple;
  _DWORD *v14;
  dispatch_qos_class_t v15;
  _DWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  _QWORD v34[4];
  id v35;
  char v36;
  os_log_type_t v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a4;
  v9 = v8;
  if (!v7)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_connection_receive_multiple";
    v18 = (char *)_os_log_send_and_compose_impl();

    v37 = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v18, &v37, &v36))
      goto LABEL_41;
    if (v37 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = v37;
      if (os_log_type_enabled(v19, v37))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_connection_receive_multiple";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v24 = v37;
      v25 = os_log_type_enabled(v19, v37);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_connection_receive_multiple";
          v40 = 2082;
          v41 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v18)
          goto LABEL_7;
LABEL_42:
        free(v18);
        goto LABEL_7;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_connection_receive_multiple";
        _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = v37;
      if (os_log_type_enabled(v19, v37))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_connection_receive_multiple";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  if (v8)
  {
    v10 = a3;
    v11 = MEMORY[0x1E0C809B0];
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 3221225472;
    v34[2] = __nw_connection_receive_multiple_block_invoke;
    v34[3] = &unk_1E149DB00;
    v12 = v8;
    v35 = v12;
    multiple = nw_read_request_create_multiple(a2, v10, v7, v34);
    if (multiple)
    {
      nw_connection_add_read_request(v7, multiple);
    }
    else
    {
      v14 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
      v15 = v7[48];
      v31[0] = v11;
      v31[1] = 3221225472;
      v31[2] = __nw_connection_receive_multiple_block_invoke_2;
      v31[3] = &unk_1E14ACE18;
      v32 = v14;
      v33 = v12;
      v16 = v14;
      nw_connection_async_client_if_needed_with_override(v7, 0, v15, v31);

    }
    goto LABEL_7;
  }
  __nwlog_obj();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v39 = "nw_connection_receive_multiple";
  v18 = (char *)_os_log_send_and_compose_impl();

  v37 = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (!__nwlog_fault(v18, &v37, &v36))
    goto LABEL_41;
  if (v37 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v22 = v37;
    if (os_log_type_enabled(v19, v37))
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_connection_receive_multiple";
      _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null completion", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v36)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v30 = v37;
    if (os_log_type_enabled(v19, v37))
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_connection_receive_multiple";
      _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v26 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v19 = objc_claimAutoreleasedReturnValue();
  v27 = v37;
  v28 = os_log_type_enabled(v19, v37);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_connection_receive_multiple";
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null completion, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    v39 = "nw_connection_receive_multiple";
    v40 = 2082;
    v41 = v26;
    _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v26);
  if (v18)
    goto LABEL_42;
LABEL_7:

}

void sub_1835C707C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void __nw_connection_receive_multiple_block_invoke(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, void *a5)
{
  uint64_t v5;
  uint64_t v9;
  id v10;

  LODWORD(v5) = a4;
  v10 = a5;
  if ((_DWORD)v5)
  {
    v9 = (v5 - 1);
    v5 = v5;
    do
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD, BOOL, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2++, *a3++, v9-- == 0, v10);
      --v5;
    }
    while (v5);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1835C7178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __nw_connection_receive_multiple_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, 1, *(_QWORD *)(a1 + 32));
}

void nw_connection_receive_file_at_path_with_progress(void *a1, const char *a2, unint64_t a3, void *a4)
{
  id v8;
  id v9;
  void *v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _DWORD *v16;
  id v17;
  _DWORD *v18;
  _DWORD *v19;
  id v20;
  NWConcrete_nw_read_request *v21;
  NWConcrete_nw_read_request *v22;
  qos_class_t v23;
  void *v24;
  id file_handler;
  NWConcrete_nw_read_request *v26;
  _DWORD *posix_error;
  void *v28;
  _DWORD *v29;
  void *v30;
  dispatch_qos_class_t v31;
  id v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  char *v36;
  _BOOL4 v37;
  os_log_type_t v38;
  _DWORD *v39;
  dispatch_qos_class_t v40;
  id v41;
  _DWORD *v42;
  void *v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  void *v47;
  os_log_type_t v48;
  char *backtrace_string;
  os_log_type_t v50;
  _BOOL4 v51;
  char *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  NSObject *v55;
  int v56;
  os_log_type_t v57;
  os_log_type_t v58;
  os_log_type_t v59;
  _QWORD v60[4];
  id v61;
  os_log_type_t *v62;
  _QWORD v63[5];
  os_log_type_t v64[8];
  os_log_type_t *v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t);
  void (*v68)(uint64_t);
  id v69;
  char v70;
  os_log_type_t type;
  _BYTE buf[32];
  id v73;
  id v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a4;
  v10 = v9;
  if (!v8)
  {
    __nwlog_obj();
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_receive_file_at_path_with_progress";
    v44 = (char *)_os_log_send_and_compose_impl();

    v64[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v44, v64, &type))
      goto LABEL_83;
    if (v64[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v46 = v64[0];
      if (os_log_type_enabled(v45, v64[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_receive_file_at_path_with_progress";
        _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v50 = v64[0];
      v51 = os_log_type_enabled(v45, v64[0]);
      if (backtrace_string)
      {
        if (v51)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_receive_file_at_path_with_progress";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v45, v50, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_83:
        if (!v44)
          goto LABEL_44;
LABEL_84:
        free(v44);
        goto LABEL_44;
      }
      if (v51)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_receive_file_at_path_with_progress";
        _os_log_impl(&dword_182FBE000, v45, v50, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v57 = v64[0];
      if (os_log_type_enabled(v45, v64[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_receive_file_at_path_with_progress";
        _os_log_impl(&dword_182FBE000, v45, v57, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_82:

    goto LABEL_83;
  }
  if (v9)
  {
    *(_QWORD *)v64 = 0;
    v65 = v64;
    v66 = 0x3032000000;
    v67 = __Block_byref_object_copy__24122;
    v68 = __Block_byref_object_dispose__24123;
    v69 = 0;
    v11 = open(a2, 525, 511);
    if (v11 == -1)
    {
      posix_error = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8));
      v28 = (void *)*((_QWORD *)v65 + 5);
      *((_QWORD *)v65 + 5) = posix_error;

      v12 = 0;
      v13 = *((_QWORD *)v65 + 5);
    }
    else
    {
      v12 = nw_fd_wrapper_create(v11);
      v63[0] = MEMORY[0x1E0C809B0];
      v63[1] = 3221225472;
      v63[2] = __nw_connection_receive_file_at_path_with_progress_block_invoke;
      v63[3] = &unk_1E14AB578;
      v63[4] = v64;
      nw_fd_wrapper_get_fd(v12, v63);
      v13 = *((_QWORD *)v65 + 5);
      if (!v13 && v12)
      {
        v14 = *((_QWORD *)v8 + 2);
        if (v14 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v14 + 104)) && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v55 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
          {
            v56 = *((_DWORD *)v8 + 112);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_connection_receive_file_at_path_with_progress";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v56;
            *(_WORD *)&buf[18] = 2112;
            *(_QWORD *)&buf[20] = v12;
            _os_log_impl(&dword_182FBE000, v55, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] attempting file read request on fd: %@", buf, 0x1Cu);
          }

        }
        v15 = v8;
        v16 = v12;
        v17 = v10;
        v18 = v16;
        v19 = v15;
        v20 = v17;
        v21 = objc_alloc_init(NWConcrete_nw_read_request);
        v22 = v21;
        if (v21)
        {
          objc_storeStrong((id *)&v21->connection, a1);
          v23 = qos_class_self();
          v22->min = a3;
          v22->max = a3;
          v22->qos_class = v23;
          v22->variant = 4;
          objc_storeStrong((id *)&v22->fd, v12);
          v24 = _Block_copy(v20);
          file_handler = v22->file_handler;
          v22->file_handler = v24;

          v22->progress_msecs = 200;
          *((_BYTE *)v22 + 176) &= ~4u;
          if (_nw_signposts_once != -1)
            dispatch_once(&_nw_signposts_once, &__block_literal_global_51698);
          if (_nw_signposts_enabled && kdebug_is_enabled())
            kdebug_trace();
          v26 = v22;
          goto LABEL_39;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_read_request_create_with_file";
        v33 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v70 = 0;
        if ((__nwlog_fault(v33, &type, &v70) & 1) != 0)
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v34 = (id)gLogObj;
            v35 = type;
            if (os_log_type_enabled(v34, type))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_read_request_create_with_file";
              _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed", buf, 0xCu);
            }
          }
          else if (v70)
          {
            v36 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v34 = (id)gLogObj;
            v59 = type;
            v37 = os_log_type_enabled(v34, type);
            if (v36)
            {
              if (v37)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_read_request_create_with_file";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v36;
                _os_log_impl(&dword_182FBE000, v34, v59, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v36);
              if (!v33)
                goto LABEL_39;
              goto LABEL_38;
            }
            if (v37)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_read_request_create_with_file";
              _os_log_impl(&dword_182FBE000, v34, v59, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v34 = (id)gLogObj;
            v38 = type;
            if (os_log_type_enabled(v34, type))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_read_request_create_with_file";
              _os_log_impl(&dword_182FBE000, v34, v38, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
        if (!v33)
        {
LABEL_39:

          if (v22)
          {
            nw_connection_add_read_request(v19, v22);
          }
          else
          {
            v39 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
            v40 = v19[48];
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = ___ZL35nw_connection_receive_file_internalP24NWConcrete_nw_connectionPU27objcproto16OS_nw_fd_wrapper8NSObjectmU13block_pointerFbmPU32objcproto21OS_nw_content_contextS1_bPU22objcproto11OS_nw_errorS1_E_block_invoke;
            *(_QWORD *)&buf[24] = &unk_1E14ACE18;
            v41 = v20;
            v73 = v39;
            v74 = v41;
            v42 = v39;
            nw_connection_async_client_if_needed_with_override(v19, 0, v40, buf);

          }
LABEL_43:

          _Block_object_dispose(v64, 8);
          goto LABEL_44;
        }
LABEL_38:
        free(v33);
        goto LABEL_39;
      }
    }
    if (!v13)
    {
      v29 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 9);
      v30 = (void *)*((_QWORD *)v65 + 5);
      *((_QWORD *)v65 + 5) = v29;

    }
    v31 = *((_DWORD *)v8 + 48);
    v60[0] = MEMORY[0x1E0C809B0];
    v60[1] = 3221225472;
    v60[2] = __nw_connection_receive_file_at_path_with_progress_block_invoke_32;
    v60[3] = &unk_1E14A3420;
    v61 = v10;
    v62 = v64;
    nw_connection_async_client_if_needed_with_override(v8, 0, v31, v60);

    v18 = v12;
    goto LABEL_43;
  }
  __nwlog_obj();
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_receive_file_at_path_with_progress";
  v44 = (char *)_os_log_send_and_compose_impl();

  v64[0] = OS_LOG_TYPE_ERROR;
  type = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v44, v64, &type))
    goto LABEL_83;
  if (v64[0] == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v45 = objc_claimAutoreleasedReturnValue();
    v48 = v64[0];
    if (os_log_type_enabled(v45, v64[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_receive_file_at_path_with_progress";
      _os_log_impl(&dword_182FBE000, v45, v48, "%{public}s called with null handler", buf, 0xCu);
    }
    goto LABEL_82;
  }
  if (type == OS_LOG_TYPE_DEFAULT)
  {
    __nwlog_obj();
    v45 = objc_claimAutoreleasedReturnValue();
    v58 = v64[0];
    if (os_log_type_enabled(v45, v64[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_receive_file_at_path_with_progress";
      _os_log_impl(&dword_182FBE000, v45, v58, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_82;
  }
  v52 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v45 = objc_claimAutoreleasedReturnValue();
  v53 = v64[0];
  v54 = os_log_type_enabled(v45, v64[0]);
  if (!v52)
  {
    if (v54)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_receive_file_at_path_with_progress";
      _os_log_impl(&dword_182FBE000, v45, v53, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_82;
  }
  if (v54)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_connection_receive_file_at_path_with_progress";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v52;
    _os_log_impl(&dword_182FBE000, v45, v53, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v52);
  if (v44)
    goto LABEL_84;
LABEL_44:

}

void sub_1835C7D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,id a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_receive_file_at_path_with_progress_block_invoke(uint64_t a1, int a2)
{
  _DWORD *posix_error;
  uint64_t v4;
  void *v5;
  stat v7;

  memset(&v7, 0, sizeof(v7));
  if (fstat(a2, &v7) == -1)
  {
    posix_error = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8));
    goto LABEL_5;
  }
  if ((v7.st_mode & 0xF000) != 0x8000)
  {
    posix_error = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 9);
LABEL_5:
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = posix_error;

  }
  return 1;
}

uint64_t ___ZL35nw_connection_receive_file_internalP24NWConcrete_nw_connectionPU27objcproto16OS_nw_fd_wrapper8NSObjectmU13block_pointerFbmPU32objcproto21OS_nw_content_contextS1_bPU22objcproto11OS_nw_errorS1_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, 0, *(_QWORD *)(a1 + 32));
}

uint64_t __nw_connection_receive_file_at_path_with_progress_block_invoke_32(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, 0, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void nw_connection_receive_internal(void *a1, void *a2, unsigned int a3, unsigned int a4, void *a5)
{
  _DWORD *v9;
  id v10;
  id v11;
  void *v12;
  NWConcrete_nw_read_request *v13;
  _DWORD *v14;
  dispatch_qos_class_t v15;
  _DWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  char v34;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a5;
  v12 = v11;
  if (!v9)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_connection_receive_internal";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v18, &type, &v34))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_connection_receive_internal";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v34)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v37 = "nw_connection_receive_internal";
          v38 = 2082;
          v39 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v18)
          goto LABEL_7;
LABEL_42:
        free(v18);
        goto LABEL_7;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_connection_receive_internal";
        _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_connection_receive_internal";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  if (v11)
  {
    v13 = nw_read_request_create(a3, a4, v10, v9, v11);
    if (v13)
    {
      nw_connection_add_read_request(v9, v13);
    }
    else
    {
      v14 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
      v15 = v9[48];
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = ___ZL30nw_connection_receive_internalP24NWConcrete_nw_connectionPU32objcproto21OS_nw_content_context8NSObjectjjU13block_pointerFvPU27objcproto16OS_dispatch_dataS1_S3_bPU22objcproto11OS_nw_errorS1_E_block_invoke;
      v31[3] = &unk_1E14ACE18;
      v32 = v14;
      v33 = v12;
      v16 = v14;
      nw_connection_async_client_if_needed_with_override(v9, 0, v15, v31);

    }
    goto LABEL_7;
  }
  __nwlog_obj();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v37 = "nw_connection_receive_internal";
  v18 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v34 = 0;
  if (!__nwlog_fault(v18, &type, &v34))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      v37 = "nw_connection_receive_internal";
      _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null completion", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v34)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v30 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      v37 = "nw_connection_receive_internal";
      _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v26 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v19 = objc_claimAutoreleasedReturnValue();
  v27 = type;
  v28 = os_log_type_enabled(v19, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      v37 = "nw_connection_receive_internal";
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null completion, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    v37 = "nw_connection_receive_internal";
    v38 = 2082;
    v39 = v26;
    _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v26);
  if (v18)
    goto LABEL_42;
LABEL_7:

}

void sub_1835C840C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t ___ZL30nw_connection_receive_internalP24NWConcrete_nw_connectionPU32objcproto21OS_nw_content_context8NSObjectjjU13block_pointerFvPU27objcproto16OS_dispatch_dataS1_S3_bPU22objcproto11OS_nw_errorS1_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, 0, *(_QWORD *)(a1 + 32));
}

void nw_connection_receive_message(nw_connection_t connection, nw_connection_receive_completion_t completion)
{
  nw_connection_receive_internal(connection, 0, 0xFFFFFFFF, 0xFFFFFFFF, completion);
}

void nw_connection_receive_message_with_context(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    nw_connection_receive_internal(v5, v6, 0xFFFFFFFF, 0xFFFFFFFF, v7);
    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_connection_receive_message_with_context";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_receive_message_with_context";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null message", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_connection_receive_message_with_context";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_receive_message_with_context";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_receive_message_with_context";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
LABEL_3:

}

void sub_1835C874C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_connection_read(void *a1, unsigned int a2, unsigned int a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  _QWORD v25[4];
  id v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a4;
  v9 = v8;
  if (v7)
  {
    if (v8)
    {
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = __nw_connection_read_block_invoke;
      v25[3] = &unk_1E14A93A0;
      v26 = v8;
      nw_connection_receive_internal(v7, 0, a2, a3, v25);

      v10 = 1;
      goto LABEL_4;
    }
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_connection_read";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v13, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_connection_read";
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v27)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_connection_read";
          _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_connection_read";
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v30 = "nw_connection_read";
        v31 = 2082;
        v32 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_connection_read";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v13, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_connection_read";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v27)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_connection_read";
          _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_connection_read";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        v30 = "nw_connection_read";
        v31 = 2082;
        v32 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v13)
    free(v13);
  v10 = 0;
LABEL_4:

  return v10;
}

void sub_1835C8C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void __nw_connection_read_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  void *v10;
  id v11;

  v11 = a2;
  v8 = a3;
  v9 = a5;
  v10 = v9;
  if (v9)

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1835C8D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void __nw_connection_send_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
  (*(void (**)(uint64_t))(v1 + 16))(v1);

}

void sub_1835C8DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_connection_add_write_request(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  _QWORD v9[4];
  os_unfair_lock_s *v10;
  id v11;
  _QWORD v12[4];
  os_unfair_lock_s *v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v3 = a1;
  v4 = a2;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 1;
  v5 = v3 + 34;
  v6 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZL31nw_connection_add_write_requestP24NWConcrete_nw_connectionPU30objcproto19OS_nw_write_request8NSObject_block_invoke;
  v12[3] = &unk_1E14A2D98;
  v7 = v3;
  v13 = v7;
  v8 = v4;
  v14 = v8;
  v15 = &v16;
  os_unfair_lock_lock(v5);
  ___ZL31nw_connection_add_write_requestP24NWConcrete_nw_connectionPU30objcproto19OS_nw_write_request8NSObject_block_invoke((uint64_t)v12);
  os_unfair_lock_unlock(v5);
  if (*((_BYTE *)v17 + 24))
  {
    v9[0] = v6;
    v9[1] = 3221225472;
    v9[2] = ___ZL31nw_connection_add_write_requestP24NWConcrete_nw_connectionPU30objcproto19OS_nw_write_request8NSObject_block_invoke_2;
    v9[3] = &unk_1E14ACE68;
    v10 = v7;
    v11 = v8;
    nw_connection_async_if_needed(v10, v9);

  }
  _Block_object_dispose(&v16, 8);

}

void sub_1835C8F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose((const void *)(v23 - 96), 8);
  _Unwind_Resume(a1);
}

void ___ZL31nw_connection_add_write_requestP24NWConcrete_nw_connectionPU30objcproto19OS_nw_write_request8NSObject_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 v3;
  uint64_t v4;
  void *v5;

  v1 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v1 + 109) & 0x20) != 0)
  {
    v3 = nw_write_request_list_append(*(void **)(v1 + 112), *(void **)(a1 + 40));
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 112);
    *(_QWORD *)(v4 + 112) = v3;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }
}

void ___ZL31nw_connection_add_write_requestP24NWConcrete_nw_connectionPU30objcproto19OS_nw_write_request8NSObject_block_invoke_2(uint64_t a1)
{
  nw_connection_add_write_request_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40), 1);
}

void nw_connection_add_write_request_on_queue(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void **v7;
  int v8;
  _QWORD v9[4];
  void **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v5 = a1;
  v6 = a2;
  nw_context_assert_queue(*((void **)v5 + 3));
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZL40nw_connection_add_write_request_on_queueP24NWConcrete_nw_connectionPU30objcproto19OS_nw_write_request8NSObjectb_block_invoke;
  v9[3] = &unk_1E14ACE40;
  v11 = &v12;
  v7 = (void **)v5;
  v10 = v7;
  os_unfair_lock_lock((os_unfair_lock_t)v5 + 34);
  ___ZL40nw_connection_add_write_request_on_queueP24NWConcrete_nw_connectionPU30objcproto19OS_nw_write_request8NSObjectb_block_invoke((uint64_t)v9);
  os_unfair_lock_unlock((os_unfair_lock_t)v5 + 34);
  if (*((_BYTE *)v13 + 24))
  {
    v8 = 89;
LABEL_8:
    nw_write_request_fail(v6, v8);
    goto LABEL_9;
  }
  if (!nw_endpoint_handler_add_write_request(v7[18], v6))
  {
    v8 = 57;
    goto LABEL_8;
  }
  if (a3 && (*((_BYTE *)v7 + 109) & 0x40) != 0)
    nw_endpoint_handler_service_writes(v7[18]);
LABEL_9:

  _Block_object_dispose(&v12, 8);
}

void sub_1835C90CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_connection_add_write_request_on_queueP24NWConcrete_nw_connectionPU30objcproto19OS_nw_write_request8NSObjectb_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = (*(_BYTE *)(*(_QWORD *)(result + 32) + 109) & 8) != 0;
  return result;
}

void nw_connection_send_idempotent(NSObject *a1, NSObject *a2, NSObject *a3, BOOL a4)
{
  nw_connection_send(a1, a2, a3, a4, &__block_literal_global_24144);
}

void nw_connection_send_reply(void *a1, void *a2, void *a3, void *a4, int a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  void *v19;
  id v20;
  id v21;
  char v22;
  const char *v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  dispatch_qos_class_t v29;
  NSObject *v30;
  id repliable_metadata;
  NSObject *reply;
  NSObject *v33;
  NWConcrete_nw_write_request *v34;
  NWConcrete_nw_write_request *v35;
  id v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  os_log_type_t v44;
  void *v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  void *v49;
  os_log_type_t v50;
  char *backtrace_string;
  os_log_type_t v52;
  _BOOL4 v53;
  char *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  os_log_type_t v57;
  os_log_type_t v58;
  id v59;
  _QWORD v60[4];
  id v61;
  char v62;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  _WORD v67[17];

  *(_QWORD *)&v67[13] = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a6;
  v16 = v15;
  v59 = v11;
  if (!v11)
  {
    __nwlog_obj();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_connection_send_reply";
    v46 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (!__nwlog_fault(v46, &type, &v62))
      goto LABEL_92;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v47 = objc_claimAutoreleasedReturnValue();
      v48 = type;
      if (os_log_type_enabled(v47, type))
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_connection_send_reply";
        _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v62)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v47 = objc_claimAutoreleasedReturnValue();
      v52 = type;
      v53 = os_log_type_enabled(v47, type);
      if (backtrace_string)
      {
        if (v53)
        {
          *(_DWORD *)buf = 136446466;
          v65 = "nw_connection_send_reply";
          v66 = 2082;
          *(_QWORD *)v67 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v47, v52, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_92:
        if (!v46)
          goto LABEL_29;
LABEL_93:
        free(v46);
        goto LABEL_29;
      }
      if (v53)
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_connection_send_reply";
        _os_log_impl(&dword_182FBE000, v47, v52, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v47 = objc_claimAutoreleasedReturnValue();
      v57 = type;
      if (os_log_type_enabled(v47, type))
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_connection_send_reply";
        _os_log_impl(&dword_182FBE000, v47, v57, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_91:

    goto LABEL_92;
  }
  if (v15)
  {
    if (!v12)
    {
      v23 = "No original message provided";
      goto LABEL_21;
    }
    v17 = (os_unfair_lock_s *)v12;
    v18 = v17;
    if (v17 == (os_unfair_lock_s *)&__block_literal_global_5_41741)
    {
      v19 = v16;
      v20 = v12;
      v21 = v13;

    }
    else
    {
      if (v17 == (os_unfair_lock_s *)&__block_literal_global_4
        || v17 == (os_unfair_lock_s *)&__block_literal_global_3_41726
        || v17 == (os_unfair_lock_s *)&__block_literal_global_41718)
      {

        v23 = "Protocol does not support replies";
LABEL_21:
        v26 = *((_QWORD *)v59 + 2);
        if (v26 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v26 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v27 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            v28 = *((_DWORD *)v59 + 112);
            *(_DWORD *)buf = 136446722;
            v65 = "nw_connection_send_reply";
            v66 = 1024;
            *(_DWORD *)v67 = v28;
            v67[2] = 2082;
            *(_QWORD *)&v67[3] = v23;
            _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, "%{public}s [C%u] %{public}s, sending error callback", buf, 0x1Cu);
          }

        }
        v29 = *((_DWORD *)v59 + 48);
        v60[0] = MEMORY[0x1E0C809B0];
        v60[1] = 3221225472;
        v60[2] = __nw_connection_send_reply_block_invoke;
        v60[3] = &unk_1E14AC390;
        v61 = v16;
        nw_connection_async_client_if_needed_with_override(v59, 0, v29, v60);

        goto LABEL_29;
      }
      v19 = v16;
      v20 = v12;
      v21 = v13;
      os_unfair_lock_lock(v17 + 28);
      v22 = BYTE2(v18[29]._os_unfair_lock_opaque);
      os_unfair_lock_unlock(v18 + 28);

      if ((v22 & 0x40) == 0)
      {
        v23 = "Protocol does not support replies";
        v13 = v21;
LABEL_20:
        v12 = v20;
        v16 = v19;
        goto LABEL_21;
      }
    }
    if (v14 == &__block_literal_global_4)
    {
      v23 = "Cannot send replies on stream context";
      v13 = v21;
      goto LABEL_20;
    }
    v13 = v21;
    if (v14 == &__block_literal_global_5_41741)
    {
      v23 = "Cannot send replies on new inbound message context";
      goto LABEL_20;
    }
    v24 = v14;
    v25 = v24;
    v12 = v20;
    if (!v24 || v24 == &__block_literal_global_41718 || v24 == &__block_literal_global_3_41726)
    {
      v16 = v19;
      v30 = nw_content_context_create("Reply");

      repliable_metadata = nw_content_context_copy_first_repliable_metadata(v18);
      reply = nw_protocol_metadata_create_reply(repliable_metadata);
      nw_content_context_set_metadata_for_protocol(v30, reply);
      if (v25 == &__block_literal_global_3_41726)
        nw_content_context_set_is_final(v30, 1);
      v25 = v30;

    }
    else
    {
      v16 = v19;
    }
    v33 = v25;
    if (v16 == &__block_literal_global_24144)
      v34 = nw_write_request_create_idempotent(v13, v25, v18, a5);
    else
      v34 = nw_write_request_create(v13, v25, v18, a5, v59, v16);
    v35 = v34;
    if (v34)
    {
      nw_connection_add_write_request(v59, v34);
LABEL_57:

      goto LABEL_29;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v36 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v65 = "nw_connection_send_reply";
    v37 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (!__nwlog_fault(v37, &type, &v62))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v38 = (id)gLogObj;
      v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_connection_send_reply";
        _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s nw_write_request_create failed", buf, 0xCu);
      }
    }
    else
    {
      if (v62)
      {
        v40 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v42 = type;
        v43 = os_log_type_enabled(v41, type);
        if (v40)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136446466;
            v65 = "nw_connection_send_reply";
            v66 = 2082;
            *(_QWORD *)v67 = v40;
            _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s nw_write_request_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v40);
          if (!v37)
            goto LABEL_57;
          goto LABEL_56;
        }
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_connection_send_reply";
          _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s nw_write_request_create failed, no backtrace", buf, 0xCu);
        }

LABEL_55:
        if (!v37)
          goto LABEL_57;
LABEL_56:
        free(v37);
        goto LABEL_57;
      }
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_connection_send_reply";
        _os_log_impl(&dword_182FBE000, v38, v44, "%{public}s nw_write_request_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_55;
  }
  __nwlog_obj();
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v65 = "nw_connection_send_reply";
  v46 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v62 = 0;
  if (!__nwlog_fault(v46, &type, &v62))
    goto LABEL_92;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v47 = objc_claimAutoreleasedReturnValue();
    v50 = type;
    if (os_log_type_enabled(v47, type))
    {
      *(_DWORD *)buf = 136446210;
      v65 = "nw_connection_send_reply";
      _os_log_impl(&dword_182FBE000, v47, v50, "%{public}s called with null completion", buf, 0xCu);
    }
    goto LABEL_91;
  }
  if (!v62)
  {
    __nwlog_obj();
    v47 = objc_claimAutoreleasedReturnValue();
    v58 = type;
    if (os_log_type_enabled(v47, type))
    {
      *(_DWORD *)buf = 136446210;
      v65 = "nw_connection_send_reply";
      _os_log_impl(&dword_182FBE000, v47, v58, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_91;
  }
  v54 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v47 = objc_claimAutoreleasedReturnValue();
  v55 = type;
  v56 = os_log_type_enabled(v47, type);
  if (!v54)
  {
    if (v56)
    {
      *(_DWORD *)buf = 136446210;
      v65 = "nw_connection_send_reply";
      _os_log_impl(&dword_182FBE000, v47, v55, "%{public}s called with null completion, no backtrace", buf, 0xCu);
    }
    goto LABEL_91;
  }
  if (v56)
  {
    *(_DWORD *)buf = 136446466;
    v65 = "nw_connection_send_reply";
    v66 = 2082;
    *(_QWORD *)v67 = v54;
    _os_log_impl(&dword_182FBE000, v47, v55, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v54);
  if (v46)
    goto LABEL_93;
LABEL_29:

}

void sub_1835C9B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_connection_send_reply_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
  (*(void (**)(uint64_t))(v1 + 16))(v1);

}

void sub_1835C9C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_connection_send_file_at_path_with_progress(void *a1, const char *a2, void *a3, uint64_t a4, int a5, void *a6)
{
  id v12;
  id v13;
  void *v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  NWConcrete_nw_write_request *v30;
  _DWORD *v31;
  double *v32;
  double *v33;
  double v34;
  double *v35;
  int v36;
  char v37;
  _DWORD *posix_error;
  void *v39;
  _DWORD *v40;
  void *v41;
  dispatch_qos_class_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  int v46;
  dispatch_qos_class_t v47;
  void *v48;
  id v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  void *v53;
  void *v54;
  void *v55;
  char *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  os_log_type_t v59;
  id v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  char *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  os_log_type_t v67;
  void *v68;
  void *v69;
  char *v70;
  NSObject *v71;
  os_log_type_t v72;
  void *v73;
  os_log_type_t v74;
  char *backtrace_string;
  os_log_type_t v76;
  _BOOL4 v77;
  os_log_type_t v78;
  _BOOL4 v79;
  void *v80;
  char *v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  NSObject *v85;
  int v86;
  char *v87;
  NSObject *v88;
  os_log_type_t v89;
  _BOOL4 v90;
  os_log_type_t v91;
  os_log_type_t v92;
  NSObject *v93;
  NSObject *v94;
  os_log_type_t v95;
  NSObject *v96;
  NSObject *v97;
  _DWORD *v98;
  id aBlock;
  _QWORD *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  id v106;
  id v107;
  _QWORD v108[4];
  id v109;
  _BYTE *v110;
  _QWORD v111[6];
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  os_log_type_t v117;
  _BYTE v118[24];
  uint64_t (*v119)(uint64_t, uint64_t);
  void (*v120)(uint64_t);
  id v121;
  _BYTE buf[32];
  id v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v106 = a3;
  v13 = a6;
  v107 = v13;
  if (!v12)
  {
    __nwlog_obj();
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v118 = 136446210;
    *(_QWORD *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
    v70 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v112) = 0;
    if (!__nwlog_fault(v70, buf, &v112))
      goto LABEL_145;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v71 = objc_claimAutoreleasedReturnValue();
      v72 = buf[0];
      if (os_log_type_enabled(v71, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v118 = 136446210;
        *(_QWORD *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_182FBE000, v71, v72, "%{public}s called with null connection", v118, 0xCu);
      }
      goto LABEL_144;
    }
    if (!(_BYTE)v112)
    {
      __nwlog_obj();
      v71 = objc_claimAutoreleasedReturnValue();
      v91 = buf[0];
      if (os_log_type_enabled(v71, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v118 = 136446210;
        *(_QWORD *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_182FBE000, v71, v91, "%{public}s called with null connection, backtrace limit exceeded", v118, 0xCu);
      }
      goto LABEL_144;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v71 = objc_claimAutoreleasedReturnValue();
    v76 = buf[0];
    v77 = os_log_type_enabled(v71, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v77)
      {
        *(_DWORD *)v118 = 136446210;
        *(_QWORD *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_182FBE000, v71, v76, "%{public}s called with null connection, no backtrace", v118, 0xCu);
      }
      goto LABEL_144;
    }
    if (v77)
    {
      *(_DWORD *)v118 = 136446466;
      *(_QWORD *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
      *(_WORD *)&v118[12] = 2082;
      *(_QWORD *)&v118[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v71, v76, "%{public}s called with null connection, dumping backtrace:%{public}s", v118, 0x16u);
    }
    goto LABEL_117;
  }
  v14 = v13;
  if (v13)
  {
    *(_QWORD *)v118 = 0;
    *(_QWORD *)&v118[8] = v118;
    *(_QWORD *)&v118[16] = 0x3032000000;
    v119 = __Block_byref_object_copy__24122;
    v120 = __Block_byref_object_dispose__24123;
    v121 = 0;
    v112 = 0;
    v113 = &v112;
    v114 = 0x2020000000;
    v115 = a4;
    v15 = open(a2, 4);
    v16 = MEMORY[0x1E0C809B0];
    if (v15 == -1)
    {
      posix_error = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8));
      v39 = *(void **)(*(_QWORD *)&v118[8] + 40);
      *(_QWORD *)(*(_QWORD *)&v118[8] + 40) = posix_error;

      v17 = 0;
      v18 = *(_QWORD *)(*(_QWORD *)&v118[8] + 40);
      v14 = v107;
    }
    else
    {
      v17 = nw_fd_wrapper_create(v15);
      v111[0] = v16;
      v111[1] = 3221225472;
      v111[2] = __nw_connection_send_file_at_path_with_progress_block_invoke;
      v111[3] = &unk_1E149DB68;
      v111[4] = v118;
      v111[5] = &v112;
      nw_fd_wrapper_get_fd(v17, v111);
      v18 = *(_QWORD *)(*(_QWORD *)&v118[8] + 40);
      if (!v18 && v17)
      {
        v19 = *((_QWORD *)v12 + 2);
        if (v19 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v19 + 104)) && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v85 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
          {
            v86 = *((_DWORD *)v12 + 112);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_connection_send_file_at_path_with_progress";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v86;
            *(_WORD *)&buf[18] = 2112;
            *(_QWORD *)&buf[20] = v17;
            _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] attempting file write request on fd: %@", buf, 0x1Cu);
          }

          v14 = v107;
        }
        v20 = v113[3];
        v21 = v12;
        v22 = v12;
        v23 = v17;
        v24 = v106;
        v25 = v14;
        v104 = v22;
        v105 = v23;
        v101 = v24;
        v102 = v21;
        v103 = v25;
        if (v24 == &__block_literal_global_5_41741)
        {
          v43 = v21[2];
          v44 = MEMORY[0x1E0C809B0];
          if (v43 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v43 + 104)))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v45 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
            {
              v46 = v22[112];
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_connection_send_file_internal";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v46;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = "Cannot send replies on new inbound message context";
              _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_ERROR, "%{public}s [C%u] %{public}s, sending error callback", buf, 0x1Cu);
            }

          }
          v47 = v22[48];
          *(_QWORD *)buf = v44;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL32nw_connection_send_file_internalP24NWConcrete_nw_connectionPU27objcproto16OS_nw_fd_wrapper8NSObjectPU32objcproto21OS_nw_content_contextS1_mbU13block_pointerFbmbPU22objcproto11OS_nw_errorS1_E_block_invoke;
          *(_QWORD *)&buf[24] = &unk_1E14AC390;
          v123 = v103;
          nw_connection_async_client_if_needed_with_override(v22, 0, v47, buf);
          v48 = v123;
          v12 = v21;
          goto LABEL_95;
        }
        v26 = v25;
        if (v24)
          v27 = v24;
        else
          v27 = &__block_literal_global_41718;
        v28 = v27;
        v98 = v23;
        v29 = v28;
        v100 = v22;
        aBlock = v26;
        if (!v20
          && (a5 & 1) == 0
          && (v29 == &__block_literal_global_3_41726
           || v29 == &__block_literal_global_41718
           || v29 == &__block_literal_global_4
           || v29 == &__block_literal_global_5_41741))
        {
          __nwlog_obj();
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_write_request_create_with_file";
          v81 = (char *)_os_log_send_and_compose_impl();

          v12 = v102;
          v82 = MEMORY[0x1E0C809B0];
          v117 = OS_LOG_TYPE_ERROR;
          v116 = 0;
          if (__nwlog_fault(v81, &v117, &v116))
          {
            if (v117 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v83 = objc_claimAutoreleasedReturnValue();
              v84 = v117;
              if (os_log_type_enabled(v83, v117))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_write_request_create_with_file";
                _os_log_impl(&dword_182FBE000, v83, v84, "%{public}s Send content may only be nil if the request is marked as complete", buf, 0xCu);
              }

            }
            else if (v116)
            {
              v87 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v88 = objc_claimAutoreleasedReturnValue();
              v89 = v117;
              v90 = os_log_type_enabled(v88, v117);
              if (v87)
              {
                if (v90)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_write_request_create_with_file";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v87;
                  _os_log_impl(&dword_182FBE000, v88, v89, "%{public}s Send content may only be nil if the request is marked as complete, dumping backtrace:%{public}s", buf, 0x16u);
                }

                v12 = v102;
                v82 = MEMORY[0x1E0C809B0];
                free(v87);
              }
              else
              {
                if (v90)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_write_request_create_with_file";
                  _os_log_impl(&dword_182FBE000, v88, v89, "%{public}s Send content may only be nil if the request is marked as complete, no backtrace", buf, 0xCu);
                }

                v12 = v102;
                v82 = MEMORY[0x1E0C809B0];
              }
            }
            else
            {
              __nwlog_obj();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = v117;
              if (os_log_type_enabled(v94, v117))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_write_request_create_with_file";
                _os_log_impl(&dword_182FBE000, v94, v95, "%{public}s Send content may only be nil if the request is marked as complete, backtrace limit exceeded", buf, 0xCu);
              }

              v12 = v102;
            }
          }
          if (v81)
            free(v81);
          v96 = v100[25];
          if (v96)
          {
            *(_QWORD *)buf = v82;
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = __nw_write_request_create_with_file_block_invoke;
            *(_QWORD *)&buf[24] = &unk_1E14AC390;
            v123 = aBlock;
            dispatch_async(v96, buf);
            v55 = 0;
            v31 = v123;
          }
          else
          {
            v31 = nw_error_create_posix_error(22);
            v55 = 0;
            (*((void (**)(id, _QWORD, _QWORD, _DWORD *))aBlock + 2))(aBlock, 0, 0, v31);
            v12 = v102;
          }
LABEL_73:

          if (v55)
          {
            nw_connection_add_write_request(v100, v55);
LABEL_94:

            v48 = v29;
LABEL_95:

            v17 = v105;
LABEL_96:
            _Block_object_dispose(&v112, 8);

            _Block_object_dispose(v118, 8);
            v68 = v107;
            goto LABEL_97;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v60 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_send_file_internal";
          v61 = (char *)_os_log_send_and_compose_impl();

          v117 = OS_LOG_TYPE_ERROR;
          v116 = 0;
          if (__nwlog_fault(v61, &v117, &v116))
          {
            if (v117 == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v62 = (id)gLogObj;
              v63 = v117;
              if (os_log_type_enabled(v62, v117))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_send_file_internal";
                _os_log_impl(&dword_182FBE000, v62, v63, "%{public}s nw_write_request_create failed", buf, 0xCu);
              }
            }
            else if (v116)
            {
              v64 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v62 = objc_claimAutoreleasedReturnValue();
              v65 = v117;
              v66 = os_log_type_enabled(v62, v117);
              if (v64)
              {
                if (v66)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_connection_send_file_internal";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v64;
                  _os_log_impl(&dword_182FBE000, v62, v65, "%{public}s nw_write_request_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v64);
                if (!v61)
                  goto LABEL_94;
                goto LABEL_93;
              }
              if (v66)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_send_file_internal";
                _os_log_impl(&dword_182FBE000, v62, v65, "%{public}s nw_write_request_create failed, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v62 = objc_claimAutoreleasedReturnValue();
              v67 = v117;
              if (os_log_type_enabled(v62, v117))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_send_file_internal";
                _os_log_impl(&dword_182FBE000, v62, v67, "%{public}s nw_write_request_create failed, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
          if (!v61)
            goto LABEL_94;
LABEL_93:
          free(v61);
          goto LABEL_94;
        }
        v30 = objc_alloc_init(NWConcrete_nw_write_request);
        v31 = v30;
        v12 = v102;
        if (v30)
        {
          objc_storeStrong((id *)&v30->context, v27);
          objc_storeStrong((id *)v31 + 13, 0);
          *((_BYTE *)v31 + 128) = v31[32] & 0xFE | a5;
          objc_storeStrong((id *)v31 + 5, a1);
          v31[12] = qos_class_self();
          v32 = (double *)v29;
          v33 = v32;
          v34 = 0.5;
          if (v32 != (double *)&__block_literal_global_5_41741
            && v32 != (double *)&__block_literal_global_4
            && v32 != (double *)&__block_literal_global_3_41726
            && v32 != (double *)&__block_literal_global_41718
            && (*((_BYTE *)v32 + 118) & 1) == 0)
          {
            v34 = v32[10];
          }

          *((double *)v31 + 15) = v34;
          if (a5)
          {
            v35 = v33;
            v36 = 0;
            if (v33 != (double *)&__block_literal_global_41718 && v33 != (double *)&__block_literal_global_5_41741)
            {
              v36 = 1;
              if (v33 != (double *)&__block_literal_global_3_41726 && v33 != (double *)&__block_literal_global_4)
                v36 = *((_BYTE *)v35 + 118) & 1;
            }

            if (v36)
              v37 = 8;
            else
              v37 = 0;
          }
          else
          {
            v37 = 0;
          }
          *((_BYTE *)v31 + 128) = v31[32] & 0xF7 | v37;
          objc_storeStrong((id *)v31 + 9, v17);
          *((_QWORD *)v31 + 12) = v20;
          v53 = _Block_copy(aBlock);
          v54 = (void *)*((_QWORD *)v31 + 4);
          *((_QWORD *)v31 + 4) = v53;

          v31[22] = 200;
          *((_BYTE *)v31 + 128) &= ~0x20u;
          if (_nw_signposts_once != -1)
            dispatch_once(&_nw_signposts_once, &__block_literal_global_32785);
          if (_nw_signposts_enabled && kdebug_is_enabled())
          {
            v93 = *((_QWORD *)v31 + 7);
            if (v93)
              dispatch_data_get_size(v93);
            v97 = *((_QWORD *)v31 + 8);
            if (v97)
              nw_content_context_get_is_final(v97);
            v12 = v102;
            kdebug_trace();
          }
          v31 = v31;
          v55 = v31;
          goto LABEL_73;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v49 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_write_request_create_with_file";
        v50 = (char *)_os_log_send_and_compose_impl();

        v117 = OS_LOG_TYPE_ERROR;
        v116 = 0;
        if ((__nwlog_fault(v50, &v117, &v116) & 1) != 0)
        {
          if (v117 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v51 = (id)gLogObj;
            v52 = v117;
            if (os_log_type_enabled(v51, v117))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_write_request_create_with_file";
              _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed", buf, 0xCu);
            }
          }
          else if (v116)
          {
            v56 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v51 = (id)gLogObj;
            v57 = v117;
            v58 = os_log_type_enabled(v51, v117);
            if (v56)
            {
              if (v58)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_write_request_create_with_file";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v56;
                _os_log_impl(&dword_182FBE000, v51, v57, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v56);
              if (!v50)
                goto LABEL_72;
              goto LABEL_71;
            }
            if (v58)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_write_request_create_with_file";
              _os_log_impl(&dword_182FBE000, v51, v57, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v51 = (id)gLogObj;
            v59 = v117;
            if (os_log_type_enabled(v51, v117))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_write_request_create_with_file";
              _os_log_impl(&dword_182FBE000, v51, v59, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
        if (!v50)
        {
LABEL_72:
          v55 = 0;
          goto LABEL_73;
        }
LABEL_71:
        free(v50);
        goto LABEL_72;
      }
    }
    if (!v18)
    {
      v40 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 9);
      v41 = *(void **)(*(_QWORD *)&v118[8] + 40);
      *(_QWORD *)(*(_QWORD *)&v118[8] + 40) = v40;

      v14 = v107;
    }
    v42 = *((_DWORD *)v12 + 48);
    v108[0] = v16;
    v108[1] = 3221225472;
    v108[2] = __nw_connection_send_file_at_path_with_progress_block_invoke_40;
    v108[3] = &unk_1E14A3420;
    v109 = v14;
    v110 = v118;
    nw_connection_async_client_if_needed_with_override(v12, 0, v42, v108);

    goto LABEL_96;
  }
  __nwlog_obj();
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v118 = 136446210;
  *(_QWORD *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
  v70 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  LOBYTE(v112) = 0;
  if (__nwlog_fault(v70, buf, &v112))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v71 = objc_claimAutoreleasedReturnValue();
      v74 = buf[0];
      if (os_log_type_enabled(v71, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v118 = 136446210;
        *(_QWORD *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_182FBE000, v71, v74, "%{public}s called with null handler", v118, 0xCu);
      }
LABEL_144:

      goto LABEL_145;
    }
    if (!(_BYTE)v112)
    {
      __nwlog_obj();
      v71 = objc_claimAutoreleasedReturnValue();
      v92 = buf[0];
      if (os_log_type_enabled(v71, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v118 = 136446210;
        *(_QWORD *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_182FBE000, v71, v92, "%{public}s called with null handler, backtrace limit exceeded", v118, 0xCu);
      }
      goto LABEL_144;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v71 = objc_claimAutoreleasedReturnValue();
    v78 = buf[0];
    v79 = os_log_type_enabled(v71, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v79)
      {
        *(_DWORD *)v118 = 136446210;
        *(_QWORD *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_182FBE000, v71, v78, "%{public}s called with null handler, no backtrace", v118, 0xCu);
      }
      goto LABEL_144;
    }
    if (v79)
    {
      *(_DWORD *)v118 = 136446466;
      *(_QWORD *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
      *(_WORD *)&v118[12] = 2082;
      *(_QWORD *)&v118[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v71, v78, "%{public}s called with null handler, dumping backtrace:%{public}s", v118, 0x16u);
    }
LABEL_117:

    free(backtrace_string);
  }
LABEL_145:
  v68 = v107;
  if (v70)
    free(v70);
LABEL_97:

}

void sub_1835CAF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  void *v40;
  uint64_t v41;

  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v41 - 208), 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_connection_send_file_at_path_with_progress_block_invoke(uint64_t a1, int a2)
{
  unint64_t st_size;
  _DWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _DWORD *posix_error;
  uint64_t v9;
  void *v10;
  stat v12;

  memset(&v12, 0, sizeof(v12));
  if (fstat(a2, &v12) == -1)
  {
    posix_error = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = posix_error;

  }
  else
  {
    st_size = v12.st_size;
    if ((v12.st_mode & 0xF000) != 0x8000)
    {
      v4 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 9);
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v6 = *(void **)(v5 + 40);
      *(_QWORD *)(v5 + 40) = v4;

    }
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if (st_size < *(_QWORD *)(v7 + 24))
      *(_QWORD *)(v7 + 24) = st_size;
  }
  return 1;
}

void ___ZL32nw_connection_send_file_internalP24NWConcrete_nw_connectionPU27objcproto16OS_nw_fd_wrapper8NSObjectPU32objcproto21OS_nw_content_contextS1_mbU13block_pointerFbmbPU22objcproto11OS_nw_errorS1_E_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v1 + 16))(v1, 0, 0);

}

void sub_1835CB17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __nw_connection_send_file_at_path_with_progress_block_invoke_40(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void nw_connection_batch(nw_connection_t connection, dispatch_block_t batch_block)
{
  nw_connection_t v3;
  void (**v4)(_QWORD);
  void (**v5)(_QWORD);
  uint64_t v6;
  NSObject *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  NSObject *v23;
  _QWORD v24[4];
  NSObject *v25;
  _BYTE *v26;
  char v27;
  os_log_type_t type;
  _BYTE buf[24];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = connection;
  v4 = batch_block;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_batch";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_batch";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_batch";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_batch";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_batch";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v30 = 0;
    v6 = MEMORY[0x1E0C809B0];
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_connection_batch_block_invoke;
    v24[3] = &unk_1E14ACE40;
    v26 = buf;
    v7 = v3;
    v25 = v7;
    os_unfair_lock_lock((os_unfair_lock_t)&v3[17]);
    __nw_connection_batch_block_invoke((uint64_t)v24);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[17]);
    v5[2](v5);
    if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    {
      v22[0] = v6;
      v22[1] = 3221225472;
      v22[2] = __nw_connection_batch_block_invoke_2;
      v22[3] = &unk_1E14ACFD0;
      v23 = v7;
      nw_connection_async_if_needed(v23, v22);

    }
    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_batch";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (!__nwlog_fault(v9, &type, &v27))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_batch";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null batch_block", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v27)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_batch";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null batch_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_batch";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null batch_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_connection_batch";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null batch_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

void sub_1835CB738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_batch_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = (*(_BYTE *)(*(_QWORD *)(result + 32) + 109) & 0x20) != 0;
  *(_BYTE *)(*(_QWORD *)(result + 32) + 109) |= 0x20u;
  return result;
}

void __nw_connection_batch_block_invoke_2(uint64_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  _QWORD *v9;
  id v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  dispatch_data_t concat;
  void *v22;
  void *v23;
  uint64_t *v24;
  void *v25;
  id v26;
  _BOOL8 v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  void *v32;
  id v33;
  _BOOL8 v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  _QWORD v40[4];
  os_unfair_lock_s *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  void (*v48)(uint64_t);
  id v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t);
  id v55;
  _QWORD aBlock[4];
  id v57;
  id v58;

  v50 = 0;
  v51 = &v50;
  v52 = 0x3032000000;
  v53 = __Block_byref_object_copy__24122;
  v54 = __Block_byref_object_dispose__24123;
  v55 = 0;
  v44 = 0;
  v45 = &v44;
  v46 = 0x3032000000;
  v47 = __Block_byref_object_copy__24122;
  v48 = __Block_byref_object_dispose__24123;
  v49 = 0;
  v2 = *(os_unfair_lock_s **)(a1 + 32);
  v3 = v2 + 34;
  v4 = MEMORY[0x1E0C809B0];
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 3221225472;
  v40[2] = __nw_connection_batch_block_invoke_3;
  v40[3] = &unk_1E14A54F0;
  v41 = v2;
  v42 = &v50;
  v43 = &v44;
  os_unfair_lock_lock(v3);
  __nw_connection_batch_block_invoke_3(v40);
  os_unfair_lock_unlock(v3);
  v5 = (void *)v51[5];
  if (!v5)
    goto LABEL_32;
  v6 = v5;
  v7 = (unsigned __int8 *)v6;
  do
  {
    while (1)
    {
      v8 = v6;
      v7 = v7;
      v9 = *((id *)v7 + 1);
      v10 = v9;
      if (v9)
      {
        v11 = v7[128];
        if ((v11 & 3) == 0 && !*((_QWORD *)v7 + 14) && !v9[14] && *((_QWORD *)v7 + 8) == v9[8])
        {
          v12 = (v11 >> 2) & 1;
          v13 = *((unsigned __int8 *)v9 + 128);
          if (v12 == ((v13 >> 2) & 1)
            && ((v13 ^ v11) & 8) == 0
            && *((_QWORD *)v7 + 13) == v9[13]
            && !*((_QWORD *)v7 + 9)
            && !v9[9])
          {
            break;
          }
        }
      }

      v14 = (unsigned __int8 *)*((id *)v7 + 1);
      v7 = v14;
      if (!v14)
        goto LABEL_26;
    }
    if (!v12)
    {
      v38 = _Block_copy(*((const void **)v7 + 3));
      v15 = _Block_copy(*((const void **)v10 + 3));
      aBlock[0] = v4;
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZL35nw_write_request_coalesce_with_nextP27NWConcrete_nw_write_requestS0__block_invoke;
      aBlock[3] = &unk_1E149FF78;
      v57 = v38;
      v58 = v15;
      v39 = v38;
      v16 = v15;
      v17 = _Block_copy(aBlock);
      v18 = (void *)*((_QWORD *)v7 + 3);
      *((_QWORD *)v7 + 3) = v17;

    }
    v19 = *((_QWORD *)v7 + 7);
    v20 = *((_QWORD *)v10 + 7);
    if (v19)
    {
      if (!v20)
        goto LABEL_21;
      concat = dispatch_data_create_concat(v19, v20);
    }
    else
    {
      concat = v20;
    }
    v22 = (void *)*((_QWORD *)v7 + 7);
    *((_QWORD *)v7 + 7) = concat;

LABEL_21:
    objc_storeStrong((id *)v7 + 1, *((id *)v10 + 1));
    if ((id)v6[2] == v10)
      v6[2] = v7;
    v23 = (void *)*((_QWORD *)v10 + 1);
    *((_QWORD *)v10 + 1) = 0;

  }
  while (v7);
LABEL_26:

  while (1)
  {
    v24 = v51;
    v25 = (void *)v51[5];
    if (!v25)
      break;
    v26 = v25;
    v27 = nw_write_request_list_remove_head((void *)v24[5]);
    v28 = (void *)v51[5];
    v51[5] = v27;

    nw_connection_add_write_request_on_queue(*(void **)(a1 + 32), v26, 0);
  }
  v29 = *(_QWORD *)(a1 + 32);
  v30 = *(void **)(v29 + 144);
  if (v30 && (*(_BYTE *)(v29 + 109) & 0x40) != 0)
    nw_endpoint_handler_service_writes(v30);
LABEL_32:
  v31 = v45;
  v32 = (void *)v45[5];
  if (v32)
  {
    do
    {
      v33 = v32;
      v34 = nw_read_request_list_remove_head((void *)v31[5]);
      v35 = (void *)v45[5];
      v45[5] = v34;

      nw_connection_add_read_request_on_queue(*(void **)(a1 + 32), v33, 0);
      v31 = v45;
      v32 = (void *)v45[5];
    }
    while (v32);
    v36 = *(_QWORD *)(a1 + 32);
    v37 = *(void **)(v36 + 144);
    if (v37 && (*(_BYTE *)(v36 + 109) & 0x40) != 0)
      nw_endpoint_handler_service_reads(v37);
  }

  _Block_object_dispose(&v44, 8);
  _Block_object_dispose(&v50, 8);

}

void sub_1835CBB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{

  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a24, 8);

  _Unwind_Resume(a1);
}

void __nw_connection_batch_block_invoke_3(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  *(_BYTE *)(a1[4] + 109) &= ~0x20u;
  objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), *(id *)(a1[4] + 112));
  v2 = a1[4];
  v3 = *(void **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;

  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), *(id *)(a1[4] + 120));
  v4 = a1[4];
  v5 = *(void **)(v4 + 120);
  *(_QWORD *)(v4 + 120) = 0;

}

uint64_t nw_connection_write(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  NSObject *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD completion[4];
  id v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (v6)
  {
    if (v7)
    {
      if (v7 == &__block_literal_global_42)
      {
        v9 = 1;
        nw_connection_send(v5, v6, (nw_content_context_t)&__block_literal_global_41718, 1, &__block_literal_global_24144);
      }
      else
      {
        completion[0] = MEMORY[0x1E0C809B0];
        completion[1] = 3221225472;
        completion[2] = __nw_connection_write_block_invoke;
        completion[3] = &unk_1E14A93C8;
        v25 = v7;
        nw_connection_send(v5, v6, (nw_content_context_t)&__block_literal_global_41718, 1, completion);

        v9 = 1;
      }
      goto LABEL_6;
    }
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_connection_write";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v12, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_connection_write";
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v26)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_connection_write";
          _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_connection_write";
          _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v29 = "nw_connection_write";
        v30 = 2082;
        v31 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_connection_write";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v12, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_connection_write";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null data", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v26)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_connection_write";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_connection_write";
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null data, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v29 = "nw_connection_write";
        v30 = 2082;
        v31 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v12)
    free(v12);
  v9 = 0;
LABEL_6:

  return v9;
}

void sub_1835CC13C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void __nw_connection_write_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = v3;
  if (v3)

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1835CC1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t nw_connection_write_multiple(void *a1, uint64_t a2, int a3, void *a4)
{
  os_unfair_lock_s *v7;
  id v8;
  void *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint32_t v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  const char *v20;
  uint64_t v21;
  const char *backtrace_string;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint32_t v26;
  NSObject *v27;
  uint32_t v28;
  dispatch_qos_class_t os_unfair_lock_opaque;
  os_log_type_t v30;
  uint32_t v31;
  os_log_type_t v32;
  uint32_t v33;
  void *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  void *v39;
  os_log_type_t v40;
  char *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  os_log_type_t v47;
  _QWORD batch_block[4];
  NSObject *v49;
  id v50;
  uint64_t v51;
  int v52;
  _QWORD v53[4];
  id v54;
  char v55;
  _QWORD v56[4];
  os_unfair_lock_s *v57;
  _BYTE *v58;
  os_log_type_t v59;
  uint8_t buf[4];
  const char *v61;
  __int16 v62;
  uint32_t v63;
  __int16 v64;
  const char *v65;
  _BYTE v66[24];
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a4;
  v9 = v8;
  if (v7)
  {
    if (v8)
    {
      *(_QWORD *)v66 = 0;
      *(_QWORD *)&v66[8] = v66;
      *(_QWORD *)&v66[16] = 0x2020000000;
      v67 = 0;
      v10 = MEMORY[0x1E0C809B0];
      v56[0] = MEMORY[0x1E0C809B0];
      v56[1] = 3221225472;
      v56[2] = __nw_connection_write_multiple_block_invoke;
      v56[3] = &unk_1E14ACE40;
      v58 = v66;
      v11 = v7;
      v57 = v11;
      os_unfair_lock_lock(v7 + 34);
      __nw_connection_write_multiple_block_invoke((uint64_t)v56);
      os_unfair_lock_unlock(v7 + 34);
      if (*(_BYTE *)(*(_QWORD *)&v66[8] + 24))
      {
        if (a2)
        {
          if (a3)
          {
            batch_block[0] = v10;
            batch_block[1] = 3221225472;
            batch_block[2] = __nw_connection_write_multiple_block_invoke_2;
            batch_block[3] = &unk_1E149DBD8;
            v50 = v9;
            v52 = a3;
            v49 = v11;
            v51 = a2;
            nw_connection_batch(v49, batch_block);

            v12 = 1;
LABEL_49:

            _Block_object_dispose(v66, 8);
            goto LABEL_50;
          }
          v20 = "datagram_count parameter is 0";
          v21 = *(_QWORD *)&v11[4]._os_unfair_lock_opaque;
          if (!v21)
            goto LABEL_35;
        }
        else
        {
          v20 = "datagrams parameter is nil";
          v21 = *(_QWORD *)&v11[4]._os_unfair_lock_opaque;
          if (!v21)
          {
LABEL_35:
            os_unfair_lock_opaque = v11[48]._os_unfair_lock_opaque;
            v53[0] = v10;
            v53[1] = 3221225472;
            v53[2] = __nw_connection_write_multiple_block_invoke_45;
            v53[3] = &unk_1E14AC390;
            v54 = v9;
            nw_connection_async_client_if_needed_with_override(v11, 0, os_unfair_lock_opaque, v53);

LABEL_48:
            v12 = 0;
            goto LABEL_49;
          }
        }
        if (!nw_path_parameters_get_logging_disabled(*(_QWORD *)(v21 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v27 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            v28 = v11[112]._os_unfair_lock_opaque;
            *(_DWORD *)buf = 136446722;
            v61 = "nw_connection_write_multiple";
            v62 = 1024;
            v63 = v28;
            v64 = 2082;
            v65 = v20;
            _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, "%{public}s [C%u] %{public}s, sending error callback", buf, 0x1Cu);
          }

        }
        goto LABEL_35;
      }
      v13 = *(_QWORD *)&v11[4]._os_unfair_lock_opaque;
      if (!v13 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v13 + 104)))
        goto LABEL_48;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v14 = (id)gconnectionLogObj;
      v15 = v11[112]._os_unfair_lock_opaque;
      *(_DWORD *)buf = 136446466;
      v61 = "nw_connection_write_multiple";
      v62 = 1024;
      v63 = v15;
      v16 = (char *)_os_log_send_and_compose_impl();

      v59 = OS_LOG_TYPE_ERROR;
      v55 = 0;
      if (__nwlog_fault(v16, &v59, &v55))
      {
        if (v59 == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v17 = (id)gconnectionLogObj;
          v18 = v59;
          if (os_log_type_enabled(v17, v59))
          {
            v19 = v11[112]._os_unfair_lock_opaque;
            *(_DWORD *)buf = 136446466;
            v61 = "nw_connection_write_multiple";
            v62 = 1024;
            v63 = v19;
            _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s [C%u] no client queue", buf, 0x12u);
          }
        }
        else if (v55)
        {
          backtrace_string = __nw_create_backtrace_string();
          if (backtrace_string)
          {
            v23 = (char *)backtrace_string;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v24 = (id)gconnectionLogObj;
            v25 = v59;
            if (os_log_type_enabled(v24, v59))
            {
              v26 = v11[112]._os_unfair_lock_opaque;
              *(_DWORD *)buf = 136446722;
              v61 = "nw_connection_write_multiple";
              v62 = 1024;
              v63 = v26;
              v64 = 2082;
              v65 = v23;
              _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s [C%u] no client queue, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v23);
            if (!v16)
              goto LABEL_48;
            goto LABEL_47;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v17 = (id)gconnectionLogObj;
          v32 = v59;
          if (os_log_type_enabled(v17, v59))
          {
            v33 = v11[112]._os_unfair_lock_opaque;
            *(_DWORD *)buf = 136446466;
            v61 = "nw_connection_write_multiple";
            v62 = 1024;
            v63 = v33;
            _os_log_impl(&dword_182FBE000, v17, v32, "%{public}s [C%u] no client queue, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v17 = (id)gconnectionLogObj;
          v30 = v59;
          if (os_log_type_enabled(v17, v59))
          {
            v31 = v11[112]._os_unfair_lock_opaque;
            *(_DWORD *)buf = 136446466;
            v61 = "nw_connection_write_multiple";
            v62 = 1024;
            v63 = v31;
            _os_log_impl(&dword_182FBE000, v17, v30, "%{public}s [C%u] no client queue, backtrace limit exceeded", buf, 0x12u);
          }
        }

      }
      if (!v16)
        goto LABEL_48;
LABEL_47:
      free(v16);
      goto LABEL_48;
    }
    __nwlog_obj();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v66 = 136446210;
    *(_QWORD *)&v66[4] = "nw_connection_write_multiple";
    v36 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v59 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v36, buf, &v59))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v40 = buf[0];
        if (os_log_type_enabled(v37, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v66 = 136446210;
          *(_QWORD *)&v66[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_182FBE000, v37, v40, "%{public}s called with null handler", v66, 0xCu);
        }
LABEL_82:

        goto LABEL_83;
      }
      if (v59 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v47 = buf[0];
        if (os_log_type_enabled(v37, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v66 = 136446210;
          *(_QWORD *)&v66[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_182FBE000, v37, v47, "%{public}s called with null handler, backtrace limit exceeded", v66, 0xCu);
        }
        goto LABEL_82;
      }
      v41 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v37 = objc_claimAutoreleasedReturnValue();
      v44 = buf[0];
      v45 = os_log_type_enabled(v37, (os_log_type_t)buf[0]);
      if (!v41)
      {
        if (v45)
        {
          *(_DWORD *)v66 = 136446210;
          *(_QWORD *)&v66[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_182FBE000, v37, v44, "%{public}s called with null handler, no backtrace", v66, 0xCu);
        }
        goto LABEL_82;
      }
      if (v45)
      {
        *(_DWORD *)v66 = 136446466;
        *(_QWORD *)&v66[4] = "nw_connection_write_multiple";
        *(_WORD *)&v66[12] = 2082;
        *(_QWORD *)&v66[14] = v41;
        _os_log_impl(&dword_182FBE000, v37, v44, "%{public}s called with null handler, dumping backtrace:%{public}s", v66, 0x16u);
      }
      goto LABEL_70;
    }
  }
  else
  {
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v66 = 136446210;
    *(_QWORD *)&v66[4] = "nw_connection_write_multiple";
    v36 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v59 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v36, buf, &v59))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = buf[0];
        if (os_log_type_enabled(v37, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v66 = 136446210;
          *(_QWORD *)&v66[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s called with null connection", v66, 0xCu);
        }
        goto LABEL_82;
      }
      if (v59 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v46 = buf[0];
        if (os_log_type_enabled(v37, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v66 = 136446210;
          *(_QWORD *)&v66[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_182FBE000, v37, v46, "%{public}s called with null connection, backtrace limit exceeded", v66, 0xCu);
        }
        goto LABEL_82;
      }
      v41 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v37 = objc_claimAutoreleasedReturnValue();
      v42 = buf[0];
      v43 = os_log_type_enabled(v37, (os_log_type_t)buf[0]);
      if (!v41)
      {
        if (v43)
        {
          *(_DWORD *)v66 = 136446210;
          *(_QWORD *)&v66[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_182FBE000, v37, v42, "%{public}s called with null connection, no backtrace", v66, 0xCu);
        }
        goto LABEL_82;
      }
      if (v43)
      {
        *(_DWORD *)v66 = 136446466;
        *(_QWORD *)&v66[4] = "nw_connection_write_multiple";
        *(_WORD *)&v66[12] = 2082;
        *(_QWORD *)&v66[14] = v41;
        _os_log_impl(&dword_182FBE000, v37, v42, "%{public}s called with null connection, dumping backtrace:%{public}s", v66, 0x16u);
      }
LABEL_70:

      free(v41);
    }
  }
LABEL_83:
  if (v36)
    free(v36);
  v12 = 0;
LABEL_50:

  return v12;
}

void sub_1835CCBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v33;
  id *v34;
  uint64_t v35;

  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_write_multiple_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 200) != 0;
  return result;
}

uint64_t __nw_connection_write_multiple_block_invoke_45(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __nw_connection_write_multiple_block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  _QWORD v10[4];
  id v11;
  _QWORD *v12;
  _QWORD completion[4];
  NSObject *v14;
  _QWORD *v15;
  _QWORD v16[3];
  int v17;

  if (*(_UNKNOWN **)(a1 + 40) == &__block_literal_global_42)
  {
    if (*(_DWORD *)(a1 + 56))
    {
      v9 = 0;
      do
        nw_connection_send(*(nw_connection_t *)(a1 + 32), *(dispatch_data_t *)(*(_QWORD *)(a1 + 48) + 8 * v9++), (nw_content_context_t)&__block_literal_global_41718, 1, &__block_literal_global_24144);
      while (v9 < *(unsigned int *)(a1 + 56));
    }
  }
  else
  {
    v16[0] = 0;
    v16[1] = v16;
    v17 = 0;
    v16[2] = 0x2020000000;
    v2 = dispatch_group_create();
    v3 = MEMORY[0x1E0C809B0];
    if (*(_DWORD *)(a1 + 56))
    {
      v4 = 0;
      do
      {
        dispatch_group_enter(v2);
        v5 = *(NSObject **)(*(_QWORD *)(a1 + 48) + 8 * v4);
        v6 = *(NSObject **)(a1 + 32);
        completion[0] = v3;
        completion[1] = 3221225472;
        completion[2] = __nw_connection_write_multiple_block_invoke_3;
        completion[3] = &unk_1E149DBB0;
        v15 = v16;
        v14 = v2;
        nw_connection_send(v6, v5, (nw_content_context_t)&__block_literal_global_41718, 1, completion);

        ++v4;
      }
      while (v4 < *(unsigned int *)(a1 + 56));
    }
    v7 = *(void **)(a1 + 40);
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 200);
    v10[0] = v3;
    v10[1] = 3221225472;
    v10[2] = __nw_connection_write_multiple_block_invoke_4;
    v10[3] = &unk_1E14A3420;
    v11 = v7;
    v12 = v16;
    dispatch_group_notify(v2, v8, v10);

    _Block_object_dispose(v16, 8);
  }
}

void sub_1835CCE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_write_multiple_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void __nw_connection_write_multiple_block_invoke_3(uint64_t a1, void *a2)
{
  _DWORD *v3;
  int v4;
  id v5;

  v5 = a2;
  if (v5)
  {
    v3 = v5;
    v4 = v3[3];

    if (v4)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v4;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

BOOL nw_connection_write_close(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD completion[4];
  id v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    if (v4 == &__block_literal_global_42)
    {
      nw_connection_send(v3, 0, (nw_content_context_t)&__block_literal_global_3_41726, 1, &__block_literal_global_24144);
    }
    else
    {
      completion[0] = MEMORY[0x1E0C809B0];
      completion[1] = 3221225472;
      completion[2] = __nw_connection_write_close_block_invoke;
      completion[3] = &unk_1E14A93C8;
      v16 = v4;
      nw_connection_send(v3, 0, (nw_content_context_t)&__block_literal_global_3_41726, 1, completion);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_connection_write_close";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v8, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_connection_write_close";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_connection_write_close";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_connection_write_close";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_connection_write_close";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
LABEL_5:

  return v5 != 0;
}

void sub_1835CD1D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __nw_connection_write_close_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = v3;
  if (v3)

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1835CD258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t nw_connection_get_unsent_byte_count(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v19 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_get_unsent_byte_count_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v14 = v1;
    v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_get_unsent_byte_count_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_get_unsent_byte_count";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_get_unsent_byte_count";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_get_unsent_byte_count";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_get_unsent_byte_count";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_get_unsent_byte_count";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_get_unsent_byte_count_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  id v10;
  void *v11;
  id v12;
  int v13;
  id v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  id v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t type[8];
  os_log_type_t *v31;
  uint64_t v32;
  uint32_t os_unfair_lock_opaque;
  char v34;
  _BYTE buf[24];
  void *v36;
  os_log_type_t *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    v6 = (os_unfair_lock_s *)*(id *)(v2 + 144);
    v7 = v6;
    if (v6)
    {
      os_unfair_lock_lock(v6 + 28);
      if (v7[29]._os_unfair_lock_opaque != 2)
      {
        v13 = 0;
        goto LABEL_20;
      }
      v8 = (os_unfair_lock_s *)*(id *)&v7[62]._os_unfair_lock_opaque;
      v9 = v8;
      if (v8)
      {
        os_unfair_lock_lock(v8 + 220);
        *(_QWORD *)type = 0;
        v31 = type;
        v32 = 0x2020000000;
        os_unfair_lock_opaque = v9[224]._os_unfair_lock_opaque;
        v10 = *(id *)&v9[222]._os_unfair_lock_opaque;
        if ((v9[8]._os_unfair_lock_opaque & 2) == 0)
        {
          v11 = *(void **)&v9[234]._os_unfair_lock_opaque;
          if (v11)
          {
            v12 = nw_endpoint_handler_copy_connected_socket_wrapper(v11);

            v10 = v12;
          }
        }
        if (v10)
        {
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = __nw_endpoint_flow_get_unsent_byte_count_block_invoke;
          v36 = &unk_1E14AB578;
          v37 = type;
          nw_fd_wrapper_get_fd(v10, buf);
        }
        os_unfair_lock_unlock(v9 + 220);
        v13 = *((_DWORD *)v31 + 6);

        _Block_object_dispose(type, 8);
LABEL_18:

LABEL_20:
        os_unfair_lock_unlock(v7 + 28);
LABEL_21:

        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v13;
        return;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_get_unsent_byte_count";
      v19 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v34 = 0;
      if (__nwlog_fault(v19, type, &v34))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v20 = (id)gLogObj;
          v21 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_get_unsent_byte_count";
            _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null endpoint_flow", buf, 0xCu);
          }
        }
        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v20 = (id)gLogObj;
          v26 = type[0];
          v27 = os_log_type_enabled(v20, type[0]);
          if (backtrace_string)
          {
            if (v27)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_endpoint_flow_get_unsent_byte_count";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_58;
          }
          if (v27)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_get_unsent_byte_count";
            _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v20 = (id)gLogObj;
          v29 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_get_unsent_byte_count";
            _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_58:
      if (v19)
        free(v19);
      v13 = 0;
      goto LABEL_18;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
    v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (__nwlog_fault(v15, type, &v34))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v17 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v34)
      {
        v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v23 = type[0];
        v24 = os_log_type_enabled(v16, type[0]);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v22;
            _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v22);
          goto LABEL_49;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
          _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v28 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
          _os_log_impl(&dword_182FBE000, v16, v28, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_49:
    if (v15)
      free(v15);
    v13 = 0;
    goto LABEL_21;
  }
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_get_unsent_byte_count_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client called nw_connection_get_unsent_byte_count on unconnected nw_connection", buf, 0x12u);
    }

  }
}

void sub_1835CDCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a6);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nw_connection_tls_apply(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_connection_tls_apply";
      v7 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v24 = 0;
      if (!__nwlog_fault(v7, &type, &v24))
        goto LABEL_20;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s nw_connection_tls_apply is not implemented", buf, 0xCu);
        }
LABEL_19:

        goto LABEL_20;
      }
      if (!v24)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s nw_connection_tls_apply is not implemented, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s nw_connection_tls_apply is not implemented, no backtrace", buf, 0xCu);
        }
        goto LABEL_19;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_connection_tls_apply";
        v28 = 2082;
        v29 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s nw_connection_tls_apply is not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_12:

      free(backtrace_string);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    }
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_connection_tls_apply";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v7, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_182FBE000, v8, v17, "%{public}s called with null apply_block", buf, 0xCu);
        }
        goto LABEL_19;
      }
      if (!v24)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_182FBE000, v8, v23, "%{public}s called with null apply_block, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s called with null apply_block, no backtrace", buf, 0xCu);
        }
        goto LABEL_19;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_connection_tls_apply";
        v28 = 2082;
        v29 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s called with null apply_block, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_12;
    }
  }
  else
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_connection_tls_apply";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v7, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_19;
      }
      if (!v24)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_182FBE000, v8, v22, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_19;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_connection_tls_apply";
        v28 = 2082;
        v29 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_12;
    }
  }
LABEL_20:
  if (v7)
LABEL_21:
    free(v7);
LABEL_22:

}

uint64_t nw_connection_modify_connected_protocol_stack_internal(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[4];
  id v24;
  id v25;
  char v26;
  char v27;
  os_log_type_t v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v5)
  {
    if (v6)
    {
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = __nw_connection_modify_connected_protocol_stack_internal_block_invoke;
      v23[3] = &unk_1E149FEA8;
      v24 = v5;
      v26 = a3;
      v25 = v7;
      nw_connection_async_if_needed(v24, v23);

      v8 = 1;
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_connection_modify_connected_protocol_stack_internal";
    v11 = (char *)_os_log_send_and_compose_impl();

    v28 = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v11, &v28, &v27))
    {
      if (v28 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = v28;
        if (os_log_type_enabled(v12, v28))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null modifier", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v27)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v22 = v28;
        if (os_log_type_enabled(v12, v28))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null modifier, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v19 = v28;
      v20 = os_log_type_enabled(v12, v28);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null modifier, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        v30 = "nw_connection_modify_connected_protocol_stack_internal";
        v31 = 2082;
        v32 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null modifier, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_connection_modify_connected_protocol_stack_internal";
    v11 = (char *)_os_log_send_and_compose_impl();

    v28 = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v11, &v28, &v27))
    {
      if (v28 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = v28;
        if (os_log_type_enabled(v12, v28))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v27)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v21 = v28;
        if (os_log_type_enabled(v12, v28))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = v28;
      v18 = os_log_type_enabled(v12, v28);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v30 = "nw_connection_modify_connected_protocol_stack_internal";
        v31 = 2082;
        v32 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v11)
    free(v11);
  v8 = 0;
LABEL_4:

  return v8;
}

void sub_1835CE8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_connection_modify_connected_protocol_stack_internal_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *p_super;
  int v5;
  void *v6;
  NWConcrete_nw_endpoint_handler *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  int v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  const char *backtrace_string;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  os_log_type_t v25;
  int v26;
  os_log_type_t v27;
  int v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    v6 = *(void **)(v2 + 144);
    if (*(_BYTE *)(a1 + 48))
      v7 = v6;
    else
      v7 = nw_endpoint_handler_copy_top_protocol_flow_handler(v6);
    p_super = &v7->super;
    if ((nw_endpoint_handler_modify_protocol_stack(v7, *(void **)(a1 + 40)) & 1) != 0)
      goto LABEL_34;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (v8 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v8 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v9 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        *(_DWORD *)buf = 136446466;
        v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
        v33 = 1024;
        v34 = v10;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Failed to modify protocol stack, cancelling connection", buf, 0x12u);
      }

    }
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(void **)(v11 + 144);
    if (v12)
    {
      nw_endpoint_handler_cancel(v12, 0, 0);
LABEL_34:

      return;
    }
    v13 = *(_QWORD *)(v11 + 16);
    if (!v13 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v13 + 104)))
      goto LABEL_34;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v14 = (id)gconnectionLogObj;
    v15 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
    *(_DWORD *)buf = 136446466;
    v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
    v33 = 1024;
    v34 = v15;
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v16, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v17 = (id)gconnectionLogObj;
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          v19 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
          v33 = 1024;
          v34 = v19;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s [C%u] No parent endpoint handler found", buf, 0x12u);
        }
      }
      else if (v29)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          v21 = (char *)backtrace_string;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v22 = (id)gconnectionLogObj;
          v23 = type;
          if (os_log_type_enabled(v22, type))
          {
            v24 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
            *(_DWORD *)buf = 136446722;
            v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
            v33 = 1024;
            v34 = v24;
            v35 = 2082;
            v36 = v21;
            _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s [C%u] No parent endpoint handler found, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          if (!v16)
            goto LABEL_34;
          goto LABEL_33;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v17 = (id)gconnectionLogObj;
        v27 = type;
        if (os_log_type_enabled(v17, type))
        {
          v28 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
          v33 = 1024;
          v34 = v28;
          _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s [C%u] No parent endpoint handler found, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v17 = (id)gconnectionLogObj;
        v25 = type;
        if (os_log_type_enabled(v17, type))
        {
          v26 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
          v33 = 1024;
          v34 = v26;
          _os_log_impl(&dword_182FBE000, v17, v25, "%{public}s [C%u] No parent endpoint handler found, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v16)
      goto LABEL_34;
LABEL_33:
    free(v16);
    goto LABEL_34;
  }
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    p_super = (id)gconnectionLogObj;
    if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
      v33 = 1024;
      v34 = v5;
      _os_log_impl(&dword_182FBE000, p_super, OS_LOG_TYPE_ERROR, "%{public}s [C%u] No connected endpoint handler found", buf, 0x12u);
    }
    goto LABEL_34;
  }
}

void sub_1835CEE64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_connection_modify_connected_protocol_stack(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = nw_connection_modify_connected_protocol_stack_internal(v3, v4, 0);
      goto LABEL_4;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_connection_modify_connected_protocol_stack";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null modifier", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null modifier, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null modifier, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_connection_modify_connected_protocol_stack";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null modifier, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_connection_modify_connected_protocol_stack";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_connection_modify_connected_protocol_stack";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_4:

  return v6;
}

void sub_1835CF334(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_connection_append_and_start_application_protocol(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[4];
  id v21;
  id v22;
  char v23;
  os_log_type_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_connection_append_and_start_application_protocol";
    v7 = (char *)_os_log_send_and_compose_impl();

    v24 = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v7, &v24, &v23))
      goto LABEL_38;
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v24;
      if (os_log_type_enabled(v8, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_append_and_start_application_protocol";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v24;
      v14 = os_log_type_enabled(v8, v24);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_connection_append_and_start_application_protocol";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7)
          goto LABEL_4;
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_append_and_start_application_protocol";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = v24;
      if (os_log_type_enabled(v8, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_append_and_start_application_protocol";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __nw_connection_append_and_start_application_protocol_block_invoke;
    v20[3] = &unk_1E14ACE68;
    v21 = v3;
    v22 = v5;
    nw_connection_async_if_needed(v21, v20);

    goto LABEL_4;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_connection_append_and_start_application_protocol";
  v7 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v7, &v24, &v23))
    goto LABEL_38;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_append_and_start_application_protocol";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_append_and_start_application_protocol";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = v24;
  v17 = os_log_type_enabled(v8, v24);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_append_and_start_application_protocol";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_connection_append_and_start_application_protocol";
    v27 = 2082;
    v28 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_39;
LABEL_4:

}

void sub_1835CF854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_connection_append_and_start_application_protocol_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  id v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  void *v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  int v21;
  os_log_type_t v22;
  int v23;
  int v24;
  id v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  _WORD v38[17];

  *(_QWORD *)&v38[13] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 80) == 3)
  {
    if ((*(_BYTE *)(v2 + 109) & 0x40) == 0)
    {
      v3 = *(_QWORD *)(v2 + 16);
      if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v4 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
          v37 = 1024;
          *(_DWORD *)v38 = v5;
          _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] No connected endpoint handler found, cannot add new protocol", buf, 0x12u);
        }

      }
      return;
    }
    if ((nw_endpoint_handler_append_and_start_application_protocol(*(void **)(v2 + 144), *(void **)(a1 + 40)) & 1) != 0)
      return;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (v14 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v14 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v15 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        *(_DWORD *)buf = 136446466;
        v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
        v37 = 1024;
        *(_DWORD *)v38 = v16;
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Failed to append and start new protocol, cancelling connection", buf, 0x12u);
      }

    }
    v17 = *(void **)(*(_QWORD *)(a1 + 32) + 144);
    if (v17)
    {
      nw_endpoint_handler_cancel(v17, 0, 0);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
    v26 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v26, &type, &v33))
      goto LABEL_66;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v27 = (id)gLogObj;
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
        _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s Connection has no parent endpoint handler", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v27, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
          v37 = 2082;
          *(_QWORD *)v38 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s Connection has no parent endpoint handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_66;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
        _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s Connection has no parent endpoint handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
        _os_log_impl(&dword_182FBE000, v27, v32, "%{public}s Connection has no parent endpoint handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_66:
    if (!v26)
      return;
    v13 = (char *)v26;
LABEL_23:
    free(v13);
    return;
  }
  v6 = *(_QWORD *)(v2 + 16);
  if (!v6 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v6 + 104)))
    return;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v7 = (id)gconnectionLogObj;
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
  *(_DWORD *)buf = 136446466;
  v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
  v37 = 1024;
  *(_DWORD *)v38 = v8;
  v9 = (const char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (!__nwlog_fault(v9, &type, &v33))
    goto LABEL_21;
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v10 = (id)gconnectionLogObj;
    v11 = type;
    if (os_log_type_enabled(v10, type))
    {
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
      v37 = 1024;
      *(_DWORD *)v38 = v12;
      _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s [C%u] Connection is not ready, cannot add new protocol", buf, 0x12u);
    }
LABEL_20:

LABEL_21:
    if (!v9)
      return;
    goto LABEL_22;
  }
  if (!v33)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v10 = (id)gconnectionLogObj;
    v22 = type;
    if (os_log_type_enabled(v10, type))
    {
      v23 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
      v37 = 1024;
      *(_DWORD *)v38 = v23;
      _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s [C%u] Connection is not ready, cannot add new protocol, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_20;
  }
  v18 = (char *)__nw_create_backtrace_string();
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v10 = (id)gconnectionLogObj;
  v19 = type;
  v20 = os_log_type_enabled(v10, type);
  if (!v18)
  {
    if (v20)
    {
      v24 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
      v37 = 1024;
      *(_DWORD *)v38 = v24;
      _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s [C%u] Connection is not ready, cannot add new protocol, no backtrace", buf, 0x12u);
    }
    goto LABEL_20;
  }
  if (v20)
  {
    v21 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
    *(_DWORD *)buf = 136446722;
    v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
    v37 = 1024;
    *(_DWORD *)v38 = v21;
    v38[2] = 2082;
    *(_QWORD *)&v38[3] = v18;
    _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s [C%u] Connection is not ready, cannot add new protocol, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v18);
  if (v9)
  {
LABEL_22:
    v13 = (char *)v9;
    goto LABEL_23;
  }
}

void __nw_connection_start_tls_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  void *v14;
  id v15;
  int v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  char *v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  int v25;
  id v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  os_log_type_t v30;
  int v31;
  char *backtrace_string;
  os_log_type_t v33;
  _BOOL4 v34;
  int v35;
  os_log_type_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  _WORD v42[17];

  *(_QWORD *)&v42[13] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 80) == 3)
  {
    if ((*(_BYTE *)(v2 + 109) & 0x40) == 0)
    {
      v3 = *(_QWORD *)(v2 + 16);
      if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v4 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          v40 = "nw_connection_start_tls_block_invoke";
          v41 = 1024;
          *(_DWORD *)v42 = v5;
          _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] No connected endpoint handler found", buf, 0x12u);
        }

      }
      return;
    }
    if ((nw_endpoint_start_tls_while_connected(*(void **)(v2 + 144)) & 1) != 0)
      return;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (v11 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v11 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v12 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        *(_DWORD *)buf = 136446466;
        v40 = "nw_connection_start_tls_block_invoke";
        v41 = 1024;
        *(_DWORD *)v42 = v13;
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Failed to start TLS, cancelling connection", buf, 0x12u);
      }

    }
    v14 = *(void **)(*(_QWORD *)(a1 + 32) + 144);
    if (v14)
    {
      nw_endpoint_handler_cancel(v14, 0, 0);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_connection_start_tls_block_invoke";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v27, &type, &v37))
      goto LABEL_74;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v28 = (id)gLogObj;
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_connection_start_tls_block_invoke";
        _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s Connection has no parent endpoint handler", buf, 0xCu);
      }
    }
    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      v34 = os_log_type_enabled(v28, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_connection_start_tls_block_invoke";
          v41 = 2082;
          *(_QWORD *)v42 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s Connection has no parent endpoint handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_74;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_connection_start_tls_block_invoke";
        _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s Connection has no parent endpoint handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_connection_start_tls_block_invoke";
        _os_log_impl(&dword_182FBE000, v28, v36, "%{public}s Connection has no parent endpoint handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_74:
    if (!v27)
      return;
    v21 = (char *)v27;
    goto LABEL_76;
  }
  v6 = *(_QWORD *)(v2 + 144);
  v7 = *(_QWORD *)(v2 + 16);
  if (v6)
  {
    if (v7 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v7 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        *(_DWORD *)buf = 136446466;
        v40 = "nw_connection_start_tls_block_invoke";
        v41 = 1024;
        *(_DWORD *)v42 = v9;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Connection is not ready yet, setting TLS on parameters", buf, 0x12u);
      }

    }
    v10 = nw_endpoint_handler_copy_parameters(*(void **)(*(_QWORD *)(a1 + 32) + 144));
    nw_parameters_set_tls(v10, 1);
    nw_parameters_set_tls_session_id(v10, *(void **)(a1 + 40));

    return;
  }
  if (!v7 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v7 + 104)))
    return;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v15 = (id)gconnectionLogObj;
  v16 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
  *(_DWORD *)buf = 136446466;
  v40 = "nw_connection_start_tls_block_invoke";
  v41 = 1024;
  *(_DWORD *)v42 = v16;
  v17 = (const char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (!__nwlog_fault(v17, &type, &v37))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v18 = (id)gconnectionLogObj;
    v19 = type;
    if (os_log_type_enabled(v18, type))
    {
      v20 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v40 = "nw_connection_start_tls_block_invoke";
      v41 = 1024;
      *(_DWORD *)v42 = v20;
      _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s [C%u] No parent endpoint handler found", buf, 0x12u);
    }
LABEL_39:

LABEL_40:
    if (!v17)
      return;
    goto LABEL_41;
  }
  if (!v37)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v18 = (id)gconnectionLogObj;
    v30 = type;
    if (os_log_type_enabled(v18, type))
    {
      v31 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v40 = "nw_connection_start_tls_block_invoke";
      v41 = 1024;
      *(_DWORD *)v42 = v31;
      _os_log_impl(&dword_182FBE000, v18, v30, "%{public}s [C%u] No parent endpoint handler found, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_39;
  }
  v22 = (char *)__nw_create_backtrace_string();
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v18 = (id)gconnectionLogObj;
  v23 = type;
  v24 = os_log_type_enabled(v18, type);
  if (!v22)
  {
    if (v24)
    {
      v35 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v40 = "nw_connection_start_tls_block_invoke";
      v41 = 1024;
      *(_DWORD *)v42 = v35;
      _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s [C%u] No parent endpoint handler found, no backtrace", buf, 0x12u);
    }
    goto LABEL_39;
  }
  if (v24)
  {
    v25 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
    *(_DWORD *)buf = 136446722;
    v40 = "nw_connection_start_tls_block_invoke";
    v41 = 1024;
    *(_DWORD *)v42 = v25;
    v42[2] = 2082;
    *(_QWORD *)&v42[3] = v22;
    _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s [C%u] No parent endpoint handler found, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v22);
  if (v17)
  {
LABEL_41:
    v21 = (char *)v17;
LABEL_76:
    free(v21);
  }
}

void sub_1835D0818(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_set_adaptive_read_handler(void *a1, int a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[4];
  id v16;
  id v17;
  int v18;
  char v19;
  os_log_type_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_set_adaptive_read_handler_block_invoke;
    v15[3] = &unk_1E14ACFF8;
    v16 = v5;
    v18 = a2;
    v17 = v6;
    nw_connection_async_if_needed(v16, v15);

    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_connection_set_adaptive_read_handler";
  v8 = (char *)_os_log_send_and_compose_impl();

  v20 = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v8, &v20, &v19))
  {
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_connection_set_adaptive_read_handler";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = v20;
      v13 = os_log_type_enabled(v9, v20);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_connection_set_adaptive_read_handler";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_connection_set_adaptive_read_handler";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_connection_set_adaptive_read_handler";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
LABEL_3:

}

void sub_1835D0B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_connection_set_adaptive_read_handler_block_invoke(uint64_t a1)
{
  void *v1;
  int v2;
  id v3;
  id v4;
  NWConcrete_nw_endpoint_handler *v5;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v7;
  void *v8;
  void *v9;
  id v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  const char *v19;
  os_log_type_t v20;
  const char *v21;
  const char *v22;
  id v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(a1 + 40);
  v2 = *(_DWORD *)(a1 + 48);
  v3 = *(id *)(*(_QWORD *)(a1 + 32) + 144);
  v4 = v1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v32 = "nw_endpoint_handler_set_adaptive_read_handler";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v12, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v24 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_set_adaptive_read_handler";
          _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null handler", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (!v29)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v28 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_set_adaptive_read_handler";
          _os_log_impl(&dword_182FBE000, v13, v28, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v26 = type;
      v27 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_set_adaptive_read_handler";
          _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_endpoint_handler_set_adaptive_read_handler";
        v33 = 2082;
        v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_38:
    if (!v12)
      goto LABEL_40;
LABEL_39:
    free(v12);
    goto LABEL_40;
  }
  v5 = (NWConcrete_nw_endpoint_handler *)v3;
  mode = v5->mode;

  if ((_DWORD)mode == 2)
  {
    v7 = nw_endpoint_handler_copy_flow(v5);
    v8 = _Block_copy(v4);
    v9 = (void *)*((_QWORD *)v7 + 127);
    *((_QWORD *)v7 + 127) = v8;

    *((_DWORD *)v7 + 252) = v2;
    if ((*((_BYTE *)v7 + 33) & 4) != 0)
      nw_endpoint_handler_register_adaptive_read_handler(v5);

    goto LABEL_40;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  if (mode > 5)
    v11 = "unknown-mode";
  else
    v11 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  v32 = "nw_endpoint_handler_set_adaptive_read_handler";
  v33 = 2082;
  v34 = (void *)v11;
  v35 = 2082;
  v36 = "flow";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (!__nwlog_fault(v12, &type, &v29))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v14 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5)
        v15 = "unknown-mode";
      else
        v15 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_adaptive_read_handler";
      v33 = 2082;
      v34 = (void *)v15;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_37:

    goto LABEL_38;
  }
  if (!v29)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v20 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5)
        v21 = "unknown-mode";
      else
        v21 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_adaptive_read_handler";
      v33 = 2082;
      v34 = (void *)v21;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  v17 = type;
  v18 = os_log_type_enabled(v13, type);
  if (!v16)
  {
    if (v18)
    {
      if (mode > 5)
        v22 = "unknown-mode";
      else
        v22 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_adaptive_read_handler";
      v33 = 2082;
      v34 = (void *)v22;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    if (mode > 5)
      v19 = "unknown-mode";
    else
      v19 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446978;
    v32 = "nw_endpoint_handler_set_adaptive_read_handler";
    v33 = 2082;
    v34 = (void *)v19;
    v35 = 2082;
    v36 = "flow";
    v37 = 2082;
    v38 = v16;
    _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v16);
  if (v12)
    goto LABEL_39;
LABEL_40:

}

void sub_1835D1214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_connection_set_adaptive_write_handler(void *a1, int a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[4];
  id v16;
  id v17;
  int v18;
  char v19;
  os_log_type_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_set_adaptive_write_handler_block_invoke;
    v15[3] = &unk_1E14ACFF8;
    v16 = v5;
    v18 = a2;
    v17 = v6;
    nw_connection_async_if_needed(v16, v15);

    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_connection_set_adaptive_write_handler";
  v8 = (char *)_os_log_send_and_compose_impl();

  v20 = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v8, &v20, &v19))
  {
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_connection_set_adaptive_write_handler";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = v20;
      v13 = os_log_type_enabled(v9, v20);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_connection_set_adaptive_write_handler";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_connection_set_adaptive_write_handler";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_connection_set_adaptive_write_handler";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
LABEL_3:

}

void sub_1835D1534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_connection_set_adaptive_write_handler_block_invoke(uint64_t a1)
{
  void *v1;
  int v2;
  id v3;
  id v4;
  NWConcrete_nw_endpoint_handler *v5;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v7;
  void *v8;
  void *v9;
  id v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  const char *v19;
  os_log_type_t v20;
  const char *v21;
  const char *v22;
  id v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(a1 + 40);
  v2 = *(_DWORD *)(a1 + 48);
  v3 = *(id *)(*(_QWORD *)(a1 + 32) + 144);
  v4 = v1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v32 = "nw_endpoint_handler_set_adaptive_write_handler";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v12, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v24 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_set_adaptive_write_handler";
          _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null handler", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (!v29)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v28 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_set_adaptive_write_handler";
          _os_log_impl(&dword_182FBE000, v13, v28, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v26 = type;
      v27 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_set_adaptive_write_handler";
          _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_endpoint_handler_set_adaptive_write_handler";
        v33 = 2082;
        v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_38:
    if (!v12)
      goto LABEL_40;
LABEL_39:
    free(v12);
    goto LABEL_40;
  }
  v5 = (NWConcrete_nw_endpoint_handler *)v3;
  mode = v5->mode;

  if ((_DWORD)mode == 2)
  {
    v7 = nw_endpoint_handler_copy_flow(v5);
    v8 = _Block_copy(v4);
    v9 = (void *)*((_QWORD *)v7 + 128);
    *((_QWORD *)v7 + 128) = v8;

    *((_DWORD *)v7 + 253) = v2;
    if ((*((_BYTE *)v7 + 33) & 4) != 0)
      nw_endpoint_handler_register_adaptive_write_handler(v5);

    goto LABEL_40;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  if (mode > 5)
    v11 = "unknown-mode";
  else
    v11 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  v32 = "nw_endpoint_handler_set_adaptive_write_handler";
  v33 = 2082;
  v34 = (void *)v11;
  v35 = 2082;
  v36 = "flow";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (!__nwlog_fault(v12, &type, &v29))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v14 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5)
        v15 = "unknown-mode";
      else
        v15 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_adaptive_write_handler";
      v33 = 2082;
      v34 = (void *)v15;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_37:

    goto LABEL_38;
  }
  if (!v29)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v20 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5)
        v21 = "unknown-mode";
      else
        v21 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_adaptive_write_handler";
      v33 = 2082;
      v34 = (void *)v21;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  v17 = type;
  v18 = os_log_type_enabled(v13, type);
  if (!v16)
  {
    if (v18)
    {
      if (mode > 5)
        v22 = "unknown-mode";
      else
        v22 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_adaptive_write_handler";
      v33 = 2082;
      v34 = (void *)v22;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    if (mode > 5)
      v19 = "unknown-mode";
    else
      v19 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446978;
    v32 = "nw_endpoint_handler_set_adaptive_write_handler";
    v33 = 2082;
    v34 = (void *)v19;
    v35 = 2082;
    v36 = "flow";
    v37 = 2082;
    v38 = v16;
    _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v16);
  if (v12)
    goto LABEL_39;
LABEL_40:

}

void sub_1835D1C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_connection_set_excessive_keepalive_handler(void *a1, int a2, int a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[4];
  id v18;
  id v19;
  int v20;
  int v21;
  char v22;
  os_log_type_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a4;
  if (v7)
  {
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __nw_connection_set_excessive_keepalive_handler_block_invoke;
    v17[3] = &unk_1E14AAAF0;
    v18 = v7;
    v20 = a2;
    v21 = a3;
    v19 = v8;
    nw_connection_async_if_needed(v18, v17);

    goto LABEL_3;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_connection_set_excessive_keepalive_handler";
  v10 = (char *)_os_log_send_and_compose_impl();

  v23 = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (__nwlog_fault(v10, &v23, &v22))
  {
    if (v23 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = v23;
      if (os_log_type_enabled(v11, v23))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_connection_set_excessive_keepalive_handler";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = v23;
      v15 = os_log_type_enabled(v11, v23);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_connection_set_excessive_keepalive_handler";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_connection_set_excessive_keepalive_handler";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = v23;
      if (os_log_type_enabled(v11, v23))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_connection_set_excessive_keepalive_handler";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v10)
    free(v10);
LABEL_3:

}

void sub_1835D1F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void __nw_connection_set_excessive_keepalive_handler_block_invoke(_QWORD *a1)
{
  void *v1;
  int32x2_t v2;
  id v3;
  id v4;
  NWConcrete_nw_endpoint_handler *v5;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v7;
  void *v8;
  void *v9;
  id v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  const char *v19;
  os_log_type_t v20;
  const char *v21;
  const char *v22;
  id v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v1 = (void *)a1[5];
  v2 = (int32x2_t)a1[6];
  v3 = *(id *)(a1[4] + 144);
  v4 = v1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v32 = "nw_endpoint_handler_set_keepalive_handler";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v12, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v24 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_set_keepalive_handler";
          _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null handler", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (!v29)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v28 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_set_keepalive_handler";
          _os_log_impl(&dword_182FBE000, v13, v28, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v26 = type;
      v27 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_set_keepalive_handler";
          _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_endpoint_handler_set_keepalive_handler";
        v33 = 2082;
        v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_38:
    if (!v12)
      goto LABEL_40;
LABEL_39:
    free(v12);
    goto LABEL_40;
  }
  v5 = (NWConcrete_nw_endpoint_handler *)v3;
  mode = v5->mode;

  if ((_DWORD)mode == 2)
  {
    v7 = nw_endpoint_handler_copy_flow(v5);
    v8 = _Block_copy(v4);
    v9 = (void *)*((_QWORD *)v7 + 129);
    *((_QWORD *)v7 + 129) = v8;

    *(int32x2_t *)((char *)v7 + 996) = vrev64_s32(v2);
    if ((*((_BYTE *)v7 + 33) & 4) != 0)
      nw_endpoint_handler_register_keepalive_handler(v5);

    goto LABEL_40;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  if (mode > 5)
    v11 = "unknown-mode";
  else
    v11 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  v32 = "nw_endpoint_handler_set_keepalive_handler";
  v33 = 2082;
  v34 = (void *)v11;
  v35 = 2082;
  v36 = "flow";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (!__nwlog_fault(v12, &type, &v29))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v14 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5)
        v15 = "unknown-mode";
      else
        v15 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_keepalive_handler";
      v33 = 2082;
      v34 = (void *)v15;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_37:

    goto LABEL_38;
  }
  if (!v29)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v20 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5)
        v21 = "unknown-mode";
      else
        v21 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_keepalive_handler";
      v33 = 2082;
      v34 = (void *)v21;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  v17 = type;
  v18 = os_log_type_enabled(v13, type);
  if (!v16)
  {
    if (v18)
    {
      if (mode > 5)
        v22 = "unknown-mode";
      else
        v22 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_keepalive_handler";
      v33 = 2082;
      v34 = (void *)v22;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    if (mode > 5)
      v19 = "unknown-mode";
    else
      v19 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446978;
    v32 = "nw_endpoint_handler_set_keepalive_handler";
    v33 = 2082;
    v34 = (void *)v19;
    v35 = 2082;
    v36 = "flow";
    v37 = 2082;
    v38 = v16;
    _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v16);
  if (v12)
    goto LABEL_39;
LABEL_40:

}

void sub_1835D2638(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_connection_set_low_throughput_handler(void *a1, int a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[4];
  id v16;
  id v17;
  int v18;
  char v19;
  os_log_type_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_set_low_throughput_handler_block_invoke;
    v15[3] = &unk_1E14ACFF8;
    v16 = v5;
    v17 = v6;
    v18 = a2;
    nw_connection_async_if_needed(v16, v15);

    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_connection_set_low_throughput_handler";
  v8 = (char *)_os_log_send_and_compose_impl();

  v20 = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v8, &v20, &v19))
  {
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_connection_set_low_throughput_handler";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = v20;
      v13 = os_log_type_enabled(v9, v20);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_connection_set_low_throughput_handler";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_connection_set_low_throughput_handler";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_connection_set_low_throughput_handler";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
LABEL_3:

}

void sub_1835D2958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_connection_set_low_throughput_handler_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  int v5;
  void *v6;
  void **v7;
  void **v8;
  _QWORD *v9;
  NSObject *v10;
  int v11;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  id v17;
  _BOOL4 multipath;
  _QWORD *v19;
  NSObject *v20;
  int v21;
  id *v22;
  void **v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t source;
  dispatch_time_t v29;
  id v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  id v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  id v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  char *backtrace_string;
  os_log_type_t v50;
  _BOOL4 v51;
  os_log_type_t v52;
  os_log_type_t v53;
  char v54;
  os_log_type_t type;
  os_log_type_t v56[8];
  uint64_t v57;
  void (*v58)(uint64_t);
  void *v59;
  void **v60;
  uint8_t v61[4];
  const char *v62;
  __int16 v63;
  char *v64;
  uint8_t buf[32];
  __int128 v66;
  __int128 v67;
  _OWORD v68[21];
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 384);
  *(_QWORD *)(v3 + 384) = v2;

  v5 = *(_DWORD *)(a1 + 48);
  v6 = *(void **)(a1 + 32);
  if (!v5)
  {
    v12 = v6;
    v13 = v12;
    if (v12)
    {
      nw_context_assert_queue(v12[3]);
      v15 = (uint64_t)v13[46];
      if (v15)
      {
        nw_queue_cancel_source(v15, v14);
        *((_OWORD *)v13 + 22) = 0u;
        *((_OWORD *)v13 + 23) = 0u;
        *((_OWORD *)v13 + 21) = 0u;
      }
LABEL_14:

      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v42 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
    v43 = (char *)_os_log_send_and_compose_impl();

    v56[0] = OS_LOG_TYPE_ERROR;
    v61[0] = 0;
    if (__nwlog_fault(v43, v56, v61))
    {
      if (v56[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v44 = (id)gLogObj;
        v45 = v56[0];
        if (os_log_type_enabled(v44, v56[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v61[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v44 = (id)gLogObj;
        v50 = v56[0];
        v51 = os_log_type_enabled(v44, v56[0]);
        if (backtrace_string)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v44, v50, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_91;
        }
        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v44, v50, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v44 = (id)gLogObj;
        v53 = v56[0];
        if (os_log_type_enabled(v44, v56[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v44, v53, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_91:
    if (v43)
      free(v43);
    goto LABEL_14;
  }
  v7 = v6;
  v8 = v7;
  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v38 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
    v39 = (char *)_os_log_send_and_compose_impl();

    v56[0] = OS_LOG_TYPE_ERROR;
    v61[0] = 0;
    if (__nwlog_fault(v39, v56, v61))
    {
      if (v56[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v40 = (id)gLogObj;
        v41 = v56[0];
        if (os_log_type_enabled(v40, v56[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v61[0])
      {
        v46 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v40 = (id)gLogObj;
        v47 = v56[0];
        v48 = os_log_type_enabled(v40, v56[0]);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v46;
            _os_log_impl(&dword_182FBE000, v40, v47, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v46);
          goto LABEL_83;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v40, v47, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v40 = (id)gLogObj;
        v52 = v56[0];
        if (os_log_type_enabled(v40, v56[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v40, v52, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_83:
    if (v39)
      free(v39);
    goto LABEL_56;
  }
  nw_context_assert_queue(v7[3]);
  if ((*((_BYTE *)v8 + 109) & 0x40) == 0)
  {
    v9 = v8[2];
    if (v9 && !nw_path_parameters_get_logging_disabled(v9[13]))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v10 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = *((_DWORD *)v8 + 112);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection does not have a connected handler", buf, 0x12u);
      }

    }
    goto LABEL_56;
  }
  v16 = v8;
  v17 = v16[2];

  multipath = nw_parameters_get_multipath(v17);
  if (multipath)
  {
    v19 = v16[2];
    if (v19 && !nw_path_parameters_get_logging_disabled(v19[13]))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v20 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = *((_DWORD *)v16 + 112);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v21;
        _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s [C%u] MPTCP incompatible with minimum throughput", buf, 0x12u);
      }

    }
    goto LABEL_56;
  }
  *((_DWORD *)v16 + 94) = v5;
  if (!v16[46])
  {
    v69 = 0;
    memset(v68, 0, sizeof(v68));
    v66 = 0u;
    v67 = 0u;
    memset(buf, 0, sizeof(buf));
    v22 = v16;
    nw_context_assert_queue(v8[3]);
    v23 = v22;
    if (nw_parameters_get_ip_protocol(v16[2]) == 6)
    {
      v24 = nw_endpoint_handler_fillout_tcp_info(v23[18], buf);

      if (v24)
      {
        v23[42] = (void *)(*(_QWORD *)((char *)&v68[2] + 12) + *(_QWORD *)((char *)v68 + 12));
        v25 = mach_continuous_time();
        if (v25 <= 1)
          v26 = 1;
        else
          v26 = v25;
        v23[43] = (void *)v26;
        v27 = v8[3];
        *(_QWORD *)v56 = MEMORY[0x1E0C809B0];
        v57 = 3221225472;
        v58 = __nw_connection_start_throughput_monitor_on_nw_queue_block_invoke;
        v59 = &unk_1E14ACFD0;
        v60 = v23;
        source = nw_queue_context_create_source(v27, 2, 3, 0, v56, 0);
        if (source)
        {
          v29 = dispatch_time(0x8000000000000000, 1000000000);
          if (*(_QWORD *)source)
          {
            dispatch_source_set_timer(*(dispatch_source_t *)source, v29, 0x3B9ACA00uLL, 0xF4240uLL);
          }
          else
          {
            *(_QWORD *)(source + 32) = v29;
            *(_QWORD *)(source + 40) = 1000000000;
            if (*(_BYTE *)(source + 48) && *(_BYTE *)(source + 49))
              nw_queue_source_run_timer(source, v29);
          }
          nw_queue_activate_source(source, v29);
          v16[46] = (id)source;
LABEL_55:

          goto LABEL_56;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v30 = (id)gLogObj;
        *(_DWORD *)v61 = 136446210;
        v62 = "nw_connection_start_throughput_monitor_on_nw_queue";
        v31 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v54 = 0;
        if ((__nwlog_fault(v31, &type, &v54) & 1) != 0)
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v32 = (id)gLogObj;
            v33 = type;
            if (os_log_type_enabled(v32, type))
            {
              *(_DWORD *)v61 = 136446210;
              v62 = "nw_connection_start_throughput_monitor_on_nw_queue";
              _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s nw_queue_context_create_source(timer) failed", v61, 0xCu);
            }
          }
          else if (v54)
          {
            v34 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v32 = (id)gLogObj;
            v35 = type;
            v36 = os_log_type_enabled(v32, type);
            if (v34)
            {
              if (v36)
              {
                *(_DWORD *)v61 = 136446466;
                v62 = "nw_connection_start_throughput_monitor_on_nw_queue";
                v63 = 2082;
                v64 = v34;
                _os_log_impl(&dword_182FBE000, v32, v35, "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s", v61, 0x16u);
              }

              free(v34);
              goto LABEL_53;
            }
            if (v36)
            {
              *(_DWORD *)v61 = 136446210;
              v62 = "nw_connection_start_throughput_monitor_on_nw_queue";
              _os_log_impl(&dword_182FBE000, v32, v35, "%{public}s nw_queue_context_create_source(timer) failed, no backtrace", v61, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v32 = (id)gLogObj;
            v37 = type;
            if (os_log_type_enabled(v32, type))
            {
              *(_DWORD *)v61 = 136446210;
              v62 = "nw_connection_start_throughput_monitor_on_nw_queue";
              _os_log_impl(&dword_182FBE000, v32, v37, "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded", v61, 0xCu);
            }
          }

        }
LABEL_53:
        if (v31)
          free(v31);
        goto LABEL_55;
      }
    }
    else
    {

    }
  }
LABEL_56:

}

void sub_1835D34B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void nw_connection_set_metadata_changed_handler(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_connection_set_metadata_changed_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v9, &type, &v26))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_connection_set_metadata_changed_handler";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_connection_set_metadata_changed_handler";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9)
          goto LABEL_4;
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_connection_set_metadata_changed_handler";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_connection_set_metadata_changed_handler";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v6)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_connection_set_metadata_changed_handler_block_invoke;
    v22[3] = &unk_1E14A8D98;
    v23 = v5;
    v24 = v6;
    v25 = v7;
    nw_connection_async_if_needed(v23, v22);

    goto LABEL_4;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_connection_set_metadata_changed_handler";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (!__nwlog_fault(v9, &type, &v26))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_set_metadata_changed_handler";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v26)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_set_metadata_changed_handler";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_set_metadata_changed_handler";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v29 = "nw_connection_set_metadata_changed_handler";
    v30 = 2082;
    v31 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_39;
LABEL_4:

}

void sub_1835D3A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void __nw_connection_set_metadata_changed_handler_block_invoke(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  id v6;
  _QWORD *v7;
  const void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  id *v21;
  void *v22;
  id v23;
  id **v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  char *identifier;
  NSObject *v31;
  void *v32;
  _QWORD v33[4];
  _QWORD *v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  _BOOL4 v44;
  __int16 v45;
  _BOOL4 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = v3[33];
  v5 = v3;
  v6 = v2;
  if (!v6)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_connection_get_metadata_changed_registration_on_nw_queue";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v14, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_connection_get_metadata_changed_registration_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_connection_get_metadata_changed_registration_on_nw_queue";
            v39 = 2082;
            v40 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_connection_get_metadata_changed_registration_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_connection_get_metadata_changed_registration_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_28:
    if (v14)
      free(v14);
    goto LABEL_30;
  }
  nw_context_assert_queue(v5[3]);
  v7 = v3 + 33;
  while (1)
  {
    v7 = (_QWORD *)*v7;
    if (!v7)
      break;
    if (nw_protocol_definition_is_equal_unsafe(v7[2], (uint64_t)v6))
    {

      v8 = *(const void **)(a1 + 48);
      if (v8)
      {
        if (v8 != (const void *)v7[3])
        {
          v9 = _Block_copy(v8);
          v10 = (void *)v7[3];
          v7[3] = v9;

        }
      }
      else
      {
        v11 = (_QWORD *)*v7;
        v12 = (_QWORD *)v7[1];
        if (*v7)
        {
          v11[1] = v12;
          v12 = (_QWORD *)v7[1];
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 272) = v12;
        }
        *v12 = v11;
        *v7 = 0;
        v7[1] = 0;
      }
      goto LABEL_32;
    }
  }
LABEL_30:

  v21 = (id *)malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (!v21)
  {
    __nwlog_obj();
    v31 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v38 = "strict_calloc";
    v39 = 2048;
    v40 = 1;
    v41 = 2048;
    v42 = 32;
    v32 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v32))
    {
      __break(1u);
      return;
    }
    free(v32);
  }
  objc_storeStrong(v21 + 2, *(id *)(a1 + 40));
  v22 = _Block_copy(*(const void **)(a1 + 48));
  v23 = v21[3];
  v21[3] = v22;

  *v21 = 0;
  v24 = *(id ***)(*(_QWORD *)(a1 + 32) + 272);
  v21[1] = v24;
  *v24 = v21;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 272) = v21;
LABEL_32:
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 264);
  if (gLogDatapath)
  {
    __nwlog_obj();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      v29 = _Block_copy(*(const void **)(a1 + 48));
      identifier = nw_protocol_definition_get_identifier(*(void **)(a1 + 40));
      *(_DWORD *)buf = 136447234;
      v38 = "nw_connection_set_metadata_changed_handler_block_invoke";
      v39 = 2048;
      v40 = (uint64_t)v29;
      v41 = 2082;
      v42 = (uint64_t)identifier;
      v43 = 1024;
      v44 = v4 == 0;
      v45 = 1024;
      v46 = v25 == 0;
      _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s Set metadata changed handler: %p for protocol: %{public}s, was empty: %u now empty: %u", buf, 0x2Cu);

    }
  }
  if (v4 || !v25)
  {
    if (v4)
    {
      if (!v25)
        nw_endpoint_handler_set_metadata_changed_handler(*(void **)(*(_QWORD *)(a1 + 32) + 144), 0);
    }
  }
  else
  {
    v26 = *(_QWORD **)(a1 + 32);
    v27 = (void *)v26[18];
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = __nw_connection_set_metadata_changed_handler_block_invoke_46;
    v33[3] = &unk_1E149DC00;
    v34 = v26;
    nw_endpoint_handler_set_metadata_changed_handler(v27, v33);

  }
}

void sub_1835D3FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

void __nw_connection_set_metadata_changed_handler_block_invoke_46(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void **v7;
  id v8;
  id v9;
  void *v10;
  void **v11;
  id v12;
  char *v13;
  void *v14;
  void *v15;
  dispatch_qos_class_t v16;
  _QWORD *v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  NSObject *v26;
  int v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  _BOOL4 v35;
  void *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  char *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  os_log_type_t v44;
  os_log_type_t v45;
  os_log_type_t v46;
  char v47;
  os_log_type_t type;
  _BYTE buf[32];
  id v50;
  id v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void **)*(id *)(a1 + 32);
  v8 = v5;
  v9 = v6;
  v10 = v9;
  if (!v7)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      v30 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_78:
        if (!v19)
          goto LABEL_13;
LABEL_79:
        free(v19);
        goto LABEL_13;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v43, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_77:

    goto LABEL_78;
  }
  if (!v8)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null protocol", buf, 0xCu);
      }
      goto LABEL_77;
    }
    if (!v47)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v44, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_77;
    }
    v31 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v32 = type;
    v33 = os_log_type_enabled(v20, type);
    if (!v31)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
      goto LABEL_77;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v31;
      _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_48;
  }
  if (!v9)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null metadata", buf, 0xCu);
      }
      goto LABEL_77;
    }
    if (!v47)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v45 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v45, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_77;
    }
    v31 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v34 = type;
    v35 = os_log_type_enabled(v20, type);
    if (!v31)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
      goto LABEL_77;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v31;
      _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_48:

    free(v31);
    if (!v19)
      goto LABEL_13;
    goto LABEL_79;
  }
  nw_context_assert_queue(v7[3]);
  v11 = v7;
  v12 = v8;
  nw_context_assert_queue(v7[3]);
  v13 = (char *)(v11 + 33);
  while (1)
  {
    v13 = *(char **)v13;
    if (!v13)
      break;
    if (nw_protocol_definition_is_equal_unsafe(*((_QWORD *)v13 + 2), (uint64_t)v12))
    {

      v14 = _Block_copy(*((const void **)v13 + 3));
      v15 = v14;
      if (v14)
      {
        v16 = *((_DWORD *)v11 + 48);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZL56nw_connection_deliver_metadata_changed_event_on_nw_queueP24NWConcrete_nw_connectionPU36objcproto25OS_nw_protocol_definition8NSObjectPU34objcproto23OS_nw_protocol_metadataS1__block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E14ACE18;
        v51 = v14;
        v50 = v10;
        nw_connection_async_client(v11, v16, buf);

LABEL_9:
        goto LABEL_13;
      }
      __nwlog_obj();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
      v37 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v47 = 0;
      if (__nwlog_fault(v37, &type, &v47))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = type;
          if (os_log_type_enabled(v38, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
            _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s called with null handler_copy", buf, 0xCu);
          }
          goto LABEL_85;
        }
        if (v47)
        {
          v40 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          v41 = type;
          v42 = os_log_type_enabled(v38, type);
          if (v40)
          {
            if (v42)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v40;
              _os_log_impl(&dword_182FBE000, v38, v41, "%{public}s called with null handler_copy, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v40);
            goto LABEL_86;
          }
          if (v42)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
            _os_log_impl(&dword_182FBE000, v38, v41, "%{public}s called with null handler_copy, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          v46 = type;
          if (os_log_type_enabled(v38, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
            _os_log_impl(&dword_182FBE000, v38, v46, "%{public}s called with null handler_copy, backtrace limit exceeded", buf, 0xCu);
          }
        }
LABEL_85:

      }
LABEL_86:
      if (v37)
        free(v37);
      goto LABEL_9;
    }
  }

  v17 = v11[2];
  if (v17 && !nw_path_parameters_get_logging_disabled(v17[13]) && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v26 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      v27 = *((_DWORD *)v11 + 112);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = nw_protocol_definition_get_identifier(v12);
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] %{public}s does not have handler registered, ignoring metadata change notification", buf, 0x1Cu);
    }

  }
LABEL_13:

}

void sub_1835D4A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t ___ZL56nw_connection_deliver_metadata_changed_event_on_nw_queueP24NWConcrete_nw_connectionPU36objcproto25OS_nw_protocol_definition8NSObjectPU34objcproto23OS_nw_protocol_metadataS1__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void nw_connection_get_parent_uuid(void *a1, unsigned __int8 *a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  _QWORD v19[6];
  char v20;
  os_log_type_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_connection_get_parent_uuid";
    v6 = (char *)_os_log_send_and_compose_impl();

    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v6, &v21, &v20))
      goto LABEL_38;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = v21;
      if (os_log_type_enabled(v7, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_get_parent_uuid";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null out_uuid", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = v21;
      v13 = os_log_type_enabled(v7, v21);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_connection_get_parent_uuid";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null out_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_get_parent_uuid";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null out_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = v21;
      if (os_log_type_enabled(v7, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_get_parent_uuid";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null out_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  uuid_clear(a2);
  if (v3)
  {
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __nw_connection_get_parent_uuid_block_invoke;
    v19[3] = &unk_1E14AA348;
    v19[5] = a2;
    v4 = v3;
    v19[4] = v4;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_get_parent_uuid_block_invoke((uint64_t)v19);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_connection_get_parent_uuid";
  v6 = (char *)_os_log_send_and_compose_impl();

  v21 = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v6, &v21, &v20))
    goto LABEL_38;
  if (v21 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = v21;
    if (os_log_type_enabled(v7, v21))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_get_parent_uuid";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = v21;
    if (os_log_type_enabled(v7, v21))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_get_parent_uuid";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = v21;
  v16 = os_log_type_enabled(v7, v21);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_get_parent_uuid";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_connection_get_parent_uuid";
    v24 = 2082;
    v25 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

void sub_1835D4FC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 __nw_connection_get_parent_uuid_block_invoke(uint64_t a1)
{
  __n128 *v1;
  __n128 result;

  v1 = (__n128 *)(*(_QWORD *)(a1 + 32) + 468);
  result = *v1;
  *(__n128 *)*(_QWORD *)(a1 + 40) = *v1;
  return result;
}

void nw_connection_set_group_uuid(void *a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[6];
  char v21;
  os_log_type_t v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!a2)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_connection_set_group_uuid";
    v7 = (char *)_os_log_send_and_compose_impl();

    v22 = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v7, &v22, &v21))
      goto LABEL_38;
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v22;
      if (os_log_type_enabled(v8, v22))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_connection_set_group_uuid";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null in_uuid", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v22;
      v14 = os_log_type_enabled(v8, v22);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_connection_set_group_uuid";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null in_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7)
          goto LABEL_4;
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_connection_set_group_uuid";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null in_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = v22;
      if (os_log_type_enabled(v8, v22))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_connection_set_group_uuid";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null in_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v3)
  {
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __nw_connection_set_group_uuid_block_invoke;
    v20[3] = &unk_1E14AA348;
    v5 = v3;
    v20[4] = v5;
    v20[5] = a2;
    os_unfair_lock_lock(v4 + 34);
    __nw_connection_set_group_uuid_block_invoke((uint64_t)v20);
    os_unfair_lock_unlock(v4 + 34);

    goto LABEL_4;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_connection_set_group_uuid";
  v7 = (char *)_os_log_send_and_compose_impl();

  v22 = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v7, &v22, &v21))
    goto LABEL_38;
  if (v22 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = v22;
    if (os_log_type_enabled(v8, v22))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_set_group_uuid";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null connection", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v21)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = v22;
    if (os_log_type_enabled(v8, v22))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_set_group_uuid";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = v22;
  v17 = os_log_type_enabled(v8, v22);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_set_group_uuid";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_connection_set_group_uuid";
    v25 = 2082;
    v26 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_39;
LABEL_4:

}

__n128 __nw_connection_set_group_uuid_block_invoke(uint64_t a1)
{
  __n128 *v1;
  __n128 result;

  v1 = *(__n128 **)(a1 + 40);
  result = *v1;
  *(__n128 *)(*(_QWORD *)(a1 + 32) + 484) = *v1;
  return result;
}

void nw_connection_get_group_uuid(void *a1, unsigned __int8 *a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  _QWORD v19[6];
  char v20;
  os_log_type_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_connection_get_group_uuid";
    v6 = (char *)_os_log_send_and_compose_impl();

    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v6, &v21, &v20))
      goto LABEL_38;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = v21;
      if (os_log_type_enabled(v7, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_get_group_uuid";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null out_uuid", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = v21;
      v13 = os_log_type_enabled(v7, v21);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_connection_get_group_uuid";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null out_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_get_group_uuid";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null out_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = v21;
      if (os_log_type_enabled(v7, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_get_group_uuid";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null out_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  uuid_clear(a2);
  if (v3)
  {
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __nw_connection_get_group_uuid_block_invoke;
    v19[3] = &unk_1E14AA348;
    v19[5] = a2;
    v4 = v3;
    v19[4] = v4;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_get_group_uuid_block_invoke((uint64_t)v19);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_connection_get_group_uuid";
  v6 = (char *)_os_log_send_and_compose_impl();

  v21 = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v6, &v21, &v20))
    goto LABEL_38;
  if (v21 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = v21;
    if (os_log_type_enabled(v7, v21))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_get_group_uuid";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = v21;
    if (os_log_type_enabled(v7, v21))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_get_group_uuid";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = v21;
  v16 = os_log_type_enabled(v7, v21);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_get_group_uuid";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_connection_get_group_uuid";
    v24 = 2082;
    v25 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

void sub_1835D59F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 __nw_connection_get_group_uuid_block_invoke(uint64_t a1)
{
  __n128 *v1;
  __n128 result;

  v1 = (__n128 *)(*(_QWORD *)(a1 + 32) + 484);
  result = *v1;
  *(__n128 *)*(_QWORD *)(a1 + 40) = *v1;
  return result;
}

void sub_1835D5DE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1835D5F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__25611(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *(_OWORD *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 48) = v2;
  result = *(__n128 *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v6;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

id nw_endpoint_create_custom(unsigned int a1, void *a2, void *a3)
{
  id v6;
  id v7;
  NWConcrete_nw_custom_endpoint *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  id v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  id v20;
  char *v21;
  NSObject *v22;
  os_log_type_t receiver;
  id v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  _DWORD *v28;
  id v29;
  void *v30;
  void *v31;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  os_log_type_t v41;
  void *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  void *v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  os_log_type_t v53;
  char *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  os_log_type_t v57;
  objc_super v58;
  char v59;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  _WORD v64[17];

  *(_QWORD *)&v64[13] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    v8 = [NWConcrete_nw_custom_endpoint alloc];
    v9 = v7;
    v10 = v6;
    v11 = v10;
    if (!v8)
      goto LABEL_21;
    if (a1 <= 0x3E7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
      v63 = 1024;
      *(_DWORD *)v64 = 1000;
      v13 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v59 = 0;
      if (__nwlog_fault(v13, &type, &v59))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v14 = (id)gLogObj;
          v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446466;
            v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            v63 = 1024;
            *(_DWORD *)v64 = 1000;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Custom endpoint type values must start at %d", buf, 0x12u);
          }
        }
        else if (v59)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v14 = (id)gLogObj;
          v34 = type;
          v35 = os_log_type_enabled(v14, type);
          if (backtrace_string)
          {
            if (v35)
            {
              *(_DWORD *)buf = 136446722;
              v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
              v63 = 1024;
              *(_DWORD *)v64 = 1000;
              v64[2] = 2082;
              *(_QWORD *)&v64[3] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v14, v34, "%{public}s Custom endpoint type values must start at %d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(backtrace_string);
            if (!v13)
              goto LABEL_20;
            goto LABEL_10;
          }
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            v63 = 1024;
            *(_DWORD *)v64 = 1000;
            _os_log_impl(&dword_182FBE000, v14, v34, "%{public}s Custom endpoint type values must start at %d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v14 = (id)gLogObj;
          v40 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446466;
            v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            v63 = 1024;
            *(_DWORD *)v64 = 1000;
            _os_log_impl(&dword_182FBE000, v14, v40, "%{public}s Custom endpoint type values must start at %d, backtrace limit exceeded", buf, 0x12u);
          }
        }

      }
      if (v13)
LABEL_10:
        free(v13);
LABEL_20:

      goto LABEL_21;
    }
    if (dispatch_data_get_size(v10) >= 0x401)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
      v63 = 1024;
      *(_DWORD *)v64 = 1024;
      v17 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v59 = 0;
      if (__nwlog_fault(v17, &type, &v59))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v18 = (id)gLogObj;
          v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446466;
            v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            v63 = 1024;
            *(_DWORD *)v64 = 1024;
            _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s Custom data size must be no larger than %d", buf, 0x12u);
          }
        }
        else if (v59)
        {
          v37 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v18 = (id)gLogObj;
          v38 = type;
          v39 = os_log_type_enabled(v18, type);
          if (v37)
          {
            if (v39)
            {
              *(_DWORD *)buf = 136446722;
              v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
              v63 = 1024;
              *(_DWORD *)v64 = 1024;
              v64[2] = 2082;
              *(_QWORD *)&v64[3] = v37;
              _os_log_impl(&dword_182FBE000, v18, v38, "%{public}s Custom data size must be no larger than %d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v37);
            if (!v17)
              goto LABEL_20;
            goto LABEL_19;
          }
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            v63 = 1024;
            *(_DWORD *)v64 = 1024;
            _os_log_impl(&dword_182FBE000, v18, v38, "%{public}s Custom data size must be no larger than %d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v18 = (id)gLogObj;
          v41 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446466;
            v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            v63 = 1024;
            *(_DWORD *)v64 = 1024;
            _os_log_impl(&dword_182FBE000, v18, v41, "%{public}s Custom data size must be no larger than %d, backtrace limit exceeded", buf, 0x12u);
          }
        }

      }
      if (!v17)
        goto LABEL_20;
LABEL_19:
      free(v17);
      goto LABEL_20;
    }
    v58.receiver = v8;
    v58.super_class = (Class)NWConcrete_nw_custom_endpoint;
    v28 = objc_msgSendSuper2(&v58, sel_init);
    v29 = v28;
    if (v28)
    {
      v28[62] = a1;
      v30 = _Block_copy(v9);
      v31 = (void *)*((_QWORD *)v29 + 30);
      *((_QWORD *)v29 + 30) = v30;

      objc_storeStrong((id *)v29 + 29, a2);
      v24 = v29;
      goto LABEL_37;
    }
    __nwlog_obj();
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
    v50 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if ((__nwlog_fault(v50, &type, &v59) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v52 = type;
        if (os_log_type_enabled(v51, type))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
          _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v59)
      {
        v54 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v55 = type;
        v56 = os_log_type_enabled(v51, type);
        if (v54)
        {
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            v63 = 2082;
            *(_QWORD *)v64 = v54;
            _os_log_impl(&dword_182FBE000, v51, v55, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v54);
          goto LABEL_104;
        }
        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
          _os_log_impl(&dword_182FBE000, v51, v55, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v57 = type;
        if (os_log_type_enabled(v51, type))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
          _os_log_impl(&dword_182FBE000, v51, v57, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_104:
    if (v50)
      free(v50);
LABEL_21:

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v62 = "nw_endpoint_create_custom";
    v21 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v58.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v21, &v58, &type))
    {
      if (LOBYTE(v58.receiver) == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        receiver = (os_log_type_t)v58.receiver;
        if (os_log_type_enabled(v22, (os_log_type_t)v58.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_endpoint_create_custom";
          _os_log_impl(&dword_182FBE000, v22, receiver, "%{public}s NWOSCustomEndpoint alloc/init failed", buf, 0xCu);
        }
      }
      else if (type)
      {
        v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v26 = (os_log_type_t)v58.receiver;
        v27 = os_log_type_enabled(v22, (os_log_type_t)v58.receiver);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            v62 = "nw_endpoint_create_custom";
            v63 = 2082;
            *(_QWORD *)v64 = v25;
            _os_log_impl(&dword_182FBE000, v22, v26, "%{public}s NWOSCustomEndpoint alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v25);
          if (!v21)
            goto LABEL_28;
          goto LABEL_27;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_endpoint_create_custom";
          _os_log_impl(&dword_182FBE000, v22, v26, "%{public}s NWOSCustomEndpoint alloc/init failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v36 = (os_log_type_t)v58.receiver;
        if (os_log_type_enabled(v22, (os_log_type_t)v58.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_endpoint_create_custom";
          _os_log_impl(&dword_182FBE000, v22, v36, "%{public}s NWOSCustomEndpoint alloc/init failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v21)
    {
LABEL_28:
      v24 = 0;
LABEL_37:

      goto LABEL_38;
    }
LABEL_27:
    free(v21);
    goto LABEL_28;
  }
  __nwlog_obj();
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v62 = "nw_endpoint_create_custom";
  v43 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v58.receiver) = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v43, &v58, &type))
  {
    if (LOBYTE(v58.receiver) == 17)
    {
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      v45 = (os_log_type_t)v58.receiver;
      if (os_log_type_enabled(v44, (os_log_type_t)v58.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_endpoint_create_custom";
        _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s called with null custom_data", buf, 0xCu);
      }
    }
    else if (type)
    {
      v46 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      v47 = (os_log_type_t)v58.receiver;
      v48 = os_log_type_enabled(v44, (os_log_type_t)v58.receiver);
      if (v46)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_endpoint_create_custom";
          v63 = 2082;
          *(_QWORD *)v64 = v46;
          _os_log_impl(&dword_182FBE000, v44, v47, "%{public}s called with null custom_data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v46);
        goto LABEL_95;
      }
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_endpoint_create_custom";
        _os_log_impl(&dword_182FBE000, v44, v47, "%{public}s called with null custom_data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      v53 = (os_log_type_t)v58.receiver;
      if (os_log_type_enabled(v44, (os_log_type_t)v58.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_endpoint_create_custom";
        _os_log_impl(&dword_182FBE000, v44, v53, "%{public}s called with null custom_data, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_95:
  if (v43)
    free(v43);
  v24 = 0;
LABEL_38:

  return v24;
}

void sub_1835D6D84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id nw_endpoint_copy_custom_data(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  unsigned int v4;
  id v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_endpoint_copy_custom_data";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_endpoint_copy_custom_data";
          _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null endpoint", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v21)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_endpoint_copy_custom_data";
          _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_endpoint_copy_custom_data";
          _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_endpoint_copy_custom_data";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v7)
    {
LABEL_23:
      v5 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v7);
    goto LABEL_23;
  }
  v3 = (id *)v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 <= 0x3E7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v24 = "nw_endpoint_copy_custom_data";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v7, &type, &v21))
      goto LABEL_21;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_copy_custom_data";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s non-custom endpoint", buf, 0xCu);
      }
    }
    else if (v21)
    {
      v10 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (v10)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_endpoint_copy_custom_data";
          v25 = 2082;
          v26 = v10;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s non-custom endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v10);
        if (!v7)
          goto LABEL_23;
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_copy_custom_data";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s non-custom endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_copy_custom_data";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s non-custom endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  v5 = v3[29];
LABEL_24:

  return v5;
}

void sub_1835D72C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

size_t nw_endpoint_get_custom_data_length(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  unsigned int v4;
  NSObject *v5;
  size_t size;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_endpoint_get_custom_data_length";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v8, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_endpoint_get_custom_data_length";
          _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null endpoint", buf, 0xCu);
        }
LABEL_21:

        goto LABEL_22;
      }
      if (!v22)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_endpoint_get_custom_data_length";
          _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_endpoint_get_custom_data_length";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_21;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        v25 = "nw_endpoint_get_custom_data_length";
        v26 = 2082;
        v27 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_22:
    if (!v8)
      goto LABEL_24;
LABEL_23:
    free(v8);
    goto LABEL_24;
  }
  v3 = v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 <= 0x3E7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v25 = "nw_endpoint_get_custom_data_length";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v8, &type, &v22))
      goto LABEL_22;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_endpoint_get_custom_data_length";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s non-custom endpoint", buf, 0xCu);
      }
    }
    else if (v22)
    {
      v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (v11)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_endpoint_get_custom_data_length";
          v26 = 2082;
          v27 = v11;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s non-custom endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v11);
        if (!v8)
          goto LABEL_24;
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_endpoint_get_custom_data_length";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s non-custom endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_endpoint_get_custom_data_length";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s non-custom endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_21;
  }
  v5 = v3[29];
  if (!v5)
  {
LABEL_24:
    size = 0;
    goto LABEL_25;
  }
  size = dispatch_data_get_size(v5);
LABEL_25:

  return size;
}

void sub_1835D77EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *nw_endpoint_copy_custom_resolver_block(void *a1)
{
  id v1;
  void *v2;
  const void **v3;
  unsigned int v4;
  void *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_endpoint_copy_custom_resolver_block";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_endpoint_copy_custom_resolver_block";
          _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null endpoint", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v21)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_endpoint_copy_custom_resolver_block";
          _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_endpoint_copy_custom_resolver_block";
          _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_endpoint_copy_custom_resolver_block";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v7)
    {
LABEL_23:
      v5 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v7);
    goto LABEL_23;
  }
  v3 = (const void **)v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 <= 0x3E7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v24 = "nw_endpoint_copy_custom_resolver_block";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v7, &type, &v21))
      goto LABEL_21;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_copy_custom_resolver_block";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s non-custom endpoint", buf, 0xCu);
      }
    }
    else if (v21)
    {
      v10 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (v10)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_endpoint_copy_custom_resolver_block";
          v25 = 2082;
          v26 = v10;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s non-custom endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v10);
        if (!v7)
          goto LABEL_23;
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_copy_custom_resolver_block";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s non-custom endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_copy_custom_resolver_block";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s non-custom endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  v5 = _Block_copy(v3[30]);
LABEL_24:

  return v5;
}

void sub_1835D7D14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

int *nw_protocol_demux_identifier()
{
  if (nw_protocol_demux_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_demux_identifier::onceToken, &__block_literal_global_25737);
  return &g_demux_protocol_identifier;
}

double __nw_protocol_demux_identifier_block_invoke()
{
  double result;

  unk_1EDCE510E = 0;
  unk_1EDCE5106 = 0;
  word_1EDCE511E = 0;
  unk_1EDCE5116 = 0;
  strcpy((char *)&g_demux_protocol_identifier, "demux");
  *(_QWORD *)&result = 0x200000000;
  qword_1EDCE5120 = 0x200000000;
  qword_1EDCE4DD8 = (uint64_t)nw_protocol_default_get_local;
  unk_1EDCE4DE0 = nw_protocol_default_get_remote;
  qword_1EDCE4DC8 = (uint64_t)nw_protocol_default_get_parameters;
  unk_1EDCE4DD0 = nw_protocol_default_get_path;
  qword_1EDCE4E18 = (uint64_t)nw_protocol_default_output_finished;
  unk_1EDCE4E20 = nw_protocol_default_get_output_local;
  qword_1EDCE4E58 = (uint64_t)nw_protocol_default_reset;
  unk_1EDCE4E60 = nw_protocol_default_input_flush;
  qword_1EDCE4E28 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_1EDCE4E30 = nw_protocol_default_waiting_for_output;
  qword_1EDCE4DE8 = (uint64_t)nw_protocol_default_register_notification;
  unk_1EDCE4DF0 = nw_protocol_default_unregister_notification;
  qword_1EDCE4DF8 = (uint64_t)nw_protocol_default_notify;
  unk_1EDCE4E00 = nw_protocol_default_updated_path;
  qword_1EDCE4E38 = (uint64_t)nw_protocol_default_copy_info;
  unk_1EDCE4E40 = nw_protocol_default_add_listen_handler;
  qword_1EDCE4E48 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_1EDCE4E50 = nw_protocol_default_get_message_properties;
  g_demux_protocol_callbacks = (uint64_t)nw_protocol_demux_add_input_handler;
  unk_1EDCE4D60 = nw_protocol_demux_remove_input_handler;
  qword_1EDCE4D68 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_1EDCE4D70 = nw_protocol_demux_connect;
  qword_1EDCE4D78 = (uint64_t)nw_protocol_demux_disconnect;
  unk_1EDCE4D80 = nw_protocol_common_connected;
  qword_1EDCE4D88 = (uint64_t)nw_protocol_demux_disconnected;
  unk_1EDCE4D90 = nw_protocol_default_error;
  qword_1EDCE4E08 = (uint64_t)nw_protocol_demux_supports_external_data;
  unk_1EDCE4E10 = nw_protocol_default_input_finished;
  qword_1EDCE4DB8 = (uint64_t)nw_protocol_demux_finalize_output_frames;
  unk_1EDCE4DC0 = nw_protocol_default_link_state;
  qword_1EDCE4DA8 = (uint64_t)nw_protocol_demux_get_input_frames;
  unk_1EDCE4DB0 = nw_protocol_demux_get_output_frames;
  qword_1EDCE4D98 = (uint64_t)nw_protocol_demux_input_available;
  unk_1EDCE4DA0 = nw_protocol_default_output_available;
  return result;
}

BOOL nw_protocol_demux_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_parameters)(nw_protocol *);
  void *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t internal;
  _BOOL8 v12;
  _BOOL8 v13;
  void *v14;
  uint64_t extra;
  nw_protocol_callbacks *v16;
  uint64_t (*v17)(nw_protocol *);
  void *v18;
  unsigned __int8 *v19;
  nw_protocol_callbacks *v20;
  uint64_t (*supports_external_data)(nw_protocol *);
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  _BOOL4 v33;
  NSObject *v34;
  int v35;
  int v36;
  char v37;
  os_log_type_t type;
  _BYTE buf[24];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
    v26 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v26, &type, &v37))
      goto LABEL_67;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_67;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
        v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_66;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v31 = os_log_type_enabled(v27, type);
      if (!backtrace_string)
      {
        if (!v31)
          goto LABEL_67;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
        v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_66;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v32 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_54:
        _os_log_impl(&dword_182FBE000, v27, v28, v32, buf, 0x16u);
      }
LABEL_55:
      free(backtrace_string);
      goto LABEL_67;
    }
    v27 = __nwlog_obj();
    v28 = type;
    if (!os_log_type_enabled(v27, type))
      goto LABEL_67;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
    v29 = "%{public}s called with null protocol";
LABEL_66:
    _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
LABEL_67:
    if (v26)
      free(v26);
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
    v26 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v26, &type, &v37))
      goto LABEL_67;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
      v29 = "%{public}s called with null demux";
      goto LABEL_66;
    }
    if (!v37)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
      v29 = "%{public}s called with null demux, backtrace limit exceeded";
      goto LABEL_66;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v27 = __nwlog_obj();
    v28 = type;
    v33 = os_log_type_enabled(v27, type);
    if (backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v32 = "%{public}s called with null demux, dumping backtrace:%{public}s";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (!v33)
      goto LABEL_67;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
    v29 = "%{public}s called with null demux, no backtrace";
    goto LABEL_66;
  }
  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    if (default_input_handler != a2)
    {
      if (!a2
        || (callbacks = a2->callbacks) == 0
        || (get_parameters = (uint64_t (*)(nw_protocol *))callbacks->get_parameters) == 0)
      {
        v22 = __nwlog_obj();
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          return 0;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = handle + 90;
        v23 = "%{public}s %s Input handler does not support parameters";
        goto LABEL_29;
      }
      v8 = (void *)get_parameters(a2);
      v9 = nw_parameters_copy_protocol_options_legacy(v8, (nw_protocol *)handle);
      if (v9)
      {
        v10 = v9;
        internal = *((_QWORD *)handle + 10);
        if (!internal)
        {
          internal = nw_hash_table_create_internal(5u, 112, (const void *(*)(const void *, unsigned int *))nw_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key, 0);
          if (internal)
            *(_DWORD *)(internal + 48) &= ~2u;
          *((_QWORD *)handle + 10) = internal;
        }
        type = OS_LOG_TYPE_DEFAULT;
        v12 = nw_hash_table_add_object(internal, (uint64_t)a2, (char *)&type);
        v13 = type != OS_LOG_TYPE_DEFAULT;
        if (type)
        {
          v14 = (void *)v12;
          extra = nw_hash_node_get_extra(v12);
          *(_QWORD *)extra = 0;
          *(_QWORD *)(extra + 8) = extra;
          *(_QWORD *)(extra + 16) = 0;
          *(_QWORD *)(extra + 24) = extra + 16;
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL35nw_demux_options_copy_pattern_chainP19nw_protocol_optionsP21nw_demux_pattern_headP16nw_demux_pattern_block_invoke;
          *(_QWORD *)&v40 = &__block_descriptor_tmp_17_25912;
          *((_QWORD *)&v40 + 1) = extra + 16;
          v41 = extra + 32;
          nw_protocol_options_access_handle(v10, buf);
          os_release(v10);
          if (gLogDatapath)
          {
            v34 = __nwlog_obj();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              v35 = *(unsigned __int16 *)(extra + 50);
              v36 = *(unsigned __int16 *)(extra + 48);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = handle + 90;
              *(_WORD *)&buf[22] = 1024;
              LODWORD(v40) = v35;
              WORD2(v40) = 1024;
              *(_DWORD *)((char *)&v40 + 6) = v36;
              _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %s Received pattern of length %u at offset %u", buf, 0x22u);
            }
          }
          a2->output_handler_context = v14;
          nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v24 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = handle + 90;
            *(_WORD *)&buf[22] = 1042;
            LODWORD(v40) = 16;
            WORD2(v40) = 2098;
            *(_QWORD *)((char *)&v40 + 6) = a2;
            _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s %s Input handler already registered for %{public,uuid_t}.16P", buf, 0x26u);
          }
          os_release(v10);
        }
        return v13;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_demux_add_input_handler";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = handle + 90;
        v23 = "%{public}s %s Input handler did not provide options";
LABEL_29:
        _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, v23, buf, 0x16u);
      }
    }
    return 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
  if (!a2)
    return 1;
  *(_OWORD *)a1->flow_id = *(_OWORD *)a2->flow_id;
  if (!a2->output_handler)
    nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
  v16 = a2->callbacks;
  if (!v16)
    return 1;
  v17 = (uint64_t (*)(nw_protocol *))v16->get_parameters;
  if (v17)
  {
    v18 = (void *)v17(a2);
    if (v18)
    {
      v19 = nw_parameters_copy_protocol_options_legacy(v18, (nw_protocol *)handle);
      nw_protocol_options_get_log_id_str(v19, handle + 90, 84);
      if (v19)
        os_release(v19);
    }
  }
  v20 = a2->callbacks;
  if (!v20)
    return 1;
  supports_external_data = (uint64_t (*)(nw_protocol *))v20->supports_external_data;
  if (!supports_external_data)
    return 1;
  handle[88] = supports_external_data(a2);
  return 1;
}

uint64_t nw_protocol_demux_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  char *handle;
  nw_protocol *v5;
  uint64_t output_handler_context;
  uint64_t v8;
  nw_protocol *output_handler;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_demux_remove_input_handler";
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v11, &type, &v21))
      goto LABEL_48;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v21)
      {
        v12 = __nwlog_obj();
        v13 = type;
        if (!os_log_type_enabled(v12, type))
          goto LABEL_48;
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_demux_remove_input_handler";
        v14 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_47;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v12 = __nwlog_obj();
      v13 = type;
      v16 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (!v16)
          goto LABEL_48;
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_demux_remove_input_handler";
        v14 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_47;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_protocol_demux_remove_input_handler";
        v25 = 2082;
        v26 = backtrace_string;
        v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
        _os_log_impl(&dword_182FBE000, v12, v13, v17, buf, 0x16u);
      }
LABEL_38:
      free(backtrace_string);
      goto LABEL_48;
    }
    v12 = __nwlog_obj();
    v13 = type;
    if (!os_log_type_enabled(v12, type))
      goto LABEL_48;
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_demux_remove_input_handler";
    v14 = "%{public}s called with null protocol";
LABEL_47:
    _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
LABEL_48:
    if (v11)
      free(v11);
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_demux_remove_input_handler";
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v11, &type, &v21))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_protocol_demux_remove_input_handler";
      v14 = "%{public}s called with null demux";
      goto LABEL_47;
    }
    if (!v21)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_protocol_demux_remove_input_handler";
      v14 = "%{public}s called with null demux, backtrace limit exceeded";
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v18 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_protocol_demux_remove_input_handler";
        v25 = 2082;
        v26 = backtrace_string;
        v17 = "%{public}s called with null demux, dumping backtrace:%{public}s";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    if (!v18)
      goto LABEL_48;
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_demux_remove_input_handler";
    v14 = "%{public}s called with null demux, no backtrace";
    goto LABEL_47;
  }
  v5 = a2;
  if (!a2)
    return (uint64_t)v5;
  if (a2->output_handler == a1)
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  if (a1->default_input_handler != v5)
  {
    output_handler_context = (uint64_t)v5->output_handler_context;
    if (output_handler_context)
    {
      v5->output_handler_context = 0;
      nw_protocol_set_output_handler((uint64_t)v5, 0);
      v5 = (nw_protocol *)nw_protocol_demux_destroy_entry((uint64_t)handle, output_handler_context);
      if (a3)
      {
        if (!a1->default_input_handler)
        {
          v8 = *((_QWORD *)handle + 10);
          if (!v8 || !*(_DWORD *)(v8 + 40))
            nw_protocol_demux_destroy(handle);
        }
      }
      return (uint64_t)v5;
    }
    return 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  output_handler = a1->output_handler;
  if (output_handler)
  {
    ((void (*)(void))output_handler->callbacks->remove_input_handler)();
    nw_protocol_set_output_handler((uint64_t)a1, 0);
  }
  if (a3)
  {
    v10 = *((_QWORD *)handle + 10);
    if (v10 && *(_DWORD *)(v10 + 40))
    {
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 0x40000000;
      v20[2] = ___ZL38nw_protocol_demux_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v20[3] = &__block_descriptor_tmp_19_25870;
      v20[4] = handle;
      nw_hash_table_apply((char *)v10, (uint64_t)v20);
    }
    else
    {
      nw_protocol_demux_destroy(handle);
    }
  }
  return 1;
}

uint64_t nw_protocol_demux_connect(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *handle;
  nw_protocol_callbacks *callbacks;
  void (*connected)(nw_protocol *, nw_protocol *);
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(void);
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_demux_connect";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17))
      goto LABEL_41;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v17)
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (!os_log_type_enabled(v10, type))
          goto LABEL_41;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_demux_connect";
        v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_40;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = type;
      v14 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (!v14)
          goto LABEL_41;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_demux_connect";
        v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_40;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        v20 = "nw_protocol_demux_connect";
        v21 = 2082;
        v22 = backtrace_string;
        v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
        _os_log_impl(&dword_182FBE000, v10, v11, v15, buf, 0x16u);
      }
LABEL_31:
      free(backtrace_string);
      goto LABEL_41;
    }
    v10 = __nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type))
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_demux_connect";
    v12 = "%{public}s called with null protocol";
LABEL_40:
    _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
LABEL_41:
    if (v9)
      free(v9);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_demux_connect";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_protocol_demux_connect";
      v12 = "%{public}s called with null demux";
      goto LABEL_40;
    }
    if (!v17)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_protocol_demux_connect";
      v12 = "%{public}s called with null demux, backtrace limit exceeded";
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type;
    v16 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v20 = "nw_protocol_demux_connect";
        v21 = 2082;
        v22 = backtrace_string;
        v15 = "%{public}s called with null demux, dumping backtrace:%{public}s";
        goto LABEL_30;
      }
      goto LABEL_31;
    }
    if (!v16)
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_demux_connect";
    v12 = "%{public}s called with null demux, no backtrace";
    goto LABEL_40;
  }
  if ((nw_protocol *)handle[6] == a2)
  {
    result = handle[4];
    if (!result)
      return result;
    v7 = *(_QWORD *)(result + 24);
    if (v7)
    {
      v8 = *(uint64_t (**)(void))(v7 + 24);
      if (v8)
        return v8();
    }
    return 0;
  }
  if (a2)
  {
    callbacks = a2->callbacks;
    if (callbacks)
    {
      connected = (void (*)(nw_protocol *, nw_protocol *))callbacks->connected;
      if (connected)
        connected(a2, a1);
    }
  }
  return 1;
}

void nw_protocol_demux_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol **handle;
  nw_protocol_callbacks *v4;
  void (*disconnect)(nw_protocol *, nw_protocol *);
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char *v14;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_demux_disconnect";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_demux_disconnect";
      v11 = "%{public}s called with null protocol";
      goto LABEL_39;
    }
    if (!v16)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_demux_disconnect";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v13 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_demux_disconnect";
      v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_39;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_demux_disconnect";
      v20 = 2082;
      v21 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_40:
    if (!v8)
      return;
    goto LABEL_41;
  }
  handle = (nw_protocol **)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_demux_disconnect";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_demux_disconnect";
      v11 = "%{public}s called with null demux";
      goto LABEL_39;
    }
    if (!v16)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_demux_disconnect";
      v11 = "%{public}s called with null demux, backtrace limit exceeded";
      goto LABEL_39;
    }
    v14 = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v15 = os_log_type_enabled(v9, type);
    if (v14)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "nw_protocol_demux_disconnect";
        v20 = 2082;
        v21 = v14;
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null demux, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v14);
      if (!v8)
        return;
LABEL_41:
      free(v8);
      return;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_demux_disconnect";
      v11 = "%{public}s called with null demux, no backtrace";
LABEL_39:
      _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      goto LABEL_40;
    }
    goto LABEL_40;
  }
  if (handle[6] == a2)
  {
    output_handler = a1->output_handler;
    if (output_handler)
    {
      callbacks = output_handler->callbacks;
      if (callbacks)
      {
        disconnect = (void (*)(nw_protocol *, nw_protocol *))callbacks->disconnect;
        if (disconnect)
          goto LABEL_11;
      }
    }
  }
  else if (a2)
  {
    v4 = a2->callbacks;
    if (v4)
    {
      disconnect = (void (*)(nw_protocol *, nw_protocol *))v4->disconnected;
      if (disconnect)
      {
        output_handler = a2;
LABEL_11:
        disconnect(output_handler, a1);
      }
    }
  }
}

void nw_protocol_demux_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  NSObject *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char *v15;
  _BOOL4 v16;
  _QWORD v17[5];
  char v18;
  os_log_type_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_demux_disconnected";
    v8 = (char *)_os_log_send_and_compose_impl();
    v19 = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v8, &v19, &v18))
      goto LABEL_41;
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (!os_log_type_enabled(v9, v19))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_demux_disconnected";
      v11 = "%{public}s called with null protocol";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = v19;
      v14 = os_log_type_enabled(v9, v19);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_protocol_demux_disconnected";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_41:
        if (!v8)
          return;
LABEL_42:
        free(v8);
        return;
      }
      if (!v14)
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_demux_disconnected";
      v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (!os_log_type_enabled(v9, v19))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_demux_disconnected";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_40:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
    goto LABEL_41;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    if (gLogDatapath)
    {
      v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_protocol_demux_disconnected";
        v22 = 2080;
        v23 = handle + 90;
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %s Disconnected from output handler", buf, 0x16u);
      }
    }
    nw_protocol_remove_instance((uint64_t)a1);
    v4 = (char *)*((_QWORD *)handle + 10);
    if (v4)
    {
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 0x40000000;
      v17[2] = ___ZL30nw_protocol_demux_disconnectedP11nw_protocolS0__block_invoke;
      v17[3] = &__block_descriptor_tmp_26_25834;
      v17[4] = handle;
      nw_hash_table_apply(v4, (uint64_t)v17);
    }
    v5 = *((_QWORD *)handle + 6);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(void (**)(void))(v6 + 48);
        if (v7)
          v7();
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_protocol_demux_disconnected";
  v8 = (char *)_os_log_send_and_compose_impl();
  v19 = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (!__nwlog_fault(v8, &v19, &v18))
    goto LABEL_41;
  if (v19 == OS_LOG_TYPE_FAULT)
  {
    v9 = __nwlog_obj();
    v10 = v19;
    if (!os_log_type_enabled(v9, v19))
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_demux_disconnected";
    v11 = "%{public}s called with null demux";
    goto LABEL_40;
  }
  if (!v18)
  {
    v9 = __nwlog_obj();
    v10 = v19;
    if (!os_log_type_enabled(v9, v19))
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_demux_disconnected";
    v11 = "%{public}s called with null demux, backtrace limit exceeded";
    goto LABEL_40;
  }
  v15 = (char *)__nw_create_backtrace_string();
  v9 = __nwlog_obj();
  v10 = v19;
  v16 = os_log_type_enabled(v9, v19);
  if (!v15)
  {
    if (!v16)
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_demux_disconnected";
    v11 = "%{public}s called with null demux, no backtrace";
    goto LABEL_40;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v21 = "nw_protocol_demux_disconnected";
    v22 = 2082;
    v23 = v15;
    _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null demux, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v15);
  if (v8)
    goto LABEL_42;
}

BOOL nw_protocol_demux_supports_external_data(nw_protocol *a1)
{
  _BYTE *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return handle[88] != 0;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_demux_supports_external_data";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_demux_supports_external_data";
        v6 = "%{public}s called with null demux";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_demux_supports_external_data";
        v6 = "%{public}s called with null demux, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_demux_supports_external_data";
        v6 = "%{public}s called with null demux, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_demux_supports_external_data";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null demux, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_demux_supports_external_data";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_demux_supports_external_data";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_demux_supports_external_data";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_demux_supports_external_data";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_demux_supports_external_data";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_demux_get_output_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *v11;
  _BOOL4 v12;
  char *backtrace_string;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1->handle)
      return nw_protocol_get_output_frames((uint64_t)a1->output_handler, (uint64_t)a1, a3, a4, a5, (uint64_t)a6);
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_demux_get_output_frames";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v8 = __nwlog_obj();
        v9 = type;
        if (!os_log_type_enabled(v8, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_demux_get_output_frames";
        v10 = "%{public}s called with null demux";
        goto LABEL_31;
      }
      if (!v15)
      {
        v8 = __nwlog_obj();
        v9 = type;
        if (!os_log_type_enabled(v8, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_demux_get_output_frames";
        v10 = "%{public}s called with null demux, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_demux_get_output_frames";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null demux, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v7)
          return 0;
        goto LABEL_33;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_demux_get_output_frames";
        v10 = "%{public}s called with null demux, no backtrace";
LABEL_31:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_demux_get_output_frames";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_demux_get_output_frames";
      v10 = "%{public}s called with null protocol";
      goto LABEL_31;
    }
    if (!v15)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_demux_get_output_frames";
      v10 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }
    v11 = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = type;
    v12 = os_log_type_enabled(v8, type);
    if (!v11)
    {
      if (!v12)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_demux_get_output_frames";
      v10 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocol_demux_get_output_frames";
      v19 = 2082;
      v20 = v11;
      _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v11);
  }
LABEL_32:
  if (v7)
LABEL_33:
    free(v7);
  return 0;
}

uint64_t nw_protocol_demux_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *v7;
  _BOOL4 v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1->handle)
      return nw_protocol_finalize_output_frames((uint64_t)a1->output_handler, (uint64_t)a2);
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_demux_finalize_output_frames";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (__nwlog_fault(v3, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_demux_finalize_output_frames";
        v6 = "%{public}s called with null demux";
        goto LABEL_31;
      }
      if (!v11)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_demux_finalize_output_frames";
        v6 = "%{public}s called with null demux, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v10 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_demux_finalize_output_frames";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null demux, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v3)
          return 0;
        goto LABEL_33;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_demux_finalize_output_frames";
        v6 = "%{public}s called with null demux, no backtrace";
LABEL_31:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_demux_finalize_output_frames";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_demux_finalize_output_frames";
      v6 = "%{public}s called with null protocol";
      goto LABEL_31;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_demux_finalize_output_frames";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }
    v7 = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!v7)
    {
      if (!v8)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_demux_finalize_output_frames";
      v6 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_demux_finalize_output_frames";
      v15 = 2082;
      v16 = v7;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v7);
  }
LABEL_32:
  if (v3)
LABEL_33:
    free(v3);
  return 0;
}

uint64_t nw_protocol_demux_get_input_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  char *handle;
  int v9;
  int v10;
  nw_protocol *output_handler;
  _QWORD *output_handler_context;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*input_available)(void);
  uint64_t v24;
  NSObject *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  _BOOL4 v33;
  nw_protocol *v34;
  const char *v35;
  nw_protocol_identifier *identifier;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  nw_protocol *v40;
  const char *v41;
  nw_protocol_identifier *v42;
  const char *v43;
  char *v44;
  _BOOL4 v45;
  nw_protocol *v46;
  const char *v47;
  nw_protocol_identifier *v48;
  nw_protocol *v49;
  const char *v50;
  nw_protocol_identifier *v51;
  nw_protocol *v52;
  const char *v53;
  nw_protocol_identifier *v54;
  char v55;
  os_log_type_t v56;
  _QWORD v57[5];
  _QWORD v58[2];
  uint64_t (*v59)(uint64_t, uint64_t);
  void *v60;
  uint64_t *v61;
  uint8_t *v62;
  uint64_t *v63;
  _QWORD *v64;
  char *v65;
  _QWORD *v66;
  nw_frame_array_s *v67;
  nw_protocol *v68;
  nw_protocol *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  uint64_t type;
  uint64_t *p_type;
  uint64_t v76;
  char v77;
  _QWORD v78[2];
  int v79;
  const char *v80;
  __int16 v81;
  const char *v82;
  __int16 v83;
  char *v84;
  uint8_t buf[40];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_demux_get_input_frames";
    v26 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type) = 16;
    LOBYTE(v70) = 0;
    if (!__nwlog_fault(v26, &type, &v70))
      goto LABEL_68;
    if (type != 17)
    {
      if (!(_BYTE)v70)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, (os_log_type_t)type))
          goto LABEL_68;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_demux_get_input_frames";
        v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_67;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type;
      v31 = os_log_type_enabled(v27, (os_log_type_t)type);
      if (!backtrace_string)
      {
        if (!v31)
          goto LABEL_68;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_demux_get_input_frames";
        v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_67;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_demux_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v32 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_47:
        _os_log_impl(&dword_182FBE000, v27, v28, v32, buf, 0x16u);
      }
LABEL_48:
      free(backtrace_string);
      goto LABEL_68;
    }
    v27 = __nwlog_obj();
    v28 = type;
    if (!os_log_type_enabled(v27, (os_log_type_t)type))
      goto LABEL_68;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_demux_get_input_frames";
    v29 = "%{public}s called with null protocol";
LABEL_67:
    _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
LABEL_68:
    if (v26)
      free(v26);
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_demux_get_input_frames";
    v26 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type) = 16;
    LOBYTE(v70) = 0;
    if (!__nwlog_fault(v26, &type, &v70))
      goto LABEL_68;
    if (type == 17)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, (os_log_type_t)type))
        goto LABEL_68;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_demux_get_input_frames";
      v29 = "%{public}s called with null demux";
      goto LABEL_67;
    }
    if (!(_BYTE)v70)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, (os_log_type_t)type))
        goto LABEL_68;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_demux_get_input_frames";
      v29 = "%{public}s called with null demux, backtrace limit exceeded";
      goto LABEL_67;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v27 = __nwlog_obj();
    v28 = type;
    v33 = os_log_type_enabled(v27, (os_log_type_t)type);
    if (backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_demux_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v32 = "%{public}s called with null demux, dumping backtrace:%{public}s";
        goto LABEL_47;
      }
      goto LABEL_48;
    }
    if (!v33)
      goto LABEL_68;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_demux_get_input_frames";
    v29 = "%{public}s called with null demux, no backtrace";
    goto LABEL_67;
  }
  v9 = a5;
  v10 = a4;
  handle[89] = 0;
  output_handler = a1->output_handler;
  if (a1->default_input_handler == a2)
  {
    output_handler_context = 0;
    v14 = handle + 64;
    if (*((_QWORD *)handle + 8))
      return nw_frame_array_fill_from_pending_array(v14, (uint64_t)a6, a4, a5);
    goto LABEL_8;
  }
  output_handler_context = a2->output_handler_context;
  if (output_handler_context)
  {
    v14 = output_handler_context + 4;
    if (output_handler_context[4])
      return nw_frame_array_fill_from_pending_array(v14, (uint64_t)a6, a4, a5);
LABEL_8:
    v16 = *((_QWORD *)handle + 10);
    if (!v16 || !*(_DWORD *)(v16 + 40))
      return nw_protocol_get_input_frames((uint64_t)output_handler, (uint64_t)a1, a3, a4, a5, (uint64_t)a6);
    v78[0] = 0;
    v78[1] = v78;
    nw_protocol_get_input_frames((uint64_t)output_handler, (uint64_t)a1, a3, a4, a5, (uint64_t)v78);
    v17 = v78[0];
    if (v78[0])
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      buf[24] = 0;
      type = 0;
      p_type = &type;
      v76 = 0x2000000000;
      v77 = 0;
      v70 = 0;
      v71 = &v70;
      v73 = 0;
      v72 = 0x2000000000;
      v58[0] = MEMORY[0x1E0C809B0];
      v58[1] = 0x40000000;
      v59 = ___ZL34nw_protocol_demux_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      v60 = &unk_1E149E000;
      v65 = handle;
      v66 = output_handler_context;
      v67 = a6;
      v61 = &v70;
      v62 = buf;
      v68 = a2;
      v69 = a1;
      v63 = &type;
      v64 = v78;
      do
      {
        if (!v17)
          break;
        v18 = *(_QWORD *)(v17 + 32);
        v19 = ((uint64_t (*)(_QWORD *))v59)(v58);
        v17 = v18;
      }
      while ((v19 & 1) != 0);
      if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
      {
        v20 = (char *)*((_QWORD *)handle + 10);
        v57[0] = MEMORY[0x1E0C809B0];
        v57[1] = 0x40000000;
        v57[2] = ___ZL34nw_protocol_demux_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_30;
        v57[3] = &__block_descriptor_tmp_31_25770;
        v57[4] = handle;
        nw_hash_table_apply(v20, (uint64_t)v57);
      }
      if (!*((_BYTE *)p_type + 24))
        goto LABEL_21;
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        callbacks = default_input_handler->callbacks;
        if (callbacks)
        {
          input_available = (void (*)(void))callbacks->input_available;
          if (input_available)
          {
            input_available();
LABEL_21:
            v24 = *((unsigned int *)v71 + 6);
            if (!(_DWORD)v24)
            {
              if ((*(_BYTE *)(*(_QWORD *)&buf[8] + 24) || *((_BYTE *)p_type + 24)) && *v14)
                v24 = nw_frame_array_fill_from_pending_array(v14, (uint64_t)a6, v10, v9);
              else
                v24 = 0;
            }
            _Block_object_dispose(&v70, 8);
            _Block_object_dispose(&type, 8);
            _Block_object_dispose(buf, 8);
            return v24;
          }
        }
      }
      __nwlog_obj();
      v34 = a1->default_input_handler;
      v35 = "invalid";
      if (v34)
      {
        identifier = v34->identifier;
        if (identifier)
          v35 = (const char *)identifier;
      }
      v79 = 136446466;
      v80 = "nw_protocol_demux_get_input_frames";
      v81 = 2082;
      v82 = v35;
      v37 = (char *)_os_log_send_and_compose_impl();
      v56 = OS_LOG_TYPE_ERROR;
      v55 = 0;
      if (__nwlog_fault(v37, &v56, &v55))
      {
        if (v56 == OS_LOG_TYPE_FAULT)
        {
          v38 = __nwlog_obj();
          v39 = v56;
          if (!os_log_type_enabled(v38, v56))
            goto LABEL_91;
          v40 = a1->default_input_handler;
          v41 = "invalid";
          if (v40)
          {
            v42 = v40->identifier;
            if (v42)
              v41 = (const char *)v42;
          }
          v79 = 136446466;
          v80 = "nw_protocol_demux_get_input_frames";
          v81 = 2082;
          v82 = v41;
          v43 = "%{public}s protocol %{public}s has invalid input_available callback";
          goto LABEL_90;
        }
        if (!v55)
        {
          v38 = __nwlog_obj();
          v39 = v56;
          if (!os_log_type_enabled(v38, v56))
            goto LABEL_91;
          v49 = a1->default_input_handler;
          v50 = "invalid";
          if (v49)
          {
            v51 = v49->identifier;
            if (v51)
              v50 = (const char *)v51;
          }
          v79 = 136446466;
          v80 = "nw_protocol_demux_get_input_frames";
          v81 = 2082;
          v82 = v50;
          v43 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
          goto LABEL_90;
        }
        v44 = (char *)__nw_create_backtrace_string();
        v38 = __nwlog_obj();
        v39 = v56;
        v45 = os_log_type_enabled(v38, v56);
        if (v44)
        {
          if (v45)
          {
            v46 = a1->default_input_handler;
            v47 = "invalid";
            if (v46)
            {
              v48 = v46->identifier;
              if (v48)
                v47 = (const char *)v48;
            }
            v79 = 136446722;
            v80 = "nw_protocol_demux_get_input_frames";
            v81 = 2082;
            v82 = v47;
            v83 = 2082;
            v84 = v44;
            _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", (uint8_t *)&v79, 0x20u);
          }
          free(v44);
          goto LABEL_91;
        }
        if (v45)
        {
          v52 = a1->default_input_handler;
          v53 = "invalid";
          if (v52)
          {
            v54 = v52->identifier;
            if (v54)
              v53 = (const char *)v54;
          }
          v79 = 136446466;
          v80 = "nw_protocol_demux_get_input_frames";
          v81 = 2082;
          v82 = v53;
          v43 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_90:
          _os_log_impl(&dword_182FBE000, v38, v39, v43, (uint8_t *)&v79, 0x16u);
        }
      }
LABEL_91:
      if (v37)
        free(v37);
      goto LABEL_21;
    }
    return 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v25 = gLogObj;
  if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    return 0;
  *(_DWORD *)buf = 136446466;
  *(_QWORD *)&buf[4] = "nw_protocol_demux_get_input_frames";
  *(_WORD *)&buf[12] = 2080;
  *(_QWORD *)&buf[14] = handle + 90;
  _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_ERROR, "%{public}s %s No valid node found", buf, 0x16u);
  return 0;
}

void nw_protocol_demux_input_available(nw_protocol *a1, nw_protocol *a2)
{
  _BYTE *handle;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*input_available)(void);
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  _QWORD v15[5];
  char v16;
  os_log_type_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_demux_input_available";
    v7 = (char *)_os_log_send_and_compose_impl();
    v17 = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v7, &v17, &v16))
      goto LABEL_40;
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = v17;
      if (!os_log_type_enabled(v8, v17))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_demux_input_available";
      v10 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = v17;
      v12 = os_log_type_enabled(v8, v17);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_demux_input_available";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_40:
        if (!v7)
          return;
LABEL_41:
        free(v7);
        return;
      }
      if (!v12)
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_demux_input_available";
      v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = v17;
      if (!os_log_type_enabled(v8, v17))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_demux_input_available";
      v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_39:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_40;
  }
  handle = a1->handle;
  if (handle)
  {
    handle[89] = 1;
    default_input_handler = a1->default_input_handler;
    if (!default_input_handler
      || (callbacks = default_input_handler->callbacks) == 0
      || (input_available = (void (*)(void))callbacks->input_available) == 0
      || (input_available(), handle[89]))
    {
      v6 = *((_QWORD *)handle + 10);
      if (v6)
      {
        if (*(_DWORD *)(v6 + 40))
        {
          v15[0] = MEMORY[0x1E0C809B0];
          v15[1] = 0x40000000;
          v15[2] = ___ZL33nw_protocol_demux_input_availableP11nw_protocolS0__block_invoke;
          v15[3] = &__block_descriptor_tmp_32_25751;
          v15[4] = handle;
          nw_hash_table_apply((char *)v6, (uint64_t)v15);
        }
      }
    }
    handle[89] = 0;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_demux_input_available";
  v7 = (char *)_os_log_send_and_compose_impl();
  v17 = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (!__nwlog_fault(v7, &v17, &v16))
    goto LABEL_40;
  if (v17 == OS_LOG_TYPE_FAULT)
  {
    v8 = __nwlog_obj();
    v9 = v17;
    if (!os_log_type_enabled(v8, v17))
      goto LABEL_40;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_demux_input_available";
    v10 = "%{public}s called with null demux";
    goto LABEL_39;
  }
  if (!v16)
  {
    v8 = __nwlog_obj();
    v9 = v17;
    if (!os_log_type_enabled(v8, v17))
      goto LABEL_40;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_demux_input_available";
    v10 = "%{public}s called with null demux, backtrace limit exceeded";
    goto LABEL_39;
  }
  v13 = (char *)__nw_create_backtrace_string();
  v8 = __nwlog_obj();
  v9 = v17;
  v14 = os_log_type_enabled(v8, v17);
  if (!v13)
  {
    if (!v14)
      goto LABEL_40;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_demux_input_available";
    v10 = "%{public}s called with null demux, no backtrace";
    goto LABEL_39;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    v19 = "nw_protocol_demux_input_available";
    v20 = 2082;
    v21 = v13;
    _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null demux, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7)
    goto LABEL_41;
}

uint64_t ___ZL33nw_protocol_demux_input_availableP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD);
  const char *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  const char *v17;
  const char *v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  v4 = object;
  if (object)
  {
    v5 = *(_QWORD *)(object + 24);
    if (v5)
    {
      v6 = *(void (**)(uint64_t, _QWORD))(v5 + 64);
      if (v6)
      {
        v6(object, *(_QWORD *)(a1 + 32));
        return *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 89);
      }
    }
    __nwlog_obj();
    v8 = *(const char **)(v4 + 16);
    if (!v8)
      v8 = "invalid";
  }
  else
  {
    __nwlog_obj();
    v8 = "invalid";
  }
  *(_DWORD *)buf = 136446466;
  v22 = "nw_protocol_demux_input_available_block_invoke";
  v23 = 2082;
  v24 = v8;
  v9 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_36;
      v12 = "invalid";
      if (v4 && *(_QWORD *)(v4 + 16))
        v12 = *(const char **)(v4 + 16);
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_demux_input_available_block_invoke";
      v23 = 2082;
      v24 = v12;
      v13 = "%{public}s protocol %{public}s has invalid input_available callback";
      goto LABEL_35;
    }
    if (!v19)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_36;
      v17 = "invalid";
      if (v4 && *(_QWORD *)(v4 + 16))
        v17 = *(const char **)(v4 + 16);
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_demux_input_available_block_invoke";
      v23 = 2082;
      v24 = v17;
      v13 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type;
    v15 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v15)
      {
        v16 = "invalid";
        if (v4 && *(_QWORD *)(v4 + 16))
          v16 = *(const char **)(v4 + 16);
        *(_DWORD *)buf = 136446722;
        v22 = "nw_protocol_demux_input_available_block_invoke";
        v23 = 2082;
        v24 = v16;
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_36;
    }
    if (v15)
    {
      v18 = "invalid";
      if (v4 && *(_QWORD *)(v4 + 16))
        v18 = *(const char **)(v4 + 16);
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_demux_input_available_block_invoke";
      v23 = 2082;
      v24 = v18;
      v13 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_35:
      _os_log_impl(&dword_182FBE000, v10, v11, v13, buf, 0x16u);
    }
  }
LABEL_36:
  if (v9)
    free(v9);
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 89);
}

uint64_t ___ZL34nw_protocol_demux_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  _QWORD v29[5];
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  os_log_type_t type[4];
  const char *v38;
  __int16 v39;
  const char *v40;
  _BYTE buf[24];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "__nw_frame_unclaimed_bytes";
    v7 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v7, type, &v36))
      goto LABEL_23;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type[0];
      if (!os_log_type_enabled(v8, type[0]))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "__nw_frame_unclaimed_bytes";
      v10 = "%{public}s called with null frame";
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = type[0];
      v12 = os_log_type_enabled(v8, type[0]);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "__nw_frame_unclaimed_bytes";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_23;
      }
      if (!v12)
      {
LABEL_23:
        if (v7)
          free(v7);
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "__nw_frame_unclaimed_bytes";
      v10 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = type[0];
      if (!os_log_type_enabled(v8, type[0]))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "__nw_frame_unclaimed_bytes";
      v10 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_23;
  }
  v4 = *(_QWORD *)(a2 + 112);
  if (!v4)
  {
LABEL_26:
    v6 = 0;
    goto LABEL_27;
  }
  if ((*(_WORD *)(a2 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(a2, *(_QWORD *)(a2 + 88)))
  {
LABEL_25:
    LODWORD(v4) = 0;
    goto LABEL_26;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v5 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v4)
    LODWORD(v4) = v4 - (v5 + *(_DWORD *)(a2 + 60));
  v6 = *(_QWORD *)(a2 + 112) + v5;
LABEL_27:
  v14 = (_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 32);
  if (v13)
  {
    *(_QWORD *)(v13 + 40) = *(_QWORD *)(a2 + 40);
    v15 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    v15 = *(_QWORD **)(a2 + 40);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v15;
  }
  *v15 = v13;
  *v14 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  v42 = 0;
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(char **)(v16 + 80);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 0x40000000;
  v29[2] = ___ZL34nw_protocol_demux_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2;
  v29[3] = &unk_1E149DFD8;
  v35 = v4;
  v31 = v6;
  v29[4] = buf;
  v32 = *(_OWORD *)(a1 + 72);
  v33 = a2;
  v34 = v16;
  v30 = *(_OWORD *)(a1 + 32);
  nw_hash_table_apply(v17, (uint64_t)v29);
  if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
  {
    if (*(_QWORD *)(a1 + 88) == *(_QWORD *)(*(_QWORD *)(a1 + 96) + 48))
    {
      if (gLogDatapath)
      {
        v26 = __nwlog_obj();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          v27 = *(_QWORD *)(a1 + 64);
          if (v27)
            v28 = (const char *)(v27 + 90);
          else
            v28 = "";
          *(_DWORD *)type = 136446466;
          v38 = "nw_protocol_demux_get_input_frames_block_invoke";
          v39 = 2080;
          v40 = v28;
          _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %s Received frame for default input handler", (uint8_t *)type, 0x16u);
        }
      }
      v20 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a2 + 32) = 0;
      v21 = *(_QWORD **)(v20 + 8);
      *(_QWORD *)(a2 + 40) = v21;
      *v21 = a2;
      *(_QWORD *)(v20 + 8) = v14;
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    }
    else
    {
      if (gLogDatapath)
      {
        v23 = __nwlog_obj();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          v24 = *(_QWORD *)(a1 + 64);
          if (v24)
            v25 = (const char *)(v24 + 90);
          else
            v25 = "";
          *(_DWORD *)type = 136446466;
          v38 = "nw_protocol_demux_get_input_frames_block_invoke";
          v39 = 2080;
          v40 = v25;
          _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %s Received frame for default input handler, pending", (uint8_t *)type, 0x16u);
        }
      }
      v18 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a2 + 32) = 0;
      v19 = *(_QWORD **)(v18 + 72);
      *(_QWORD *)(a2 + 40) = v19;
      *v19 = a2;
      *(_QWORD *)(v18 + 72) = v14;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    }
  }
  _Block_object_dispose(buf, 8);
  return 1;
}

uint64_t ___ZL34nw_protocol_demux_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_30(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD);
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  const char *v18;
  const char *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)nw_hash_node_get_extra(a2))
    return 1;
  object = nw_hash_node_get_object(a2);
  v5 = object;
  if (object)
  {
    v6 = *(_QWORD *)(object + 24);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, _QWORD))(v6 + 64);
      if (v7)
      {
        v7(object, *(_QWORD *)(a1 + 32));
        return 1;
      }
    }
    __nwlog_obj();
    v9 = *(const char **)(v5 + 16);
    if (!v9)
      v9 = "invalid";
  }
  else
  {
    __nwlog_obj();
    v9 = "invalid";
  }
  *(_DWORD *)buf = 136446466;
  v23 = "nw_protocol_demux_get_input_frames_block_invoke";
  v24 = 2082;
  v25 = v9;
  v10 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v10, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_37;
      v13 = "invalid";
      if (v5 && *(_QWORD *)(v5 + 16))
        v13 = *(const char **)(v5 + 16);
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_demux_get_input_frames_block_invoke";
      v24 = 2082;
      v25 = v13;
      v14 = "%{public}s protocol %{public}s has invalid input_available callback";
      goto LABEL_36;
    }
    if (!v20)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_37;
      v18 = "invalid";
      if (v5 && *(_QWORD *)(v5 + 16))
        v18 = *(const char **)(v5 + 16);
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_demux_get_input_frames_block_invoke";
      v24 = 2082;
      v25 = v18;
      v14 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v16 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v16)
      {
        v17 = "invalid";
        if (v5 && *(_QWORD *)(v5 + 16))
          v17 = *(const char **)(v5 + 16);
        *(_DWORD *)buf = 136446722;
        v23 = "nw_protocol_demux_get_input_frames_block_invoke";
        v24 = 2082;
        v25 = v17;
        v26 = 2082;
        v27 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_37;
    }
    if (v16)
    {
      v19 = "invalid";
      if (v5 && *(_QWORD *)(v5 + 16))
        v19 = *(const char **)(v5 + 16);
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_demux_get_input_frames_block_invoke";
      v24 = 2082;
      v25 = v19;
      v14 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_36:
      _os_log_impl(&dword_182FBE000, v11, v12, v14, buf, 0x16u);
    }
  }
LABEL_37:
  if (v10)
    free(v10);
  return 1;
}

BOOL ___ZL34nw_protocol_demux_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t extra;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *j;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  int v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  extra = nw_hash_node_get_extra(a2);
  for (i = *(uint64_t **)(extra + 16); i; i = (uint64_t *)*i)
  {
    v6 = *((unsigned __int16 *)i + 9);
    if (*((_WORD *)i + 9))
    {
      v7 = *((unsigned __int16 *)i + 8);
      if (*(_DWORD *)(a1 + 96) >= (v7 + v6))
      {
        v8 = (unsigned __int8 *)(*(_QWORD *)(a1 + 56) + v7);
        for (j = (unsigned __int8 *)i + 50; ; ++j)
        {
          v10 = *v8++;
          if (((*(j - 30) ^ v10) & *j) != 0)
            break;
          if (!--v6)
          {
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
            if (*(_QWORD *)(a1 + 64) == a2)
            {
              v13 = *(_QWORD *)(a1 + 72);
              v14 = *(_QWORD *)(a1 + 80);
              *(_QWORD *)(v14 + 32) = 0;
              v15 = *(_QWORD **)(v13 + 8);
              *(_QWORD *)(v14 + 40) = v15;
              *v15 = v14;
              *(_QWORD *)(v13 + 8) = v14 + 32;
              if (gLogDatapath)
              {
                v20 = __nwlog_obj();
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
                {
                  v21 = *(_QWORD *)(a1 + 88);
                  if (v21)
                    v22 = (const char *)(v21 + 90);
                  else
                    v22 = "";
                  v23 = 136446466;
                  v24 = "nw_protocol_demux_get_input_frames_block_invoke_2";
                  v25 = 2080;
                  v26 = v22;
                  _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %s Found frame matching pattern", (uint8_t *)&v23, 0x16u);
                }
              }
              ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
            }
            else
            {
              v11 = *(_QWORD *)(a1 + 80);
              *(_QWORD *)(v11 + 32) = 0;
              v12 = *(_QWORD **)(extra + 8);
              *(_QWORD *)(v11 + 40) = v12;
              *v12 = v11;
              *(_QWORD *)(extra + 8) = v11 + 32;
              if (gLogDatapath)
              {
                v17 = __nwlog_obj();
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
                {
                  v18 = *(_QWORD *)(a1 + 88);
                  if (v18)
                    v19 = (const char *)(v18 + 90);
                  else
                    v19 = "";
                  v23 = 136446466;
                  v24 = "nw_protocol_demux_get_input_frames_block_invoke";
                  v25 = 2080;
                  v26 = v19;
                  _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %s Found frame matching pattern, pending", (uint8_t *)&v23, 0x16u);
                }
              }
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
            }
            return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
          }
        }
      }
    }
  }
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t ___ZL30nw_protocol_demux_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD);
  const char *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  const char *v17;
  const char *v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  v4 = object;
  if (object)
  {
    v5 = *(_QWORD *)(object + 24);
    if (v5)
    {
      v6 = *(void (**)(uint64_t, _QWORD))(v5 + 48);
      if (v6)
      {
        v6(object, *(_QWORD *)(a1 + 32));
        return 1;
      }
    }
    __nwlog_obj();
    v8 = *(const char **)(v4 + 16);
    if (!v8)
      v8 = "invalid";
  }
  else
  {
    __nwlog_obj();
    v8 = "invalid";
  }
  *(_DWORD *)buf = 136446466;
  v22 = "nw_protocol_demux_disconnected_block_invoke";
  v23 = 2082;
  v24 = v8;
  v9 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_36;
      v12 = "invalid";
      if (v4 && *(_QWORD *)(v4 + 16))
        v12 = *(const char **)(v4 + 16);
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_demux_disconnected_block_invoke";
      v23 = 2082;
      v24 = v12;
      v13 = "%{public}s protocol %{public}s has invalid disconnected callback";
      goto LABEL_35;
    }
    if (!v19)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_36;
      v17 = "invalid";
      if (v4 && *(_QWORD *)(v4 + 16))
        v17 = *(const char **)(v4 + 16);
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_demux_disconnected_block_invoke";
      v23 = 2082;
      v24 = v17;
      v13 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type;
    v15 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v15)
      {
        v16 = "invalid";
        if (v4 && *(_QWORD *)(v4 + 16))
          v16 = *(const char **)(v4 + 16);
        *(_DWORD *)buf = 136446722;
        v22 = "nw_protocol_demux_disconnected_block_invoke";
        v23 = 2082;
        v24 = v16;
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_36;
    }
    if (v15)
    {
      v18 = "invalid";
      if (v4 && *(_QWORD *)(v4 + 16))
        v18 = *(const char **)(v4 + 16);
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_demux_disconnected_block_invoke";
      v23 = 2082;
      v24 = v18;
      v13 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
LABEL_35:
      _os_log_impl(&dword_182FBE000, v10, v11, v13, buf, 0x16u);
    }
  }
LABEL_36:
  if (v9)
    free(v9);
  return 1;
}

void nw_protocol_demux_destroy(char *a1)
{
  void *v2;
  char *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  _QWORD *v6;
  void (*v7)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  _BOOL4 v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  os_log_type_t log;
  NSObject *loga;
  os_log_type_t logb;
  NSObject *v22;
  const char *backtrace_string;
  NSObject *v24;
  char *v25;
  _QWORD v26[5];
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*((char **)a1 + 5) != a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v30 = "nw_protocol_demux_destroy";
    v2 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v2))
    {
      __break(1u);
      return;
    }
    free(v2);
  }
  if (gLogDatapath)
  {
    v17 = __nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_protocol_demux_destroy";
      v31 = 2080;
      v32 = a1 + 90;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %s Destroying protocol", buf, 0x16u);
    }
  }
  v3 = (char *)*((_QWORD *)a1 + 10);
  if (v3)
  {
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 0x40000000;
    v26[2] = ___ZL25nw_protocol_demux_destroyP8nw_demux_block_invoke;
    v26[3] = &__block_descriptor_tmp_20_25898;
    v26[4] = a1;
    nw_hash_table_apply(v3, (uint64_t)v26);
    v5 = (os_unfair_lock_s *)*((_QWORD *)a1 + 10);
    if (v5)
    {
      _nw_hash_table_release(v5, v4);
      *((_QWORD *)a1 + 10) = 0;
    }
  }
  v6 = (_QWORD *)*((_QWORD *)a1 + 8);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        if (!v6)
          goto LABEL_29;
        v7 = (void (*)(_QWORD *, _QWORD, uint64_t))v6[10];
        v8 = (_QWORD *)v6[4];
        if (!v7)
          break;
        v9 = v6[11];
        v6[10] = 0;
        v6[11] = 0;
        v7(v6, 0, v9);
        v6 = v8;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v30 = "__nw_frame_finalize";
      v10 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v27 = 0;
      v25 = (char *)v10;
      if (__nwlog_fault(v10, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v22 = __nwlog_obj();
          log = type;
          if (!os_log_type_enabled(v22, type))
            goto LABEL_26;
          *(_DWORD *)buf = 136446210;
          v30 = "__nw_frame_finalize";
          v11 = v22;
          v12 = log;
          v13 = "%{public}s called with null frame->finalizer";
LABEL_25:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
          goto LABEL_26;
        }
        if (!v27)
        {
          v24 = __nwlog_obj();
          logb = type;
          if (!os_log_type_enabled(v24, type))
            goto LABEL_26;
          *(_DWORD *)buf = 136446210;
          v30 = "__nw_frame_finalize";
          v11 = v24;
          v12 = logb;
          v13 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
          goto LABEL_25;
        }
        backtrace_string = __nw_create_backtrace_string();
        loga = __nwlog_obj();
        v18 = type;
        v14 = os_log_type_enabled(loga, type);
        v15 = (char *)backtrace_string;
        if (!backtrace_string)
        {
          if (!v14)
            goto LABEL_26;
          *(_DWORD *)buf = 136446210;
          v30 = "__nw_frame_finalize";
          v11 = loga;
          v12 = v18;
          v13 = "%{public}s called with null frame->finalizer, no backtrace";
          goto LABEL_25;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "__nw_frame_finalize";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, loga, v18, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", buf, 0x16u);
          v15 = (char *)backtrace_string;
        }
        free(v15);
      }
LABEL_26:
      if (v25)
        free(v25);
      v6 = v8;
    }
  }
LABEL_29:
  nw_protocol_remove_instance((uint64_t)a1);
  v16 = *((_QWORD *)a1 + 4);
  if (v16)
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)(v16 + 24) + 8))(v16, a1);
    nw_protocol_set_output_handler((uint64_t)a1, 0);
  }
  free(a1);
}

uint64_t ___ZL38nw_protocol_demux_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD);
  const char *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  const char *v17;
  const char *v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  v4 = object;
  if (object)
  {
    v5 = *(_QWORD *)(object + 24);
    if (v5)
    {
      v6 = *(void (**)(uint64_t, _QWORD))(v5 + 48);
      if (v6)
      {
        v6(object, *(_QWORD *)(a1 + 32));
        return 1;
      }
    }
    __nwlog_obj();
    v8 = *(const char **)(v4 + 16);
    if (!v8)
      v8 = "invalid";
  }
  else
  {
    __nwlog_obj();
    v8 = "invalid";
  }
  *(_DWORD *)buf = 136446466;
  v22 = "nw_protocol_demux_remove_input_handler_block_invoke";
  v23 = 2082;
  v24 = v8;
  v9 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_36;
      v12 = "invalid";
      if (v4 && *(_QWORD *)(v4 + 16))
        v12 = *(const char **)(v4 + 16);
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_demux_remove_input_handler_block_invoke";
      v23 = 2082;
      v24 = v12;
      v13 = "%{public}s protocol %{public}s has invalid disconnected callback";
      goto LABEL_35;
    }
    if (!v19)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_36;
      v17 = "invalid";
      if (v4 && *(_QWORD *)(v4 + 16))
        v17 = *(const char **)(v4 + 16);
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_demux_remove_input_handler_block_invoke";
      v23 = 2082;
      v24 = v17;
      v13 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type;
    v15 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v15)
      {
        v16 = "invalid";
        if (v4 && *(_QWORD *)(v4 + 16))
          v16 = *(const char **)(v4 + 16);
        *(_DWORD *)buf = 136446722;
        v22 = "nw_protocol_demux_remove_input_handler_block_invoke";
        v23 = 2082;
        v24 = v16;
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_36;
    }
    if (v15)
    {
      v18 = "invalid";
      if (v4 && *(_QWORD *)(v4 + 16))
        v18 = *(const char **)(v4 + 16);
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_demux_remove_input_handler_block_invoke";
      v23 = 2082;
      v24 = v18;
      v13 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
LABEL_35:
      _os_log_impl(&dword_182FBE000, v10, v11, v13, buf, 0x16u);
    }
  }
LABEL_36:
  if (v9)
    free(v9);
  return 1;
}

BOOL nw_protocol_demux_destroy_entry(uint64_t a1, uint64_t a2)
{
  _QWORD *extra;
  _QWORD *v5;
  void (*v6)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  _BOOL4 v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  char *v24;
  _BOOL4 v25;
  os_log_type_t v27;
  os_log_type_t log;
  NSObject *loga;
  os_log_type_t logb;
  NSObject *v31;
  const char *backtrace_string;
  NSObject *v33;
  char *v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  extra = (_QWORD *)nw_hash_node_get_extra(a2);
  v5 = (_QWORD *)*extra;
  if (*extra)
  {
    while (1)
    {
      while (1)
      {
        if (!v5)
          goto LABEL_22;
        v6 = (void (*)(_QWORD *, _QWORD, uint64_t))v5[10];
        v7 = (_QWORD *)v5[4];
        if (!v6)
          break;
        v8 = v5[11];
        v5[10] = 0;
        v5[11] = 0;
        v6(v5, 0, v8);
        v5 = v7;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v38 = "__nw_frame_finalize";
      v9 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v35 = 0;
      v34 = (char *)v9;
      if (__nwlog_fault(v9, &type, &v35))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v31 = __nwlog_obj();
          log = type;
          if (!os_log_type_enabled(v31, type))
            goto LABEL_19;
          *(_DWORD *)buf = 136446210;
          v38 = "__nw_frame_finalize";
          v10 = v31;
          v11 = log;
          v12 = "%{public}s called with null frame->finalizer";
LABEL_18:
          _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
          goto LABEL_19;
        }
        if (!v35)
        {
          v33 = __nwlog_obj();
          logb = type;
          if (!os_log_type_enabled(v33, type))
            goto LABEL_19;
          *(_DWORD *)buf = 136446210;
          v38 = "__nw_frame_finalize";
          v10 = v33;
          v11 = logb;
          v12 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
          goto LABEL_18;
        }
        backtrace_string = __nw_create_backtrace_string();
        loga = __nwlog_obj();
        v27 = type;
        v13 = os_log_type_enabled(loga, type);
        v14 = (char *)backtrace_string;
        if (!backtrace_string)
        {
          if (!v13)
            goto LABEL_19;
          *(_DWORD *)buf = 136446210;
          v38 = "__nw_frame_finalize";
          v10 = loga;
          v11 = v27;
          v12 = "%{public}s called with null frame->finalizer, no backtrace";
          goto LABEL_18;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "__nw_frame_finalize";
          v39 = 2082;
          v40 = backtrace_string;
          _os_log_impl(&dword_182FBE000, loga, v27, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", buf, 0x16u);
          v14 = (char *)backtrace_string;
        }
        free(v14);
      }
LABEL_19:
      if (v34)
        free(v34);
      v5 = v7;
    }
  }
LABEL_22:
  v15 = (_QWORD *)extra[2];
  if (v15)
  {
    do
    {
      v17 = (_QWORD *)*v15;
      v16 = (_QWORD *)v15[1];
      if (*v15)
      {
        v17[1] = v16;
        v16 = (_QWORD *)v15[1];
      }
      else
      {
        extra[3] = v16;
      }
      *v16 = v17;
      *v15 = 0;
      v15[1] = 0;
      if (v15 != extra + 4)
        free(v15);
      v15 = v17;
    }
    while (v17);
  }
  v18 = nw_hash_table_remove_node(*(_QWORD *)(a1 + 80), a2);
  if (!v18)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (const char *)(a1 + 90);
    *(_DWORD *)buf = 136446466;
    v38 = "nw_protocol_demux_destroy_entry";
    v39 = 2080;
    v40 = (const char *)(a1 + 90);
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v20, &type, &v35))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      v22 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      *(_DWORD *)buf = 136446466;
      v38 = "nw_protocol_demux_destroy_entry";
      v39 = 2080;
      v40 = v19;
      v23 = "%{public}s %s nw_hash_table_remove_node failed";
    }
    else if (v35)
    {
      v24 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      v22 = type;
      v25 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v24)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446722;
          v38 = "nw_protocol_demux_destroy_entry";
          v39 = 2080;
          v40 = v19;
          v41 = 2082;
          v42 = v24;
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s %s nw_hash_table_remove_node failed, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v24);
        goto LABEL_45;
      }
      if (!v25)
      {
LABEL_45:
        if (v20)
          free(v20);
        return v18;
      }
      *(_DWORD *)buf = 136446466;
      v38 = "nw_protocol_demux_destroy_entry";
      v39 = 2080;
      v40 = v19;
      v23 = "%{public}s %s nw_hash_table_remove_node failed, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      v22 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_45;
      *(_DWORD *)buf = 136446466;
      v38 = "nw_protocol_demux_destroy_entry";
      v39 = 2080;
      v40 = v19;
      v23 = "%{public}s %s nw_hash_table_remove_node failed, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v21, v22, v23, buf, 0x16u);
    goto LABEL_45;
  }
  return v18;
}

uint64_t ___ZL25nw_protocol_demux_destroyP8nw_demux_block_invoke(uint64_t a1, uint64_t a2)
{
  nw_protocol_demux_destroy_entry(*(_QWORD *)(a1 + 32), a2);
  return 1;
}

uint64_t ___ZL35nw_demux_options_copy_pattern_chainP19nw_protocol_optionsP21nw_demux_pattern_headP16nw_demux_pattern_block_invoke(uint64_t a1, uint64_t **a2)
{
  nw_demux_copy_pattern_chain(a2, *(_QWORD **)(a1 + 32), *(_DWORD **)(a1 + 40));
  return 1;
}

void nw_demux_copy_pattern_chain(uint64_t **a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t *v4;
  void *v6;
  void *v7;
  _QWORD *v8;
  _DWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char *v18;
  _BOOL4 v19;
  void *v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_demux_copy_pattern_chain";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v12, &type, &v21))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_demux_copy_pattern_chain";
      v15 = "%{public}s called with null old_head";
      goto LABEL_40;
    }
    if (!v21)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_demux_copy_pattern_chain";
      v15 = "%{public}s called with null old_head, backtrace limit exceeded";
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v17 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (!v17)
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_demux_copy_pattern_chain";
      v15 = "%{public}s called with null old_head, no backtrace";
      goto LABEL_40;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v24 = "nw_demux_copy_pattern_chain";
      v25 = 2082;
      v26 = (uint64_t)backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null old_head, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_41:
    if (!v12)
      return;
    goto LABEL_42;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_demux_copy_pattern_chain";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v12, &type, &v21))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_demux_copy_pattern_chain";
      v15 = "%{public}s called with null new_head";
      goto LABEL_40;
    }
    if (!v21)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_demux_copy_pattern_chain";
      v15 = "%{public}s called with null new_head, backtrace limit exceeded";
      goto LABEL_40;
    }
    v18 = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v19 = os_log_type_enabled(v13, type);
    if (v18)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_demux_copy_pattern_chain";
        v25 = 2082;
        v26 = (uint64_t)v18;
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null new_head, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v18);
      if (!v12)
        return;
LABEL_42:
      free(v12);
      return;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_demux_copy_pattern_chain";
      v15 = "%{public}s called with null new_head, no backtrace";
LABEL_40:
      _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      goto LABEL_41;
    }
    goto LABEL_41;
  }
  v4 = *a1;
  if (*a1)
  {
    v6 = a3 + 5;
    v7 = (char *)a3 + 50;
    do
    {
      if (a3 && !*a2)
      {
        a3[4] = *((_DWORD *)v4 + 4);
        memcpy(v6, (char *)v4 + 20, *((unsigned __int16 *)v4 + 9));
        memcpy(v7, (char *)v4 + 50, *((unsigned __int16 *)v4 + 9));
        *(_QWORD *)a3 = 0;
        v8 = (_QWORD *)a2[1];
        *((_QWORD *)a3 + 1) = v8;
        *v8 = a3;
        v9 = a3;
      }
      else
      {
        v9 = malloc_type_calloc(1uLL, 0x50uLL, 0xEAFB8F1AuLL);
        if (!v9)
        {
          v11 = __nwlog_obj();
          os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446722;
          v24 = "strict_calloc";
          v25 = 2048;
          v26 = 1;
          v27 = 2048;
          v28 = 80;
          v20 = (void *)_os_log_send_and_compose_impl();
          if (__nwlog_abort((uint64_t)v20))
          {
            __break(1u);
            return;
          }
          free(v20);
        }
        v9[4] = *((_DWORD *)v4 + 4);
        memcpy(v9 + 5, (char *)v4 + 20, *((unsigned __int16 *)v4 + 9));
        memcpy((char *)v9 + 50, (char *)v4 + 50, *((unsigned __int16 *)v4 + 9));
        *(_QWORD *)v9 = 0;
        v10 = (_QWORD *)a2[1];
        *((_QWORD *)v9 + 1) = v10;
        *v10 = v9;
      }
      a2[1] = v9;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
}

void *nw_protocol_demux_copy_definition()
{
  void *result;

  if (nw_protocol_demux_copy_definition::onceToken != -1)
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
  result = (void *)nw_protocol_demux_copy_definition::definition;
  if (nw_protocol_demux_copy_definition::definition)
    return os_retain((void *)nw_protocol_demux_copy_definition::definition);
  return result;
}

BOOL __nw_protocol_demux_copy_definition_block_invoke()
{
  if (nw_protocol_demux_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_demux_identifier::onceToken, &__block_literal_global_25737);
  nw_protocol_demux_copy_definition::definition = (uint64_t)nw_protocol_definition_create_with_identifier((__int128 *)&g_demux_protocol_identifier);
  nw_protocol_definition_set_options_allocator((void *)nw_protocol_demux_copy_definition::definition, (uint64_t)nw_demux_allocate_options, (uint64_t)nw_demux_copy_options, (uint64_t)nw_demux_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_demux_copy_definition::definition, (uint64_t)nw_demux_option_is_equal);
  return nw_protocol_register_handle((uint64_t)&g_demux_protocol_identifier, (void *)nw_protocol_demux_copy_definition::definition, (uint64_t)nw_protocol_demux_create, 0);
}

BOOL nw_demux_allocate_options(nw_protocol_definition *a1)
{
  _QWORD *v1;
  _BOOL8 result;
  NSObject *v3;
  void *v4;

  v1 = malloc_type_calloc(1uLL, 0x60uLL, 0xEAFB8F1AuLL);
  if (v1)
    goto LABEL_2;
  v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  v4 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
LABEL_2:
    *v1 = 0;
    v1[1] = v1;
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

BOOL nw_demux_copy_options(nw_protocol_definition *a1, uint64_t **a2)
{
  _QWORD *v3;
  _BOOL8 result;
  NSObject *v5;
  void *v6;

  v3 = malloc_type_calloc(1uLL, 0x60uLL, 0xEAFB8F1AuLL);
  if (v3)
    goto LABEL_2;
  v5 = __nwlog_obj();
  os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  v6 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v6);
  if (!result)
  {
    free(v6);
LABEL_2:
    *v3 = 0;
    v3[1] = v3;
    nw_demux_copy_pattern_chain(a2, v3, (_DWORD *)v3 + 4);
    return (BOOL)v3;
  }
  __break(1u);
  return result;
}

void nw_demux_deallocate_options(nw_protocol_definition *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  char **v5;
  char *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = (char *)*a2;
    if (*a2)
    {
      v4 = (char *)(a2 + 2);
      do
      {
        v6 = *(char **)v3;
        v5 = (char **)*((_QWORD *)v3 + 1);
        if (*(_QWORD *)v3)
        {
          *((_QWORD *)v6 + 1) = v5;
          v5 = (char **)*((_QWORD *)v3 + 1);
        }
        else
        {
          a2[1] = v5;
        }
        *v5 = v6;
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v3 + 1) = 0;
        if (v3 != v4)
          free(v3);
        v3 = v6;
      }
      while (v6);
    }
    free(a2);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_demux_free_pattern_chain";
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_demux_free_pattern_chain";
      v10 = "%{public}s called with null head";
      goto LABEL_24;
    }
    if (!v13)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_demux_free_pattern_chain";
      v10 = "%{public}s called with null head, backtrace limit exceeded";
      goto LABEL_24;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = type;
    v12 = os_log_type_enabled(v8, type);
    if (backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_demux_free_pattern_chain";
        v17 = 2082;
        v18 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null head, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_25;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446210;
      v16 = "nw_demux_free_pattern_chain";
      v10 = "%{public}s called with null head, no backtrace";
LABEL_24:
      _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    }
  }
LABEL_25:
  if (v7)
    free(v7);
}

